// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package nginx_server

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_nginx_one_nginx_instance "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nginx/one/nginx_instance"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DataplaneReference) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DataplaneReference) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DataplaneReference) DeepCopy() *DataplaneReference {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DataplaneReference{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DataplaneReference) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DataplaneReference) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DataplaneReferenceValidator().Validate(ctx, m, opts...)
}

func (m *DataplaneReference) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDataplaneRefDRefInfo()

}

func (m *DataplaneReference) GetDataplaneRefDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDataplaneRef().(type) {
	case *DataplaneReference_NginxInstance:

		vref := m.GetNginxInstance()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("nginx_instance.Object")
		dri := db.DRefInfo{
			RefdType:   "nginx_instance.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "nginx_instance",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *DataplaneReference_NginxCsg:

		vref := m.GetNginxCsg()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("nginx_csg.Object")
		dri := db.DRefInfo{
			RefdType:   "nginx_csg.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "nginx_csg",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDataplaneRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DataplaneReference) GetDataplaneRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDataplaneRef().(type) {
	case *DataplaneReference_NginxInstance:
		refdType, err := d.TypeForEntryKind("", "", "nginx_instance.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: nginx_instance")
		}

		vref := m.GetNginxInstance()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "nginx_instance.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *DataplaneReference_NginxCsg:
		refdType, err := d.TypeForEntryKind("", "", "nginx_csg.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: nginx_csg")
		}

		vref := m.GetNginxCsg()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "nginx_csg.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateDataplaneReference struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDataplaneReference) DataplaneRefValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dataplane_ref")
	}
	return validatorFn, nil
}

func (v *ValidateDataplaneReference) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DataplaneReference)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DataplaneReference got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dataplane_ref"]; exists {
		val := m.GetDataplaneRef()
		vOpts := append(opts,
			db.WithValidateField("dataplane_ref"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDataplaneRef().(type) {
	case *DataplaneReference_NginxInstance:
		if fv, exists := v.FldValidators["dataplane_ref.nginx_instance"]; exists {
			val := m.GetDataplaneRef().(*DataplaneReference_NginxInstance).NginxInstance
			vOpts := append(opts,
				db.WithValidateField("dataplane_ref"),
				db.WithValidateField("nginx_instance"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DataplaneReference_NginxCsg:
		if fv, exists := v.FldValidators["dataplane_ref.nginx_csg"]; exists {
			val := m.GetDataplaneRef().(*DataplaneReference_NginxCsg).NginxCsg
			vOpts := append(opts,
				db.WithValidateField("dataplane_ref"),
				db.WithValidateField("nginx_csg"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDataplaneReferenceValidator = func() *ValidateDataplaneReference {
	v := &ValidateDataplaneReference{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDataplaneRef := v.DataplaneRefValidationRuleHandler
	rulesDataplaneRef := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDataplaneRef(rulesDataplaneRef)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DataplaneReference.dataplane_ref: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dataplane_ref"] = vFn

	v.FldValidators["dataplane_ref.nginx_instance"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["dataplane_ref.nginx_csg"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DataplaneReferenceValidator() db.Validator {
	return DefaultDataplaneReferenceValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDataplaneRefDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDataplaneRefDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDataplaneRef() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDataplaneRef().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDataplaneRef().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "dataplane_ref." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ServerSpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for server_spec")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ServerValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DataplaneRefValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for dataplane_ref")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DataplaneReferenceValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dataplane_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("dataplane_ref"))
		if err := fv(ctx, m.GetDataplaneRef(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("server_spec"))
		if err := fv(ctx, m.GetServerSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerSpec := v.ServerSpecValidationRuleHandler
	rulesServerSpec := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServerSpec(rulesServerSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.server_spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_spec"] = vFn

	vrhDataplaneRef := v.DataplaneRefValidationRuleHandler
	rulesDataplaneRef := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDataplaneRef(rulesDataplaneRef)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.dataplane_ref: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dataplane_ref"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDataplaneRefDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDataplaneRefDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDataplaneRefDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDataplaneRef() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDataplaneRef().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDataplaneRef().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "dataplane_ref." + dri.DRField
	}
	return drInfos, err

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ServerSpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for server_spec")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ServerValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DataplaneRefValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for dataplane_ref")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DataplaneReferenceValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dataplane_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("dataplane_ref"))
		if err := fv(ctx, m.GetDataplaneRef(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("server_spec"))
		if err := fv(ctx, m.GetServerSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerSpec := v.ServerSpecValidationRuleHandler
	rulesServerSpec := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServerSpec(rulesServerSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.server_spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_spec"] = vFn

	vrhDataplaneRef := v.DataplaneRefValidationRuleHandler
	rulesDataplaneRef := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDataplaneRef(rulesDataplaneRef)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.dataplane_ref: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dataplane_ref"] = vFn

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Location) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Location) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Location) DeepCopy() *Location {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Location{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Location) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Location) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LocationValidator().Validate(ctx, m, opts...)
}

type ValidateLocation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLocation) DefinitionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for definition")
	}

	return validatorFn, nil
}

func (v *ValidateLocation) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateLocation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Location)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Location got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_discovery_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("api_discovery_spec"))
		if err := fv(ctx, m.GetApiDiscoverySpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["definition"]; exists {

		vOpts := append(opts, db.WithValidateField("definition"))
		if err := fv(ctx, m.GetDefinition(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_spec"))
		if err := fv(ctx, m.GetWafSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLocationValidator = func() *ValidateLocation {
	v := &ValidateLocation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDefinition := v.DefinitionValidationRuleHandler
	rulesDefinition := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDefinition(rulesDefinition)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Location.definition: %s", err)
		panic(errMsg)
	}
	v.FldValidators["definition"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Location.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	v.FldValidators["waf_spec"] = ves_io_schema_nginx_one_nginx_instance.WAFSpecValidator().Validate

	v.FldValidators["api_discovery_spec"] = ves_io_schema_nginx_one_nginx_instance.APIDiscoverySpecValidator().Validate

	return v
}()

func LocationValidator() db.Validator {
	return DefaultLocationValidator
}

// augmented methods on protoc/std generated struct

func (m *Server) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Server) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Server) DeepCopy() *Server {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Server{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Server) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Server) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServerValidator().Validate(ctx, m, opts...)
}

type ValidateServer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServer) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateServer) LocationsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for locations")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Location, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := LocationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for locations")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Location)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Location, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated locations")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items locations")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateServer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Server)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Server got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_discovery_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("api_discovery_spec"))
		if err := fv(ctx, m.GetApiDiscoverySpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["locations"]; exists {
		vOpts := append(opts, db.WithValidateField("locations"))
		if err := fv(ctx, m.GetLocations(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_spec"))
		if err := fv(ctx, m.GetWafSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServerValidator = func() *ValidateServer {
	v := &ValidateServer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Server.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhLocations := v.LocationsValidationRuleHandler
	rulesLocations := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
	}
	vFn, err = vrhLocations(rulesLocations)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Server.locations: %s", err)
		panic(errMsg)
	}
	v.FldValidators["locations"] = vFn

	v.FldValidators["waf_spec"] = ves_io_schema_nginx_one_nginx_instance.WAFSpecValidator().Validate

	v.FldValidators["api_discovery_spec"] = ves_io_schema_nginx_one_nginx_instance.APIDiscoverySpecValidator().Validate

	return v
}()

func ServerValidator() db.Validator {
	return DefaultServerValidator
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DataplaneRef = f.GetDataplaneRef()
	m.ServerSpec = f.GetServerSpec()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DataplaneRef = m1.DataplaneRef
	f.ServerSpec = m1.ServerSpec
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nginx/one/nginx_server/types.proto

package nginx_server

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	nginx_instance "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nginx/one/nginx_instance"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Specification"
type GlobalSpecType struct {
	// nginx_instance
	//
	// x-displayName: "NGINX Instance"
	// x-required
	// This is reference to the NGINX instance that has this NGINX server configured
	NginxInstance []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=nginx_instance,json=nginxInstance,proto3" json:"nginx_instance,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,6,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// server_spec
	//
	// x-displayName: "Server Specification"
	// x-required
	// Configuration for this server
	ServerSpec *Server `protobuf:"bytes,7,opt,name=server_spec,json=serverSpec,proto3" json:"server_spec,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7231f424f00d4961, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetNginxInstance() []*schema.ObjectRefType {
	if m != nil {
		return m.NginxInstance
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetServerSpec() *Server {
	if m != nil {
		return m.ServerSpec
	}
	return nil
}

type Server struct {
	// domains
	//
	// x-displayName: "Domains"
	// x-required
	// Server name list specified as ${server_name} in nginx config. If no value is
	// specified corresponding to this variable, "default" is used
	// Reference: https://nginx.org/en/docs/http/ngx_http_core_module.html#server
	// Note: This is an extension of what is stored in metadata.name
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// waf_spec
	//
	// x-displayName: "WAFSpec"
	// If specified, the value signifies the WAF configuration in this server context
	WafSpec *nginx_instance.WAFSpec `protobuf:"bytes,2,opt,name=waf_spec,json=wafSpec,proto3" json:"waf_spec,omitempty"`
	// api_discovery_spec
	//
	// x-displayName: "APIDiscoverySpec"
	// If specified, the value signifies the apiDiscovery configuration
	// in this server context
	ApiDiscoverySpec *nginx_instance.APIDiscoverySpec `protobuf:"bytes,3,opt,name=api_discovery_spec,json=apiDiscoverySpec,proto3" json:"api_discovery_spec,omitempty"`
	// locations
	//
	// x-displayName: "Locations"
	// Configuration of the set of locations corresponding to this server
	Locations []*Location `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *Server) Reset()      { *m = Server{} }
func (*Server) ProtoMessage() {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_7231f424f00d4961, []int{1}
}
func (m *Server) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return m.Size()
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Server) GetWafSpec() *nginx_instance.WAFSpec {
	if m != nil {
		return m.WafSpec
	}
	return nil
}

func (m *Server) GetApiDiscoverySpec() *nginx_instance.APIDiscoverySpec {
	if m != nil {
		return m.ApiDiscoverySpec
	}
	return nil
}

func (m *Server) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

type Location struct {
	// definition
	//
	// x-displayName: "Definition"
	// x-required
	// Location definition specified as the attributes of ${location} block in nginx config.
	// This includes both the optional_modifier and the location_match combined.
	// A location can either be defined by a prefix string, or by a regular expression.
	// Reference: https://nginx.org/en/docs/http/ngx_http_core_module.html#location
	// x-example: "~* \.(jpg|png|gif)$"
	Definition string `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	// waf_spec
	//
	// x-displayName: "WAFSpec"
	// If specified, the value signifies the WAF configuration in this location context
	WafSpec *nginx_instance.WAFSpec `protobuf:"bytes,2,opt,name=waf_spec,json=wafSpec,proto3" json:"waf_spec,omitempty"`
	// api_discovery_spec
	//
	// x-displayName: "APIDiscoverySpec"
	// If specified, the value signifies the apiDiscovery configuration
	// in this location context
	ApiDiscoverySpec *nginx_instance.APIDiscoverySpec `protobuf:"bytes,3,opt,name=api_discovery_spec,json=apiDiscoverySpec,proto3" json:"api_discovery_spec,omitempty"`
	// name
	//
	// x-displayName: "name"
	// x-required
	// Uniqueness identifier for a location definition
	// x-example: "d15ddfad-4d37-48c0-8706-df1824d76d31"
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Location) Reset()      { *m = Location{} }
func (*Location) ProtoMessage() {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_7231f424f00d4961, []int{2}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func (m *Location) GetWafSpec() *nginx_instance.WAFSpec {
	if m != nil {
		return m.WafSpec
	}
	return nil
}

func (m *Location) GetApiDiscoverySpec() *nginx_instance.APIDiscoverySpec {
	if m != nil {
		return m.ApiDiscoverySpec
	}
	return nil
}

func (m *Location) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Get NGINX server block configuration
//
// x-displayName: "Get Request"
// Get NGINX server block configuration
type GetSpecType struct {
	NginxInstance []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=nginx_instance,json=nginxInstance,proto3" json:"nginx_instance,omitempty"`
	ServerSpec    *Server                 `protobuf:"bytes,7,opt,name=server_spec,json=serverSpec,proto3" json:"server_spec,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7231f424f00d4961, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetNginxInstance() []*schema.ObjectRefType {
	if m != nil {
		return m.NginxInstance
	}
	return nil
}

func (m *GetSpecType) GetServerSpec() *Server {
	if m != nil {
		return m.ServerSpec
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nginx.one.nginx_server.GlobalSpecType")
	proto.RegisterType((*Server)(nil), "ves.io.schema.nginx.one.nginx_server.Server")
	proto.RegisterType((*Location)(nil), "ves.io.schema.nginx.one.nginx_server.Location")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nginx.one.nginx_server.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/nginx/one/nginx_server/types.proto", fileDescriptor_7231f424f00d4961)
}

var fileDescriptor_7231f424f00d4961 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x25, 0xce, 0x8f, 0x5e, 0x68, 0x65, 0x2c, 0x06, 0xf7, 0x87, 0x8e, 0x28, 0x62, 0xe8,
	0x40, 0xcf, 0xa8, 0x2c, 0x88, 0x01, 0xa9, 0x05, 0x51, 0x35, 0x02, 0x81, 0x5c, 0x24, 0x44, 0x25,
	0x14, 0x2e, 0xce, 0xd9, 0x3d, 0x70, 0xee, 0x2c, 0xdb, 0x4d, 0x9b, 0xa1, 0x12, 0x7f, 0x02, 0xaa,
	0xf8, 0x23, 0x50, 0x37, 0x36, 0x04, 0x0b, 0x23, 0x42, 0x0c, 0x1d, 0x3b, 0x52, 0x77, 0x29, 0x5b,
	0x47, 0x46, 0xe4, 0xb3, 0x4d, 0x63, 0x23, 0x4a, 0x85, 0x58, 0x98, 0xf2, 0xde, 0xfb, 0xde, 0xf7,
	0xbd, 0xe7, 0x77, 0xef, 0x2e, 0xf0, 0xda, 0x90, 0x06, 0x98, 0x09, 0x23, 0xb0, 0x36, 0xe8, 0x80,
	0x18, 0xdc, 0x61, 0x7c, 0xdb, 0x10, 0x9c, 0x26, 0x56, 0x37, 0xa0, 0xfe, 0x90, 0xfa, 0x46, 0x38,
	0xf2, 0x68, 0x80, 0x3d, 0x5f, 0x84, 0x42, 0xbb, 0x92, 0x30, 0x70, 0xc2, 0xc0, 0x32, 0x0f, 0x0b,
	0x4e, 0xf1, 0x38, 0x63, 0x66, 0xc1, 0x61, 0xe1, 0xc6, 0x66, 0x0f, 0x5b, 0x62, 0x60, 0x38, 0xc2,
	0x11, 0x86, 0x24, 0xf7, 0x36, 0x6d, 0xe9, 0x49, 0x47, 0x5a, 0x89, 0xe8, 0xcc, 0xb4, 0x23, 0x84,
	0xe3, 0xd2, 0xd3, 0x2c, 0xc2, 0x47, 0x29, 0xb4, 0x78, 0x76, 0x87, 0x8c, 0x07, 0x21, 0xe1, 0x16,
	0x1d, 0xef, 0x71, 0x66, 0x36, 0xcf, 0x11, 0x5e, 0xc8, 0x04, 0xcf, 0xc0, 0xe9, 0x3c, 0x38, 0xce,
	0x9b, 0xcb, 0x43, 0x43, 0xe2, 0xb2, 0x3e, 0x09, 0x69, 0x8a, 0xb6, 0x0a, 0x28, 0xa3, 0x5b, 0xdd,
	0xbc, 0xf4, 0xe5, 0x5f, 0x33, 0x82, 0xf1, 0x02, 0xed, 0x77, 0x65, 0x38, 0xb5, 0xe2, 0x8a, 0x1e,
	0x71, 0xd7, 0x3c, 0x6a, 0x3d, 0x1a, 0x79, 0x54, 0x7b, 0x06, 0xa7, 0xf2, 0x5f, 0xa2, 0x83, 0x56,
	0x65, 0xbe, 0xb9, 0x38, 0x87, 0xf3, 0x83, 0x7e, 0xd0, 0x7b, 0x4e, 0xad, 0xd0, 0xa4, 0x76, 0xcc,
	0x5a, 0x9e, 0xdd, 0xdb, 0x29, 0xd0, 0xde, 0x7f, 0xfb, 0x58, 0xa9, 0xee, 0x82, 0xb2, 0x0a, 0xcc,
	0x49, 0x89, 0xac, 0xa6, 0x80, 0xf6, 0x14, 0x4e, 0xca, 0x5e, 0x19, 0x0f, 0xa9, 0xcf, 0x89, 0xab,
	0xd7, 0x5a, 0x60, 0xbe, 0xb9, 0xd8, 0x2e, 0x14, 0x90, 0xdd, 0x16, 0xca, 0x5c, 0xda, 0xdb, 0xc9,
	0x73, 0x8f, 0x3f, 0x00, 0x60, 0x5e, 0x88, 0x43, 0xab, 0x69, 0x44, 0xbb, 0x0f, 0x9b, 0xc9, 0xa1,
	0x77, 0x03, 0x8f, 0x5a, 0x7a, 0x5d, 0x8a, 0x5f, 0xc5, 0xe7, 0x59, 0x13, 0xbc, 0x26, 0x7f, 0x4c,
	0x98, 0xb8, 0xf1, 0x4c, 0x3a, 0x4a, 0xa3, 0xac, 0x56, 0x3a, 0x4a, 0xa3, 0xa2, 0x2a, 0x1d, 0xa5,
	0xa1, 0xa8, 0xd5, 0x8e, 0xd2, 0xa8, 0xaa, 0xb5, 0xf6, 0xdb, 0x32, 0xac, 0x25, 0xe9, 0x9a, 0x0e,
	0xeb, 0x7d, 0x31, 0x20, 0x8c, 0x07, 0x72, 0x56, 0x13, 0x66, 0xe6, 0x6a, 0x1d, 0xd8, 0xd8, 0x22,
	0x76, 0xd2, 0x48, 0x59, 0x36, 0x62, 0xfc, 0xa1, 0x91, 0x6c, 0x7c, 0xf8, 0xf1, 0xd2, 0xdd, 0xb8,
	0xbe, 0x59, 0xdf, 0x22, 0x76, 0x6c, 0x68, 0x36, 0xd4, 0x88, 0xc7, 0xba, 0x7d, 0x16, 0x58, 0x62,
	0x48, 0xfd, 0x51, 0xa2, 0x5a, 0x91, 0xaa, 0x37, 0xce, 0xab, 0xba, 0xf4, 0x70, 0xf5, 0x4e, 0x26,
	0x20, 0xe5, 0x55, 0xe2, 0xb1, 0x5c, 0x44, 0x7b, 0x02, 0x27, 0x5c, 0x61, 0x11, 0xb9, 0x47, 0xba,
	0x22, 0xcf, 0x1e, 0x9f, 0x6f, 0x7a, 0xf7, 0x52, 0xda, 0x72, 0x33, 0x3e, 0xfc, 0xda, 0x2e, 0xa8,
	0xa8, 0xc7, 0x75, 0xf3, 0x54, 0xad, 0xfd, 0x1d, 0xc0, 0x46, 0x96, 0xa4, 0x21, 0x08, 0xfb, 0xd4,
	0x66, 0x9c, 0xc5, 0x9e, 0x0e, 0x5a, 0x60, 0x7e, 0xc2, 0x1c, 0x8b, 0xfc, 0x97, 0xb3, 0xd3, 0xa0,
	0xc2, 0xc9, 0x80, 0xea, 0x55, 0xf9, 0x35, 0xd2, 0x4e, 0x96, 0xa6, 0xfd, 0x05, 0xc0, 0xe6, 0x0a,
	0x0d, 0x7f, 0x5e, 0xb3, 0xdb, 0x7f, 0x73, 0xcd, 0x8a, 0x37, 0xe9, 0xdf, 0xae, 0xfa, 0xcd, 0x8b,
	0x9f, 0x6f, 0x15, 0x5e, 0x83, 0xdf, 0x6d, 0xff, 0xf2, 0x6b, 0xb0, 0x7f, 0x88, 0x4a, 0x07, 0x87,
	0xa8, 0x74, 0x72, 0x88, 0xc0, 0xcb, 0x08, 0x81, 0x37, 0x11, 0x02, 0x9f, 0x22, 0x04, 0xf6, 0x23,
	0x04, 0x0e, 0x22, 0x04, 0xbe, 0x46, 0x08, 0x1c, 0x47, 0xa8, 0x74, 0x12, 0x21, 0xf0, 0xea, 0x08,
	0x95, 0xf6, 0x8f, 0x50, 0xe9, 0xe0, 0x08, 0x95, 0xd6, 0xd7, 0x1d, 0xe1, 0xbd, 0x70, 0xf0, 0x50,
	0xb8, 0x21, 0xf5, 0x7d, 0x82, 0x37, 0x03, 0x43, 0x1a, 0xb6, 0xf0, 0x07, 0x0b, 0x9e, 0x2f, 0x86,
	0xac, 0x4f, 0xfd, 0x85, 0x0c, 0x36, 0xbc, 0x9e, 0x23, 0x0c, 0xba, 0x1d, 0xa6, 0x6f, 0xd8, 0x99,
	0x7f, 0x0c, 0xbd, 0x9a, 0x7c, 0xd6, 0xae, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x28, 0x30, 0x83,
	0x0c, 0x47, 0x06, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NginxInstance) != len(that1.NginxInstance) {
		return false
	}
	for i := range this.NginxInstance {
		if !this.NginxInstance[i].Equal(that1.NginxInstance[i]) {
			return false
		}
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if !this.ServerSpec.Equal(that1.ServerSpec) {
		return false
	}
	return true
}
func (this *Server) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Server)
	if !ok {
		that2, ok := that.(Server)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if !this.WafSpec.Equal(that1.WafSpec) {
		return false
	}
	if !this.ApiDiscoverySpec.Equal(that1.ApiDiscoverySpec) {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *Location) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Definition != that1.Definition {
		return false
	}
	if !this.WafSpec.Equal(that1.WafSpec) {
		return false
	}
	if !this.ApiDiscoverySpec.Equal(that1.ApiDiscoverySpec) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NginxInstance) != len(that1.NginxInstance) {
		return false
	}
	for i := range this.NginxInstance {
		if !this.NginxInstance[i].Equal(that1.NginxInstance[i]) {
			return false
		}
	}
	if !this.ServerSpec.Equal(that1.ServerSpec) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_server.GlobalSpecType{")
	if this.NginxInstance != nil {
		s = append(s, "NginxInstance: "+fmt.Sprintf("%#v", this.NginxInstance)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.ServerSpec != nil {
		s = append(s, "ServerSpec: "+fmt.Sprintf("%#v", this.ServerSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Server) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nginx_server.Server{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.WafSpec != nil {
		s = append(s, "WafSpec: "+fmt.Sprintf("%#v", this.WafSpec)+",\n")
	}
	if this.ApiDiscoverySpec != nil {
		s = append(s, "ApiDiscoverySpec: "+fmt.Sprintf("%#v", this.ApiDiscoverySpec)+",\n")
	}
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Location) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nginx_server.Location{")
	s = append(s, "Definition: "+fmt.Sprintf("%#v", this.Definition)+",\n")
	if this.WafSpec != nil {
		s = append(s, "WafSpec: "+fmt.Sprintf("%#v", this.WafSpec)+",\n")
	}
	if this.ApiDiscoverySpec != nil {
		s = append(s, "ApiDiscoverySpec: "+fmt.Sprintf("%#v", this.ApiDiscoverySpec)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nginx_server.GetSpecType{")
	if this.NginxInstance != nil {
		s = append(s, "NginxInstance: "+fmt.Sprintf("%#v", this.NginxInstance)+",\n")
	}
	if this.ServerSpec != nil {
		s = append(s, "ServerSpec: "+fmt.Sprintf("%#v", this.ServerSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerSpec != nil {
		{
			size, err := m.ServerSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.NginxInstance) > 0 {
		for iNdEx := len(m.NginxInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NginxInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Server) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Server) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ApiDiscoverySpec != nil {
		{
			size, err := m.ApiDiscoverySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WafSpec != nil {
		{
			size, err := m.WafSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ApiDiscoverySpec != nil {
		{
			size, err := m.ApiDiscoverySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WafSpec != nil {
		{
			size, err := m.WafSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Definition) > 0 {
		i -= len(m.Definition)
		copy(dAtA[i:], m.Definition)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Definition)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerSpec != nil {
		{
			size, err := m.ServerSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NginxInstance) > 0 {
		for iNdEx := len(m.NginxInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NginxInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NginxInstance) > 0 {
		for _, e := range m.NginxInstance {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerSpec != nil {
		l = m.ServerSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Server) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WafSpec != nil {
		l = m.WafSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoverySpec != nil {
		l = m.ApiDiscoverySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Definition)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafSpec != nil {
		l = m.WafSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoverySpec != nil {
		l = m.ApiDiscoverySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NginxInstance) > 0 {
		for _, e := range m.NginxInstance {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServerSpec != nil {
		l = m.ServerSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNginxInstance := "[]*ObjectRefType{"
	for _, f := range this.NginxInstance {
		repeatedStringForNginxInstance += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForNginxInstance += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`NginxInstance:` + repeatedStringForNginxInstance + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ServerSpec:` + strings.Replace(this.ServerSpec.String(), "Server", "Server", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Server) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*Location{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(f.String(), "Location", "Location", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&Server{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`WafSpec:` + strings.Replace(fmt.Sprintf("%v", this.WafSpec), "WAFSpec", "nginx_instance.WAFSpec", 1) + `,`,
		`ApiDiscoverySpec:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoverySpec), "APIDiscoverySpec", "nginx_instance.APIDiscoverySpec", 1) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *Location) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Location{`,
		`Definition:` + fmt.Sprintf("%v", this.Definition) + `,`,
		`WafSpec:` + strings.Replace(fmt.Sprintf("%v", this.WafSpec), "WAFSpec", "nginx_instance.WAFSpec", 1) + `,`,
		`ApiDiscoverySpec:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoverySpec), "APIDiscoverySpec", "nginx_instance.APIDiscoverySpec", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNginxInstance := "[]*ObjectRefType{"
	for _, f := range this.NginxInstance {
		repeatedStringForNginxInstance += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForNginxInstance += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`NginxInstance:` + repeatedStringForNginxInstance + `,`,
		`ServerSpec:` + strings.Replace(this.ServerSpec.String(), "Server", "Server", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NginxInstance = append(m.NginxInstance, &schema.ObjectRefType{})
			if err := m.NginxInstance[len(m.NginxInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerSpec == nil {
				m.ServerSpec = &Server{}
			}
			if err := m.ServerSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafSpec == nil {
				m.WafSpec = &nginx_instance.WAFSpec{}
			}
			if err := m.WafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoverySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoverySpec == nil {
				m.ApiDiscoverySpec = &nginx_instance.APIDiscoverySpec{}
			}
			if err := m.ApiDiscoverySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &Location{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafSpec == nil {
				m.WafSpec = &nginx_instance.WAFSpec{}
			}
			if err := m.WafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoverySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoverySpec == nil {
				m.ApiDiscoverySpec = &nginx_instance.APIDiscoverySpec{}
			}
			if err := m.ApiDiscoverySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NginxInstance = append(m.NginxInstance, &schema.ObjectRefType{})
			if err := m.NginxInstance[len(m.NginxInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerSpec == nil {
				m.ServerSpec = &Server{}
			}
			if err := m.ServerSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nginx/one/nginx_server/public_customapi.proto

// NGINX One Server APIs
//
// x-displayName: "NGINX One Server APIs"
// Public Custom API definition for getting the NGINX One
// servers associated to an NGINX dataplane

package nginx_server

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Get NGINX One Dataplane servers request
//
// x-displayName: "Get NGINX One Dataplane servers request"
// Get NGINX One Dataplane servers request
type GetDataplaneServersRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace of the NGINX One Instance
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Dataplane
	//
	// x-displayName: "Dataplane"
	// x-required
	// This is reference to the NGINX dataplane type that has this NGINX server configured
	DataplaneRef *DataplaneReference `protobuf:"bytes,4,opt,name=dataplane_ref,json=dataplaneRef,proto3" json:"dataplane_ref,omitempty"`
}

func (m *GetDataplaneServersRequest) Reset()      { *m = GetDataplaneServersRequest{} }
func (*GetDataplaneServersRequest) ProtoMessage() {}
func (*GetDataplaneServersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667ad383a631fe1b, []int{0}
}
func (m *GetDataplaneServersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataplaneServersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataplaneServersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataplaneServersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataplaneServersRequest.Merge(m, src)
}
func (m *GetDataplaneServersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDataplaneServersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataplaneServersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataplaneServersRequest proto.InternalMessageInfo

func (m *GetDataplaneServersRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetDataplaneServersRequest) GetDataplaneRef() *DataplaneReference {
	if m != nil {
		return m.DataplaneRef
	}
	return nil
}

// Get NGINX One Dataplane servers response
//
// x-displayName: "Get NGINX One Dataplane servers response"
// Get NGINX One Dataplane servers response
type GetDataplaneServersResponse struct {
	// The NGINX One Servers associated to the dataplane
	//
	// x-displayName: "The NGINX One Servers associated to the dataplane"
	// x-required
	// The NGINX One Servers associated to the dataplane
	Items []*GetDataplaneServerResponse `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *GetDataplaneServersResponse) Reset()      { *m = GetDataplaneServersResponse{} }
func (*GetDataplaneServersResponse) ProtoMessage() {}
func (*GetDataplaneServersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667ad383a631fe1b, []int{1}
}
func (m *GetDataplaneServersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataplaneServersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataplaneServersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataplaneServersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataplaneServersResponse.Merge(m, src)
}
func (m *GetDataplaneServersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDataplaneServersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataplaneServersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataplaneServersResponse proto.InternalMessageInfo

func (m *GetDataplaneServersResponse) GetItems() []*GetDataplaneServerResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetDataplaneServerResponse struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the server object
	Spec *GetSpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *GetDataplaneServerResponse) Reset()      { *m = GetDataplaneServerResponse{} }
func (*GetDataplaneServerResponse) ProtoMessage() {}
func (*GetDataplaneServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667ad383a631fe1b, []int{2}
}
func (m *GetDataplaneServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataplaneServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataplaneServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataplaneServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataplaneServerResponse.Merge(m, src)
}
func (m *GetDataplaneServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDataplaneServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataplaneServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataplaneServerResponse proto.InternalMessageInfo

func (m *GetDataplaneServerResponse) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetDataplaneServerResponse) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *GetDataplaneServerResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDataplaneServersRequest)(nil), "ves.io.schema.nginx.one.nginx_server.GetDataplaneServersRequest")
	golang_proto.RegisterType((*GetDataplaneServersRequest)(nil), "ves.io.schema.nginx.one.nginx_server.GetDataplaneServersRequest")
	proto.RegisterType((*GetDataplaneServersResponse)(nil), "ves.io.schema.nginx.one.nginx_server.GetDataplaneServersResponse")
	golang_proto.RegisterType((*GetDataplaneServersResponse)(nil), "ves.io.schema.nginx.one.nginx_server.GetDataplaneServersResponse")
	proto.RegisterType((*GetDataplaneServerResponse)(nil), "ves.io.schema.nginx.one.nginx_server.GetDataplaneServerResponse")
	golang_proto.RegisterType((*GetDataplaneServerResponse)(nil), "ves.io.schema.nginx.one.nginx_server.GetDataplaneServerResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/nginx/one/nginx_server/public_customapi.proto", fileDescriptor_667ad383a631fe1b)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/nginx/one/nginx_server/public_customapi.proto", fileDescriptor_667ad383a631fe1b)
}

var fileDescriptor_667ad383a631fe1b = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xc7, 0x33, 0x9b, 0xfc, 0x7e, 0xa4, 0xdb, 0x6a, 0x43, 0xbc, 0xc4, 0xb4, 0x4c, 0x43, 0x10,
	0x29, 0xca, 0xee, 0xda, 0x88, 0xa2, 0xad, 0x88, 0xad, 0x42, 0xb1, 0x50, 0x2a, 0x5b, 0xe9, 0xa1,
	0x20, 0x61, 0xb2, 0x79, 0xd9, 0xae, 0x66, 0x67, 0xc6, 0x9d, 0x49, 0x6c, 0x29, 0x05, 0x29, 0xfe,
	0x01, 0x82, 0x9e, 0xbc, 0x0b, 0xde, 0xbd, 0x08, 0xbd, 0xf4, 0x66, 0x2f, 0x4a, 0xd1, 0x4b, 0xf1,
	0x64, 0x37, 0x1e, 0x3c, 0xf6, 0x4f, 0x90, 0xcc, 0x26, 0x69, 0x92, 0x16, 0x89, 0x7a, 0xca, 0xec,
	0xbe, 0xf7, 0xfd, 0xbc, 0x6f, 0xde, 0xdb, 0x79, 0xfa, 0x4c, 0x1d, 0x84, 0xe9, 0x31, 0x4b, 0x38,
	0x6b, 0xe0, 0x13, 0x8b, 0xba, 0x1e, 0x5d, 0xb7, 0x18, 0x85, 0xe8, 0x54, 0x14, 0x10, 0xd4, 0x21,
	0xb0, 0x78, 0xad, 0x54, 0xf5, 0x9c, 0xa2, 0x53, 0x13, 0x92, 0xf9, 0x84, 0x7b, 0x26, 0x0f, 0x98,
	0x64, 0xe9, 0x0b, 0x91, 0xd8, 0x8c, 0xc4, 0xa6, 0x92, 0x98, 0x8c, 0x82, 0xd9, 0x2d, 0xce, 0x1a,
	0xae, 0x27, 0xd7, 0x6a, 0x25, 0xd3, 0x61, 0xbe, 0xe5, 0x32, 0x97, 0x59, 0x4a, 0x5c, 0xaa, 0x55,
	0xd4, 0x93, 0x7a, 0x50, 0xa7, 0x08, 0x9a, 0x1d, 0x77, 0x19, 0x73, 0xab, 0x60, 0x11, 0xee, 0x59,
	0x84, 0x52, 0x26, 0x89, 0xf4, 0x18, 0x15, 0xad, 0xe8, 0xd4, 0x40, 0x7e, 0x59, 0xe9, 0x31, 0x38,
	0xb2, 0x25, 0xb9, 0x32, 0x90, 0x44, 0x6e, 0x70, 0x68, 0x17, 0x19, 0xeb, 0x55, 0x30, 0xde, 0xed,
	0xe0, 0x7c, 0x6f, 0xb0, 0x5b, 0x37, 0xde, 0x1b, 0xaa, 0x93, 0xaa, 0x57, 0x26, 0x12, 0x5a, 0xd1,
	0x7c, 0x5f, 0x14, 0x04, 0xd0, 0x7a, 0x1f, 0x3c, 0xd7, 0x97, 0xe3, 0xc1, 0xb3, 0x62, 0x6f, 0xc6,
	0xc4, 0xc9, 0x0c, 0xd1, 0x6d, 0x22, 0xff, 0x16, 0xe9, 0xd9, 0x79, 0x90, 0xf7, 0x88, 0x24, 0xbc,
	0x4a, 0x28, 0x2c, 0xab, 0xff, 0x27, 0x6c, 0x78, 0x5a, 0x03, 0x21, 0xd3, 0xe3, 0xfa, 0x10, 0x25,
	0x3e, 0x08, 0x4e, 0x1c, 0xc8, 0xa0, 0x1c, 0x9a, 0x1c, 0xb2, 0x8f, 0x5f, 0xa4, 0x1f, 0xe9, 0x67,
	0xca, 0x6d, 0x61, 0x31, 0x80, 0x4a, 0x26, 0x91, 0x43, 0x93, 0xc3, 0x85, 0x1b, 0xe6, 0x20, 0x93,
	0x36, 0x3b, 0x35, 0x6d, 0xa8, 0x40, 0x00, 0xd4, 0x01, 0x7b, 0xa4, 0xdc, 0xf5, 0x6e, 0x21, 0x91,
	0xd4, 0x52, 0xf1, 0x85, 0x44, 0x32, 0x9e, 0x4a, 0xe4, 0x37, 0xf5, 0xb1, 0x53, 0x6d, 0x0a, 0xce,
	0xa8, 0x80, 0xf4, 0x8a, 0xfe, 0x9f, 0x27, 0xc1, 0x17, 0x19, 0x2d, 0x17, 0x9f, 0x1c, 0x2e, 0xdc,
	0x19, 0xcc, 0xc1, 0x49, 0x62, 0x1b, 0x68, 0x47, 0xb8, 0x85, 0x44, 0x12, 0xa5, 0xb4, 0xfc, 0x7b,
	0xed, 0xb4, 0x26, 0x75, 0x8a, 0xdf, 0xd2, 0x93, 0x3e, 0x48, 0xd2, 0xf4, 0xae, 0x7a, 0x34, 0x5c,
	0xc8, 0xf5, 0xd5, 0x5f, 0x52, 0x5f, 0xd8, 0x3c, 0xc8, 0x45, 0x90, 0xe4, 0xe1, 0x06, 0x07, 0xbb,
	0xa3, 0x48, 0x2f, 0xe9, 0xa3, 0x62, 0x43, 0x48, 0xf0, 0x8b, 0x1d, 0x88, 0xa6, 0x20, 0x17, 0xfb,
	0x20, 0xcb, 0x2a, 0xeb, 0x24, 0xea, 0x6c, 0x24, 0x5f, 0x6c, 0x03, 0x57, 0xf4, 0x84, 0xe0, 0xe0,
	0x64, 0xe2, 0x8a, 0x32, 0x35, 0x70, 0x2b, 0x96, 0x39, 0x38, 0x4d, 0xe0, 0xdc, 0xe8, 0x9b, 0xad,
	0x91, 0x26, 0xc1, 0x74, 0x9d, 0x62, 0xf3, 0xd7, 0x56, 0xbc, 0x69, 0xf3, 0xdb, 0xed, 0xcb, 0x03,
	0xb1, 0x22, 0x8b, 0x85, 0x4f, 0x9a, 0x3e, 0x74, 0x57, 0xed, 0x80, 0xd9, 0x07, 0xf7, 0xd3, 0x2f,
	0x34, 0xfd, 0xdc, 0x29, 0x13, 0x4c, 0xff, 0xf5, 0xa8, 0xda, 0xdf, 0x68, 0x76, 0xf6, 0x1f, 0x08,
	0xd1, 0x04, 0xf3, 0x6b, 0x7b, 0x1f, 0x34, 0x14, 0x7e, 0xcc, 0x4c, 0x54, 0xae, 0xad, 0x3b, 0x86,
	0x92, 0x19, 0x8c, 0x82, 0x21, 0x24, 0xa1, 0x65, 0x12, 0x94, 0x0d, 0x9f, 0x51, 0x4f, 0xb2, 0x60,
	0xfb, 0xeb, 0x8f, 0x57, 0xda, 0x4c, 0xfe, 0x7a, 0x6b, 0xc5, 0x59, 0x9d, 0xab, 0x20, 0xac, 0xcd,
	0xce, 0x79, 0xab, 0xb5, 0x2a, 0x8e, 0xaf, 0x46, 0xe4, 0x40, 0x4c, 0xa3, 0x4b, 0xd9, 0x9b, 0xbb,
	0x3b, 0x28, 0xfe, 0x65, 0x07, 0xfd, 0x49, 0x27, 0xb7, 0x3f, 0x67, 0xb4, 0x14, 0x9a, 0x7b, 0x8d,
	0xf6, 0x0f, 0x71, 0xec, 0xe0, 0x10, 0xc7, 0x8e, 0x0e, 0x31, 0x7a, 0x1e, 0x62, 0xf4, 0x2e, 0xc4,
	0x68, 0x2f, 0xc4, 0x68, 0x3f, 0xc4, 0xe8, 0x7b, 0x88, 0xd1, 0xcf, 0x10, 0xc7, 0x8e, 0x42, 0x8c,
	0x5e, 0x36, 0x70, 0x6c, 0xb7, 0x81, 0xd1, 0x7e, 0x03, 0xc7, 0x0e, 0x1a, 0x38, 0xb6, 0xba, 0xea,
	0x32, 0xfe, 0xc4, 0x35, 0xeb, 0xac, 0x2a, 0x21, 0x08, 0x88, 0x59, 0x13, 0x96, 0x3a, 0x54, 0x58,
	0xe0, 0x1b, 0x3c, 0x60, 0x75, 0xaf, 0x0c, 0x81, 0xd1, 0x0e, 0x5b, 0xbc, 0xe4, 0x32, 0x0b, 0xd6,
	0x65, 0x6b, 0x6b, 0xfc, 0x76, 0x15, 0x96, 0xfe, 0x57, 0x8b, 0xe4, 0xea, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf1, 0xcc, 0xd2, 0xee, 0x1c, 0x06, 0x00, 0x00,
}

func (this *GetDataplaneServersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDataplaneServersRequest)
	if !ok {
		that2, ok := that.(GetDataplaneServersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.DataplaneRef.Equal(that1.DataplaneRef) {
		return false
	}
	return true
}
func (this *GetDataplaneServersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDataplaneServersResponse)
	if !ok {
		that2, ok := that.(GetDataplaneServersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *GetDataplaneServerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDataplaneServerResponse)
	if !ok {
		that2, ok := that.(GetDataplaneServerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *GetDataplaneServersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nginx_server.GetDataplaneServersRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.DataplaneRef != nil {
		s = append(s, "DataplaneRef: "+fmt.Sprintf("%#v", this.DataplaneRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDataplaneServersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nginx_server.GetDataplaneServersResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDataplaneServerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_server.GetDataplaneServerResponse{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get NGINX One Servers associated to an NGINX dataplane
	//
	// x-displayName: "Get NGINX One Dataplane Servers"
	// Get NGINX One Servers associated to an NGINX dataplane
	GetDataplaneServers(ctx context.Context, in *GetDataplaneServersRequest, opts ...grpc.CallOption) (*GetDataplaneServersResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetDataplaneServers(ctx context.Context, in *GetDataplaneServersRequest, opts ...grpc.CallOption) (*GetDataplaneServersResponse, error) {
	out := new(GetDataplaneServersResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.nginx.one.nginx_server.CustomAPI/GetDataplaneServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get NGINX One Servers associated to an NGINX dataplane
	//
	// x-displayName: "Get NGINX One Dataplane Servers"
	// Get NGINX One Servers associated to an NGINX dataplane
	GetDataplaneServers(context.Context, *GetDataplaneServersRequest) (*GetDataplaneServersResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetDataplaneServers(ctx context.Context, req *GetDataplaneServersRequest) (*GetDataplaneServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataplaneServers not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetDataplaneServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataplaneServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetDataplaneServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.nginx.one.nginx_server.CustomAPI/GetDataplaneServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetDataplaneServers(ctx, req.(*GetDataplaneServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.nginx.one.nginx_server.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataplaneServers",
			Handler:    _CustomAPI_GetDataplaneServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/nginx/one/nginx_server/public_customapi.proto",
}

func (m *GetDataplaneServersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataplaneServersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataplaneServersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataplaneRef != nil {
		{
			size, err := m.DataplaneRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDataplaneServersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataplaneServersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataplaneServersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDataplaneServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataplaneServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataplaneServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDataplaneServersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.DataplaneRef != nil {
		l = m.DataplaneRef.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetDataplaneServersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *GetDataplaneServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDataplaneServersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDataplaneServersRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`DataplaneRef:` + strings.Replace(fmt.Sprintf("%v", this.DataplaneRef), "DataplaneReference", "DataplaneReference", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDataplaneServersResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*GetDataplaneServerResponse{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "GetDataplaneServerResponse", "GetDataplaneServerResponse", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GetDataplaneServersResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDataplaneServerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDataplaneServerResponse{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDataplaneServersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataplaneServersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataplaneServersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataplaneRef == nil {
				m.DataplaneRef = &DataplaneReference{}
			}
			if err := m.DataplaneRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataplaneServersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataplaneServersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataplaneServersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &GetDataplaneServerResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataplaneServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataplaneServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataplaneServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

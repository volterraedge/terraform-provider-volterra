//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package fleet

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/flags"
	"gopkg.volterra.us/stdlib/log"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.fleet.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.fleet.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.fleet.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.fleet.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.fleet.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.fleet.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.fleet.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.fleet.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.fleet.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.fleet.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/fleets", c.baseURL, req.Metadata.GetNamespace())
	jsn, err := req.ToJSON()
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Create")
	}

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, req, rspo)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var rReq *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		rReq = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, rReq); err != nil {
				return err
			}
		}
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.ReplaceJSONReq != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry, WithRequestProto() or WithReplaceJSONRequest() should be specified")
	}
	if e == nil && cco.RequestProto == nil && cco.ReplaceJSONReq == "" {
		return fmt.Errorf("Neither entry nor WithRequestProto() nor WithReplaceJSONRequest() specified")
	}

	var jsn, namespace, name string
	var err error
	_ = namespace
	if e != nil || cco.RequestProto != nil {
		rReq.ResourceVersion = cco.ResourceVersion
		jsn, err = rReq.ToJSON()
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		namespace = rReq.GetMetadata().GetNamespace()
		name = rReq.GetMetadata().GetName()
	} else {
		jsn = cco.ReplaceJSONReq
		reqMap := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
			return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
		}
		md, ok := reqMap["metadata"].(map[string]interface{})
		if !ok {
			return fmt.Errorf("ReplaceJSONReq does not have 'metadata'")
		}
		if val, ok := md["namespace"].(string); ok {
			namespace = val
		}
		if val, ok := md["name"].(string); ok {
			name = val
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/fleets/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	if _, err := ioutil.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, rReq, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/fleets/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/fleets", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/fleets/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	_, err = ioutil.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	crcl := &crudAPIRestClient{baseURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	crudCl *crudAPIInprocClient
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	crudCl := newCRUDAPIInprocClient(svc)
	return &APIInprocClient{crudCl}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	svc svcfw.Service
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	ah := c.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := oah.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := oah.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := oah.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.fleet.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.fleet")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := oah.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	crcl := &crudAPIInprocClient{svc: svc}
	return crcl
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.fleet.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.fleet.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.fleet.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.fleet.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.fleet.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.fleet.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.fleet.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.fleet.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.fleet.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.fleet.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.fleet.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.fleet.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.fleet.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.fleet.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.fleet.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.fleet.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.fleet.API.DeleteRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	default:
		noDBForm, _ := flags.GetEnvGetRspNoDBForm()
		if !noDBForm {
			rsp.Object = o.Object
			sf.Logger().Alert(svcfw.GetResponseInDBForm,
				log.MinorAlert,
				zap.String("user", server.UserFromContext(ctx)),
				zap.String("useragent", server.UseragentStrFromContext(ctx)),
				zap.String("operation", "Get"),
			)
			buildReadForm()

		} else {
			buildReadForm()

		}
		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			noDBForm, _ := flags.GetEnvGetRspNoDBForm()
			if !noDBForm {
				item.Object = o.Object
				sf.Logger().Alert(svcfw.GetResponseInDBForm,
					log.MinorAlert,
					zap.String("user", server.UserFromContext(ctx)),
					zap.String("useragent", server.UseragentStrFromContext(ctx)),
					zap.String("operation", "List"),
				)
			}

			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object != nil && o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.fleet.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Fleet",
        "description": "\nFleet is used to configure infrastructure components (like nodes) in one or\nmore Volterra customer edge sites homogeneously. Fleet configuration has\nfollowing information,\n  * Software image release to be deployed on the fleet\n  * List of devices to be configured on every node\n  * Connections between the virtual networks in the site\n  * Security policies applied in the site\n\nFleet object must be created in the \"system\" namespace for the tenant\n\nAssociating Fleet with Site\n\nFleet has a field called \"fleet_label\". When a fleet object is created, system automatically creates a known_label\n\"ves.io/fleet=\u003cfleet_label\u003e\". The known_label is created in the \"shared\" namespace for the tenant.\nA site is made \"member of fleet\" when this known_label is added to the site. A site can have at most one known_label\nof type \"ves.io/fleet\" and hence belongs to exactly one fleet at any given time.\n\nWhen a site becomes member of fleet, all nodes in site also become \"member of fleet\". The fleet configuration\nis applied on all nodes that are member of the fleet.\n\nFleet and Virtual Site\n\nBoth Fleet and Virtual Sites select a list of sites based on the labels. But, there is a major difference between\nvirtual_site and Fleet. Virtual_sites are intersecting sub sets of available sites. Fleet is non intersecting subset\nof available sites compared to other Fleets. As a result, at most one Fleet configuration if applied on a Site.\n\nHowever to enable other features like monitoring, deploying application or jobs on sites represented by fleet,\nsystem will automatically create a virtual_site in shared namespace representing all sites in a fleet.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{metadata.namespace}/fleets": {
            "post": {
                "summary": "Create Fleet",
                "description": "Create fleet will create a fleet object in 'system' namespace of the user",
                "operationId": "ves.io.schema.fleet.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/fleetCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fleetCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-fleet-API-Create"
                },
                "x-ves-proto-rpc": "ves.io.schema.fleet.API.Create"
            },
            "x-displayname": "Fleet",
            "x-ves-proto-service": "ves.io.schema.fleet.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{metadata.namespace}/fleets/{metadata.name}": {
            "put": {
                "summary": "Replace fleet",
                "description": "Replace fleet will replace the contents of given fleet object",
                "operationId": "ves.io.schema.fleet.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/fleetReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fleetReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-fleet-API-Replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.fleet.API.Replace"
            },
            "x-displayname": "Fleet",
            "x-ves-proto-service": "ves.io.schema.fleet.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/fleets": {
            "get": {
                "summary": "List",
                "description": "List the set of fleet in a namespace",
                "operationId": "ves.io.schema.fleet.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/fleetListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of fleet",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-fleet-API-List"
                },
                "x-ves-proto-rpc": "ves.io.schema.fleet.API.List"
            },
            "x-displayname": "Fleet",
            "x-ves-proto-service": "ves.io.schema.fleet.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/fleets/{name}": {
            "get": {
                "summary": "Get fleet",
                "description": "Get fleet will get fleet object from system namespace",
                "operationId": "ves.io.schema.fleet.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/fleetGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in CreateRequest format\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_CREATE",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Referring Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-fleet-API-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.fleet.API.Get"
            },
            "delete": {
                "summary": "Delete",
                "description": "Delete the specified fleet",
                "operationId": "ves.io.schema.fleet.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nName of the configuration object",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fleetDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-fleet-API-Delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.fleet.API.Delete"
            },
            "x-displayname": "Fleet",
            "x-ves-proto-service": "ves.io.schema.fleet.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "bgpFamilyInet": {
            "type": "object",
            "description": "Parameters for inet family.",
            "title": "FamilyInet",
            "x-displayname": "BGP Family Inet",
            "x-ves-oneof-field-enable_choice": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.FamilyInet",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\nx-displayName: \"Disable IPv4 Unicast\"\nDisable the IPv4 Unicast family.",
                    "title": "disable",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable": {
                    "description": "Exclusive with [disable]\nx-displayName: \"Enable IPv4 Unicast\"\nEnable the IPv4 Unicast family.",
                    "title": "enable",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "bgpFamilyInet6vpn": {
            "type": "object",
            "description": "Parameters for inet6vpn family.",
            "title": "FamilyInet6vpn",
            "x-displayname": "BGP Family Inet6vpn",
            "x-ves-oneof-field-enable_choice": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.FamilyInet6vpn",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\nx-displayName: \"Disable IPv6 VPN Unicast\"\nDisable the IPv6 Unicast family.",
                    "title": "disable",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable": {
                    "description": "Exclusive with [disable]\nx-displayName: \"Enable IPv6 VPN Unicast\"\nEnable the IPv6 Unicast family.",
                    "title": "enable",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "bgpFamilyInetvpn": {
            "type": "object",
            "description": "Parameters for inetvpn family.",
            "title": "FamilyInetvpn",
            "x-displayname": "BGP Family Inetvpn",
            "x-ves-oneof-field-enable_choice": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.FamilyInetvpn",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\nx-displayName: \"Disable IPv4 VPN Unicast\"\nDisable the IPv4 Unicast family.",
                    "title": "disable",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable": {
                    "description": "Exclusive with [disable]\nx-displayName: \"Enable IPv4 VPN Unicast\"\nEnable the IPv4 Unicast family.",
                    "title": "enable",
                    "$ref": "#/definitions/bgpFamilyInetvpnParameters"
                }
            }
        },
        "bgpFamilyInetvpnParameters": {
            "type": "object",
            "description": "Parameters for inetvpn family.",
            "title": "FamilyInetvpnParameters",
            "x-displayname": "BGP Family Inetvpn",
            "x-ves-oneof-field-sr_choice": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.FamilyInetvpnParameters",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\nx-displayName: \"Disable IPv4 VPN Unicast\"\nDisable the IPv4 Unicast family.",
                    "title": "disable",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable": {
                    "description": "Exclusive with [disable]\nx-displayName: \"Enable IPv4 VPN Unicast\"\nEnable the IPv4 Unicast family.",
                    "title": "enable",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "bgpFamilyRtarget": {
            "type": "object",
            "description": "Parameters for rtarget family.",
            "title": "FamilyRtarget",
            "x-displayname": "BGP Family Route Target",
            "x-ves-oneof-field-enable_choice": "[\"disable\",\"enable\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.FamilyRtarget",
            "properties": {
                "disable": {
                    "description": "Exclusive with [enable]\nx-displayName: \"Disable Route Target\"\nDisable the Route Target family.",
                    "title": "disable",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable": {
                    "description": "Exclusive with [disable]\nx-displayName: \"Enable Route Target\"\nEnable the Route Target family.",
                    "title": "enable",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "bgpInterfaceList": {
            "type": "object",
            "description": "List of network interfaces.",
            "title": "InterfaceList",
            "x-displayname": "Interface List",
            "x-ves-proto-message": "ves.io.schema.bgp.InterfaceList",
            "properties": {
                "interfaces": {
                    "type": "array",
                    "description": " List of network interfaces.\nRequired: YES",
                    "title": "interface_list",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Interface List",
                    "x-ves-required": "true"
                }
            }
        },
        "bgpPeer": {
            "type": "object",
            "description": "BGP Peer parameters",
            "title": "Peer",
            "x-displayname": "BGP Peer",
            "x-ves-displayorder": "1,2",
            "x-ves-oneof-field-type_choice": "[\"external\",\"internal\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.Peer",
            "properties": {
                "external": {
                    "description": "Exclusive with [internal]\nx-displayName: \"External\"\nExternal BGP peer.",
                    "title": "external",
                    "$ref": "#/definitions/bgpPeerExternal"
                },
                "internal": {
                    "description": "Exclusive with [external]\nx-displayName: \"External\"\nExternal BGP peer.",
                    "title": "external",
                    "$ref": "#/definitions/bgpPeerInternal"
                },
                "metadata": {
                    "description": " Common attributes for the peer including name and description.\nRequired: YES",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaMessageMetaType",
                    "x-displayname": "Metadata",
                    "x-ves-required": "true"
                },
                "target_service": {
                    "type": "string",
                    "description": " Specify whether this peer should be configured in \"phobos\" or \"frr\".",
                    "title": "target_service",
                    "x-displayname": "Target Service"
                }
            }
        },
        "bgpPeerExternal": {
            "type": "object",
            "description": "External BGP Peer parameters.",
            "title": "PeerExternal",
            "x-displayname": "External BGP Peer",
            "x-ves-displayorder": "1,2,10,11",
            "x-ves-oneof-field-address_choice": "[\"address\",\"default_gateway\",\"from_site\",\"subnet_begin_offset\",\"subnet_end_offset\"]",
            "x-ves-oneof-field-interface_choice": "[\"inside_interfaces\",\"interface\",\"interface_list\",\"outside_interfaces\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.PeerExternal",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Exclusive with [default_gateway from_site subnet_begin_offset subnet_end_offset]\nx-displayName: \"Peer Address\"\nSpecify peer address.",
                    "title": "address"
                },
                "asn": {
                    "type": "integer",
                    "description": " Autonomous System Number for BGP peer\n\nExample: - 64512-\nRequired: YES",
                    "title": "ASN",
                    "format": "int64",
                    "x-displayname": "ASN",
                    "x-ves-required": "true"
                },
                "default_gateway": {
                    "description": "Exclusive with [address from_site subnet_begin_offset subnet_end_offset]\nx-displayName: \"Default Gateway\"\nUse the default gateway address.",
                    "title": "default_gateway",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "family_inet": {
                    "description": " Parameters for IPv4 Unicast family.",
                    "title": "family_inet",
                    "$ref": "#/definitions/bgpFamilyInet",
                    "x-displayname": "Family IPv4 Unicast"
                },
                "from_site": {
                    "description": "Exclusive with [address default_gateway subnet_begin_offset subnet_end_offset]\nx-displayName: \"Address From Site Object\"\nUse the address specified in the site object.",
                    "title": "from_site",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "inside_interfaces": {
                    "description": "Exclusive with [interface interface_list outside_interfaces]\nx-displayName: \"Site Local Inside Interfaces\"\nAll interfaces in the site local inside network.",
                    "title": "inside_interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "interface": {
                    "description": "Exclusive with [inside_interfaces interface_list outside_interfaces]\nx-displayName: \"Interface\"\nSpecify interface.",
                    "title": "interface",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "interface_list": {
                    "description": "Exclusive with [inside_interfaces interface outside_interfaces]\nx-displayName: \"Interface List\"\nList of network interfaces.",
                    "title": "interface_list",
                    "$ref": "#/definitions/bgpInterfaceList"
                },
                "outside_interfaces": {
                    "description": "Exclusive with [inside_interfaces interface interface_list]\nx-displayName: \"Site Local Interfaces\"\nAll interfaces in the site local outside network.",
                    "title": "outside_interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "port": {
                    "type": "integer",
                    "description": " Peer TCP port number.\n\nExample: - 179-",
                    "title": "Peer Port",
                    "format": "int64",
                    "x-displayname": "Peer Port"
                },
                "subnet_begin_offset": {
                    "type": "integer",
                    "description": "Exclusive with [address default_gateway from_site subnet_end_offset]\nx-displayName: \"Offset From Beginning Of Subnet\"\nCalculate peer address using offset from the beginning of the subnet.",
                    "title": "subnet_begin_offset",
                    "format": "int64"
                },
                "subnet_end_offset": {
                    "type": "integer",
                    "description": "Exclusive with [address default_gateway from_site subnet_begin_offset]\nx-displayName: \"Offset From End Of Subnet\"\nCalculate peer address using offset from the end of the subnet.",
                    "title": "subnet_end_offset",
                    "format": "int64"
                }
            }
        },
        "bgpPeerInternal": {
            "type": "object",
            "description": "Internal BGP Peer parameters.",
            "title": "PeerInternal",
            "x-displayname": "Internal BGP Peer",
            "x-ves-displayorder": "2,10,11",
            "x-ves-oneof-field-address_choice": "[\"address\",\"dns_name\",\"from_site\"]",
            "x-ves-oneof-field-mtls_choice": "[\"disable_mtls\",\"enable_mtls\"]",
            "x-ves-proto-message": "ves.io.schema.bgp.PeerInternal",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Exclusive with [dns_name from_site]\nx-displayName: \"Peer Address\"\nSpecify peer address.",
                    "title": "address"
                },
                "disable_mtls": {
                    "description": "Exclusive with [enable_mtls]\nx-displayName: \"Disable MTLS\"\nDisable MTLS",
                    "title": "disable_mtls",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "dns_name": {
                    "type": "string",
                    "description": "Exclusive with [address from_site]\nx-displayName: \"Use address for DNS name\"\nUse the addresse by resolving the given DNS name.",
                    "title": "dns_name"
                },
                "enable_mtls": {
                    "description": "Exclusive with [disable_mtls]\nx-displayName: \"Enable MTLS\"\nEnable MTLS",
                    "title": "enable_mtls",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "family_inet6vpn": {
                    "description": " Parameters for IPv6 VPN Unicast family.",
                    "title": "family_inet6vpn",
                    "$ref": "#/definitions/bgpFamilyInet6vpn",
                    "x-displayname": "Family IPv6 VPN Unicast"
                },
                "family_inetvpn": {
                    "description": " Parameters for IPv4 VPN Unicast family.",
                    "title": "family_inetvpn",
                    "$ref": "#/definitions/bgpFamilyInetvpn",
                    "x-displayname": "Family IPv4 VPN Unicast"
                },
                "family_rtarget": {
                    "description": " Parameters for Route Target family.",
                    "title": "family_rtarget",
                    "$ref": "#/definitions/bgpFamilyRtarget",
                    "x-displayname": "Family Route Target"
                },
                "from_site": {
                    "description": "Exclusive with [address dns_name]\nx-displayName: \"Use address from site object\"\nUse the address specified in the site object.",
                    "title": "from_site",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "port": {
                    "type": "integer",
                    "description": " Peer TCP port number.\n\nExample: - 179-",
                    "title": "port",
                    "format": "int64",
                    "x-displayname": "Peer Port"
                }
            }
        },
        "fleetBGPConfiguration": {
            "type": "object",
            "description": "BGP configuration parameters",
            "title": "BGP Configuration",
            "x-displayname": "BGP Configuration",
            "x-ves-proto-message": "ves.io.schema.fleet.BGPConfiguration",
            "properties": {
                "asn": {
                    "type": "integer",
                    "description": " Autonomous System Number\n\nExample: - 64512-\nRequired: YES",
                    "title": "ASN",
                    "format": "int64",
                    "x-displayname": "ASN",
                    "x-ves-required": "true"
                },
                "peers": {
                    "type": "array",
                    "description": " BGP parameters for peer",
                    "title": "BGP Peers",
                    "items": {
                        "$ref": "#/definitions/bgpPeer"
                    },
                    "x-displayname": "Peers"
                }
            }
        },
        "fleetBondLacpType": {
            "type": "object",
            "description": "x-displayName: \"LACP parameters\nLACP parameters for the bond device",
            "title": "LACP parameters",
            "x-ves-proto-message": "ves.io.schema.fleet.BondLacpType",
            "properties": {
                "rate": {
                    "type": "integer",
                    "description": " Interval in seconds to transmit LACP packets\n\nExample: - \"30\"-",
                    "title": "Interval",
                    "format": "int64",
                    "x-displayname": "LACP Packet Interval",
                    "x-ves-example": "30"
                }
            }
        },
        "fleetCreateRequest": {
            "type": "object",
            "description": "This is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of fleet",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.fleet.CreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the fleet",
                    "title": "spec",
                    "$ref": "#/definitions/schemafleetCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "fleetCreateResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.fleet.CreateResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the fleet",
                    "title": "spec",
                    "$ref": "#/definitions/schemafleetGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "fleetDeleteRequest": {
            "type": "object",
            "description": "This is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a fleet",
            "x-displayname": "Delete Request",
            "x-ves-proto-message": "ves.io.schema.fleet.DeleteRequest",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": " Fail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean",
                    "x-displayname": "Fail-If-Referred"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the configuration object\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the configuration object is present\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "fleetDeviceInstanceType": {
            "type": "object",
            "description": "Device Instance describes a single device in fleet\nA device can be of type network interface, camera, scanner etc. A device instance is created for each instance of device.\nIf there are 2 network interfaces(eth0, eth1...), then 2 DeviceInstanceType are created one for eth0 and another for eth1",
            "title": "Device Instance",
            "x-displayname": "Device Instance",
            "x-ves-oneof-field-device_instance": "[\"network_device\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.DeviceInstanceType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the device including the unit number (e.g. eth0 or disk1). The name must match name of device in host-os of node ",
                    "title": "Name",
                    "x-displayname": "Device Name"
                },
                "network_device": {
                    "description": "Exclusive with []\nx-displayName: \"Networking Device\"\nDevice instance is a networking device like ethernet",
                    "title": "Networking Device",
                    "$ref": "#/definitions/fleetNetworkingDeviceInstanceType"
                },
                "owner": {
                    "description": " Defines ownership of the device. A device can be owned by,\n   * VER : Devices like ethernet are owned by VER\n   * VK8S Workload : The devices is available for VK8S workload use.\n                     This option is not yet supported\n   * HOST : Device is owned by host-os. The devices can be exposed via some other services like TPM.\n            This option is not yet supported\nRequired: YES",
                    "title": "Owner",
                    "$ref": "#/definitions/fleetDeviceOwnerType",
                    "x-displayname": "Device Owner",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetDeviceNetappBackendOntapSanChapType": {
            "type": "object",
            "description": "Device NetApp Backend ONTAP SAN CHAP configuration options for enabled CHAP",
            "title": "Device NetApp Backend ONTAP SAN CHAP configuration",
            "x-displayname": "Device NetApp Backend ONTAP SAN CHAP Configuration",
            "x-ves-proto-message": "ves.io.schema.fleet.DeviceNetappBackendOntapSanChapType",
            "properties": {
                "chap_initiator_secret": {
                    "description": " CHAP initiator secret. Required if useCHAP=true",
                    "title": "CHAP Intiator Secret",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "CHAP Intiator Secret"
                },
                "chap_target_initiator_secret": {
                    "description": " CHAP target initiator secret. Required if useCHAP=true",
                    "title": "CHAP Target Initiator Secret",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "CHAP Target Initiator Secret"
                },
                "chap_target_username": {
                    "type": "string",
                    "description": " Target username. Required if useCHAP=true",
                    "title": "CHAP Target Username",
                    "x-displayname": "CHAP Target Username"
                },
                "chap_username": {
                    "type": "string",
                    "description": " Inbound username. Required if useCHAP=true",
                    "title": "CHAP Username",
                    "x-displayname": "CHAP Username"
                }
            }
        },
        "fleetDeviceOwnerType": {
            "type": "string",
            "description": "Defines ownership for a device.\n\nDevice owner is invalid\nDevice is owned by VER pod. usually it will be network interface device or accelerator like crypto engine.\nDevice is available to be owned by vK8s workload on the site, like camera GPU etc.\nDevice is not available to be owned by vK8s or VER. Can be exposed via some other service. Like TPM.",
            "title": "Device Owner Type",
            "enum": [
                "DEVICE_OWNER_INVALID",
                "DEVICE_OWNER_VER",
                "DEVICE_OWNER_VK8S_WORK_LOAD",
                "DEVICE_OWNER_HOST"
            ],
            "default": "DEVICE_OWNER_INVALID",
            "x-displayname": "Device Owner Type",
            "x-ves-proto-enum": "ves.io.schema.fleet.DeviceOwnerType"
        },
        "fleetEtcdClusterNetworkType": {
            "type": "string",
            "description": "Decided which network is used for etcd clustering\n\nEtcd clustering happens over Site local network\nEtcd clustering happens over Site local inside network\nEtcd clustering happens over Site management network, requires redundant dedicated management interfaces",
            "title": "Etcd Clustering Network",
            "enum": [
                "ETCD_CLUSTER_SITE_LOCAL_NETWORK",
                "ETCD_CLUSTER_SITE_LOCAL_INSIDE_NETWORK",
                "ETCD_CLUSTER_SITE_MANAGEMENT_NETWORK"
            ],
            "default": "ETCD_CLUSTER_SITE_LOCAL_NETWORK",
            "x-displayname": "Etcd Clustering Network",
            "x-ves-proto-enum": "ves.io.schema.fleet.EtcdClusterNetworkType"
        },
        "fleetFlashArrayEndpoint": {
            "type": "object",
            "description": "For FlashArrays you must set the \"mgmt_endpoint\" and \"api_token\"",
            "title": "Flash Array Endpoint",
            "x-displayname": "Flash Array Endpoint",
            "x-ves-oneof-field-mgmt_endpoint": "[\"mgmt_dns_name\",\"mgmt_ip\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.FlashArrayEndpoint",
            "properties": {
                "api_token": {
                    "description": " Please Enter API TOken. Token to connect to management interface",
                    "title": "API Token",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "API Token"
                },
                "labels": {
                    "type": "object",
                    "description": " The labels are optional, and can be any key-value pair for use with the PSO \"fleet\" provisioner.\n\nExample: - \"{\"rack\"\"22\"}\"-",
                    "title": "Labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "{\"rack\": \"22\"}"
                },
                "mgmt_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [mgmt_ip]\nx-displayName: \"Management Endpoint Name\"\nx-example: \"storage.local\"\nManagement Endpoint's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "dns_name"
                },
                "mgmt_ip": {
                    "type": "string",
                    "description": "Exclusive with [mgmt_dns_name]\nx-displayName: \"Management Endpoint IP Address\"\nx-example: \"10.5.2.4\"\nManagement Endpoint is reachable at the given ip address",
                    "title": "Management Endpoint IP Address"
                }
            }
        },
        "fleetFlashArrayType": {
            "type": "object",
            "description": "Specify what storage flash arrays should be managed the plugin",
            "title": "Flash Arrays",
            "x-displayname": "Flash Arrays",
            "x-ves-proto-message": "ves.io.schema.fleet.FlashArrayType",
            "properties": {
                "default_fs_opt": {
                    "type": "string",
                    "description": " Block volume default mkfs options. Not recommended to change!\n\nExample: - \"-q\"-",
                    "title": "Default Filesystem Options",
                    "x-displayname": "Default Filesystem Options",
                    "x-ves-example": "-q"
                },
                "default_fs_type": {
                    "type": "string",
                    "description": " Block volume default filesystem type. Not recommended to change!\n\nExample: - \"xfs\"-\nRequired: YES",
                    "title": "Default Filesystem Type",
                    "x-displayname": "Default Filesystem Type",
                    "x-ves-example": "xfs",
                    "x-ves-required": "true"
                },
                "default_mount_opts": {
                    "type": "array",
                    "description": " Block volume default filesystem mount options. Not recommended to change!\n\nExample: - \"[- discart]\"-",
                    "title": "Default Mount Options",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Default Mount Options",
                    "x-ves-example": "[- discart]"
                },
                "disable_preempt_attachments": {
                    "type": "boolean",
                    "description": " Enable/Disable attachment preemption!",
                    "title": "Disable Preempt Attachments",
                    "format": "boolean",
                    "x-displayname": "Disable Preempt Attachments"
                },
                "flash_arrays": {
                    "type": "array",
                    "description": " For FlashArrays you must set the \"mgmt_endpoint\" and \"api_token\"\nRequired: YES",
                    "title": "Flash Arrays",
                    "items": {
                        "$ref": "#/definitions/fleetFlashArrayEndpoint"
                    },
                    "x-displayname": "Flash Arrays",
                    "x-ves-required": "true"
                },
                "iscsi_login_timeout": {
                    "type": "integer",
                    "description": " x-exmple: \"20\"\n iSCSI login timeout in seconds. Not recommended to change!\nRequired: YES",
                    "title": "iSCSI Login Timeout",
                    "format": "int32",
                    "x-displayname": "iSCSI Login Timeout",
                    "x-ves-required": "true"
                },
                "san_type": {
                    "type": "string",
                    "description": " Block volume access protocol, either ISCSI or FC\n\nExample: - \"ISCSI\"-\nRequired: YES",
                    "title": "SAN Type",
                    "x-displayname": "SAN Type",
                    "x-ves-example": "ISCSI",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFlashBladeEndpoint": {
            "type": "object",
            "description": "For FlashBlades you must set the \"mgmt_endpoint\", \"api_token\" and nfs_endpoint",
            "title": "Flash Blade Endpoint",
            "x-displayname": "Flash Blade Endpoint",
            "x-ves-oneof-field-mgmt_endpoint": "[\"mgmt_dns_name\",\"mgmt_ip\"]",
            "x-ves-oneof-field-nfs_endpoint": "[\"nfs_endpoint_dns_name\",\"nfs_endpoint_ip\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.FlashBladeEndpoint",
            "properties": {
                "api_token": {
                    "description": " Please Enter API TOken. Token to connect to management interface",
                    "title": "API Token",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "API Token"
                },
                "lables": {
                    "type": "object",
                    "description": " The labels are optional, and can be any key-value pair for use with the PSO \"fleet\" provisioner.\n\nExample: - \"{\"rack\"\"22\"}\"-",
                    "title": "Labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "{\"rack\": \"22\"}"
                },
                "mgmt_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [mgmt_ip]\nx-displayName: \"Management Endpoint Name\"\nx-example: \"storage.local\"\nManagement Endpoint's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "dns_name"
                },
                "mgmt_ip": {
                    "type": "string",
                    "description": "Exclusive with [mgmt_dns_name]\nx-displayName: \"Management Endpoint IP Address\"\nx-example: \"10.5.2.4\"\nManagement Endpoint is reachable at the given ip address",
                    "title": "Management Endpoint IP Address"
                },
                "nfs_endpoint_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [nfs_endpoint_ip]\nx-displayName: \"NFS DNS Name\"\nx-example: \"nfs.storage.local\"\nEndpoint's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "NFS DNS Name"
                },
                "nfs_endpoint_ip": {
                    "type": "string",
                    "description": "Exclusive with [nfs_endpoint_dns_name]\nx-displayName: \"NFS IP Address\"\nx-example: \"10.5.2.4\"\nEndpoint is reachable at the given ip address",
                    "title": "NFS IP Address"
                }
            }
        },
        "fleetFlashBladeType": {
            "type": "object",
            "description": "Specify what storage flash blades should be managed the plugin",
            "title": "Flash Blades",
            "x-displayname": "Flash Blades",
            "x-ves-proto-message": "ves.io.schema.fleet.FlashBladeType",
            "properties": {
                "enable_snapshot_directory": {
                    "type": "boolean",
                    "description": " Enable/Disable FlashBlade snapshots",
                    "title": "Enable Snapshot Directory",
                    "format": "boolean",
                    "x-displayname": "Enable Snapshot Directory"
                },
                "export_rules": {
                    "type": "string",
                    "description": " NFS Export rules\n\nExample: - \"*(rw,no_root_squash)\"-",
                    "title": "NFS Export Rules",
                    "x-displayname": "NFS Export Rules",
                    "x-ves-example": "*(rw,no_root_squash)"
                },
                "flash_blades": {
                    "type": "array",
                    "description": " For FlashBlades you must set the \"mgmt_endpoint\", \"api_token\" and nfs_endpoint\nRequired: YES",
                    "title": "Flash Blades",
                    "items": {
                        "$ref": "#/definitions/fleetFlashBladeEndpoint"
                    },
                    "x-displayname": "Flash Blades",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetBondDeviceType": {
            "type": "object",
            "description": "Bond devices configuration for fleet",
            "title": "Bond Device",
            "x-displayname": "Bond Device",
            "x-ves-oneof-field-lacp_choice": "[\"active_backup\",\"lacp\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetBondDeviceType",
            "properties": {
                "active_backup": {
                    "description": "Exclusive with [lacp]\nx-displayName: \"Active/Backup\"\nConfigure active/backup based bond device",
                    "title": "Active/Backup",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "devices": {
                    "type": "array",
                    "description": " Ethernet devices that will make up this bond\nRequired: YES",
                    "title": "Member Ethernet Devices",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Member Ethernet Devices",
                    "x-ves-required": "true"
                },
                "lacp": {
                    "description": "Exclusive with [active_backup]\nx-displayName: \"LACP (802.3ad)\"\nConfigure LACP (802.3ad) based bond device",
                    "title": "LACP (802.3ad)",
                    "$ref": "#/definitions/fleetBondLacpType"
                },
                "link_polling_interval": {
                    "type": "integer",
                    "description": " Link polling interval in millisecond\n\nExample: - \"1000\"-\nRequired: YES",
                    "title": "Link Polling Interval",
                    "format": "int64",
                    "x-displayname": "Link Polling Interval",
                    "x-ves-example": "1000",
                    "x-ves-required": "true"
                },
                "link_up_delay": {
                    "type": "integer",
                    "description": " Milliseconds wait before link is declared up\n\nExample: - \"200\"-\nRequired: YES",
                    "title": "Link Up Delay",
                    "format": "int64",
                    "x-displayname": "Link Up Delay",
                    "x-ves-example": "200",
                    "x-ves-required": "true"
                },
                "name": {
                    "type": "string",
                    "description": " Bond device name \n\nExample: - \"bond0\"-\nRequired: YES",
                    "title": "Bond Device",
                    "x-displayname": "Bond Device Name",
                    "x-ves-example": "bond0",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetBondDevicesListType": {
            "type": "object",
            "description": "List of bond devices for this fleet",
            "title": "Bond Devices List",
            "x-displayname": "Bond Devices List",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetBondDevicesListType",
            "properties": {
                "bond_devices": {
                    "type": "array",
                    "description": " List of bond devices for this fleet\nRequired: YES",
                    "title": "Bond Devices List",
                    "items": {
                        "$ref": "#/definitions/fleetFleetBondDeviceType"
                    },
                    "x-displayname": "Bond Devices List",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetDeviceListType": {
            "type": "object",
            "description": "Add device for all interfaces belonging to this fleet",
            "title": "List of Devices",
            "x-displayname": "List of Devices",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetDeviceListType",
            "properties": {
                "devices": {
                    "type": "array",
                    "description": " Configuration for all devices in the fleet.\n Examples of devices are - network interfaces, cameras, scanners etc.\n Configuration a device is applied on VER node if the VER node is member of this fleet and\n has an corresponding interface/device. The mapping from device configured in fleet with\n interface/device in VER node depends on the type of device and is documented in\n device instance specific sections",
                    "title": "Add device for all interfaces belonging to this fleet",
                    "items": {
                        "$ref": "#/definitions/fleetDeviceInstanceType"
                    },
                    "x-displayname": "Devices"
                }
            }
        },
        "fleetFleetInterfaceListType": {
            "type": "object",
            "description": "Add all interfaces belonging to this fleet",
            "title": "List of Interfaces",
            "x-displayname": "List of Interfaces",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetInterfaceListType",
            "properties": {
                "interfaces": {
                    "type": "array",
                    "description": " Add all interfaces belonging to this fleet\nRequired: YES",
                    "title": "List of Interfaces",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "List of Interfaces",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetStatus": {
            "type": "object",
            "description": "Current status of fleet",
            "title": "Fleet Status",
            "x-displayname": "Fleet Status",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetStatus",
            "properties": {
                "available_software_version": {
                    "type": "string",
                    "description": " Current software version used by the site",
                    "title": "Software Version",
                    "x-displayname": "Software Version"
                }
            }
        },
        "fleetFleetStorageClassListType": {
            "type": "object",
            "description": "Add additional custom storage classes in kubernetes for this fleet",
            "title": "Custom Storage Class List",
            "x-displayname": "Custom Storage Class List",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetStorageClassListType",
            "properties": {
                "storage_classes": {
                    "type": "array",
                    "description": " List of custom storage classes",
                    "title": "List of Storage Classes",
                    "items": {
                        "$ref": "#/definitions/fleetFleetStorageClassType"
                    },
                    "x-displayname": "List of Storage Classes"
                }
            }
        },
        "fleetFleetStorageClassType": {
            "type": "object",
            "description": "Configuration of custom storage class",
            "title": "Custom Storage Class",
            "x-displayname": "Custom Storage Class",
            "x-ves-oneof-field-device_choice": "[\"custom_storage\",\"netapp_trident\",\"openebs_enterprise\",\"pure_service_orchestrator\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetStorageClassType",
            "properties": {
                "advanced_storage_parameters": {
                    "type": "object",
                    "description": " Map of parameter name and string value",
                    "title": "Advanced Parameters",
                    "x-displayname": "Advanced Parameters"
                },
                "allow_volume_expansion": {
                    "type": "boolean",
                    "description": " Allow volume expansion.",
                    "title": "Allow Volume Expansion",
                    "format": "boolean",
                    "x-displayname": "Allow Volume Expansion"
                },
                "custom_storage": {
                    "description": "Exclusive with [netapp_trident openebs_enterprise pure_service_orchestrator]\nx-displayName: \"Custom Storage\"\nStorage configuration for Custom Storage",
                    "title": "Custom Storage",
                    "$ref": "#/definitions/fleetStorageClassCustomType"
                },
                "default_storage_class": {
                    "type": "boolean",
                    "description": " Make this storage class default storage class for the K8s cluster",
                    "title": "Default Storage Class",
                    "format": "boolean",
                    "x-displayname": "Default Storage Class"
                },
                "description": {
                    "type": "string",
                    "description": " x-example \"Volume from my fast storage\"\n Description for this storage class",
                    "title": "Storage Class Description",
                    "x-displayname": "Storage Class Description"
                },
                "netapp_trident": {
                    "description": "Exclusive with [custom_storage openebs_enterprise pure_service_orchestrator]\nx-displayName: \"NetApp Trident\"\nStorage class Device configuration for NetApp Trident",
                    "title": "NetApp Trident",
                    "$ref": "#/definitions/fleetStorageClassNetappTridentType"
                },
                "openebs_enterprise": {
                    "description": "Exclusive with [custom_storage netapp_trident pure_service_orchestrator]\nx-displayName: \"OpenEBS Enterprise\"\nStorage class Device configuration for OpenEBS Enterprise",
                    "title": "OpenEBS Enterprise",
                    "$ref": "#/definitions/fleetStorageClassOpenebsEnterpriseType"
                },
                "pure_service_orchestrator": {
                    "description": "Exclusive with [custom_storage netapp_trident openebs_enterprise]\nx-displayName: \"Pure Storage Service Orchestrator\"\nStorage class Device configuration for Pure Service Orchestrator",
                    "title": "Pure Storage Service Orchestrator",
                    "$ref": "#/definitions/fleetStorageClassPureServiceOrchestratorType"
                },
                "reclaim_policy": {
                    "type": "string",
                    "description": " Reclaim Policy\n\nExample: - \"Delete\"-",
                    "title": "Reclaim Policy",
                    "x-displayname": "Reclaim Policy",
                    "x-ves-example": "Delete"
                },
                "storage_class_name": {
                    "type": "string",
                    "description": " Name of the storage class as it will appear in K8s.\n\nExample: - \"premium\"-\nRequired: YES",
                    "title": "Storage Class Name",
                    "x-displayname": "Storage Class Name",
                    "x-ves-example": "premium",
                    "x-ves-required": "true"
                },
                "storage_device": {
                    "type": "string",
                    "description": " x-example \"DellEMC-isilon_F800-0\"\n Storage device that this class will use. The Device name defined at previous step.\nRequired: YES",
                    "title": "Storage Device",
                    "x-displayname": "Storage Device",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetStorageDeviceListType": {
            "type": "object",
            "description": "Add additional custom storage classes in kubernetes for this fleet",
            "title": "Custom Storage Device List",
            "x-displayname": "Custom Storage Device List",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetStorageDeviceListType",
            "properties": {
                "storage_devices": {
                    "type": "array",
                    "description": " List of custom storage devices",
                    "title": "List of Storage Devices",
                    "items": {
                        "$ref": "#/definitions/fleetFleetStorageDeviceType"
                    },
                    "x-displayname": "List of Storage Devices"
                }
            }
        },
        "fleetFleetStorageDeviceType": {
            "type": "object",
            "description": "Configuration of storage device",
            "title": "Storage Device",
            "x-displayname": "Storage Device",
            "x-ves-oneof-field-device_choice": "[\"custom_storage\",\"netapp_trident\",\"openebs_enterprise\",\"pure_service_orchestrator\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetStorageDeviceType",
            "properties": {
                "advanced_advanced_parameters": {
                    "type": "object",
                    "description": " Map of parameter name and string value",
                    "title": "Advanced Parameters",
                    "x-displayname": "Advanced Parameters"
                },
                "custom_storage": {
                    "description": "Exclusive with [netapp_trident openebs_enterprise pure_service_orchestrator]\nx-displayName: \"Custom Storage\"\nDevice configuration for Custom Storage",
                    "title": "Custom Storage",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "netapp_trident": {
                    "description": "Exclusive with [custom_storage openebs_enterprise pure_service_orchestrator]\nx-displayName: \"NetApp Trident\"\nDevice configuration for NetApp Trident",
                    "title": "NetApp Trident",
                    "$ref": "#/definitions/fleetStorageDeviceNetappTridentType"
                },
                "openebs_enterprise": {
                    "description": "Exclusive with [custom_storage netapp_trident pure_service_orchestrator]\nx-displayName: \"OpenEBS Enterprise\"\nDevice configuration for Pure Storage Service Orchestrator",
                    "title": "OpenEBS Enterprise",
                    "$ref": "#/definitions/fleetStorageDeviceOpenebsEnterpriseType"
                },
                "pure_service_orchestrator": {
                    "description": "Exclusive with [custom_storage netapp_trident openebs_enterprise]\nx-displayName: \"Pure Storage Service Orchestrator\"\nDevice configuration for Pure Storage Service Orchestrator",
                    "title": "Pure Storage Service Orchestrator",
                    "$ref": "#/definitions/fleetStorageDevicePureStorageServiceOrchestratorType"
                },
                "storage_device": {
                    "type": "string",
                    "description": " x-example \"DellEMC-isilon-F800-0\"\n Storage device and device unit \nRequired: YES",
                    "title": "Storage Device",
                    "x-displayname": "Storage Device",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetStorageStaticRoutesListType": {
            "type": "object",
            "description": "List of storage static routes",
            "title": "Storage Static Routes List",
            "x-displayname": "Storage Static Routes List",
            "x-ves-proto-message": "ves.io.schema.fleet.FleetStorageStaticRoutesListType",
            "properties": {
                "storage_routes": {
                    "type": "array",
                    "description": " List of storage static routes\nRequired: YES",
                    "title": "List of Static Routes",
                    "items": {
                        "$ref": "#/definitions/schemaStaticRouteType"
                    },
                    "x-displayname": "List of Static Routes",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetFleetType": {
            "type": "string",
            "description": "Defines fleet type. We have different constraints per each type.\n\nDefault fleet type.\nInternally created site by single fleet such as AWS/Azure/GCP etc.",
            "title": "Fleet Type",
            "enum": [
                "MULTIPLE_SITE",
                "SINGLE_SITE"
            ],
            "default": "MULTIPLE_SITE",
            "x-displayname": "Fleet Type",
            "x-ves-proto-enum": "ves.io.schema.fleet.FleetType"
        },
        "fleetGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read fleet",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.fleet.GetResponse",
            "properties": {
                "create_form": {
                    "description": "Format used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/fleetCreateRequest",
                    "x-displayname": "CreateRequest Format"
                },
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "object": {
                    "title": "object",
                    "$ref": "#/definitions/fleetObject",
                    "x-displayname": "Object"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/fleetReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "resource_version": {
                    "type": "string",
                    "description": "Version of the object\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the fleet",
                    "title": "spec",
                    "$ref": "#/definitions/schemafleetGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/fleetStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "fleetGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "fleetListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of fleet",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.fleet.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/fleetListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "fleetListResponseItem": {
            "type": "object",
            "description": "By default a summary of fleet is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of fleet",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.fleet.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this fleet",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this fleet",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates fleet is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/schemafleetGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this fleet",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this fleet\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "object": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object\n DEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/fleetObject",
                    "x-displayname": "Object"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/fleetStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this fleet\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "fleetLocalControlPlaneType": {
            "type": "object",
            "description": "Enable local control plane for L3VPN, SRV6, EVPN etc",
            "title": "Local Control Plane",
            "x-displayname": "Local Control Plane",
            "x-ves-oneof-field-network_choice": "[\"inside_vn\",\"outside_vn\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.LocalControlPlaneType",
            "properties": {
                "bgp_config": {
                    "description": " BGP configuration for local control plane",
                    "title": "BGP configuration",
                    "$ref": "#/definitions/fleetBGPConfiguration",
                    "x-displayname": "BGP Configuration"
                },
                "inside_vn": {
                    "description": "Exclusive with [outside_vn]\nx-displayName: \"Inside Network\"\nLocal control plane will work on inside network",
                    "title": "Inside Network",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "outside_vn": {
                    "description": "Exclusive with [inside_vn]\nx-displayName: \"Outside Network\"\nLocal control plane will work on outside network",
                    "title": "Outside Network",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "fleetNetworkingDeviceInstanceType": {
            "type": "object",
            "description": "Represents physical network interface.\nThe 'interface' reference points to a Network Interface object. Attributes such as Labels, MTU from\nNetwork Interface must be applied to the device.\n\nDevice mapping to nodes\n\nA fleet can have many devices and nodes in VER customer edge site can have many interfaces.\nAn interface in node inherits configuration from a device by matching,\n  - device_name in Network Interface for the device\n  - device name for physical-interface in the node",
            "title": "Network Device Type",
            "x-displayname": "Network Device Type",
            "x-ves-proto-message": "ves.io.schema.fleet.NetworkingDeviceInstanceType",
            "properties": {
                "interface": {
                    "type": "array",
                    "description": " Network Interface attributes for the device.\n User network interface configuration for this network device.\n Attributes like labels, MTU from the 'interface' are applied to corresponding interface in VER node\n If network interface refers to a virtual-network, the virtual-netowrk type must be consistent with use attribute given below\n If use is NETWORK_INTERFACE_USE_REGULAR, the virtual-network must be of type VIRTUAL_NETWORK_SITE_LOCAL or VIRTUAL_NETWORK_SITE_LOCAL_INSIDE\n if use is NETWORK_INTERFACE_USE_OUTSIDE, the virtual-network must of type VIRTUAL_NETWORK_SITE_LOCAL\n if use is NETWORK_INTERFACE_USE_INSIDE, the virtual-network must of type VIRTUAL_NETWORK_SITE_LOCAL_INSIDE\nRequired: YES",
                    "title": "Network Interface",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Interface",
                    "x-ves-required": "true"
                },
                "use": {
                    "description": " Defines how the device is used.\n 'use' specifies how the device is used in node\n Specifies if the network interface is connected to inside network or outside network.\nRequired: YES",
                    "title": "Use",
                    "$ref": "#/definitions/fleetNetworkingDeviceInstanceUseType",
                    "x-displayname": "Use",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetNetworkingDeviceInstanceUseType": {
            "type": "string",
            "description": "Defines how the device is used\n\nIf networking device is owned by VER, it is available for users to configure as required\nIf networking device is owned by VER, it is included in bootstrap config and member of outside network.\nIf networking device is owned by VER, it is included in bootstrap config and member of inside network.",
            "title": "Network Device Use",
            "enum": [
                "NETWORK_INTERFACE_USE_REGULAR",
                "NETWORK_INTERFACE_USE_OUTSIDE",
                "NETWORK_INTERFACE_USE_INSIDE"
            ],
            "default": "NETWORK_INTERFACE_USE_REGULAR",
            "x-displayname": "Network Device Use",
            "x-ves-proto-enum": "ves.io.schema.fleet.NetworkingDeviceInstanceUseType"
        },
        "fleetObject": {
            "type": "object",
            "description": "Fleet object",
            "title": "Fleet Object",
            "x-displayname": "Object",
            "x-ves-proto-message": "ves.io.schema.fleet.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the fleet",
                    "title": "spec",
                    "$ref": "#/definitions/fleetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "fleetOntapVirtualStoragePoolType": {
            "type": "object",
            "description": "ONTAP Virtual Storage Pool definition",
            "title": "Backend ONTAP Virtual Storage Pool",
            "x-displayname": "Backend ONTAP Virtual Storage Pool",
            "x-ves-proto-message": "ves.io.schema.fleet.OntapVirtualStoragePoolType",
            "properties": {
                "labels": {
                    "type": "object",
                    "description": " List of labels for Storage Device used in NetApp ONTAP. It is used for storage class label match selection.\n\nExample: - \"{\"department\":\"finance\", \"creditpoints\":\"6000\"}\"-",
                    "title": "Storage Pool Labels",
                    "x-displayname": "Storage Pool Labels",
                    "x-ves-example": "{\"department\":\"finance\", \"creditpoints\":\"6000\"}"
                },
                "volume_defaults": {
                    "description": " List of QoS volume default types",
                    "title": "Backend Volume Defaults",
                    "$ref": "#/definitions/fleetOntapVolumeDefaults",
                    "x-displayname": "Backend Volume Defaults"
                },
                "zone": {
                    "type": "string",
                    "description": " Virtual Storage Pool zone definition.\n\nExample: - \"us_east_1b\"-",
                    "title": "Pool Zone",
                    "x-displayname": "Virtual Pool Zone",
                    "x-ves-example": "us_east_1b"
                }
            }
        },
        "fleetOntapVolumeDefaults": {
            "type": "object",
            "description": "It controls how each volume is provisioned by default using these options in a special section of the configuration.",
            "title": "Backend OnTap Volume Defaults",
            "x-displayname": "Backend OnTap Volume Defaults",
            "x-ves-oneof-field-qos_policy_choice": "[\"adaptive_qos_policy\",\"no_qos\",\"qos_policy\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.OntapVolumeDefaults",
            "properties": {
                "adaptive_qos_policy": {
                    "type": "string",
                    "description": "Exclusive with [no_qos qos_policy]\nx-displayName: \"Adaptive QoS Policy name\"\nEnter Adaptive QoS Policy Name",
                    "title": "Storage Server IP address"
                },
                "encryption": {
                    "type": "boolean",
                    "description": " Enable NetApp volume encryption.\n\nExample: - \"false\"-",
                    "title": "Enable Encryption",
                    "format": "boolean",
                    "x-displayname": "Enable Encryption",
                    "x-ves-example": "false"
                },
                "export_policy": {
                    "type": "string",
                    "description": " Export policy to use.\n\nExample: - \"default\"-",
                    "title": "Export Policy",
                    "x-displayname": "Export Policy",
                    "x-ves-example": "default"
                },
                "no_qos": {
                    "description": "Exclusive with [adaptive_qos_policy qos_policy]\nx-displayName: \"No QoS\"\nNo QoS configured",
                    "title": "No QoS",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "qos_policy": {
                    "type": "string",
                    "description": "Exclusive with [adaptive_qos_policy no_qos]\nx-displayName: \"QoS Policy Name\"\nEnter QoS Policy Name",
                    "title": "QoS Policy Name"
                },
                "security_style": {
                    "type": "string",
                    "description": " Security style for new volumes.\n\nExample: - \"unix\"-",
                    "title": "Security Style",
                    "x-displayname": "Security Style",
                    "x-ves-example": "unix"
                },
                "snapshot_dir": {
                    "type": "boolean",
                    "description": " Access to the .snapshot directory.",
                    "title": "Access to Snapshot Directory",
                    "format": "boolean",
                    "x-displayname": "Access to Snapshot Directory"
                },
                "snapshot_policy": {
                    "type": "string",
                    "description": " Snapshot policy to use\n\nExample: - \"none\"-",
                    "title": "Snapshot Policy",
                    "x-displayname": "Snapshot Policy",
                    "x-ves-example": "none"
                },
                "snapshot_reserve": {
                    "type": "string",
                    "description": " Percentage of volume reserved for snapshots. \"0\" if snapshot policy is \"none\", else \"\"\n\nExample: - \"10\"-",
                    "title": "Snapshot Rerserved",
                    "x-displayname": "Snapshot Reserved",
                    "x-ves-example": "10"
                },
                "space_reserve": {
                    "type": "string",
                    "description": " Space reservation mode; “none” (thin) or “volume” (thick)\n\nExample: - \"thick\"-",
                    "title": "Space Reservation Mode",
                    "x-displayname": "Space Reservation Mode",
                    "x-ves-example": "thick"
                },
                "split_on_clone": {
                    "type": "boolean",
                    "description": " Split a clone from its parent upon creation.\n\nExample: - \"false\"-",
                    "title": "Split on Clone",
                    "format": "boolean",
                    "x-displayname": "Split on Clone",
                    "x-ves-example": "false"
                },
                "tiering_policy": {
                    "type": "string",
                    "description": " Tiering policy to use. \"none\" is default.\n\nExample: - \"snapshot-only\"-",
                    "title": "Tiering Policy",
                    "x-displayname": "Tiering Policy",
                    "x-ves-example": "snapshot-only"
                },
                "unix_permissions": {
                    "type": "integer",
                    "description": " Unix permission mode for new volumes. All allowed 777\n\nExample: - \"777\"-",
                    "title": "Unix Mode Permissions",
                    "format": "int32",
                    "x-displayname": "Unix Mode Permissions",
                    "x-ves-example": "777"
                }
            }
        },
        "fleetOpenebsMayastorPoolType": {
            "type": "object",
            "description": "Configuration for OpenEBS Mayastor Pool. When a Mayastor Node (MSN) allocates storage capacity for a Persistent Volume (PV) it does so from a construct named a Mayastor Pool (MSP).\nEach MSN may have zero, one, or more such pools associated with it.  The ownership of a pool by a MSN is exclusive.\nIn the current version of Mayastor, a pool may have only a single block device member, which constitutes the entire data persistence layer for that pool.\nEach MSP include a unique name for the pool, the host name of the MSN on which it is hosted and a reference to a disk device which is accessible from that node (for inclusion within the pool).\nThe pool definition allows the reference to its member disk to adhere to one of a number of possible schemes, each associated with a specific access\nmechanism/transport/device type and differentiated by corresponding performance and/or attachment locality.",
            "title": "OpenEBS Mayastor Pool",
            "x-displayname": "OpenEBS Mayastor Pool",
            "x-ves-proto-message": "ves.io.schema.fleet.OpenebsMayastorPoolType",
            "properties": {
                "node": {
                    "type": "string",
                    "description": " Enter k8s node name of Mayastor Node (MSN) where this pool is or going to be located.\n\nExample: - \"master-0\"-\nRequired: YES",
                    "title": "Node Name",
                    "x-displayname": "Node Name",
                    "x-ves-example": "master-0",
                    "x-ves-required": "true"
                },
                "pool_disk_devices": {
                    "type": "array",
                    "description": " List of Disk Devices on Mayastore Node (MSN). Once Mayastor has created a pool it is assumed that it henceforth has exclusive use of the associated\n disk device; it should not be partitioned, formatted, or shared with another application or process.  Any existing data on the device will be destroyed.\n It supports various types such as \"/dev/sdb\", \"nvme://nqn.2014-08.com.vendor:nvme:nvm-subsystem-sn-d78432\" or \"iscsi://iqn.2000-08.com.datacore.com:cloudvm41-2\".\n\nExample: - \"/dev/sdb\"-\nRequired: YES",
                    "title": "List of Disk Devices",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "List of  Disk Devices",
                    "x-ves-example": "/dev/sdb",
                    "x-ves-required": "true"
                },
                "pool_name": {
                    "type": "string",
                    "description": " Enter Mayastor Pool Name\n\nExample: - \"maya-pool-01\"-\nRequired: YES",
                    "title": "Mayastor Pool Name",
                    "x-displayname": "Mayastor Pool Name",
                    "x-ves-example": "maya-pool-01",
                    "x-ves-required": "true"
                }
            }
        },
        "fleetPsoArrayConfiguration": {
            "type": "object",
            "description": "Device configuration for PSO Arrays",
            "title": "Arrays Configuration",
            "x-displayname": "Arrays Configuration",
            "x-ves-proto-message": "ves.io.schema.fleet.PsoArrayConfiguration",
            "properties": {
                "flash_array": {
                    "description": " Specify what storage flash arrays should be managed the plugin\n For FlashArrays you must set the \"mgmt_endpoint\" and \"api_token\"",
                    "title": "Flash Arrays",
                    "$ref": "#/definitions/fleetFlashArrayType",
                    "x-displayname": "Flash Arrays"
                },
                "flash_blade": {
                    "description": " Specify what storage flash blades should be managed the plugin",
                    "title": "Flash Blade",
                    "$ref": "#/definitions/fleetFlashBladeType",
                    "x-displayname": "Flash Blade"
                }
            }
        },
        "fleetReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a fleet",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.fleet.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "resource_version": {
                    "type": "string",
                    "description": "If provided, do the replace operation if the configuration object is still at 'resource_version'\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the fleet",
                    "title": "spec",
                    "$ref": "#/definitions/schemafleetReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "fleetReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.fleet.ReplaceResponse"
        },
        "fleetSpecType": {
            "type": "object",
            "description": "Shape of the fleet specification",
            "title": "Fleet Specification",
            "x-displayname": "Fleet Specification",
            "x-ves-proto-message": "ves.io.schema.fleet.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/schemafleetGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "fleetStatusObject": {
            "type": "object",
            "description": "Most recently observed status of fleet object",
            "title": "Fleet Status",
            "x-displayname": "Status Object",
            "x-ves-proto-message": "ves.io.schema.fleet.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions reported by various components of the system",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Object reference",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "status": {
                    "description": " Current status of the fleet object",
                    "title": "status",
                    "$ref": "#/definitions/fleetFleetStatus",
                    "x-displayname": "Status"
                }
            }
        },
        "fleetStorageClassCustomType": {
            "type": "object",
            "description": "Custom Storage Class allows to insert Kubernetes storageclass definition which will be applied into given site.",
            "title": "Custom StorageClass",
            "x-displayname": "Custom StorageClass",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageClassCustomType",
            "properties": {
                "yaml": {
                    "type": "string",
                    "description": " K8s YAML for StorageClass",
                    "title": "Storage Class YAML",
                    "x-displayname": "Storage Class YAML"
                }
            }
        },
        "fleetStorageClassNetappTridentType": {
            "type": "object",
            "description": "Storage class Device configuration for NetApp Trident",
            "title": "NetApp Trident Storage",
            "x-displayname": "NetApp Trident Storage",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageClassNetappTridentType",
            "properties": {
                "selector": {
                    "type": "object",
                    "description": " Using the Selector field, each StorageClass calls out which virtual pool(s) may be used to host a volume.\n The volume will have the aspects defined in the chosen virtual pool.\n\nExample: - \"protection=silver; creditpoints=20000\"-",
                    "title": "Selector",
                    "x-displayname": "Selector",
                    "x-ves-example": "protection=silver; creditpoints=20000"
                },
                "storage_pools": {
                    "type": "string",
                    "description": " The storagePools parameter is used to further restrict the set of pools that match any specified attributes\n\nExample: - \"backend-name1:.*;backend-name2:storagePoolListName\"-",
                    "title": "Storage Pools",
                    "x-displayname": "Storage Pools",
                    "x-ves-example": "backend-name1:.*;backend-name2:storagePoolListName"
                }
            }
        },
        "fleetStorageClassOpenebsEnterpriseType": {
            "type": "object",
            "description": "Storage class Device configuration for OpenEBS Enterprise",
            "title": "OpenEBS Enterprise",
            "x-displayname": "OpenEBS Enterprise",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageClassOpenebsEnterpriseType",
            "properties": {
                "protocol": {
                    "type": "string",
                    "description": " Defines type of transport protocol used to mount the PV to the worker node hosting the associated application pod (NVMe-oF)\n\nExample: - \"nvmf\"-",
                    "title": "Protocol",
                    "x-displayname": "Protocol",
                    "x-ves-example": "nvmf"
                },
                "replication": {
                    "type": "integer",
                    "description": " Replication sets the replication factor of the PV, i.e. the number of data replicas to be maintained for it such as 1 or 3.\n\nExample: - \"1\"-",
                    "title": "Replication",
                    "format": "int32",
                    "x-displayname": "Replication",
                    "x-ves-example": "1"
                }
            }
        },
        "fleetStorageClassPureServiceOrchestratorType": {
            "type": "object",
            "description": "Storage class Device configuration for Pure Service Orchestrator",
            "title": "Pure Storage Service Orchestrator",
            "x-displayname": "Pure Storage Service Orchestrator",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageClassPureServiceOrchestratorType",
            "properties": {
                "backend": {
                    "type": "string",
                    "description": " Defines type of Pure storage backend block or file.\n The volume will have the aspects defined in the chosen virtual pool.\n\nExample: - \"block\"-",
                    "title": "Backend",
                    "x-displayname": "Backend",
                    "x-ves-example": "block"
                },
                "bandwidth_limit": {
                    "type": "string",
                    "description": " It must be between 1 MB/s and 512 GB/s. Enter the size as a number (bytes must be multiple of 512) or number with a single character unit symbol.\n Valid unit symbols are K, M, G, representing KiB, MiB, and GiB.\n\nExample: - \"1G\"-",
                    "title": "Bandwidth Limit",
                    "x-displayname": "Bandwidth Limit",
                    "x-ves-example": "1G"
                },
                "iops_limit": {
                    "type": "integer",
                    "description": " Enable IOPS limitation. It must be between 100 and 100 million. If value is 0, IOPS limit is not defined.\n\nExample: - \"3000\"-",
                    "title": "IOPS Limit",
                    "format": "int64",
                    "x-displayname": "IOPS Limit",
                    "x-ves-example": "3000"
                }
            }
        },
        "fleetStorageDeviceNetappBackendOntapNasType": {
            "type": "object",
            "description": "Configuration of storage backend for NetApp ONTAP NAS",
            "title": "Storage Backend NetApp ONTAP NAS",
            "x-displayname": "Storage Backend NetApp ONTAP NAS",
            "x-ves-oneof-field-data_lif": "[\"data_lif_dns_name\",\"data_lif_ip\"]",
            "x-ves-oneof-field-management_lif": "[\"management_lif_dns_name\",\"management_lif_ip\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageDeviceNetappBackendOntapNasType",
            "properties": {
                "auto_export_cidrs": {
                    "description": " List of CIDRs to filter Kubernetes’ node IPs against when autoExportPolicy is enabled\n\nExample: - \"0.0.0.0/0\"-",
                    "title": "Auto Export CIDRs",
                    "$ref": "#/definitions/viewsPrefixStringListType",
                    "x-displayname": "Auto Export CIDRs",
                    "x-ves-example": "0.0.0.0/0"
                },
                "auto_export_policy": {
                    "type": "boolean",
                    "description": " Enable automatic export policy creation and updating",
                    "title": "Auto Export Policy",
                    "format": "boolean",
                    "x-displayname": "Auto Export Policy"
                },
                "backend_name": {
                    "type": "string",
                    "description": " Configuration of Backend Name. Driver is name + \"_\" + dataLIF",
                    "title": "Storage Backend Name",
                    "x-displayname": "Storage Backend Name"
                },
                "client_certificate": {
                    "type": "string",
                    "description": " Please Enter Base64-encoded value of client certificate. Used for certificate-based auth.",
                    "title": "Client Certificate",
                    "x-displayname": "Client Certificate"
                },
                "client_private_key": {
                    "description": " Please Enter value of client private key. Used for certificate-based auth.",
                    "title": "Client Private Key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Client Private Key"
                },
                "data_lif_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [data_lif_ip]\nx-displayName: \"Backend Data LIF Name\"\nx-example: \"storage.local\"\nBackend Data LIF IP Address's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "Backend Data LIF Name"
                },
                "data_lif_ip": {
                    "type": "string",
                    "description": "Exclusive with [data_lif_dns_name]\nx-displayName: \"Backend Data LIF IP Address\"\nx-example: \"10.5.2.4\"\nBackend Data LIF IP Address is reachable at the given ip address",
                    "title": "Backend Data LIF IP Address"
                },
                "labels": {
                    "type": "object",
                    "description": " List of labels for Storage Device used in NetApp ONTAP. It is used for storage class selection.\n\nExample: - \"{\"store\":\"nas_store\"}\"-",
                    "title": "Backend Labels",
                    "x-displayname": "Backend Labels",
                    "x-ves-example": "{\"store\":\"nas_store\"}"
                },
                "limit_aggregate_usage": {
                    "type": "string",
                    "description": " Fail provisioning if usage is above this percentage. Not enforced by default.\n\nExample: - \"80%\"-",
                    "title": "Limit Aggregate Usage",
                    "x-displayname": "Limit Aggregate Usage",
                    "x-ves-example": "80%"
                },
                "limit_volume_size": {
                    "type": "string",
                    "description": " Fail provisioning if requested volume size is above this value. Not enforced by default.\n\nExample: - \"50Gi\"-",
                    "title": "Limit Volume Size",
                    "x-displayname": "Limit Volume Size",
                    "x-ves-example": "50Gi"
                },
                "management_lif_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [management_lif_ip]\nx-displayName: \"Backend Management LIF Name\"\nx-example: \"storage.local\"\nBackend Management LIF IP Address's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "Backend Management LIF Name"
                },
                "management_lif_ip": {
                    "type": "string",
                    "description": "Exclusive with [management_lif_dns_name]\nx-displayName: \"Backend Management LIF IP Address\"\nx-example: \"10.5.2.4\"\nBackend Management LIF IP Address is reachable at the given ip address",
                    "title": "Backend Management LIF IP Address"
                },
                "nfs_mount_options": {
                    "type": "string",
                    "description": " Comma-separated list of NFS mount options. Not enforced by default.\n\nExample: - \"nfsvers=4\"-",
                    "title": "NFS Mount Options",
                    "x-displayname": "NFS Mount Options",
                    "x-ves-example": "nfsvers=4"
                },
                "password": {
                    "description": " Please Enter you password. Password to connect to the cluster/SVM",
                    "title": "Password",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Password"
                },
                "region": {
                    "type": "string",
                    "description": " Virtual Pool Region\n\nExample: - \"us_east_1b\"-",
                    "title": "Backend Region",
                    "x-displayname": "Backend Region",
                    "x-ves-example": "us_east_1b"
                },
                "storage": {
                    "type": "array",
                    "description": " List of Virtual Storage Pool definitions which are referred back by Storage Class label match selection.",
                    "title": "Virtual Storage Pools",
                    "items": {
                        "$ref": "#/definitions/fleetOntapVirtualStoragePoolType"
                    },
                    "x-displayname": "Virtual Storage Pools"
                },
                "storage_driver_name": {
                    "type": "string",
                    "description": " Configuration of Backend Name\n\nExample: - \"ontap-nas\"-\nRequired: YES",
                    "title": "Storage Backend Driver",
                    "x-displayname": "Storage Backend Driver",
                    "x-ves-example": "ontap-nas",
                    "x-ves-required": "true"
                },
                "storage_prefix": {
                    "type": "string",
                    "description": " Prefix used when provisioning new volumes in the SVM. Once set this cannot be updated\n\nExample: - \"trident\"-",
                    "title": "Storage Prefix",
                    "x-displayname": "Storage Prefix",
                    "x-ves-example": "trident"
                },
                "svm": {
                    "type": "string",
                    "description": " Storage virtual machine to use. Derived if an SVM managementLIF is specified\n\nExample: - \"trident_svm\"-",
                    "title": "Backend SVM",
                    "x-displayname": "Backend SVM",
                    "x-ves-example": "trident_svm"
                },
                "trusted_ca_certificate": {
                    "type": "string",
                    "description": " Please Enter Base64-encoded value of trusted CA certificate. Optional. Used for certificate-based auth..",
                    "title": "Trusted CA Certificate",
                    "x-displayname": "Trusted CA Certificate"
                },
                "username": {
                    "type": "string",
                    "description": " Username to connect to the cluster/SVM\n\nExample: - \"cluster-admin\"-\nRequired: YES",
                    "title": "Username",
                    "x-displayname": "Username",
                    "x-ves-example": "cluster-admin",
                    "x-ves-required": "true"
                },
                "volume_defaults": {
                    "description": " List of QoS volume defaults types",
                    "title": "Backend Volume Defaults",
                    "$ref": "#/definitions/fleetOntapVolumeDefaults",
                    "x-displayname": "Backend Volume Defaults"
                }
            }
        },
        "fleetStorageDeviceNetappBackendOntapSanType": {
            "type": "object",
            "description": "Configuration of storage backend for NetApp ONTAP SAN",
            "title": "Storage Backend NetApp ONTAP SAN",
            "x-displayname": "Storage Backend NetApp ONTAP SAN",
            "x-ves-oneof-field-chap_choice": "[\"no_chap\",\"use_chap\"]",
            "x-ves-oneof-field-data_lif": "[\"data_lif_dns_name\",\"data_lif_ip\"]",
            "x-ves-oneof-field-management_lif": "[\"management_lif_dns_name\",\"management_lif_ip\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageDeviceNetappBackendOntapSanType",
            "properties": {
                "client_certificate": {
                    "type": "string",
                    "description": " Please Enter Base64-encoded value of client certificate. Used for certificate-based auth.",
                    "title": "Client Certificate",
                    "x-displayname": "Client Certificate"
                },
                "client_private_key": {
                    "description": " Please Enter value of client private key. Used for certificate-based auth.",
                    "title": "Client Private Key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Client Private Key"
                },
                "data_lif_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [data_lif_ip]\nx-displayName: \"Backend Data LIF Name\"\nx-example: \"storage.local\"\nBackend Data LIF IP Address's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "Backend Data LIF Name"
                },
                "data_lif_ip": {
                    "type": "string",
                    "description": "Exclusive with [data_lif_dns_name]\nx-displayName: \"Backend Data LIF IP Address\"\nx-example: \"10.5.2.4\"\nBackend Data LIF IP Address is reachable at the given ip address",
                    "title": "Backend Data LIF IP Address"
                },
                "igroup_name": {
                    "type": "string",
                    "description": " Name of the igroup for SAN volumes to use",
                    "title": "iGroup Name",
                    "x-displayname": "iGroup Name"
                },
                "labels": {
                    "type": "object",
                    "description": " List of labels for Storage Device used in NetApp ONTAP. It is used for storage class selection.\n\nExample: - \"{\"store\":\"nas_store\"}\"-",
                    "title": "Backend Labels",
                    "x-displayname": "Backend Labels",
                    "x-ves-example": "{\"store\":\"nas_store\"}"
                },
                "limit_aggregate_usage": {
                    "type": "integer",
                    "description": " Fail provisioning if usage is above this percentage. Not enforced by default.\n\nExample: - \"80\"-",
                    "title": "Limit Aggregate Usage",
                    "format": "int64",
                    "x-displayname": "Limit Aggregate Usage",
                    "x-ves-example": "80"
                },
                "limit_volume_size": {
                    "type": "integer",
                    "description": " Fail provisioning if requested volume size in GBi is above this value. Not enforced by default.\n\nExample: - \"50\"-",
                    "title": "Limit Volume Size",
                    "format": "int32",
                    "x-displayname": "Limit Volume Size",
                    "x-ves-example": "50"
                },
                "management_lif_dns_name": {
                    "type": "string",
                    "description": "Exclusive with [management_lif_ip]\nx-displayName: \"Backend Management LIF Name\"\nx-example: \"storage.local\"\nBackend Management LIF IP Address's ip address is discovered using DNS name resolution. The name given here is fully qualified domain name.",
                    "title": "Backend Management LIF Name"
                },
                "management_lif_ip": {
                    "type": "string",
                    "description": "Exclusive with [management_lif_dns_name]\nx-displayName: \"Backend Management LIF IP Address\"\nx-example: \"10.5.2.4\"\nBackend Management LIF IP Address is reachable at the given ip address",
                    "title": "Backend Management LIF IP Address"
                },
                "no_chap": {
                    "description": "Exclusive with [use_chap]\nx-displayName: \"CHAP Disabled\"\nCHAP disabled",
                    "title": "CHAP Disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "password": {
                    "description": " Please Enter you password. Password to connect to the cluster/SVM",
                    "title": "Password",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Password"
                },
                "region": {
                    "type": "string",
                    "description": " Virtual Pool Region\n\nExample: - \"us_east_1b\"-",
                    "title": "Backend Region",
                    "x-displayname": "Backend Region",
                    "x-ves-example": "us_east_1b"
                },
                "storage": {
                    "type": "array",
                    "description": " List of Virtual Storage Pool definitions which are referred back by Storage Class label match selection.",
                    "title": "Virtual Storage Pools",
                    "items": {
                        "$ref": "#/definitions/fleetOntapVirtualStoragePoolType"
                    },
                    "x-displayname": "Virtual Storage Pools"
                },
                "storage_driver_name": {
                    "type": "string",
                    "description": " Configuration of Backend Name\n\nExample: - \"ontap-nas\"-\nRequired: YES",
                    "title": "Storage Backend Driver",
                    "x-displayname": "Storage Backend Driver",
                    "x-ves-example": "ontap-nas",
                    "x-ves-required": "true"
                },
                "storage_prefix": {
                    "type": "string",
                    "description": " Prefix used when provisioning new volumes in the SVM. Once set this cannot be updated\n\nExample: - \"trident\"-",
                    "title": "Storage Prefix",
                    "x-displayname": "Storage Prefix",
                    "x-ves-example": "trident"
                },
                "svm": {
                    "type": "string",
                    "description": " Storage virtual machine to use. Derived if an SVM managementLIF is specified\n\nExample: - \"trident_svm\"-",
                    "title": "Backend SVM",
                    "x-displayname": "Backend SVM",
                    "x-ves-example": "trident_svm"
                },
                "trusted_ca_certificate": {
                    "type": "string",
                    "description": " Please Enter Base64-encoded value of trusted CA certificate. Optional. Used for certificate-based auth..",
                    "title": "Trusted CA Certificate",
                    "x-displayname": "Trusted CA Certificate"
                },
                "use_chap": {
                    "description": "Exclusive with [no_chap]\nx-displayName: \"Use Device NetApp Backend ONTAP SAN CHAP\"\nDevice NetApp Backend ONTAP SAN CHAP configuration options for enabled CHAP",
                    "title": "Use Device NetApp Backend ONTAP SAN CHAP configuration",
                    "$ref": "#/definitions/fleetDeviceNetappBackendOntapSanChapType"
                },
                "username": {
                    "type": "string",
                    "description": " Username to connect to the cluster/SVM\n\nExample: - \"cluster-admin\"-\nRequired: YES",
                    "title": "Username",
                    "x-displayname": "Username",
                    "x-ves-example": "cluster-admin",
                    "x-ves-required": "true"
                },
                "volume_defaults": {
                    "description": " List of QoS volume defaults types",
                    "title": "Backend Volume Defaults",
                    "$ref": "#/definitions/fleetOntapVolumeDefaults",
                    "x-displayname": "Backend Volume Defaults"
                }
            }
        },
        "fleetStorageDeviceNetappTridentType": {
            "type": "object",
            "description": "Device configuration for NetApp Trident Storage",
            "title": "NetApp Trident",
            "x-displayname": "NetApp Trident",
            "x-ves-oneof-field-backend_choice": "[\"netapp_backend_ontap_nas\",\"netapp_backend_ontap_san\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageDeviceNetappTridentType",
            "properties": {
                "netapp_backend_ontap_nas": {
                    "description": "Exclusive with [netapp_backend_ontap_san]\nx-displayName: \"ONTAP NAS\"\nBackend configuration for ONTAP NAS",
                    "title": "ONTAP NAS",
                    "$ref": "#/definitions/fleetStorageDeviceNetappBackendOntapNasType"
                },
                "netapp_backend_ontap_san": {
                    "description": "Exclusive with [netapp_backend_ontap_nas]\nx-displayName: \"ONTAP SAN\"\nBackend configuration for ONTAP SAN",
                    "title": "ONTAP SAN",
                    "$ref": "#/definitions/fleetStorageDeviceNetappBackendOntapSanType"
                }
            }
        },
        "fleetStorageDeviceOpenebsEnterpriseType": {
            "type": "object",
            "description": "Device configuration for OpenEBS Enterprise",
            "title": "OpenEBS Enterprise",
            "x-displayname": "OpenEBS Enterprise",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageDeviceOpenebsEnterpriseType",
            "properties": {
                "mayastor_pools": {
                    "type": "array",
                    "description": " List of  Mayastor Pools. When a Mayastor Node (MSN) allocates storage capacity for a Persistent Volume (PV) it does so from a construct named a Mayastor Pool (MSP).\n Each MSN may have zero, one, or more such pools associated with it.  The ownership of a pool by a MSN is exclusive.\n In the current version of Mayastor, a pool may have only a single block device member, which constitutes the entire data persistence layer for that pool.\n Each MSP include a unique name for the pool, the host name of the MSN on which it is hosted and a reference to a disk device which is accessible from that node (for inclusion within the pool).\n The pool definition allows the reference to its member disk to adhere to one of a number of possible schemes, each associated with a specific access\n mechanism/transport/device type and differentiated by corresponding performance and/or attachment locality.",
                    "title": "List of  Mayastor Pools",
                    "items": {
                        "$ref": "#/definitions/fleetOpenebsMayastorPoolType"
                    },
                    "x-displayname": "List of  Mayastor Pools"
                }
            }
        },
        "fleetStorageDevicePureStorageServiceOrchestratorType": {
            "type": "object",
            "description": "Device configuration for Pure Storage Service Orchestrator",
            "title": "Pure Storage Service Orchestrator",
            "x-displayname": "Pure Storage Service Orchestrator",
            "x-ves-proto-message": "ves.io.schema.fleet.StorageDevicePureStorageServiceOrchestratorType",
            "properties": {
                "arrays": {
                    "description": " This section configure PSO storage arrays\nRequired: YES",
                    "title": "Arrays Configuration",
                    "$ref": "#/definitions/fleetPsoArrayConfiguration",
                    "x-displayname": "Arrays Configuration",
                    "x-ves-required": "true"
                },
                "cluster_id": {
                    "type": "string",
                    "description": " clusterID is added as a prefix for all volumes created by this PSO installation.\n clusterID is also used to identify the volumes used by the datastore, pso-db.\n clusterID MUST BE UNIQUE for multiple K8s clusters running on top of the same storage arrays.\n characters allowed: alphanumeric and underscores\n\nExample: - \"cluster1\"-\nRequired: YES",
                    "title": "Cluster ID",
                    "x-displayname": "Cluster ID",
                    "x-ves-example": "cluster1",
                    "x-ves-required": "true"
                },
                "enable_storage_topology": {
                    "type": "boolean",
                    "description": " This option is to enable/disable the csi topology feature for pso-csi",
                    "title": "Enable Storage Topology",
                    "format": "boolean",
                    "x-displayname": "Enable Storage Topology"
                },
                "enable_strict_topology": {
                    "type": "boolean",
                    "description": " This option is to enable/disable the strict csi topology feature for pso-csi",
                    "title": "Enable Strict Topology",
                    "format": "boolean",
                    "x-displayname": "Enable Strict Topology"
                }
            }
        },
        "fleetVGPUConfiguration": {
            "type": "object",
            "description": "Licensing configuration for NVIDIA vGPU",
            "title": "vGPU Configuration",
            "x-displayname": "vGPU Configuration",
            "x-ves-proto-message": "ves.io.schema.fleet.VGPUConfiguration",
            "properties": {
                "feature_type": {
                    "description": " Set Feature to be enabled\nRequired: YES",
                    "title": "Feature Type",
                    "$ref": "#/definitions/fleetVGPUFeatureType",
                    "x-displayname": "Feature Type",
                    "x-ves-required": "true"
                },
                "server_address": {
                    "type": "string",
                    "description": " Set License Server Address\n\nExample: - \"gridlicense1.example.com\"-",
                    "title": "License Server Address",
                    "x-displayname": "License Server Address",
                    "x-ves-example": "gridlicense1.example.com"
                },
                "server_port": {
                    "type": "integer",
                    "description": " Set License Server port number",
                    "title": "License Server Port Number",
                    "format": "int64",
                    "x-displayname": "License Server Port Number"
                }
            }
        },
        "fleetVGPUFeatureType": {
            "type": "string",
            "description": "Set feature to be enabled\n\nOperate with a degraded vGPU performance\nEnable NVIDIA vGPU\nEnable NVIDIA RTX Virtual Workstation\nEnable NVIDIA Virtual Compute Server",
            "title": "vGPU Feature Type",
            "enum": [
                "UNLICENSED",
                "VGPU",
                "VWS",
                "VCS"
            ],
            "default": "UNLICENSED",
            "x-displayname": "Feature Type",
            "x-ves-proto-enum": "ves.io.schema.fleet.VGPUFeatureType"
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "BlindfoldSecretInfoType specifies information about the Secret managed by Volterra Secret Management",
            "title": "BlindfoldSecretInfoType",
            "x-displayname": "Blindfold Secret",
            "x-ves-displayorder": "3,1,2",
            "x-ves-proto-message": "ves.io.schema.BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Secret Management service.",
                    "title": "Decryption Provider",
                    "x-displayname": "Decryption Provider"
                },
                "location": {
                    "type": "string",
                    "description": " Location is the uri_ref. It could be in url format for string:///\n Or it could be a path if the store provider is an http/https location\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\nRequired: YES",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true"
                },
                "store_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///",
                    "title": "Store Provider",
                    "x-displayname": "Store Provider"
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "ClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "x-displayname": "In-Clear Secret",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"box-provider\"-",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "box-provider"
                },
                "url": {
                    "type": "string",
                    "description": " URL of the secret. Currently supported URL schemes is string:///.\n For string:/// scheme, Secret needs to be encoded Base64 format.\n When asked for this secret, caller will get Secret bytes after Base64 decoding.  \n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\nRequired: YES",
                    "title": "URL",
                    "x-displayname": "URL",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed. \n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaIpAddressType": {
            "type": "object",
            "description": "IP Address used to specify an IPv4 or IPv6 address",
            "title": "IP Address",
            "x-displayname": "IP Address",
            "x-ves-displayorder": "3",
            "x-ves-oneof-field-ver": "[\"ipv4\",\"ipv6\"]",
            "x-ves-proto-message": "ves.io.schema.IpAddressType",
            "properties": {
                "ipv4": {
                    "description": "Exclusive with [ipv6]\nx-displayName: \"IPv4 Address\"\nIPv4 Address",
                    "title": "IPv4 Address",
                    "$ref": "#/definitions/schemaIpv4AddressType"
                },
                "ipv6": {
                    "description": "Exclusive with [ipv4]\nx-displayName: \"IPv6 Address\"\nIPv6 Address",
                    "title": "IPv6 ADDRESS",
                    "$ref": "#/definitions/schemaIpv6AddressType"
                }
            }
        },
        "schemaIpSubnetType": {
            "type": "object",
            "description": "IP Address used to specify an IPv4 or IPv6 subnet addresses",
            "title": "IP Subnet",
            "x-displayname": "IP Subnet",
            "x-ves-displayorder": "3",
            "x-ves-oneof-field-ver": "[\"ipv4\",\"ipv6\"]",
            "x-ves-proto-message": "ves.io.schema.IpSubnetType",
            "properties": {
                "ipv4": {
                    "description": "Exclusive with [ipv6]\nx-displayName: \"IPv4 Subnet\"\nIPv4 Subnet Address",
                    "title": "IPv4 Subnet",
                    "$ref": "#/definitions/schemaIpv4SubnetType"
                },
                "ipv6": {
                    "description": "Exclusive with [ipv4]\nx-displayName: \"IPv6 Subnet\"\nIPv6 Subnet Address",
                    "title": "IPv6 Subnet",
                    "$ref": "#/definitions/schemaIpv6SubnetType"
                }
            }
        },
        "schemaIpv4AddressType": {
            "type": "object",
            "description": "IPv4 Address in dot-decimal notation",
            "title": "IPv4 Address",
            "x-displayname": "IPv4 Address",
            "x-ves-proto-message": "ves.io.schema.Ipv4AddressType",
            "properties": {
                "addr": {
                    "type": "string",
                    "description": " IPv4 Address in string form with dot-decimal notation\n\nExample: - \"192.168.1.1\"-",
                    "title": "IPv4 Address",
                    "x-displayname": "IPv4 Address",
                    "x-ves-example": "192.168.1.1"
                }
            }
        },
        "schemaIpv4SubnetType": {
            "type": "object",
            "description": "IPv4 subnets specified as prefix and prefix-length. Prefix length must be \u003c= 32",
            "title": "IPv4 Subnet",
            "x-displayname": "IPv4 Subnet",
            "x-ves-proto-message": "ves.io.schema.Ipv4SubnetType",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": " Prefix-length of the IPv4 subnet. Must be \u003c= 32\n\nExample: - 24-",
                    "title": "Prefix Length",
                    "format": "int64",
                    "x-displayname": "Prefix Length"
                },
                "prefix": {
                    "type": "string",
                    "description": " Prefix part of the IPv4 subnet in string form with dot-decimal notation\n\nExample: - \"192.168.1.0\"-",
                    "title": "Prefix",
                    "x-displayname": "Prefix",
                    "x-ves-example": "192.168.1.0"
                }
            }
        },
        "schemaIpv6AddressType": {
            "type": "object",
            "description": "IPv6 Address specified as hexadecimal numbers separated by ':'",
            "title": "IPv6 Address",
            "x-displayname": "IPv6 Address",
            "x-ves-proto-message": "ves.io.schema.Ipv6AddressType",
            "properties": {
                "addr": {
                    "type": "string",
                    "description": " IPv6 Address in form of string. IPv6 address must be specified as hexadecimal numbers separated by ':'\n The address can be compacted by suppressing zeros \n e.g. '2001:db8:0:0:0:0:2:1' becomes '2001:db8::2:1' or '2001:db8:0:0:0:2:0:0' becomes '2001:db8::2::'\n\nExample: - \"2001:db8:0:0:0:0:2:1\"-",
                    "title": "IPv6 Address",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001:db8:0:0:0:0:2:1"
                }
            }
        },
        "schemaIpv6SubnetType": {
            "type": "object",
            "description": "IPv6 subnets specified as prefix and prefix-length. prefix-legnth must be \u003c= 128",
            "title": "IPv6 Subnet",
            "x-displayname": "IPv6 Subnet",
            "x-ves-proto-message": "ves.io.schema.Ipv6SubnetType",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": " Prefix length of the IPv6 subnet. Must be \u003c= 128\n\nExample: - \"38\"-",
                    "title": "Prefix length",
                    "format": "int64",
                    "x-displayname": "Prefix Length",
                    "x-ves-example": "38"
                },
                "prefix": {
                    "type": "string",
                    "description": " Prefix part of the IPv6 subnet given in form of string.\n IPv6 address must be specified as hexadecimal numbers separated by ':'\n e.g. \"2001:db8:0:0:0:2:0:0\"\n The address can be compacted by suppressing zeros\n e.g. \"2001:db8::2::\"\n\nExample: - \"2001:db8:0:0:0:0:2:0\"-",
                    "title": "Prefix",
                    "x-displayname": "Prefix",
                    "x-ves-example": "2001:db8:0:0:0:0:2:0"
                }
            }
        },
        "schemaMessageMetaType": {
            "type": "object",
            "description": "MessageMetaType is metadata (common attributes) of a message that only certain messages\nhave. This information is propagated to the metadata of a child object that gets created\nfrom the containing message during view processing.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "MessageMetaType",
            "x-displayname": "Message Metadata",
            "x-ves-proto-message": "ves.io.schema.MessageMetaType",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Human readable description.\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object that corresponds to the containing message.\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of the message.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaNextHopType": {
            "type": "object",
            "description": "Identifies the next-hop for a route",
            "title": "Nexthop",
            "x-displayname": "Nexthop",
            "x-ves-proto-message": "ves.io.schema.NextHopType",
            "properties": {
                "interface": {
                    "type": "array",
                    "description": " Nexthop is network interface when type is \"Network-Interface\"",
                    "title": "Network Interface",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Interface"
                },
                "nexthop_address": {
                    "description": " Nexthop address when type is \"Use-Configured\"",
                    "title": "Nexthop Address",
                    "$ref": "#/definitions/schemaIpAddressType",
                    "x-displayname": "Address"
                },
                "type": {
                    "description": " Identifies the type of next-hop",
                    "title": "Type",
                    "$ref": "#/definitions/schemaNextHopTypes",
                    "x-displayname": "Type"
                }
            }
        },
        "schemaNextHopTypes": {
            "type": "string",
            "description": "Defines types of next-hop\n\nUse default gateway on the local interface as gateway for route.\nAssumes there is only one local interface on the virtual network.\nUse the specified address as nexthop\nUse the network interface as nexthop\nDiscard nexthop, used when attr type is Advertise\nUsed in VoltADN private virtual network.",
            "title": "Nexthop Types",
            "enum": [
                "NEXT_HOP_DEFAULT_GATEWAY",
                "NEXT_HOP_USE_CONFIGURED",
                "NEXT_HOP_NETWORK_INTERFACE",
                "NEXT_HOP_DISCARD",
                "NEXT_HOP_SNAT_TO_PUBLIC"
            ],
            "default": "NEXT_HOP_DEFAULT_GATEWAY",
            "x-displayname": "Nexthop Types",
            "x-ves-proto-enum": "ves.io.schema.NextHopTypes"
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if \n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaRouteAttrType": {
            "type": "string",
            "description": "Defines attributes associated with route\n\nIgnore attribute\nAdvertise route in all supported routing protocols\nAdd route into host OS - route in host OS will point to interface corresponding to the\nvirtual network. Host OS must have an interface in the virtual network.\nUse the route for forwarding decision - adds route into data plane\nmodules with configured next-hop\nMerge Route if they already exist",
            "title": "Route Attribute",
            "enum": [
                "ROUTE_ATTR_NO_OP",
                "ROUTE_ATTR_ADVERTISE",
                "ROUTE_ATTR_INSTALL_HOST",
                "ROUTE_ATTR_INSTALL_FORWARDING",
                "ROUTE_ATTR_MERGE_ONLY"
            ],
            "default": "ROUTE_ATTR_NO_OP",
            "x-displayname": "Route Attribute",
            "x-ves-proto-enum": "ves.io.schema.RouteAttrType"
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "SecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\nNo Encoding\n - EncodingBase64: Base64\n\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone",
            "x-displayname": "Secret Encoding",
            "x-ves-proto-enum": "ves.io.schema.SecretEncodingType"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "SecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "x-displayname": "Secret",
            "x-ves-oneof-field-secret_info_oneof": "[\"blindfold_secret_info\",\"clear_secret_info\",\"vault_secret_info\",\"wingman_secret_info\"]",
            "x-ves-proto-message": "ves.io.schema.SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "Exclusive with [clear_secret_info vault_secret_info wingman_secret_info]\nx-displayName: \"Blindfold Secret\"\nBlindfold Secret is used for the secrets managed by Volterra Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType"
                },
                "blindfold_secret_info_internal": {
                    "description": " Blindfold Secret Internal is used for the putting re-encrypted blindfold secret",
                    "title": "Blindfold Secret Internal",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType",
                    "x-displayname": "Blindfold Secret Internal"
                },
                "clear_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info vault_secret_info wingman_secret_info]\nx-displayName: \"Clear Secret\"\nClear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType"
                },
                "secret_encoding_type": {
                    "description": " This field defines the encoding type of the secret BEFORE the secret is given to any Secret Management System.\n this will be set if the secret is encoded and not plaintext BEFORE it is encrypted and put it in SecretType.\n Note - Do NOT set this field for Clear Secret with string:/// scheme.\n e.g. if a secret is base64 encoded and then put into vault.",
                    "title": "secret_encoding_type",
                    "$ref": "#/definitions/schemaSecretEncodingType",
                    "x-displayname": "Secret Encoding"
                },
                "vault_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info clear_secret_info wingman_secret_info]\nx-displayName: \"Vault Secret\"\nVault Secret is used for the secrets managed by Hashicorp Vault",
                    "title": "Vault Secret",
                    "$ref": "#/definitions/schemaVaultSecretInfoType"
                },
                "wingman_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info clear_secret_info vault_secret_info]\nx-displayName: \"Bootstrap Secret\"\nSecret is given as bootstrap secret in Volterra Security Sidecar",
                    "title": "Wingman Secret",
                    "$ref": "#/definitions/schemaWingmanSecretInfoType"
                }
            }
        },
        "schemaStaticRouteType": {
            "type": "object",
            "description": "Defines a static route, configuring a list of prefixes and a next-hop to be used for them",
            "title": "Static Route",
            "x-displayname": "Static Route",
            "x-ves-displayorder": "2,10,11,1",
            "x-ves-proto-message": "ves.io.schema.StaticRouteType",
            "properties": {
                "attrs": {
                    "type": "array",
                    "description": " List of route attributes associated with the static route",
                    "title": "Attributes",
                    "items": {
                        "$ref": "#/definitions/schemaRouteAttrType"
                    },
                    "x-displayname": "Attributes"
                },
                "labels": {
                    "type": "object",
                    "description": " Add Labels for this Static Route, these labels can be used in network policy",
                    "title": "Static Route labels",
                    "x-displayname": "Static Route Labels"
                },
                "nexthop": {
                    "description": " Nexthop for the route",
                    "title": "Nexthop",
                    "$ref": "#/definitions/schemaNextHopType",
                    "x-displayname": "Nexthop"
                },
                "subnets": {
                    "type": "array",
                    "description": " List of route prefixes",
                    "title": "Subnets",
                    "items": {
                        "$ref": "#/definitions/schemaIpSubnetType"
                    },
                    "x-displayname": "Subnets"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "VaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "x-displayname": "Vault Secret",
            "x-ves-displayorder": "1,2,3,4,5",
            "x-ves-proto-message": "ves.io.schema.VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": " Key of the individual secret. Vault Secrets are stored as key-value pair.\n If user is only interested in one value from the map, this field should be set to the corresponding key.\n If not provided entire secret will be returned.\n\nExample: - \"key_pem\"-",
                    "title": "Key",
                    "x-displayname": "Key",
                    "x-ves-example": "key_pem"
                },
                "location": {
                    "type": "string",
                    "description": " Path to secret in Vault.\n\nExample: - \"v1/data/vhost_key\"-\nRequired: YES",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "v1/data/vhost_key",
                    "x-ves-required": "true"
                },
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Vault.\n\nExample: - \"vault-vh-provider\"-\nRequired: YES",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "vault-vh-provider",
                    "x-ves-required": "true"
                },
                "secret_encoding": {
                    "description": " This field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType",
                    "x-displayname": "Secret Encoding"
                },
                "version": {
                    "type": "integer",
                    "description": " Version of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\n If not provided latest version will be returned.\n\nExample: - \"1\"-",
                    "title": "Version",
                    "format": "int64",
                    "x-displayname": "Version",
                    "x-ves-example": "1"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "WingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "x-displayname": "Wingman Secret",
            "x-ves-proto-message": "ves.io.schema.WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the secret.\n\nExample: - \"ChargeBack-API-Key\"-\nRequired: YES",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "ChargeBack-API-Key",
                    "x-ves-required": "true"
                }
            }
        },
        "schemafleetCreateSpecType": {
            "type": "object",
            "description": "Create fleet will create a fleet object in 'system' namespace of the user",
            "title": "Create Fleet",
            "x-displayname": "Create Fleet",
            "x-ves-oneof-field-bond_choice": "[\"bond_device_list\",\"no_bond_devices\"]",
            "x-ves-oneof-field-dc_cluster_group_choice": "[\"dc_cluster_group\",\"dc_cluster_group_inside\",\"no_dc_cluster_group\"]",
            "x-ves-oneof-field-gpu_choice": "[\"disable_gpu\",\"enable_gpu\",\"enable_vgpu\"]",
            "x-ves-oneof-field-interface_choice": "[\"default_config\",\"device_list\",\"interface_list\"]",
            "x-ves-oneof-field-logs_receiver_choice": "[\"log_receiver\",\"logs_streaming_disabled\"]",
            "x-ves-oneof-field-storage_class_choice": "[\"default_storage_class\",\"storage_class_list\"]",
            "x-ves-oneof-field-storage_device_choice": "[\"no_storage_device\",\"storage_device_list\"]",
            "x-ves-oneof-field-storage_interface_choice": "[\"no_storage_interfaces\",\"storage_interface_list\"]",
            "x-ves-oneof-field-storage_static_routes_choice": "[\"no_storage_static_routes\",\"storage_static_routes\"]",
            "x-ves-oneof-field-usb_policy_choice": "[\"allow_all_usb\",\"deny_all_usb\",\"usb_policy\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.CreateSpecType",
            "properties": {
                "allow_all_usb": {
                    "description": "Exclusive with [deny_all_usb usb_policy]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "bond_device_list": {
                    "description": "Exclusive with [no_bond_devices]\n",
                    "$ref": "#/definitions/fleetFleetBondDevicesListType"
                },
                "dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group_inside no_dc_cluster_group]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "dc_cluster_group_inside": {
                    "description": "Exclusive with [dc_cluster_group no_dc_cluster_group]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "default_config": {
                    "description": "Exclusive with [device_list interface_list]\nx-displayName: \"Default Interface Config\"\nUse default configuration for interfaces belonging to this fleet",
                    "title": "No Interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_storage_class": {
                    "description": "Exclusive with [storage_class_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_usb": {
                    "description": "Exclusive with [allow_all_usb usb_policy]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "device_list": {
                    "description": "Exclusive with [default_config interface_list]\nx-displayName: \"Legacy Device List\"\nAdd device for all interfaces belonging to this fleet",
                    "title": "Legacy Device Config",
                    "$ref": "#/definitions/fleetFleetDeviceListType"
                },
                "disable_gpu": {
                    "description": "Exclusive with [enable_gpu enable_vgpu]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_default_fleet_config_download": {
                    "type": "boolean",
                    "description": " Enable default fleet config, It must be set for storage config and gpu config",
                    "format": "boolean",
                    "x-displayname": "Enable Default Fleet Config Download"
                },
                "enable_gpu": {
                    "description": "Exclusive with [disable_gpu enable_vgpu]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_vgpu": {
                    "description": "Exclusive with [disable_gpu enable_gpu]\n",
                    "$ref": "#/definitions/fleetVGPUConfiguration"
                },
                "fleet_label": {
                    "type": "string",
                    "description": " fleet_label value is used to create known_label \"ves.io/fleet=\u003cfleet_label\u003e\"\n The known_label is created in the \"shared\" namespace for the tenant.\n\n A virtual_site object with name \u003cfleet_label\u003e is also created in \"shared\" namespace for tenant. \n The virtual_site object will select all sites configured with the known_label above\n fleet_label with \"sfo\" will create a known_label \"ves.io/fleet=sfo\" in tenant for the fleet\n\nExample: - \"sfo\"-\nRequired: YES",
                    "x-displayname": "Fleet Label Value",
                    "x-ves-example": "sfo",
                    "x-ves-required": "true"
                },
                "inside_virtual_network": {
                    "type": "array",
                    "description": " Default inside (site local) virtual network for the fleet",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Site Local Inside Virtual Network"
                },
                "interface_list": {
                    "description": "Exclusive with [default_config device_list]\nx-displayName: \"List of Interfaces\"\nAdd all interfaces belonging to this fleet",
                    "title": "List of Interfaces",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "log_receiver": {
                    "description": "Exclusive with [logs_streaming_disabled]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "logs_streaming_disabled": {
                    "description": "Exclusive with [log_receiver]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "network_connectors": {
                    "type": "array",
                    "description": " Network Connector defines connection between two virtual networks in a given site.\n Fleet defines one or more such network connectors.\n The network connectors configuration is applied on all sites that are member of the fleet.",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Connectors"
                },
                "network_firewall": {
                    "type": "array",
                    "description": " Network Firewall defines firewall to be applied for the virtual networks in the fleet.\n The network firewall configuration is applied on all sites that are member of the fleet.\n\n Constraints\n The Network Firewall is applied on Virtual Networks of type site local network and site local inside network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Firewall"
                },
                "no_bond_devices": {
                    "description": "Exclusive with [bond_device_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group dc_cluster_group_inside]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_device": {
                    "description": "Exclusive with [storage_device_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_interfaces": {
                    "description": "Exclusive with [storage_interface_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_static_routes": {
                    "description": "Exclusive with [storage_static_routes]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version that is applied to all sites that are member of the fleet.\n Current Operating System version can be overridden via site config.\n\nExample: - \"value\"-",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_virtual_network": {
                    "type": "array",
                    "description": " Default outside (site local) virtual network for the fleet",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Outside (Site Local) Virtual Network"
                },
                "storage_class_list": {
                    "description": "Exclusive with [default_storage_class]\n",
                    "$ref": "#/definitions/fleetFleetStorageClassListType"
                },
                "storage_device_list": {
                    "description": "Exclusive with [no_storage_device]\n",
                    "$ref": "#/definitions/fleetFleetStorageDeviceListType"
                },
                "storage_interface_list": {
                    "description": "Exclusive with [no_storage_interfaces]\n",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "storage_static_routes": {
                    "description": "Exclusive with [no_storage_static_routes]\n",
                    "$ref": "#/definitions/fleetFleetStorageStaticRoutesListType"
                },
                "usb_policy": {
                    "description": "Exclusive with [allow_all_usb deny_all_usb]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Volterra software version is human readable string matching released set of version components.\n The given software version is applied to all sites that are member of the fleet.\n Current software installed can be overridden via site config.\n\nExample: - \"value\"-",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "schemafleetGetSpecType": {
            "type": "object",
            "description": "Get fleet will get fleet object from system namespace",
            "title": "Get fleet",
            "x-displayname": "Get Fleet",
            "x-ves-oneof-field-bond_choice": "[\"bond_device_list\",\"no_bond_devices\"]",
            "x-ves-oneof-field-dc_cluster_group_choice": "[\"dc_cluster_group\",\"dc_cluster_group_inside\",\"no_dc_cluster_group\"]",
            "x-ves-oneof-field-gpu_choice": "[\"disable_gpu\",\"enable_gpu\",\"enable_vgpu\"]",
            "x-ves-oneof-field-interface_choice": "[\"default_config\",\"device_list\",\"interface_list\"]",
            "x-ves-oneof-field-logs_receiver_choice": "[\"log_receiver\",\"logs_streaming_disabled\"]",
            "x-ves-oneof-field-storage_class_choice": "[\"default_storage_class\",\"storage_class_list\"]",
            "x-ves-oneof-field-storage_device_choice": "[\"no_storage_device\",\"storage_device_list\"]",
            "x-ves-oneof-field-storage_interface_choice": "[\"no_storage_interfaces\",\"storage_interface_list\"]",
            "x-ves-oneof-field-storage_static_routes_choice": "[\"no_storage_static_routes\",\"storage_static_routes\"]",
            "x-ves-oneof-field-usb_policy_choice": "[\"allow_all_usb\",\"deny_all_usb\",\"usb_policy\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.GetSpecType",
            "properties": {
                "allow_all_usb": {
                    "description": "Exclusive with [deny_all_usb usb_policy]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "bond_device_list": {
                    "description": "Exclusive with [no_bond_devices]\n",
                    "$ref": "#/definitions/fleetFleetBondDevicesListType"
                },
                "dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group_inside no_dc_cluster_group]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "dc_cluster_group_inside": {
                    "description": "Exclusive with [dc_cluster_group no_dc_cluster_group]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "default_config": {
                    "description": "Exclusive with [device_list interface_list]\nx-displayName: \"Default Interface Config\"\nUse default configuration for interfaces belonging to this fleet",
                    "title": "No Interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_storage_class": {
                    "description": "Exclusive with [storage_class_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_usb": {
                    "description": "Exclusive with [allow_all_usb usb_policy]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "device_list": {
                    "description": "Exclusive with [default_config interface_list]\nx-displayName: \"Legacy Device List\"\nAdd device for all interfaces belonging to this fleet",
                    "title": "Legacy Device Config",
                    "$ref": "#/definitions/fleetFleetDeviceListType"
                },
                "disable_gpu": {
                    "description": "Exclusive with [enable_gpu enable_vgpu]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_default_fleet_config_download": {
                    "type": "boolean",
                    "description": " Enable default fleet config, It must be set for storage config and gpu config",
                    "format": "boolean",
                    "x-displayname": "Enable Default Fleet Config Download"
                },
                "enable_gpu": {
                    "description": "Exclusive with [disable_gpu enable_vgpu]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_vgpu": {
                    "description": "Exclusive with [disable_gpu enable_gpu]\n",
                    "$ref": "#/definitions/fleetVGPUConfiguration"
                },
                "fleet_label": {
                    "type": "string",
                    "description": " fleet_label value is used to create known_label \"ves.io/fleet=\u003cfleet_label\u003e\"\n The known_label is created in the \"shared\" namespace for the tenant.\n\n A virtual_site object with name \u003cfleet_label\u003e is also created in \"shared\" namespace for tenant. \n The virtual_site object will select all sites configured with the known_label above\n fleet_label with \"sfo\" will create a known_label \"ves.io/fleet=sfo\" in tenant for the fleet\n\nExample: - \"sfo\"-\nRequired: YES",
                    "x-displayname": "Fleet Label Value",
                    "x-ves-example": "sfo",
                    "x-ves-required": "true"
                },
                "inside_virtual_network": {
                    "type": "array",
                    "description": " Default inside (site local) virtual network for the fleet",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Site Local Inside Virtual Network"
                },
                "interface_list": {
                    "description": "Exclusive with [default_config device_list]\nx-displayName: \"List of Interface\"\nAdd all interfaces belonging to this fleet",
                    "title": "List of Interfaces",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "log_receiver": {
                    "description": "Exclusive with [logs_streaming_disabled]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "logs_streaming_disabled": {
                    "description": "Exclusive with [log_receiver]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "network_connectors": {
                    "type": "array",
                    "description": " Network Connector defines connection between two virtual networks in a given site.\n Fleet defines one or more such network connectors.\n The network connectors configuration is applied on all sites that are member of the fleet.",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Connectors"
                },
                "network_firewall": {
                    "type": "array",
                    "description": " Network Firewall defines firewall to be applied for the virtual networks in the fleet.\n The network firewall configuration is applied on all sites that are member of the fleet.\n\n Constraints\n The Network Firewall is applied on Virtual Networks of type site local network and site local inside network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Firewall"
                },
                "no_bond_devices": {
                    "description": "Exclusive with [bond_device_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group dc_cluster_group_inside]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_device": {
                    "description": "Exclusive with [storage_device_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_interfaces": {
                    "description": "Exclusive with [storage_interface_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_static_routes": {
                    "description": "Exclusive with [storage_static_routes]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version that is applied to all sites that are member of the fleet.\n Current Operating System version can be overridden via site config.\n\nExample: - \"value\"-",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_virtual_network": {
                    "type": "array",
                    "description": " Default outside (site local) virtual network for the fleet",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Outside (Site Local) Virtual Network"
                },
                "storage_class_list": {
                    "description": "Exclusive with [default_storage_class]\n",
                    "$ref": "#/definitions/fleetFleetStorageClassListType"
                },
                "storage_device_list": {
                    "description": "Exclusive with [no_storage_device]\n",
                    "$ref": "#/definitions/fleetFleetStorageDeviceListType"
                },
                "storage_interface_list": {
                    "description": "Exclusive with [no_storage_interfaces]\n",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "storage_static_routes": {
                    "description": "Exclusive with [no_storage_static_routes]\n",
                    "$ref": "#/definitions/fleetFleetStorageStaticRoutesListType"
                },
                "usb_policy": {
                    "description": "Exclusive with [allow_all_usb deny_all_usb]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Volterra software version is human readable string matching released set of version components.\n The given software version is applied to all sites that are member of the fleet.\n Current software installed can be overridden via site config.\n\nExample: - \"value\"-",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "schemafleetGlobalSpecType": {
            "type": "object",
            "description": "Fleet specifications",
            "title": "Global Specifications",
            "x-displayname": "Global Specifications",
            "x-ves-oneof-field-bond_choice": "[\"bond_device_list\",\"no_bond_devices\"]",
            "x-ves-oneof-field-dc_cluster_group_choice": "[\"dc_cluster_group\",\"dc_cluster_group_inside\",\"no_dc_cluster_group\"]",
            "x-ves-oneof-field-gpu_choice": "[\"disable_gpu\",\"enable_gpu\",\"enable_vgpu\"]",
            "x-ves-oneof-field-interface_choice": "[\"default_interfaces\",\"interface_list\",\"legacy_devices\"]",
            "x-ves-oneof-field-logs_receiver_choice": "[\"log_receiver\",\"logs_streaming_disabled\"]",
            "x-ves-oneof-field-storage_class_choice": "[\"default_storage_class\",\"storage_class_list\"]",
            "x-ves-oneof-field-storage_device_choice": "[\"no_storage_device\",\"storage_device_list\"]",
            "x-ves-oneof-field-storage_interface_choice": "[\"no_storage_interfaces\",\"storage_interface_list\"]",
            "x-ves-oneof-field-storage_static_routes_choice": "[\"no_storage_static_routes\",\"storage_static_routes\"]",
            "x-ves-oneof-field-usb_policy_choice": "[\"allow_all_usb\",\"deny_all_usb\",\"usb_policy\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.GlobalSpecType",
            "properties": {
                "allow_all_usb": {
                    "description": "Exclusive with [deny_all_usb usb_policy]\nx-displayName: \"Allow All USB Devices\"\nAll USB devices are allowed",
                    "title": "Allow All USB Devices",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "bond_device_list": {
                    "description": "Exclusive with [no_bond_devices]\nx-displayName: \"Configure Bond Interfaces\"\nConfigure Bond Devices for this fleet",
                    "title": "Configure Bond Devices",
                    "$ref": "#/definitions/fleetFleetBondDevicesListType"
                },
                "dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group_inside no_dc_cluster_group]\nx-displayName: \"Member of DC cluster Group, Site Local\"\nThis fleet is member of dc cluster group via site local network",
                    "title": "Member of DC cluster Group",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "dc_cluster_group_inside": {
                    "description": "Exclusive with [dc_cluster_group no_dc_cluster_group]\nx-displayName: \"Member of DC cluster Group, Inside Network\"\nThis fleet is member of dc cluster group via site local inside network",
                    "title": "Member of DC cluster Group",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "default_interfaces": {
                    "description": "Exclusive with [interface_list legacy_devices]\nx-displayName: \"Default Interface Config\"\nUse default configuration for interfaces belonging to this fleet",
                    "title": "No Interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_storage_class": {
                    "description": "Exclusive with [storage_class_list]\nx-displayName: \"Default Storage Class\"\nUse only default storage class in kubernetes",
                    "title": "Default Storage Class",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_usb": {
                    "description": "Exclusive with [allow_all_usb usb_policy]\nx-displayName: \"Deny All USB Devices\"\nAll USB devices are denied",
                    "title": "Deny All USB Devices",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "devices": {
                    "type": "array",
                    "description": " Configuration for all devices in the fleet.\n Examples of devices are - network interfaces, cameras, scanners etc.\n Configuration a device is applied on VER node if the VER node is member of this fleet and\n has an corresponding interface/device. The mapping from device configured in fleet with\n interface/device in VER node depends on the type of device and is documented in\n device instance specific sections",
                    "title": "Devices",
                    "items": {
                        "$ref": "#/definitions/fleetDeviceInstanceType"
                    },
                    "x-displayname": "Devices"
                },
                "disable_gpu": {
                    "description": "Exclusive with [enable_gpu enable_vgpu]\nx-displayName: \"GPU Disabled\"\nGPU is not enabled for this fleet",
                    "title": "GPU Disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_default_fleet_config_download": {
                    "type": "boolean",
                    "description": " Enable default fleet config, It must be set for storage config and gpu config",
                    "title": "Enable default fleet config download",
                    "format": "boolean",
                    "x-displayname": "Enable Default Fleet Config Download"
                },
                "enable_gpu": {
                    "description": "Exclusive with [disable_gpu enable_vgpu]\nx-displayName: \"GPU Enabled\"\nGPU is enabled for this fleet",
                    "title": "Member of DC cluster Group",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_vgpu": {
                    "description": "Exclusive with [disable_gpu enable_gpu]\nx-displayName: \"vGPU Enabled\"\nEnable NVIDIA vGPU hosted on VMware",
                    "title": "vGPU Enabled",
                    "$ref": "#/definitions/fleetVGPUConfiguration"
                },
                "etcd_cluster_network": {
                    "description": " Decided which network is used for etcd clustering",
                    "title": "Etcd Clustering Network",
                    "$ref": "#/definitions/fleetEtcdClusterNetworkType",
                    "x-displayname": "Etcd Clustering Network"
                },
                "fleet_label": {
                    "type": "string",
                    "description": " fleet_label value is used to create known_label \"ves.io/fleet=\u003cfleet_label\u003e\"\n The known_label is created in the \"shared\" namespace for the tenant.\n\n A virtual_site object with name \u003cfleet_label\u003e is also created in \"shared\" namespace for tenant. \n The virtual_site object will select all sites configured with the known_label above\n fleet_label with \"sfo\" will create a known_label \"ves.io/fleet=sfo\" in tenant for the fleet\n\nExample: - \"sfo\"-\nRequired: YES",
                    "title": "fleet_label",
                    "x-displayname": "Fleet Label Value",
                    "x-ves-example": "sfo",
                    "x-ves-required": "true"
                },
                "fleet_type": {
                    "description": " Fleet Type can be fleet of single site or multiple sites. Corresponding virtual site is not created\n for single site fleet.",
                    "title": "Fleet type",
                    "$ref": "#/definitions/fleetFleetType",
                    "x-displayname": "Fleet Type"
                },
                "generated_yamls": {
                    "type": "array",
                    "description": " K8s YAML for CustomStorageClass",
                    "title": "K8s YAMLs",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "K8s YAMLs"
                },
                "inside_virtual_network": {
                    "type": "array",
                    "description": " Default inside (site local) virtual network for the fleet",
                    "title": "Inside Virtual Network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Site Local Inside Virtual Network"
                },
                "interface_list": {
                    "description": "Exclusive with [default_interfaces legacy_devices]\nx-displayName: \"List of Interfaces\"\nAdd all interfaces belonging to this fleet",
                    "title": "List of Interfaces",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "k8s_cluster": {
                    "description": " Local K8s cluster access is enabled, using config k8s_cluster object",
                    "title": "Enable Local K8s Cluster access",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Enable Local K8s Cluster access"
                },
                "legacy_devices": {
                    "description": "Exclusive with [default_interfaces interface_list]\nx-displayName: \"Legacy Device List\"\nAdd device for all interfaces belonging to this fleet",
                    "title": "Legacy Device Config",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "local_control_plane": {
                    "description": " Enable local control plane for L3VPN, SRV6, EVPN etc",
                    "title": "Local Control Plane",
                    "$ref": "#/definitions/fleetLocalControlPlaneType",
                    "x-displayname": "Local Control Plane"
                },
                "log_receiver": {
                    "description": "Exclusive with [logs_streaming_disabled]\nx-displayName: \"Enable Logs Streaming\"\nSelect log receiver for logs streaming",
                    "title": "Disable Logs Streaming",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "logs_streaming_disabled": {
                    "description": "Exclusive with [log_receiver]\nx-displayName: \"Disable Logs Streaming\"\nLogs Streaming is disabled",
                    "title": "Disable Logs Receiver",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "network_connectors": {
                    "type": "array",
                    "description": " Network Connector defines connection between two virtual networks in a given site.\n Fleet defines one or more such network connectors.\n The network connectors configuration is applied on all sites that are member of the fleet.",
                    "title": "Network Connectors",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Connectors"
                },
                "network_firewall": {
                    "type": "array",
                    "description": " Network Firewall defines firewall to be applied for the virtual networks in the fleet.\n The network firewall configuration is applied on all sites that are member of the fleet.\n\n Constraints\n The Network Firewall is applied on Virtual Networks of type site local network and site local inside network",
                    "title": "Network Firewall",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Firewall"
                },
                "no_bond_devices": {
                    "description": "Exclusive with [bond_device_list]\nx-displayName: \"No Bond Devices\"\nNo Bond Devices configured for this Fleet",
                    "title": "No Bond Devices",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group dc_cluster_group_inside]\nx-displayName: \"Not a Member\"\nThis fleet is not a member of a DC cluster group",
                    "title": "Not a Member",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_device": {
                    "description": "Exclusive with [storage_device_list]\nx-displayName: \"No Storage Devices\"\nThis fleet does not have any storage devices",
                    "title": "No Storage Devices",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_interfaces": {
                    "description": "Exclusive with [storage_interface_list]\nx-displayName: \"No Storage Interfaces\"\nThis fleet does not have any storage interfaces",
                    "title": "No Storage Interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_static_routes": {
                    "description": "Exclusive with [storage_static_routes]\nx-displayName: \"No Storage Static Routes\"\nThis fleet does not have any storage static routes",
                    "title": "No Storage Static Routes",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version that is applied to all sites that are member of the fleet.\n Current Operating System version can be overridden via site config.\n\nExample: - \"value\"-",
                    "title": "Operating System Version",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_virtual_network": {
                    "type": "array",
                    "description": " Default outside (site local) virtual network for the fleet",
                    "title": "Outside Virtual Network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Outside (Site Local) Virtual Network"
                },
                "single_site": {
                    "type": "array",
                    "description": " Vega should use this ref when when fleet type is single site fleet",
                    "title": "Single Site Fleet Site",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Single Site Fleet Site"
                },
                "storage_class_list": {
                    "description": "Exclusive with [default_storage_class]\nx-displayName: \"Add Custom Storage Class\"\nAdd additional custom storage classes in kubernetes for this fleet",
                    "title": "Custom Storage Class",
                    "$ref": "#/definitions/fleetFleetStorageClassListType"
                },
                "storage_device_list": {
                    "description": "Exclusive with [no_storage_device]\nx-displayName: \"List of Storage Devices\"\nAdd all storage devices belonging to this fleet",
                    "title": "List of Storage Interfaces",
                    "$ref": "#/definitions/fleetFleetStorageDeviceListType"
                },
                "storage_interface_list": {
                    "description": "Exclusive with [no_storage_interfaces]\nx-displayName: \"List of Storage Interface\"\nAdd all storage interfaces belonging to this fleet",
                    "title": "List of Storage Interfaces",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "storage_static_routes": {
                    "description": "Exclusive with [no_storage_static_routes]\nx-displayName: \"List of Storage Static Routes\"\nAdd all storage storage static routes",
                    "title": "List of Storage Interfaces",
                    "$ref": "#/definitions/fleetFleetStorageStaticRoutesListType"
                },
                "usb_policy": {
                    "description": "Exclusive with [allow_all_usb deny_all_usb]\nx-displayName: \"USB Device Policy\"\nAllow only specific USB devices",
                    "title": "USB Device Policy",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "view_internal": {
                    "description": " Reference to view internal object",
                    "title": "view_internal",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "View Internal"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Volterra software version is human readable string matching released set of version components.\n The given software version is applied to all sites that are member of the fleet.\n Current software installed can be overridden via site config.\n\nExample: - \"value\"-",
                    "title": "Software Version",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "schemafleetReplaceSpecType": {
            "type": "object",
            "description": "Replace fleet will replace the contents of given fleet object",
            "title": "Replace fleet",
            "x-displayname": "Replace Fleet",
            "x-ves-oneof-field-bond_choice": "[\"bond_device_list\",\"no_bond_devices\"]",
            "x-ves-oneof-field-dc_cluster_group_choice": "[\"dc_cluster_group\",\"dc_cluster_group_inside\",\"no_dc_cluster_group\"]",
            "x-ves-oneof-field-gpu_choice": "[\"disable_gpu\",\"enable_gpu\",\"enable_vgpu\"]",
            "x-ves-oneof-field-interface_choice": "[\"default_config\",\"device_list\",\"interface_list\"]",
            "x-ves-oneof-field-logs_receiver_choice": "[\"log_receiver\",\"logs_streaming_disabled\"]",
            "x-ves-oneof-field-storage_class_choice": "[\"default_storage_class\",\"storage_class_list\"]",
            "x-ves-oneof-field-storage_device_choice": "[\"no_storage_device\",\"storage_device_list\"]",
            "x-ves-oneof-field-storage_interface_choice": "[\"no_storage_interfaces\",\"storage_interface_list\"]",
            "x-ves-oneof-field-storage_static_routes_choice": "[\"no_storage_static_routes\",\"storage_static_routes\"]",
            "x-ves-oneof-field-usb_policy_choice": "[\"allow_all_usb\",\"deny_all_usb\",\"usb_policy\"]",
            "x-ves-proto-message": "ves.io.schema.fleet.ReplaceSpecType",
            "properties": {
                "allow_all_usb": {
                    "description": "Exclusive with [deny_all_usb usb_policy]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "bond_device_list": {
                    "description": "Exclusive with [no_bond_devices]\n",
                    "$ref": "#/definitions/fleetFleetBondDevicesListType"
                },
                "dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group_inside no_dc_cluster_group]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "dc_cluster_group_inside": {
                    "description": "Exclusive with [dc_cluster_group no_dc_cluster_group]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "default_config": {
                    "description": "Exclusive with [device_list interface_list]\nx-displayName: \"Default Interface Config\"\nUse default configuration for interfaces belonging to this fleet",
                    "title": "No Interfaces",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_storage_class": {
                    "description": "Exclusive with [storage_class_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_usb": {
                    "description": "Exclusive with [allow_all_usb usb_policy]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "device_list": {
                    "description": "Exclusive with [default_config interface_list]\nx-displayName: \"Legacy Device List\"\nAdd device for all interfaces belonging to this fleet",
                    "title": "Legacy Device Config",
                    "$ref": "#/definitions/fleetFleetDeviceListType"
                },
                "disable_gpu": {
                    "description": "Exclusive with [enable_gpu enable_vgpu]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_default_fleet_config_download": {
                    "type": "boolean",
                    "description": " Enable default fleet config, It must be set for storage config and gpu config",
                    "format": "boolean",
                    "x-displayname": "Enable Default Fleet Config Download"
                },
                "enable_gpu": {
                    "description": "Exclusive with [disable_gpu enable_vgpu]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "enable_vgpu": {
                    "description": "Exclusive with [disable_gpu enable_gpu]\n",
                    "$ref": "#/definitions/fleetVGPUConfiguration"
                },
                "inside_virtual_network": {
                    "type": "array",
                    "description": " Default inside (site local) virtual network for the fleet",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Site Local Inside Virtual Network"
                },
                "interface_list": {
                    "description": "Exclusive with [default_config device_list]\nx-displayName: \"List of Interface\"\nAdd all interfaces belonging to this fleet",
                    "title": "List of Interfaces",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "log_receiver": {
                    "description": "Exclusive with [logs_streaming_disabled]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "logs_streaming_disabled": {
                    "description": "Exclusive with [log_receiver]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "network_connectors": {
                    "type": "array",
                    "description": " Network Connector defines connection between two virtual networks in a given site.\n Fleet defines one or more such network connectors.\n The network connectors configuration is applied on all sites that are member of the fleet.",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Connectors"
                },
                "network_firewall": {
                    "type": "array",
                    "description": " Network Firewall defines firewall to be applied for the virtual networks in the fleet.\n The network firewall configuration is applied on all sites that are member of the fleet.\n\n Constraints\n The Network Firewall is applied on Virtual Networks of type site local network and site local inside network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Network Firewall"
                },
                "no_bond_devices": {
                    "description": "Exclusive with [bond_device_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_dc_cluster_group": {
                    "description": "Exclusive with [dc_cluster_group dc_cluster_group_inside]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_device": {
                    "description": "Exclusive with [storage_device_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_interfaces": {
                    "description": "Exclusive with [storage_interface_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "no_storage_static_routes": {
                    "description": "Exclusive with [storage_static_routes]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version that is applied to all sites that are member of the fleet.\n Current Operating System version can be overridden via site config.\n\nExample: - \"value\"-",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_virtual_network": {
                    "type": "array",
                    "description": " Default outside (site local) virtual network for the fleet",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Outside (Site Local) Virtual Network"
                },
                "storage_class_list": {
                    "description": "Exclusive with [default_storage_class]\n",
                    "$ref": "#/definitions/fleetFleetStorageClassListType"
                },
                "storage_device_list": {
                    "description": "Exclusive with [no_storage_device]\n",
                    "$ref": "#/definitions/fleetFleetStorageDeviceListType"
                },
                "storage_interface_list": {
                    "description": "Exclusive with [no_storage_interfaces]\n",
                    "$ref": "#/definitions/fleetFleetInterfaceListType"
                },
                "storage_static_routes": {
                    "description": "Exclusive with [no_storage_static_routes]\n",
                    "$ref": "#/definitions/fleetFleetStorageStaticRoutesListType"
                },
                "usb_policy": {
                    "description": "Exclusive with [allow_all_usb deny_all_usb]\n",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Volterra software version is human readable string matching released set of version components.\n The given software version is applied to all sites that are member of the fleet.\n Current software installed can be overridden via site config.\n\nExample: - \"value\"-",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                }
            }
        },
        "viewsPrefixStringListType": {
            "type": "object",
            "description": "x-example: \"192.168.20.0/24\"\nList of IPv4 prefixes that represent an endpoint",
            "title": "ipv4 prefix list",
            "x-displayname": "IPv4 Prefix List",
            "x-ves-proto-message": "ves.io.schema.views.PrefixStringListType",
            "properties": {
                "prefixes": {
                    "type": "array",
                    "description": " List of IPv4 prefixes that represent an endpoint\n\nExample: - \"192.168.20.0/24\"-\nRequired: YES",
                    "title": "ipv4 prefix list",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv4 Prefix List",
                    "x-ves-example": "192.168.20.0/24",
                    "x-ves-required": "true"
                }
            }
        }
    },
    "x-displayname": "Fleet",
    "x-ves-proto-file": "ves.io/schema/fleet/public_crudapi.proto"
}`

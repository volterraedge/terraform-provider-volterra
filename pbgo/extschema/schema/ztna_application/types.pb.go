// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ztna_application/types.proto

package ztna_application

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Transport Type
//
// x-displayName: "Transport Type"
// Transport Type
type TransportType int32

const (
	// UDP
	//
	// x-displayName: "UDP"
	UDP TransportType = 0
	// TCP
	//
	// x-displayName: "TCP"
	TCP TransportType = 1
	// Both TCP and UDP
	//
	// x-displayName: "Both TCP and UDP"
	BothTCPAndUDP TransportType = 2
)

var TransportType_name = map[int32]string{
	0: "UDP",
	1: "TCP",
	2: "BothTCPAndUDP",
}

var TransportType_value = map[string]int32{
	"UDP":           0,
	"TCP":           1,
	"BothTCPAndUDP": 2,
}

func (TransportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{0}
}

// Service Details
//
// x-displayName: "Service Details"
// Object represents a service IP in the system.
// This message is part of the ZTNA application schema.
type ServiceDetails struct {
	// Service IP
	//
	// x-displayName: "Service IP"
	// Used to set the Service IP
	Ip *schema.IpAddressType `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port
	//
	// x-displayName: "Port"
	// Matches port
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ServiceDetails) Reset()      { *m = ServiceDetails{} }
func (*ServiceDetails) ProtoMessage() {}
func (*ServiceDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{0}
}
func (m *ServiceDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceDetails.Merge(m, src)
}
func (m *ServiceDetails) XXX_Size() int {
	return m.Size()
}
func (m *ServiceDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceDetails proto.InternalMessageInfo

func (m *ServiceDetails) GetIp() *schema.IpAddressType {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *ServiceDetails) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// ZTNA policies
//
// x-displayName: "ZTNA policies"
// Object represents a policy in the system.
// This message is part of the ZTNA application schema.
type ZTNApolicies struct {
	// Connectivity policy name
	//
	// x-displayName: "Connectivity policy name "
	// x-example: "connectivity_demo"
	// Used to set the Connectivity policy name
	ConnectivityPolicyName string `protobuf:"bytes,2,opt,name=connectivity_policy_name,json=connectivityPolicyName,proto3" json:"connectivity_policy_name,omitempty"`
	// session policy name
	//
	// x-displayName: "session policy name"
	// x-example: "ara_p1"
	// Used to set the session policy name
	SessionPolicyName string `protobuf:"bytes,1,opt,name=session_policy_name,json=sessionPolicyName,proto3" json:"session_policy_name,omitempty"`
	// Message policy name
	//
	// x-displayName: "Message policy name "
	// x-example: "msg_demo"
	// Used to set the Message policy name
	MessagePolicyName string `protobuf:"bytes,3,opt,name=message_policy_name,json=messagePolicyName,proto3" json:"message_policy_name,omitempty"`
}

func (m *ZTNApolicies) Reset()      { *m = ZTNApolicies{} }
func (*ZTNApolicies) ProtoMessage() {}
func (*ZTNApolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{1}
}
func (m *ZTNApolicies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZTNApolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZTNApolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZTNApolicies.Merge(m, src)
}
func (m *ZTNApolicies) XXX_Size() int {
	return m.Size()
}
func (m *ZTNApolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_ZTNApolicies.DiscardUnknown(m)
}

var xxx_messageInfo_ZTNApolicies proto.InternalMessageInfo

func (m *ZTNApolicies) GetConnectivityPolicyName() string {
	if m != nil {
		return m.ConnectivityPolicyName
	}
	return ""
}

func (m *ZTNApolicies) GetSessionPolicyName() string {
	if m != nil {
		return m.SessionPolicyName
	}
	return ""
}

func (m *ZTNApolicies) GetMessagePolicyName() string {
	if m != nil {
		return m.MessagePolicyName
	}
	return ""
}

// TileAccess
//
// x-displayName: "Tile Access"
// Defines access of primary navigation tile.
type TileAccess struct {
	// state
	//
	// x-displayName: "Addon Service State"
	// Addon service current state
	State schema.TileAccessState `protobuf:"varint,1,opt,name=state,proto3,enum=ves.io.schema.TileAccessState" json:"state,omitempty"`
	// display_name
	//
	// x-displayName: "Display Name"
	// Name to use for display purposes
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *TileAccess) Reset()      { *m = TileAccess{} }
func (*TileAccess) ProtoMessage() {}
func (*TileAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{2}
}
func (m *TileAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TileAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TileAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileAccess.Merge(m, src)
}
func (m *TileAccess) XXX_Size() int {
	return m.Size()
}
func (m *TileAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_TileAccess.DiscardUnknown(m)
}

var xxx_messageInfo_TileAccess proto.InternalMessageInfo

func (m *TileAccess) GetState() schema.TileAccessState {
	if m != nil {
		return m.State
	}
	return schema.TILE_AC_NONE
}

func (m *TileAccess) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// Proxy Advertisement Type
//
// x-displayName: "Proxy Advertisement Type"
// Proxy Advertisement Type
type ProxyAdvertisementType struct {
	// Proxy Advertisement choice
	//
	// x-displayName: "Proxy Advertisement choice"
	// x-required
	// Proxy Advertisement choice, Internet or Custom.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ProxyAdvertisementType_DoNotAdvertise
	//	*ProxyAdvertisementType_AdvertiseOnPublicDefaultVip
	//	*ProxyAdvertisementType_AdvertiseOnPublic
	//	*ProxyAdvertisementType_AdvertiseCustom
	AdvertiseChoice isProxyAdvertisementType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
}

func (m *ProxyAdvertisementType) Reset()      { *m = ProxyAdvertisementType{} }
func (*ProxyAdvertisementType) ProtoMessage() {}
func (*ProxyAdvertisementType) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{3}
}
func (m *ProxyAdvertisementType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyAdvertisementType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyAdvertisementType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyAdvertisementType.Merge(m, src)
}
func (m *ProxyAdvertisementType) XXX_Size() int {
	return m.Size()
}
func (m *ProxyAdvertisementType) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyAdvertisementType.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyAdvertisementType proto.InternalMessageInfo

type isProxyAdvertisementType_AdvertiseChoice interface {
	isProxyAdvertisementType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyAdvertisementType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,2,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type ProxyAdvertisementType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,3,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ProxyAdvertisementType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type ProxyAdvertisementType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}

func (*ProxyAdvertisementType_DoNotAdvertise) isProxyAdvertisementType_AdvertiseChoice() {}
func (*ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) isProxyAdvertisementType_AdvertiseChoice() {
}
func (*ProxyAdvertisementType_AdvertiseOnPublic) isProxyAdvertisementType_AdvertiseChoice() {}
func (*ProxyAdvertisementType_AdvertiseCustom) isProxyAdvertisementType_AdvertiseChoice()   {}

func (m *ProxyAdvertisementType) GetAdvertiseChoice() isProxyAdvertisementType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}

func (m *ProxyAdvertisementType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ProxyAdvertisementType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ProxyAdvertisementType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ProxyAdvertisementType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ProxyAdvertisementType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ProxyAdvertisementType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ProxyAdvertisementType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ProxyAdvertisementType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyAdvertisementType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyAdvertisementType_DoNotAdvertise)(nil),
		(*ProxyAdvertisementType_AdvertiseOnPublicDefaultVip)(nil),
		(*ProxyAdvertisementType_AdvertiseOnPublic)(nil),
		(*ProxyAdvertisementType_AdvertiseCustom)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
type GlobalSpecType struct {
	// Domain name
	//
	// x-displayName: "Domain name"
	// x-example: "my.example.com"
	// ztna_application's Domain name
	DomainName string `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// Service details
	//
	// x-displayName: "Service details"
	// Denotes the service IP address and port
	Msg *ServiceDetails `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// ZTNA policies
	//
	// x-displayName: "ZTNA policies"
	// Denotes the ZTNA policies
	Policies *ZTNApolicies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	// Proxy Advertisement
	//
	// x-displayName: "Proxy Advertisement"
	// Proxy Advertisement choice
	ProxyAdvertisement *ProxyAdvertisementType `protobuf:"bytes,4,opt,name=proxy_advertisement,json=proxyAdvertisement,proto3" json:"proxy_advertisement,omitempty"`
	// Transport Type
	//
	// x-displayName: "Transport Type"
	// x-required
	// DNS Proxy supports TCP and UDP transport
	TransportType TransportType `protobuf:"varint,5,opt,name=transport_type,json=transportType,proto3,enum=ves.io.schema.ztna_application.TransportType" json:"transport_type,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,6,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *GlobalSpecType) GetMsg() *ServiceDetails {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GlobalSpecType) GetPolicies() *ZTNApolicies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *GlobalSpecType) GetProxyAdvertisement() *ProxyAdvertisementType {
	if m != nil {
		return m.ProxyAdvertisement
	}
	return nil
}

func (m *GlobalSpecType) GetTransportType() TransportType {
	if m != nil {
		return m.TransportType
	}
	return UDP
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create User"
type CreateSpecType struct {
	DomainName         string                  `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Msg                *ServiceDetails         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Policies           *ZTNApolicies           `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	ProxyAdvertisement *ProxyAdvertisementType `protobuf:"bytes,4,opt,name=proxy_advertisement,json=proxyAdvertisement,proto3" json:"proxy_advertisement,omitempty"`
	TransportType      TransportType           `protobuf:"varint,5,opt,name=transport_type,json=transportType,proto3,enum=ves.io.schema.ztna_application.TransportType" json:"transport_type,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *CreateSpecType) GetMsg() *ServiceDetails {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CreateSpecType) GetPolicies() *ZTNApolicies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *CreateSpecType) GetProxyAdvertisement() *ProxyAdvertisementType {
	if m != nil {
		return m.ProxyAdvertisement
	}
	return nil
}

func (m *CreateSpecType) GetTransportType() TransportType {
	if m != nil {
		return m.TransportType
	}
	return UDP
}

// ReplaceSpecType
//
// x-displayName: "Replace User"
type ReplaceSpecType struct {
	DomainName         string                  `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Msg                *ServiceDetails         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Policies           *ZTNApolicies           `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	ProxyAdvertisement *ProxyAdvertisementType `protobuf:"bytes,4,opt,name=proxy_advertisement,json=proxyAdvertisement,proto3" json:"proxy_advertisement,omitempty"`
	TransportType      TransportType           `protobuf:"varint,5,opt,name=transport_type,json=transportType,proto3,enum=ves.io.schema.ztna_application.TransportType" json:"transport_type,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ReplaceSpecType) GetMsg() *ServiceDetails {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicies() *ZTNApolicies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ReplaceSpecType) GetProxyAdvertisement() *ProxyAdvertisementType {
	if m != nil {
		return m.ProxyAdvertisement
	}
	return nil
}

func (m *ReplaceSpecType) GetTransportType() TransportType {
	if m != nil {
		return m.TransportType
	}
	return UDP
}

// GetSpecType
//
// x-displayName: "Get User"
type GetSpecType struct {
	DomainName         string                  `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Msg                *ServiceDetails         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Policies           *ZTNApolicies           `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
	ProxyAdvertisement *ProxyAdvertisementType `protobuf:"bytes,4,opt,name=proxy_advertisement,json=proxyAdvertisement,proto3" json:"proxy_advertisement,omitempty"`
	TransportType      TransportType           `protobuf:"varint,5,opt,name=transport_type,json=transportType,proto3,enum=ves.io.schema.ztna_application.TransportType" json:"transport_type,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_286a7fe8c8dd486e, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *GetSpecType) GetMsg() *ServiceDetails {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GetSpecType) GetPolicies() *ZTNApolicies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *GetSpecType) GetProxyAdvertisement() *ProxyAdvertisementType {
	if m != nil {
		return m.ProxyAdvertisement
	}
	return nil
}

func (m *GetSpecType) GetTransportType() TransportType {
	if m != nil {
		return m.TransportType
	}
	return UDP
}

func init() {
	proto.RegisterEnum("ves.io.schema.ztna_application.TransportType", TransportType_name, TransportType_value)
	golang_proto.RegisterEnum("ves.io.schema.ztna_application.TransportType", TransportType_name, TransportType_value)
	proto.RegisterType((*ServiceDetails)(nil), "ves.io.schema.ztna_application.ServiceDetails")
	golang_proto.RegisterType((*ServiceDetails)(nil), "ves.io.schema.ztna_application.ServiceDetails")
	proto.RegisterType((*ZTNApolicies)(nil), "ves.io.schema.ztna_application.ZTNApolicies")
	golang_proto.RegisterType((*ZTNApolicies)(nil), "ves.io.schema.ztna_application.ZTNApolicies")
	proto.RegisterType((*TileAccess)(nil), "ves.io.schema.ztna_application.TileAccess")
	golang_proto.RegisterType((*TileAccess)(nil), "ves.io.schema.ztna_application.TileAccess")
	proto.RegisterType((*ProxyAdvertisementType)(nil), "ves.io.schema.ztna_application.ProxyAdvertisementType")
	golang_proto.RegisterType((*ProxyAdvertisementType)(nil), "ves.io.schema.ztna_application.ProxyAdvertisementType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ztna_application.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ztna_application.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.ztna_application.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.ztna_application.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.ztna_application.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.ztna_application.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.ztna_application.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.ztna_application.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/ztna_application/types.proto", fileDescriptor_286a7fe8c8dd486e)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/ztna_application/types.proto", fileDescriptor_286a7fe8c8dd486e)
}

var fileDescriptor_286a7fe8c8dd486e = []byte{
	// 930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6e, 0x1b, 0x45,
	0x18, 0xdf, 0xf1, 0x26, 0x6d, 0x99, 0x24, 0xae, 0x33, 0x41, 0xc5, 0xb8, 0xd5, 0x26, 0xb2, 0x90,
	0xa8, 0x2a, 0x7b, 0x2d, 0xa5, 0x05, 0xa1, 0x1e, 0x50, 0xed, 0x04, 0x35, 0xe5, 0x90, 0x5a, 0x1b,
	0x53, 0x44, 0x85, 0xb4, 0x1a, 0xef, 0x7e, 0xd9, 0x0c, 0xec, 0xee, 0x0c, 0x3b, 0x63, 0x53, 0x23,
	0x21, 0xf5, 0x01, 0x90, 0xa8, 0x38, 0xf1, 0x08, 0x15, 0x8f, 0x40, 0x2e, 0x39, 0x22, 0x4e, 0xb9,
	0x91, 0x23, 0x71, 0x2e, 0x70, 0xeb, 0x23, 0xa0, 0x1d, 0x6f, 0x6c, 0xaf, 0x93, 0x12, 0x4e, 0xa8,
	0x87, 0xdc, 0x66, 0xf6, 0xf7, 0xe7, 0x9b, 0x9d, 0xdf, 0x37, 0xa3, 0xc1, 0x77, 0xfa, 0x20, 0x6d,
	0xc6, 0x1b, 0xd2, 0xdb, 0x83, 0x88, 0x36, 0xbe, 0x53, 0x31, 0x75, 0xa9, 0x10, 0x21, 0xf3, 0xa8,
	0x62, 0x3c, 0x6e, 0xa8, 0x81, 0x00, 0x69, 0x8b, 0x84, 0x2b, 0x4e, 0xac, 0x11, 0xd7, 0x1e, 0x71,
	0xed, 0x59, 0x6e, 0xa5, 0x1e, 0x30, 0xb5, 0xd7, 0xeb, 0xda, 0x1e, 0x8f, 0x1a, 0x01, 0x0f, 0x78,
	0x43, 0xcb, 0xba, 0xbd, 0x5d, 0x3d, 0xd3, 0x13, 0x3d, 0x1a, 0xd9, 0x55, 0x56, 0x03, 0xce, 0x83,
	0x10, 0x26, 0x2c, 0xc5, 0x22, 0x90, 0x8a, 0x46, 0x22, 0x23, 0xbc, 0x93, 0x5f, 0x5b, 0x0c, 0x2a,
	0x03, 0x6e, 0xe6, 0x01, 0x2e, 0xd2, 0xf2, 0xd9, 0x2a, 0x2b, 0xef, 0xe6, 0xc1, 0xa9, 0x1f, 0xa8,
	0xdc, 0xca, 0x43, 0x7d, 0x1a, 0x32, 0x9f, 0x2a, 0xc8, 0xd0, 0xb5, 0x19, 0x94, 0xc1, 0xb7, 0x6e,
	0xde, 0x7a, 0xf5, 0x2c, 0x43, 0x4e, 0x17, 0xa8, 0x3a, 0xb8, 0xb8, 0x03, 0x49, 0x9f, 0x79, 0xb0,
	0x09, 0x8a, 0xb2, 0x50, 0x92, 0x1a, 0x2e, 0x30, 0x51, 0x2e, 0xac, 0xa1, 0xdb, 0x0b, 0xeb, 0xb7,
	0xec, 0xfc, 0x06, 0x3e, 0x12, 0x4d, 0xdf, 0x4f, 0x40, 0xca, 0xce, 0x40, 0x80, 0x53, 0x60, 0x82,
	0x10, 0x3c, 0x27, 0x78, 0xa2, 0xca, 0x68, 0x0d, 0xdd, 0x9e, 0x77, 0xf4, 0xb8, 0xfa, 0x12, 0xe1,
	0xc5, 0xa7, 0x9d, 0xed, 0xa6, 0xe0, 0x21, 0xf3, 0x18, 0x48, 0xf2, 0x11, 0x2e, 0x7b, 0x3c, 0x8e,
	0xc1, 0x53, 0xac, 0xcf, 0xd4, 0xc0, 0xd5, 0xc0, 0xc0, 0x8d, 0x69, 0x04, 0xba, 0xd0, 0x5b, 0xce,
	0x8d, 0x69, 0xbc, 0xad, 0xe1, 0x6d, 0x1a, 0x01, 0xb1, 0xf1, 0x8a, 0x04, 0x29, 0x19, 0x8f, 0x73,
	0x22, 0xa4, 0x45, 0xcb, 0x19, 0x94, 0xe7, 0x47, 0x20, 0x25, 0x0d, 0x20, 0xc7, 0x37, 0x47, 0xfc,
	0x0c, 0x9a, 0xf0, 0xab, 0xdf, 0x60, 0xdc, 0x61, 0x21, 0x34, 0x3d, 0x0f, 0xa4, 0x24, 0xf7, 0xf0,
	0xbc, 0x54, 0x54, 0x8d, 0xfc, 0x8b, 0xeb, 0xd6, 0xcc, 0xdf, 0x4f, 0x98, 0x3b, 0x29, 0xcb, 0x19,
	0x91, 0x49, 0x1d, 0x2f, 0xfa, 0x4c, 0x8a, 0x90, 0x4e, 0xff, 0x51, 0x0b, 0xff, 0xfa, 0xf7, 0x81,
	0x39, 0x9f, 0x98, 0xe5, 0xe7, 0x05, 0x67, 0x21, 0xc3, 0x75, 0xc9, 0x9f, 0x4d, 0x7c, 0xa3, 0x9d,
	0xf0, 0x67, 0x83, 0xa6, 0xdf, 0x87, 0x44, 0x31, 0x09, 0x11, 0xc4, 0x2a, 0xdd, 0x50, 0xf2, 0x00,
	0x97, 0x7c, 0xee, 0xc6, 0x5c, 0xb9, 0xf4, 0x14, 0xcb, 0x82, 0x78, 0x7b, 0x66, 0x29, 0x9f, 0x44,
	0x42, 0x0d, 0xb6, 0x0c, 0xa7, 0xe8, 0xf3, 0x6d, 0xae, 0xc6, 0x4e, 0xe4, 0x4b, 0xbc, 0x3a, 0x96,
	0xba, 0xe9, 0xa6, 0xf5, 0xba, 0x21, 0xf3, 0x5c, 0x1f, 0x76, 0x69, 0x2f, 0x54, 0x6e, 0x9f, 0x09,
	0xbd, 0x17, 0xaf, 0x37, 0xbc, 0x39, 0x96, 0x3f, 0x8e, 0xdb, 0x5a, 0xbc, 0x39, 0xd2, 0x3e, 0x61,
	0x82, 0x3c, 0xc1, 0x2b, 0xe7, 0xb8, 0x97, 0xe7, 0xb4, 0xe3, 0x7b, 0x33, 0x8e, 0xba, 0xd7, 0xec,
	0xf1, 0xd2, 0x46, 0x66, 0x5b, 0x86, 0xb3, 0x7c, 0xa6, 0x02, 0xf9, 0x1c, 0x97, 0x26, 0xbe, 0x5e,
	0x4f, 0x2a, 0x1e, 0x95, 0xe7, 0xff, 0x8b, 0xe9, 0x86, 0xe6, 0xb6, 0xe6, 0x0e, 0xf7, 0x11, 0xda,
	0x32, 0x9c, 0xeb, 0x74, 0x06, 0x78, 0x3f, 0x67, 0xbc, 0xc7, 0x99, 0x07, 0x64, 0xe5, 0x60, 0x1f,
	0x15, 0x52, 0xc1, 0x70, 0x1f, 0x5d, 0x5d, 0xaf, 0xdd, 0xad, 0xdd, 0xab, 0x7d, 0xf0, 0xe9, 0xdc,
	0x35, 0x54, 0x2a, 0x54, 0xff, 0x30, 0x71, 0xf1, 0x61, 0xc8, 0xbb, 0x34, 0xdc, 0x11, 0xe0, 0xe9,
	0x48, 0x56, 0xf1, 0x82, 0xcf, 0x23, 0xca, 0xe2, 0xe9, 0xc6, 0xc3, 0xa3, 0x4f, 0xba, 0xe3, 0x1e,
	0x60, 0x33, 0x92, 0x41, 0x16, 0x93, 0x6d, 0xff, 0xfb, 0x85, 0x63, 0xe7, 0xcf, 0x9a, 0x93, 0x4a,
	0xc9, 0x16, 0xbe, 0x76, 0x7a, 0x52, 0xb2, 0x70, 0x6a, 0x17, 0xd9, 0x4c, 0x9f, 0x2e, 0x67, 0xac,
	0x26, 0x01, 0x5e, 0x11, 0x69, 0x67, 0x4d, 0xda, 0x27, 0x6d, 0xad, 0x2c, 0x9f, 0x0f, 0x2f, 0x32,
	0x3d, 0xbf, 0x29, 0x1d, 0x22, 0xce, 0x7c, 0x27, 0x1d, 0x5c, 0x54, 0x09, 0x8d, 0x65, 0x7a, 0xdc,
	0xdd, 0xf4, 0x3a, 0xd1, 0x71, 0x15, 0xd7, 0xeb, 0x17, 0xd5, 0xe8, 0x9c, 0xaa, 0xb4, 0xf5, 0x92,
	0x9a, 0x9e, 0x92, 0x2f, 0xf0, 0x92, 0xbe, 0xc2, 0x58, 0xac, 0x20, 0x89, 0x69, 0x58, 0xbe, 0xa2,
	0x17, 0x5e, 0x3d, 0xb7, 0x07, 0x1e, 0x77, 0xbf, 0x02, 0x4f, 0x39, 0xb0, 0x9b, 0x4a, 0x5b, 0xa5,
	0x5f, 0xbe, 0xcf, 0x6b, 0x9d, 0xc5, 0x74, 0xfa, 0x28, 0x9b, 0x55, 0x7f, 0x34, 0x71, 0x71, 0x23,
	0x01, 0xaa, 0xe0, 0x32, 0xd9, 0xff, 0x3f, 0xd9, 0xfb, 0xcb, 0xbf, 0x7f, 0x3c, 0x73, 0xb0, 0xaa,
	0x2f, 0x4c, 0x7c, 0xdd, 0x01, 0x11, 0x52, 0xef, 0x32, 0x92, 0x37, 0x24, 0x92, 0x1f, 0x4c, 0xbc,
	0xf0, 0x10, 0xd4, 0x65, 0x1c, 0x6f, 0x44, 0x1c, 0x77, 0xee, 0xe3, 0xa5, 0x9c, 0x84, 0x5c, 0xc5,
	0xe6, 0x67, 0x9b, 0xed, 0x92, 0x91, 0x0e, 0x3a, 0x1b, 0xed, 0x12, 0x22, 0xcb, 0x78, 0xa9, 0xc5,
	0xd5, 0x5e, 0x67, 0xa3, 0xdd, 0x8c, 0xfd, 0x14, 0x2b, 0x54, 0xe6, 0x0e, 0xf6, 0x91, 0xd1, 0xfa,
	0x09, 0x1d, 0x1e, 0x5b, 0xc6, 0xd1, 0xb1, 0x65, 0xbc, 0x3a, 0xb6, 0xd0, 0xf3, 0xa1, 0x85, 0x5e,
	0x0e, 0x2d, 0xf4, 0xdb, 0xd0, 0x42, 0x87, 0x43, 0x0b, 0x1d, 0x0d, 0x2d, 0xf4, 0xe7, 0xd0, 0x42,
	0x7f, 0x0d, 0x2d, 0xe3, 0xd5, 0xd0, 0x42, 0x2f, 0x4e, 0x2c, 0xe3, 0xe0, 0xc4, 0x42, 0x87, 0x27,
	0x96, 0x71, 0x74, 0x62, 0x19, 0x4f, 0x3b, 0x01, 0x17, 0x5f, 0x07, 0x76, 0x9f, 0x87, 0x0a, 0x92,
	0x84, 0xda, 0x3d, 0xd9, 0xd0, 0x83, 0x5d, 0x9e, 0x44, 0x75, 0x91, 0xf0, 0x3e, 0xf3, 0x21, 0xa9,
	0x9f, 0xc2, 0x0d, 0xd1, 0x0d, 0x78, 0x03, 0x9e, 0xa9, 0xec, 0x95, 0xf9, 0x9a, 0x97, 0x79, 0xf7,
	0x8a, 0x7e, 0x72, 0xde, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x35, 0x22, 0xd4, 0xc2, 0x0b,
	0x00, 0x00,
}

func (x TransportType) String() string {
	s, ok := TransportType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ServiceDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceDetails)
	if !ok {
		that2, ok := that.(ServiceDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ip.Equal(that1.Ip) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ZTNApolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZTNApolicies)
	if !ok {
		that2, ok := that.(ZTNApolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectivityPolicyName != that1.ConnectivityPolicyName {
		return false
	}
	if this.SessionPolicyName != that1.SessionPolicyName {
		return false
	}
	if this.MessagePolicyName != that1.MessagePolicyName {
		return false
	}
	return true
}
func (this *TileAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TileAccess)
	if !ok {
		that2, ok := that.(TileAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	return true
}
func (this *ProxyAdvertisementType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyAdvertisementType)
	if !ok {
		that2, ok := that.(ProxyAdvertisementType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	return true
}
func (this *ProxyAdvertisementType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyAdvertisementType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ProxyAdvertisementType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyAdvertisementType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ProxyAdvertisementType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ProxyAdvertisementType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyAdvertisementType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ProxyAdvertisementType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ProxyAdvertisementType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyAdvertisementType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ProxyAdvertisementType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	if !this.ProxyAdvertisement.Equal(that1.ProxyAdvertisement) {
		return false
	}
	if this.TransportType != that1.TransportType {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	if !this.ProxyAdvertisement.Equal(that1.ProxyAdvertisement) {
		return false
	}
	if this.TransportType != that1.TransportType {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	if !this.ProxyAdvertisement.Equal(that1.ProxyAdvertisement) {
		return false
	}
	if this.TransportType != that1.TransportType {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainName != that1.DomainName {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	if !this.ProxyAdvertisement.Equal(that1.ProxyAdvertisement) {
		return false
	}
	if this.TransportType != that1.TransportType {
		return false
	}
	return true
}
func (this *ServiceDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ztna_application.ServiceDetails{")
	if this.Ip != nil {
		s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZTNApolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ztna_application.ZTNApolicies{")
	s = append(s, "ConnectivityPolicyName: "+fmt.Sprintf("%#v", this.ConnectivityPolicyName)+",\n")
	s = append(s, "SessionPolicyName: "+fmt.Sprintf("%#v", this.SessionPolicyName)+",\n")
	s = append(s, "MessagePolicyName: "+fmt.Sprintf("%#v", this.MessagePolicyName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TileAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ztna_application.TileAccess{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyAdvertisementType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ztna_application.ProxyAdvertisementType{")
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyAdvertisementType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ztna_application.ProxyAdvertisementType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ztna_application.ProxyAdvertisementType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ProxyAdvertisementType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ztna_application.ProxyAdvertisementType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ProxyAdvertisementType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ztna_application.ProxyAdvertisementType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ztna_application.GlobalSpecType{")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	if this.ProxyAdvertisement != nil {
		s = append(s, "ProxyAdvertisement: "+fmt.Sprintf("%#v", this.ProxyAdvertisement)+",\n")
	}
	s = append(s, "TransportType: "+fmt.Sprintf("%#v", this.TransportType)+",\n")
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ztna_application.CreateSpecType{")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	if this.ProxyAdvertisement != nil {
		s = append(s, "ProxyAdvertisement: "+fmt.Sprintf("%#v", this.ProxyAdvertisement)+",\n")
	}
	s = append(s, "TransportType: "+fmt.Sprintf("%#v", this.TransportType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ztna_application.ReplaceSpecType{")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	if this.ProxyAdvertisement != nil {
		s = append(s, "ProxyAdvertisement: "+fmt.Sprintf("%#v", this.ProxyAdvertisement)+",\n")
	}
	s = append(s, "TransportType: "+fmt.Sprintf("%#v", this.TransportType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ztna_application.GetSpecType{")
	s = append(s, "DomainName: "+fmt.Sprintf("%#v", this.DomainName)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	if this.ProxyAdvertisement != nil {
		s = append(s, "ProxyAdvertisement: "+fmt.Sprintf("%#v", this.ProxyAdvertisement)+",\n")
	}
	s = append(s, "TransportType: "+fmt.Sprintf("%#v", this.TransportType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServiceDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ip != nil {
		{
			size, err := m.Ip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ZTNApolicies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZTNApolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZTNApolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessagePolicyName) > 0 {
		i -= len(m.MessagePolicyName)
		copy(dAtA[i:], m.MessagePolicyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MessagePolicyName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectivityPolicyName) > 0 {
		i -= len(m.ConnectivityPolicyName)
		copy(dAtA[i:], m.ConnectivityPolicyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ConnectivityPolicyName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionPolicyName) > 0 {
		i -= len(m.SessionPolicyName)
		copy(dAtA[i:], m.SessionPolicyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SessionPolicyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TileAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TileAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TileAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyAdvertisementType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyAdvertisementType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyAdvertisementType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProxyAdvertisementType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyAdvertisementType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyAdvertisementType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyAdvertisementType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProxyAdvertisementType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyAdvertisementType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TransportType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TransportType))
		i--
		dAtA[i] = 0x28
	}
	if m.ProxyAdvertisement != nil {
		{
			size, err := m.ProxyAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransportType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TransportType))
		i--
		dAtA[i] = 0x28
	}
	if m.ProxyAdvertisement != nil {
		{
			size, err := m.ProxyAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransportType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TransportType))
		i--
		dAtA[i] = 0x28
	}
	if m.ProxyAdvertisement != nil {
		{
			size, err := m.ProxyAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransportType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TransportType))
		i--
		dAtA[i] = 0x28
	}
	if m.ProxyAdvertisement != nil {
		{
			size, err := m.ProxyAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Ip != nil {
		l = m.Ip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ZTNApolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionPolicyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ConnectivityPolicyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MessagePolicyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TileAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProxyAdvertisementType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	return n
}

func (m *ProxyAdvertisementType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyAdvertisementType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyAdvertisementType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProxyAdvertisement != nil {
		l = m.ProxyAdvertisement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TransportType != 0 {
		n += 1 + sovTypes(uint64(m.TransportType))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProxyAdvertisement != nil {
		l = m.ProxyAdvertisement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TransportType != 0 {
		n += 1 + sovTypes(uint64(m.TransportType))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProxyAdvertisement != nil {
		l = m.ProxyAdvertisement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TransportType != 0 {
		n += 1 + sovTypes(uint64(m.TransportType))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProxyAdvertisement != nil {
		l = m.ProxyAdvertisement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TransportType != 0 {
		n += 1 + sovTypes(uint64(m.TransportType))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceDetails{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Ip:` + strings.Replace(fmt.Sprintf("%v", this.Ip), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZTNApolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZTNApolicies{`,
		`SessionPolicyName:` + fmt.Sprintf("%v", this.SessionPolicyName) + `,`,
		`ConnectivityPolicyName:` + fmt.Sprintf("%v", this.ConnectivityPolicyName) + `,`,
		`MessagePolicyName:` + fmt.Sprintf("%v", this.MessagePolicyName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TileAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TileAccess{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyAdvertisementType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyAdvertisementType{`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyAdvertisementType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyAdvertisementType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyAdvertisementType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyAdvertisementType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyAdvertisementType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyAdvertisementType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyAdvertisementType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyAdvertisementType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`Msg:` + strings.Replace(this.Msg.String(), "ServiceDetails", "ServiceDetails", 1) + `,`,
		`Policies:` + strings.Replace(this.Policies.String(), "ZTNApolicies", "ZTNApolicies", 1) + `,`,
		`ProxyAdvertisement:` + strings.Replace(this.ProxyAdvertisement.String(), "ProxyAdvertisementType", "ProxyAdvertisementType", 1) + `,`,
		`TransportType:` + fmt.Sprintf("%v", this.TransportType) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`Msg:` + strings.Replace(this.Msg.String(), "ServiceDetails", "ServiceDetails", 1) + `,`,
		`Policies:` + strings.Replace(this.Policies.String(), "ZTNApolicies", "ZTNApolicies", 1) + `,`,
		`ProxyAdvertisement:` + strings.Replace(this.ProxyAdvertisement.String(), "ProxyAdvertisementType", "ProxyAdvertisementType", 1) + `,`,
		`TransportType:` + fmt.Sprintf("%v", this.TransportType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`Msg:` + strings.Replace(this.Msg.String(), "ServiceDetails", "ServiceDetails", 1) + `,`,
		`Policies:` + strings.Replace(this.Policies.String(), "ZTNApolicies", "ZTNApolicies", 1) + `,`,
		`ProxyAdvertisement:` + strings.Replace(this.ProxyAdvertisement.String(), "ProxyAdvertisementType", "ProxyAdvertisementType", 1) + `,`,
		`TransportType:` + fmt.Sprintf("%v", this.TransportType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`Msg:` + strings.Replace(this.Msg.String(), "ServiceDetails", "ServiceDetails", 1) + `,`,
		`Policies:` + strings.Replace(this.Policies.String(), "ZTNApolicies", "ZTNApolicies", 1) + `,`,
		`ProxyAdvertisement:` + strings.Replace(this.ProxyAdvertisement.String(), "ProxyAdvertisementType", "ProxyAdvertisementType", 1) + `,`,
		`TransportType:` + fmt.Sprintf("%v", this.TransportType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ip == nil {
				m.Ip = &schema.IpAddressType{}
			}
			if err := m.Ip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZTNApolicies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZTNApolicies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZTNApolicies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionPolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionPolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectivityPolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectivityPolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagePolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessagePolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TileAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TileAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TileAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= schema.TileAccessState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyAdvertisementType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyAdvertisementType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyAdvertisementType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyAdvertisementType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyAdvertisementType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyAdvertisementType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ProxyAdvertisementType_AdvertiseCustom{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &ServiceDetails{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = &ZTNApolicies{}
			}
			if err := m.Policies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyAdvertisement == nil {
				m.ProxyAdvertisement = &ProxyAdvertisementType{}
			}
			if err := m.ProxyAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= TransportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &ServiceDetails{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = &ZTNApolicies{}
			}
			if err := m.Policies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyAdvertisement == nil {
				m.ProxyAdvertisement = &ProxyAdvertisementType{}
			}
			if err := m.ProxyAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= TransportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &ServiceDetails{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = &ZTNApolicies{}
			}
			if err := m.Policies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyAdvertisement == nil {
				m.ProxyAdvertisement = &ProxyAdvertisementType{}
			}
			if err := m.ProxyAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= TransportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &ServiceDetails{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = &ZTNApolicies{}
			}
			if err := m.Policies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyAdvertisement == nil {
				m.ProxyAdvertisement = &ProxyAdvertisementType{}
			}
			if err := m.ProxyAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportType", wireType)
			}
			m.TransportType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportType |= TransportType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dos_mitigation

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDestinationDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDestinationDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDestination() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDestination().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDestination().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "destination." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ExpirationExpirationTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExpirationTtl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration_ttl")
	}
	return oValidatorFn_ExpirationTtl, nil
}

func (v *ValidateCreateSpecType) DestinationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for destination")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DestinationValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CountriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for countries")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for countries")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated countries")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items countries")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AsNumbersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepUint32ItemRules(rules)
	itemValFn, err := db.NewUint32ValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for as_numbers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []uint32, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for as_numbers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]uint32)
		if !ok {
			return fmt.Errorf("Repeated validation expected []uint32, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated as_numbers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items as_numbers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TlsFingerprintsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for tls_fingerprints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_fingerprints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_fingerprints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_fingerprints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PathsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for paths")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for paths")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated paths")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items paths")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["as_numbers"]; exists {
		vOpts := append(opts, db.WithValidateField("as_numbers"))
		if err := fv(ctx, m.GetAsNumbers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["countries"]; exists {
		vOpts := append(opts, db.WithValidateField("countries"))
		if err := fv(ctx, m.GetCountries(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination"]; exists {

		vOpts := append(opts, db.WithValidateField("destination"))
		if err := fv(ctx, m.GetDestination(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *CreateSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*CreateSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ExpirationTtl:
		if fv, exists := v.FldValidators["expiration.expiration_ttl"]; exists {
			val := m.GetExpiration().(*CreateSpecType_ExpirationTtl).ExpirationTtl
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*CreateSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["paths"]; exists {
		vOpts := append(opts, db.WithValidateField("paths"))
		if err := fv(ctx, m.GetPaths(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprints"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_fingerprints"))
		if err := fv(ctx, m.GetTlsFingerprints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhExpirationExpirationTtl := v.ExpirationExpirationTtlValidationRuleHandler
	rulesExpirationExpirationTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "172800",
	}
	vFnMap["expiration.expiration_ttl"], err = vrhExpirationExpirationTtl(rulesExpirationExpirationTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.expiration_expiration_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["expiration.expiration_ttl"] = vFnMap["expiration.expiration_ttl"]

	vrhDestination := v.DestinationValidationRuleHandler
	rulesDestination := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDestination(rulesDestination)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.destination: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination"] = vFn

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1024",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhCountries := v.CountriesValidationRuleHandler
	rulesCountries := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhCountries(rulesCountries)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.countries: %s", err)
		panic(errMsg)
	}
	v.FldValidators["countries"] = vFn

	vrhAsNumbers := v.AsNumbersValidationRuleHandler
	rulesAsNumbers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAsNumbers(rulesAsNumbers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.as_numbers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["as_numbers"] = vFn

	vrhTlsFingerprints := v.TlsFingerprintsValidationRuleHandler
	rulesTlsFingerprints := map[string]string{
		"ves.io.schema.rules.repeated.items.string.len": "32",
		"ves.io.schema.rules.repeated.max_items":        "64",
		"ves.io.schema.rules.repeated.unique":           "true",
	}
	vFn, err = vrhTlsFingerprints(rulesTlsFingerprints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.tls_fingerprints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_fingerprints"] = vFn

	vrhPaths := v.PathsValidationRuleHandler
	rulesPaths := map[string]string{
		"ves.io.schema.rules.repeated.items.string.http_path": "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhPaths(rulesPaths)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.paths: %s", err)
		panic(errMsg)
	}
	v.FldValidators["paths"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Destination) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Destination) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Destination) DeepCopy() *Destination {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Destination{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Destination) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Destination) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DestinationValidator().Validate(ctx, m, opts...)
}

func (m *Destination) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetVirtualHostDRefInfo()

}

func (m *Destination) GetVirtualHostDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetVirtualHost()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("Destination.virtual_host[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "virtual_host",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetVirtualHostDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *Destination) GetVirtualHostDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetVirtualHost() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDestination struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDestination) VirtualHostValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for virtual_host")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for virtual_host")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated virtual_host")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items virtual_host")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDestination) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Destination)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Destination got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["virtual_host"]; exists {
		vOpts := append(opts, db.WithValidateField("virtual_host"))
		if err := fv(ctx, m.GetVirtualHost(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDestinationValidator = func() *ValidateDestination {
	v := &ValidateDestination{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVirtualHost := v.VirtualHostValidationRuleHandler
	rulesVirtualHost := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVirtualHost(rulesVirtualHost)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Destination.virtual_host: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_host"] = vFn

	return v
}()

func DestinationValidator() db.Validator {
	return DefaultDestinationValidator
}

// augmented methods on protoc/std generated struct

func (m *DoSMitigationRuleInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DoSMitigationRuleInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DoSMitigationRuleInfo) DeepCopy() *DoSMitigationRuleInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DoSMitigationRuleInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DoSMitigationRuleInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DoSMitigationRuleInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DoSMitigationRuleInfoValidator().Validate(ctx, m, opts...)
}

func (m *DoSMitigationRuleInfo) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetItemDRefInfo()

}

// GetDRefInfo for the field's type
func (m *DoSMitigationRuleInfo) GetItemDRefInfo() ([]db.DRefInfo, error) {
	if m.GetItem() == nil {
		return nil, nil
	}

	drInfos, err := m.GetItem().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetItem().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "item." + dri.DRField
	}
	return drInfos, err

}

type ValidateDoSMitigationRuleInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDoSMitigationRuleInfo) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDoSMitigationRuleInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DoSMitigationRuleInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DoSMitigationRuleInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["creation_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("creation_timestamp"))
		if err := fv(ctx, m.GetCreationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["item"]; exists {

		vOpts := append(opts, db.WithValidateField("item"))
		if err := fv(ctx, m.GetItem(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uid"]; exists {

		vOpts := append(opts, db.WithValidateField("uid"))
		if err := fv(ctx, m.GetUid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDoSMitigationRuleInfoValidator = func() *ValidateDoSMitigationRuleInfo {
	v := &ValidateDoSMitigationRuleInfo{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DoSMitigationRuleInfo.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	v.FldValidators["item"] = GetSpecTypeValidator().Validate

	return v
}()

func DoSMitigationRuleInfoValidator() db.Validator {
	return DefaultDoSMitigationRuleInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDestinationDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDestinationDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDestination() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDestination().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDestination().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "destination." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ExpirationExpirationTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExpirationTtl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration_ttl")
	}
	return oValidatorFn_ExpirationTtl, nil
}

func (v *ValidateGetSpecType) DestinationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for destination")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DestinationValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CountriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for countries")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for countries")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated countries")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items countries")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AsNumbersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepUint32ItemRules(rules)
	itemValFn, err := db.NewUint32ValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for as_numbers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []uint32, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for as_numbers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]uint32)
		if !ok {
			return fmt.Errorf("Repeated validation expected []uint32, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated as_numbers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items as_numbers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TlsFingerprintsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for tls_fingerprints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_fingerprints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_fingerprints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_fingerprints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) PathsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for paths")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for paths")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated paths")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items paths")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["as_numbers"]; exists {
		vOpts := append(opts, db.WithValidateField("as_numbers"))
		if err := fv(ctx, m.GetAsNumbers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["countries"]; exists {
		vOpts := append(opts, db.WithValidateField("countries"))
		if err := fv(ctx, m.GetCountries(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination"]; exists {

		vOpts := append(opts, db.WithValidateField("destination"))
		if err := fv(ctx, m.GetDestination(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *GetSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*GetSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ExpirationTtl:
		if fv, exists := v.FldValidators["expiration.expiration_ttl"]; exists {
			val := m.GetExpiration().(*GetSpecType_ExpirationTtl).ExpirationTtl
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*GetSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["paths"]; exists {
		vOpts := append(opts, db.WithValidateField("paths"))
		if err := fv(ctx, m.GetPaths(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprints"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_fingerprints"))
		if err := fv(ctx, m.GetTlsFingerprints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhExpirationExpirationTtl := v.ExpirationExpirationTtlValidationRuleHandler
	rulesExpirationExpirationTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "172800",
	}
	vFnMap["expiration.expiration_ttl"], err = vrhExpirationExpirationTtl(rulesExpirationExpirationTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.expiration_expiration_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["expiration.expiration_ttl"] = vFnMap["expiration.expiration_ttl"]

	vrhDestination := v.DestinationValidationRuleHandler
	rulesDestination := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDestination(rulesDestination)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.destination: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination"] = vFn

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1024",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhCountries := v.CountriesValidationRuleHandler
	rulesCountries := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhCountries(rulesCountries)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.countries: %s", err)
		panic(errMsg)
	}
	v.FldValidators["countries"] = vFn

	vrhAsNumbers := v.AsNumbersValidationRuleHandler
	rulesAsNumbers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAsNumbers(rulesAsNumbers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.as_numbers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["as_numbers"] = vFn

	vrhTlsFingerprints := v.TlsFingerprintsValidationRuleHandler
	rulesTlsFingerprints := map[string]string{
		"ves.io.schema.rules.repeated.items.string.len": "32",
		"ves.io.schema.rules.repeated.max_items":        "64",
		"ves.io.schema.rules.repeated.unique":           "true",
	}
	vFn, err = vrhTlsFingerprints(rulesTlsFingerprints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.tls_fingerprints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_fingerprints"] = vFn

	vrhPaths := v.PathsValidationRuleHandler
	rulesPaths := map[string]string{
		"ves.io.schema.rules.repeated.items.string.http_path": "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhPaths(rulesPaths)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.paths: %s", err)
		panic(errMsg)
	}
	v.FldValidators["paths"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDestinationDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDestinationDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDestination() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDestination().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDestination().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "destination." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ExpirationExpirationTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExpirationTtl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration_ttl")
	}
	return oValidatorFn_ExpirationTtl, nil
}

func (v *ValidateGlobalSpecType) DestinationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for destination")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DestinationValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CountriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for countries")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for countries")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated countries")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items countries")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AsNumbersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepUint32ItemRules(rules)
	itemValFn, err := db.NewUint32ValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for as_numbers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []uint32, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for as_numbers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]uint32)
		if !ok {
			return fmt.Errorf("Repeated validation expected []uint32, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated as_numbers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items as_numbers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TlsFingerprintsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for tls_fingerprints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_fingerprints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_fingerprints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_fingerprints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PathsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for paths")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for paths")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated paths")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items paths")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["as_numbers"]; exists {
		vOpts := append(opts, db.WithValidateField("as_numbers"))
		if err := fv(ctx, m.GetAsNumbers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["countries"]; exists {
		vOpts := append(opts, db.WithValidateField("countries"))
		if err := fv(ctx, m.GetCountries(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination"]; exists {

		vOpts := append(opts, db.WithValidateField("destination"))
		if err := fv(ctx, m.GetDestination(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *GlobalSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ExpirationTtl:
		if fv, exists := v.FldValidators["expiration.expiration_ttl"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_ExpirationTtl).ExpirationTtl
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["paths"]; exists {
		vOpts := append(opts, db.WithValidateField("paths"))
		if err := fv(ctx, m.GetPaths(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprints"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_fingerprints"))
		if err := fv(ctx, m.GetTlsFingerprints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhExpirationExpirationTtl := v.ExpirationExpirationTtlValidationRuleHandler
	rulesExpirationExpirationTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "172800",
	}
	vFnMap["expiration.expiration_ttl"], err = vrhExpirationExpirationTtl(rulesExpirationExpirationTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.expiration_expiration_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["expiration.expiration_ttl"] = vFnMap["expiration.expiration_ttl"]

	vrhDestination := v.DestinationValidationRuleHandler
	rulesDestination := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDestination(rulesDestination)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.destination: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination"] = vFn

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1024",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhCountries := v.CountriesValidationRuleHandler
	rulesCountries := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhCountries(rulesCountries)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.countries: %s", err)
		panic(errMsg)
	}
	v.FldValidators["countries"] = vFn

	vrhAsNumbers := v.AsNumbersValidationRuleHandler
	rulesAsNumbers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAsNumbers(rulesAsNumbers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.as_numbers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["as_numbers"] = vFn

	vrhTlsFingerprints := v.TlsFingerprintsValidationRuleHandler
	rulesTlsFingerprints := map[string]string{
		"ves.io.schema.rules.repeated.items.string.len": "32",
		"ves.io.schema.rules.repeated.max_items":        "64",
		"ves.io.schema.rules.repeated.unique":           "true",
	}
	vFn, err = vrhTlsFingerprints(rulesTlsFingerprints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tls_fingerprints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_fingerprints"] = vFn

	vrhPaths := v.PathsValidationRuleHandler
	rulesPaths := map[string]string{
		"ves.io.schema.rules.repeated.items.string.http_path": "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhPaths(rulesPaths)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.paths: %s", err)
		panic(errMsg)
	}
	v.FldValidators["paths"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDestinationDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDestinationDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDestination() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDestination().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDestination().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "destination." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ExpirationExpirationTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExpirationTtl, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration_ttl")
	}
	return oValidatorFn_ExpirationTtl, nil
}

func (v *ValidateReplaceSpecType) DestinationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for destination")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DestinationValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CountriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for countries")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for countries")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated countries")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items countries")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AsNumbersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepUint32ItemRules(rules)
	itemValFn, err := db.NewUint32ValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for as_numbers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []uint32, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for as_numbers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]uint32)
		if !ok {
			return fmt.Errorf("Repeated validation expected []uint32, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated as_numbers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items as_numbers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TlsFingerprintsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for tls_fingerprints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_fingerprints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_fingerprints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_fingerprints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PathsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for paths")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for paths")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated paths")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items paths")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["as_numbers"]; exists {
		vOpts := append(opts, db.WithValidateField("as_numbers"))
		if err := fv(ctx, m.GetAsNumbers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["countries"]; exists {
		vOpts := append(opts, db.WithValidateField("countries"))
		if err := fv(ctx, m.GetCountries(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination"]; exists {

		vOpts := append(opts, db.WithValidateField("destination"))
		if err := fv(ctx, m.GetDestination(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *ReplaceSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ExpirationTtl:
		if fv, exists := v.FldValidators["expiration.expiration_ttl"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_ExpirationTtl).ExpirationTtl
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["paths"]; exists {
		vOpts := append(opts, db.WithValidateField("paths"))
		if err := fv(ctx, m.GetPaths(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprints"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_fingerprints"))
		if err := fv(ctx, m.GetTlsFingerprints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhExpirationExpirationTtl := v.ExpirationExpirationTtlValidationRuleHandler
	rulesExpirationExpirationTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "172800",
	}
	vFnMap["expiration.expiration_ttl"], err = vrhExpirationExpirationTtl(rulesExpirationExpirationTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.expiration_expiration_ttl: %s", err)
		panic(errMsg)
	}

	v.FldValidators["expiration.expiration_ttl"] = vFnMap["expiration.expiration_ttl"]

	vrhDestination := v.DestinationValidationRuleHandler
	rulesDestination := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDestination(rulesDestination)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.destination: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination"] = vFn

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1024",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhCountries := v.CountriesValidationRuleHandler
	rulesCountries := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhCountries(rulesCountries)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.countries: %s", err)
		panic(errMsg)
	}
	v.FldValidators["countries"] = vFn

	vrhAsNumbers := v.AsNumbersValidationRuleHandler
	rulesAsNumbers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAsNumbers(rulesAsNumbers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.as_numbers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["as_numbers"] = vFn

	vrhTlsFingerprints := v.TlsFingerprintsValidationRuleHandler
	rulesTlsFingerprints := map[string]string{
		"ves.io.schema.rules.repeated.items.string.len": "32",
		"ves.io.schema.rules.repeated.max_items":        "64",
		"ves.io.schema.rules.repeated.unique":           "true",
	}
	vFn, err = vrhTlsFingerprints(rulesTlsFingerprints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.tls_fingerprints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_fingerprints"] = vFn

	vrhPaths := v.PathsValidationRuleHandler
	rulesPaths := map[string]string{
		"ves.io.schema.rules.repeated.items.string.http_path": "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhPaths(rulesPaths)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.paths: %s", err)
		panic(errMsg)
	}
	v.FldValidators["paths"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetExpirationToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Expiration.(type) {
	case nil:
		o.Expiration = nil

	case *CreateSpecType_ExpirationNever:
		o.Expiration = &GlobalSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *CreateSpecType_ExpirationTimestamp:
		o.Expiration = &GlobalSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *CreateSpecType_ExpirationTtl:
		o.Expiration = &GlobalSpecType_ExpirationTtl{ExpirationTtl: of.ExpirationTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetExpirationFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Expiration.(type) {
	case nil:
		r.Expiration = nil

	case *GlobalSpecType_ExpirationNever:
		r.Expiration = &CreateSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GlobalSpecType_ExpirationTimestamp:
		r.Expiration = &CreateSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *GlobalSpecType_ExpirationTtl:
		r.Expiration = &CreateSpecType_ExpirationTtl{ExpirationTtl: of.ExpirationTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AsNumbers = f.GetAsNumbers()
	m.Countries = f.GetCountries()
	m.Destination = f.GetDestination()
	m.GetExpirationFromGlobalSpecType(f)
	m.IpPrefixes = f.GetIpPrefixes()
	m.Paths = f.GetPaths()
	m.TlsFingerprints = f.GetTlsFingerprints()
	m.Type = f.GetType()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AsNumbers = m1.AsNumbers
	f.Countries = m1.Countries
	f.Destination = m1.Destination
	m1.SetExpirationToGlobalSpecType(f)
	f.IpPrefixes = m1.IpPrefixes
	f.Paths = m1.Paths
	f.TlsFingerprints = m1.TlsFingerprints
	f.Type = m1.Type
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetExpirationToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Expiration.(type) {
	case nil:
		o.Expiration = nil

	case *GetSpecType_ExpirationNever:
		o.Expiration = &GlobalSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GetSpecType_ExpirationTimestamp:
		o.Expiration = &GlobalSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *GetSpecType_ExpirationTtl:
		o.Expiration = &GlobalSpecType_ExpirationTtl{ExpirationTtl: of.ExpirationTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetExpirationFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Expiration.(type) {
	case nil:
		r.Expiration = nil

	case *GlobalSpecType_ExpirationNever:
		r.Expiration = &GetSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GlobalSpecType_ExpirationTimestamp:
		r.Expiration = &GetSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *GlobalSpecType_ExpirationTtl:
		r.Expiration = &GetSpecType_ExpirationTtl{ExpirationTtl: of.ExpirationTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AsNumbers = f.GetAsNumbers()
	m.Countries = f.GetCountries()
	m.Destination = f.GetDestination()
	m.GetExpirationFromGlobalSpecType(f)
	m.IpPrefixes = f.GetIpPrefixes()
	m.Paths = f.GetPaths()
	m.TlsFingerprints = f.GetTlsFingerprints()
	m.Type = f.GetType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AsNumbers = m1.AsNumbers
	f.Countries = m1.Countries
	f.Destination = m1.Destination
	m1.SetExpirationToGlobalSpecType(f)
	f.IpPrefixes = m1.IpPrefixes
	f.Paths = m1.Paths
	f.TlsFingerprints = m1.TlsFingerprints
	f.Type = m1.Type
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetExpirationToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Expiration.(type) {
	case nil:
		o.Expiration = nil

	case *ReplaceSpecType_ExpirationNever:
		o.Expiration = &GlobalSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *ReplaceSpecType_ExpirationTimestamp:
		o.Expiration = &GlobalSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *ReplaceSpecType_ExpirationTtl:
		o.Expiration = &GlobalSpecType_ExpirationTtl{ExpirationTtl: of.ExpirationTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetExpirationFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Expiration.(type) {
	case nil:
		r.Expiration = nil

	case *GlobalSpecType_ExpirationNever:
		r.Expiration = &ReplaceSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GlobalSpecType_ExpirationTimestamp:
		r.Expiration = &ReplaceSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *GlobalSpecType_ExpirationTtl:
		r.Expiration = &ReplaceSpecType_ExpirationTtl{ExpirationTtl: of.ExpirationTtl}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AsNumbers = f.GetAsNumbers()
	m.Countries = f.GetCountries()
	m.Destination = f.GetDestination()
	m.GetExpirationFromGlobalSpecType(f)
	m.IpPrefixes = f.GetIpPrefixes()
	m.Paths = f.GetPaths()
	m.TlsFingerprints = f.GetTlsFingerprints()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AsNumbers = m1.AsNumbers
	f.Countries = m1.Countries
	f.Destination = m1.Destination
	m1.SetExpirationToGlobalSpecType(f)
	f.IpPrefixes = m1.IpPrefixes
	f.Paths = m1.Paths
	f.TlsFingerprints = m1.TlsFingerprints
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

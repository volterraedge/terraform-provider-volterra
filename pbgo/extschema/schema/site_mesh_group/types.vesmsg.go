// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package site_mesh_group

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHubDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHubDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMeshChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMeshChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetVirtualSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetVirtualSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetHubDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetHub()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.hub[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site_mesh_group.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "hub",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetHubDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetHubDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site_mesh_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site_mesh_group")
	}
	for _, ref := range m.GetHub() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetMeshChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMeshChoice() == nil {
		return nil, nil
	}
	switch m.GetMeshChoice().(type) {
	case *CreateSpecType_HubMesh:

		return nil, nil

	case *CreateSpecType_SpokeMesh:

		drInfos, err := m.GetSpokeMesh().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSpokeMesh().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "spoke_mesh." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_FullMesh:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetVirtualSiteDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetVirtualSite()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.virtual_site[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "virtual_site",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetVirtualSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetVirtualSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_site")
	}
	for _, ref := range m.GetVirtualSite() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(SiteMeshGroupType)
		return int32(i)
	}
	// SiteMeshGroupType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, SiteMeshGroupType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VirtualSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for virtual_site")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for virtual_site")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated virtual_site")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items virtual_site")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HubValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for hub")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hub")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hub")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hub")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hub"]; exists {
		vOpts := append(opts, db.WithValidateField("hub"))
		if err := fv(ctx, m.GetHub(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMeshChoice().(type) {
	case *CreateSpecType_HubMesh:
		if fv, exists := v.FldValidators["mesh_choice.hub_mesh"]; exists {
			val := m.GetMeshChoice().(*CreateSpecType_HubMesh).HubMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("hub_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SpokeMesh:
		if fv, exists := v.FldValidators["mesh_choice.spoke_mesh"]; exists {
			val := m.GetMeshChoice().(*CreateSpecType_SpokeMesh).SpokeMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("spoke_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_FullMesh:
		if fv, exists := v.FldValidators["mesh_choice.full_mesh"]; exists {
			val := m.GetMeshChoice().(*CreateSpecType_FullMesh).FullMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("full_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_site"]; exists {
		vOpts := append(opts, db.WithValidateField("virtual_site"))
		if err := fv(ctx, m.GetVirtualSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhVirtualSite := v.VirtualSiteValidationRuleHandler
	rulesVirtualSite := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhVirtualSite(rulesVirtualSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.virtual_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_site"] = vFn

	vrhHub := v.HubValidationRuleHandler
	rulesHub := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhHub(rulesHub)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.hub: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub"] = vFn

	v.FldValidators["mesh_choice.spoke_mesh"] = SpokeMeshGroupTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *FullMeshGroupType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FullMeshGroupType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FullMeshGroupType) DeepCopy() *FullMeshGroupType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FullMeshGroupType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FullMeshGroupType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FullMeshGroupType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FullMeshGroupTypeValidator().Validate(ctx, m, opts...)
}

type ValidateFullMeshGroupType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFullMeshGroupType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FullMeshGroupType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FullMeshGroupType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetFullMeshChoice().(type) {
	case *FullMeshGroupType_DataPlaneMesh:
		if fv, exists := v.FldValidators["full_mesh_choice.data_plane_mesh"]; exists {
			val := m.GetFullMeshChoice().(*FullMeshGroupType_DataPlaneMesh).DataPlaneMesh
			vOpts := append(opts,
				db.WithValidateField("full_mesh_choice"),
				db.WithValidateField("data_plane_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FullMeshGroupType_ControlAndDataPlaneMesh:
		if fv, exists := v.FldValidators["full_mesh_choice.control_and_data_plane_mesh"]; exists {
			val := m.GetFullMeshChoice().(*FullMeshGroupType_ControlAndDataPlaneMesh).ControlAndDataPlaneMesh
			vOpts := append(opts,
				db.WithValidateField("full_mesh_choice"),
				db.WithValidateField("control_and_data_plane_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFullMeshGroupTypeValidator = func() *ValidateFullMeshGroupType {
	v := &ValidateFullMeshGroupType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func FullMeshGroupTypeValidator() db.Validator {
	return DefaultFullMeshGroupTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHubDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHubDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMeshChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMeshChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetVirtualSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetVirtualSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetHubDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetHub()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.hub[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site_mesh_group.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "hub",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetHubDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetHubDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site_mesh_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site_mesh_group")
	}
	for _, ref := range m.GetHub() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetMeshChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMeshChoice() == nil {
		return nil, nil
	}
	switch m.GetMeshChoice().(type) {
	case *GetSpecType_HubMesh:

		return nil, nil

	case *GetSpecType_SpokeMesh:

		drInfos, err := m.GetSpokeMesh().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSpokeMesh().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "spoke_mesh." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_FullMesh:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetVirtualSiteDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetVirtualSite()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.virtual_site[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "virtual_site",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetVirtualSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetVirtualSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_site")
	}
	for _, ref := range m.GetVirtualSite() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(SiteMeshGroupType)
		return int32(i)
	}
	// SiteMeshGroupType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, SiteMeshGroupType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VirtualSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for virtual_site")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for virtual_site")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated virtual_site")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items virtual_site")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) HubValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for hub")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hub")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hub")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hub")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hub"]; exists {
		vOpts := append(opts, db.WithValidateField("hub"))
		if err := fv(ctx, m.GetHub(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMeshChoice().(type) {
	case *GetSpecType_HubMesh:
		if fv, exists := v.FldValidators["mesh_choice.hub_mesh"]; exists {
			val := m.GetMeshChoice().(*GetSpecType_HubMesh).HubMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("hub_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SpokeMesh:
		if fv, exists := v.FldValidators["mesh_choice.spoke_mesh"]; exists {
			val := m.GetMeshChoice().(*GetSpecType_SpokeMesh).SpokeMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("spoke_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_FullMesh:
		if fv, exists := v.FldValidators["mesh_choice.full_mesh"]; exists {
			val := m.GetMeshChoice().(*GetSpecType_FullMesh).FullMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("full_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_type"))
		if err := fv(ctx, m.GetTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_site"]; exists {
		vOpts := append(opts, db.WithValidateField("virtual_site"))
		if err := fv(ctx, m.GetVirtualSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhVirtualSite := v.VirtualSiteValidationRuleHandler
	rulesVirtualSite := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhVirtualSite(rulesVirtualSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.virtual_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_site"] = vFn

	vrhHub := v.HubValidationRuleHandler
	rulesHub := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhHub(rulesHub)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.hub: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub"] = vFn

	v.FldValidators["mesh_choice.spoke_mesh"] = SpokeMeshGroupTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHubDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHubDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMeshChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMeshChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetVirtualSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetVirtualSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetHubDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetHub()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.hub[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site_mesh_group.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "hub",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetHubDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetHubDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site_mesh_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site_mesh_group")
	}
	for _, ref := range m.GetHub() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetMeshChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMeshChoice() == nil {
		return nil, nil
	}
	switch m.GetMeshChoice().(type) {
	case *GlobalSpecType_HubMesh:

		return nil, nil

	case *GlobalSpecType_SpokeMesh:

		drInfos, err := m.GetSpokeMesh().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSpokeMesh().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "spoke_mesh." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_FullMesh:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetVirtualSiteDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetVirtualSite()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.virtual_site[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "virtual_site",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetVirtualSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetVirtualSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_site")
	}
	for _, ref := range m.GetVirtualSite() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(SiteMeshGroupType)
		return int32(i)
	}
	// SiteMeshGroupType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, SiteMeshGroupType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VirtualSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for virtual_site")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for virtual_site")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated virtual_site")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items virtual_site")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HubValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for hub")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hub")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hub")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hub")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hub"]; exists {
		vOpts := append(opts, db.WithValidateField("hub"))
		if err := fv(ctx, m.GetHub(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMeshChoice().(type) {
	case *GlobalSpecType_HubMesh:
		if fv, exists := v.FldValidators["mesh_choice.hub_mesh"]; exists {
			val := m.GetMeshChoice().(*GlobalSpecType_HubMesh).HubMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("hub_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SpokeMesh:
		if fv, exists := v.FldValidators["mesh_choice.spoke_mesh"]; exists {
			val := m.GetMeshChoice().(*GlobalSpecType_SpokeMesh).SpokeMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("spoke_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_FullMesh:
		if fv, exists := v.FldValidators["mesh_choice.full_mesh"]; exists {
			val := m.GetMeshChoice().(*GlobalSpecType_FullMesh).FullMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("full_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_type"))
		if err := fv(ctx, m.GetTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_site"]; exists {
		vOpts := append(opts, db.WithValidateField("virtual_site"))
		if err := fv(ctx, m.GetVirtualSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhVirtualSite := v.VirtualSiteValidationRuleHandler
	rulesVirtualSite := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhVirtualSite(rulesVirtualSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.virtual_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_site"] = vFn

	vrhHub := v.HubValidationRuleHandler
	rulesHub := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhHub(rulesHub)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.hub: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub"] = vFn

	v.FldValidators["mesh_choice.spoke_mesh"] = SpokeMeshGroupTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HubFullMeshGroupType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HubFullMeshGroupType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HubFullMeshGroupType) DeepCopy() *HubFullMeshGroupType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HubFullMeshGroupType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HubFullMeshGroupType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HubFullMeshGroupType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HubFullMeshGroupTypeValidator().Validate(ctx, m, opts...)
}

type ValidateHubFullMeshGroupType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHubFullMeshGroupType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HubFullMeshGroupType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HubFullMeshGroupType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetHubFullMeshChoice().(type) {
	case *HubFullMeshGroupType_DataPlaneMesh:
		if fv, exists := v.FldValidators["hub_full_mesh_choice.data_plane_mesh"]; exists {
			val := m.GetHubFullMeshChoice().(*HubFullMeshGroupType_DataPlaneMesh).DataPlaneMesh
			vOpts := append(opts,
				db.WithValidateField("hub_full_mesh_choice"),
				db.WithValidateField("data_plane_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HubFullMeshGroupType_ControlAndDataPlaneMesh:
		if fv, exists := v.FldValidators["hub_full_mesh_choice.control_and_data_plane_mesh"]; exists {
			val := m.GetHubFullMeshChoice().(*HubFullMeshGroupType_ControlAndDataPlaneMesh).ControlAndDataPlaneMesh
			vOpts := append(opts,
				db.WithValidateField("hub_full_mesh_choice"),
				db.WithValidateField("control_and_data_plane_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHubFullMeshGroupTypeValidator = func() *ValidateHubFullMeshGroupType {
	v := &ValidateHubFullMeshGroupType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func HubFullMeshGroupTypeValidator() db.Validator {
	return DefaultHubFullMeshGroupTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHubDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHubDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMeshChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMeshChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetVirtualSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetVirtualSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetHubDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetHub()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.hub[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site_mesh_group.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "hub",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetHubDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetHubDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site_mesh_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site_mesh_group")
	}
	for _, ref := range m.GetHub() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetMeshChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMeshChoice() == nil {
		return nil, nil
	}
	switch m.GetMeshChoice().(type) {
	case *ReplaceSpecType_HubMesh:

		return nil, nil

	case *ReplaceSpecType_SpokeMesh:

		drInfos, err := m.GetSpokeMesh().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSpokeMesh().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "spoke_mesh." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_FullMesh:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetVirtualSiteDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetVirtualSite()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.virtual_site[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "virtual_site",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetVirtualSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetVirtualSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_site")
	}
	for _, ref := range m.GetVirtualSite() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(SiteMeshGroupType)
		return int32(i)
	}
	// SiteMeshGroupType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, SiteMeshGroupType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) VirtualSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for virtual_site")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for virtual_site")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated virtual_site")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items virtual_site")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HubValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for hub")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hub")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hub")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hub")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hub"]; exists {
		vOpts := append(opts, db.WithValidateField("hub"))
		if err := fv(ctx, m.GetHub(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMeshChoice().(type) {
	case *ReplaceSpecType_HubMesh:
		if fv, exists := v.FldValidators["mesh_choice.hub_mesh"]; exists {
			val := m.GetMeshChoice().(*ReplaceSpecType_HubMesh).HubMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("hub_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SpokeMesh:
		if fv, exists := v.FldValidators["mesh_choice.spoke_mesh"]; exists {
			val := m.GetMeshChoice().(*ReplaceSpecType_SpokeMesh).SpokeMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("spoke_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_FullMesh:
		if fv, exists := v.FldValidators["mesh_choice.full_mesh"]; exists {
			val := m.GetMeshChoice().(*ReplaceSpecType_FullMesh).FullMesh
			vOpts := append(opts,
				db.WithValidateField("mesh_choice"),
				db.WithValidateField("full_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_site"]; exists {
		vOpts := append(opts, db.WithValidateField("virtual_site"))
		if err := fv(ctx, m.GetVirtualSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhVirtualSite := v.VirtualSiteValidationRuleHandler
	rulesVirtualSite := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhVirtualSite(rulesVirtualSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.virtual_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_site"] = vFn

	vrhHub := v.HubValidationRuleHandler
	rulesHub := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhHub(rulesHub)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.hub: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub"] = vFn

	v.FldValidators["mesh_choice.spoke_mesh"] = SpokeMeshGroupTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SpokeMeshGroupType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SpokeMeshGroupType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SpokeMeshGroupType) DeepCopy() *SpokeMeshGroupType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SpokeMeshGroupType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SpokeMeshGroupType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SpokeMeshGroupType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SpokeMeshGroupTypeValidator().Validate(ctx, m, opts...)
}

func (m *SpokeMeshGroupType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHubMeshGroupDRefInfo()

}

func (m *SpokeMeshGroupType) GetHubMeshGroupDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetHubMeshGroup()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site_mesh_group.Object")
	dri := db.DRefInfo{
		RefdType:   "site_mesh_group.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "hub_mesh_group",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetHubMeshGroupDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SpokeMeshGroupType) GetHubMeshGroupDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site_mesh_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site_mesh_group")
	}

	vref := m.GetHubMeshGroup()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site_mesh_group.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateSpokeMeshGroupType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSpokeMeshGroupType) HubMeshGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for hub_mesh_group")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSpokeMeshGroupType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SpokeMeshGroupType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SpokeMeshGroupType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hub_mesh_group"]; exists {

		vOpts := append(opts, db.WithValidateField("hub_mesh_group"))
		if err := fv(ctx, m.GetHubMeshGroup(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSpokeHubMeshChoice().(type) {
	case *SpokeMeshGroupType_DataPlaneMesh:
		if fv, exists := v.FldValidators["spoke_hub_mesh_choice.data_plane_mesh"]; exists {
			val := m.GetSpokeHubMeshChoice().(*SpokeMeshGroupType_DataPlaneMesh).DataPlaneMesh
			vOpts := append(opts,
				db.WithValidateField("spoke_hub_mesh_choice"),
				db.WithValidateField("data_plane_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SpokeMeshGroupType_ControlAndDataPlaneMesh:
		if fv, exists := v.FldValidators["spoke_hub_mesh_choice.control_and_data_plane_mesh"]; exists {
			val := m.GetSpokeHubMeshChoice().(*SpokeMeshGroupType_ControlAndDataPlaneMesh).ControlAndDataPlaneMesh
			vOpts := append(opts,
				db.WithValidateField("spoke_hub_mesh_choice"),
				db.WithValidateField("control_and_data_plane_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSpokeMeshGroupTypeValidator = func() *ValidateSpokeMeshGroupType {
	v := &ValidateSpokeMeshGroupType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHubMeshGroup := v.HubMeshGroupValidationRuleHandler
	rulesHubMeshGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHubMeshGroup(rulesHubMeshGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SpokeMeshGroupType.hub_mesh_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hub_mesh_group"] = vFn

	return v
}()

func SpokeMeshGroupTypeValidator() db.Validator {
	return DefaultSpokeMeshGroupTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetMeshChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MeshChoice.(type) {
	case nil:
		o.MeshChoice = nil

	case *CreateSpecType_FullMesh:
		o.MeshChoice = &GlobalSpecType_FullMesh{FullMesh: of.FullMesh}

	case *CreateSpecType_HubMesh:
		o.MeshChoice = &GlobalSpecType_HubMesh{HubMesh: of.HubMesh}

	case *CreateSpecType_SpokeMesh:
		o.MeshChoice = &GlobalSpecType_SpokeMesh{SpokeMesh: of.SpokeMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetMeshChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MeshChoice.(type) {
	case nil:
		r.MeshChoice = nil

	case *GlobalSpecType_FullMesh:
		r.MeshChoice = &CreateSpecType_FullMesh{FullMesh: of.FullMesh}

	case *GlobalSpecType_HubMesh:
		r.MeshChoice = &CreateSpecType_HubMesh{HubMesh: of.HubMesh}

	case *GlobalSpecType_SpokeMesh:
		r.MeshChoice = &CreateSpecType_SpokeMesh{SpokeMesh: of.SpokeMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Hub = f.GetHub()
	m.GetMeshChoiceFromGlobalSpecType(f)
	m.Type = f.GetType()
	m.VirtualSite = f.GetVirtualSite()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Hub = m1.Hub
	m1.SetMeshChoiceToGlobalSpecType(f)
	f.Type = m1.Type
	f.VirtualSite = m1.VirtualSite
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetMeshChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MeshChoice.(type) {
	case nil:
		o.MeshChoice = nil

	case *GetSpecType_FullMesh:
		o.MeshChoice = &GlobalSpecType_FullMesh{FullMesh: of.FullMesh}

	case *GetSpecType_HubMesh:
		o.MeshChoice = &GlobalSpecType_HubMesh{HubMesh: of.HubMesh}

	case *GetSpecType_SpokeMesh:
		o.MeshChoice = &GlobalSpecType_SpokeMesh{SpokeMesh: of.SpokeMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetMeshChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MeshChoice.(type) {
	case nil:
		r.MeshChoice = nil

	case *GlobalSpecType_FullMesh:
		r.MeshChoice = &GetSpecType_FullMesh{FullMesh: of.FullMesh}

	case *GlobalSpecType_HubMesh:
		r.MeshChoice = &GetSpecType_HubMesh{HubMesh: of.HubMesh}

	case *GlobalSpecType_SpokeMesh:
		r.MeshChoice = &GetSpecType_SpokeMesh{SpokeMesh: of.SpokeMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Hub = f.GetHub()
	m.GetMeshChoiceFromGlobalSpecType(f)
	m.TunnelType = f.GetTunnelType()
	m.Type = f.GetType()
	m.VirtualSite = f.GetVirtualSite()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Hub = m1.Hub
	m1.SetMeshChoiceToGlobalSpecType(f)
	f.TunnelType = m1.TunnelType
	f.Type = m1.Type
	f.VirtualSite = m1.VirtualSite
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetMeshChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MeshChoice.(type) {
	case nil:
		o.MeshChoice = nil

	case *ReplaceSpecType_FullMesh:
		o.MeshChoice = &GlobalSpecType_FullMesh{FullMesh: of.FullMesh}

	case *ReplaceSpecType_HubMesh:
		o.MeshChoice = &GlobalSpecType_HubMesh{HubMesh: of.HubMesh}

	case *ReplaceSpecType_SpokeMesh:
		o.MeshChoice = &GlobalSpecType_SpokeMesh{SpokeMesh: of.SpokeMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetMeshChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MeshChoice.(type) {
	case nil:
		r.MeshChoice = nil

	case *GlobalSpecType_FullMesh:
		r.MeshChoice = &ReplaceSpecType_FullMesh{FullMesh: of.FullMesh}

	case *GlobalSpecType_HubMesh:
		r.MeshChoice = &ReplaceSpecType_HubMesh{HubMesh: of.HubMesh}

	case *GlobalSpecType_SpokeMesh:
		r.MeshChoice = &ReplaceSpecType_SpokeMesh{SpokeMesh: of.SpokeMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Hub = f.GetHub()
	m.GetMeshChoiceFromGlobalSpecType(f)
	m.Type = f.GetType()
	m.VirtualSite = f.GetVirtualSite()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Hub = m1.Hub
	m1.SetMeshChoiceToGlobalSpecType(f)
	f.Type = m1.Type
	f.VirtualSite = m1.VirtualSite
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

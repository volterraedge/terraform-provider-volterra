// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package token

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetCloudInitConfigReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetCloudInitConfigReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetCloudInitConfigReq) DeepCopy() *GetCloudInitConfigReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetCloudInitConfigReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetCloudInitConfigReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetCloudInitConfigReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetCloudInitConfigReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetCloudInitConfigReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetCloudInitConfigReq) ProviderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for provider")
	}

	return validatorFn, nil
}

func (v *ValidateGetCloudInitConfigReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetCloudInitConfigReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetCloudInitConfigReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_name"]; exists {

		vOpts := append(opts, db.WithValidateField("site_name"))
		if err := fv(ctx, m.GetSiteName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetCloudInitConfigReqValidator = func() *ValidateGetCloudInitConfigReq {
	v := &ValidateGetCloudInitConfigReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProvider := v.ProviderValidationRuleHandler
	rulesProvider := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhProvider(rulesProvider)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetCloudInitConfigReq.provider: %s", err)
		panic(errMsg)
	}
	v.FldValidators["provider"] = vFn

	return v
}()

func GetCloudInitConfigReqValidator() db.Validator {
	return DefaultGetCloudInitConfigReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetCloudInitConfigResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetCloudInitConfigResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetCloudInitConfigResp) DeepCopy() *GetCloudInitConfigResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetCloudInitConfigResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetCloudInitConfigResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetCloudInitConfigResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetCloudInitConfigRespValidator().Validate(ctx, m, opts...)
}

type ValidateGetCloudInitConfigResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetCloudInitConfigResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetCloudInitConfigResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetCloudInitConfigResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_init_config"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_init_config"))
		if err := fv(ctx, m.GetCloudInitConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetCloudInitConfigRespValidator = func() *ValidateGetCloudInitConfigResp {
	v := &ValidateGetCloudInitConfigResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetCloudInitConfigRespValidator() db.Validator {
	return DefaultGetCloudInitConfigRespValidator
}

// augmented methods on protoc/std generated struct

func (m *ObjectChangeResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ObjectChangeResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ObjectChangeResp) DeepCopy() *ObjectChangeResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ObjectChangeResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ObjectChangeResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ObjectChangeResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ObjectChangeRespValidator().Validate(ctx, m, opts...)
}

func (m *ObjectChangeResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return nil, nil

}

type ValidateObjectChangeResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateObjectChangeResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ObjectChangeResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ObjectChangeResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["obj"]; exists {

		vOpts := append(opts, db.WithValidateField("obj"))
		if err := fv(ctx, m.GetObj(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultObjectChangeRespValidator = func() *ValidateObjectChangeResp {
	v := &ValidateObjectChangeResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["obj"] = ObjectValidator().Validate

	return v
}()

func ObjectChangeRespValidator() db.Validator {
	return DefaultObjectChangeRespValidator
}

// augmented methods on protoc/std generated struct

func (m *StateReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StateReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StateReq) DeepCopy() *StateReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StateReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StateReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StateReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StateReqValidator().Validate(ctx, m, opts...)
}

type ValidateStateReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStateReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StateReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StateReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStateReqValidator = func() *ValidateStateReq {
	v := &ValidateStateReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func StateReqValidator() db.Validator {
	return DefaultStateReqValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/flow_exporter/types.proto

package flow_exporter

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Collector Type
//
// x-displayName: "Collector Type"
// Type of the collector. As of now, only IPFIX collectors
// are supported
type CollectorType int32

const (
	// IPFIX Collector Type
	//
	// x-displayName: "IPFIX Collector"
	// Collector supports IPFIX protocol
	COLLECTOR_TYPE_IPFIX CollectorType = 0
)

var CollectorType_name = map[int32]string{
	0: "COLLECTOR_TYPE_IPFIX",
}

var CollectorType_value = map[string]int32{
	"COLLECTOR_TYPE_IPFIX": 0,
}

func (CollectorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{0}
}

// FlowExportTimeout
//
// x-displayName: "FlowExportTimeout"
// Flow Export Timeout
type FlowExportTimeout struct {
	// Timeout in Packets
	//
	// x-displayName: "Packets"
	// x-example: "2000"
	// If so many packets have hit the entity, consider as a timeout
	TimeoutPackets uint32 `protobuf:"varint,1,opt,name=timeout_packets,json=timeoutPackets,proto3" json:"timeout_packets,omitempty"`
	// Timeout in Seconds
	//
	// x-displayName: "Seconds"
	// x-example: "60"
	// If so many seconds have elapsed, consider as a timeout
	TimeoutSeconds uint32 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (m *FlowExportTimeout) Reset()      { *m = FlowExportTimeout{} }
func (*FlowExportTimeout) ProtoMessage() {}
func (*FlowExportTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{0}
}
func (m *FlowExportTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowExportTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowExportTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowExportTimeout.Merge(m, src)
}
func (m *FlowExportTimeout) XXX_Size() int {
	return m.Size()
}
func (m *FlowExportTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowExportTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_FlowExportTimeout proto.InternalMessageInfo

func (m *FlowExportTimeout) GetTimeoutPackets() uint32 {
	if m != nil {
		return m.TimeoutPackets
	}
	return 0
}

func (m *FlowExportTimeout) GetTimeoutSeconds() uint32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

// FlowSampler
//
// x-displayName: "FlowSampler"
// Flow Sampler
type FlowSampler struct {
	// Sampler Rate
	//
	// x-displayName: "Sampling Rate"
	// x-example: "1 packet out of 2000 packets"
	// 1 packet out of rate packets
	SamplerRate uint32 `protobuf:"varint,1,opt,name=sampler_rate,json=samplerRate,proto3" json:"sampler_rate,omitempty"`
}

func (m *FlowSampler) Reset()      { *m = FlowSampler{} }
func (*FlowSampler) ProtoMessage() {}
func (*FlowSampler) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{1}
}
func (m *FlowSampler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowSampler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowSampler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowSampler.Merge(m, src)
}
func (m *FlowSampler) XXX_Size() int {
	return m.Size()
}
func (m *FlowSampler) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowSampler.DiscardUnknown(m)
}

var xxx_messageInfo_FlowSampler proto.InternalMessageInfo

func (m *FlowSampler) GetSamplerRate() uint32 {
	if m != nil {
		return m.SamplerRate
	}
	return 0
}

// IPFIX parameters
//
// x-displayName: "IPFIX Parameters"
// Parameters for ipfix
type IpfixParameters struct {
	// Template refresh time
	//
	// x-displayName: "Template Refresh Time"
	// Time interval after which templates are sent to the collector
	IpfixTemplateRefreshTime *FlowExportTimeout `protobuf:"bytes,1,opt,name=ipfix_template_refresh_time,json=ipfixTemplateRefreshTime,proto3" json:"ipfix_template_refresh_time,omitempty"`
}

func (m *IpfixParameters) Reset()      { *m = IpfixParameters{} }
func (*IpfixParameters) ProtoMessage() {}
func (*IpfixParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{2}
}
func (m *IpfixParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpfixParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IpfixParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpfixParameters.Merge(m, src)
}
func (m *IpfixParameters) XXX_Size() int {
	return m.Size()
}
func (m *IpfixParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_IpfixParameters.DiscardUnknown(m)
}

var xxx_messageInfo_IpfixParameters proto.InternalMessageInfo

func (m *IpfixParameters) GetIpfixTemplateRefreshTime() *FlowExportTimeout {
	if m != nil {
		return m.IpfixTemplateRefreshTime
	}
	return nil
}

// Flow Collector Reachability Information
//
// x-displayName: "Flow Collector Endpoint Information"
// Collector Reachability Information
type FlowCollectorEndPoint struct {
	// Collector IP information
	//
	// x-required
	// x-displayName: "Collector IP information"
	// Collector IP information
	//
	// Types that are valid to be assigned to CollectorIpInformation:
	//	*FlowCollectorEndPoint_CollectorIp
	//	*FlowCollectorEndPoint_CollectorServiceName
	CollectorIpInformation isFlowCollectorEndPoint_CollectorIpInformation `protobuf_oneof:"collector_ip_information"`
	// Collector Protocol
	//
	// x-required
	// x-displayName: "Protocol"
	// x-example: "UDP"
	// Protocol supported by the collector
	CollectorProto string `protobuf:"bytes,4,opt,name=collector_proto,json=collectorProto,proto3" json:"collector_proto,omitempty"`
	// Collector Port
	//
	// x-required
	// x-displayName: "Port"
	// x-example: "4739"
	// Port number in which the collector is listening
	CollectorPort uint32 `protobuf:"varint,5,opt,name=collector_port,json=collectorPort,proto3" json:"collector_port,omitempty"`
	// Collector Network
	//
	// x-displayName: "Collector Network"
	// Network in which the collector resides
	//
	// Types that are valid to be assigned to CollectorNetworkChoice:
	//	*FlowCollectorEndPoint_SiteLocalNetwork
	//	*FlowCollectorEndPoint_SiteLocalInsideNetwork
	CollectorNetworkChoice isFlowCollectorEndPoint_CollectorNetworkChoice `protobuf_oneof:"collector_network_choice"`
}

func (m *FlowCollectorEndPoint) Reset()      { *m = FlowCollectorEndPoint{} }
func (*FlowCollectorEndPoint) ProtoMessage() {}
func (*FlowCollectorEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{3}
}
func (m *FlowCollectorEndPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowCollectorEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowCollectorEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowCollectorEndPoint.Merge(m, src)
}
func (m *FlowCollectorEndPoint) XXX_Size() int {
	return m.Size()
}
func (m *FlowCollectorEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowCollectorEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_FlowCollectorEndPoint proto.InternalMessageInfo

type isFlowCollectorEndPoint_CollectorIpInformation interface {
	isFlowCollectorEndPoint_CollectorIpInformation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFlowCollectorEndPoint_CollectorNetworkChoice interface {
	isFlowCollectorEndPoint_CollectorNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowCollectorEndPoint_CollectorIp struct {
	CollectorIp *schema.IpAddressType `protobuf:"bytes,2,opt,name=collector_ip,json=collectorIp,proto3,oneof" json:"collector_ip,omitempty"`
}
type FlowCollectorEndPoint_CollectorServiceName struct {
	CollectorServiceName string `protobuf:"bytes,3,opt,name=collector_service_name,json=collectorServiceName,proto3,oneof" json:"collector_service_name,omitempty"`
}
type FlowCollectorEndPoint_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,7,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type FlowCollectorEndPoint_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,8,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}

func (*FlowCollectorEndPoint_CollectorIp) isFlowCollectorEndPoint_CollectorIpInformation()          {}
func (*FlowCollectorEndPoint_CollectorServiceName) isFlowCollectorEndPoint_CollectorIpInformation() {}
func (*FlowCollectorEndPoint_SiteLocalNetwork) isFlowCollectorEndPoint_CollectorNetworkChoice()     {}
func (*FlowCollectorEndPoint_SiteLocalInsideNetwork) isFlowCollectorEndPoint_CollectorNetworkChoice() {
}

func (m *FlowCollectorEndPoint) GetCollectorIpInformation() isFlowCollectorEndPoint_CollectorIpInformation {
	if m != nil {
		return m.CollectorIpInformation
	}
	return nil
}
func (m *FlowCollectorEndPoint) GetCollectorNetworkChoice() isFlowCollectorEndPoint_CollectorNetworkChoice {
	if m != nil {
		return m.CollectorNetworkChoice
	}
	return nil
}

func (m *FlowCollectorEndPoint) GetCollectorIp() *schema.IpAddressType {
	if x, ok := m.GetCollectorIpInformation().(*FlowCollectorEndPoint_CollectorIp); ok {
		return x.CollectorIp
	}
	return nil
}

func (m *FlowCollectorEndPoint) GetCollectorServiceName() string {
	if x, ok := m.GetCollectorIpInformation().(*FlowCollectorEndPoint_CollectorServiceName); ok {
		return x.CollectorServiceName
	}
	return ""
}

func (m *FlowCollectorEndPoint) GetCollectorProto() string {
	if m != nil {
		return m.CollectorProto
	}
	return ""
}

func (m *FlowCollectorEndPoint) GetCollectorPort() uint32 {
	if m != nil {
		return m.CollectorPort
	}
	return 0
}

func (m *FlowCollectorEndPoint) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetCollectorNetworkChoice().(*FlowCollectorEndPoint_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *FlowCollectorEndPoint) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetCollectorNetworkChoice().(*FlowCollectorEndPoint_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FlowCollectorEndPoint) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FlowCollectorEndPoint_CollectorIp)(nil),
		(*FlowCollectorEndPoint_CollectorServiceName)(nil),
		(*FlowCollectorEndPoint_SiteLocalNetwork)(nil),
		(*FlowCollectorEndPoint_SiteLocalInsideNetwork)(nil),
	}
}

// FlowCollector
//
// x-displayName: "Flow Collector"
// Collector Server Information
type FlowCollector struct {
	// Collector Type
	//
	// x-displayName: "Collector Type"
	// Type of the collector
	CollectorType CollectorType `protobuf:"varint,1,opt,name=collector_type,json=collectorType,proto3,enum=ves.io.schema.flow_exporter.CollectorType" json:"collector_type,omitempty"`
	// Collector End Point Information
	//
	// x-displayName: "Collector Endpoint Information"
	// Reachability information for the collector
	CollectorEndPoint *FlowCollectorEndPoint `protobuf:"bytes,2,opt,name=collector_end_point,json=collectorEndPoint,proto3" json:"collector_end_point,omitempty"`
	// Collector Parameters
	//
	// x-displayName: "Collector Parameters"
	//
	// Depending on the collector type, configure the parameters for that
	// type. For e.g.: for IPFIX, configure various IPFIX parameters for
	// the collector
	//
	// Types that are valid to be assigned to CollectorTypeParameters:
	//	*FlowCollector_IpfixCollectorParameters
	CollectorTypeParameters isFlowCollector_CollectorTypeParameters `protobuf_oneof:"collector_type_parameters"`
}

func (m *FlowCollector) Reset()      { *m = FlowCollector{} }
func (*FlowCollector) ProtoMessage() {}
func (*FlowCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{4}
}
func (m *FlowCollector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FlowCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowCollector.Merge(m, src)
}
func (m *FlowCollector) XXX_Size() int {
	return m.Size()
}
func (m *FlowCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowCollector.DiscardUnknown(m)
}

var xxx_messageInfo_FlowCollector proto.InternalMessageInfo

type isFlowCollector_CollectorTypeParameters interface {
	isFlowCollector_CollectorTypeParameters()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowCollector_IpfixCollectorParameters struct {
	IpfixCollectorParameters *IpfixParameters `protobuf:"bytes,4,opt,name=ipfix_collector_parameters,json=ipfixCollectorParameters,proto3,oneof" json:"ipfix_collector_parameters,omitempty"`
}

func (*FlowCollector_IpfixCollectorParameters) isFlowCollector_CollectorTypeParameters() {}

func (m *FlowCollector) GetCollectorTypeParameters() isFlowCollector_CollectorTypeParameters {
	if m != nil {
		return m.CollectorTypeParameters
	}
	return nil
}

func (m *FlowCollector) GetCollectorType() CollectorType {
	if m != nil {
		return m.CollectorType
	}
	return COLLECTOR_TYPE_IPFIX
}

func (m *FlowCollector) GetCollectorEndPoint() *FlowCollectorEndPoint {
	if m != nil {
		return m.CollectorEndPoint
	}
	return nil
}

func (m *FlowCollector) GetIpfixCollectorParameters() *IpfixParameters {
	if x, ok := m.GetCollectorTypeParameters().(*FlowCollector_IpfixCollectorParameters); ok {
		return x.IpfixCollectorParameters
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FlowCollector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FlowCollector_IpfixCollectorParameters)(nil),
	}
}

// Flow Exporter
//
// x-displayName: "Flow Exporter"
// Flow exporter configuration
type GlobalSpecType struct {
	// Set of collectors
	//
	// x-displayName: "Flow Collectors"
	// Set of all collectors to which the flow information should be
	// exported
	FlowCollector []*FlowCollector `protobuf:"bytes,1,rep,name=flow_collector,json=flowCollector,proto3" json:"flow_collector,omitempty"`
	// Sampling information
	//
	// x-displayName: "Sampling Specification"
	// A flow sampler samples packets and the selected samples are then
	// used to derive flow information that are exported
	FlowSampler *FlowSampler `protobuf:"bytes,2,opt,name=flow_sampler,json=flowSampler,proto3" json:"flow_sampler,omitempty"`
	// Active Flow Timeout
	//
	// x-displayName: "Active Flow Timeout"
	// x-example: "60"
	// Time in seconds after which a long running flow is considered
	// for exporting
	FlowActiveTimeout uint32 `protobuf:"varint,3,opt,name=flow_active_timeout,json=flowActiveTimeout,proto3" json:"flow_active_timeout,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f44837acd5c67f, []int{5}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetFlowCollector() []*FlowCollector {
	if m != nil {
		return m.FlowCollector
	}
	return nil
}

func (m *GlobalSpecType) GetFlowSampler() *FlowSampler {
	if m != nil {
		return m.FlowSampler
	}
	return nil
}

func (m *GlobalSpecType) GetFlowActiveTimeout() uint32 {
	if m != nil {
		return m.FlowActiveTimeout
	}
	return 0
}

func init() {
	proto.RegisterEnum("ves.io.schema.flow_exporter.CollectorType", CollectorType_name, CollectorType_value)
	golang_proto.RegisterEnum("ves.io.schema.flow_exporter.CollectorType", CollectorType_name, CollectorType_value)
	proto.RegisterType((*FlowExportTimeout)(nil), "ves.io.schema.flow_exporter.FlowExportTimeout")
	golang_proto.RegisterType((*FlowExportTimeout)(nil), "ves.io.schema.flow_exporter.FlowExportTimeout")
	proto.RegisterType((*FlowSampler)(nil), "ves.io.schema.flow_exporter.FlowSampler")
	golang_proto.RegisterType((*FlowSampler)(nil), "ves.io.schema.flow_exporter.FlowSampler")
	proto.RegisterType((*IpfixParameters)(nil), "ves.io.schema.flow_exporter.IpfixParameters")
	golang_proto.RegisterType((*IpfixParameters)(nil), "ves.io.schema.flow_exporter.IpfixParameters")
	proto.RegisterType((*FlowCollectorEndPoint)(nil), "ves.io.schema.flow_exporter.FlowCollectorEndPoint")
	golang_proto.RegisterType((*FlowCollectorEndPoint)(nil), "ves.io.schema.flow_exporter.FlowCollectorEndPoint")
	proto.RegisterType((*FlowCollector)(nil), "ves.io.schema.flow_exporter.FlowCollector")
	golang_proto.RegisterType((*FlowCollector)(nil), "ves.io.schema.flow_exporter.FlowCollector")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.flow_exporter.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.flow_exporter.GlobalSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/flow_exporter/types.proto", fileDescriptor_31f44837acd5c67f)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/flow_exporter/types.proto", fileDescriptor_31f44837acd5c67f)
}

var fileDescriptor_31f44837acd5c67f = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x4f, 0x6f, 0xdb, 0xc6,
	0x13, 0xe5, 0x8a, 0xb2, 0xad, 0xdf, 0xca, 0x92, 0x65, 0xc6, 0x3f, 0x97, 0x96, 0x03, 0x42, 0x10,
	0x1a, 0x54, 0x10, 0x6a, 0xca, 0x50, 0x91, 0x02, 0x05, 0x8a, 0x14, 0x96, 0xa3, 0x54, 0x72, 0x8c,
	0x44, 0xa1, 0x55, 0xf4, 0x0f, 0x50, 0x10, 0x14, 0xb5, 0x92, 0x09, 0x93, 0x5c, 0x62, 0xb9, 0x96,
	0xed, 0x5b, 0x8e, 0xb9, 0xb5, 0xc8, 0xa7, 0xe8, 0x67, 0xa8, 0x72, 0xd0, 0xb1, 0x47, 0x1d, 0x8d,
	0x9c, 0x6a, 0xf9, 0xd0, 0x14, 0xe8, 0x21, 0x87, 0x7e, 0x80, 0x62, 0x97, 0x0c, 0x45, 0xca, 0xad,
	0x7d, 0x5b, 0xf2, 0xbd, 0x79, 0x33, 0x7c, 0x3b, 0x33, 0x84, 0x9f, 0x8c, 0x90, 0xaf, 0x5a, 0xb8,
	0xe6, 0x9b, 0xc7, 0xc8, 0x31, 0x6a, 0x03, 0x1b, 0x9f, 0xe9, 0xe8, 0xdc, 0xc3, 0x84, 0x22, 0x52,
	0xa3, 0x17, 0x1e, 0xf2, 0x55, 0x8f, 0x60, 0x8a, 0xa5, 0xed, 0x80, 0xa8, 0x06, 0x44, 0x35, 0x41,
	0x2c, 0xee, 0x0c, 0x2d, 0x7a, 0x7c, 0xda, 0x53, 0x4d, 0xec, 0xd4, 0x86, 0x78, 0x88, 0x6b, 0x3c,
	0xa6, 0x77, 0x3a, 0xe0, 0x4f, 0xfc, 0x81, 0x9f, 0x02, 0xad, 0xe2, 0x47, 0xc9, 0xa4, 0x2e, 0xa2,
	0x21, 0xb0, 0x9d, 0x04, 0xb0, 0x47, 0x2d, 0xec, 0x86, 0x15, 0x14, 0xb7, 0x92, 0x60, 0xac, 0xb8,
	0xe2, 0xfd, 0x24, 0x34, 0x32, 0x6c, 0xab, 0x6f, 0x50, 0x14, 0xa2, 0xa5, 0x05, 0xd4, 0x42, 0x67,
	0x7a, 0x42, 0xba, 0xfc, 0x13, 0x80, 0xeb, 0x4f, 0x6c, 0x7c, 0xd6, 0xe4, 0x1f, 0xd4, 0xb5, 0x1c,
	0x84, 0x4f, 0xa9, 0xf4, 0x15, 0x5c, 0xa3, 0xc1, 0x51, 0xf7, 0x0c, 0xf3, 0x04, 0x51, 0x5f, 0x06,
	0x25, 0x50, 0xc9, 0x35, 0x36, 0xdf, 0x8e, 0x41, 0xba, 0xbe, 0xbb, 0xbb, 0xfb, 0xea, 0x0d, 0xa8,
	0xfc, 0xfa, 0xe7, 0x44, 0x5c, 0xaa, 0x8a, 0xa5, 0xbf, 0x45, 0x2d, 0x1f, 0xd2, 0x3b, 0x01, 0x5b,
	0xfa, 0x62, 0x2e, 0xe0, 0x23, 0x13, 0xbb, 0x7d, 0x5f, 0x4e, 0x71, 0x81, 0xc2, 0xdb, 0x31, 0x00,
	0x0f, 0x5f, 0xbd, 0x01, 0x80, 0x45, 0xa7, 0xaa, 0x42, 0x14, 0x7a, 0x14, 0xf0, 0xca, 0x4f, 0x61,
	0x96, 0x15, 0x74, 0x64, 0x38, 0x9e, 0x8d, 0x88, 0xf4, 0x25, 0x5c, 0xf5, 0x83, 0xa3, 0x4e, 0x0c,
	0x8a, 0xc2, 0x3a, 0xb6, 0x16, 0xeb, 0xc8, 0x54, 0x97, 0xe5, 0xc9, 0x23, 0x56, 0x4a, 0x36, 0xa4,
	0x6b, 0x06, 0x45, 0xe5, 0x97, 0x00, 0xae, 0xb5, 0xbd, 0x81, 0x75, 0xde, 0x31, 0x88, 0xe1, 0x20,
	0x8a, 0x88, 0x2f, 0x39, 0x70, 0xdb, 0x62, 0xaf, 0x74, 0x8a, 0x1c, 0xcf, 0x36, 0x28, 0xd2, 0x09,
	0x1a, 0x10, 0xe4, 0x1f, 0xeb, 0xac, 0x12, 0x9e, 0x20, 0x5b, 0x57, 0xd5, 0x5b, 0x6e, 0x5d, 0xbd,
	0xe1, 0x98, 0x26, 0x73, 0xc9, 0x6e, 0xa8, 0xa8, 0x05, 0x82, 0x0c, 0x2c, 0xff, 0x21, 0xc2, 0xff,
	0x33, 0xfe, 0x3e, 0xb6, 0x6d, 0x64, 0x52, 0x4c, 0x9a, 0x6e, 0xbf, 0x83, 0x2d, 0x97, 0x4a, 0x7b,
	0x70, 0xd5, 0xfc, 0xf0, 0x52, 0xb7, 0x3c, 0xee, 0x50, 0xb6, 0x7e, 0x7f, 0x21, 0x73, 0xdb, 0xdb,
	0xeb, 0xf7, 0x09, 0xf2, 0xfd, 0xee, 0x85, 0x87, 0x5a, 0x82, 0x96, 0x8d, 0x62, 0xda, 0x9e, 0xf4,
	0x39, 0xdc, 0x9c, 0x4b, 0xf8, 0x88, 0x8c, 0x2c, 0x13, 0xe9, 0xae, 0xe1, 0x20, 0x59, 0x2c, 0x81,
	0xca, 0xff, 0x5a, 0x82, 0xb6, 0x11, 0xe1, 0x47, 0x01, 0xfc, 0xcc, 0x70, 0x90, 0xf4, 0x10, 0xae,
	0xcd, 0xe3, 0x78, 0x27, 0xc8, 0x69, 0x16, 0xd0, 0x58, 0x65, 0x66, 0xae, 0x90, 0x25, 0x4d, 0xfc,
	0xe6, 0x71, 0x47, 0xcb, 0x47, 0xa4, 0x0e, 0x1f, 0x85, 0x07, 0x30, 0x1f, 0x0b, 0xc3, 0x84, 0xca,
	0x4b, 0xec, 0x3a, 0xb4, 0xdc, 0x9c, 0x87, 0x09, 0x95, 0x1e, 0x43, 0xc9, 0xb7, 0x28, 0xd2, 0x6d,
	0x6c, 0x1a, 0xb6, 0xee, 0x22, 0x7a, 0x86, 0xc9, 0x89, 0xbc, 0xc2, 0x3f, 0x6f, 0x63, 0xe1, 0xf3,
	0x9a, 0x8e, 0x47, 0x2f, 0x5a, 0x40, 0x2b, 0xb0, 0x88, 0x43, 0x16, 0xf0, 0x2c, 0xe0, 0x4b, 0xdf,
	0xc2, 0xad, 0x98, 0x8a, 0xe5, 0xfa, 0x56, 0x1f, 0x45, 0x62, 0x99, 0xff, 0x16, 0x6b, 0xa4, 0xdf,
	0x8d, 0x01, 0x68, 0x01, 0x6d, 0x33, 0x92, 0x6c, 0xf3, 0xe0, 0x50, 0xb8, 0xf1, 0x31, 0x94, 0xe3,
	0xbe, 0xeb, 0x96, 0x3b, 0xc0, 0xc4, 0x31, 0xd8, 0x58, 0x48, 0x99, 0xc9, 0x18, 0x88, 0xd3, 0x31,
	0x00, 0x49, 0x56, 0x98, 0x56, 0x37, 0x8f, 0xb1, 0x65, 0x22, 0xce, 0x5a, 0x99, 0x8e, 0xc1, 0xf2,
	0x41, 0x3a, 0x03, 0x0a, 0xa9, 0x83, 0x74, 0x66, 0xb9, 0xb0, 0x52, 0xbe, 0x4a, 0xc1, 0x5c, 0xe2,
	0xa6, 0xa5, 0x17, 0x71, 0xbf, 0xd8, 0xd8, 0xf2, 0xee, 0xca, 0xd7, 0xab, 0xb7, 0x76, 0x57, 0x14,
	0xcf, 0x6e, 0x3c, 0xe6, 0x2d, 0x7b, 0x94, 0x7a, 0xf0, 0xde, 0x5c, 0x12, 0xb9, 0x7d, 0xdd, 0x63,
	0xbd, 0x14, 0xf6, 0x4e, 0xfd, 0xce, 0xae, 0xbd, 0xd1, 0x85, 0xda, 0xba, 0x79, 0xa3, 0x31, 0x6d,
	0x58, 0x0c, 0x26, 0x24, 0x76, 0xd9, 0xd1, 0xfc, 0xf0, 0x46, 0xc9, 0xd6, 0x3f, 0xbd, 0x35, 0xd5,
	0xc2, 0xcc, 0xb5, 0x84, 0x70, 0x40, 0xa2, 0xf4, 0x73, 0xac, 0xf1, 0x00, 0x6e, 0x25, 0x4d, 0x8a,
	0x25, 0xe3, 0x4e, 0xa7, 0xa7, 0x63, 0x20, 0x1e, 0xa4, 0x33, 0x62, 0x21, 0x5d, 0xfe, 0x0b, 0xc0,
	0xfc, 0xd7, 0x36, 0xee, 0x19, 0xf6, 0x91, 0x87, 0x4c, 0xee, 0xc8, 0x8f, 0x30, 0xcf, 0x93, 0x47,
	0x22, 0x32, 0x28, 0x89, 0x95, 0xec, 0x1d, 0x26, 0x27, 0xcc, 0x68, 0x40, 0xbe, 0xcb, 0x5e, 0x83,
	0x54, 0x21, 0xa5, 0xe5, 0x06, 0x89, 0x3b, 0x7c, 0x0a, 0x57, 0x79, 0x64, 0xb8, 0x56, 0x42, 0xa7,
	0x2b, 0x77, 0x8a, 0x87, 0x0b, 0x4c, 0xcb, 0x0e, 0x62, 0xdb, 0x4c, 0x85, 0xf7, 0x38, 0xd3, 0x30,
	0xa9, 0x35, 0x42, 0x7a, 0xb8, 0xfa, 0xf8, 0xb0, 0xe6, 0xb4, 0x75, 0x06, 0xed, 0x71, 0x24, 0x5c,
	0x2b, 0xd5, 0x1a, 0xcc, 0x25, 0xba, 0x41, 0x92, 0xe1, 0xc6, 0xfe, 0xf3, 0xc3, 0xc3, 0xe6, 0x7e,
	0xf7, 0xb9, 0xa6, 0x77, 0xbf, 0xef, 0x34, 0xf5, 0x76, 0xe7, 0x49, 0xfb, 0xbb, 0x82, 0x50, 0x4c,
	0x4f, 0xc6, 0x40, 0x68, 0xbc, 0x06, 0x93, 0x47, 0xc2, 0xf4, 0x4a, 0x11, 0x2e, 0xaf, 0x14, 0xe1,
	0xfd, 0x95, 0x02, 0x5e, 0xce, 0x14, 0xf0, 0xcb, 0x4c, 0x01, 0xbf, 0xcd, 0x14, 0x30, 0x9d, 0x29,
	0xe0, 0x72, 0xa6, 0x80, 0xdf, 0x67, 0x0a, 0x78, 0x37, 0x53, 0x84, 0xf7, 0x33, 0x05, 0xfc, 0x7c,
	0xad, 0x08, 0x93, 0x6b, 0x05, 0x4c, 0xaf, 0x15, 0xe1, 0xf2, 0x5a, 0x11, 0x7e, 0x78, 0x31, 0xc4,
	0xde, 0xc9, 0x50, 0x1d, 0x61, 0x9b, 0x22, 0x42, 0x0c, 0xf5, 0xd4, 0xaf, 0xf1, 0x03, 0x9b, 0x91,
	0x1d, 0x8f, 0xe0, 0x91, 0xd5, 0x47, 0x64, 0xe7, 0x03, 0x5c, 0xf3, 0x7a, 0x43, 0x5c, 0x43, 0xe7,
	0x34, 0xfc, 0xc5, 0xfc, 0xdb, 0xdf, 0xb4, 0xb7, 0xcc, 0x37, 0xcc, 0x67, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xea, 0x97, 0xe0, 0x54, 0x73, 0x07, 0x00, 0x00,
}

func (x CollectorType) String() string {
	s, ok := CollectorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FlowExportTimeout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowExportTimeout)
	if !ok {
		that2, ok := that.(FlowExportTimeout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeoutPackets != that1.TimeoutPackets {
		return false
	}
	if this.TimeoutSeconds != that1.TimeoutSeconds {
		return false
	}
	return true
}
func (this *FlowSampler) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowSampler)
	if !ok {
		that2, ok := that.(FlowSampler)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SamplerRate != that1.SamplerRate {
		return false
	}
	return true
}
func (this *IpfixParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IpfixParameters)
	if !ok {
		that2, ok := that.(IpfixParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpfixTemplateRefreshTime.Equal(that1.IpfixTemplateRefreshTime) {
		return false
	}
	return true
}
func (this *FlowCollectorEndPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollectorEndPoint)
	if !ok {
		that2, ok := that.(FlowCollectorEndPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CollectorIpInformation == nil {
		if this.CollectorIpInformation != nil {
			return false
		}
	} else if this.CollectorIpInformation == nil {
		return false
	} else if !this.CollectorIpInformation.Equal(that1.CollectorIpInformation) {
		return false
	}
	if this.CollectorProto != that1.CollectorProto {
		return false
	}
	if this.CollectorPort != that1.CollectorPort {
		return false
	}
	if that1.CollectorNetworkChoice == nil {
		if this.CollectorNetworkChoice != nil {
			return false
		}
	} else if this.CollectorNetworkChoice == nil {
		return false
	} else if !this.CollectorNetworkChoice.Equal(that1.CollectorNetworkChoice) {
		return false
	}
	return true
}
func (this *FlowCollectorEndPoint_CollectorIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollectorEndPoint_CollectorIp)
	if !ok {
		that2, ok := that.(FlowCollectorEndPoint_CollectorIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CollectorIp.Equal(that1.CollectorIp) {
		return false
	}
	return true
}
func (this *FlowCollectorEndPoint_CollectorServiceName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollectorEndPoint_CollectorServiceName)
	if !ok {
		that2, ok := that.(FlowCollectorEndPoint_CollectorServiceName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollectorServiceName != that1.CollectorServiceName {
		return false
	}
	return true
}
func (this *FlowCollectorEndPoint_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollectorEndPoint_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(FlowCollectorEndPoint_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *FlowCollectorEndPoint_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollectorEndPoint_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(FlowCollectorEndPoint_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *FlowCollector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollector)
	if !ok {
		that2, ok := that.(FlowCollector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollectorType != that1.CollectorType {
		return false
	}
	if !this.CollectorEndPoint.Equal(that1.CollectorEndPoint) {
		return false
	}
	if that1.CollectorTypeParameters == nil {
		if this.CollectorTypeParameters != nil {
			return false
		}
	} else if this.CollectorTypeParameters == nil {
		return false
	} else if !this.CollectorTypeParameters.Equal(that1.CollectorTypeParameters) {
		return false
	}
	return true
}
func (this *FlowCollector_IpfixCollectorParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowCollector_IpfixCollectorParameters)
	if !ok {
		that2, ok := that.(FlowCollector_IpfixCollectorParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpfixCollectorParameters.Equal(that1.IpfixCollectorParameters) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FlowCollector) != len(that1.FlowCollector) {
		return false
	}
	for i := range this.FlowCollector {
		if !this.FlowCollector[i].Equal(that1.FlowCollector[i]) {
			return false
		}
	}
	if !this.FlowSampler.Equal(that1.FlowSampler) {
		return false
	}
	if this.FlowActiveTimeout != that1.FlowActiveTimeout {
		return false
	}
	return true
}
func (this *FlowExportTimeout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&flow_exporter.FlowExportTimeout{")
	s = append(s, "TimeoutPackets: "+fmt.Sprintf("%#v", this.TimeoutPackets)+",\n")
	s = append(s, "TimeoutSeconds: "+fmt.Sprintf("%#v", this.TimeoutSeconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowSampler) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&flow_exporter.FlowSampler{")
	s = append(s, "SamplerRate: "+fmt.Sprintf("%#v", this.SamplerRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IpfixParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&flow_exporter.IpfixParameters{")
	if this.IpfixTemplateRefreshTime != nil {
		s = append(s, "IpfixTemplateRefreshTime: "+fmt.Sprintf("%#v", this.IpfixTemplateRefreshTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowCollectorEndPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&flow_exporter.FlowCollectorEndPoint{")
	if this.CollectorIpInformation != nil {
		s = append(s, "CollectorIpInformation: "+fmt.Sprintf("%#v", this.CollectorIpInformation)+",\n")
	}
	s = append(s, "CollectorProto: "+fmt.Sprintf("%#v", this.CollectorProto)+",\n")
	s = append(s, "CollectorPort: "+fmt.Sprintf("%#v", this.CollectorPort)+",\n")
	if this.CollectorNetworkChoice != nil {
		s = append(s, "CollectorNetworkChoice: "+fmt.Sprintf("%#v", this.CollectorNetworkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowCollectorEndPoint_CollectorIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&flow_exporter.FlowCollectorEndPoint_CollectorIp{` +
		`CollectorIp:` + fmt.Sprintf("%#v", this.CollectorIp) + `}`}, ", ")
	return s
}
func (this *FlowCollectorEndPoint_CollectorServiceName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&flow_exporter.FlowCollectorEndPoint_CollectorServiceName{` +
		`CollectorServiceName:` + fmt.Sprintf("%#v", this.CollectorServiceName) + `}`}, ", ")
	return s
}
func (this *FlowCollectorEndPoint_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&flow_exporter.FlowCollectorEndPoint_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *FlowCollectorEndPoint_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&flow_exporter.FlowCollectorEndPoint_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *FlowCollector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&flow_exporter.FlowCollector{")
	s = append(s, "CollectorType: "+fmt.Sprintf("%#v", this.CollectorType)+",\n")
	if this.CollectorEndPoint != nil {
		s = append(s, "CollectorEndPoint: "+fmt.Sprintf("%#v", this.CollectorEndPoint)+",\n")
	}
	if this.CollectorTypeParameters != nil {
		s = append(s, "CollectorTypeParameters: "+fmt.Sprintf("%#v", this.CollectorTypeParameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowCollector_IpfixCollectorParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&flow_exporter.FlowCollector_IpfixCollectorParameters{` +
		`IpfixCollectorParameters:` + fmt.Sprintf("%#v", this.IpfixCollectorParameters) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&flow_exporter.GlobalSpecType{")
	if this.FlowCollector != nil {
		s = append(s, "FlowCollector: "+fmt.Sprintf("%#v", this.FlowCollector)+",\n")
	}
	if this.FlowSampler != nil {
		s = append(s, "FlowSampler: "+fmt.Sprintf("%#v", this.FlowSampler)+",\n")
	}
	s = append(s, "FlowActiveTimeout: "+fmt.Sprintf("%#v", this.FlowActiveTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowExportTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowExportTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutSeconds != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeoutPackets != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimeoutPackets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowSampler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowSampler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowSampler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SamplerRate != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SamplerRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IpfixParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpfixParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpfixParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpfixTemplateRefreshTime != nil {
		{
			size, err := m.IpfixTemplateRefreshTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowCollectorEndPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowCollectorEndPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollectorEndPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectorNetworkChoice != nil {
		{
			size := m.CollectorNetworkChoice.Size()
			i -= size
			if _, err := m.CollectorNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CollectorPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CollectorPort))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CollectorProto) > 0 {
		i -= len(m.CollectorProto)
		copy(dAtA[i:], m.CollectorProto)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CollectorProto)))
		i--
		dAtA[i] = 0x22
	}
	if m.CollectorIpInformation != nil {
		{
			size := m.CollectorIpInformation.Size()
			i -= size
			if _, err := m.CollectorIpInformation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowCollectorEndPoint_CollectorIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollectorEndPoint_CollectorIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CollectorIp != nil {
		{
			size, err := m.CollectorIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FlowCollectorEndPoint_CollectorServiceName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollectorEndPoint_CollectorServiceName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CollectorServiceName)
	copy(dAtA[i:], m.CollectorServiceName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CollectorServiceName)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *FlowCollectorEndPoint_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollectorEndPoint_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *FlowCollectorEndPoint_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollectorEndPoint_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *FlowCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowCollector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectorTypeParameters != nil {
		{
			size := m.CollectorTypeParameters.Size()
			i -= size
			if _, err := m.CollectorTypeParameters.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CollectorEndPoint != nil {
		{
			size, err := m.CollectorEndPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CollectorType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CollectorType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowCollector_IpfixCollectorParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCollector_IpfixCollectorParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpfixCollectorParameters != nil {
		{
			size, err := m.IpfixCollectorParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowActiveTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FlowActiveTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.FlowSampler != nil {
		{
			size, err := m.FlowSampler.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FlowCollector) > 0 {
		for iNdEx := len(m.FlowCollector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlowCollector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowExportTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutPackets != 0 {
		n += 1 + sovTypes(uint64(m.TimeoutPackets))
	}
	if m.TimeoutSeconds != 0 {
		n += 1 + sovTypes(uint64(m.TimeoutSeconds))
	}
	return n
}

func (m *FlowSampler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SamplerRate != 0 {
		n += 1 + sovTypes(uint64(m.SamplerRate))
	}
	return n
}

func (m *IpfixParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpfixTemplateRefreshTime != nil {
		l = m.IpfixTemplateRefreshTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *FlowCollectorEndPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectorIpInformation != nil {
		n += m.CollectorIpInformation.Size()
	}
	l = len(m.CollectorProto)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CollectorPort != 0 {
		n += 1 + sovTypes(uint64(m.CollectorPort))
	}
	if m.CollectorNetworkChoice != nil {
		n += m.CollectorNetworkChoice.Size()
	}
	return n
}

func (m *FlowCollectorEndPoint_CollectorIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectorIp != nil {
		l = m.CollectorIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FlowCollectorEndPoint_CollectorServiceName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectorServiceName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *FlowCollectorEndPoint_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FlowCollectorEndPoint_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FlowCollector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectorType != 0 {
		n += 1 + sovTypes(uint64(m.CollectorType))
	}
	if m.CollectorEndPoint != nil {
		l = m.CollectorEndPoint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CollectorTypeParameters != nil {
		n += m.CollectorTypeParameters.Size()
	}
	return n
}

func (m *FlowCollector_IpfixCollectorParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpfixCollectorParameters != nil {
		l = m.IpfixCollectorParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FlowCollector) > 0 {
		for _, e := range m.FlowCollector {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.FlowSampler != nil {
		l = m.FlowSampler.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FlowActiveTimeout != 0 {
		n += 1 + sovTypes(uint64(m.FlowActiveTimeout))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowExportTimeout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowExportTimeout{`,
		`TimeoutPackets:` + fmt.Sprintf("%v", this.TimeoutPackets) + `,`,
		`TimeoutSeconds:` + fmt.Sprintf("%v", this.TimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowSampler) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowSampler{`,
		`SamplerRate:` + fmt.Sprintf("%v", this.SamplerRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpfixParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpfixParameters{`,
		`IpfixTemplateRefreshTime:` + strings.Replace(this.IpfixTemplateRefreshTime.String(), "FlowExportTimeout", "FlowExportTimeout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollectorEndPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollectorEndPoint{`,
		`CollectorIpInformation:` + fmt.Sprintf("%v", this.CollectorIpInformation) + `,`,
		`CollectorProto:` + fmt.Sprintf("%v", this.CollectorProto) + `,`,
		`CollectorPort:` + fmt.Sprintf("%v", this.CollectorPort) + `,`,
		`CollectorNetworkChoice:` + fmt.Sprintf("%v", this.CollectorNetworkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollectorEndPoint_CollectorIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollectorEndPoint_CollectorIp{`,
		`CollectorIp:` + strings.Replace(fmt.Sprintf("%v", this.CollectorIp), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollectorEndPoint_CollectorServiceName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollectorEndPoint_CollectorServiceName{`,
		`CollectorServiceName:` + fmt.Sprintf("%v", this.CollectorServiceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollectorEndPoint_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollectorEndPoint_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollectorEndPoint_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollectorEndPoint_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollector{`,
		`CollectorType:` + fmt.Sprintf("%v", this.CollectorType) + `,`,
		`CollectorEndPoint:` + strings.Replace(this.CollectorEndPoint.String(), "FlowCollectorEndPoint", "FlowCollectorEndPoint", 1) + `,`,
		`CollectorTypeParameters:` + fmt.Sprintf("%v", this.CollectorTypeParameters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowCollector_IpfixCollectorParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowCollector_IpfixCollectorParameters{`,
		`IpfixCollectorParameters:` + strings.Replace(fmt.Sprintf("%v", this.IpfixCollectorParameters), "IpfixParameters", "IpfixParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFlowCollector := "[]*FlowCollector{"
	for _, f := range this.FlowCollector {
		repeatedStringForFlowCollector += strings.Replace(f.String(), "FlowCollector", "FlowCollector", 1) + ","
	}
	repeatedStringForFlowCollector += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`FlowCollector:` + repeatedStringForFlowCollector + `,`,
		`FlowSampler:` + strings.Replace(this.FlowSampler.String(), "FlowSampler", "FlowSampler", 1) + `,`,
		`FlowActiveTimeout:` + fmt.Sprintf("%v", this.FlowActiveTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowExportTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutPackets", wireType)
			}
			m.TimeoutPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutPackets |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			m.TimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowSampler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowSampler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowSampler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplerRate", wireType)
			}
			m.SamplerRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SamplerRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpfixParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpfixParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpfixParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfixTemplateRefreshTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpfixTemplateRefreshTime == nil {
				m.IpfixTemplateRefreshTime = &FlowExportTimeout{}
			}
			if err := m.IpfixTemplateRefreshTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowCollectorEndPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowCollectorEndPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowCollectorEndPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpAddressType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CollectorIpInformation = &FlowCollectorEndPoint_CollectorIp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorIpInformation = &FlowCollectorEndPoint_CollectorServiceName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorProto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorPort", wireType)
			}
			m.CollectorPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectorPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CollectorNetworkChoice = &FlowCollectorEndPoint_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CollectorNetworkChoice = &FlowCollectorEndPoint_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorType", wireType)
			}
			m.CollectorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectorType |= CollectorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorEndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollectorEndPoint == nil {
				m.CollectorEndPoint = &FlowCollectorEndPoint{}
			}
			if err := m.CollectorEndPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfixCollectorParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpfixParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CollectorTypeParameters = &FlowCollector_IpfixCollectorParameters{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCollector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowCollector = append(m.FlowCollector, &FlowCollector{})
			if err := m.FlowCollector[len(m.FlowCollector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowSampler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowSampler == nil {
				m.FlowSampler = &FlowSampler{}
			}
			if err := m.FlowSampler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowActiveTimeout", wireType)
			}
			m.FlowActiveTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowActiveTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

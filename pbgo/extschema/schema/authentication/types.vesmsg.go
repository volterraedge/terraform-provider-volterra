// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package authentication

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CookieParams) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CookieParams) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CookieParams) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAuthHmac().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CookieParams.auth_hmac")
	}

	return nil
}

func (m *CookieParams) DeepCopy() *CookieParams {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CookieParams{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CookieParams) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CookieParams) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CookieParamsValidator().Validate(ctx, m, opts...)
}

func (m *CookieParams) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSecretChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CookieParams) GetSecretChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSecretChoice() == nil {
		return nil, nil
	}
	switch m.GetSecretChoice().(type) {
	case *CookieParams_AuthHmac:

		return nil, nil

	case *CookieParams_KmsKeyHmac:

		drInfos, err := m.GetKmsKeyHmac().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetKmsKeyHmac().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "kms_key_hmac." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCookieParams struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCookieParams) CookieRefreshIntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cookie_refresh_interval")
	}

	return validatorFn, nil
}

func (v *ValidateCookieParams) CookieExpiryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cookie_expiry")
	}

	return validatorFn, nil
}

func (v *ValidateCookieParams) SessionExpiryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for session_expiry")
	}

	return validatorFn, nil
}

func (v *ValidateCookieParams) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CookieParams)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CookieParams got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cookie_expiry"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_expiry"))
		if err := fv(ctx, m.GetCookieExpiry(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookie_refresh_interval"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_refresh_interval"))
		if err := fv(ctx, m.GetCookieRefreshInterval(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSecretChoice().(type) {
	case *CookieParams_AuthHmac:
		if fv, exists := v.FldValidators["secret_choice.auth_hmac"]; exists {
			val := m.GetSecretChoice().(*CookieParams_AuthHmac).AuthHmac
			vOpts := append(opts,
				db.WithValidateField("secret_choice"),
				db.WithValidateField("auth_hmac"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CookieParams_KmsKeyHmac:
		if fv, exists := v.FldValidators["secret_choice.kms_key_hmac"]; exists {
			val := m.GetSecretChoice().(*CookieParams_KmsKeyHmac).KmsKeyHmac
			vOpts := append(opts,
				db.WithValidateField("secret_choice"),
				db.WithValidateField("kms_key_hmac"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["session_expiry"]; exists {

		vOpts := append(opts, db.WithValidateField("session_expiry"))
		if err := fv(ctx, m.GetSessionExpiry(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCookieParamsValidator = func() *ValidateCookieParams {
	v := &ValidateCookieParams{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCookieRefreshInterval := v.CookieRefreshIntervalValidationRuleHandler
	rulesCookieRefreshInterval := map[string]string{
		"ves.io.schema.rules.uint32.lte": "86400",
	}
	vFn, err = vrhCookieRefreshInterval(rulesCookieRefreshInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CookieParams.cookie_refresh_interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_refresh_interval"] = vFn

	vrhCookieExpiry := v.CookieExpiryValidationRuleHandler
	rulesCookieExpiry := map[string]string{
		"ves.io.schema.rules.uint32.lte": "86400",
	}
	vFn, err = vrhCookieExpiry(rulesCookieExpiry)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CookieParams.cookie_expiry: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_expiry"] = vFn

	vrhSessionExpiry := v.SessionExpiryValidationRuleHandler
	rulesSessionExpiry := map[string]string{
		"ves.io.schema.rules.uint32.lte": "1296000",
	}
	vFn, err = vrhSessionExpiry(rulesSessionExpiry)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CookieParams.session_expiry: %s", err)
		panic(errMsg)
	}
	v.FldValidators["session_expiry"] = vFn

	v.FldValidators["secret_choice.auth_hmac"] = HMACKeyPairValidator().Validate
	v.FldValidators["secret_choice.kms_key_hmac"] = KMSKeyRefTypeValidator().Validate

	return v
}()

func CookieParamsValidator() db.Validator {
	return DefaultCookieParamsValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetOidcAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.oidc_auth")
	}

	if err := m.GetCookieParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.cookie_params")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCookieParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCookieParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCookieParams() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCookieParams().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCookieParams().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cookie_params." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AuthTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CookieParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cookie_params")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CookieParamsValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_type_choice"]; exists {
		val := m.GetAuthTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthTypeChoice().(type) {
	case *CreateSpecType_OidcAuth:
		if fv, exists := v.FldValidators["auth_type_choice.oidc_auth"]; exists {
			val := m.GetAuthTypeChoice().(*CreateSpecType_OidcAuth).OidcAuth
			vOpts := append(opts,
				db.WithValidateField("auth_type_choice"),
				db.WithValidateField("oidc_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cookie_params"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_params"))
		if err := fv(ctx, m.GetCookieParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthTypeChoice := v.AuthTypeChoiceValidationRuleHandler
	rulesAuthTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthTypeChoice(rulesAuthTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.auth_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_type_choice"] = vFn

	vrhCookieParams := v.CookieParamsValidationRuleHandler
	rulesCookieParams := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCookieParams(rulesCookieParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cookie_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_params"] = vFn

	v.FldValidators["auth_type_choice.oidc_auth"] = OIDCAuthTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetOidcAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.oidc_auth")
	}

	if err := m.GetCookieParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.cookie_params")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCookieParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCookieParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCookieParams() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCookieParams().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCookieParams().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cookie_params." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AuthTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) CookieParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cookie_params")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CookieParamsValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_type_choice"]; exists {
		val := m.GetAuthTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthTypeChoice().(type) {
	case *GetSpecType_OidcAuth:
		if fv, exists := v.FldValidators["auth_type_choice.oidc_auth"]; exists {
			val := m.GetAuthTypeChoice().(*GetSpecType_OidcAuth).OidcAuth
			vOpts := append(opts,
				db.WithValidateField("auth_type_choice"),
				db.WithValidateField("oidc_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cookie_params"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_params"))
		if err := fv(ctx, m.GetCookieParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthTypeChoice := v.AuthTypeChoiceValidationRuleHandler
	rulesAuthTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthTypeChoice(rulesAuthTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.auth_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_type_choice"] = vFn

	vrhCookieParams := v.CookieParamsValidationRuleHandler
	rulesCookieParams := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCookieParams(rulesCookieParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cookie_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_params"] = vFn

	v.FldValidators["auth_type_choice.oidc_auth"] = OIDCAuthTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetOidcAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.oidc_auth")
	}

	if err := m.GetCookieParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.cookie_params")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCookieParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCookieParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCookieParams() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCookieParams().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCookieParams().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cookie_params." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AuthTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CookieParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cookie_params")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CookieParamsValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_type_choice"]; exists {
		val := m.GetAuthTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthTypeChoice().(type) {
	case *GlobalSpecType_OidcAuth:
		if fv, exists := v.FldValidators["auth_type_choice.oidc_auth"]; exists {
			val := m.GetAuthTypeChoice().(*GlobalSpecType_OidcAuth).OidcAuth
			vOpts := append(opts,
				db.WithValidateField("auth_type_choice"),
				db.WithValidateField("oidc_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cookie_params"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_params"))
		if err := fv(ctx, m.GetCookieParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthTypeChoice := v.AuthTypeChoiceValidationRuleHandler
	rulesAuthTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthTypeChoice(rulesAuthTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.auth_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_type_choice"] = vFn

	vrhCookieParams := v.CookieParamsValidationRuleHandler
	rulesCookieParams := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCookieParams(rulesCookieParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cookie_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_params"] = vFn

	v.FldValidators["auth_type_choice.oidc_auth"] = OIDCAuthTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HMACKeyPair) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HMACKeyPair) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HMACKeyPair) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPrimKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HMACKeyPair.prim_key")
	}

	if err := m.GetSecKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HMACKeyPair.sec_key")
	}

	return nil
}

func (m *HMACKeyPair) DeepCopy() *HMACKeyPair {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HMACKeyPair{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HMACKeyPair) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HMACKeyPair) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HMACKeyPairValidator().Validate(ctx, m, opts...)
}

type ValidateHMACKeyPair struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHMACKeyPair) PrimKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for prim_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHMACKeyPair) PrimKeyExpiryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	reqdValidatorFn, err = db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for prim_key_expiry")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHMACKeyPair) SecKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for sec_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHMACKeyPair) SecKeyExpiryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	reqdValidatorFn, err = db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for sec_key_expiry")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHMACKeyPair) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HMACKeyPair)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HMACKeyPair got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["prim_key"]; exists {

		vOpts := append(opts, db.WithValidateField("prim_key"))
		if err := fv(ctx, m.GetPrimKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["prim_key_expiry"]; exists {

		vOpts := append(opts, db.WithValidateField("prim_key_expiry"))
		if err := fv(ctx, m.GetPrimKeyExpiry(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sec_key"]; exists {

		vOpts := append(opts, db.WithValidateField("sec_key"))
		if err := fv(ctx, m.GetSecKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sec_key_expiry"]; exists {

		vOpts := append(opts, db.WithValidateField("sec_key_expiry"))
		if err := fv(ctx, m.GetSecKeyExpiry(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHMACKeyPairValidator = func() *ValidateHMACKeyPair {
	v := &ValidateHMACKeyPair{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPrimKey := v.PrimKeyValidationRuleHandler
	rulesPrimKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrimKey(rulesPrimKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HMACKeyPair.prim_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prim_key"] = vFn

	vrhPrimKeyExpiry := v.PrimKeyExpiryValidationRuleHandler
	rulesPrimKeyExpiry := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrimKeyExpiry(rulesPrimKeyExpiry)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HMACKeyPair.prim_key_expiry: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prim_key_expiry"] = vFn

	vrhSecKey := v.SecKeyValidationRuleHandler
	rulesSecKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSecKey(rulesSecKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HMACKeyPair.sec_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sec_key"] = vFn

	vrhSecKeyExpiry := v.SecKeyExpiryValidationRuleHandler
	rulesSecKeyExpiry := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSecKeyExpiry(rulesSecKeyExpiry)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HMACKeyPair.sec_key_expiry: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sec_key_expiry"] = vFn

	return v
}()

func HMACKeyPairValidator() db.Validator {
	return DefaultHMACKeyPairValidator
}

// augmented methods on protoc/std generated struct

func (m *KMSKeyRefType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *KMSKeyRefType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *KMSKeyRefType) DeepCopy() *KMSKeyRefType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &KMSKeyRefType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *KMSKeyRefType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *KMSKeyRefType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return KMSKeyRefTypeValidator().Validate(ctx, m, opts...)
}

func (m *KMSKeyRefType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAuthHmacKmsDRefInfo()

}

func (m *KMSKeyRefType) GetAuthHmacKmsDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAuthHmacKms()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("kms_key.Object")
	dri := db.DRefInfo{
		RefdType:   "kms_key.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "auth_hmac_kms",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAuthHmacKmsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *KMSKeyRefType) GetAuthHmacKmsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "kms_key.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: kms_key")
	}

	vref := m.GetAuthHmacKms()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "kms_key.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateKMSKeyRefType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateKMSKeyRefType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*KMSKeyRefType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *KMSKeyRefType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_hmac_kms"]; exists {

		vOpts := append(opts, db.WithValidateField("auth_hmac_kms"))
		if err := fv(ctx, m.GetAuthHmacKms(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultKMSKeyRefTypeValidator = func() *ValidateKMSKeyRefType {
	v := &ValidateKMSKeyRefType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["auth_hmac_kms"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func KMSKeyRefTypeValidator() db.Validator {
	return DefaultKMSKeyRefTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *OIDCAuthParams) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OIDCAuthParams) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OIDCAuthParams) DeepCopy() *OIDCAuthParams {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OIDCAuthParams{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OIDCAuthParams) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OIDCAuthParams) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OIDCAuthParamsValidator().Validate(ctx, m, opts...)
}

type ValidateOIDCAuthParams struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOIDCAuthParams) AuthEndpointUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_endpoint_url")
	}

	return validatorFn, nil
}

func (v *ValidateOIDCAuthParams) TokenEndpointUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for token_endpoint_url")
	}

	return validatorFn, nil
}

func (v *ValidateOIDCAuthParams) EndSessionEndpointUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for end_session_endpoint_url")
	}

	return validatorFn, nil
}

func (v *ValidateOIDCAuthParams) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OIDCAuthParams)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OIDCAuthParams got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_endpoint_url"]; exists {

		vOpts := append(opts, db.WithValidateField("auth_endpoint_url"))
		if err := fv(ctx, m.GetAuthEndpointUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["end_session_endpoint_url"]; exists {

		vOpts := append(opts, db.WithValidateField("end_session_endpoint_url"))
		if err := fv(ctx, m.GetEndSessionEndpointUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["token_endpoint_url"]; exists {

		vOpts := append(opts, db.WithValidateField("token_endpoint_url"))
		if err := fv(ctx, m.GetTokenEndpointUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOIDCAuthParamsValidator = func() *ValidateOIDCAuthParams {
	v := &ValidateOIDCAuthParams{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthEndpointUrl := v.AuthEndpointUrlValidationRuleHandler
	rulesAuthEndpointUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhAuthEndpointUrl(rulesAuthEndpointUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OIDCAuthParams.auth_endpoint_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_endpoint_url"] = vFn

	vrhTokenEndpointUrl := v.TokenEndpointUrlValidationRuleHandler
	rulesTokenEndpointUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhTokenEndpointUrl(rulesTokenEndpointUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OIDCAuthParams.token_endpoint_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token_endpoint_url"] = vFn

	vrhEndSessionEndpointUrl := v.EndSessionEndpointUrlValidationRuleHandler
	rulesEndSessionEndpointUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhEndSessionEndpointUrl(rulesEndSessionEndpointUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OIDCAuthParams.end_session_endpoint_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["end_session_endpoint_url"] = vFn

	return v
}()

func OIDCAuthParamsValidator() db.Validator {
	return DefaultOIDCAuthParamsValidator
}

// augmented methods on protoc/std generated struct

func (m *OIDCAuthType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OIDCAuthType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *OIDCAuthType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetClientSecret().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting OIDCAuthType.client_secret")
	}

	return nil
}

func (m *OIDCAuthType) DeepCopy() *OIDCAuthType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OIDCAuthType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OIDCAuthType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OIDCAuthType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OIDCAuthTypeValidator().Validate(ctx, m, opts...)
}

type ValidateOIDCAuthType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOIDCAuthType) AuthParamsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_params_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOIDCAuthType) AuthParamsChoiceOidcWellKnownConfigUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_OidcWellKnownConfigUrl, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oidc_well_known_config_url")
	}
	return oValidatorFn_OidcWellKnownConfigUrl, nil
}

func (v *ValidateOIDCAuthType) OidcClientIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oidc_client_id")
	}

	return validatorFn, nil
}

func (v *ValidateOIDCAuthType) ClientSecretValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for client_secret")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOIDCAuthType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OIDCAuthType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OIDCAuthType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_params_choice"]; exists {
		val := m.GetAuthParamsChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_params_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthParamsChoice().(type) {
	case *OIDCAuthType_OidcWellKnownConfigUrl:
		if fv, exists := v.FldValidators["auth_params_choice.oidc_well_known_config_url"]; exists {
			val := m.GetAuthParamsChoice().(*OIDCAuthType_OidcWellKnownConfigUrl).OidcWellKnownConfigUrl
			vOpts := append(opts,
				db.WithValidateField("auth_params_choice"),
				db.WithValidateField("oidc_well_known_config_url"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OIDCAuthType_OidcAuthParams:
		if fv, exists := v.FldValidators["auth_params_choice.oidc_auth_params"]; exists {
			val := m.GetAuthParamsChoice().(*OIDCAuthType_OidcAuthParams).OidcAuthParams
			vOpts := append(opts,
				db.WithValidateField("auth_params_choice"),
				db.WithValidateField("oidc_auth_params"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["client_secret"]; exists {

		vOpts := append(opts, db.WithValidateField("client_secret"))
		if err := fv(ctx, m.GetClientSecret(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["oidc_client_id"]; exists {

		vOpts := append(opts, db.WithValidateField("oidc_client_id"))
		if err := fv(ctx, m.GetOidcClientId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOIDCAuthTypeValidator = func() *ValidateOIDCAuthType {
	v := &ValidateOIDCAuthType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthParamsChoice := v.AuthParamsChoiceValidationRuleHandler
	rulesAuthParamsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthParamsChoice(rulesAuthParamsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OIDCAuthType.auth_params_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_params_choice"] = vFn

	vrhAuthParamsChoiceOidcWellKnownConfigUrl := v.AuthParamsChoiceOidcWellKnownConfigUrlValidationRuleHandler
	rulesAuthParamsChoiceOidcWellKnownConfigUrl := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFnMap["auth_params_choice.oidc_well_known_config_url"], err = vrhAuthParamsChoiceOidcWellKnownConfigUrl(rulesAuthParamsChoiceOidcWellKnownConfigUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field OIDCAuthType.auth_params_choice_oidc_well_known_config_url: %s", err)
		panic(errMsg)
	}

	v.FldValidators["auth_params_choice.oidc_well_known_config_url"] = vFnMap["auth_params_choice.oidc_well_known_config_url"]

	vrhOidcClientId := v.OidcClientIdValidationRuleHandler
	rulesOidcClientId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhOidcClientId(rulesOidcClientId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OIDCAuthType.oidc_client_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["oidc_client_id"] = vFn

	vrhClientSecret := v.ClientSecretValidationRuleHandler
	rulesClientSecret := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhClientSecret(rulesClientSecret)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OIDCAuthType.client_secret: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_secret"] = vFn

	v.FldValidators["auth_params_choice.oidc_auth_params"] = OIDCAuthParamsValidator().Validate

	return v
}()

func OIDCAuthTypeValidator() db.Validator {
	return DefaultOIDCAuthTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetOidcAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.oidc_auth")
	}

	if err := m.GetCookieParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.cookie_params")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCookieParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetCookieParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCookieParams() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCookieParams().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCookieParams().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cookie_params." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AuthTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CookieParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cookie_params")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CookieParamsValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_type_choice"]; exists {
		val := m.GetAuthTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthTypeChoice().(type) {
	case *ReplaceSpecType_OidcAuth:
		if fv, exists := v.FldValidators["auth_type_choice.oidc_auth"]; exists {
			val := m.GetAuthTypeChoice().(*ReplaceSpecType_OidcAuth).OidcAuth
			vOpts := append(opts,
				db.WithValidateField("auth_type_choice"),
				db.WithValidateField("oidc_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cookie_params"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_params"))
		if err := fv(ctx, m.GetCookieParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthTypeChoice := v.AuthTypeChoiceValidationRuleHandler
	rulesAuthTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthTypeChoice(rulesAuthTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.auth_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_type_choice"] = vFn

	vrhCookieParams := v.CookieParamsValidationRuleHandler
	rulesCookieParams := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCookieParams(rulesCookieParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cookie_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookie_params"] = vFn

	v.FldValidators["auth_type_choice.oidc_auth"] = OIDCAuthTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAuthTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AuthTypeChoice.(type) {
	case nil:
		o.AuthTypeChoice = nil

	case *CreateSpecType_OidcAuth:
		o.AuthTypeChoice = &GlobalSpecType_OidcAuth{OidcAuth: of.OidcAuth}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAuthTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AuthTypeChoice.(type) {
	case nil:
		r.AuthTypeChoice = nil

	case *GlobalSpecType_OidcAuth:
		r.AuthTypeChoice = &CreateSpecType_OidcAuth{OidcAuth: of.OidcAuth}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAuthTypeChoiceFromGlobalSpecType(f)
	m.CookieParams = f.GetCookieParams()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAuthTypeChoiceToGlobalSpecType(f)
	f.CookieParams = m1.CookieParams
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAuthTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AuthTypeChoice.(type) {
	case nil:
		o.AuthTypeChoice = nil

	case *GetSpecType_OidcAuth:
		o.AuthTypeChoice = &GlobalSpecType_OidcAuth{OidcAuth: of.OidcAuth}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAuthTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AuthTypeChoice.(type) {
	case nil:
		r.AuthTypeChoice = nil

	case *GlobalSpecType_OidcAuth:
		r.AuthTypeChoice = &GetSpecType_OidcAuth{OidcAuth: of.OidcAuth}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAuthTypeChoiceFromGlobalSpecType(f)
	m.CookieParams = f.GetCookieParams()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAuthTypeChoiceToGlobalSpecType(f)
	f.CookieParams = m1.CookieParams
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAuthTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AuthTypeChoice.(type) {
	case nil:
		o.AuthTypeChoice = nil

	case *ReplaceSpecType_OidcAuth:
		o.AuthTypeChoice = &GlobalSpecType_OidcAuth{OidcAuth: of.OidcAuth}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAuthTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AuthTypeChoice.(type) {
	case nil:
		r.AuthTypeChoice = nil

	case *GlobalSpecType_OidcAuth:
		r.AuthTypeChoice = &ReplaceSpecType_OidcAuth{OidcAuth: of.OidcAuth}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetAuthTypeChoiceFromGlobalSpecType(f)
	m.CookieParams = f.GetCookieParams()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetAuthTypeChoiceToGlobalSpecType(f)
	f.CookieParams = m1.CookieParams
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

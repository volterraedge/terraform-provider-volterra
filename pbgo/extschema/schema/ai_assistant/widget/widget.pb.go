// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ai_assistant/widget/widget.proto

// widget
//
// x-displayName: "Widget"
// AI Assistant generic response for widget view

package widget

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	common "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ai_assistant/common"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Cell struct {
	// Value
	//
	// x-displayName: "value"
	// x-example: "site1"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Link
	//
	// x-displayName: "link"
	// Link for the field that will be presented to the user
	Link *common.Link `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *Cell) Reset()      { *m = Cell{} }
func (*Cell) ProtoMessage() {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_9068d9275f597f20, []int{0}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Cell) GetLink() *common.Link {
	if m != nil {
		return m.Link
	}
	return nil
}

// Row
//
// x-displayName: "Table Rows"
// Contains the value for each rows of table
type Row struct {
	// Values
	//
	// x-displayName: "Values"
	// x-example: "Site Name:"site-1"
	Cells []*Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *Row) Reset()      { *m = Row{} }
func (*Row) ProtoMessage() {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_9068d9275f597f20, []int{1}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type Table struct {
	// rows
	//
	// x-example: "Entries for each rows"
	// x-displayName: "Row"
	// List of table rows
	Rows []*Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	//Field Properties
	// x-displayName: "Field Properties"
	// Lists the name of the field & corresponding properties
	FieldProperties []*common.FieldProperties `protobuf:"bytes,2,rep,name=field_properties,json=fieldProperties,proto3" json:"field_properties,omitempty"`
	// widget_type
	//
	// x-example: "Table, Grid"
	// x-displayName: "widget_type"
	// Type of widget
	WidgetType common.WidgetType `protobuf:"varint,3,opt,name=widget_type,json=widgetType,proto3,enum=ves.io.schema.ai_assistant.common.WidgetType" json:"widget_type,omitempty"`
}

func (m *Table) Reset()      { *m = Table{} }
func (*Table) ProtoMessage() {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_9068d9275f597f20, []int{2}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *Table) GetFieldProperties() []*common.FieldProperties {
	if m != nil {
		return m.FieldProperties
	}
	return nil
}

func (m *Table) GetWidgetType() common.WidgetType {
	if m != nil {
		return m.WidgetType
	}
	return common.WIDGET_TYPE_NONE
}

type WidgetView struct {
	// table
	//
	// x-example: "Entries for each rows & properties of table"
	// x-displayName: "table"
	// List of table rows
	Item *Table `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *WidgetView) Reset()      { *m = WidgetView{} }
func (*WidgetView) ProtoMessage() {}
func (*WidgetView) Descriptor() ([]byte, []int) {
	return fileDescriptor_9068d9275f597f20, []int{3}
}
func (m *WidgetView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WidgetView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WidgetView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WidgetView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WidgetView.Merge(m, src)
}
func (m *WidgetView) XXX_Size() int {
	return m.Size()
}
func (m *WidgetView) XXX_DiscardUnknown() {
	xxx_messageInfo_WidgetView.DiscardUnknown(m)
}

var xxx_messageInfo_WidgetView proto.InternalMessageInfo

func (m *WidgetView) GetItem() *Table {
	if m != nil {
		return m.Item
	}
	return nil
}

// Widget Response
//
// x-displayName: "Widget Response"
// Widget response
type WidgetResponse struct {
	// summary
	//
	// x-displayName: "Summary"
	// x-example: "This is summary of widget response"
	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// Items
	//
	// x-displayName: "Widget View "
	// Response will have different types of widgets
	Items []*WidgetView `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// item_links
	//
	// x-displayName: "Links"
	// Links that will be presented to the user
	ItemLinks []*common.Link `protobuf:"bytes,4,rep,name=item_links,json=itemLinks,proto3" json:"item_links,omitempty"`
}

func (m *WidgetResponse) Reset()      { *m = WidgetResponse{} }
func (*WidgetResponse) ProtoMessage() {}
func (*WidgetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9068d9275f597f20, []int{4}
}
func (m *WidgetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WidgetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WidgetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WidgetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WidgetResponse.Merge(m, src)
}
func (m *WidgetResponse) XXX_Size() int {
	return m.Size()
}
func (m *WidgetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WidgetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WidgetResponse proto.InternalMessageInfo

func (m *WidgetResponse) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *WidgetResponse) GetItems() []*WidgetView {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WidgetResponse) GetItemLinks() []*common.Link {
	if m != nil {
		return m.ItemLinks
	}
	return nil
}

func init() {
	proto.RegisterType((*Cell)(nil), "ves.io.schema.ai_assistant.widget.Cell")
	proto.RegisterType((*Row)(nil), "ves.io.schema.ai_assistant.widget.Row")
	proto.RegisterType((*Table)(nil), "ves.io.schema.ai_assistant.widget.Table")
	proto.RegisterType((*WidgetView)(nil), "ves.io.schema.ai_assistant.widget.WidgetView")
	proto.RegisterType((*WidgetResponse)(nil), "ves.io.schema.ai_assistant.widget.WidgetResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/ai_assistant/widget/widget.proto", fileDescriptor_9068d9275f597f20)
}

var fileDescriptor_9068d9275f597f20 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0xe3, 0x26, 0xfd, 0xfd, 0x36, 0x4f, 0x1a, 0x95, 0xc5, 0x21, 0x4c, 0xc8, 0x2a, 0x3d,
	0x40, 0x0f, 0xc4, 0x91, 0xca, 0x8d, 0x3f, 0x97, 0x0d, 0xed, 0x30, 0x21, 0x34, 0x59, 0x13, 0x13,
	0x5c, 0xaa, 0xb4, 0x75, 0x33, 0xab, 0x49, 0x1c, 0xc5, 0x6e, 0x43, 0x6f, 0xbc, 0x01, 0x24, 0xc4,
	0xab, 0xe0, 0x35, 0x20, 0x21, 0x71, 0xe4, 0xd8, 0xe3, 0x8e, 0x34, 0xbd, 0xc0, 0x6d, 0xaf, 0x00,
	0xa1, 0xd8, 0xe9, 0x68, 0x91, 0x58, 0x7b, 0xea, 0xf3, 0xe8, 0xfb, 0xfd, 0x3c, 0x7e, 0xfa, 0xf8,
	0x71, 0x20, 0x99, 0x30, 0x49, 0xb8, 0xf0, 0x65, 0xff, 0x82, 0xc5, 0x81, 0x1f, 0xf0, 0x6e, 0x20,
	0x25, 0x97, 0x2a, 0x48, 0x94, 0x9f, 0xf3, 0x41, 0xc8, 0x96, 0x3f, 0x24, 0xcd, 0x84, 0x12, 0xe8,
	0x9e, 0xf1, 0x13, 0xe3, 0x27, 0xab, 0x7e, 0x62, 0x8c, 0x07, 0x5e, 0xc8, 0xd5, 0xc5, 0xb8, 0x47,
	0xfa, 0x22, 0xf6, 0x43, 0x11, 0x0a, 0x5f, 0x93, 0xbd, 0xf1, 0x50, 0x67, 0x3a, 0xd1, 0x91, 0xa9,
	0x78, 0xf0, 0xf0, 0x86, 0x0e, 0xfa, 0x22, 0x8e, 0x45, 0xe2, 0x47, 0x3c, 0x19, 0x55, 0x6e, 0x6f,
	0xb3, 0x5b, 0x4d, 0x53, 0x26, 0x2b, 0xfb, 0x9d, 0x75, 0xfb, 0xaa, 0x74, 0x77, 0x5d, 0x9a, 0x04,
	0x11, 0x1f, 0x04, 0x8a, 0x55, 0x6a, 0xf3, 0x2f, 0x95, 0xb3, 0xbc, 0x2b, 0x52, 0xc5, 0x45, 0x52,
	0xf1, 0xad, 0xd7, 0xd0, 0x39, 0x62, 0x51, 0x84, 0x6e, 0xc3, 0xfa, 0x24, 0x88, 0xc6, 0xcc, 0x05,
	0x4d, 0xd0, 0xde, 0xa5, 0x26, 0x41, 0x4f, 0xa0, 0x53, 0x76, 0xed, 0xd6, 0x9a, 0xa0, 0xbd, 0xd7,
	0x79, 0x40, 0x6e, 0x18, 0x9b, 0x69, 0x9b, 0xbc, 0xe0, 0xc9, 0x88, 0x6a, 0xa8, 0xf5, 0x1c, 0xda,
	0x54, 0xe4, 0xe8, 0x19, 0xac, 0xf7, 0x59, 0x14, 0x49, 0x17, 0x34, 0xed, 0x4d, 0x45, 0xaa, 0x4b,
	0x2a, 0x3b, 0xa2, 0x86, 0x6a, 0xfd, 0x02, 0xb0, 0x7e, 0x16, 0xf4, 0x22, 0x86, 0x1e, 0x43, 0x27,
	0x13, 0xf9, 0xb2, 0xce, 0xfd, 0x2d, 0xea, 0x50, 0x91, 0x53, 0xcd, 0x20, 0x0e, 0x1b, 0x43, 0xce,
	0xa2, 0x41, 0x37, 0xcd, 0x44, 0xca, 0x32, 0xc5, 0x99, 0x74, 0x6b, 0xba, 0x4e, 0x67, 0x8b, 0x3f,
	0x75, 0x5c, 0xa2, 0xa7, 0xd7, 0xe4, 0x21, 0xfc, 0xfc, 0xf3, 0xab, 0x5d, 0xff, 0x08, 0x6a, 0x2e,
	0xa0, 0xb7, 0x86, 0xeb, 0x22, 0x7a, 0x09, 0xf7, 0xcc, 0xf1, 0xdd, 0xf2, 0x9e, 0x5c, 0xbb, 0x09,
	0xda, 0xfb, 0x1d, 0x6f, 0x8b, 0x53, 0xce, 0x35, 0x75, 0x36, 0x4d, 0x19, 0x85, 0xf9, 0x75, 0xdc,
	0x3a, 0x85, 0xd0, 0x28, 0xaf, 0x38, 0xcb, 0xd1, 0x53, 0xe8, 0x70, 0xc5, 0x62, 0x7d, 0x4d, 0x7b,
	0x9d, 0xf6, 0x16, 0x43, 0xd0, 0xc3, 0xa3, 0x9a, 0x3a, 0x71, 0x76, 0x6a, 0x0d, 0xbb, 0xf5, 0x05,
	0xc0, 0x7d, 0x53, 0x92, 0x32, 0x99, 0x8a, 0x44, 0x32, 0xe4, 0xc2, 0xff, 0xe5, 0x38, 0x8e, 0x83,
	0x6c, 0x5a, 0x2d, 0xc0, 0x32, 0x45, 0x47, 0xb0, 0x5e, 0xa2, 0xcb, 0x71, 0x79, 0x5b, 0x9c, 0xf8,
	0xa7, 0x5d, 0x6a, 0x58, 0x74, 0x0c, 0x61, 0x19, 0x74, 0xcb, 0xbd, 0x90, 0xae, 0xb3, 0x79, 0x11,
	0x56, 0xb7, 0x69, 0xb7, 0x44, 0xcb, 0x48, 0x9e, 0x38, 0x3b, 0x76, 0xc3, 0x39, 0x7c, 0x0f, 0x66,
	0x73, 0x6c, 0x5d, 0xce, 0xb1, 0x75, 0x35, 0xc7, 0xe0, 0x5d, 0x81, 0xc1, 0xa7, 0x02, 0x83, 0x6f,
	0x05, 0x06, 0xb3, 0x02, 0x83, 0xef, 0x05, 0x06, 0x3f, 0x0a, 0x6c, 0x5d, 0x15, 0x18, 0x7c, 0x58,
	0x60, 0x6b, 0xb6, 0xc0, 0xd6, 0xe5, 0x02, 0x5b, 0x6f, 0xce, 0x43, 0x91, 0x8e, 0x42, 0x32, 0x11,
	0x91, 0x62, 0x59, 0x16, 0x90, 0xb1, 0xf4, 0x75, 0x30, 0x14, 0x59, 0xec, 0xa5, 0x99, 0x98, 0xf0,
	0x01, 0xcb, 0xbc, 0xa5, 0xec, 0xa7, 0xbd, 0x50, 0xf8, 0xec, 0xad, 0xaa, 0xde, 0xce, 0xbf, 0x3f,
	0x2d, 0xbd, 0xff, 0xf4, 0x53, 0x7a, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x40, 0x6d, 0x83, 0x7b,
	0x86, 0x04, 0x00, 0x00,
}

func (this *Cell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cell)
	if !ok {
		that2, ok := that.(Cell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	return true
}
func (this *Row) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Row)
	if !ok {
		that2, ok := that.(Row)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cells) != len(that1.Cells) {
		return false
	}
	for i := range this.Cells {
		if !this.Cells[i].Equal(that1.Cells[i]) {
			return false
		}
	}
	return true
}
func (this *Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table)
	if !ok {
		that2, ok := that.(Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rows) != len(that1.Rows) {
		return false
	}
	for i := range this.Rows {
		if !this.Rows[i].Equal(that1.Rows[i]) {
			return false
		}
	}
	if len(this.FieldProperties) != len(that1.FieldProperties) {
		return false
	}
	for i := range this.FieldProperties {
		if !this.FieldProperties[i].Equal(that1.FieldProperties[i]) {
			return false
		}
	}
	if this.WidgetType != that1.WidgetType {
		return false
	}
	return true
}
func (this *WidgetView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WidgetView)
	if !ok {
		that2, ok := that.(WidgetView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *WidgetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WidgetResponse)
	if !ok {
		that2, ok := that.(WidgetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.ItemLinks) != len(that1.ItemLinks) {
		return false
	}
	for i := range this.ItemLinks {
		if !this.ItemLinks[i].Equal(that1.ItemLinks[i]) {
			return false
		}
	}
	return true
}
func (this *Cell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&widget.Cell{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Row) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&widget.Row{")
	if this.Cells != nil {
		s = append(s, "Cells: "+fmt.Sprintf("%#v", this.Cells)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&widget.Table{")
	if this.Rows != nil {
		s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	}
	if this.FieldProperties != nil {
		s = append(s, "FieldProperties: "+fmt.Sprintf("%#v", this.FieldProperties)+",\n")
	}
	s = append(s, "WidgetType: "+fmt.Sprintf("%#v", this.WidgetType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WidgetView) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&widget.WidgetView{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WidgetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&widget.WidgetResponse{")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.ItemLinks != nil {
		s = append(s, "ItemLinks: "+fmt.Sprintf("%#v", this.ItemLinks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWidget(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWidget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintWidget(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWidget(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WidgetType != 0 {
		i = encodeVarintWidget(dAtA, i, uint64(m.WidgetType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FieldProperties) > 0 {
		for iNdEx := len(m.FieldProperties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FieldProperties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWidget(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWidget(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WidgetView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WidgetView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WidgetView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWidget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WidgetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WidgetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WidgetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemLinks) > 0 {
		for iNdEx := len(m.ItemLinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemLinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWidget(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWidget(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintWidget(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWidget(dAtA []byte, offset int, v uint64) int {
	offset -= sovWidget(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovWidget(uint64(l))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovWidget(uint64(l))
	}
	return n
}

func (m *Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovWidget(uint64(l))
		}
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovWidget(uint64(l))
		}
	}
	if len(m.FieldProperties) > 0 {
		for _, e := range m.FieldProperties {
			l = e.Size()
			n += 1 + l + sovWidget(uint64(l))
		}
	}
	if m.WidgetType != 0 {
		n += 1 + sovWidget(uint64(m.WidgetType))
	}
	return n
}

func (m *WidgetView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWidget(uint64(l))
	}
	return n
}

func (m *WidgetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovWidget(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWidget(uint64(l))
		}
	}
	if len(m.ItemLinks) > 0 {
		for _, e := range m.ItemLinks {
			l = e.Size()
			n += 1 + l + sovWidget(uint64(l))
		}
	}
	return n
}

func sovWidget(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWidget(x uint64) (n int) {
	return sovWidget(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Cell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cell{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Link:` + strings.Replace(fmt.Sprintf("%v", this.Link), "Link", "common.Link", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Row) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCells := "[]*Cell{"
	for _, f := range this.Cells {
		repeatedStringForCells += strings.Replace(f.String(), "Cell", "Cell", 1) + ","
	}
	repeatedStringForCells += "}"
	s := strings.Join([]string{`&Row{`,
		`Cells:` + repeatedStringForCells + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRows := "[]*Row{"
	for _, f := range this.Rows {
		repeatedStringForRows += strings.Replace(f.String(), "Row", "Row", 1) + ","
	}
	repeatedStringForRows += "}"
	repeatedStringForFieldProperties := "[]*FieldProperties{"
	for _, f := range this.FieldProperties {
		repeatedStringForFieldProperties += strings.Replace(fmt.Sprintf("%v", f), "FieldProperties", "common.FieldProperties", 1) + ","
	}
	repeatedStringForFieldProperties += "}"
	s := strings.Join([]string{`&Table{`,
		`Rows:` + repeatedStringForRows + `,`,
		`FieldProperties:` + repeatedStringForFieldProperties + `,`,
		`WidgetType:` + fmt.Sprintf("%v", this.WidgetType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WidgetView) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WidgetView{`,
		`Item:` + strings.Replace(this.Item.String(), "Table", "Table", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WidgetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*WidgetView{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "WidgetView", "WidgetView", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForItemLinks := "[]*Link{"
	for _, f := range this.ItemLinks {
		repeatedStringForItemLinks += strings.Replace(fmt.Sprintf("%v", f), "Link", "common.Link", 1) + ","
	}
	repeatedStringForItemLinks += "}"
	s := strings.Join([]string{`&WidgetResponse{`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`ItemLinks:` + repeatedStringForItemLinks + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWidget(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWidget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &common.Link{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWidget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWidget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWidget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWidget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldProperties = append(m.FieldProperties, &common.FieldProperties{})
			if err := m.FieldProperties[len(m.FieldProperties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WidgetType", wireType)
			}
			m.WidgetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WidgetType |= common.WidgetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWidget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WidgetView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWidget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WidgetView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WidgetView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Table{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWidget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WidgetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWidget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WidgetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WidgetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &WidgetView{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWidget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWidget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemLinks = append(m.ItemLinks, &common.Link{})
			if err := m.ItemLinks[len(m.ItemLinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWidget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWidget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWidget(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWidget
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWidget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWidget
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWidget
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWidget
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWidget        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWidget          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWidget = fmt.Errorf("proto: unexpected end of group")
)

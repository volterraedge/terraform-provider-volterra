// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ai_assistant

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create SahayaAPI GRPC Client satisfying server.CustomClient
type SahayaAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient SahayaAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *SahayaAPIGrpcClient) doRPCAIAssistantQuery(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &AIAssistantQueryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.ai_assistant.AIAssistantQueryRequest", yamlReq)
	}
	rsp, err := c.grpcClient.AIAssistantQuery(ctx, req, opts...)
	return rsp, err
}

func (c *SahayaAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewSahayaAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &SahayaAPIGrpcClient{
		conn:       cc,
		grpcClient: NewSahayaAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["AIAssistantQuery"] = ccl.doRPCAIAssistantQuery

	ccl.rpcFns = rpcFns

	return ccl
}

// Create SahayaAPI REST Client satisfying server.CustomClient
type SahayaAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *SahayaAPIRestClient) doRPCAIAssistantQuery(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &AIAssistantQueryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.ai_assistant.AIAssistantQueryRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("current_query", fmt.Sprintf("%v", req.CurrentQuery))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &AIAssistantQueryResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.ai_assistant.AIAssistantQueryResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *SahayaAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewSahayaAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &SahayaAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["AIAssistantQuery"] = ccl.doRPCAIAssistantQuery

	ccl.rpcFns = rpcFns

	return ccl
}

// Create sahayaAPIInprocClient

// INPROC Client (satisfying SahayaAPIClient interface)
type sahayaAPIInprocClient struct {
	SahayaAPIServer
}

func (c *sahayaAPIInprocClient) AIAssistantQuery(ctx context.Context, in *AIAssistantQueryRequest, opts ...grpc.CallOption) (*AIAssistantQueryResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.ai_assistant.SahayaAPI.AIAssistantQuery")
	return c.SahayaAPIServer.AIAssistantQuery(ctx, in)
}

func NewSahayaAPIInprocClient(svc svcfw.Service) SahayaAPIClient {
	return &sahayaAPIInprocClient{SahayaAPIServer: NewSahayaAPIServer(svc)}
}

// RegisterGwSahayaAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwSahayaAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterSahayaAPIHandlerClient(ctx, mux, NewSahayaAPIInprocClient(s))
}

// Create sahayaAPISrv

// SERVER (satisfying SahayaAPIServer interface)
type sahayaAPISrv struct {
	svc svcfw.Service
}

func (s *sahayaAPISrv) AIAssistantQuery(ctx context.Context, in *AIAssistantQueryRequest) (*AIAssistantQueryResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.ai_assistant.SahayaAPI")
	cah, ok := ah.(SahayaAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *SahayaAPIServer", ah)
	}

	var (
		rsp *AIAssistantQueryResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.ai_assistant.AIAssistantQueryRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'SahayaAPI.AIAssistantQuery' operation on 'ai_assistant'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.ai_assistant.SahayaAPI.AIAssistantQuery"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.AIAssistantQuery(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.ai_assistant.AIAssistantQueryResponse", rsp)...)

	return rsp, nil
}

func NewSahayaAPIServer(svc svcfw.Service) SahayaAPIServer {
	return &sahayaAPISrv{svc: svc}
}

var SahayaAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "AI Assistant APIs",
        "description": "Custom handler for ai assistant related microservice",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/query": {
            "post": {
                "summary": "AI Assistant Query",
                "description": "Enable service by returning service account details",
                "operationId": "ves.io.schema.ai_assistant.SahayaAPI.AIAssistantQuery",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ai_assistantAIAssistantQueryResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"system\"\nNamespace of the HTTP Load Balancer for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai_assistantAIAssistantQueryRequest"
                        }
                    }
                ],
                "tags": [
                    "SahayaAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-ai_assistant-sahayaapi-aiassistantquery"
                },
                "x-ves-proto-rpc": "ves.io.schema.ai_assistant.SahayaAPI.AIAssistantQuery"
            },
            "x-displayname": "SahayaAPI",
            "x-ves-proto-service": "ves.io.schema.ai_assistant.SahayaAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "ai_assistantAIAssistantQueryRequest": {
            "type": "object",
            "description": "AI Assistant Query Request",
            "title": "AI Assistant Query Request",
            "x-displayname": "AI Assistant Query Request",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.AIAssistantQueryRequest",
            "properties": {
                "current_query": {
                    "type": "string",
                    "description": " Current query will be in text format\n\nExample: - \"Explain security event 07e03bc6-81d4-4c86-a865-67b5763fe294\"-",
                    "title": "current_query",
                    "x-displayname": "Current query",
                    "x-ves-example": "Explain security event 07e03bc6-81d4-4c86-a865-67b5763fe294"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the HTTP Load Balancer for current request\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                }
            }
        },
        "ai_assistantAIAssistantQueryResponse": {
            "type": "object",
            "description": "AI Assistant Query Response",
            "title": "AI Assistant Query Response",
            "x-displayname": "AI Assistant Query Response",
            "x-ves-oneof-field-response_choice": "[\"explain_log\",\"gen_dashboard_filter\"]",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.AIAssistantQueryResponse",
            "properties": {
                "current_query": {
                    "type": "string",
                    "description": " Current query will be in text format\n\nExample: - \"Explain security event 07e03bc6-81d4-4c86-a865-67b5763fe294\"-",
                    "title": "current_query",
                    "x-displayname": "Current query",
                    "x-ves-example": "Explain security event 07e03bc6-81d4-4c86-a865-67b5763fe294"
                },
                "explain_log": {
                    "description": "Exclusive with [gen_dashboard_filter]\n Explain log response",
                    "title": "explain_log",
                    "$ref": "#/definitions/explain_log_recordExplainLogRecordResponse",
                    "x-displayname": "Explain log"
                },
                "gen_dashboard_filter": {
                    "description": "Exclusive with [explain_log]\n Generate dashboard filter response",
                    "title": "gen_dashboard_filter",
                    "$ref": "#/definitions/gen_dashboard_filterGenDashboardFilterResponse",
                    "x-displayname": "Generate dashboard filter"
                }
            }
        },
        "ai_assistantexplain_log_recordAction": {
            "type": "string",
            "description": "Action taken for the request\n\n - ALLOW: Allow\n\nThe request was allowed to pass\n - BLOCK: Block\n\nThe request was blocked",
            "title": "Action",
            "enum": [
                "ALLOW",
                "BLOCK"
            ],
            "default": "ALLOW",
            "x-displayname": "Action",
            "x-ves-proto-enum": "ves.io.schema.ai_assistant.explain_log_record.Action"
        },
        "commonDashboardLink": {
            "type": "object",
            "description": "Dashboard link will present common fields like type, namespace, object, dateFilter, logFilter",
            "title": "DashboardLink",
            "x-displayname": "Dashboard Link",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.common.DashboardLink",
            "properties": {
                "log_filters": {
                    "type": "array",
                    "description": " Logs filter",
                    "title": "log_filters",
                    "items": {
                        "$ref": "#/definitions/commonLogFilter"
                    },
                    "x-displayname": "Logs Filter"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace for current request\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "object_name": {
                    "type": "string",
                    "description": " Object name such as LB, VH\n\nExample: - \"ves-io-http-loadbalancer-prod-nginx\"-",
                    "title": "object_name",
                    "x-displayname": "Object name",
                    "x-ves-example": "ves-io-http-loadbalancer-prod-nginx"
                },
                "time_range": {
                    "type": "string",
                    "description": " Time range filter\n\nExample: - \"604800\"-",
                    "title": "time_range",
                    "x-displayname": "Time Range",
                    "x-ves-example": "604800"
                },
                "type": {
                    "description": " Type of the link to be presented.\n SECURITY_ANALYTICS_EVENTS --\u003e /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_analytics/events\n REQUESTS_EVENTS --\u003e /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_monitoring/request\n\nExample: - \"SECURITY_ANALYTICS_EVENTS\"-",
                    "title": "type",
                    "$ref": "#/definitions/commonDashboardLinkType",
                    "x-displayname": "Type",
                    "x-ves-example": "SECURITY_ANALYTICS_EVENTS"
                }
            }
        },
        "commonDashboardLinkType": {
            "type": "string",
            "description": "Link Type to be presented\n\n - SECURITY_ANALYTICS_EVENTS: SECURITY_ANALYTICS_EVENTS\n\nSecurity analytics dashboard: /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_analytics/events\n - REQUESTS_EVENTS: REQUESTS_EVENTS\n\nRequests dashboard: /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_monitoring/request",
            "title": "LinkType",
            "enum": [
                "SECURITY_ANALYTICS_EVENTS",
                "REQUESTS_EVENTS"
            ],
            "default": "SECURITY_ANALYTICS_EVENTS",
            "x-displayname": "Link Type",
            "x-ves-proto-enum": "ves.io.schema.ai_assistant.common.DashboardLinkType"
        },
        "commonFilterOperator": {
            "type": "string",
            "description": "Operator for query filter\n\n - IN: Filter Operator\n\nSpecifies that query result includes filter values\n - NOT_IN: Filter Operator\n\nSpecifies that query result excludes filter values",
            "title": "Filter Operator",
            "enum": [
                "IN",
                "NOT_IN"
            ],
            "default": "IN",
            "x-displayname": "Filter Operator",
            "x-ves-proto-enum": "ves.io.schema.ai_assistant.common.FilterOperator"
        },
        "commonGenericLink": {
            "type": "object",
            "description": "Generic link can have external link with full url",
            "title": "GenericLink",
            "x-displayname": "Generic Link",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.common.GenericLink",
            "properties": {
                "url": {
                    "type": "string",
                    "description": " Full url\n\nExample: - \"https://datatracker.ietf.org/doc/html/rfc3986\"-",
                    "title": "url",
                    "x-displayname": "URL",
                    "x-ves-example": "https://datatracker.ietf.org/doc/html/rfc3986"
                }
            }
        },
        "commonLink": {
            "type": "object",
            "description": "Link for a page",
            "title": "Link",
            "x-displayname": "Link",
            "x-ves-oneof-field-link_type": "[\"dashboard_link\",\"generic_link\"]",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.common.Link",
            "properties": {
                "dashboard_link": {
                    "description": "Exclusive with [generic_link]\n Dashboard link will present common dashboard fields like type, namespace, object, dateFilter, logFilter",
                    "title": "dashboard_link",
                    "$ref": "#/definitions/commonDashboardLink",
                    "x-displayname": "Dashboard Link"
                },
                "generic_link": {
                    "description": "Exclusive with [dashboard_link]\n Generic link can have external link with full url",
                    "title": "generic_link",
                    "$ref": "#/definitions/commonGenericLink",
                    "x-displayname": "Generic Link"
                },
                "key": {
                    "type": "string",
                    "description": " Key will present a placeholder in a text field to insert the link.\n For example: To view these events go to the ${{link:db_link}}.\n\nExample: - \"db_link\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "key",
                    "x-displayname": "Key",
                    "x-ves-example": "db_link",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "title": {
                    "type": "string",
                    "description": " Title for the link\n\nExample: - \"Security Analytics lb1\"-",
                    "title": "title",
                    "x-displayname": "Title",
                    "x-ves-example": "Security Analytics lb1"
                }
            }
        },
        "commonLogFilter": {
            "type": "object",
            "description": "Log filter for filter query",
            "title": "LogFilter",
            "x-displayname": "Log Filter",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.common.LogFilter",
            "properties": {
                "key": {
                    "type": "string",
                    "description": " Key to be presented in the filter\n\nExample: - \"attack_types.name\"-",
                    "title": "key",
                    "x-displayname": "Key",
                    "x-ves-example": "attack_types.name"
                },
                "op": {
                    "description": " Operator for query filter\n\nExample: - \"IN\"-",
                    "title": "op",
                    "$ref": "#/definitions/commonFilterOperator",
                    "x-displayname": "Operator",
                    "x-ves-example": "IN"
                },
                "values": {
                    "type": "array",
                    "description": " Values to be presented in the filter\n\nExample: - \"ATTACK_TYPE_CROSS_SITE_SCRIPTING\"-",
                    "title": "values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Values",
                    "x-ves-example": "ATTACK_TYPE_CROSS_SITE_SCRIPTING"
                }
            }
        },
        "explain_log_recordAccuracy": {
            "type": "string",
            "description": "Specifies accuracy of the signature\n\n - LOW_ACCURACY: Low\n\nSpecifies low accuracy of the signature\n - MEDIUM_ACCURACY: Medium\n\nSpecifies medium accuracy of the signature\n - HIGH_ACCURACY: High\n\nSpecifies high accuracy of the signature",
            "title": "Accuracy",
            "enum": [
                "LOW_ACCURACY",
                "MEDIUM_ACCURACY",
                "HIGH_ACCURACY"
            ],
            "default": "LOW_ACCURACY",
            "x-displayname": "Accuracy",
            "x-ves-proto-enum": "ves.io.schema.ai_assistant.explain_log_record.Accuracy"
        },
        "explain_log_recordBot": {
            "type": "object",
            "description": "Bot details",
            "title": "Bot",
            "x-displayname": "Bot",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.Bot",
            "properties": {
                "classification": {
                    "type": "string",
                    "description": " Bot classification\n\nExample: - \"suspicious\"-",
                    "title": "classification",
                    "x-displayname": "Classification",
                    "x-ves-example": "suspicious"
                },
                "name": {
                    "type": "string",
                    "description": " Bot name\n\nExample: - \"curl\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "curl"
                },
                "type": {
                    "type": "string",
                    "description": " Bot type\n\nExample: - \"HTTP Library\"-",
                    "title": "name",
                    "x-displayname": "Type",
                    "x-ves-example": "HTTP Library"
                }
            }
        },
        "explain_log_recordEnforcementMode": {
            "type": "string",
            "description": "Enforcement mode of WAF\n\n - MONITORING: Monitoring\n\nMonitoring mode of waf\n - BLOCKING: Blocking\n\nBlocking mode of waf",
            "title": "EnforcementMode",
            "enum": [
                "MONITORING",
                "BLOCKING"
            ],
            "default": "MONITORING",
            "x-displayname": "Enforcement Mode",
            "x-ves-proto-enum": "ves.io.schema.ai_assistant.explain_log_record.EnforcementMode"
        },
        "explain_log_recordExplainLogRecordResponse": {
            "type": "object",
            "description": "Explain log response",
            "title": "ExplainLogRecordResponse",
            "x-displayname": "Explain Log Record Response",
            "x-ves-oneof-field-details": "[\"svc_policy_event_details\",\"waf_event_details\"]",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.ExplainLogRecordResponse",
            "properties": {
                "actions": {
                    "type": "string",
                    "description": " Follow-up actions\n\nExample: - \"If you think that this is a false positive you can create exclusion rule..\"-",
                    "title": "actions",
                    "x-displayname": "Actions",
                    "x-ves-example": "If you think that this is a false positive you can create exclusion rule.."
                },
                "analysis": {
                    "type": "string",
                    "description": " Log analysis\n\nExample: - \"The request was blocked because Null in request violation was detected\"-",
                    "title": "analysis",
                    "x-displayname": "Analysis",
                    "x-ves-example": "The request was blocked because Null in request violation was detected"
                },
                "summary": {
                    "type": "string",
                    "description": " Log summary\n\nExample: - \"Request Id 12345 refers to a WAF security event for an HTTP request that was blocked\"-",
                    "title": "summary",
                    "x-displayname": "Summary",
                    "x-ves-example": "Request Id 12345 refers to a WAF security event for an HTTP request that was blocked"
                },
                "svc_policy_event_details": {
                    "description": "Exclusive with [waf_event_details]\n Service Policy event details",
                    "title": "SvcPolicyEventDetails",
                    "$ref": "#/definitions/explain_log_recordSvcPolicyEventDetails",
                    "x-displayname": "Service Policy event details"
                },
                "waf_event_details": {
                    "description": "Exclusive with [svc_policy_event_details]\n WAF event details",
                    "title": "WAFEventDetails",
                    "$ref": "#/definitions/explain_log_recordWAFEventDetails",
                    "x-displayname": "WAF event details"
                }
            }
        },
        "explain_log_recordIPReputation": {
            "type": "string",
            "description": "Specifies IP risk/trustworthiness\n\n - LOW_REPUTATION: Low\n\nSpecifies low IP risk/trustworthiness\n - HIGH_REPUTATION: High\n\nSpecifies high IP risk/trustworthiness",
            "title": "IPReputation",
            "enum": [
                "LOW_REPUTATION",
                "HIGH_REPUTATION"
            ],
            "default": "LOW_REPUTATION",
            "x-displayname": "IP Reputation",
            "x-ves-proto-enum": "ves.io.schema.ai_assistant.explain_log_record.IPReputation"
        },
        "explain_log_recordSignature": {
            "type": "object",
            "description": "Signature details",
            "title": "Signature",
            "x-displayname": "Signature",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.Signature",
            "properties": {
                "accuracy": {
                    "description": " Accuracy of the signature\n\nExample: - \"Medium\"-",
                    "title": "accuracy",
                    "$ref": "#/definitions/explain_log_recordAccuracy",
                    "x-displayname": "Accuracy",
                    "x-ves-example": "Medium"
                },
                "attack_type": {
                    "type": "string",
                    "description": " Attack type of the signature\n\nExample: - \"Command Execution\"-",
                    "title": "attack_type",
                    "x-displayname": "Attack Type",
                    "x-ves-example": "Command Execution"
                },
                "context": {
                    "type": "string",
                    "description": " Context of the signature\n\nExample: - \"parameter\"-",
                    "title": "context",
                    "x-displayname": "Context",
                    "x-ves-example": "parameter"
                },
                "id": {
                    "type": "string",
                    "description": " Signature ID\n\nExample: - \"200013569\"-",
                    "title": "id",
                    "x-displayname": "Signature ID",
                    "x-ves-example": "200013569"
                },
                "matching_info": {
                    "type": "string",
                    "description": " Matching info\n\nExample: - \"Matched 7 chars on offset 6 against valueToken\"-",
                    "title": "matching_info",
                    "x-displayname": "Matching Info",
                    "x-ves-example": "Matched 7 chars on offset 6 against value: Token"
                },
                "name": {
                    "type": "string",
                    "description": " Signature name\n\nExample: - \"shell command processor\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "shell command processor"
                }
            }
        },
        "explain_log_recordSvcPolicyEventDetails": {
            "type": "object",
            "description": "Service policy security events details",
            "title": "SvcPolicyEventDetails",
            "x-displayname": "Service Policy Event Details",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.SvcPolicyEventDetails",
            "properties": {
                "action": {
                    "description": " Event action\n\nExample: - \"Block\"-",
                    "title": "action",
                    "$ref": "#/definitions/ai_assistantexplain_log_recordAction",
                    "x-displayname": "Action",
                    "x-ves-example": "Block"
                },
                "ip_risk": {
                    "description": " IP risk\n\nExample: - \"HIGH\"-",
                    "title": "ip risk",
                    "$ref": "#/definitions/explain_log_recordIPReputation",
                    "x-displayname": "IP risk",
                    "x-ves-example": "HIGH"
                },
                "ip_threat_categories": {
                    "type": "array",
                    "description": " IP threat categories\n\nExample: - \"SPAM_SOURCES,PHISHING\"-",
                    "title": "ip threat categories",
                    "items": {
                        "$ref": "#/definitions/policyIPThreatCategory"
                    },
                    "x-displayname": "IP threat categories",
                    "x-ves-example": "SPAM_SOURCES,PHISHING"
                },
                "ip_trustworthiness": {
                    "description": " IP trustworthiness\n\nExample: - \"LOW\"-",
                    "title": "ip trustworthiness",
                    "$ref": "#/definitions/explain_log_recordIPReputation",
                    "x-displayname": "IP trustworthiness",
                    "x-ves-example": "LOW"
                },
                "policy": {
                    "type": "string",
                    "description": " Policy name\n\nExample: - \"policy-1\"-",
                    "title": "policy",
                    "x-displayname": "Policy",
                    "x-ves-example": "policy-1"
                },
                "policy_namespace": {
                    "type": "string",
                    "description": " Policy namespace\n\nExample: - \"data-path\"-",
                    "title": "policy namespace",
                    "x-displayname": "Policy namespace",
                    "x-ves-example": "data-path"
                },
                "policy_rule": {
                    "type": "string",
                    "description": " Policy rule name\n\nExample: - \"policy-rule-1\"-",
                    "title": "policy rule",
                    "x-displayname": "Policy rule",
                    "x-ves-example": "policy-rule-1"
                }
            }
        },
        "explain_log_recordThreatCampaign": {
            "type": "object",
            "description": "Threat campaign details",
            "title": "ThreatCampaign",
            "x-displayname": "Threat Campaign",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.ThreatCampaign",
            "properties": {
                "attack_type": {
                    "type": "string",
                    "description": " Attack type of threat campaign\n\nExample: - \"Command Execution\"-",
                    "title": "attack_type",
                    "x-displayname": "Attack Type",
                    "x-ves-example": "Command Execution"
                },
                "id": {
                    "type": "string",
                    "description": " ThreatCampaign ID\n\nExample: - \"cmpe1ab3d4feddb3c691bc68201d253be66\"-",
                    "title": "id",
                    "x-displayname": "ThreatCampaign ID",
                    "x-ves-example": "cmpe1ab3d4feddb3c691bc68201d253be66"
                },
                "name": {
                    "type": "string",
                    "description": " ThreatCampaign name\n\nExample: - \"Nette Framework Remote Code Execution - oshi\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Nette Framework Remote Code Execution - oshi"
                }
            }
        },
        "explain_log_recordViolation": {
            "type": "object",
            "description": "Violation details",
            "title": "Violation",
            "x-displayname": "Violation",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.Violation",
            "properties": {
                "attack_type": {
                    "type": "string",
                    "description": " Attack type of the violation\n\nExample: - \"Command Execution\"-",
                    "title": "attack_type",
                    "x-displayname": "Attack Type",
                    "x-ves-example": "Command Execution"
                },
                "context": {
                    "type": "string",
                    "description": " Context of the violation\n\nExample: - \"parameter\"-",
                    "title": "context",
                    "x-displayname": "Context",
                    "x-ves-example": "parameter"
                },
                "matching_info": {
                    "type": "string",
                    "description": " Matching info\n\nExample: - \"File extension was dat\"-",
                    "title": "matching_info",
                    "x-displayname": "Matching Info",
                    "x-ves-example": "File extension was dat"
                },
                "name": {
                    "type": "string",
                    "description": " Violation name\n\nExample: - \"Illegal filetype\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Illegal filetype"
                }
            }
        },
        "explain_log_recordWAFEventDetails": {
            "type": "object",
            "description": "WAF security events details",
            "title": "WAFEventDetails",
            "x-displayname": "WAF Event Details",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.explain_log_record.WAFEventDetails",
            "properties": {
                "action": {
                    "description": " Event action\n\nExample: - \"Block\"-",
                    "title": "action",
                    "$ref": "#/definitions/ai_assistantexplain_log_recordAction",
                    "x-displayname": "Action",
                    "x-ves-example": "Block"
                },
                "app_firewall": {
                    "type": "string",
                    "description": " App Firewall name\n\nExample: - \"app-firewall\"-",
                    "title": "app_firewall",
                    "x-displayname": "App Firewall",
                    "x-ves-example": "app-firewall"
                },
                "bot": {
                    "description": " Bot that were detected in the request",
                    "title": "bots",
                    "$ref": "#/definitions/explain_log_recordBot",
                    "x-displayname": "Bot"
                },
                "enforcement_mode": {
                    "description": " Enforcement mode\n\nExample: - \"Monitoring\"-",
                    "title": "enforcement_mode",
                    "$ref": "#/definitions/explain_log_recordEnforcementMode",
                    "x-displayname": "Enforcement Mode",
                    "x-ves-example": "Monitoring"
                },
                "signatures": {
                    "type": "array",
                    "description": " The signatures that were detected in the request",
                    "title": "signatures",
                    "items": {
                        "$ref": "#/definitions/explain_log_recordSignature"
                    },
                    "x-displayname": "Signatures"
                },
                "threat_campaigns": {
                    "type": "array",
                    "description": " Threat campaigns that were detected in the request",
                    "title": "threat_campaigns",
                    "items": {
                        "$ref": "#/definitions/explain_log_recordThreatCampaign"
                    },
                    "x-displayname": "Threat Campaign"
                },
                "violations": {
                    "type": "array",
                    "description": " The violations that were detected in the request",
                    "title": "violations",
                    "items": {
                        "$ref": "#/definitions/explain_log_recordViolation"
                    },
                    "x-displayname": "Violations"
                }
            }
        },
        "gen_dashboard_filterGenDashboardFilterResponse": {
            "type": "object",
            "description": "Generate dashboard filter response",
            "title": "GenDashboardFilterResponse",
            "x-displayname": "Generate Dashboard Filter",
            "x-ves-proto-message": "ves.io.schema.ai_assistant.gen_dashboard_filter.GenDashboardFilterResponse",
            "properties": {
                "actions": {
                    "type": "string",
                    "description": " Follow-up actions\n\nExample: - \"To view these events go to the ${{link:dashboard_link}} page\"-",
                    "title": "actions",
                    "x-displayname": "Actions",
                    "x-ves-example": "To view these events go to the ${{link:dashboard_link}} page"
                },
                "links": {
                    "type": "array",
                    "description": " Links that will be presented to the user",
                    "title": "links",
                    "items": {
                        "$ref": "#/definitions/commonLink"
                    },
                    "x-displayname": "Links"
                },
                "summary": {
                    "type": "string",
                    "description": " Events summary\n\nExample: - \"135 events matching your query were found\"-",
                    "title": "summary",
                    "x-displayname": "Summary",
                    "x-ves-example": "135 events matching your query were found"
                }
            }
        },
        "policyIPThreatCategory": {
            "type": "string",
            "description": "The IP threat categories to use when a policy based IP threat category is configured.\n\n - SPAM_SOURCES: SPAM_SOURCES\n\n - WINDOWS_EXPLOITS: WINDOWS_EXPLOITS\n\n - WEB_ATTACKS: WEB_ATTACKS\n\n - BOTNETS: BOTNETS\n\n - SCANNERS: SCANNERS\n\n - REPUTATION: REPUTATION\n\n - PHISHING: PHISHING\n\n - PROXY: PROXY\n\n - MOBILE_THREATS: MOBILE_THREATS\n\n - TOR_PROXY: TOR_PROXY\n\n - DENIAL_OF_SERVICE: DENIAL_OF_SERVICE\n\n - NETWORK: NETWORK\n",
            "title": "IP Threat Category",
            "enum": [
                "SPAM_SOURCES",
                "WINDOWS_EXPLOITS",
                "WEB_ATTACKS",
                "BOTNETS",
                "SCANNERS",
                "REPUTATION",
                "PHISHING",
                "PROXY",
                "MOBILE_THREATS",
                "TOR_PROXY",
                "DENIAL_OF_SERVICE",
                "NETWORK"
            ],
            "default": "SPAM_SOURCES",
            "x-displayname": "IP Threat Category",
            "x-ves-proto-enum": "ves.io.schema.policy.IPThreatCategory"
        }
    },
    "x-displayname": "AI Assistant APIs",
    "x-ves-proto-file": "ves.io/schema/ai_assistant/public_customapi.proto"
}`

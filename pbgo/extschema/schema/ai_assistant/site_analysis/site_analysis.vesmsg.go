// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package site_analysis

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_ai_assistant_common "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ai_assistant/common"
	ves_io_schema_ai_assistant_widget "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ai_assistant/widget"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *SiteAnalysisResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteAnalysisResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteAnalysisResponse) DeepCopy() *SiteAnalysisResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteAnalysisResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteAnalysisResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteAnalysisResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteAnalysisResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSiteAnalysisResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteAnalysisResponse) InternalLinksValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for internal_links")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_ai_assistant_common.Link, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_ai_assistant_common.LinkValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for internal_links")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_ai_assistant_common.Link)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_ai_assistant_common.Link, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated internal_links")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items internal_links")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSiteAnalysisResponse) ExternalLinksValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for external_links")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_ai_assistant_common.Link, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_ai_assistant_common.LinkValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for external_links")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_ai_assistant_common.Link)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_ai_assistant_common.Link, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated external_links")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items external_links")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSiteAnalysisResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteAnalysisResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteAnalysisResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["external_links"]; exists {
		vOpts := append(opts, db.WithValidateField("external_links"))
		if err := fv(ctx, m.GetExternalLinks(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internal_links"]; exists {
		vOpts := append(opts, db.WithValidateField("internal_links"))
		if err := fv(ctx, m.GetInternalLinks(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["table_view"]; exists {

		vOpts := append(opts, db.WithValidateField("table_view"))
		if err := fv(ctx, m.GetTableView(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteAnalysisResponseValidator = func() *ValidateSiteAnalysisResponse {
	v := &ValidateSiteAnalysisResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInternalLinks := v.InternalLinksValidationRuleHandler
	rulesInternalLinks := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
		"ves.io.schema.rules.string.max_len":  "6",
	}
	vFn, err = vrhInternalLinks(rulesInternalLinks)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SiteAnalysisResponse.internal_links: %s", err)
		panic(errMsg)
	}
	v.FldValidators["internal_links"] = vFn

	vrhExternalLinks := v.ExternalLinksValidationRuleHandler
	rulesExternalLinks := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
		"ves.io.schema.rules.string.max_len":  "6",
	}
	vFn, err = vrhExternalLinks(rulesExternalLinks)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SiteAnalysisResponse.external_links: %s", err)
		panic(errMsg)
	}
	v.FldValidators["external_links"] = vFn

	v.FldValidators["table_view"] = ves_io_schema_ai_assistant_widget.WidgetViewValidator().Validate

	return v
}()

func SiteAnalysisResponseValidator() db.Validator {
	return DefaultSiteAnalysisResponseValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ai_assistant/list/list.proto

// List
//
// x-displayName: "List"
// AI Assistant generic response for List view

package list

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	common "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ai_assistant/common"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	// Link
	//
	// x-displayName: "link"
	// Link for the field that will be presented to the user
	Link *common.Link `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *Item) Reset()      { *m = Item{} }
func (*Item) ProtoMessage() {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8cef847b4bfc679, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetLink() *common.Link {
	if m != nil {
		return m.Link
	}
	return nil
}

type List struct {
	// Title
	//
	// x-displayName: "Title"
	// x-example: "Cloud Sites"
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// item
	//
	// x-example: "Entries for each item"
	// x-displayName: "Item"
	// List of item
	Item []*Item `protobuf:"bytes,2,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *List) Reset()      { *m = List{} }
func (*List) ProtoMessage() {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8cef847b4bfc679, []int{1}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(m, src)
}
func (m *List) XXX_Size() int {
	return m.Size()
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *List) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

// List Response
//
// x-displayName: "List Response"
// List response
type ListResponse struct {
	// summary
	//
	// x-displayName: "Summary"
	// x-example: "This is summary of List response"
	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// Items
	//
	// x-displayName: "List View "
	// Response will have set of lists
	Items []*List `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// external links
	//
	// x-displayName: "External Links"
	// External doc links, that will be presented to the user
	ExternalLinks []*common.Link `protobuf:"bytes,3,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8cef847b4bfc679, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ListResponse) GetItems() []*List {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetExternalLinks() []*common.Link {
	if m != nil {
		return m.ExternalLinks
	}
	return nil
}

func init() {
	proto.RegisterType((*Item)(nil), "ves.io.schema.ai_assistant.list.Item")
	proto.RegisterType((*List)(nil), "ves.io.schema.ai_assistant.list.List")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.ai_assistant.list.ListResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/ai_assistant/list/list.proto", fileDescriptor_d8cef847b4bfc679)
}

var fileDescriptor_d8cef847b4bfc679 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x31, 0x6b, 0x14, 0x41,
	0x14, 0xc7, 0x77, 0xee, 0xf6, 0x22, 0x4e, 0xd4, 0x62, 0xb5, 0x58, 0x83, 0x8c, 0xc7, 0x81, 0x18,
	0xc4, 0x9b, 0x81, 0x58, 0x49, 0xba, 0x58, 0x09, 0xa9, 0x16, 0x44, 0xb0, 0x39, 0x66, 0x37, 0x93,
	0xcd, 0x70, 0x3b, 0xfb, 0x96, 0x99, 0xd9, 0x35, 0xe9, 0xec, 0x6d, 0xc4, 0x4f, 0xe1, 0x67, 0xb0,
	0xb2, 0x14, 0xab, 0x2b, 0x53, 0x7a, 0x7b, 0x8d, 0x76, 0xf9, 0x08, 0x32, 0xb3, 0x7b, 0x90, 0x08,
	0x49, 0xae, 0x39, 0xde, 0xe3, 0xff, 0xfb, 0xff, 0xdf, 0xbb, 0x37, 0x2c, 0x7e, 0xd1, 0x08, 0x43,
	0x25, 0x30, 0x93, 0x9d, 0x08, 0xc5, 0x19, 0x97, 0x33, 0x6e, 0x8c, 0x34, 0x96, 0x97, 0x96, 0x15,
	0xd2, 0x74, 0x3f, 0xb4, 0xd2, 0x60, 0x21, 0x7a, 0xda, 0xb1, 0xb4, 0x63, 0xe9, 0x65, 0x96, 0x3a,
	0x6c, 0x67, 0x9a, 0x4b, 0x7b, 0x52, 0xa7, 0x34, 0x03, 0xc5, 0x72, 0xc8, 0x81, 0x79, 0x5f, 0x5a,
	0x1f, 0xfb, 0xce, 0x37, 0xbe, 0xea, 0xf2, 0x76, 0x5e, 0xde, 0x30, 0x3b, 0x03, 0xa5, 0xa0, 0x64,
	0x85, 0x2c, 0xe7, 0x3d, 0x3d, 0xbd, 0x9d, 0xb6, 0x67, 0x95, 0x30, 0x3d, 0xfe, 0xf8, 0x2a, 0x7e,
	0x59, 0x7a, 0x72, 0x55, 0x6a, 0x78, 0x21, 0x8f, 0xb8, 0x15, 0xbd, 0x3a, 0xfe, 0x4f, 0x95, 0xe2,
	0xe3, 0x0c, 0x2a, 0x2b, 0xa1, 0xec, 0xfd, 0x93, 0x37, 0x38, 0x7c, 0x6b, 0x85, 0x8a, 0xf6, 0x71,
	0xe8, 0xf6, 0x8b, 0xd1, 0x18, 0xed, 0x6e, 0xef, 0x3d, 0xa7, 0x37, 0x9c, 0xa7, 0x5b, 0x90, 0x1e,
	0xca, 0x72, 0x9e, 0x78, 0xd3, 0xe4, 0x3d, 0x0e, 0x0f, 0xa5, 0xb1, 0xd1, 0x23, 0x3c, 0xb2, 0xd2,
	0x16, 0xc2, 0xa7, 0xdc, 0x4d, 0xba, 0x26, 0x7a, 0x8d, 0x43, 0x69, 0x85, 0x8a, 0x07, 0xe3, 0xe1,
	0xee, 0xf6, 0xde, 0x33, 0x7a, 0xcb, 0xe5, 0xa9, 0xdb, 0x27, 0xf1, 0x96, 0xc9, 0x2f, 0x84, 0xef,
	0xb9, 0xe4, 0x44, 0x98, 0x0a, 0x4a, 0x23, 0xa2, 0x18, 0xdf, 0x31, 0xb5, 0x52, 0x5c, 0x9f, 0xf5,
	0x33, 0xd6, 0x6d, 0xb4, 0x8f, 0x47, 0xce, 0x62, 0x36, 0x1e, 0xe3, 0x73, 0x3b, 0x4f, 0x94, 0xe1,
	0x07, 0xe2, 0xd4, 0x0a, 0x5d, 0xf2, 0x62, 0xe6, 0xfe, 0x91, 0x89, 0x87, 0x3e, 0x65, 0xd3, 0x3b,
	0x1c, 0x3c, 0xfc, 0xfe, 0xf7, 0xc7, 0x70, 0xf4, 0x15, 0x0d, 0x62, 0xe4, 0xaa, 0x50, 0x0f, 0xe2,
	0xad, 0xe4, 0xfe, 0x3a, 0xd3, 0x21, 0xe6, 0xe0, 0x33, 0x5a, 0x2c, 0x49, 0x70, 0xbe, 0x24, 0xc1,
	0xc5, 0x92, 0xa0, 0x4f, 0x2d, 0x41, 0xdf, 0x5a, 0x82, 0x7e, 0xb6, 0x04, 0x2d, 0x5a, 0x82, 0x7e,
	0xb7, 0x04, 0xfd, 0x69, 0x49, 0x70, 0xd1, 0x12, 0xf4, 0x65, 0x45, 0x82, 0xc5, 0x8a, 0x04, 0xe7,
	0x2b, 0x12, 0x7c, 0x78, 0x97, 0x43, 0x35, 0xcf, 0x69, 0x03, 0x85, 0x15, 0x5a, 0x73, 0x5a, 0x1b,
	0xe6, 0x8b, 0x63, 0xd0, 0x6a, 0x5a, 0x69, 0x68, 0xe4, 0x91, 0xd0, 0xd3, 0xb5, 0xcc, 0xaa, 0x34,
	0x07, 0x26, 0x4e, 0x6d, 0xff, 0xe4, 0xd7, 0x7d, 0x0b, 0xe9, 0x96, 0x7f, 0xff, 0x57, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0xe6, 0x71, 0x44, 0x35, 0x03, 0x00, 0x00,
}

func (this *Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	return true
}
func (this *List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*List)
	if !ok {
		that2, ok := that.(List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Item) != len(that1.Item) {
		return false
	}
	for i := range this.Item {
		if !this.Item[i].Equal(that1.Item[i]) {
			return false
		}
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.ExternalLinks) != len(that1.ExternalLinks) {
		return false
	}
	for i := range this.ExternalLinks {
		if !this.ExternalLinks[i].Equal(that1.ExternalLinks[i]) {
			return false
		}
	}
	return true
}
func (this *Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&list.Item{")
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&list.List{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&list.ListResponse{")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.ExternalLinks != nil {
		s = append(s, "ExternalLinks: "+fmt.Sprintf("%#v", this.ExternalLinks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringList(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintList(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintList(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalLinks) > 0 {
		for iNdEx := len(m.ExternalLinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExternalLinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintList(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintList(dAtA []byte, offset int, v uint64) int {
	offset -= sovList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovList(uint64(l))
	}
	return n
}

func (m *List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovList(uint64(l))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovList(uint64(l))
		}
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovList(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovList(uint64(l))
		}
	}
	if len(m.ExternalLinks) > 0 {
		for _, e := range m.ExternalLinks {
			l = e.Size()
			n += 1 + l + sovList(uint64(l))
		}
	}
	return n
}

func sovList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozList(x uint64) (n int) {
	return sovList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Item{`,
		`Link:` + strings.Replace(fmt.Sprintf("%v", this.Link), "Link", "common.Link", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *List) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItem := "[]*Item{"
	for _, f := range this.Item {
		repeatedStringForItem += strings.Replace(f.String(), "Item", "Item", 1) + ","
	}
	repeatedStringForItem += "}"
	s := strings.Join([]string{`&List{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Item:` + repeatedStringForItem + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*List{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "List", "List", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForExternalLinks := "[]*Link{"
	for _, f := range this.ExternalLinks {
		repeatedStringForExternalLinks += strings.Replace(fmt.Sprintf("%v", f), "Link", "common.Link", 1) + ","
	}
	repeatedStringForExternalLinks += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`ExternalLinks:` + repeatedStringForExternalLinks + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringList(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &common.Link{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &List{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalLinks = append(m.ExternalLinks, &common.Link{})
			if err := m.ExternalLinks[len(m.ExternalLinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupList = fmt.Errorf("proto: unexpected end of group")
)

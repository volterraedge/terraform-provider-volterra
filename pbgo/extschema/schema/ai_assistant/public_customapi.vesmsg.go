// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ai_assistant

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_ai_assistant_gen_dashboard_filter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ai_assistant/gen_dashboard_filter"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AIAssistantQueryRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AIAssistantQueryRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AIAssistantQueryRequest) DeepCopy() *AIAssistantQueryRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AIAssistantQueryRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AIAssistantQueryRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AIAssistantQueryRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AIAssistantQueryRequestValidator().Validate(ctx, m, opts...)
}

type ValidateAIAssistantQueryRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAIAssistantQueryRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AIAssistantQueryRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AIAssistantQueryRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["current_query"]; exists {

		vOpts := append(opts, db.WithValidateField("current_query"))
		if err := fv(ctx, m.GetCurrentQuery(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAIAssistantQueryRequestValidator = func() *ValidateAIAssistantQueryRequest {
	v := &ValidateAIAssistantQueryRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AIAssistantQueryRequestValidator() db.Validator {
	return DefaultAIAssistantQueryRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *AIAssistantQueryResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AIAssistantQueryResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AIAssistantQueryResponse) DeepCopy() *AIAssistantQueryResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AIAssistantQueryResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AIAssistantQueryResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AIAssistantQueryResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AIAssistantQueryResponseValidator().Validate(ctx, m, opts...)
}

type ValidateAIAssistantQueryResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAIAssistantQueryResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AIAssistantQueryResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AIAssistantQueryResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["current_query"]; exists {

		vOpts := append(opts, db.WithValidateField("current_query"))
		if err := fv(ctx, m.GetCurrentQuery(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetResponseChoice().(type) {
	case *AIAssistantQueryResponse_ExplainLog:
		if fv, exists := v.FldValidators["response_choice.explain_log"]; exists {
			val := m.GetResponseChoice().(*AIAssistantQueryResponse_ExplainLog).ExplainLog
			vOpts := append(opts,
				db.WithValidateField("response_choice"),
				db.WithValidateField("explain_log"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AIAssistantQueryResponse_GenDashboardFilter:
		if fv, exists := v.FldValidators["response_choice.gen_dashboard_filter"]; exists {
			val := m.GetResponseChoice().(*AIAssistantQueryResponse_GenDashboardFilter).GenDashboardFilter
			vOpts := append(opts,
				db.WithValidateField("response_choice"),
				db.WithValidateField("gen_dashboard_filter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAIAssistantQueryResponseValidator = func() *ValidateAIAssistantQueryResponse {
	v := &ValidateAIAssistantQueryResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["response_choice.gen_dashboard_filter"] = ves_io_schema_ai_assistant_gen_dashboard_filter.GenDashboardFilterResponseValidator().Validate

	return v
}()

func AIAssistantQueryResponseValidator() db.Validator {
	return DefaultAIAssistantQueryResponseValidator
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package explain_log_record

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *Bot) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Bot) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Bot) DeepCopy() *Bot {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Bot{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Bot) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Bot) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BotValidator().Validate(ctx, m, opts...)
}

type ValidateBot struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBot) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Bot)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Bot got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["classification"]; exists {

		vOpts := append(opts, db.WithValidateField("classification"))
		if err := fv(ctx, m.GetClassification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBotValidator = func() *ValidateBot {
	v := &ValidateBot{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func BotValidator() db.Validator {
	return DefaultBotValidator
}

// augmented methods on protoc/std generated struct

func (m *ExplainLogRecordResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExplainLogRecordResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ExplainLogRecordResponse) DeepCopy() *ExplainLogRecordResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExplainLogRecordResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExplainLogRecordResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExplainLogRecordResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExplainLogRecordResponseValidator().Validate(ctx, m, opts...)
}

type ValidateExplainLogRecordResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExplainLogRecordResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExplainLogRecordResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExplainLogRecordResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["actions"]; exists {

		vOpts := append(opts, db.WithValidateField("actions"))
		if err := fv(ctx, m.GetActions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["analysis"]; exists {

		vOpts := append(opts, db.WithValidateField("analysis"))
		if err := fv(ctx, m.GetAnalysis(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDetails().(type) {
	case *ExplainLogRecordResponse_WafEventDetails:
		if fv, exists := v.FldValidators["details.waf_event_details"]; exists {
			val := m.GetDetails().(*ExplainLogRecordResponse_WafEventDetails).WafEventDetails
			vOpts := append(opts,
				db.WithValidateField("details"),
				db.WithValidateField("waf_event_details"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ExplainLogRecordResponse_SvcPolicyEventDetails:
		if fv, exists := v.FldValidators["details.svc_policy_event_details"]; exists {
			val := m.GetDetails().(*ExplainLogRecordResponse_SvcPolicyEventDetails).SvcPolicyEventDetails
			vOpts := append(opts,
				db.WithValidateField("details"),
				db.WithValidateField("svc_policy_event_details"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExplainLogRecordResponseValidator = func() *ValidateExplainLogRecordResponse {
	v := &ValidateExplainLogRecordResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ExplainLogRecordResponseValidator() db.Validator {
	return DefaultExplainLogRecordResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *Signature) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Signature) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Signature) DeepCopy() *Signature {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Signature{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Signature) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Signature) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SignatureValidator().Validate(ctx, m, opts...)
}

type ValidateSignature struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSignature) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Signature)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Signature got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accuracy"]; exists {

		vOpts := append(opts, db.WithValidateField("accuracy"))
		if err := fv(ctx, m.GetAccuracy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["attack_type"]; exists {

		vOpts := append(opts, db.WithValidateField("attack_type"))
		if err := fv(ctx, m.GetAttackType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["context"]; exists {

		vOpts := append(opts, db.WithValidateField("context"))
		if err := fv(ctx, m.GetContext(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["matching_info"]; exists {

		vOpts := append(opts, db.WithValidateField("matching_info"))
		if err := fv(ctx, m.GetMatchingInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSignatureValidator = func() *ValidateSignature {
	v := &ValidateSignature{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SignatureValidator() db.Validator {
	return DefaultSignatureValidator
}

// augmented methods on protoc/std generated struct

func (m *SvcPolicyEventDetails) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SvcPolicyEventDetails) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SvcPolicyEventDetails) DeepCopy() *SvcPolicyEventDetails {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SvcPolicyEventDetails{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SvcPolicyEventDetails) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SvcPolicyEventDetails) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SvcPolicyEventDetailsValidator().Validate(ctx, m, opts...)
}

type ValidateSvcPolicyEventDetails struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSvcPolicyEventDetails) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SvcPolicyEventDetails)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SvcPolicyEventDetails got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_risk"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_risk"))
		if err := fv(ctx, m.GetIpRisk(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_threat_categories"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_threat_categories"))
		for idx, item := range m.GetIpThreatCategories() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ip_trustworthiness"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_trustworthiness"))
		if err := fv(ctx, m.GetIpTrustworthiness(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_namespace"))
		if err := fv(ctx, m.GetPolicyNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_rule"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_rule"))
		if err := fv(ctx, m.GetPolicyRule(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSvcPolicyEventDetailsValidator = func() *ValidateSvcPolicyEventDetails {
	v := &ValidateSvcPolicyEventDetails{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SvcPolicyEventDetailsValidator() db.Validator {
	return DefaultSvcPolicyEventDetailsValidator
}

// augmented methods on protoc/std generated struct

func (m *ThreatCampaign) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ThreatCampaign) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ThreatCampaign) DeepCopy() *ThreatCampaign {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ThreatCampaign{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ThreatCampaign) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ThreatCampaign) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ThreatCampaignValidator().Validate(ctx, m, opts...)
}

type ValidateThreatCampaign struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateThreatCampaign) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ThreatCampaign)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ThreatCampaign got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["attack_type"]; exists {

		vOpts := append(opts, db.WithValidateField("attack_type"))
		if err := fv(ctx, m.GetAttackType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultThreatCampaignValidator = func() *ValidateThreatCampaign {
	v := &ValidateThreatCampaign{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ThreatCampaignValidator() db.Validator {
	return DefaultThreatCampaignValidator
}

// augmented methods on protoc/std generated struct

func (m *Violation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Violation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Violation) DeepCopy() *Violation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Violation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Violation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Violation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ViolationValidator().Validate(ctx, m, opts...)
}

type ValidateViolation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateViolation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Violation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Violation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["attack_type"]; exists {

		vOpts := append(opts, db.WithValidateField("attack_type"))
		if err := fv(ctx, m.GetAttackType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["context"]; exists {

		vOpts := append(opts, db.WithValidateField("context"))
		if err := fv(ctx, m.GetContext(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["matching_info"]; exists {

		vOpts := append(opts, db.WithValidateField("matching_info"))
		if err := fv(ctx, m.GetMatchingInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultViolationValidator = func() *ValidateViolation {
	v := &ValidateViolation{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ViolationValidator() db.Validator {
	return DefaultViolationValidator
}

// augmented methods on protoc/std generated struct

func (m *WAFEventDetails) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WAFEventDetails) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WAFEventDetails) DeepCopy() *WAFEventDetails {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WAFEventDetails{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WAFEventDetails) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WAFEventDetails) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WAFEventDetailsValidator().Validate(ctx, m, opts...)
}

type ValidateWAFEventDetails struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWAFEventDetails) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WAFEventDetails)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WAFEventDetails got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_firewall"]; exists {

		vOpts := append(opts, db.WithValidateField("app_firewall"))
		if err := fv(ctx, m.GetAppFirewall(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bot"]; exists {

		vOpts := append(opts, db.WithValidateField("bot"))
		if err := fv(ctx, m.GetBot(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["enforcement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("enforcement_mode"))
		if err := fv(ctx, m.GetEnforcementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["signatures"]; exists {

		vOpts := append(opts, db.WithValidateField("signatures"))
		for idx, item := range m.GetSignatures() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["threat_campaigns"]; exists {

		vOpts := append(opts, db.WithValidateField("threat_campaigns"))
		for idx, item := range m.GetThreatCampaigns() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["violations"]; exists {

		vOpts := append(opts, db.WithValidateField("violations"))
		for idx, item := range m.GetViolations() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWAFEventDetailsValidator = func() *ValidateWAFEventDetails {
	v := &ValidateWAFEventDetails{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func WAFEventDetailsValidator() db.Validator {
	return DefaultWAFEventDetailsValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ai_assistant/explain_log_record/explain_log_record.proto

// Explain Log record
//
// x-displayName: "Explain Log Record"
// AI Assistant explain log record response

package explain_log_record

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Accuracy
//
// x-displayName: "Accuracy"
// Specifies accuracy of the signature
type Accuracy int32

const (
	// None
	//
	// x-displayName: "None"
	// No accuracy
	ACCURACY_NONE Accuracy = 0
	// Low
	//
	// x-displayName: "Low"
	// Specifies low accuracy of the signature
	ACCURACY_LOW Accuracy = 1
	// Medium
	//
	// x-displayName: "Medium"
	// Specifies medium accuracy of the signature
	ACCURACY_MEDIUM Accuracy = 2
	// High
	//
	// x-displayName: "High"
	// Specifies high accuracy of the signature
	ACCURACY_HIGH Accuracy = 3
)

var Accuracy_name = map[int32]string{
	0: "ACCURACY_NONE",
	1: "ACCURACY_LOW",
	2: "ACCURACY_MEDIUM",
	3: "ACCURACY_HIGH",
}

var Accuracy_value = map[string]int32{
	"ACCURACY_NONE":   0,
	"ACCURACY_LOW":    1,
	"ACCURACY_MEDIUM": 2,
	"ACCURACY_HIGH":   3,
}

func (Accuracy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{0}
}

// IPReputation
//
// x-displayName: "IP Reputation"
// Specifies IP risk/trustworthiness
type IPReputation int32

const (
	// None
	//
	// x-displayName: "None"
	// No IP reputation
	IP_REPUTATION_NONE IPReputation = 0
	// Low
	//
	// x-displayName: "Low"
	// Specifies low IP risk/trustworthiness
	IP_REPUTATION_LOW IPReputation = 1
	// High
	//
	// x-displayName: "High"
	// Specifies high IP risk/trustworthiness
	IP_REPUTATION_HIGH IPReputation = 2
)

var IPReputation_name = map[int32]string{
	0: "IP_REPUTATION_NONE",
	1: "IP_REPUTATION_LOW",
	2: "IP_REPUTATION_HIGH",
}

var IPReputation_value = map[string]int32{
	"IP_REPUTATION_NONE": 0,
	"IP_REPUTATION_LOW":  1,
	"IP_REPUTATION_HIGH": 2,
}

func (IPReputation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{1}
}

// EnforcementMode
//
// x-displayName: "Enforcement Mode"
// Enforcement mode of WAF
type EnforcementMode int32

const (
	// None
	//
	// x-displayName: "None"
	// No enforcement
	ENFORCEMENT_NONE EnforcementMode = 0
	// Monitoring
	//
	// x-displayName: "Monitoring"
	// Monitoring mode of waf
	MONITORING EnforcementMode = 1
	// Blocking
	//
	// x-displayName: "Blocking"
	// Blocking mode of waf
	BLOCKING EnforcementMode = 2
)

var EnforcementMode_name = map[int32]string{
	0: "ENFORCEMENT_NONE",
	1: "MONITORING",
	2: "BLOCKING",
}

var EnforcementMode_value = map[string]int32{
	"ENFORCEMENT_NONE": 0,
	"MONITORING":       1,
	"BLOCKING":         2,
}

func (EnforcementMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{2}
}

// Action
//
// x-displayName: "Action"
// Action taken for the request
type Action int32

const (
	// None
	//
	// x-displayName: "None"
	// No action
	ACTION_NONE Action = 0
	// Allow
	//
	// x-displayName: "Allow"
	// The request was allowed to pass
	ALLOW Action = 1
	// Block
	//
	// x-displayName: "Block"
	// The request was blocked
	BLOCK Action = 2
	// Redirect
	//
	// x-displayName: "Redirect"
	// The request was redirected
	REDIRECT Action = 3
)

var Action_name = map[int32]string{
	0: "ACTION_NONE",
	1: "ALLOW",
	2: "BLOCK",
	3: "REDIRECT",
}

var Action_value = map[string]int32{
	"ACTION_NONE": 0,
	"ALLOW":       1,
	"BLOCK":       2,
	"REDIRECT":    3,
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{3}
}

// ExplainLogRecordResponse
//
// x-displayName: "Explain Log Record Response"
// Explain log response
type ExplainLogRecordResponse struct {
	// summary
	//
	// x-example: "Request Id 12345 refers to a WAF security event for an HTTP request that was blocked"
	// x-displayName: "Summary"
	// Log summary
	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// analysis
	//
	// x-example: "The request was blocked because Null in request violation was detected"
	// x-displayName: "Analysis"
	// Log analysis
	Analysis string `protobuf:"bytes,2,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// actions
	//
	// x-example: "If you think that this is a false positive you can create exclusion rule.."
	// x-displayName: "Actions"
	// Follow-up actions
	Actions string `protobuf:"bytes,3,opt,name=actions,proto3" json:"actions,omitempty"`
	// details
	//
	// x-displayName: "Details"
	// Log details
	//
	// Types that are valid to be assigned to Details:
	//	*ExplainLogRecordResponse_WafEventDetails
	//	*ExplainLogRecordResponse_SvcPolicyEventDetails
	//	*ExplainLogRecordResponse_BotDefenseEventDetails
	//	*ExplainLogRecordResponse_RequestDetails
	Details isExplainLogRecordResponse_Details `protobuf_oneof:"details"`
}

func (m *ExplainLogRecordResponse) Reset()      { *m = ExplainLogRecordResponse{} }
func (*ExplainLogRecordResponse) ProtoMessage() {}
func (*ExplainLogRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{0}
}
func (m *ExplainLogRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExplainLogRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExplainLogRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExplainLogRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExplainLogRecordResponse.Merge(m, src)
}
func (m *ExplainLogRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExplainLogRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExplainLogRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExplainLogRecordResponse proto.InternalMessageInfo

type isExplainLogRecordResponse_Details interface {
	isExplainLogRecordResponse_Details()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExplainLogRecordResponse_WafEventDetails struct {
	WafEventDetails *WAFEventDetails `protobuf:"bytes,5,opt,name=waf_event_details,json=wafEventDetails,proto3,oneof" json:"waf_event_details,omitempty"`
}
type ExplainLogRecordResponse_SvcPolicyEventDetails struct {
	SvcPolicyEventDetails *SvcPolicyEventDetails `protobuf:"bytes,6,opt,name=svc_policy_event_details,json=svcPolicyEventDetails,proto3,oneof" json:"svc_policy_event_details,omitempty"`
}
type ExplainLogRecordResponse_BotDefenseEventDetails struct {
	BotDefenseEventDetails *BotDefenseEventDetails `protobuf:"bytes,7,opt,name=bot_defense_event_details,json=botDefenseEventDetails,proto3,oneof" json:"bot_defense_event_details,omitempty"`
}
type ExplainLogRecordResponse_RequestDetails struct {
	RequestDetails *RequestDetails `protobuf:"bytes,8,opt,name=request_details,json=requestDetails,proto3,oneof" json:"request_details,omitempty"`
}

func (*ExplainLogRecordResponse_WafEventDetails) isExplainLogRecordResponse_Details()        {}
func (*ExplainLogRecordResponse_SvcPolicyEventDetails) isExplainLogRecordResponse_Details()  {}
func (*ExplainLogRecordResponse_BotDefenseEventDetails) isExplainLogRecordResponse_Details() {}
func (*ExplainLogRecordResponse_RequestDetails) isExplainLogRecordResponse_Details()         {}

func (m *ExplainLogRecordResponse) GetDetails() isExplainLogRecordResponse_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ExplainLogRecordResponse) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ExplainLogRecordResponse) GetAnalysis() string {
	if m != nil {
		return m.Analysis
	}
	return ""
}

func (m *ExplainLogRecordResponse) GetActions() string {
	if m != nil {
		return m.Actions
	}
	return ""
}

func (m *ExplainLogRecordResponse) GetWafEventDetails() *WAFEventDetails {
	if x, ok := m.GetDetails().(*ExplainLogRecordResponse_WafEventDetails); ok {
		return x.WafEventDetails
	}
	return nil
}

func (m *ExplainLogRecordResponse) GetSvcPolicyEventDetails() *SvcPolicyEventDetails {
	if x, ok := m.GetDetails().(*ExplainLogRecordResponse_SvcPolicyEventDetails); ok {
		return x.SvcPolicyEventDetails
	}
	return nil
}

func (m *ExplainLogRecordResponse) GetBotDefenseEventDetails() *BotDefenseEventDetails {
	if x, ok := m.GetDetails().(*ExplainLogRecordResponse_BotDefenseEventDetails); ok {
		return x.BotDefenseEventDetails
	}
	return nil
}

func (m *ExplainLogRecordResponse) GetRequestDetails() *RequestDetails {
	if x, ok := m.GetDetails().(*ExplainLogRecordResponse_RequestDetails); ok {
		return x.RequestDetails
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExplainLogRecordResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExplainLogRecordResponse_WafEventDetails)(nil),
		(*ExplainLogRecordResponse_SvcPolicyEventDetails)(nil),
		(*ExplainLogRecordResponse_BotDefenseEventDetails)(nil),
		(*ExplainLogRecordResponse_RequestDetails)(nil),
	}
}

// WAFEventDetails
//
// x-displayName: "WAF Event Details"
// WAF security events details
type WAFEventDetails struct {
	// action
	//
	// x-example: "Block"
	// x-displayName: "Action"
	// Event action
	Action Action `protobuf:"varint,8,opt,name=action,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.Action" json:"action,omitempty"`
	// app_firewall
	//
	// x-example: "app-firewall"
	// x-displayName: "App Firewall"
	// App Firewall name
	AppFirewall string `protobuf:"bytes,2,opt,name=app_firewall,json=appFirewall,proto3" json:"app_firewall,omitempty"`
	// enforcement_mode
	//
	// x-example: "Monitoring"
	// x-displayName: "Enforcement Mode"
	// Enforcement mode
	EnforcementMode EnforcementMode `protobuf:"varint,3,opt,name=enforcement_mode,json=enforcementMode,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.EnforcementMode" json:"enforcement_mode,omitempty"`
	// signatures
	//
	// x-displayName: "Signatures"
	// The signatures that were detected in the request
	Signatures []*Signature `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// violations
	//
	// x-displayName: "Violations"
	// The violations that were detected in the request
	Violations []*Violation `protobuf:"bytes,5,rep,name=violations,proto3" json:"violations,omitempty"`
	// threat_campaigns
	//
	// x-displayName: "Threat Campaign"
	// Threat campaigns that were detected in the request
	ThreatCampaigns []*ThreatCampaign `protobuf:"bytes,9,rep,name=threat_campaigns,json=threatCampaigns,proto3" json:"threat_campaigns,omitempty"`
	// bots
	//
	// x-displayName: "Bot"
	// Bot that were detected in the request
	Bot *Bot `protobuf:"bytes,7,opt,name=bot,proto3" json:"bot,omitempty"`
}

func (m *WAFEventDetails) Reset()      { *m = WAFEventDetails{} }
func (*WAFEventDetails) ProtoMessage() {}
func (*WAFEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{1}
}
func (m *WAFEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WAFEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WAFEventDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WAFEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WAFEventDetails.Merge(m, src)
}
func (m *WAFEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *WAFEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_WAFEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_WAFEventDetails proto.InternalMessageInfo

func (m *WAFEventDetails) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ACTION_NONE
}

func (m *WAFEventDetails) GetAppFirewall() string {
	if m != nil {
		return m.AppFirewall
	}
	return ""
}

func (m *WAFEventDetails) GetEnforcementMode() EnforcementMode {
	if m != nil {
		return m.EnforcementMode
	}
	return ENFORCEMENT_NONE
}

func (m *WAFEventDetails) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *WAFEventDetails) GetViolations() []*Violation {
	if m != nil {
		return m.Violations
	}
	return nil
}

func (m *WAFEventDetails) GetThreatCampaigns() []*ThreatCampaign {
	if m != nil {
		return m.ThreatCampaigns
	}
	return nil
}

func (m *WAFEventDetails) GetBot() *Bot {
	if m != nil {
		return m.Bot
	}
	return nil
}

// SvcPolicyEventDetails
//
// x-displayName: "Service Policy Event Details"
// Service policy security events details
type SvcPolicyEventDetails struct {
	// action
	//
	// x-example: "Block"
	// x-displayName: "Action"
	// Event action
	Action Action `protobuf:"varint,8,opt,name=action,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.Action" json:"action,omitempty"`
	// policy
	//
	// x-example: "policy-1"
	// x-displayName: "Policy"
	// Policy name
	Policy string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// policy namespace
	//
	// x-example: "data-path"
	// x-displayName: "Policy namespace"
	// Policy namespace
	PolicyNamespace string `protobuf:"bytes,3,opt,name=policy_namespace,json=policyNamespace,proto3" json:"policy_namespace,omitempty"`
	// policy rule
	//
	// x-example: "policy-rule-1"
	// x-displayName: "Policy rule"
	// Policy rule name
	PolicyRule string `protobuf:"bytes,4,opt,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
	// ip threat categories
	//
	// x-example: "SPAM_SOURCES,PHISHING"
	// x-displayName: "IP threat categories"
	// IP threat categories
	IpThreatCategories []policy.IPThreatCategory `protobuf:"varint,9,rep,packed,name=ip_threat_categories,json=ipThreatCategories,proto3,enum=ves.io.schema.policy.IPThreatCategory" json:"ip_threat_categories,omitempty"`
	// ip trustworthiness
	//
	// x-example: "LOW"
	// x-displayName: "IP trustworthiness"
	// IP trustworthiness
	IpTrustworthiness IPReputation `protobuf:"varint,6,opt,name=ip_trustworthiness,json=ipTrustworthiness,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.IPReputation" json:"ip_trustworthiness,omitempty"`
	// ip risk
	//
	// x-example: "HIGH"
	// x-displayName: "IP risk"
	// IP risk
	IpRisk IPReputation `protobuf:"varint,7,opt,name=ip_risk,json=ipRisk,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.IPReputation" json:"ip_risk,omitempty"`
}

func (m *SvcPolicyEventDetails) Reset()      { *m = SvcPolicyEventDetails{} }
func (*SvcPolicyEventDetails) ProtoMessage() {}
func (*SvcPolicyEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{2}
}
func (m *SvcPolicyEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcPolicyEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcPolicyEventDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcPolicyEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcPolicyEventDetails.Merge(m, src)
}
func (m *SvcPolicyEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *SvcPolicyEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcPolicyEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_SvcPolicyEventDetails proto.InternalMessageInfo

func (m *SvcPolicyEventDetails) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ACTION_NONE
}

func (m *SvcPolicyEventDetails) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *SvcPolicyEventDetails) GetPolicyNamespace() string {
	if m != nil {
		return m.PolicyNamespace
	}
	return ""
}

func (m *SvcPolicyEventDetails) GetPolicyRule() string {
	if m != nil {
		return m.PolicyRule
	}
	return ""
}

func (m *SvcPolicyEventDetails) GetIpThreatCategories() []policy.IPThreatCategory {
	if m != nil {
		return m.IpThreatCategories
	}
	return nil
}

func (m *SvcPolicyEventDetails) GetIpTrustworthiness() IPReputation {
	if m != nil {
		return m.IpTrustworthiness
	}
	return IP_REPUTATION_NONE
}

func (m *SvcPolicyEventDetails) GetIpRisk() IPReputation {
	if m != nil {
		return m.IpRisk
	}
	return IP_REPUTATION_NONE
}

// BotDefenseEventDetails
//
// x-displayName: "Bot Defense Event Details"
// Bot Defense security events details
type BotDefenseEventDetails struct {
	// action
	//
	// x-example: "Block"
	// x-displayName: "Action"
	// Event action
	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.Action" json:"action,omitempty"`
	// automation_type
	//
	// x-example: "Token Missing"
	// x-displayName: "Automation type"
	// Bot automation type
	AutomationType string `protobuf:"bytes,2,opt,name=automation_type,json=automationType,proto3" json:"automation_type,omitempty"`
	// bot_type
	//
	// x-example: "MALICIOUS"
	// x-displayName: "Bot type"
	// Bot type
	BotType string `protobuf:"bytes,3,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`
	// request_path
	//
	// x-example: "/api/support/cases/case1"
	// x-displayName: "Request Path"
	// Request path
	RequestPath string `protobuf:"bytes,4,opt,name=request_path,json=requestPath,proto3" json:"request_path,omitempty"`
	// method
	//
	// x-example: "GET"
	// x-displayName: "Method"
	// Method of the request
	Method string `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *BotDefenseEventDetails) Reset()      { *m = BotDefenseEventDetails{} }
func (*BotDefenseEventDetails) ProtoMessage() {}
func (*BotDefenseEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{3}
}
func (m *BotDefenseEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotDefenseEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotDefenseEventDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotDefenseEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotDefenseEventDetails.Merge(m, src)
}
func (m *BotDefenseEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *BotDefenseEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_BotDefenseEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_BotDefenseEventDetails proto.InternalMessageInfo

func (m *BotDefenseEventDetails) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ACTION_NONE
}

func (m *BotDefenseEventDetails) GetAutomationType() string {
	if m != nil {
		return m.AutomationType
	}
	return ""
}

func (m *BotDefenseEventDetails) GetBotType() string {
	if m != nil {
		return m.BotType
	}
	return ""
}

func (m *BotDefenseEventDetails) GetRequestPath() string {
	if m != nil {
		return m.RequestPath
	}
	return ""
}

func (m *BotDefenseEventDetails) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// RequestDetails
//
// x-displayName: "Request Details"
// Request details
type RequestDetails struct {
	// rsp_code
	//
	// x-example: "200"
	// x-displayName: "Response Code"
	// rsp_code
	RspCode uint32 `protobuf:"varint,1,opt,name=rsp_code,json=rspCode,proto3" json:"rsp_code,omitempty"`
	// rsp_code_details
	//
	// x-example: "via upstream"
	// x-displayName: "Response Code Details"
	// rsp_code_details
	RspCodeDetails string `protobuf:"bytes,2,opt,name=rsp_code_details,json=rspCodeDetails,proto3" json:"rsp_code_details,omitempty"`
	// upstream_protocol_error_reason
	//
	// x-example: "headers_count_exceeds_limit"
	// x-displayName: "Upstream Protocol Error Reason"
	// upstream_protocol_error_reason
	UpstreamProtocolErrorReason string `protobuf:"bytes,3,opt,name=upstream_protocol_error_reason,json=upstreamProtocolErrorReason,proto3" json:"upstream_protocol_error_reason,omitempty"`
	// domain
	//
	// x-example: "example.com"
	// x-displayName: "domain"
	// domain
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *RequestDetails) Reset()      { *m = RequestDetails{} }
func (*RequestDetails) ProtoMessage() {}
func (*RequestDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{4}
}
func (m *RequestDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDetails.Merge(m, src)
}
func (m *RequestDetails) XXX_Size() int {
	return m.Size()
}
func (m *RequestDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDetails.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDetails proto.InternalMessageInfo

func (m *RequestDetails) GetRspCode() uint32 {
	if m != nil {
		return m.RspCode
	}
	return 0
}

func (m *RequestDetails) GetRspCodeDetails() string {
	if m != nil {
		return m.RspCodeDetails
	}
	return ""
}

func (m *RequestDetails) GetUpstreamProtocolErrorReason() string {
	if m != nil {
		return m.UpstreamProtocolErrorReason
	}
	return ""
}

func (m *RequestDetails) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

// Signature
//
// x-displayName: "Signature"
// Signature details
type Signature struct {
	// id
	//
	// x-example: "200013569"
	// x-displayName: "Signature ID"
	// Signature ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	//
	// x-example: "shell command processor"
	// x-displayName: "Name"
	// Signature name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// attack_type
	//
	// x-example: "Command Execution"
	// x-displayName: "Attack Type"
	// Attack type of the signature
	AttackType string `protobuf:"bytes,3,opt,name=attack_type,json=attackType,proto3" json:"attack_type,omitempty"`
	// accuracy
	//
	// x-example: "Medium"
	// x-displayName: "Accuracy"
	// Accuracy of the signature
	Accuracy Accuracy `protobuf:"varint,4,opt,name=accuracy,proto3,enum=ves.io.schema.ai_assistant.explain_log_record.Accuracy" json:"accuracy,omitempty"`
	// context
	//
	// x-example: "parameter"
	// x-displayName: "Context"
	// Context of the signature
	Context string `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// matching_info
	//
	// x-example: "Matched 7 chars on offset 6 against value: Token"
	// x-displayName: "Matching Info"
	// Matching info
	MatchingInfo string `protobuf:"bytes,6,opt,name=matching_info,json=matchingInfo,proto3" json:"matching_info,omitempty"`
	// state
	//
	// x-example: "Enabled"
	// x-displayName: "State"
	// State of the signature, can be enabled, suppressed and etc
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *Signature) Reset()      { *m = Signature{} }
func (*Signature) ProtoMessage() {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{5}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Signature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Signature) GetAttackType() string {
	if m != nil {
		return m.AttackType
	}
	return ""
}

func (m *Signature) GetAccuracy() Accuracy {
	if m != nil {
		return m.Accuracy
	}
	return ACCURACY_NONE
}

func (m *Signature) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *Signature) GetMatchingInfo() string {
	if m != nil {
		return m.MatchingInfo
	}
	return ""
}

func (m *Signature) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// Violation
//
// x-displayName: "Violation"
// Violation details
type Violation struct {
	// name
	//
	// x-example: "Illegal filetype"
	// x-displayName: "Name"
	// Violation name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// attack_type
	//
	// x-example: "Command Execution"
	// x-displayName: "Attack Type"
	// Attack type of the violation
	AttackType string `protobuf:"bytes,2,opt,name=attack_type,json=attackType,proto3" json:"attack_type,omitempty"`
	// context
	//
	// x-example: "parameter"
	// x-displayName: "Context"
	// Context of the violation
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	// matching_info
	//
	// x-example: "File extension was dat"
	// x-displayName: "Matching Info"
	// Matching info
	MatchingInfo string `protobuf:"bytes,4,opt,name=matching_info,json=matchingInfo,proto3" json:"matching_info,omitempty"`
	// state
	//
	// x-example: "Enabled"
	// x-displayName: "State"
	// State of the violation, can be enabled, suppressed and etc
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *Violation) Reset()      { *m = Violation{} }
func (*Violation) ProtoMessage() {}
func (*Violation) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{6}
}
func (m *Violation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Violation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Violation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Violation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Violation.Merge(m, src)
}
func (m *Violation) XXX_Size() int {
	return m.Size()
}
func (m *Violation) XXX_DiscardUnknown() {
	xxx_messageInfo_Violation.DiscardUnknown(m)
}

var xxx_messageInfo_Violation proto.InternalMessageInfo

func (m *Violation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Violation) GetAttackType() string {
	if m != nil {
		return m.AttackType
	}
	return ""
}

func (m *Violation) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *Violation) GetMatchingInfo() string {
	if m != nil {
		return m.MatchingInfo
	}
	return ""
}

func (m *Violation) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// ThreatCampaign
//
// x-displayName: "Threat Campaign"
// Threat campaign details
type ThreatCampaign struct {
	// id
	//
	// x-example: "cmpe1ab3d4feddb3c691bc68201d253be66"
	// x-displayName: "ThreatCampaign ID"
	// ThreatCampaign ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	//
	// x-example: "Nette Framework Remote Code Execution - oshi"
	// x-displayName: "Name"
	// ThreatCampaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// attack_type
	//
	// x-example: "Command Execution"
	// x-displayName: "Attack Type"
	// Attack type of threat campaign
	AttackType string `protobuf:"bytes,3,opt,name=attack_type,json=attackType,proto3" json:"attack_type,omitempty"`
}

func (m *ThreatCampaign) Reset()      { *m = ThreatCampaign{} }
func (*ThreatCampaign) ProtoMessage() {}
func (*ThreatCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{7}
}
func (m *ThreatCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreatCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreatCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreatCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreatCampaign.Merge(m, src)
}
func (m *ThreatCampaign) XXX_Size() int {
	return m.Size()
}
func (m *ThreatCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreatCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_ThreatCampaign proto.InternalMessageInfo

func (m *ThreatCampaign) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ThreatCampaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ThreatCampaign) GetAttackType() string {
	if m != nil {
		return m.AttackType
	}
	return ""
}

// Bot
//
// x-displayName: "Bot"
// Bot details
type Bot struct {
	// name
	//
	// x-example: "curl"
	// x-displayName: "Name"
	// Bot name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// name
	//
	// x-example: "HTTP Library"
	// x-displayName: "Type"
	// Bot type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// classification
	//
	// x-example: "suspicious"
	// x-displayName: "Classification"
	// Bot classification
	Classification string `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`
}

func (m *Bot) Reset()      { *m = Bot{} }
func (*Bot) ProtoMessage() {}
func (*Bot) Descriptor() ([]byte, []int) {
	return fileDescriptor_372bf5d0c54c0c62, []int{8}
}
func (m *Bot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bot.Merge(m, src)
}
func (m *Bot) XXX_Size() int {
	return m.Size()
}
func (m *Bot) XXX_DiscardUnknown() {
	xxx_messageInfo_Bot.DiscardUnknown(m)
}

var xxx_messageInfo_Bot proto.InternalMessageInfo

func (m *Bot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bot) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Bot) GetClassification() string {
	if m != nil {
		return m.Classification
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.ai_assistant.explain_log_record.Accuracy", Accuracy_name, Accuracy_value)
	proto.RegisterEnum("ves.io.schema.ai_assistant.explain_log_record.IPReputation", IPReputation_name, IPReputation_value)
	proto.RegisterEnum("ves.io.schema.ai_assistant.explain_log_record.EnforcementMode", EnforcementMode_name, EnforcementMode_value)
	proto.RegisterEnum("ves.io.schema.ai_assistant.explain_log_record.Action", Action_name, Action_value)
	proto.RegisterType((*ExplainLogRecordResponse)(nil), "ves.io.schema.ai_assistant.explain_log_record.ExplainLogRecordResponse")
	proto.RegisterType((*WAFEventDetails)(nil), "ves.io.schema.ai_assistant.explain_log_record.WAFEventDetails")
	proto.RegisterType((*SvcPolicyEventDetails)(nil), "ves.io.schema.ai_assistant.explain_log_record.SvcPolicyEventDetails")
	proto.RegisterType((*BotDefenseEventDetails)(nil), "ves.io.schema.ai_assistant.explain_log_record.BotDefenseEventDetails")
	proto.RegisterType((*RequestDetails)(nil), "ves.io.schema.ai_assistant.explain_log_record.RequestDetails")
	proto.RegisterType((*Signature)(nil), "ves.io.schema.ai_assistant.explain_log_record.Signature")
	proto.RegisterType((*Violation)(nil), "ves.io.schema.ai_assistant.explain_log_record.Violation")
	proto.RegisterType((*ThreatCampaign)(nil), "ves.io.schema.ai_assistant.explain_log_record.ThreatCampaign")
	proto.RegisterType((*Bot)(nil), "ves.io.schema.ai_assistant.explain_log_record.Bot")
}

func init() {
	proto.RegisterFile("ves.io/schema/ai_assistant/explain_log_record/explain_log_record.proto", fileDescriptor_372bf5d0c54c0c62)
}

var fileDescriptor_372bf5d0c54c0c62 = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xfa, 0x57, 0xec, 0x97, 0xd4, 0xde, 0xcc, 0xb7, 0x8d, 0xdc, 0xf6, 0x2b, 0x93, 0x1a,
	0xa9, 0x84, 0x48, 0xb1, 0xa5, 0x20, 0x04, 0x12, 0x2a, 0x52, 0xe2, 0x38, 0xad, 0x4b, 0xe2, 0x44,
	0x5b, 0x87, 0x02, 0x97, 0xd5, 0x78, 0x3d, 0xb6, 0x87, 0xec, 0xee, 0x2c, 0x33, 0x63, 0xa7, 0x39,
	0x81, 0xf8, 0x0b, 0xb8, 0x70, 0xe0, 0x3f, 0xe0, 0xcc, 0x95, 0x7f, 0x80, 0x63, 0x8e, 0x3d, 0x01,
	0x4d, 0x25, 0xc4, 0xb1, 0xe2, 0xc8, 0x09, 0xed, 0xec, 0xac, 0x63, 0xbb, 0xe6, 0x87, 0xa1, 0xb7,
	0x7d, 0x6f, 0xde, 0xfb, 0xbc, 0x9f, 0xf3, 0xd9, 0x5d, 0xd8, 0x1f, 0x11, 0x51, 0xa5, 0xac, 0x26,
	0x9c, 0x01, 0xf1, 0x70, 0x0d, 0x53, 0x1b, 0x0b, 0x41, 0x85, 0xc4, 0xbe, 0xac, 0x91, 0x27, 0x81,
	0x8b, 0xa9, 0x6f, 0xbb, 0xac, 0x6f, 0x73, 0xe2, 0x30, 0xde, 0x9d, 0xa3, 0xaa, 0x06, 0x9c, 0x49,
	0x86, 0xb6, 0x22, 0x9c, 0x6a, 0x84, 0x53, 0x9d, 0xc4, 0xa9, 0xbe, 0xec, 0x74, 0x6b, 0xab, 0x4f,
	0xe5, 0x60, 0xd8, 0xa9, 0x3a, 0xcc, 0xab, 0xf5, 0x59, 0x9f, 0xd5, 0x14, 0x4a, 0x67, 0xd8, 0x53,
	0x92, 0x12, 0xd4, 0x53, 0x84, 0x7e, 0xeb, 0xf6, 0x74, 0x96, 0x2c, 0x90, 0x94, 0xf9, 0x42, 0x1f,
	0xae, 0x4f, 0x1f, 0x06, 0xcc, 0xa5, 0xce, 0x79, 0x4d, 0x9e, 0x07, 0x24, 0xb6, 0xf8, 0xff, 0xb4,
	0xc5, 0x08, 0xbb, 0xb4, 0x8b, 0x25, 0x99, 0xef, 0x3f, 0xa2, 0xe4, 0xcc, 0x9e, 0x8a, 0x50, 0xf9,
	0x29, 0x0d, 0xa5, 0x46, 0x54, 0xc4, 0x01, 0xeb, 0x5b, 0xaa, 0x04, 0x8b, 0x88, 0x80, 0xf9, 0x82,
	0xa0, 0x12, 0x2c, 0x89, 0xa1, 0xe7, 0x61, 0x7e, 0x5e, 0x32, 0xd6, 0x8d, 0x8d, 0xbc, 0x15, 0x8b,
	0xe8, 0x16, 0xe4, 0xb0, 0x8f, 0xdd, 0x73, 0x41, 0x45, 0x29, 0xa9, 0x8e, 0xc6, 0x72, 0xe8, 0x85,
	0x1d, 0x15, 0xa3, 0x94, 0x8a, 0xbc, 0xb4, 0x88, 0x5c, 0x58, 0x3d, 0xc3, 0x3d, 0x9b, 0x8c, 0x88,
	0x2f, 0xed, 0x2e, 0x91, 0x98, 0xba, 0xa2, 0x94, 0x59, 0x37, 0x36, 0x96, 0xb7, 0xdf, 0xaf, 0x2e,
	0xd4, 0xe5, 0xea, 0xe3, 0x9d, 0xfd, 0x46, 0x08, 0xb3, 0x17, 0xa1, 0x3c, 0x48, 0x58, 0xc5, 0x33,
	0xdc, 0x9b, 0x54, 0xa1, 0xcf, 0xa1, 0x24, 0x46, 0x8e, 0x1d, 0x35, 0x6d, 0x26, 0x68, 0x56, 0x05,
	0xdd, 0x5b, 0x30, 0xe8, 0xa3, 0x91, 0x73, 0xac, 0xd0, 0x66, 0x42, 0xdf, 0x10, 0xf3, 0x0e, 0xd0,
	0x97, 0x06, 0xdc, 0xec, 0xb0, 0x30, 0x68, 0x8f, 0xf8, 0x82, 0xcc, 0xa4, 0xb0, 0xa4, 0x52, 0x68,
	0x2c, 0x98, 0xc2, 0x2e, 0x93, 0x7b, 0x11, 0xdc, 0x4c, 0x0e, 0x6b, 0x9d, 0xb9, 0x27, 0x68, 0x00,
	0x45, 0x4e, 0x3e, 0x1b, 0x12, 0x71, 0x15, 0x39, 0xa7, 0x22, 0xdf, 0x5b, 0x30, 0xb2, 0x15, 0xa1,
	0x5c, 0x45, 0x2c, 0xf0, 0x29, 0xcd, 0x6e, 0x11, 0x96, 0x74, 0x04, 0x94, 0xbe, 0xf8, 0xde, 0x48,
	0x3f, 0x4c, 0xe7, 0xd2, 0x66, 0xa6, 0xf2, 0x63, 0x1a, 0x8a, 0x33, 0xd3, 0x42, 0x87, 0x90, 0x8d,
	0x76, 0x42, 0xe5, 0x52, 0xd8, 0x7e, 0x7b, 0xc1, 0x5c, 0x76, 0x94, 0xb3, 0xa5, 0x41, 0xd0, 0x1d,
	0x58, 0xc1, 0x41, 0x60, 0xf7, 0x28, 0x27, 0x67, 0xd8, 0x75, 0xf5, 0x46, 0x2e, 0xe3, 0x20, 0xd8,
	0xd7, 0x2a, 0x44, 0xc1, 0x24, 0x7e, 0x8f, 0x71, 0x87, 0x78, 0xe1, 0x10, 0x3c, 0xd6, 0x25, 0x6a,
	0x3b, 0x0b, 0x0b, 0x6f, 0x5e, 0xe3, 0x0a, 0xe6, 0x90, 0x75, 0x89, 0x55, 0x24, 0xd3, 0x0a, 0xf4,
	0x11, 0x80, 0xa0, 0x7d, 0x1f, 0xcb, 0x21, 0x27, 0xa2, 0x94, 0x5e, 0x4f, 0x6d, 0x2c, 0x6f, 0xbf,
	0xbb, 0xe8, 0xa6, 0xc5, 0x00, 0xd6, 0x04, 0x56, 0x88, 0x3c, 0xa2, 0xcc, 0xc5, 0xd1, 0xe5, 0xca,
	0xfc, 0x2b, 0xe4, 0x0f, 0x63, 0x00, 0x6b, 0x02, 0x0b, 0x0d, 0xc0, 0x94, 0x03, 0x4e, 0xb0, 0xb4,
	0x1d, 0xec, 0x05, 0x98, 0xf6, 0x7d, 0x51, 0xca, 0x2b, 0xfc, 0x45, 0xd7, 0xa4, 0xad, 0x60, 0xea,
	0x1a, 0xc5, 0x2a, 0xca, 0x29, 0x59, 0xa0, 0x3d, 0x48, 0x75, 0x98, 0xd4, 0xdb, 0xbf, 0xbd, 0xf8,
	0xf6, 0x5b, 0xa1, 0xfb, 0xc3, 0x74, 0xce, 0x30, 0x93, 0x0f, 0xd3, 0xb9, 0xac, 0xb9, 0x54, 0xf9,
	0x2d, 0x05, 0x37, 0xe6, 0xde, 0xcc, 0x57, 0xbd, 0x66, 0x6b, 0x90, 0x8d, 0xc8, 0x44, 0x2f, 0x98,
	0x96, 0xd0, 0x9b, 0x60, 0x6a, 0x92, 0xf1, 0xb1, 0x47, 0x44, 0x80, 0x1d, 0xa2, 0x99, 0xaf, 0x18,
	0xe9, 0x5b, 0xb1, 0x1a, 0xbd, 0x06, 0xcb, 0xda, 0x94, 0x0f, 0x5d, 0x52, 0x4a, 0x2b, 0x2b, 0x88,
	0x54, 0xd6, 0xd0, 0x0d, 0x97, 0xe7, 0x3a, 0x0d, 0xec, 0xf1, 0x2c, 0x24, 0xe9, 0x33, 0x4e, 0x49,
	0x34, 0x8c, 0xc2, 0xf6, 0xdd, 0x99, 0x02, 0x22, 0xc7, 0x6a, 0xf3, 0x38, 0xee, 0xba, 0xb2, 0x3f,
	0xb7, 0x10, 0x0d, 0xa6, 0x34, 0x94, 0x08, 0xf4, 0x29, 0xa0, 0x10, 0x99, 0x0f, 0x85, 0x3c, 0x63,
	0x5c, 0x0e, 0xa8, 0x4f, 0x44, 0x44, 0x84, 0x85, 0xed, 0xf7, 0x16, 0x6c, 0x4c, 0xf3, 0xd8, 0x22,
	0xc1, 0x50, 0x46, 0x7b, 0xb4, 0x4a, 0x83, 0xf6, 0x34, 0x2a, 0x6a, 0xc3, 0x12, 0x0d, 0x6c, 0x4e,
	0xc5, 0xa9, 0x1a, 0xf4, 0x7f, 0x0c, 0x90, 0xa5, 0x81, 0x45, 0xc5, 0xe9, 0x78, 0xe8, 0x19, 0x33,
	0x5b, 0xf9, 0xc5, 0x80, 0xb5, 0xf9, 0x5c, 0x38, 0x31, 0x75, 0xe3, 0x55, 0x4c, 0xfd, 0x0d, 0x28,
	0xe2, 0xa1, 0x64, 0x9e, 0xca, 0xc5, 0x0e, 0xdf, 0xbd, 0x7a, 0xfc, 0x85, 0x2b, 0x75, 0xfb, 0x3c,
	0x20, 0xe8, 0x26, 0xe4, 0x42, 0xb6, 0x57, 0x16, 0xfa, 0xc5, 0xd7, 0x61, 0x52, 0x1d, 0xdd, 0x81,
	0x95, 0x98, 0x84, 0x03, 0x2c, 0x07, 0x7a, 0xee, 0xcb, 0x5a, 0x77, 0x8c, 0xe5, 0x20, 0x5c, 0x2e,
	0x8f, 0xc8, 0x01, 0xeb, 0xaa, 0x17, 0x62, 0xde, 0xd2, 0x52, 0xe5, 0x3b, 0x03, 0x0a, 0xd3, 0xd4,
	0x1b, 0x06, 0xe2, 0x22, 0xb0, 0x9d, 0x90, 0xc3, 0xc2, 0x12, 0xaf, 0x59, 0x4b, 0x5c, 0x04, 0xf5,
	0x90, 0x7b, 0x36, 0xc0, 0x8c, 0x8f, 0xc6, 0x74, 0xaf, 0xb3, 0xd5, 0x26, 0x31, 0x48, 0x1d, 0xca,
	0xc3, 0x40, 0x48, 0x4e, 0xb0, 0x67, 0xab, 0x4f, 0x01, 0x87, 0xb9, 0x36, 0xe1, 0x9c, 0x71, 0x9b,
	0x13, 0x2c, 0x98, 0xaf, 0x6b, 0xb8, 0x1d, 0x5b, 0x1d, 0x6b, 0xa3, 0x46, 0x68, 0x63, 0x29, 0x93,
	0x30, 0xe9, 0x2e, 0xf3, 0x30, 0xf5, 0x75, 0x45, 0x5a, 0xaa, 0xfc, 0x6e, 0x40, 0x7e, 0x4c, 0x61,
	0xa8, 0x00, 0x49, 0xda, 0xd5, 0x5f, 0x10, 0x49, 0xda, 0x45, 0x08, 0xd2, 0xe1, 0x45, 0xd1, 0x89,
	0xa9, 0xe7, 0xf0, 0x62, 0x60, 0x29, 0xb1, 0x73, 0x3a, 0xd9, 0x3f, 0x88, 0x54, 0xaa, 0x85, 0x8f,
	0x20, 0x87, 0x1d, 0x67, 0xc8, 0xb1, 0x73, 0xae, 0x82, 0x15, 0xb6, 0xdf, 0x59, 0x78, 0xae, 0x91,
	0xbb, 0x35, 0x06, 0x0a, 0x3f, 0x55, 0x1c, 0xe6, 0x4b, 0xf2, 0x44, 0xea, 0xae, 0xc7, 0x22, 0x7a,
	0x1d, 0xae, 0x79, 0x58, 0x3a, 0x03, 0xea, 0xf7, 0x6d, 0xea, 0xf7, 0x98, 0xba, 0x28, 0x79, 0x6b,
	0x25, 0x56, 0x36, 0xfd, 0x1e, 0x43, 0xd7, 0x21, 0x23, 0x24, 0x96, 0x44, 0x2d, 0x79, 0xde, 0x8a,
	0x84, 0xca, 0xd7, 0x06, 0xe4, 0xc7, 0x2c, 0x3b, 0x2e, 0xd6, 0xf8, 0xf3, 0x62, 0x93, 0x2f, 0x15,
	0x3b, 0x91, 0x57, 0xea, 0x6f, 0xf2, 0x4a, 0xff, 0x55, 0x5e, 0x99, 0xc9, 0xbc, 0x4e, 0xa0, 0x30,
	0x4d, 0xce, 0xaf, 0x64, 0x30, 0x95, 0x13, 0x48, 0xed, 0x32, 0x39, 0xb7, 0x4e, 0x04, 0xe9, 0x89,
	0x02, 0xd5, 0x33, 0xba, 0x0b, 0x05, 0xc7, 0x0d, 0xe7, 0xd4, 0xa3, 0x8e, 0xea, 0x90, 0x86, 0x9c,
	0xd1, 0x6e, 0x3e, 0x86, 0x5c, 0x3c, 0x30, 0xb4, 0x0a, 0xd7, 0x76, 0xea, 0xf5, 0x13, 0x6b, 0xa7,
	0xfe, 0xb1, 0xdd, 0x3a, 0x6a, 0x35, 0xcc, 0x04, 0x32, 0x61, 0x65, 0xac, 0x3a, 0x38, 0x7a, 0x6c,
	0x1a, 0xe8, 0x7f, 0x50, 0x1c, 0x6b, 0x0e, 0x1b, 0x7b, 0xcd, 0x93, 0x43, 0x33, 0x39, 0xe5, 0xf9,
	0xa0, 0x79, 0xff, 0x81, 0x99, 0xda, 0x3c, 0x81, 0x95, 0x49, 0x76, 0x41, 0x6b, 0x80, 0x9a, 0xc7,
	0xb6, 0xd5, 0x38, 0x3e, 0x69, 0xef, 0xb4, 0x9b, 0x47, 0xad, 0x38, 0xc2, 0x0d, 0x58, 0x9d, 0xd6,
	0x47, 0x61, 0x5e, 0x32, 0x57, 0xb0, 0xc9, 0xcd, 0x06, 0x14, 0x67, 0xbe, 0x0c, 0xd0, 0x75, 0x30,
	0x1b, 0xad, 0xfd, 0x23, 0xab, 0xde, 0x38, 0x6c, 0xb4, 0xda, 0x31, 0x6e, 0x01, 0xe0, 0xf0, 0xa8,
	0xd5, 0x6c, 0x1f, 0x59, 0xcd, 0xd6, 0x7d, 0xd3, 0x40, 0x2b, 0x90, 0xdb, 0x3d, 0x38, 0xaa, 0x7f,
	0x10, 0x4a, 0xc9, 0xcd, 0x7b, 0x90, 0x8d, 0xf8, 0x07, 0x15, 0x61, 0x79, 0xa7, 0x3e, 0x99, 0x50,
	0x1e, 0x32, 0x3b, 0x07, 0x51, 0x12, 0x79, 0xc8, 0x28, 0x1f, 0x33, 0x19, 0xba, 0x5b, 0x8d, 0xbd,
	0xa6, 0xd5, 0xa8, 0xb7, 0xcd, 0xd4, 0xee, 0x37, 0xc6, 0xc5, 0xb3, 0x72, 0xe2, 0xe9, 0xb3, 0x72,
	0xe2, 0xc5, 0xb3, 0xb2, 0xf1, 0xc5, 0x65, 0xd9, 0xf8, 0xf6, 0xb2, 0x6c, 0xfc, 0x70, 0x59, 0x36,
	0x2e, 0x2e, 0xcb, 0xc6, 0xcf, 0x97, 0x65, 0xe3, 0xd7, 0xcb, 0x72, 0xe2, 0xc5, 0x65, 0xd9, 0xf8,
	0xea, 0x79, 0x39, 0x71, 0xf1, 0xbc, 0x9c, 0x78, 0xfa, 0xbc, 0x9c, 0xf8, 0xc4, 0xe9, 0xb3, 0xe0,
	0xb4, 0x5f, 0x1d, 0x31, 0x57, 0x12, 0xce, 0x71, 0x75, 0x28, 0x6a, 0xea, 0xa1, 0xc7, 0xb8, 0xb7,
	0x15, 0x70, 0x36, 0xa2, 0x5d, 0xc2, 0xb7, 0xe2, 0xe3, 0x5a, 0xd0, 0xe9, 0xb3, 0x1a, 0x79, 0x22,
	0xf5, 0x6f, 0xc5, 0x3f, 0xfb, 0xc1, 0xea, 0x64, 0x15, 0xcd, 0xbc, 0xf5, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x37, 0x95, 0xdb, 0x9e, 0x98, 0x0d, 0x00, 0x00,
}

func (x Accuracy) String() string {
	s, ok := Accuracy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IPReputation) String() string {
	s, ok := IPReputation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EnforcementMode) String() string {
	s, ok := EnforcementMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Action) String() string {
	s, ok := Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ExplainLogRecordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExplainLogRecordResponse)
	if !ok {
		that2, ok := that.(ExplainLogRecordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.Analysis != that1.Analysis {
		return false
	}
	if this.Actions != that1.Actions {
		return false
	}
	if that1.Details == nil {
		if this.Details != nil {
			return false
		}
	} else if this.Details == nil {
		return false
	} else if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *ExplainLogRecordResponse_WafEventDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExplainLogRecordResponse_WafEventDetails)
	if !ok {
		that2, ok := that.(ExplainLogRecordResponse_WafEventDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafEventDetails.Equal(that1.WafEventDetails) {
		return false
	}
	return true
}
func (this *ExplainLogRecordResponse_SvcPolicyEventDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExplainLogRecordResponse_SvcPolicyEventDetails)
	if !ok {
		that2, ok := that.(ExplainLogRecordResponse_SvcPolicyEventDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SvcPolicyEventDetails.Equal(that1.SvcPolicyEventDetails) {
		return false
	}
	return true
}
func (this *ExplainLogRecordResponse_BotDefenseEventDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExplainLogRecordResponse_BotDefenseEventDetails)
	if !ok {
		that2, ok := that.(ExplainLogRecordResponse_BotDefenseEventDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseEventDetails.Equal(that1.BotDefenseEventDetails) {
		return false
	}
	return true
}
func (this *ExplainLogRecordResponse_RequestDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExplainLogRecordResponse_RequestDetails)
	if !ok {
		that2, ok := that.(ExplainLogRecordResponse_RequestDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestDetails.Equal(that1.RequestDetails) {
		return false
	}
	return true
}
func (this *WAFEventDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFEventDetails)
	if !ok {
		that2, ok := that.(WAFEventDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.AppFirewall != that1.AppFirewall {
		return false
	}
	if this.EnforcementMode != that1.EnforcementMode {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(that1.Signatures[i]) {
			return false
		}
	}
	if len(this.Violations) != len(that1.Violations) {
		return false
	}
	for i := range this.Violations {
		if !this.Violations[i].Equal(that1.Violations[i]) {
			return false
		}
	}
	if len(this.ThreatCampaigns) != len(that1.ThreatCampaigns) {
		return false
	}
	for i := range this.ThreatCampaigns {
		if !this.ThreatCampaigns[i].Equal(that1.ThreatCampaigns[i]) {
			return false
		}
	}
	if !this.Bot.Equal(that1.Bot) {
		return false
	}
	return true
}
func (this *SvcPolicyEventDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SvcPolicyEventDetails)
	if !ok {
		that2, ok := that.(SvcPolicyEventDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Policy != that1.Policy {
		return false
	}
	if this.PolicyNamespace != that1.PolicyNamespace {
		return false
	}
	if this.PolicyRule != that1.PolicyRule {
		return false
	}
	if len(this.IpThreatCategories) != len(that1.IpThreatCategories) {
		return false
	}
	for i := range this.IpThreatCategories {
		if this.IpThreatCategories[i] != that1.IpThreatCategories[i] {
			return false
		}
	}
	if this.IpTrustworthiness != that1.IpTrustworthiness {
		return false
	}
	if this.IpRisk != that1.IpRisk {
		return false
	}
	return true
}
func (this *BotDefenseEventDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotDefenseEventDetails)
	if !ok {
		that2, ok := that.(BotDefenseEventDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.AutomationType != that1.AutomationType {
		return false
	}
	if this.BotType != that1.BotType {
		return false
	}
	if this.RequestPath != that1.RequestPath {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *RequestDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDetails)
	if !ok {
		that2, ok := that.(RequestDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RspCode != that1.RspCode {
		return false
	}
	if this.RspCodeDetails != that1.RspCodeDetails {
		return false
	}
	if this.UpstreamProtocolErrorReason != that1.UpstreamProtocolErrorReason {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AttackType != that1.AttackType {
		return false
	}
	if this.Accuracy != that1.Accuracy {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	if this.MatchingInfo != that1.MatchingInfo {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *Violation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Violation)
	if !ok {
		that2, ok := that.(Violation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AttackType != that1.AttackType {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	if this.MatchingInfo != that1.MatchingInfo {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *ThreatCampaign) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreatCampaign)
	if !ok {
		that2, ok := that.(ThreatCampaign)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AttackType != that1.AttackType {
		return false
	}
	return true
}
func (this *Bot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bot)
	if !ok {
		that2, ok := that.(Bot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Classification != that1.Classification {
		return false
	}
	return true
}
func (this *ExplainLogRecordResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&explain_log_record.ExplainLogRecordResponse{")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "Analysis: "+fmt.Sprintf("%#v", this.Analysis)+",\n")
	s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExplainLogRecordResponse_WafEventDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&explain_log_record.ExplainLogRecordResponse_WafEventDetails{` +
		`WafEventDetails:` + fmt.Sprintf("%#v", this.WafEventDetails) + `}`}, ", ")
	return s
}
func (this *ExplainLogRecordResponse_SvcPolicyEventDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&explain_log_record.ExplainLogRecordResponse_SvcPolicyEventDetails{` +
		`SvcPolicyEventDetails:` + fmt.Sprintf("%#v", this.SvcPolicyEventDetails) + `}`}, ", ")
	return s
}
func (this *ExplainLogRecordResponse_BotDefenseEventDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&explain_log_record.ExplainLogRecordResponse_BotDefenseEventDetails{` +
		`BotDefenseEventDetails:` + fmt.Sprintf("%#v", this.BotDefenseEventDetails) + `}`}, ", ")
	return s
}
func (this *ExplainLogRecordResponse_RequestDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&explain_log_record.ExplainLogRecordResponse_RequestDetails{` +
		`RequestDetails:` + fmt.Sprintf("%#v", this.RequestDetails) + `}`}, ", ")
	return s
}
func (this *WAFEventDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&explain_log_record.WAFEventDetails{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "AppFirewall: "+fmt.Sprintf("%#v", this.AppFirewall)+",\n")
	s = append(s, "EnforcementMode: "+fmt.Sprintf("%#v", this.EnforcementMode)+",\n")
	if this.Signatures != nil {
		s = append(s, "Signatures: "+fmt.Sprintf("%#v", this.Signatures)+",\n")
	}
	if this.Violations != nil {
		s = append(s, "Violations: "+fmt.Sprintf("%#v", this.Violations)+",\n")
	}
	if this.ThreatCampaigns != nil {
		s = append(s, "ThreatCampaigns: "+fmt.Sprintf("%#v", this.ThreatCampaigns)+",\n")
	}
	if this.Bot != nil {
		s = append(s, "Bot: "+fmt.Sprintf("%#v", this.Bot)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SvcPolicyEventDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&explain_log_record.SvcPolicyEventDetails{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	s = append(s, "PolicyNamespace: "+fmt.Sprintf("%#v", this.PolicyNamespace)+",\n")
	s = append(s, "PolicyRule: "+fmt.Sprintf("%#v", this.PolicyRule)+",\n")
	s = append(s, "IpThreatCategories: "+fmt.Sprintf("%#v", this.IpThreatCategories)+",\n")
	s = append(s, "IpTrustworthiness: "+fmt.Sprintf("%#v", this.IpTrustworthiness)+",\n")
	s = append(s, "IpRisk: "+fmt.Sprintf("%#v", this.IpRisk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotDefenseEventDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&explain_log_record.BotDefenseEventDetails{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "AutomationType: "+fmt.Sprintf("%#v", this.AutomationType)+",\n")
	s = append(s, "BotType: "+fmt.Sprintf("%#v", this.BotType)+",\n")
	s = append(s, "RequestPath: "+fmt.Sprintf("%#v", this.RequestPath)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&explain_log_record.RequestDetails{")
	s = append(s, "RspCode: "+fmt.Sprintf("%#v", this.RspCode)+",\n")
	s = append(s, "RspCodeDetails: "+fmt.Sprintf("%#v", this.RspCodeDetails)+",\n")
	s = append(s, "UpstreamProtocolErrorReason: "+fmt.Sprintf("%#v", this.UpstreamProtocolErrorReason)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Signature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&explain_log_record.Signature{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AttackType: "+fmt.Sprintf("%#v", this.AttackType)+",\n")
	s = append(s, "Accuracy: "+fmt.Sprintf("%#v", this.Accuracy)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "MatchingInfo: "+fmt.Sprintf("%#v", this.MatchingInfo)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Violation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&explain_log_record.Violation{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AttackType: "+fmt.Sprintf("%#v", this.AttackType)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "MatchingInfo: "+fmt.Sprintf("%#v", this.MatchingInfo)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreatCampaign) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&explain_log_record.ThreatCampaign{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AttackType: "+fmt.Sprintf("%#v", this.AttackType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&explain_log_record.Bot{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Classification: "+fmt.Sprintf("%#v", this.Classification)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringExplainLogRecord(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExplainLogRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExplainLogRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExplainLogRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size := m.Details.Size()
			i -= size
			if _, err := m.Details.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Actions) > 0 {
		i -= len(m.Actions)
		copy(dAtA[i:], m.Actions)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Actions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Analysis) > 0 {
		i -= len(m.Analysis)
		copy(dAtA[i:], m.Analysis)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Analysis)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExplainLogRecordResponse_WafEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExplainLogRecordResponse_WafEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafEventDetails != nil {
		{
			size, err := m.WafEventDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ExplainLogRecordResponse_SvcPolicyEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExplainLogRecordResponse_SvcPolicyEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SvcPolicyEventDetails != nil {
		{
			size, err := m.SvcPolicyEventDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ExplainLogRecordResponse_BotDefenseEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExplainLogRecordResponse_BotDefenseEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseEventDetails != nil {
		{
			size, err := m.BotDefenseEventDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ExplainLogRecordResponse_RequestDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExplainLogRecordResponse_RequestDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestDetails != nil {
		{
			size, err := m.RequestDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WAFEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WAFEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThreatCampaigns) > 0 {
		for iNdEx := len(m.ThreatCampaigns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThreatCampaigns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Action != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x40
	}
	if m.Bot != nil {
		{
			size, err := m.Bot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Violations) > 0 {
		for iNdEx := len(m.Violations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Violations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplainLogRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EnforcementMode != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.EnforcementMode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppFirewall) > 0 {
		i -= len(m.AppFirewall)
		copy(dAtA[i:], m.AppFirewall)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.AppFirewall)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SvcPolicyEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcPolicyEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcPolicyEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		dAtA7 := make([]byte, len(m.IpThreatCategories)*10)
		var j6 int
		for _, num := range m.IpThreatCategories {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x4a
	}
	if m.Action != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x40
	}
	if m.IpRisk != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.IpRisk))
		i--
		dAtA[i] = 0x38
	}
	if m.IpTrustworthiness != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.IpTrustworthiness))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PolicyRule) > 0 {
		i -= len(m.PolicyRule)
		copy(dAtA[i:], m.PolicyRule)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.PolicyRule)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PolicyNamespace) > 0 {
		i -= len(m.PolicyNamespace)
		copy(dAtA[i:], m.PolicyNamespace)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.PolicyNamespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *BotDefenseEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotDefenseEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotDefenseEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestPath) > 0 {
		i -= len(m.RequestPath)
		copy(dAtA[i:], m.RequestPath)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.RequestPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BotType) > 0 {
		i -= len(m.BotType)
		copy(dAtA[i:], m.BotType)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.BotType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AutomationType) > 0 {
		i -= len(m.AutomationType)
		copy(dAtA[i:], m.AutomationType)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.AutomationType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Action != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UpstreamProtocolErrorReason) > 0 {
		i -= len(m.UpstreamProtocolErrorReason)
		copy(dAtA[i:], m.UpstreamProtocolErrorReason)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.UpstreamProtocolErrorReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RspCodeDetails) > 0 {
		i -= len(m.RspCodeDetails)
		copy(dAtA[i:], m.RspCodeDetails)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.RspCodeDetails)))
		i--
		dAtA[i] = 0x12
	}
	if m.RspCode != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.RspCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MatchingInfo) > 0 {
		i -= len(m.MatchingInfo)
		copy(dAtA[i:], m.MatchingInfo)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.MatchingInfo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Accuracy != 0 {
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(m.Accuracy))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AttackType) > 0 {
		i -= len(m.AttackType)
		copy(dAtA[i:], m.AttackType)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.AttackType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Violation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Violation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Violation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MatchingInfo) > 0 {
		i -= len(m.MatchingInfo)
		copy(dAtA[i:], m.MatchingInfo)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.MatchingInfo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AttackType) > 0 {
		i -= len(m.AttackType)
		copy(dAtA[i:], m.AttackType)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.AttackType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreatCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreatCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreatCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttackType) > 0 {
		i -= len(m.AttackType)
		copy(dAtA[i:], m.AttackType)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.AttackType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Classification) > 0 {
		i -= len(m.Classification)
		copy(dAtA[i:], m.Classification)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Classification)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExplainLogRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExplainLogRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovExplainLogRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExplainLogRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Analysis)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Actions)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	if m.Details != nil {
		n += m.Details.Size()
	}
	return n
}

func (m *ExplainLogRecordResponse_WafEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafEventDetails != nil {
		l = m.WafEventDetails.Size()
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}
func (m *ExplainLogRecordResponse_SvcPolicyEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SvcPolicyEventDetails != nil {
		l = m.SvcPolicyEventDetails.Size()
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}
func (m *ExplainLogRecordResponse_BotDefenseEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseEventDetails != nil {
		l = m.BotDefenseEventDetails.Size()
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}
func (m *ExplainLogRecordResponse_RequestDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestDetails != nil {
		l = m.RequestDetails.Size()
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}
func (m *WAFEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppFirewall)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	if m.EnforcementMode != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.EnforcementMode))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovExplainLogRecord(uint64(l))
		}
	}
	if len(m.Violations) > 0 {
		for _, e := range m.Violations {
			l = e.Size()
			n += 1 + l + sovExplainLogRecord(uint64(l))
		}
	}
	if m.Bot != nil {
		l = m.Bot.Size()
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.Action))
	}
	if len(m.ThreatCampaigns) > 0 {
		for _, e := range m.ThreatCampaigns {
			l = e.Size()
			n += 1 + l + sovExplainLogRecord(uint64(l))
		}
	}
	return n
}

func (m *SvcPolicyEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.PolicyNamespace)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.PolicyRule)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	if m.IpTrustworthiness != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.IpTrustworthiness))
	}
	if m.IpRisk != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.IpRisk))
	}
	if m.Action != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.Action))
	}
	if len(m.IpThreatCategories) > 0 {
		l = 0
		for _, e := range m.IpThreatCategories {
			l += sovExplainLogRecord(uint64(e))
		}
		n += 1 + sovExplainLogRecord(uint64(l)) + l
	}
	return n
}

func (m *BotDefenseEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.Action))
	}
	l = len(m.AutomationType)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.BotType)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.RequestPath)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}

func (m *RequestDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RspCode != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.RspCode))
	}
	l = len(m.RspCodeDetails)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.UpstreamProtocolErrorReason)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.AttackType)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	if m.Accuracy != 0 {
		n += 1 + sovExplainLogRecord(uint64(m.Accuracy))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.MatchingInfo)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}

func (m *Violation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.AttackType)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.MatchingInfo)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}

func (m *ThreatCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.AttackType)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}

func (m *Bot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	l = len(m.Classification)
	if l > 0 {
		n += 1 + l + sovExplainLogRecord(uint64(l))
	}
	return n
}

func sovExplainLogRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExplainLogRecord(x uint64) (n int) {
	return sovExplainLogRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExplainLogRecordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExplainLogRecordResponse{`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Analysis:` + fmt.Sprintf("%v", this.Analysis) + `,`,
		`Actions:` + fmt.Sprintf("%v", this.Actions) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExplainLogRecordResponse_WafEventDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExplainLogRecordResponse_WafEventDetails{`,
		`WafEventDetails:` + strings.Replace(fmt.Sprintf("%v", this.WafEventDetails), "WAFEventDetails", "WAFEventDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExplainLogRecordResponse_SvcPolicyEventDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExplainLogRecordResponse_SvcPolicyEventDetails{`,
		`SvcPolicyEventDetails:` + strings.Replace(fmt.Sprintf("%v", this.SvcPolicyEventDetails), "SvcPolicyEventDetails", "SvcPolicyEventDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExplainLogRecordResponse_BotDefenseEventDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExplainLogRecordResponse_BotDefenseEventDetails{`,
		`BotDefenseEventDetails:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseEventDetails), "BotDefenseEventDetails", "BotDefenseEventDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExplainLogRecordResponse_RequestDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExplainLogRecordResponse_RequestDetails{`,
		`RequestDetails:` + strings.Replace(fmt.Sprintf("%v", this.RequestDetails), "RequestDetails", "RequestDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WAFEventDetails) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSignatures := "[]*Signature{"
	for _, f := range this.Signatures {
		repeatedStringForSignatures += strings.Replace(f.String(), "Signature", "Signature", 1) + ","
	}
	repeatedStringForSignatures += "}"
	repeatedStringForViolations := "[]*Violation{"
	for _, f := range this.Violations {
		repeatedStringForViolations += strings.Replace(f.String(), "Violation", "Violation", 1) + ","
	}
	repeatedStringForViolations += "}"
	repeatedStringForThreatCampaigns := "[]*ThreatCampaign{"
	for _, f := range this.ThreatCampaigns {
		repeatedStringForThreatCampaigns += strings.Replace(f.String(), "ThreatCampaign", "ThreatCampaign", 1) + ","
	}
	repeatedStringForThreatCampaigns += "}"
	s := strings.Join([]string{`&WAFEventDetails{`,
		`AppFirewall:` + fmt.Sprintf("%v", this.AppFirewall) + `,`,
		`EnforcementMode:` + fmt.Sprintf("%v", this.EnforcementMode) + `,`,
		`Signatures:` + repeatedStringForSignatures + `,`,
		`Violations:` + repeatedStringForViolations + `,`,
		`Bot:` + strings.Replace(this.Bot.String(), "Bot", "Bot", 1) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`ThreatCampaigns:` + repeatedStringForThreatCampaigns + `,`,
		`}`,
	}, "")
	return s
}
func (this *SvcPolicyEventDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SvcPolicyEventDetails{`,
		`Policy:` + fmt.Sprintf("%v", this.Policy) + `,`,
		`PolicyNamespace:` + fmt.Sprintf("%v", this.PolicyNamespace) + `,`,
		`PolicyRule:` + fmt.Sprintf("%v", this.PolicyRule) + `,`,
		`IpTrustworthiness:` + fmt.Sprintf("%v", this.IpTrustworthiness) + `,`,
		`IpRisk:` + fmt.Sprintf("%v", this.IpRisk) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`IpThreatCategories:` + fmt.Sprintf("%v", this.IpThreatCategories) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotDefenseEventDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotDefenseEventDetails{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`AutomationType:` + fmt.Sprintf("%v", this.AutomationType) + `,`,
		`BotType:` + fmt.Sprintf("%v", this.BotType) + `,`,
		`RequestPath:` + fmt.Sprintf("%v", this.RequestPath) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDetails{`,
		`RspCode:` + fmt.Sprintf("%v", this.RspCode) + `,`,
		`RspCodeDetails:` + fmt.Sprintf("%v", this.RspCodeDetails) + `,`,
		`UpstreamProtocolErrorReason:` + fmt.Sprintf("%v", this.UpstreamProtocolErrorReason) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AttackType:` + fmt.Sprintf("%v", this.AttackType) + `,`,
		`Accuracy:` + fmt.Sprintf("%v", this.Accuracy) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`MatchingInfo:` + fmt.Sprintf("%v", this.MatchingInfo) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Violation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Violation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AttackType:` + fmt.Sprintf("%v", this.AttackType) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`MatchingInfo:` + fmt.Sprintf("%v", this.MatchingInfo) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreatCampaign) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreatCampaign{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AttackType:` + fmt.Sprintf("%v", this.AttackType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bot{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Classification:` + fmt.Sprintf("%v", this.Classification) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExplainLogRecord(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExplainLogRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExplainLogRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExplainLogRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analysis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Analysis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WAFEventDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &ExplainLogRecordResponse_WafEventDetails{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcPolicyEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SvcPolicyEventDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &ExplainLogRecordResponse_SvcPolicyEventDetails{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotDefenseEventDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &ExplainLogRecordResponse_BotDefenseEventDetails{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &ExplainLogRecordResponse_RequestDetails{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WAFEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WAFEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WAFEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppFirewall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforcementMode", wireType)
			}
			m.EnforcementMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnforcementMode |= EnforcementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Violations = append(m.Violations, &Violation{})
			if err := m.Violations[len(m.Violations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bot == nil {
				m.Bot = &Bot{}
			}
			if err := m.Bot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreatCampaigns = append(m.ThreatCampaigns, &ThreatCampaign{})
			if err := m.ThreatCampaigns[len(m.ThreatCampaigns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcPolicyEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcPolicyEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcPolicyEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpTrustworthiness", wireType)
			}
			m.IpTrustworthiness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpTrustworthiness |= IPReputation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpRisk", wireType)
			}
			m.IpRisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpRisk |= IPReputation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v policy.IPThreatCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExplainLogRecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= policy.IPThreatCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IpThreatCategories = append(m.IpThreatCategories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExplainLogRecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExplainLogRecord
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExplainLogRecord
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.IpThreatCategories) == 0 {
					m.IpThreatCategories = make([]policy.IPThreatCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v policy.IPThreatCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExplainLogRecord
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= policy.IPThreatCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IpThreatCategories = append(m.IpThreatCategories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IpThreatCategories", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotDefenseEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotDefenseEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotDefenseEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutomationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspCode", wireType)
			}
			m.RspCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RspCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspCodeDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RspCodeDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamProtocolErrorReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamProtocolErrorReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accuracy", wireType)
			}
			m.Accuracy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accuracy |= Accuracy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchingInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchingInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Violation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Violation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Violation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchingInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchingInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreatCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreatCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreatCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplainLogRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplainLogRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExplainLogRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExplainLogRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplainLogRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExplainLogRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExplainLogRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExplainLogRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExplainLogRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExplainLogRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExplainLogRecord = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package common

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CellProperties) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CellProperties) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CellProperties) DeepCopy() *CellProperties {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CellProperties{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CellProperties) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CellProperties) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CellPropertiesValidator().Validate(ctx, m, opts...)
}

type ValidateCellProperties struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCellProperties) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CellProperties)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CellProperties got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["status_style"]; exists {

		vOpts := append(opts, db.WithValidateField("status_style"))
		if err := fv(ctx, m.GetStatusStyle(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCellPropertiesValidator = func() *ValidateCellProperties {
	v := &ValidateCellProperties{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CellPropertiesValidator() db.Validator {
	return DefaultCellPropertiesValidator
}

// augmented methods on protoc/std generated struct

func (m *Display) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Display) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Display) DeepCopy() *Display {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Display{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Display) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Display) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DisplayValidator().Validate(ctx, m, opts...)
}

type ValidateDisplay struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDisplay) FormatsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(FormatType)
		return int32(i)
	}
	// FormatType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, FormatType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for formats")
	}
	itemsValidatorFn := func(ctx context.Context, elems []FormatType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for formats")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]FormatType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []FormatType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated formats")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items formats")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDisplay) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Display)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Display got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["colour"]; exists {

		vOpts := append(opts, db.WithValidateField("colour"))
		if err := fv(ctx, m.GetColour(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["display_type"]; exists {

		vOpts := append(opts, db.WithValidateField("display_type"))
		if err := fv(ctx, m.GetDisplayType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["formats"]; exists {
		vOpts := append(opts, db.WithValidateField("formats"))
		if err := fv(ctx, m.GetFormats(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDisplayValidator = func() *ValidateDisplay {
	v := &ValidateDisplay{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFormats := v.FormatsValidationRuleHandler
	rulesFormats := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFormats(rulesFormats)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Display.formats: %s", err)
		panic(errMsg)
	}
	v.FldValidators["formats"] = vFn

	return v
}()

func DisplayValidator() db.Validator {
	return DefaultDisplayValidator
}

// augmented methods on protoc/std generated struct

func (m *FieldProperties) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FieldProperties) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FieldProperties) DeepCopy() *FieldProperties {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FieldProperties{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FieldProperties) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FieldProperties) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FieldPropertiesValidator().Validate(ctx, m, opts...)
}

type ValidateFieldProperties struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFieldProperties) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FieldProperties)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FieldProperties got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["data_type"]; exists {

		vOpts := append(opts, db.WithValidateField("data_type"))
		if err := fv(ctx, m.GetDataType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["display"]; exists {

		vOpts := append(opts, db.WithValidateField("display"))
		if err := fv(ctx, m.GetDisplay(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["title"]; exists {

		vOpts := append(opts, db.WithValidateField("title"))
		if err := fv(ctx, m.GetTitle(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tooltip"]; exists {

		vOpts := append(opts, db.WithValidateField("tooltip"))
		if err := fv(ctx, m.GetTooltip(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["unit"]; exists {

		vOpts := append(opts, db.WithValidateField("unit"))
		if err := fv(ctx, m.GetUnit(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFieldPropertiesValidator = func() *ValidateFieldProperties {
	v := &ValidateFieldProperties{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["display"] = DisplayValidator().Validate

	return v
}()

func FieldPropertiesValidator() db.Validator {
	return DefaultFieldPropertiesValidator
}

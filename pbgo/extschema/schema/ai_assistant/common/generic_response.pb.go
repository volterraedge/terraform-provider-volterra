// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ai_assistant/common/generic_response.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Generic Response
//
// x-displayName: "Generic Response"
// Generic Response
type GenericResponse struct {
	// Summary
	//
	// x-example: "Query not supported"
	// x-displayName: "Summary"
	//
	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// is_error
	//
	// x-example: "true"
	// x-displayName: "is_error"
	//
	IsError bool `protobuf:"varint,2,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	// error
	//
	// x-displayName: "Error"
	// Error(if any) while processing the query
	Error *schema.ErrorType `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *GenericResponse) Reset()      { *m = GenericResponse{} }
func (*GenericResponse) ProtoMessage() {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af170e2228dcc607, []int{0}
}
func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(m, src)
}
func (m *GenericResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

func (m *GenericResponse) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *GenericResponse) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *GenericResponse) GetError() *schema.ErrorType {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*GenericResponse)(nil), "ves.io.schema.ai_assistant.common.GenericResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/ai_assistant/common/generic_response.proto", fileDescriptor_af170e2228dcc607)
}

var fileDescriptor_af170e2228dcc607 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0x17, 0xb4, 0x84, 0x01, 0x29, 0x53, 0xe8, 0x70, 0x15, 0x98, 0xba, 0xd4,
	0x96, 0x60, 0x61, 0x46, 0x42, 0xec, 0x11, 0x12, 0x12, 0x4b, 0x94, 0x16, 0x13, 0x2c, 0x48, 0xae,
	0x75, 0x6f, 0x1a, 0xe8, 0xc6, 0x0b, 0x20, 0xf1, 0x18, 0x3c, 0x0a, 0x63, 0xc7, 0x8e, 0xd4, 0x5d,
	0x18, 0xfb, 0x08, 0x88, 0xb8, 0x95, 0xc8, 0xc0, 0xe6, 0xeb, 0x73, 0x3e, 0x1f, 0xdf, 0x13, 0x9e,
	0x35, 0x9a, 0xa5, 0x41, 0xc5, 0x93, 0x7b, 0x5d, 0xe6, 0x2a, 0x37, 0x59, 0xce, 0x6c, 0xb8, 0xce,
	0xab, 0x5a, 0x4d, 0xb0, 0x2c, 0xb1, 0x52, 0x85, 0xae, 0x34, 0x99, 0x49, 0x46, 0x9a, 0x2d, 0x56,
	0xac, 0xa5, 0x25, 0xac, 0x31, 0x3a, 0xf2, 0xa4, 0xf4, 0xa4, 0xfc, 0x4d, 0x4a, 0x4f, 0x0e, 0x06,
	0xdd, 0xc7, 0x35, 0x11, 0x12, 0x7b, 0x7c, 0x90, 0x74, 0xb5, 0xc6, 0xe8, 0xa7, 0x0c, 0x6d, 0x6d,
	0xb0, 0xda, 0x38, 0x8e, 0x9b, 0xf0, 0xe0, 0xd2, 0x47, 0xa7, 0x9b, 0xe4, 0x28, 0x0e, 0x7b, 0x3c,
	0x2d, 0xcb, 0x9c, 0x66, 0xb1, 0x48, 0xc4, 0x70, 0x2f, 0xdd, 0x8e, 0xd1, 0x61, 0xd8, 0x37, 0x9c,
	0xb5, 0x09, 0xf1, 0xbf, 0x44, 0x0c, 0xfb, 0x69, 0xcf, 0xf0, 0xc5, 0xcf, 0x18, 0xc9, 0x70, 0xc7,
	0xdf, 0xff, 0x4f, 0xc4, 0x70, 0xff, 0x24, 0x96, 0xdd, 0x8f, 0xb7, 0xa6, 0xab, 0x99, 0xd5, 0xa9,
	0xb7, 0x9d, 0xbf, 0x8a, 0xf9, 0x12, 0x82, 0xc5, 0x12, 0x82, 0xf5, 0x12, 0xc4, 0x8b, 0x03, 0xf1,
	0xee, 0x40, 0x7c, 0x38, 0x10, 0x73, 0x07, 0xe2, 0xd3, 0x81, 0xf8, 0x72, 0x10, 0xac, 0x1d, 0x88,
	0xb7, 0x15, 0x04, 0xf3, 0x15, 0x04, 0x8b, 0x15, 0x04, 0x37, 0xd7, 0x05, 0xda, 0x87, 0x42, 0x36,
	0xf8, 0x58, 0x6b, 0xa2, 0x5c, 0x4e, 0x59, 0xb5, 0x87, 0x3b, 0xa4, 0x72, 0x64, 0x09, 0x1b, 0x73,
	0xab, 0x69, 0xb4, 0x95, 0x95, 0x1d, 0x17, 0xa8, 0xf4, 0x73, 0xbd, 0xd9, 0xff, 0xef, 0xfe, 0xc7,
	0xbb, 0x6d, 0x1d, 0xa7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x18, 0x5c, 0xbf, 0xab, 0x01,
	0x00, 0x00,
}

func (this *GenericResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenericResponse)
	if !ok {
		that2, ok := that.(GenericResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.IsError != that1.IsError {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *GenericResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common.GenericResponse{")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "IsError: "+fmt.Sprintf("%#v", this.IsError)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGenericResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GenericResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenericResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsError {
		i--
		if m.IsError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintGenericResponse(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenericResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenericResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenericResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovGenericResponse(uint64(l))
	}
	if m.IsError {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovGenericResponse(uint64(l))
	}
	return n
}

func sovGenericResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenericResponse(x uint64) (n int) {
	return sovGenericResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GenericResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericResponse{`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`IsError:` + fmt.Sprintf("%v", this.IsError) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorType", "schema.ErrorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenericResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GenericResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenericResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenericResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsError = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenericResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &schema.ErrorType{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenericResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenericResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenericResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenericResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenericResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenericResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenericResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenericResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenericResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenericResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenericResponse = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ai_assistant/common/link.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Filter Operator
//
// x-displayName: "Filter Operator"
// Operator for query filter
type FilterOperator int32

const (
	// Filter Operator
	//
	// x-displayName: "In"
	// Specifies that query result includes filter values
	IN FilterOperator = 0
	// Filter Operator
	//
	// x-displayName: "Not In"
	// Specifies that query result excludes filter values
	NOT_IN FilterOperator = 1
)

var FilterOperator_name = map[int32]string{
	0: "IN",
	1: "NOT_IN",
}

var FilterOperator_value = map[string]int32{
	"IN":     0,
	"NOT_IN": 1,
}

func (FilterOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_164e2504257d95f4, []int{0}
}

// LinkType
//
// x-displayName: "Link Type"
// Link Type to be presented
type DashboardLinkType int32

const (
	// SECURITY_ANALYTICS_EVENTS
	//
	// x-displayName: "SECURITY_ANALYTICS_EVENTS"
	// Security analytics dashboard: /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_analytics/events
	SECURITY_ANALYTICS_EVENTS DashboardLinkType = 0
	// REQUESTS_EVENTS
	//
	// x-displayName: "REQUESTS_EVENTS"
	// Requests dashboard: /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_monitoring/request
	REQUESTS_EVENTS DashboardLinkType = 1
	// SITES
	//
	// x-displayName: "SITES"
	// Sites dashboard: /web/workspaces/multi-cloud-network-connect/overview/sites/dashboard
	SITES DashboardLinkType = 2
	// CLOUD_CREDENTIALS
	//
	// x-displayName: "CLOUD_CREDENTIALS"
	// CLOUD_CREDENTIALS --> /web/workspaces/multi-cloud-network-connect/manage/site_management/cloud_sites/cloud_credential
	CLOUD_CREDENTIALS DashboardLinkType = 3
)

var DashboardLinkType_name = map[int32]string{
	0: "SECURITY_ANALYTICS_EVENTS",
	1: "REQUESTS_EVENTS",
	2: "SITES",
	3: "CLOUD_CREDENTIALS",
}

var DashboardLinkType_value = map[string]int32{
	"SECURITY_ANALYTICS_EVENTS": 0,
	"REQUESTS_EVENTS":           1,
	"SITES":                     2,
	"CLOUD_CREDENTIALS":         3,
}

func (DashboardLinkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_164e2504257d95f4, []int{1}
}

// Link
//
// x-displayName: "Link"
// Link for a page
type Link struct {
	// link_type
	//
	// x-displayName: "Link"
	// Type of link to be presented
	//
	// Types that are valid to be assigned to LinkType:
	//	*Link_GenericLink
	//	*Link_DashboardLink
	LinkType isLink_LinkType `protobuf_oneof:"link_type"`
}

func (m *Link) Reset()      { *m = Link{} }
func (*Link) ProtoMessage() {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_164e2504257d95f4, []int{0}
}
func (m *Link) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Link.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return m.Size()
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

type isLink_LinkType interface {
	isLink_LinkType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Link_GenericLink struct {
	GenericLink *GenericLink `protobuf:"bytes,4,opt,name=generic_link,json=genericLink,proto3,oneof" json:"generic_link,omitempty"`
}
type Link_DashboardLink struct {
	DashboardLink *DashboardLink `protobuf:"bytes,5,opt,name=dashboard_link,json=dashboardLink,proto3,oneof" json:"dashboard_link,omitempty"`
}

func (*Link_GenericLink) isLink_LinkType()   {}
func (*Link_DashboardLink) isLink_LinkType() {}

func (m *Link) GetLinkType() isLink_LinkType {
	if m != nil {
		return m.LinkType
	}
	return nil
}

func (m *Link) GetGenericLink() *GenericLink {
	if x, ok := m.GetLinkType().(*Link_GenericLink); ok {
		return x.GenericLink
	}
	return nil
}

func (m *Link) GetDashboardLink() *DashboardLink {
	if x, ok := m.GetLinkType().(*Link_DashboardLink); ok {
		return x.DashboardLink
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Link) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Link_GenericLink)(nil),
		(*Link_DashboardLink)(nil),
	}
}

// GenericLink
//
// x-displayName: "Generic Link"
// Generic link can have external link with full url
type GenericLink struct {
	// url
	//
	// x-displayName: "URL"
	// x-example: "https://datatracker.ietf.org/doc/html/rfc3986"
	// Full url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// title
	//
	// x-example: "Security Analytics lb1"
	// x-displayName: "Title"
	// Title for the link
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// key
	//
	// x-example: "db_link"
	// x-displayName: "Key"
	// x-required
	// Key will present a placeholder in a text field to insert the link.
	// For example: To view these events go to the ${{link:db_link}}.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GenericLink) Reset()      { *m = GenericLink{} }
func (*GenericLink) ProtoMessage() {}
func (*GenericLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_164e2504257d95f4, []int{1}
}
func (m *GenericLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenericLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenericLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericLink.Merge(m, src)
}
func (m *GenericLink) XXX_Size() int {
	return m.Size()
}
func (m *GenericLink) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericLink.DiscardUnknown(m)
}

var xxx_messageInfo_GenericLink proto.InternalMessageInfo

func (m *GenericLink) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GenericLink) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GenericLink) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// DashboardLink
//
// x-displayName: "Dashboard Link"
// Dashboard link will present common fields like type, namespace, object, dateFilter, logFilter
type DashboardLink struct {
	// type
	//
	// x-example: "SECURITY_ANALYTICS_EVENTS"
	// x-displayName: "Type"
	// Type of the link to be presented.
	// SECURITY_ANALYTICS_EVENTS --> /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_analytics/events
	// REQUESTS_EVENTS --> /web/workspaces/web-app-and-api-protection/../dashboard/security-dashboard/../security_monitoring/request
	// SITES --> /web/workspaces/multi-cloud-network-connect/overview/sites/dashboard
	// CLOUD_CREDENTIALS --> /web/workspaces/multi-cloud-network-connect/manage/site_management/cloud_sites/cloud_credential
	Type DashboardLinkType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.ai_assistant.common.DashboardLinkType" json:"type,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace for current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// object_name
	//
	// x-displayName: "Object name"
	// x-example: "ves-io-http-loadbalancer-prod-nginx"
	// Object name such as LB, VH
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// time_range
	//
	// x-displayName: "Time Range"
	// x-example: "604800"
	// Time range filter
	TimeRange string `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// log_filters
	//
	// x-displayName: "Logs Filter"
	// Logs filter
	LogFilters []*LogFilter `protobuf:"bytes,5,rep,name=log_filters,json=logFilters,proto3" json:"log_filters,omitempty"`
	// title
	//
	// x-example: "Security Analytics lb1"
	// x-displayName: "Title"
	// Title for the link
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// key
	//
	// x-example: "db_link"
	// x-displayName: "Key"
	// x-required
	// Key will present a placeholder in a text field to insert the link.
	// For example: To view these events go to the ${{link:db_link}}.
	Key string `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DashboardLink) Reset()      { *m = DashboardLink{} }
func (*DashboardLink) ProtoMessage() {}
func (*DashboardLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_164e2504257d95f4, []int{2}
}
func (m *DashboardLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashboardLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashboardLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashboardLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashboardLink.Merge(m, src)
}
func (m *DashboardLink) XXX_Size() int {
	return m.Size()
}
func (m *DashboardLink) XXX_DiscardUnknown() {
	xxx_messageInfo_DashboardLink.DiscardUnknown(m)
}

var xxx_messageInfo_DashboardLink proto.InternalMessageInfo

func (m *DashboardLink) GetType() DashboardLinkType {
	if m != nil {
		return m.Type
	}
	return SECURITY_ANALYTICS_EVENTS
}

func (m *DashboardLink) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DashboardLink) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *DashboardLink) GetTimeRange() string {
	if m != nil {
		return m.TimeRange
	}
	return ""
}

func (m *DashboardLink) GetLogFilters() []*LogFilter {
	if m != nil {
		return m.LogFilters
	}
	return nil
}

func (m *DashboardLink) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DashboardLink) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// LogFilter
//
// x-displayName: "Log Filter"
// Log filter for filter query
type LogFilter struct {
	// key
	//
	// x-displayName: "Key"
	// x-example: "attack_types.name"
	// Key to be presented in the filter
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// values
	//
	// x-displayName: "Values"
	// x-example: "ATTACK_TYPE_CROSS_SITE_SCRIPTING"
	// Values to be presented in the filter
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// op
	//
	// x-displayName: "Operator"
	// x-example: "IN"
	// Operator for query filter
	Op FilterOperator `protobuf:"varint,3,opt,name=op,proto3,enum=ves.io.schema.ai_assistant.common.FilterOperator" json:"op,omitempty"`
}

func (m *LogFilter) Reset()      { *m = LogFilter{} }
func (*LogFilter) ProtoMessage() {}
func (*LogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_164e2504257d95f4, []int{3}
}
func (m *LogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogFilter.Merge(m, src)
}
func (m *LogFilter) XXX_Size() int {
	return m.Size()
}
func (m *LogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LogFilter proto.InternalMessageInfo

func (m *LogFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LogFilter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LogFilter) GetOp() FilterOperator {
	if m != nil {
		return m.Op
	}
	return IN
}

func init() {
	proto.RegisterEnum("ves.io.schema.ai_assistant.common.FilterOperator", FilterOperator_name, FilterOperator_value)
	proto.RegisterEnum("ves.io.schema.ai_assistant.common.DashboardLinkType", DashboardLinkType_name, DashboardLinkType_value)
	proto.RegisterType((*Link)(nil), "ves.io.schema.ai_assistant.common.Link")
	proto.RegisterType((*GenericLink)(nil), "ves.io.schema.ai_assistant.common.GenericLink")
	proto.RegisterType((*DashboardLink)(nil), "ves.io.schema.ai_assistant.common.DashboardLink")
	proto.RegisterType((*LogFilter)(nil), "ves.io.schema.ai_assistant.common.LogFilter")
}

func init() {
	proto.RegisterFile("ves.io/schema/ai_assistant/common/link.proto", fileDescriptor_164e2504257d95f4)
}

var fileDescriptor_164e2504257d95f4 = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x5c,
	0x10, 0xf5, 0xb5, 0x9d, 0x7c, 0xf5, 0xe4, 0x6b, 0x70, 0x2f, 0x3f, 0x0a, 0x88, 0x9a, 0x50, 0xb1,
	0x88, 0xaa, 0xd6, 0x86, 0xc0, 0x0b, 0xa4, 0xa9, 0x69, 0x53, 0x05, 0x57, 0xd8, 0x2e, 0xa8, 0x6c,
	0x2c, 0x27, 0xb9, 0x75, 0x4d, 0x6c, 0x5f, 0xcb, 0x76, 0x43, 0xb3, 0xe3, 0x05, 0x90, 0x78, 0x0c,
	0x56, 0xbc, 0x00, 0x2f, 0xc0, 0x32, 0xcb, 0x4a, 0x6c, 0xa8, 0xbb, 0x61, 0xd9, 0x47, 0x40, 0xb6,
	0x93, 0xa6, 0x15, 0x20, 0xca, 0x6e, 0xe6, 0xcc, 0x99, 0x33, 0x67, 0xc6, 0xba, 0x86, 0xb5, 0x11,
	0x89, 0x65, 0x97, 0x2a, 0x71, 0xff, 0x90, 0xf8, 0xb6, 0x62, 0xbb, 0x96, 0x1d, 0xc7, 0x6e, 0x9c,
	0xd8, 0x41, 0xa2, 0xf4, 0xa9, 0xef, 0xd3, 0x40, 0xf1, 0xdc, 0x60, 0x28, 0x87, 0x11, 0x4d, 0x28,
	0x7e, 0x58, 0xb0, 0xe5, 0x82, 0x2d, 0x5f, 0x66, 0xcb, 0x05, 0xfb, 0x5e, 0xfd, 0xaa, 0xe0, 0xc8,
	0x25, 0xef, 0x2c, 0x1a, 0x26, 0x2e, 0x0d, 0xe2, 0x42, 0x64, 0xe5, 0x1b, 0x02, 0xbe, 0xeb, 0x06,
	0x43, 0x6c, 0xc0, 0xff, 0x0e, 0x09, 0x48, 0xe4, 0xf6, 0xad, 0x6c, 0x46, 0x8d, 0xaf, 0xa3, 0x46,
	0xa5, 0x29, 0xcb, 0x7f, 0x1d, 0x22, 0x6f, 0x15, 0x6d, 0x99, 0xca, 0x36, 0xa3, 0x57, 0x9c, 0x79,
	0x8a, 0xf7, 0xa1, 0x3a, 0xb0, 0xe3, 0xc3, 0x1e, 0xb5, 0xa3, 0x41, 0x21, 0x5b, 0xca, 0x65, 0x1f,
	0x5f, 0x43, 0x76, 0x73, 0xd6, 0x38, 0x15, 0x5e, 0x1c, 0x5c, 0x06, 0x36, 0x96, 0x40, 0xc8, 0x04,
	0xad, 0x64, 0x1c, 0x12, 0xcc, 0x4f, 0xbe, 0x20, 0x6e, 0x87, 0x5f, 0x40, 0x22, 0xbb, 0xc3, 0x2f,
	0xb0, 0x62, 0x16, 0x73, 0x22, 0xbf, 0xb2, 0x05, 0x95, 0x4b, 0xee, 0xb0, 0x08, 0xdc, 0x51, 0xe4,
	0xd5, 0x50, 0x1d, 0x35, 0x04, 0x3d, 0x0b, 0xf1, 0x2d, 0x28, 0x25, 0x6e, 0xe2, 0x91, 0x1a, 0x9b,
	0x63, 0x45, 0x92, 0xf1, 0x86, 0x64, 0x5c, 0xe3, 0x0a, 0xde, 0x90, 0x8c, 0x57, 0x3e, 0xb3, 0xb0,
	0x78, 0xc5, 0x10, 0xde, 0x06, 0x3e, 0x1b, 0x9d, 0x8b, 0x55, 0x9b, 0xcf, 0xfe, 0x75, 0x21, 0x73,
	0x1c, 0x12, 0x3d, 0x57, 0xc0, 0xf7, 0x41, 0x08, 0x6c, 0x9f, 0xc4, 0xa1, 0xdd, 0x9f, 0xf9, 0x98,
	0x03, 0xf8, 0x01, 0x54, 0x68, 0xef, 0x2d, 0xe9, 0x27, 0x56, 0x86, 0x4d, 0x3d, 0x41, 0x01, 0x69,
	0xb6, 0x4f, 0xf0, 0x32, 0x40, 0xe2, 0xfa, 0xc4, 0x8a, 0xec, 0xc0, 0x21, 0xf9, 0x67, 0x13, 0x74,
	0x21, 0x43, 0xf4, 0x0c, 0xc0, 0x2f, 0xa0, 0xe2, 0x51, 0xc7, 0x3a, 0x70, 0xbd, 0x84, 0x44, 0x71,
	0xad, 0x54, 0xe7, 0x1a, 0x95, 0xe6, 0xda, 0x35, 0xec, 0x76, 0xa9, 0xf3, 0x3c, 0x6f, 0xd2, 0xc1,
	0x9b, 0x85, 0xf1, 0xfc, 0x60, 0xe5, 0xdf, 0x1c, 0xec, 0xbf, 0xf9, 0xc1, 0x8e, 0x41, 0xb8, 0x10,
	0x98, 0x95, 0xd1, 0x45, 0x19, 0xdf, 0x81, 0xf2, 0xc8, 0xf6, 0x8e, 0x48, 0x5c, 0x63, 0xeb, 0x5c,
	0x43, 0xd0, 0xa7, 0x19, 0x6e, 0x01, 0x4b, 0xc3, 0x7c, 0xc9, 0x6a, 0xf3, 0xc9, 0x35, 0x4c, 0x16,
	0x03, 0x76, 0x43, 0x12, 0xd9, 0x09, 0x8d, 0x74, 0x96, 0x86, 0xab, 0x8f, 0xa0, 0x7a, 0x15, 0xc5,
	0x65, 0x60, 0x3b, 0x9a, 0xc8, 0x60, 0x80, 0xb2, 0xb6, 0x6b, 0x5a, 0x1d, 0x4d, 0x44, 0xab, 0x2e,
	0x2c, 0xfd, 0xf2, 0x3d, 0xf0, 0x32, 0xdc, 0x35, 0xd4, 0xf6, 0x9e, 0xde, 0x31, 0xf7, 0xad, 0x96,
	0xd6, 0xea, 0xee, 0x9b, 0x9d, 0xb6, 0x61, 0xa9, 0xaf, 0x54, 0xcd, 0x34, 0x44, 0x06, 0xdf, 0x84,
	0x1b, 0xba, 0xfa, 0x72, 0x4f, 0x35, 0xcc, 0x0b, 0x10, 0x61, 0x01, 0x4a, 0x46, 0xc7, 0x54, 0x0d,
	0x91, 0xc5, 0xb7, 0x61, 0xa9, 0xdd, 0xdd, 0xdd, 0xdb, 0xb4, 0xda, 0xba, 0xba, 0xa9, 0x6a, 0x66,
	0xa7, 0xd5, 0x35, 0x44, 0x6e, 0xe3, 0x03, 0x9a, 0x9c, 0x4a, 0xcc, 0xc9, 0xa9, 0xc4, 0x9c, 0x9f,
	0x4a, 0xe8, 0x7d, 0x2a, 0xa1, 0x4f, 0xa9, 0x84, 0xbe, 0xa6, 0x12, 0x9a, 0xa4, 0x12, 0xfa, 0x9e,
	0x4a, 0xe8, 0x47, 0x2a, 0x31, 0xe7, 0xa9, 0x84, 0x3e, 0x9e, 0x49, 0xcc, 0xe4, 0x4c, 0x62, 0x4e,
	0xce, 0x24, 0xe6, 0xcd, 0x6b, 0x87, 0x86, 0x43, 0x47, 0x1e, 0xd1, 0x6c, 0x97, 0xc8, 0x96, 0x8f,
	0x62, 0x25, 0x0f, 0x0e, 0x68, 0xe4, 0xaf, 0x87, 0x11, 0x1d, 0xb9, 0x03, 0x12, 0xad, 0xcf, 0xca,
	0x4a, 0xd8, 0x73, 0xa8, 0x42, 0x8e, 0x93, 0xe9, 0x53, 0xff, 0xf3, 0x2f, 0xa4, 0x57, 0xce, 0x5f,
	0xfe, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x32, 0xd9, 0x5a, 0x6e, 0x04, 0x00, 0x00,
}

func (x FilterOperator) String() string {
	s, ok := FilterOperator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DashboardLinkType) String() string {
	s, ok := DashboardLinkType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Link) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Link)
	if !ok {
		that2, ok := that.(Link)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LinkType == nil {
		if this.LinkType != nil {
			return false
		}
	} else if this.LinkType == nil {
		return false
	} else if !this.LinkType.Equal(that1.LinkType) {
		return false
	}
	return true
}
func (this *Link_GenericLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Link_GenericLink)
	if !ok {
		that2, ok := that.(Link_GenericLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GenericLink.Equal(that1.GenericLink) {
		return false
	}
	return true
}
func (this *Link_DashboardLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Link_DashboardLink)
	if !ok {
		that2, ok := that.(Link_DashboardLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DashboardLink.Equal(that1.DashboardLink) {
		return false
	}
	return true
}
func (this *GenericLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenericLink)
	if !ok {
		that2, ok := that.(GenericLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *DashboardLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DashboardLink)
	if !ok {
		that2, ok := that.(DashboardLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ObjectName != that1.ObjectName {
		return false
	}
	if this.TimeRange != that1.TimeRange {
		return false
	}
	if len(this.LogFilters) != len(that1.LogFilters) {
		return false
	}
	for i := range this.LogFilters {
		if !this.LogFilters[i].Equal(that1.LogFilters[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *LogFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogFilter)
	if !ok {
		that2, ok := that.(LogFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	if this.Op != that1.Op {
		return false
	}
	return true
}
func (this *Link) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common.Link{")
	if this.LinkType != nil {
		s = append(s, "LinkType: "+fmt.Sprintf("%#v", this.LinkType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Link_GenericLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Link_GenericLink{` +
		`GenericLink:` + fmt.Sprintf("%#v", this.GenericLink) + `}`}, ", ")
	return s
}
func (this *Link_DashboardLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common.Link_DashboardLink{` +
		`DashboardLink:` + fmt.Sprintf("%#v", this.DashboardLink) + `}`}, ", ")
	return s
}
func (this *GenericLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common.GenericLink{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DashboardLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&common.DashboardLink{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ObjectName: "+fmt.Sprintf("%#v", this.ObjectName)+",\n")
	s = append(s, "TimeRange: "+fmt.Sprintf("%#v", this.TimeRange)+",\n")
	if this.LogFilters != nil {
		s = append(s, "LogFilters: "+fmt.Sprintf("%#v", this.LogFilters)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common.LogFilter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLink(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Link) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LinkType != nil {
		{
			size := m.LinkType.Size()
			i -= size
			if _, err := m.LinkType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Link_GenericLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Link_GenericLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenericLink != nil {
		{
			size, err := m.GenericLink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLink(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Link_DashboardLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Link_DashboardLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DashboardLink != nil {
		{
			size, err := m.DashboardLink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLink(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GenericLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DashboardLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashboardLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashboardLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogFilters) > 0 {
		for iNdEx := len(m.LogFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLink(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TimeRange) > 0 {
		i -= len(m.TimeRange)
		copy(dAtA[i:], m.TimeRange)
		i = encodeVarintLink(dAtA, i, uint64(len(m.TimeRange)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintLink(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLink(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		i = encodeVarintLink(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintLink(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLink(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLink(dAtA []byte, offset int, v uint64) int {
	offset -= sovLink(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LinkType != nil {
		n += m.LinkType.Size()
	}
	return n
}

func (m *Link_GenericLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenericLink != nil {
		l = m.GenericLink.Size()
		n += 1 + l + sovLink(uint64(l))
	}
	return n
}
func (m *Link_DashboardLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DashboardLink != nil {
		l = m.DashboardLink.Size()
		n += 1 + l + sovLink(uint64(l))
	}
	return n
}
func (m *GenericLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	return n
}

func (m *DashboardLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLink(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	l = len(m.TimeRange)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	if len(m.LogFilters) > 0 {
		for _, e := range m.LogFilters {
			l = e.Size()
			n += 1 + l + sovLink(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	return n
}

func (m *LogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLink(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovLink(uint64(l))
		}
	}
	if m.Op != 0 {
		n += 1 + sovLink(uint64(m.Op))
	}
	return n
}

func sovLink(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLink(x uint64) (n int) {
	return sovLink(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Link) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Link{`,
		`LinkType:` + fmt.Sprintf("%v", this.LinkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Link_GenericLink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Link_GenericLink{`,
		`GenericLink:` + strings.Replace(fmt.Sprintf("%v", this.GenericLink), "GenericLink", "GenericLink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Link_DashboardLink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Link_DashboardLink{`,
		`DashboardLink:` + strings.Replace(fmt.Sprintf("%v", this.DashboardLink), "DashboardLink", "DashboardLink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericLink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericLink{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DashboardLink) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogFilters := "[]*LogFilter{"
	for _, f := range this.LogFilters {
		repeatedStringForLogFilters += strings.Replace(f.String(), "LogFilter", "LogFilter", 1) + ","
	}
	repeatedStringForLogFilters += "}"
	s := strings.Join([]string{`&DashboardLink{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ObjectName:` + fmt.Sprintf("%v", this.ObjectName) + `,`,
		`TimeRange:` + fmt.Sprintf("%v", this.TimeRange) + `,`,
		`LogFilters:` + repeatedStringForLogFilters + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogFilter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLink(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericLink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericLink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LinkType = &Link_GenericLink{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DashboardLink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DashboardLink{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LinkType = &Link_DashboardLink{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashboardLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashboardLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashboardLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DashboardLinkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogFilters = append(m.LogFilters, &LogFilter{})
			if err := m.LogFilters[len(m.LogFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLink
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLink
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLink
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLink
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= FilterOperator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLink(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLink
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLink(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLink
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLink
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLink
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLink
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLink
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLink        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLink          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLink = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package network_firewall

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ActiveEnhancedFirewallPoliciesType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActiveEnhancedFirewallPoliciesType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActiveEnhancedFirewallPoliciesType) DeepCopy() *ActiveEnhancedFirewallPoliciesType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActiveEnhancedFirewallPoliciesType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActiveEnhancedFirewallPoliciesType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActiveEnhancedFirewallPoliciesType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActiveEnhancedFirewallPoliciesTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActiveEnhancedFirewallPoliciesType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetEnhancedFirewallPoliciesDRefInfo()

}

func (m *ActiveEnhancedFirewallPoliciesType) GetEnhancedFirewallPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetEnhancedFirewallPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ActiveEnhancedFirewallPoliciesType.enhanced_firewall_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("enhanced_firewall_policy.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "enhanced_firewall_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "enhanced_firewall_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetEnhancedFirewallPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActiveEnhancedFirewallPoliciesType) GetEnhancedFirewallPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "enhanced_firewall_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: enhanced_firewall_policy")
	}
	for i, vref := range m.GetEnhancedFirewallPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActiveEnhancedFirewallPoliciesType.enhanced_firewall_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "enhanced_firewall_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateActiveEnhancedFirewallPoliciesType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActiveEnhancedFirewallPoliciesType) EnhancedFirewallPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for enhanced_firewall_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for enhanced_firewall_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated enhanced_firewall_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items enhanced_firewall_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActiveEnhancedFirewallPoliciesType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActiveEnhancedFirewallPoliciesType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActiveEnhancedFirewallPoliciesType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enhanced_firewall_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("enhanced_firewall_policies"))
		if err := fv(ctx, m.GetEnhancedFirewallPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActiveEnhancedFirewallPoliciesTypeValidator = func() *ValidateActiveEnhancedFirewallPoliciesType {
	v := &ValidateActiveEnhancedFirewallPoliciesType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnhancedFirewallPolicies := v.EnhancedFirewallPoliciesValidationRuleHandler
	rulesEnhancedFirewallPolicies := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhEnhancedFirewallPolicies(rulesEnhancedFirewallPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActiveEnhancedFirewallPoliciesType.enhanced_firewall_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enhanced_firewall_policies"] = vFn

	return v
}()

func ActiveEnhancedFirewallPoliciesTypeValidator() db.Validator {
	return DefaultActiveEnhancedFirewallPoliciesTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ActiveFastACLsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActiveFastACLsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActiveFastACLsType) DeepCopy() *ActiveFastACLsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActiveFastACLsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActiveFastACLsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActiveFastACLsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActiveFastACLsTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActiveFastACLsType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetFastAclsDRefInfo()

}

func (m *ActiveFastACLsType) GetFastAclsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetFastAcls()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ActiveFastACLsType.fast_acls[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("fast_acl.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "fast_acl.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "fast_acls",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetFastAclsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActiveFastACLsType) GetFastAclsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "fast_acl.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: fast_acl")
	}
	for i, vref := range m.GetFastAcls() {
		if vref == nil {
			return nil, fmt.Errorf("ActiveFastACLsType.fast_acls[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "fast_acl.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateActiveFastACLsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActiveFastACLsType) FastAclsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for fast_acls")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fast_acls")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fast_acls")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fast_acls")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActiveFastACLsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActiveFastACLsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActiveFastACLsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fast_acls"]; exists {
		vOpts := append(opts, db.WithValidateField("fast_acls"))
		if err := fv(ctx, m.GetFastAcls(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActiveFastACLsTypeValidator = func() *ValidateActiveFastACLsType {
	v := &ValidateActiveFastACLsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFastAcls := v.FastAclsValidationRuleHandler
	rulesFastAcls := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhFastAcls(rulesFastAcls)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActiveFastACLsType.fast_acls: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acls"] = vFn

	return v
}()

func ActiveFastACLsTypeValidator() db.Validator {
	return DefaultActiveFastACLsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ActiveForwardProxyPoliciesType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActiveForwardProxyPoliciesType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActiveForwardProxyPoliciesType) DeepCopy() *ActiveForwardProxyPoliciesType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActiveForwardProxyPoliciesType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActiveForwardProxyPoliciesType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActiveForwardProxyPoliciesType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActiveForwardProxyPoliciesTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActiveForwardProxyPoliciesType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetForwardProxyPoliciesDRefInfo()

}

func (m *ActiveForwardProxyPoliciesType) GetForwardProxyPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetForwardProxyPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ActiveForwardProxyPoliciesType.forward_proxy_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("forward_proxy_policy.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "forward_proxy_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "forward_proxy_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetForwardProxyPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActiveForwardProxyPoliciesType) GetForwardProxyPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "forward_proxy_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: forward_proxy_policy")
	}
	for i, vref := range m.GetForwardProxyPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActiveForwardProxyPoliciesType.forward_proxy_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "forward_proxy_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateActiveForwardProxyPoliciesType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActiveForwardProxyPoliciesType) ForwardProxyPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for forward_proxy_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forward_proxy_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forward_proxy_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forward_proxy_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActiveForwardProxyPoliciesType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActiveForwardProxyPoliciesType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActiveForwardProxyPoliciesType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["forward_proxy_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("forward_proxy_policies"))
		if err := fv(ctx, m.GetForwardProxyPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActiveForwardProxyPoliciesTypeValidator = func() *ValidateActiveForwardProxyPoliciesType {
	v := &ValidateActiveForwardProxyPoliciesType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyPolicies := v.ForwardProxyPoliciesValidationRuleHandler
	rulesForwardProxyPolicies := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhForwardProxyPolicies(rulesForwardProxyPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActiveForwardProxyPoliciesType.forward_proxy_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_policies"] = vFn

	return v
}()

func ActiveForwardProxyPoliciesTypeValidator() db.Validator {
	return DefaultActiveForwardProxyPoliciesTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ActiveNetworkPoliciesType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActiveNetworkPoliciesType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActiveNetworkPoliciesType) DeepCopy() *ActiveNetworkPoliciesType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActiveNetworkPoliciesType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActiveNetworkPoliciesType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActiveNetworkPoliciesType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActiveNetworkPoliciesTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActiveNetworkPoliciesType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNetworkPoliciesDRefInfo()

}

func (m *ActiveNetworkPoliciesType) GetNetworkPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetNetworkPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ActiveNetworkPoliciesType.network_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_policy_view.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_policy_view.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetNetworkPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActiveNetworkPoliciesType) GetNetworkPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_policy_view.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_policy_view")
	}
	for i, vref := range m.GetNetworkPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActiveNetworkPoliciesType.network_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_policy_view.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateActiveNetworkPoliciesType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActiveNetworkPoliciesType) NetworkPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for network_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActiveNetworkPoliciesType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActiveNetworkPoliciesType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActiveNetworkPoliciesType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("network_policies"))
		if err := fv(ctx, m.GetNetworkPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActiveNetworkPoliciesTypeValidator = func() *ValidateActiveNetworkPoliciesType {
	v := &ValidateActiveNetworkPoliciesType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkPolicies := v.NetworkPoliciesValidationRuleHandler
	rulesNetworkPolicies := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhNetworkPolicies(rulesNetworkPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActiveNetworkPoliciesType.network_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policies"] = vFn

	return v
}()

func ActiveNetworkPoliciesTypeValidator() db.Validator {
	return DefaultActiveNetworkPoliciesTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetFastAclChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFastAclChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetFastAclChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFastAclChoice() == nil {
		return nil, nil
	}
	switch m.GetFastAclChoice().(type) {
	case *CreateSpecType_DisableFastAcl:

		return nil, nil

	case *CreateSpecType_ActiveFastAcls:

		drInfos, err := m.GetActiveFastAcls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveFastAcls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_fast_acls." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_FastAclSet:

		vref := m.GetFastAclSet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("fast_acl_set.Object")
		dri := db.DRefInfo{
			RefdType:   "fast_acl_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "fast_acl_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetForwardProxyPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyPolicyChoice().(type) {
	case *CreateSpecType_DisableForwardProxyPolicy:

		return nil, nil

	case *CreateSpecType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ForwardProxyPolicySet:

		vref := m.GetForwardProxyPolicySet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("service_policy_set.Object")
		dri := db.DRefInfo{
			RefdType:   "service_policy_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "forward_proxy_policy_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *CreateSpecType_DisableNetworkPolicy:

		return nil, nil

	case *CreateSpecType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_NetworkPolicySet:

		vref := m.GetNetworkPolicySet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_policy_set.Object")
		dri := db.DRefInfo{
			RefdType:   "network_policy_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_policy_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *CreateSpecType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) FastAclChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for fast_acl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) FastAclChoiceFastAclSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateCreateSpecType) ForwardProxyPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ForwardProxyPolicyChoiceForwardProxyPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateCreateSpecType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NetworkPolicyChoiceNetworkPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fast_acl_choice"]; exists {
		val := m.GetFastAclChoice()
		vOpts := append(opts,
			db.WithValidateField("fast_acl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFastAclChoice().(type) {
	case *CreateSpecType_DisableFastAcl:
		if fv, exists := v.FldValidators["fast_acl_choice.disable_fast_acl"]; exists {
			val := m.GetFastAclChoice().(*CreateSpecType_DisableFastAcl).DisableFastAcl
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("disable_fast_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveFastAcls:
		if fv, exists := v.FldValidators["fast_acl_choice.active_fast_acls"]; exists {
			val := m.GetFastAclChoice().(*CreateSpecType_ActiveFastAcls).ActiveFastAcls
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("active_fast_acls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_FastAclSet:
		if fv, exists := v.FldValidators["fast_acl_choice.fast_acl_set"]; exists {
			val := m.GetFastAclChoice().(*CreateSpecType_FastAclSet).FastAclSet
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("fast_acl_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_policy_choice"]; exists {
		val := m.GetForwardProxyPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyPolicyChoice().(type) {
	case *CreateSpecType_DisableForwardProxyPolicy:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.disable_forward_proxy_policy"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*CreateSpecType_DisableForwardProxyPolicy).DisableForwardProxyPolicy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("disable_forward_proxy_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*CreateSpecType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ForwardProxyPolicySet:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.forward_proxy_policy_set"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*CreateSpecType_ForwardProxyPolicySet).ForwardProxyPolicySet
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("forward_proxy_policy_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *CreateSpecType_DisableNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.disable_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*CreateSpecType_DisableNetworkPolicy).DisableNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("disable_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*CreateSpecType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NetworkPolicySet:
		if fv, exists := v.FldValidators["network_policy_choice.network_policy_set"]; exists {
			val := m.GetNetworkPolicyChoice().(*CreateSpecType_NetworkPolicySet).NetworkPolicySet
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("network_policy_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*CreateSpecType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFastAclChoice := v.FastAclChoiceValidationRuleHandler
	rulesFastAclChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFastAclChoice(rulesFastAclChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.fast_acl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acl_choice"] = vFn

	vrhFastAclChoiceFastAclSet := v.FastAclChoiceFastAclSetValidationRuleHandler
	rulesFastAclChoiceFastAclSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["fast_acl_choice.fast_acl_set"], err = vrhFastAclChoiceFastAclSet(rulesFastAclChoiceFastAclSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.fast_acl_choice_fast_acl_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["fast_acl_choice.fast_acl_set"] = vFnMap["fast_acl_choice.fast_acl_set"]

	vrhForwardProxyPolicyChoice := v.ForwardProxyPolicyChoiceValidationRuleHandler
	rulesForwardProxyPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyPolicyChoice(rulesForwardProxyPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.forward_proxy_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_policy_choice"] = vFn

	vrhForwardProxyPolicyChoiceForwardProxyPolicySet := v.ForwardProxyPolicyChoiceForwardProxyPolicySetValidationRuleHandler
	rulesForwardProxyPolicyChoiceForwardProxyPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["forward_proxy_policy_choice.forward_proxy_policy_set"], err = vrhForwardProxyPolicyChoiceForwardProxyPolicySet(rulesForwardProxyPolicyChoiceForwardProxyPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.forward_proxy_policy_choice_forward_proxy_policy_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["forward_proxy_policy_choice.forward_proxy_policy_set"] = vFnMap["forward_proxy_policy_choice.forward_proxy_policy_set"]

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhNetworkPolicyChoiceNetworkPolicySet := v.NetworkPolicyChoiceNetworkPolicySetValidationRuleHandler
	rulesNetworkPolicyChoiceNetworkPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["network_policy_choice.network_policy_set"], err = vrhNetworkPolicyChoiceNetworkPolicySet(rulesNetworkPolicyChoiceNetworkPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.network_policy_choice_network_policy_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_policy_choice.network_policy_set"] = vFnMap["network_policy_choice.network_policy_set"]

	v.FldValidators["fast_acl_choice.active_fast_acls"] = ActiveFastACLsTypeValidator().Validate

	v.FldValidators["forward_proxy_policy_choice.active_forward_proxy_policies"] = ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetFastAclChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFastAclChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetFastAclChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFastAclChoice() == nil {
		return nil, nil
	}
	switch m.GetFastAclChoice().(type) {
	case *GetSpecType_DisableFastAcl:

		return nil, nil

	case *GetSpecType_ActiveFastAcls:

		drInfos, err := m.GetActiveFastAcls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveFastAcls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_fast_acls." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_FastAclSet:

		vref := m.GetFastAclSet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("fast_acl_set.Object")
		dri := db.DRefInfo{
			RefdType:   "fast_acl_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "fast_acl_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetForwardProxyPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyPolicyChoice().(type) {
	case *GetSpecType_DisableForwardProxyPolicy:

		return nil, nil

	case *GetSpecType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ForwardProxyPolicySet:

		vref := m.GetForwardProxyPolicySet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("service_policy_set.Object")
		dri := db.DRefInfo{
			RefdType:   "service_policy_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "forward_proxy_policy_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *GetSpecType_DisableNetworkPolicy:

		return nil, nil

	case *GetSpecType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_NetworkPolicySet:

		vref := m.GetNetworkPolicySet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_policy_set.Object")
		dri := db.DRefInfo{
			RefdType:   "network_policy_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_policy_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) FastAclChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for fast_acl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) FastAclChoiceFastAclSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateGetSpecType) ForwardProxyPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ForwardProxyPolicyChoiceForwardProxyPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateGetSpecType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) NetworkPolicyChoiceNetworkPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fast_acl_choice"]; exists {
		val := m.GetFastAclChoice()
		vOpts := append(opts,
			db.WithValidateField("fast_acl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFastAclChoice().(type) {
	case *GetSpecType_DisableFastAcl:
		if fv, exists := v.FldValidators["fast_acl_choice.disable_fast_acl"]; exists {
			val := m.GetFastAclChoice().(*GetSpecType_DisableFastAcl).DisableFastAcl
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("disable_fast_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveFastAcls:
		if fv, exists := v.FldValidators["fast_acl_choice.active_fast_acls"]; exists {
			val := m.GetFastAclChoice().(*GetSpecType_ActiveFastAcls).ActiveFastAcls
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("active_fast_acls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_FastAclSet:
		if fv, exists := v.FldValidators["fast_acl_choice.fast_acl_set"]; exists {
			val := m.GetFastAclChoice().(*GetSpecType_FastAclSet).FastAclSet
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("fast_acl_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_policy_choice"]; exists {
		val := m.GetForwardProxyPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyPolicyChoice().(type) {
	case *GetSpecType_DisableForwardProxyPolicy:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.disable_forward_proxy_policy"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*GetSpecType_DisableForwardProxyPolicy).DisableForwardProxyPolicy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("disable_forward_proxy_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*GetSpecType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ForwardProxyPolicySet:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.forward_proxy_policy_set"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*GetSpecType_ForwardProxyPolicySet).ForwardProxyPolicySet
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("forward_proxy_policy_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *GetSpecType_DisableNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.disable_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*GetSpecType_DisableNetworkPolicy).DisableNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("disable_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GetSpecType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NetworkPolicySet:
		if fv, exists := v.FldValidators["network_policy_choice.network_policy_set"]; exists {
			val := m.GetNetworkPolicyChoice().(*GetSpecType_NetworkPolicySet).NetworkPolicySet
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("network_policy_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*GetSpecType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFastAclChoice := v.FastAclChoiceValidationRuleHandler
	rulesFastAclChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFastAclChoice(rulesFastAclChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.fast_acl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acl_choice"] = vFn

	vrhFastAclChoiceFastAclSet := v.FastAclChoiceFastAclSetValidationRuleHandler
	rulesFastAclChoiceFastAclSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["fast_acl_choice.fast_acl_set"], err = vrhFastAclChoiceFastAclSet(rulesFastAclChoiceFastAclSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.fast_acl_choice_fast_acl_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["fast_acl_choice.fast_acl_set"] = vFnMap["fast_acl_choice.fast_acl_set"]

	vrhForwardProxyPolicyChoice := v.ForwardProxyPolicyChoiceValidationRuleHandler
	rulesForwardProxyPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyPolicyChoice(rulesForwardProxyPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.forward_proxy_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_policy_choice"] = vFn

	vrhForwardProxyPolicyChoiceForwardProxyPolicySet := v.ForwardProxyPolicyChoiceForwardProxyPolicySetValidationRuleHandler
	rulesForwardProxyPolicyChoiceForwardProxyPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["forward_proxy_policy_choice.forward_proxy_policy_set"], err = vrhForwardProxyPolicyChoiceForwardProxyPolicySet(rulesForwardProxyPolicyChoiceForwardProxyPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.forward_proxy_policy_choice_forward_proxy_policy_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["forward_proxy_policy_choice.forward_proxy_policy_set"] = vFnMap["forward_proxy_policy_choice.forward_proxy_policy_set"]

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhNetworkPolicyChoiceNetworkPolicySet := v.NetworkPolicyChoiceNetworkPolicySetValidationRuleHandler
	rulesNetworkPolicyChoiceNetworkPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["network_policy_choice.network_policy_set"], err = vrhNetworkPolicyChoiceNetworkPolicySet(rulesNetworkPolicyChoiceNetworkPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.network_policy_choice_network_policy_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_policy_choice.network_policy_set"] = vFnMap["network_policy_choice.network_policy_set"]

	v.FldValidators["fast_acl_choice.active_fast_acls"] = ActiveFastACLsTypeValidator().Validate

	v.FldValidators["forward_proxy_policy_choice.active_forward_proxy_policies"] = ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetEnhancedFirewallPoliciesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetEnhancedFirewallPoliciesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFastAclConfigModeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFastAclConfigModeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFastAclSetDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFastAclSetDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyPolicyConfigModeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyPolicyConfigModeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyPolicySetDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyPolicySetDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyConfigModeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyConfigModeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicySetDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicySetDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetEnhancedFirewallPoliciesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetEnhancedFirewallPolicies()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.enhanced_firewall_policies[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "enhanced_firewall_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "enhanced_firewall_policies",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetEnhancedFirewallPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetEnhancedFirewallPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "enhanced_firewall_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: enhanced_firewall_policy")
	}
	for _, ref := range m.GetEnhancedFirewallPolicies() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetFastAclConfigModeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFastAclConfigMode() == nil {
		return nil, nil
	}
	switch m.GetFastAclConfigMode().(type) {
	case *GlobalSpecType_DisableFastAcl:

		return nil, nil

	case *GlobalSpecType_ActiveFastAcls:

		drInfos, err := m.GetActiveFastAcls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveFastAcls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_fast_acls." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_FastAclLegacyMode:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetFastAclSetDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetFastAclSet()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.fast_acl_set[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "fast_acl_set.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "fast_acl_set",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetFastAclSetDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetFastAclSetDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "fast_acl_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: fast_acl_set")
	}
	for _, ref := range m.GetFastAclSet() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetForwardProxyPolicyConfigModeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyPolicyConfigMode() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyPolicyConfigMode().(type) {
	case *GlobalSpecType_DisableForwardProxyPolicy:

		return nil, nil

	case *GlobalSpecType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ForwardProxyPolicyLegacyMode:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetForwardProxyPolicySetDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetForwardProxyPolicySet()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.forward_proxy_policy_set[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_set.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "forward_proxy_policy_set",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetForwardProxyPolicySetDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetForwardProxyPolicySetDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_set")
	}
	for _, ref := range m.GetForwardProxyPolicySet() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetNetworkPolicyConfigModeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyConfigMode() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyConfigMode().(type) {
	case *GlobalSpecType_DisableNetworkPolicy:

		return nil, nil

	case *GlobalSpecType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_NetworkPolicyLegacyMode:

		return nil, nil

	case *GlobalSpecType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetNetworkPolicySetDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetNetworkPolicySet()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.network_policy_set[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_policy_set.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_policy_set",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetNetworkPolicySetDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetNetworkPolicySetDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_policy_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_policy_set")
	}
	for _, ref := range m.GetNetworkPolicySet() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) NetworkPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for network_policy_set")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_policy_set")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_policy_set")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_policy_set")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ForwardProxyPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for forward_proxy_policy_set")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forward_proxy_policy_set")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forward_proxy_policy_set")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forward_proxy_policy_set")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) FastAclSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for fast_acl_set")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fast_acl_set")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fast_acl_set")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fast_acl_set")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) EnhancedFirewallPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for enhanced_firewall_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for enhanced_firewall_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated enhanced_firewall_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items enhanced_firewall_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enhanced_firewall_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("enhanced_firewall_policies"))
		if err := fv(ctx, m.GetEnhancedFirewallPolicies(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetFastAclConfigMode().(type) {
	case *GlobalSpecType_DisableFastAcl:
		if fv, exists := v.FldValidators["fast_acl_config_mode.disable_fast_acl"]; exists {
			val := m.GetFastAclConfigMode().(*GlobalSpecType_DisableFastAcl).DisableFastAcl
			vOpts := append(opts,
				db.WithValidateField("fast_acl_config_mode"),
				db.WithValidateField("disable_fast_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveFastAcls:
		if fv, exists := v.FldValidators["fast_acl_config_mode.active_fast_acls"]; exists {
			val := m.GetFastAclConfigMode().(*GlobalSpecType_ActiveFastAcls).ActiveFastAcls
			vOpts := append(opts,
				db.WithValidateField("fast_acl_config_mode"),
				db.WithValidateField("active_fast_acls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_FastAclLegacyMode:
		if fv, exists := v.FldValidators["fast_acl_config_mode.fast_acl_legacy_mode"]; exists {
			val := m.GetFastAclConfigMode().(*GlobalSpecType_FastAclLegacyMode).FastAclLegacyMode
			vOpts := append(opts,
				db.WithValidateField("fast_acl_config_mode"),
				db.WithValidateField("fast_acl_legacy_mode"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["fast_acl_set"]; exists {
		vOpts := append(opts, db.WithValidateField("fast_acl_set"))
		if err := fv(ctx, m.GetFastAclSet(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetForwardProxyPolicyConfigMode().(type) {
	case *GlobalSpecType_DisableForwardProxyPolicy:
		if fv, exists := v.FldValidators["forward_proxy_policy_config_mode.disable_forward_proxy_policy"]; exists {
			val := m.GetForwardProxyPolicyConfigMode().(*GlobalSpecType_DisableForwardProxyPolicy).DisableForwardProxyPolicy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_config_mode"),
				db.WithValidateField("disable_forward_proxy_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_policy_config_mode.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyPolicyConfigMode().(*GlobalSpecType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_config_mode"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ForwardProxyPolicyLegacyMode:
		if fv, exists := v.FldValidators["forward_proxy_policy_config_mode.forward_proxy_policy_legacy_mode"]; exists {
			val := m.GetForwardProxyPolicyConfigMode().(*GlobalSpecType_ForwardProxyPolicyLegacyMode).ForwardProxyPolicyLegacyMode
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_config_mode"),
				db.WithValidateField("forward_proxy_policy_legacy_mode"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_policy_set"]; exists {
		vOpts := append(opts, db.WithValidateField("forward_proxy_policy_set"))
		if err := fv(ctx, m.GetForwardProxyPolicySet(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetNetworkPolicyConfigMode().(type) {
	case *GlobalSpecType_DisableNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_config_mode.disable_network_policy"]; exists {
			val := m.GetNetworkPolicyConfigMode().(*GlobalSpecType_DisableNetworkPolicy).DisableNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_config_mode"),
				db.WithValidateField("disable_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_config_mode.active_network_policies"]; exists {
			val := m.GetNetworkPolicyConfigMode().(*GlobalSpecType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_config_mode"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NetworkPolicyLegacyMode:
		if fv, exists := v.FldValidators["network_policy_config_mode.network_policy_legacy_mode"]; exists {
			val := m.GetNetworkPolicyConfigMode().(*GlobalSpecType_NetworkPolicyLegacyMode).NetworkPolicyLegacyMode
			vOpts := append(opts,
				db.WithValidateField("network_policy_config_mode"),
				db.WithValidateField("network_policy_legacy_mode"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_config_mode.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyConfigMode().(*GlobalSpecType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_config_mode"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_set"]; exists {
		vOpts := append(opts, db.WithValidateField("network_policy_set"))
		if err := fv(ctx, m.GetNetworkPolicySet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkPolicySet := v.NetworkPolicySetValidationRuleHandler
	rulesNetworkPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhNetworkPolicySet(rulesNetworkPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_policy_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_set"] = vFn

	vrhForwardProxyPolicySet := v.ForwardProxyPolicySetValidationRuleHandler
	rulesForwardProxyPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhForwardProxyPolicySet(rulesForwardProxyPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.forward_proxy_policy_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_policy_set"] = vFn

	vrhFastAclSet := v.FastAclSetValidationRuleHandler
	rulesFastAclSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhFastAclSet(rulesFastAclSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.fast_acl_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acl_set"] = vFn

	vrhEnhancedFirewallPolicies := v.EnhancedFirewallPoliciesValidationRuleHandler
	rulesEnhancedFirewallPolicies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhEnhancedFirewallPolicies(rulesEnhancedFirewallPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.enhanced_firewall_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enhanced_firewall_policies"] = vFn

	v.FldValidators["fast_acl_config_mode.active_fast_acls"] = ActiveFastACLsTypeValidator().Validate

	v.FldValidators["forward_proxy_policy_config_mode.active_forward_proxy_policies"] = ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["network_policy_config_mode.active_network_policies"] = ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_config_mode.active_enhanced_firewall_policies"] = ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkFirewallStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkFirewallStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkFirewallStatus) DeepCopy() *NetworkFirewallStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkFirewallStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkFirewallStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkFirewallStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkFirewallStatusValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkFirewallStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkFirewallStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkFirewallStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkFirewallStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["installed"]; exists {

		vOpts := append(opts, db.WithValidateField("installed"))
		if err := fv(ctx, m.GetInstalled(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkFirewallStatusValidator = func() *ValidateNetworkFirewallStatus {
	v := &ValidateNetworkFirewallStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkFirewallStatusValidator() db.Validator {
	return DefaultNetworkFirewallStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetFastAclChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFastAclChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetForwardProxyPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetFastAclChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFastAclChoice() == nil {
		return nil, nil
	}
	switch m.GetFastAclChoice().(type) {
	case *ReplaceSpecType_DisableFastAcl:

		return nil, nil

	case *ReplaceSpecType_ActiveFastAcls:

		drInfos, err := m.GetActiveFastAcls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveFastAcls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_fast_acls." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_FastAclSet:

		vref := m.GetFastAclSet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("fast_acl_set.Object")
		dri := db.DRefInfo{
			RefdType:   "fast_acl_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "fast_acl_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetForwardProxyPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyPolicyChoice().(type) {
	case *ReplaceSpecType_DisableForwardProxyPolicy:

		return nil, nil

	case *ReplaceSpecType_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ForwardProxyPolicySet:

		vref := m.GetForwardProxyPolicySet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("service_policy_set.Object")
		dri := db.DRefInfo{
			RefdType:   "service_policy_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "forward_proxy_policy_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *ReplaceSpecType_DisableNetworkPolicy:

		return nil, nil

	case *ReplaceSpecType_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_NetworkPolicySet:

		vref := m.GetNetworkPolicySet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_policy_set.Object")
		dri := db.DRefInfo{
			RefdType:   "network_policy_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_policy_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ReplaceSpecType_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) FastAclChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for fast_acl_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) FastAclChoiceFastAclSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateReplaceSpecType) ForwardProxyPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ForwardProxyPolicyChoiceForwardProxyPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateReplaceSpecType) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NetworkPolicyChoiceNetworkPolicySetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_views.ObjectRefTypeValidator().Validate, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fast_acl_choice"]; exists {
		val := m.GetFastAclChoice()
		vOpts := append(opts,
			db.WithValidateField("fast_acl_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFastAclChoice().(type) {
	case *ReplaceSpecType_DisableFastAcl:
		if fv, exists := v.FldValidators["fast_acl_choice.disable_fast_acl"]; exists {
			val := m.GetFastAclChoice().(*ReplaceSpecType_DisableFastAcl).DisableFastAcl
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("disable_fast_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveFastAcls:
		if fv, exists := v.FldValidators["fast_acl_choice.active_fast_acls"]; exists {
			val := m.GetFastAclChoice().(*ReplaceSpecType_ActiveFastAcls).ActiveFastAcls
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("active_fast_acls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_FastAclSet:
		if fv, exists := v.FldValidators["fast_acl_choice.fast_acl_set"]; exists {
			val := m.GetFastAclChoice().(*ReplaceSpecType_FastAclSet).FastAclSet
			vOpts := append(opts,
				db.WithValidateField("fast_acl_choice"),
				db.WithValidateField("fast_acl_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_policy_choice"]; exists {
		val := m.GetForwardProxyPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyPolicyChoice().(type) {
	case *ReplaceSpecType_DisableForwardProxyPolicy:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.disable_forward_proxy_policy"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*ReplaceSpecType_DisableForwardProxyPolicy).DisableForwardProxyPolicy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("disable_forward_proxy_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*ReplaceSpecType_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ForwardProxyPolicySet:
		if fv, exists := v.FldValidators["forward_proxy_policy_choice.forward_proxy_policy_set"]; exists {
			val := m.GetForwardProxyPolicyChoice().(*ReplaceSpecType_ForwardProxyPolicySet).ForwardProxyPolicySet
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_policy_choice"),
				db.WithValidateField("forward_proxy_policy_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *ReplaceSpecType_DisableNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.disable_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*ReplaceSpecType_DisableNetworkPolicy).DisableNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("disable_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*ReplaceSpecType_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NetworkPolicySet:
		if fv, exists := v.FldValidators["network_policy_choice.network_policy_set"]; exists {
			val := m.GetNetworkPolicyChoice().(*ReplaceSpecType_NetworkPolicySet).NetworkPolicySet
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("network_policy_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*ReplaceSpecType_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFastAclChoice := v.FastAclChoiceValidationRuleHandler
	rulesFastAclChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFastAclChoice(rulesFastAclChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.fast_acl_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acl_choice"] = vFn

	vrhFastAclChoiceFastAclSet := v.FastAclChoiceFastAclSetValidationRuleHandler
	rulesFastAclChoiceFastAclSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["fast_acl_choice.fast_acl_set"], err = vrhFastAclChoiceFastAclSet(rulesFastAclChoiceFastAclSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.fast_acl_choice_fast_acl_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["fast_acl_choice.fast_acl_set"] = vFnMap["fast_acl_choice.fast_acl_set"]

	vrhForwardProxyPolicyChoice := v.ForwardProxyPolicyChoiceValidationRuleHandler
	rulesForwardProxyPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyPolicyChoice(rulesForwardProxyPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.forward_proxy_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_policy_choice"] = vFn

	vrhForwardProxyPolicyChoiceForwardProxyPolicySet := v.ForwardProxyPolicyChoiceForwardProxyPolicySetValidationRuleHandler
	rulesForwardProxyPolicyChoiceForwardProxyPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["forward_proxy_policy_choice.forward_proxy_policy_set"], err = vrhForwardProxyPolicyChoiceForwardProxyPolicySet(rulesForwardProxyPolicyChoiceForwardProxyPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.forward_proxy_policy_choice_forward_proxy_policy_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["forward_proxy_policy_choice.forward_proxy_policy_set"] = vFnMap["forward_proxy_policy_choice.forward_proxy_policy_set"]

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhNetworkPolicyChoiceNetworkPolicySet := v.NetworkPolicyChoiceNetworkPolicySetValidationRuleHandler
	rulesNetworkPolicyChoiceNetworkPolicySet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFnMap["network_policy_choice.network_policy_set"], err = vrhNetworkPolicyChoiceNetworkPolicySet(rulesNetworkPolicyChoiceNetworkPolicySet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.network_policy_choice_network_policy_set: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_policy_choice.network_policy_set"] = vFnMap["network_policy_choice.network_policy_set"]

	v.FldValidators["fast_acl_choice.active_fast_acls"] = ActiveFastACLsTypeValidator().Validate

	v.FldValidators["forward_proxy_policy_choice.active_forward_proxy_policies"] = ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}

}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}

}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}

}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

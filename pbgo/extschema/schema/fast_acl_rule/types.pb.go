// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/fast_acl_rule/types.proto

package fast_acl_rule

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FastAclRuleSimpleAction
//
// x-displayName: "Simple Action"
// FastAclRuleSimpleAction specifies simple action like PASS or DENY
type FastAclRuleSimpleAction int32

const (
	// x-displayName: "Deny"
	// Drop the traffic
	DENY FastAclRuleSimpleAction = 0
	// x-displayName: "Allow"
	// Forward the traffic
	ALLOW FastAclRuleSimpleAction = 1
)

var FastAclRuleSimpleAction_name = map[int32]string{
	0: "DENY",
	1: "ALLOW",
}

var FastAclRuleSimpleAction_value = map[string]int32{
	"DENY":  0,
	"ALLOW": 1,
}

func (FastAclRuleSimpleAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d96eb17b9eb27ae, []int{0}
}

//  FastAclRuleAction
//
//  x-displayName: "Action"
//  FastAclRuleAction specifies possible action to be applied on traffic,
//  possible action include dropping, forwarding or ratelimiting the traffic
type FastAclRuleAction struct {
	// action
	//
	// x-displayName: "action"
	// The type of action to perform
	//
	// Types that are valid to be assigned to Action:
	//	*FastAclRuleAction_SimpleAction
	//	*FastAclRuleAction_PolicerAction
	//	*FastAclRuleAction_ProtocolPolicerAction
	Action isFastAclRuleAction_Action `protobuf_oneof:"action"`
}

func (m *FastAclRuleAction) Reset()      { *m = FastAclRuleAction{} }
func (*FastAclRuleAction) ProtoMessage() {}
func (*FastAclRuleAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d96eb17b9eb27ae, []int{0}
}
func (m *FastAclRuleAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastAclRuleAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FastAclRuleAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastAclRuleAction.Merge(m, src)
}
func (m *FastAclRuleAction) XXX_Size() int {
	return m.Size()
}
func (m *FastAclRuleAction) XXX_DiscardUnknown() {
	xxx_messageInfo_FastAclRuleAction.DiscardUnknown(m)
}

var xxx_messageInfo_FastAclRuleAction proto.InternalMessageInfo

type isFastAclRuleAction_Action interface {
	isFastAclRuleAction_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FastAclRuleAction_SimpleAction struct {
	SimpleAction FastAclRuleSimpleAction `protobuf:"varint,1,opt,name=simple_action,json=simpleAction,proto3,enum=ves.io.schema.fast_acl_rule.FastAclRuleSimpleAction,oneof" json:"simple_action,omitempty"`
}
type FastAclRuleAction_PolicerAction struct {
	PolicerAction *schema.PolicerRefType `protobuf:"bytes,2,opt,name=policer_action,json=policerAction,proto3,oneof" json:"policer_action,omitempty"`
}
type FastAclRuleAction_ProtocolPolicerAction struct {
	ProtocolPolicerAction *schema.ProtocolPolicerRefType `protobuf:"bytes,3,opt,name=protocol_policer_action,json=protocolPolicerAction,proto3,oneof" json:"protocol_policer_action,omitempty"`
}

func (*FastAclRuleAction_SimpleAction) isFastAclRuleAction_Action()          {}
func (*FastAclRuleAction_PolicerAction) isFastAclRuleAction_Action()         {}
func (*FastAclRuleAction_ProtocolPolicerAction) isFastAclRuleAction_Action() {}

func (m *FastAclRuleAction) GetAction() isFastAclRuleAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *FastAclRuleAction) GetSimpleAction() FastAclRuleSimpleAction {
	if x, ok := m.GetAction().(*FastAclRuleAction_SimpleAction); ok {
		return x.SimpleAction
	}
	return DENY
}

func (m *FastAclRuleAction) GetPolicerAction() *schema.PolicerRefType {
	if x, ok := m.GetAction().(*FastAclRuleAction_PolicerAction); ok {
		return x.PolicerAction
	}
	return nil
}

func (m *FastAclRuleAction) GetProtocolPolicerAction() *schema.ProtocolPolicerRefType {
	if x, ok := m.GetAction().(*FastAclRuleAction_ProtocolPolicerAction); ok {
		return x.ProtocolPolicerAction
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FastAclRuleAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FastAclRuleAction_SimpleAction)(nil),
		(*FastAclRuleAction_PolicerAction)(nil),
		(*FastAclRuleAction_ProtocolPolicerAction)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of `fast_acl_rule`
type GlobalSpecType struct {
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be applied if traffic matched rule (allow, deny or police)
	Action *FastAclRuleAction `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// ports
	//
	// x-displayName: "Source Ports"
	// x-example: ALL / DNS / 1234
	// L4 port numbers to match
	Port []*schema.PortValueType `protobuf:"bytes,3,rep,name=port,proto3" json:"port,omitempty"`
	// source
	//
	// x-displayName: "Source"
	// x-required
	// IP match criteria, source can be either a prefix list or
	// reference to IP prefix set
	//
	// Types that are valid to be assigned to Source:
	//	*GlobalSpecType_Prefix
	//	*GlobalSpecType_IpPrefixSet
	Source isGlobalSpecType_Source `protobuf_oneof:"source"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d96eb17b9eb27ae, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_Source interface {
	isGlobalSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Prefix struct {
	Prefix *schema.PrefixListType `protobuf:"bytes,4,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type GlobalSpecType_IpPrefixSet struct {
	IpPrefixSet *schema.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,proto3,oneof" json:"ip_prefix_set,omitempty"`
}

func (*GlobalSpecType_Prefix) isGlobalSpecType_Source()      {}
func (*GlobalSpecType_IpPrefixSet) isGlobalSpecType_Source() {}

func (m *GlobalSpecType) GetSource() isGlobalSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *GlobalSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *GlobalSpecType) GetPort() []*schema.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *GlobalSpecType) GetPrefix() *schema.PrefixListType {
	if x, ok := m.GetSource().(*GlobalSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *GlobalSpecType) GetIpPrefixSet() *schema.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*GlobalSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Prefix)(nil),
		(*GlobalSpecType_IpPrefixSet)(nil),
	}
}

// Create Fast ACL rule
//
// x-displayName: "Create Fast ACL Rule"
// Create a new Fast ACL rule, `fast_acl_rule` has specification to match source IP, source port and action to apply
type CreateSpecType struct {
	Action *FastAclRuleAction      `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Port   []*schema.PortValueType `protobuf:"bytes,3,rep,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*CreateSpecType_Prefix
	//	*CreateSpecType_IpPrefixSet
	Source isCreateSpecType_Source `protobuf_oneof:"source"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d96eb17b9eb27ae, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_Source interface {
	isCreateSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Prefix struct {
	Prefix *schema.PrefixListType `protobuf:"bytes,4,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type CreateSpecType_IpPrefixSet struct {
	IpPrefixSet *schema.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,proto3,oneof" json:"ip_prefix_set,omitempty"`
}

func (*CreateSpecType_Prefix) isCreateSpecType_Source()      {}
func (*CreateSpecType_IpPrefixSet) isCreateSpecType_Source() {}

func (m *CreateSpecType) GetSource() isCreateSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CreateSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *CreateSpecType) GetPort() []*schema.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *CreateSpecType) GetPrefix() *schema.PrefixListType {
	if x, ok := m.GetSource().(*CreateSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *CreateSpecType) GetIpPrefixSet() *schema.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*CreateSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Prefix)(nil),
		(*CreateSpecType_IpPrefixSet)(nil),
	}
}

// Replace Fast ACL rule
//
// x-displayName: "Replace Fast ACL Rule"
// Replace a given Fast ACL rule, `fast_acl_rule` has specification to match source IP, source port, protocol and action to apply
type ReplaceSpecType struct {
	Action *FastAclRuleAction      `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Port   []*schema.PortValueType `protobuf:"bytes,3,rep,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*ReplaceSpecType_Prefix
	//	*ReplaceSpecType_IpPrefixSet
	Source isReplaceSpecType_Source `protobuf_oneof:"source"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d96eb17b9eb27ae, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_Source interface {
	isReplaceSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Prefix struct {
	Prefix *schema.PrefixListType `protobuf:"bytes,4,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type ReplaceSpecType_IpPrefixSet struct {
	IpPrefixSet *schema.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,proto3,oneof" json:"ip_prefix_set,omitempty"`
}

func (*ReplaceSpecType_Prefix) isReplaceSpecType_Source()      {}
func (*ReplaceSpecType_IpPrefixSet) isReplaceSpecType_Source() {}

func (m *ReplaceSpecType) GetSource() isReplaceSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ReplaceSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ReplaceSpecType) GetPort() []*schema.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *ReplaceSpecType) GetPrefix() *schema.PrefixListType {
	if x, ok := m.GetSource().(*ReplaceSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *ReplaceSpecType) GetIpPrefixSet() *schema.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*ReplaceSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Prefix)(nil),
		(*ReplaceSpecType_IpPrefixSet)(nil),
	}
}

// Get Fast ACL rule
//
// x-displayName: "Get Fast ACL Rule"
// Get a Fast ACL rule
type GetSpecType struct {
	Action *FastAclRuleAction      `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Port   []*schema.PortValueType `protobuf:"bytes,3,rep,name=port,proto3" json:"port,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*GetSpecType_Prefix
	//	*GetSpecType_IpPrefixSet
	Source isGetSpecType_Source `protobuf_oneof:"source"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d96eb17b9eb27ae, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_Source interface {
	isGetSpecType_Source()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Prefix struct {
	Prefix *schema.PrefixListType `protobuf:"bytes,4,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type GetSpecType_IpPrefixSet struct {
	IpPrefixSet *schema.IpPrefixSetRefType `protobuf:"bytes,5,opt,name=ip_prefix_set,json=ipPrefixSet,proto3,oneof" json:"ip_prefix_set,omitempty"`
}

func (*GetSpecType_Prefix) isGetSpecType_Source()      {}
func (*GetSpecType_IpPrefixSet) isGetSpecType_Source() {}

func (m *GetSpecType) GetSource() isGetSpecType_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *GetSpecType) GetAction() *FastAclRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *GetSpecType) GetPort() []*schema.PortValueType {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *GetSpecType) GetPrefix() *schema.PrefixListType {
	if x, ok := m.GetSource().(*GetSpecType_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (m *GetSpecType) GetIpPrefixSet() *schema.IpPrefixSetRefType {
	if x, ok := m.GetSource().(*GetSpecType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Prefix)(nil),
		(*GetSpecType_IpPrefixSet)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.fast_acl_rule.FastAclRuleSimpleAction", FastAclRuleSimpleAction_name, FastAclRuleSimpleAction_value)
	golang_proto.RegisterEnum("ves.io.schema.fast_acl_rule.FastAclRuleSimpleAction", FastAclRuleSimpleAction_name, FastAclRuleSimpleAction_value)
	proto.RegisterType((*FastAclRuleAction)(nil), "ves.io.schema.fast_acl_rule.FastAclRuleAction")
	golang_proto.RegisterType((*FastAclRuleAction)(nil), "ves.io.schema.fast_acl_rule.FastAclRuleAction")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.fast_acl_rule.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.fast_acl_rule.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.fast_acl_rule.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.fast_acl_rule.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.fast_acl_rule.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.fast_acl_rule.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.fast_acl_rule.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.fast_acl_rule.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/fast_acl_rule/types.proto", fileDescriptor_6d96eb17b9eb27ae)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/fast_acl_rule/types.proto", fileDescriptor_6d96eb17b9eb27ae)
}

var fileDescriptor_6d96eb17b9eb27ae = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcf, 0x4f, 0x13, 0x4f,
	0x18, 0xc6, 0x77, 0xda, 0x6d, 0xbf, 0xfd, 0x4e, 0xa5, 0x96, 0x8d, 0x86, 0x5a, 0x70, 0x52, 0x9b,
	0x18, 0x89, 0x81, 0x5d, 0x2d, 0x46, 0x13, 0x13, 0x49, 0xa8, 0x0a, 0x48, 0x88, 0x3f, 0x16, 0xa3,
	0x51, 0x0f, 0x9b, 0xed, 0x32, 0x2d, 0x1b, 0xa7, 0xcc, 0x64, 0x76, 0xb6, 0xc2, 0x8d, 0xf8, 0x0f,
	0x68, 0xfc, 0x2b, 0x3c, 0x6b, 0xf4, 0x20, 0x17, 0x12, 0x2f, 0xc6, 0x53, 0x8f, 0x1c, 0x65, 0x7b,
	0xd1, 0x1b, 0xf1, 0xe8, 0xc9, 0x74, 0x76, 0x2b, 0x6c, 0x41, 0x03, 0x89, 0x07, 0x0f, 0xdc, 0xe6,
	0xdd, 0xe7, 0x79, 0x9f, 0x77, 0xe6, 0x93, 0xcd, 0x0c, 0x3c, 0xd7, 0xc2, 0x9e, 0xee, 0x52, 0xc3,
	0x73, 0x96, 0x70, 0xd3, 0x36, 0xea, 0xb6, 0x27, 0x2c, 0xdb, 0x21, 0x16, 0xf7, 0x09, 0x36, 0xc4,
	0x2a, 0xc3, 0x9e, 0xce, 0x38, 0x15, 0x54, 0x1b, 0x0e, 0x8d, 0x7a, 0x68, 0xd4, 0x63, 0xc6, 0xe2,
	0x78, 0xc3, 0x15, 0x4b, 0x7e, 0x4d, 0x77, 0x68, 0xd3, 0x68, 0xd0, 0x06, 0x35, 0x64, 0x4f, 0xcd,
	0xaf, 0xcb, 0x4a, 0x16, 0x72, 0x15, 0x66, 0x15, 0x87, 0xe2, 0x43, 0x97, 0xb1, 0x88, 0x84, 0xe1,
	0xb8, 0x40, 0x99, 0x70, 0xe9, 0x72, 0xb4, 0x83, 0xe2, 0xa9, 0xb8, 0xb8, 0x6b, 0x73, 0xc5, 0x91,
	0xb8, 0xd4, 0xb2, 0x89, 0xbb, 0x68, 0x0b, 0x1c, 0xa9, 0xa5, 0x3e, 0xd5, 0xc5, 0xcf, 0xac, 0x58,
	0x74, 0xf9, 0x6d, 0x02, 0x0e, 0x4e, 0xdb, 0x9e, 0x98, 0x72, 0x88, 0xe9, 0x13, 0x3c, 0xe5, 0x74,
	0x45, 0xed, 0x09, 0x1c, 0xf0, 0xdc, 0x26, 0x23, 0xd8, 0xb2, 0xe5, 0x87, 0x02, 0x28, 0x81, 0xd1,
	0x5c, 0xe5, 0x92, 0xfe, 0x07, 0x14, 0xfa, 0xae, 0x98, 0x05, 0xd9, 0x1c, 0x86, 0xcd, 0x2a, 0xe6,
	0x31, 0x6f, 0x57, 0xad, 0x4d, 0xc3, 0x1c, 0xa3, 0xc4, 0x75, 0x30, 0xef, 0xa5, 0x27, 0x4a, 0x60,
	0x34, 0x5b, 0x39, 0xdd, 0x97, 0x7e, 0x37, 0x34, 0x99, 0xb8, 0x7e, 0x7f, 0x95, 0xe1, 0x59, 0xc5,
	0x1c, 0x88, 0xda, 0xa2, 0x1c, 0x0b, 0x0e, 0xc9, 0x33, 0x38, 0x94, 0x58, 0x7d, 0x81, 0x49, 0x19,
	0x78, 0xb6, 0x3f, 0x30, 0x72, 0xef, 0x09, 0x3e, 0xc9, 0xe2, 0x4a, 0x38, 0xa0, 0xaa, 0xc1, 0x74,
	0x98, 0xa7, 0x65, 0x36, 0xd6, 0x01, 0x68, 0xaf, 0x03, 0x75, 0x4e, 0xcd, 0xa8, 0xf9, 0x54, 0xf9,
	0x63, 0x02, 0xe6, 0x66, 0x08, 0xad, 0xd9, 0x64, 0x81, 0x61, 0xa7, 0x9b, 0xa2, 0x4d, 0xf7, 0xcc,
	0x92, 0x55, 0xb6, 0xa2, 0x1f, 0x94, 0x55, 0x38, 0xcc, 0xec, 0x8d, 0xba, 0x06, 0x55, 0x46, 0xb9,
	0x28, 0x24, 0x4b, 0xc9, 0xd1, 0x6c, 0x65, 0x64, 0x0f, 0x13, 0x2e, 0x1e, 0xd8, 0xc4, 0xc7, 0xdd,
	0x99, 0xd5, 0xec, 0x87, 0x6f, 0x1b, 0xc9, 0xf4, 0x2b, 0x90, 0xcc, 0xaf, 0x01, 0x53, 0xb6, 0x69,
	0x57, 0x60, 0x9a, 0x71, 0x5c, 0x77, 0x57, 0x0a, 0xea, 0xfe, 0x50, 0xa5, 0x38, 0xef, 0x7a, 0x22,
	0x3a, 0x7b, 0x64, 0xd7, 0x66, 0xe0, 0x80, 0xcb, 0xac, 0xb0, 0xb0, 0x3c, 0x2c, 0x0a, 0x29, 0xd9,
	0x7f, 0xa6, 0xaf, 0xff, 0x16, 0x0b, 0x13, 0x16, 0xb0, 0xd8, 0xe1, 0x97, 0x75, 0x77, 0xbe, 0x5e,
	0xcd, 0x7c, 0x9f, 0x4c, 0x5d, 0x1e, 0x9b, 0x18, 0xbb, 0xd8, 0xe5, 0xe7, 0x51, 0x9f, 0x3b, 0x58,
	0xf2, 0x53, 0xdb, 0xeb, 0x20, 0x3d, 0xa7, 0x66, 0x12, 0xf9, 0xe4, 0x9c, 0x9a, 0x49, 0xe7, 0xff,
	0x2b, 0xbf, 0x4b, 0xc0, 0xdc, 0x75, 0x8e, 0x6d, 0x81, 0xff, 0x3a, 0xc5, 0x0b, 0x07, 0xa7, 0xf8,
	0xcf, 0x80, 0x1b, 0xfc, 0x3c, 0xd9, 0xf7, 0x53, 0x55, 0x4f, 0xfc, 0x22, 0x08, 0x9f, 0xff, 0x00,
	0xd1, 0xba, 0xfc, 0x3e, 0x01, 0x8f, 0x9b, 0x98, 0x11, 0xdb, 0x39, 0x02, 0x77, 0x28, 0x70, 0x6f,
	0x12, 0x30, 0x3b, 0x83, 0xc5, 0x11, 0xb4, 0x43, 0x40, 0x3b, 0xaf, 0xc3, 0xa1, 0xdf, 0xdc, 0xec,
	0x5a, 0x06, 0xaa, 0x37, 0x6e, 0xde, 0x7e, 0x94, 0x57, 0xb4, 0xff, 0x61, 0x6a, 0x6a, 0x7e, 0xfe,
	0xce, 0xc3, 0x3c, 0xa8, 0xbe, 0x00, 0xed, 0x2d, 0xa4, 0x6c, 0x6e, 0x21, 0x65, 0x7b, 0x0b, 0x81,
	0xb5, 0x00, 0x81, 0xd7, 0x01, 0x02, 0x9f, 0x02, 0x04, 0xda, 0x01, 0x02, 0x9b, 0x01, 0x02, 0x5f,
	0x02, 0x04, 0xbe, 0x06, 0x48, 0xd9, 0x0e, 0x10, 0x78, 0xd9, 0x41, 0xca, 0x46, 0x07, 0x81, 0x76,
	0x07, 0x29, 0x9b, 0x1d, 0xa4, 0x3c, 0xbe, 0xd7, 0xa0, 0xec, 0x69, 0x43, 0x6f, 0x51, 0x22, 0x30,
	0xe7, 0xb6, 0xee, 0x7b, 0x86, 0x5c, 0xd4, 0x29, 0x6f, 0x8e, 0x33, 0x4e, 0x5b, 0xee, 0x22, 0xe6,
	0xe3, 0x3d, 0xd9, 0x60, 0xb5, 0x06, 0x35, 0xf0, 0x8a, 0x88, 0x5e, 0xb8, 0xfd, 0x1e, 0xf3, 0x5a,
	0x5a, 0x5e, 0xef, 0x13, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x82, 0xc7, 0xce, 0x24, 0xf2, 0x07,
	0x00, 0x00,
}

func (x FastAclRuleSimpleAction) String() string {
	s, ok := FastAclRuleSimpleAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *FastAclRuleAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *FastAclRuleAction_SimpleAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction_SimpleAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction_SimpleAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SimpleAction != that1.SimpleAction {
		return false
	}
	return true
}
func (this *FastAclRuleAction_PolicerAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction_PolicerAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction_PolicerAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicerAction.Equal(that1.PolicerAction) {
		return false
	}
	return true
}
func (this *FastAclRuleAction_ProtocolPolicerAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FastAclRuleAction_ProtocolPolicerAction)
	if !ok {
		that2, ok := that.(FastAclRuleAction_ProtocolPolicerAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolPolicerAction.Equal(that1.ProtocolPolicerAction) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Prefix)
	if !ok {
		that2, ok := that.(GlobalSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(GlobalSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *CreateSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Prefix)
	if !ok {
		that2, ok := that.(CreateSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *CreateSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(CreateSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Prefix)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.Port) != len(that1.Port) {
		return false
	}
	for i := range this.Port {
		if !this.Port[i].Equal(that1.Port[i]) {
			return false
		}
	}
	if that1.Source == nil {
		if this.Source != nil {
			return false
		}
	} else if this.Source == nil {
		return false
	} else if !this.Source.Equal(that1.Source) {
		return false
	}
	return true
}
func (this *GetSpecType_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Prefix)
	if !ok {
		that2, ok := that.(GetSpecType_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	return true
}
func (this *GetSpecType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IpPrefixSet)
	if !ok {
		that2, ok := that.(GetSpecType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *FastAclRuleAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fast_acl_rule.FastAclRuleAction{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FastAclRuleAction_SimpleAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.FastAclRuleAction_SimpleAction{` +
		`SimpleAction:` + fmt.Sprintf("%#v", this.SimpleAction) + `}`}, ", ")
	return s
}
func (this *FastAclRuleAction_PolicerAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.FastAclRuleAction_PolicerAction{` +
		`PolicerAction:` + fmt.Sprintf("%#v", this.PolicerAction) + `}`}, ", ")
	return s
}
func (this *FastAclRuleAction_ProtocolPolicerAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.FastAclRuleAction_ProtocolPolicerAction{` +
		`ProtocolPolicerAction:` + fmt.Sprintf("%#v", this.ProtocolPolicerAction) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.GlobalSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GlobalSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GlobalSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.CreateSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.CreateSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.CreateSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.ReplaceSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.ReplaceSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.ReplaceSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fast_acl_rule.GetSpecType{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GetSpecType_Prefix{` +
		`Prefix:` + fmt.Sprintf("%#v", this.Prefix) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fast_acl_rule.GetSpecType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FastAclRuleAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastAclRuleAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastAclRuleAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FastAclRuleAction_SimpleAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastAclRuleAction_SimpleAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.SimpleAction))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *FastAclRuleAction_PolicerAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastAclRuleAction_PolicerAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicerAction != nil {
		{
			size, err := m.PolicerAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FastAclRuleAction_ProtocolPolicerAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastAclRuleAction_ProtocolPolicerAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolPolicerAction != nil {
		{
			size, err := m.ProtocolPolicerAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Port) > 0 {
		for iNdEx := len(m.Port) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Port[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixSet != nil {
		{
			size, err := m.IpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Port) > 0 {
		for iNdEx := len(m.Port) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Port[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixSet != nil {
		{
			size, err := m.IpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Port) > 0 {
		for iNdEx := len(m.Port) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Port[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixSet != nil {
		{
			size, err := m.IpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size := m.Source.Size()
			i -= size
			if _, err := m.Source.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Port) > 0 {
		for iNdEx := len(m.Port) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Port[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixSet != nil {
		{
			size, err := m.IpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FastAclRuleAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *FastAclRuleAction_SimpleAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SimpleAction))
	return n
}
func (m *FastAclRuleAction_PolicerAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicerAction != nil {
		l = m.PolicerAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FastAclRuleAction_ProtocolPolicerAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolPolicerAction != nil {
		l = m.ProtocolPolicerAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *GlobalSpecType_Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *CreateSpecType_Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *ReplaceSpecType_Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Port) > 0 {
		for _, e := range m.Port {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *GetSpecType_Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FastAclRuleAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastAclRuleAction_SimpleAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction_SimpleAction{`,
		`SimpleAction:` + fmt.Sprintf("%v", this.SimpleAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastAclRuleAction_PolicerAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction_PolicerAction{`,
		`PolicerAction:` + strings.Replace(fmt.Sprintf("%v", this.PolicerAction), "PolicerRefType", "schema.PolicerRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FastAclRuleAction_ProtocolPolicerAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FastAclRuleAction_ProtocolPolicerAction{`,
		`ProtocolPolicerAction:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPolicerAction), "ProtocolPolicerRefType", "schema.ProtocolPolicerRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPort := "[]*PortValueType{"
	for _, f := range this.Port {
		repeatedStringForPort += strings.Replace(fmt.Sprintf("%v", f), "PortValueType", "schema.PortValueType", 1) + ","
	}
	repeatedStringForPort += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Action:` + strings.Replace(this.Action.String(), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + repeatedStringForPort + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "schema.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPort := "[]*PortValueType{"
	for _, f := range this.Port {
		repeatedStringForPort += strings.Replace(fmt.Sprintf("%v", f), "PortValueType", "schema.PortValueType", 1) + ","
	}
	repeatedStringForPort += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Action:` + strings.Replace(this.Action.String(), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + repeatedStringForPort + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "schema.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPort := "[]*PortValueType{"
	for _, f := range this.Port {
		repeatedStringForPort += strings.Replace(fmt.Sprintf("%v", f), "PortValueType", "schema.PortValueType", 1) + ","
	}
	repeatedStringForPort += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Action:` + strings.Replace(this.Action.String(), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + repeatedStringForPort + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "schema.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPort := "[]*PortValueType{"
	for _, f := range this.Port {
		repeatedStringForPort += strings.Replace(fmt.Sprintf("%v", f), "PortValueType", "schema.PortValueType", 1) + ","
	}
	repeatedStringForPort += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Action:` + strings.Replace(this.Action.String(), "FastAclRuleAction", "FastAclRuleAction", 1) + `,`,
		`Port:` + repeatedStringForPort + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Prefix{`,
		`Prefix:` + strings.Replace(fmt.Sprintf("%v", this.Prefix), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "IpPrefixSetRefType", "schema.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FastAclRuleAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastAclRuleAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastAclRuleAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAction", wireType)
			}
			var v FastAclRuleSimpleAction
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FastAclRuleSimpleAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Action = &FastAclRuleAction_SimpleAction{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PolicerRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &FastAclRuleAction_PolicerAction{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPolicerAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.ProtocolPolicerRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &FastAclRuleAction_ProtocolPolicerAction{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &schema.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GlobalSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GlobalSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &schema.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CreateSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &CreateSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &schema.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &ReplaceSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &ReplaceSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &FastAclRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port, &schema.PortValueType{})
			if err := m.Port[len(m.Port)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GetSpecType_Prefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &GetSpecType_IpPrefixSet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/central_manager/application/public_customapi.proto

// Central Manager Applications
//
// x-displayName: "Central Manager Application"
// Central Manager Applications APIs enable the fetch of metrics data
// of different BIG-IP Next Central Managers owned by a Tenant

package application

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Central Manager Application type
//
// x-displayName: "Central Manager Application type"
// Defines central manager application type
type AppType int32

const (
	// x-displayName: "Fast"
	FAST AppType = 0
	// x-displayName: "AS3"
	AS3 AppType = 1
)

var AppType_name = map[int32]string{
	0: "FAST",
	1: "AS3",
}

var AppType_value = map[string]int32{
	"FAST": 0,
	"AS3":  1,
}

func (AppType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{0}
}

// List Request
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC
type ListRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// limit
	//
	// x-displayName: "Limit"
	// x-example: "20"
	// Limits the number of items to return per page
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// page
	//
	// x-displayName: "Page"
	// x-example: "1"
	// The number of pages to return
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{0}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Get Request
//
// x-displayName: "Get Request"
// This is the input message of the 'Get' RPC
type GetRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// Central Manager Application ID
	//
	// x-displayName: "Central Manager Application ID"
	// x-required
	// x-example: "a0b9fb1b-fcb0-4da5-9046-775cbda7bb2d"
	// ID of Central Manager Cloud Application
	ApplicationId string `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{1}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *GetRequest) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

// List Response
//
// x-displayName: "List Response"
// This is the output message of the 'List' RPC
type ListResponse struct {
	// Application
	//
	// x-displayName: "Application Details"
	// Application details for a given Central manager
	Applications []*Application `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
	// link
	//
	// x-displayName: "Link"
	// Link is href to next/previous/last/first pages
	Link *Links `protobuf:"bytes,2,opt,name=link,json=_links,proto3" json:"link,omitempty"`
	// count
	//
	// x-displayName: "Count"
	// Count is number of resources returned in the response
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// total
	//
	// x-displayName: "Total"
	// Total number of applications managed by this central manager
	Total int32 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

func (m *ListResponse) GetLink() *Links {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *ListResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Links
//
// x-displayName: "Links"
// Link is href to next/previous/last/first pages
type Links struct {
	// self
	//
	// x-displayName: "Self"
	// x-example: "?limit=100&page=1"
	// Link that navigates to the self page
	Self string `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// prev
	//
	// x-displayName: "Prev"
	// x-example: "?limit=100&page=1"
	// Link that navigates to the previous page
	Prev string `protobuf:"bytes,2,opt,name=prev,proto3" json:"prev,omitempty"`
	// next
	//
	// x-displayName: "Next"
	// x-example: "?limit=100&page=2"
	// Link that navigates to the next page
	Next string `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	// first
	//
	// x-displayName: "First"
	// x-example: "?limit=100&page=1"
	// Link that navigates to the first page
	First string `protobuf:"bytes,4,opt,name=first,proto3" json:"first,omitempty"`
	// last
	//
	// x-displayName: "Last"
	// x-example: "?limit=100&page=10"
	// Link that navigates to the last page
	Last string `protobuf:"bytes,5,opt,name=last,proto3" json:"last,omitempty"`
}

func (m *Links) Reset()      { *m = Links{} }
func (*Links) ProtoMessage() {}
func (*Links) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{3}
}
func (m *Links) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Links) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Links.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Links) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Links.Merge(m, src)
}
func (m *Links) XXX_Size() int {
	return m.Size()
}
func (m *Links) XXX_DiscardUnknown() {
	xxx_messageInfo_Links.DiscardUnknown(m)
}

var xxx_messageInfo_Links proto.InternalMessageInfo

func (m *Links) GetSelf() string {
	if m != nil {
		return m.Self
	}
	return ""
}

func (m *Links) GetPrev() string {
	if m != nil {
		return m.Prev
	}
	return ""
}

func (m *Links) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *Links) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Links) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

// Application
//
// x-displayName: "Application"
// Application details for a given Central manager
type Application struct {
	// id
	//
	// x-displayName: "Application ID"
	// x-example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
	// Central manager application Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	//
	// x-displayName: "Application Name"
	// x-example: "MyApp1"
	// Central manager application name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// type
	//
	// x-displayName: "Application Type"
	// x-example: "fast"
	// Central manager application type
	Type AppType `protobuf:"varint,3,opt,name=type,proto3,enum=ves.io.schema.central_manager.application.AppType" json:"type,omitempty"`
}

func (m *Application) Reset()      { *m = Application{} }
func (*Application) ProtoMessage() {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{4}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetType() AppType {
	if m != nil {
		return m.Type
	}
	return FAST
}

// Get Response
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// id
	//
	// x-displayName: "Application ID"
	// x-example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
	// Central manager application Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	//
	// x-displayName: "Application Name"
	// x-example: "MyApp1"
	// Central manager application name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// type
	//
	// x-displayName: "Application Type"
	// Central manager application type
	Type AppType `protobuf:"varint,3,opt,name=type,proto3,enum=ves.io.schema.central_manager.application.AppType" json:"type,omitempty"`
	// locations
	//
	// x-displayName: "Location"
	// Location of virtual server
	Locations []*Location `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{5}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetResponse) GetType() AppType {
	if m != nil {
		return m.Type
	}
	return FAST
}

func (m *GetResponse) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

// Location
//
// x-displayName: "Location"
// Location of virtual server
type Location struct {
	// hostname
	//
	// x-displayName: "HostName"
	// x-example: "bigip-next.asia.com"
	// Central manager application domain
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// ip_address
	//
	// x-displayName: "Application IP"
	// x-example: "10.240.107.46"
	// Central manager application IP address
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// virtual_servers
	//
	// x-displayName: "Virtual Server"
	// Details of virtual server where application is hosted.
	VirtualServers []*VirtualServer `protobuf:"bytes,3,rep,name=virtual_servers,json=virtualServers,proto3" json:"virtual_servers,omitempty"`
}

func (m *Location) Reset()      { *m = Location{} }
func (*Location) ProtoMessage() {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{6}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Location) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Location) GetVirtualServers() []*VirtualServer {
	if m != nil {
		return m.VirtualServers
	}
	return nil
}

// pool_members
//
// x-displayName: "Pool Members"
// Details of Pool members
type PoolMember struct {
	// name
	//
	// x-displayName: "Pool Member Name"
	// x-example: "PoolMember1"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ip_address
	//
	// x-displayName: "Pool Member IP"
	// x-example: "192.168.1.2"
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (m *PoolMember) Reset()      { *m = PoolMember{} }
func (*PoolMember) ProtoMessage() {}
func (*PoolMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{7}
}
func (m *PoolMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMember.Merge(m, src)
}
func (m *PoolMember) XXX_Size() int {
	return m.Size()
}
func (m *PoolMember) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMember.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMember proto.InternalMessageInfo

func (m *PoolMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PoolMember) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

// virtual_servers
//
// x-displayName: "Virtual Servers"
// Details of virtual server where application is hosted.
type VirtualServer struct {
	// vs_name
	//
	// x-displayName: "Virtual Server Name"
	// x-example: BIGIP
	VsName string `protobuf:"bytes,1,opt,name=vs_name,json=vsName,proto3" json:"vs_name,omitempty"`
	// ip_address
	//
	// x-displayName: "Virtual IP"
	// x-example: 10.20.30.40
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// pool_members
	//
	// x-displayName: "Pool Member"
	// Details of pool member
	PoolMembers []*PoolMember `protobuf:"bytes,3,rep,name=pool_members,json=poolMembers,proto3" json:"pool_members,omitempty"`
}

func (m *VirtualServer) Reset()      { *m = VirtualServer{} }
func (*VirtualServer) ProtoMessage() {}
func (*VirtualServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9457e125ae8263d, []int{8}
}
func (m *VirtualServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServer.Merge(m, src)
}
func (m *VirtualServer) XXX_Size() int {
	return m.Size()
}
func (m *VirtualServer) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServer.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServer proto.InternalMessageInfo

func (m *VirtualServer) GetVsName() string {
	if m != nil {
		return m.VsName
	}
	return ""
}

func (m *VirtualServer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *VirtualServer) GetPoolMembers() []*PoolMember {
	if m != nil {
		return m.PoolMembers
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.central_manager.application.AppType", AppType_name, AppType_value)
	golang_proto.RegisterEnum("ves.io.schema.central_manager.application.AppType", AppType_name, AppType_value)
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.application.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.application.ListRequest")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.central_manager.application.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.central_manager.application.GetRequest")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.application.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.application.ListResponse")
	proto.RegisterType((*Links)(nil), "ves.io.schema.central_manager.application.Links")
	golang_proto.RegisterType((*Links)(nil), "ves.io.schema.central_manager.application.Links")
	proto.RegisterType((*Application)(nil), "ves.io.schema.central_manager.application.Application")
	golang_proto.RegisterType((*Application)(nil), "ves.io.schema.central_manager.application.Application")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.application.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.application.GetResponse")
	proto.RegisterType((*Location)(nil), "ves.io.schema.central_manager.application.Location")
	golang_proto.RegisterType((*Location)(nil), "ves.io.schema.central_manager.application.Location")
	proto.RegisterType((*PoolMember)(nil), "ves.io.schema.central_manager.application.PoolMember")
	golang_proto.RegisterType((*PoolMember)(nil), "ves.io.schema.central_manager.application.PoolMember")
	proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.central_manager.application.VirtualServer")
	golang_proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.central_manager.application.VirtualServer")
}

func init() {
	proto.RegisterFile("ves.io/schema/central_manager/application/public_customapi.proto", fileDescriptor_a9457e125ae8263d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/central_manager/application/public_customapi.proto", fileDescriptor_a9457e125ae8263d)
}

var fileDescriptor_a9457e125ae8263d = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6b, 0x24, 0x45,
	0x14, 0x9e, 0x9a, 0x9e, 0x49, 0x32, 0x35, 0xd9, 0xb8, 0x94, 0x0b, 0x8e, 0x63, 0x6c, 0x42, 0x83,
	0x10, 0x65, 0xa7, 0x3b, 0x3f, 0xd8, 0xe8, 0x45, 0x74, 0x22, 0xec, 0x1a, 0x59, 0x65, 0xed, 0x2c,
	0x22, 0x8b, 0xd0, 0xd4, 0x74, 0xd7, 0x74, 0x8a, 0x74, 0x77, 0x95, 0x55, 0xd5, 0x6d, 0xc2, 0xba,
	0x20, 0xfb, 0x17, 0x08, 0x9e, 0xfc, 0x0f, 0x3c, 0x78, 0xf3, 0x22, 0xe6, 0x92, 0x9b, 0x7b, 0x10,
	0x09, 0x78, 0x59, 0xf6, 0x20, 0x66, 0xb2, 0x07, 0xbd, 0x2d, 0x1e, 0x05, 0x41, 0xba, 0x7a, 0x66,
	0xd2, 0x93, 0xc3, 0xba, 0x8d, 0xe0, 0xed, 0xbd, 0xf7, 0xd5, 0xfb, 0xfa, 0xbd, 0xaf, 0x6a, 0xde,
	0x1b, 0xf8, 0x76, 0x46, 0xa4, 0x4d, 0x99, 0x23, 0xfd, 0x3d, 0x12, 0x63, 0xc7, 0x27, 0x89, 0x12,
	0x38, 0xf2, 0x62, 0x9c, 0xe0, 0x90, 0x08, 0x07, 0x73, 0x1e, 0x51, 0x1f, 0x2b, 0xca, 0x12, 0x87,
	0xa7, 0x83, 0x88, 0xfa, 0x9e, 0x9f, 0x4a, 0xc5, 0x62, 0xcc, 0xa9, 0xcd, 0x05, 0x53, 0x0c, 0xbd,
	0x5a, 0x30, 0xd8, 0x05, 0x83, 0x7d, 0x81, 0xc1, 0x2e, 0x31, 0x74, 0x7b, 0x21, 0x55, 0x7b, 0xe9,
	0xc0, 0xf6, 0x59, 0xec, 0x84, 0x2c, 0x64, 0x8e, 0x66, 0x18, 0xa4, 0x43, 0xed, 0x69, 0x47, 0x5b,
	0x05, 0x73, 0x77, 0x39, 0x64, 0x2c, 0x8c, 0x88, 0x83, 0x39, 0x75, 0x70, 0x92, 0x30, 0xa5, 0x59,
	0xe4, 0x18, 0x7d, 0x69, 0xb6, 0x72, 0xc6, 0xcb, 0xe0, 0xf2, 0x2c, 0x98, 0xe1, 0x88, 0x06, 0x58,
	0x91, 0x31, 0x6a, 0x5d, 0x40, 0x89, 0x24, 0x49, 0x76, 0x81, 0x61, 0xe5, 0xc2, 0x19, 0x4a, 0x3e,
	0xf3, 0x66, 0x4e, 0x58, 0x9f, 0xc0, 0xf6, 0x4d, 0x2a, 0x95, 0x4b, 0x3e, 0x4d, 0x89, 0x54, 0xe8,
	0x79, 0xd8, 0xf4, 0x63, 0x8f, 0x06, 0x1d, 0xb0, 0x02, 0x56, 0x5b, 0x6e, 0xc3, 0x8f, 0x77, 0x02,
	0xf4, 0x32, 0x6c, 0x46, 0x34, 0xa6, 0xaa, 0x53, 0x5f, 0x01, 0xab, 0xcd, 0xed, 0xf9, 0x47, 0x47,
	0xc0, 0x58, 0x5f, 0x5b, 0x73, 0x8b, 0x28, 0x7a, 0x11, 0x36, 0x38, 0x0e, 0x49, 0xc7, 0xd0, 0x68,
	0xf3, 0xd1, 0x11, 0x00, 0xeb, 0xae, 0x0e, 0x59, 0xef, 0x42, 0x78, 0x83, 0x3c, 0x9d, 0xfc, 0x15,
	0xb8, 0x54, 0x52, 0x37, 0x47, 0xeb, 0x1a, 0xbd, 0x54, 0x8a, 0xee, 0x04, 0xd6, 0xaf, 0x00, 0x2e,
	0x16, 0x85, 0x4a, 0xce, 0x12, 0x49, 0xd0, 0x1d, 0xb8, 0x58, 0x3a, 0x21, 0x3b, 0x60, 0xc5, 0x58,
	0x6d, 0x6f, 0x6c, 0xd9, 0xcf, 0x7c, 0x91, 0x76, 0xff, 0xdc, 0x76, 0x67, 0xb8, 0xd0, 0x75, 0xd8,
	0x88, 0x68, 0xb2, 0xaf, 0x2b, 0x69, 0x6f, 0xac, 0x55, 0xe0, 0xbc, 0x49, 0x93, 0x7d, 0xe9, 0xce,
	0x79, 0x79, 0xba, 0x44, 0x57, 0x60, 0xd3, 0x67, 0x69, 0xa2, 0x0a, 0x69, 0xdc, 0xc2, 0xc9, 0xa3,
	0x8a, 0x29, 0x1c, 0x75, 0x1a, 0x45, 0x54, 0x3b, 0x56, 0x0c, 0x9b, 0x3a, 0x19, 0x21, 0xd8, 0x90,
	0x24, 0x1a, 0x4e, 0x44, 0xca, 0xed, 0x3c, 0xc6, 0x05, 0xc9, 0xc6, 0xd2, 0x68, 0x3b, 0x8f, 0x25,
	0xe4, 0xa0, 0xe0, 0x6e, 0xb9, 0xda, 0xce, 0xa9, 0x87, 0x54, 0x48, 0xa5, 0xa9, 0x5b, 0x6e, 0xe1,
	0xe4, 0x27, 0x23, 0x2c, 0x55, 0xa7, 0x59, 0x9c, 0xcc, 0x6d, 0xeb, 0x10, 0xb6, 0x4b, 0xfd, 0xa3,
	0x25, 0x58, 0x9f, 0xde, 0x4b, 0x9d, 0x06, 0x9a, 0x1c, 0xc7, 0x64, 0xf2, 0xc1, 0xdc, 0xce, 0x55,
	0x51, 0x87, 0xbc, 0xb8, 0xe7, 0xa5, 0x8d, 0x8d, 0x6a, 0x4a, 0xdf, 0x3e, 0xe4, 0xc4, 0xd5, 0xf9,
	0xd6, 0x4f, 0x00, 0xb6, 0xf5, 0xab, 0x18, 0xdf, 0xe4, 0xff, 0xf8, 0x6d, 0xf4, 0x21, 0x6c, 0x45,
	0x6c, 0xf2, 0x64, 0x1a, 0xfa, 0xc9, 0x6c, 0x56, 0xb9, 0xde, 0x71, 0xae, 0x7b, 0xce, 0x62, 0x7d,
	0x07, 0xe0, 0xc2, 0x24, 0x8e, 0xba, 0x70, 0x61, 0x8f, 0x49, 0xa5, 0xeb, 0x2f, 0x3a, 0x9a, 0xfa,
	0x68, 0x15, 0x42, 0xca, 0x3d, 0x1c, 0x04, 0x82, 0x48, 0x59, 0x74, 0xb7, 0xdd, 0xfa, 0xe1, 0x8f,
	0x63, 0xa3, 0x21, 0xea, 0x1c, 0xb8, 0x2d, 0xca, 0xfb, 0x05, 0x86, 0x30, 0x7c, 0x2e, 0xa3, 0x42,
	0xa5, 0x38, 0xf2, 0x24, 0x11, 0x19, 0x11, 0xb2, 0x63, 0xe8, 0x5a, 0xdf, 0xa8, 0x50, 0xeb, 0x47,
	0x05, 0xc3, 0xae, 0x26, 0x70, 0x97, 0xb2, 0xb2, 0x2b, 0xad, 0xf7, 0x20, 0xbc, 0xc5, 0x58, 0xf4,
	0x3e, 0x89, 0x07, 0x44, 0x4c, 0x25, 0x07, 0x25, 0xc9, 0x9f, 0xb9, 0x5c, 0xeb, 0x5b, 0x00, 0x2f,
	0xcd, 0x7c, 0x0d, 0xbd, 0x00, 0xe7, 0x33, 0xe9, 0x95, 0x28, 0xe7, 0x32, 0xf9, 0x41, 0x35, 0x0d,
	0x3e, 0x86, 0x8b, 0x9c, 0xb1, 0xc8, 0x8b, 0x75, 0x85, 0x13, 0x01, 0xae, 0x55, 0x10, 0xe0, 0xbc,
	0x3f, 0xb7, 0xcd, 0xa7, 0xb6, 0x7c, 0x6d, 0x19, 0xce, 0x8f, 0x1f, 0x05, 0x5a, 0x80, 0x8d, 0xeb,
	0xfd, 0xdd, 0xdb, 0x97, 0x6b, 0x68, 0x1e, 0x1a, 0xfd, 0xdd, 0xcd, 0xcb, 0x60, 0xe3, 0x6f, 0x03,
	0xb6, 0xde, 0xd1, 0xdb, 0xa1, 0x7f, 0x6b, 0x07, 0x3d, 0x06, 0xb0, 0x91, 0x8f, 0x1d, 0xb4, 0x55,
	0x69, 0x08, 0x4c, 0x07, 0x6a, 0xf7, 0xf5, 0xca, 0x79, 0xc5, 0xaf, 0xc2, 0xda, 0x7f, 0xf0, 0x7d,
	0x1d, 0x8c, 0x7e, 0xec, 0x38, 0xc3, 0x6b, 0x07, 0x7e, 0xcf, 0x8f, 0x08, 0x16, 0xf9, 0xf8, 0xee,
	0xa5, 0x92, 0x88, 0xab, 0xf9, 0x5c, 0xef, 0x51, 0xd6, 0xa3, 0xc9, 0x50, 0x60, 0xa9, 0x44, 0xea,
	0xab, 0x54, 0x90, 0x9e, 0x20, 0x38, 0xb8, 0xff, 0xcb, 0xe3, 0xaf, 0xea, 0x36, 0xba, 0x3a, 0xde,
	0x74, 0x4f, 0x5b, 0x86, 0xd2, 0xb9, 0xab, 0xe7, 0xf1, 0x3d, 0xf4, 0x27, 0x80, 0xc6, 0x0d, 0xa2,
	0x50, 0x15, 0x79, 0xcf, 0x07, 0x7b, 0x77, 0xab, 0x6a, 0xda, 0xb8, 0xc7, 0xcf, 0xff, 0x4b, 0x8f,
	0x6f, 0xa1, 0x37, 0xab, 0xf4, 0xe8, 0xdc, 0x9d, 0x5d, 0x33, 0xf7, 0xba, 0x57, 0x8e, 0x8f, 0x80,
	0xf1, 0xd7, 0x11, 0x68, 0x06, 0x24, 0x66, 0xeb, 0xf7, 0x7f, 0xee, 0x18, 0x27, 0x75, 0xb0, 0xfd,
	0x35, 0x38, 0x39, 0x35, 0x6b, 0x0f, 0x4f, 0xcd, 0xda, 0x93, 0x53, 0x13, 0x7c, 0x31, 0x32, 0xc1,
	0x37, 0x23, 0x13, 0x3c, 0x18, 0x99, 0xe0, 0x64, 0x64, 0x82, 0xdf, 0x46, 0x26, 0xf8, 0x7d, 0x64,
	0xd6, 0x9e, 0x8c, 0x4c, 0xf0, 0xe5, 0x99, 0x59, 0x3b, 0x3e, 0x33, 0xc1, 0xc9, 0x99, 0x59, 0x7b,
	0x78, 0x66, 0xd6, 0xee, 0x78, 0x21, 0xe3, 0xfb, 0xa1, 0x9d, 0xb1, 0x48, 0x11, 0x21, 0xb0, 0x9d,
	0x4a, 0x47, 0x1b, 0x43, 0x26, 0xe2, 0x1e, 0x17, 0x2c, 0xa3, 0x01, 0x11, 0xbd, 0x09, 0xec, 0xf0,
	0x41, 0xc8, 0x1c, 0x72, 0xa0, 0xc6, 0xcb, 0xf9, 0xdf, 0xff, 0xbc, 0x0c, 0xe6, 0xf4, 0xce, 0xde,
	0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x26, 0xe8, 0xf8, 0xcf, 0xf0, 0x08, 0x00, 0x00,
}

func (x AppType) String() string {
	s, ok := AppType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.ApplicationId != that1.ApplicationId {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Applications) != len(that1.Applications) {
		return false
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return false
		}
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *Links) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Links)
	if !ok {
		that2, ok := that.(Links)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Self != that1.Self {
		return false
	}
	if this.Prev != that1.Prev {
		return false
	}
	if this.Next != that1.Next {
		return false
	}
	if this.First != that1.First {
		return false
	}
	if this.Last != that1.Last {
		return false
	}
	return true
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *Location) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if len(this.VirtualServers) != len(that1.VirtualServers) {
		return false
	}
	for i := range this.VirtualServers {
		if !this.VirtualServers[i].Equal(that1.VirtualServers[i]) {
			return false
		}
	}
	return true
}
func (this *PoolMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PoolMember)
	if !ok {
		that2, ok := that.(PoolMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	return true
}
func (this *VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServer)
	if !ok {
		that2, ok := that.(VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VsName != that1.VsName {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if len(this.PoolMembers) != len(that1.PoolMembers) {
		return false
	}
	for i := range this.PoolMembers {
		if !this.PoolMembers[i].Equal(that1.PoolMembers[i]) {
			return false
		}
	}
	return true
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&application.ListRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&application.GetRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "ApplicationId: "+fmt.Sprintf("%#v", this.ApplicationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&application.ListResponse{")
	if this.Applications != nil {
		s = append(s, "Applications: "+fmt.Sprintf("%#v", this.Applications)+",\n")
	}
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Links) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&application.Links{")
	s = append(s, "Self: "+fmt.Sprintf("%#v", this.Self)+",\n")
	s = append(s, "Prev: "+fmt.Sprintf("%#v", this.Prev)+",\n")
	s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "Last: "+fmt.Sprintf("%#v", this.Last)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Application) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&application.Application{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&application.GetResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Location) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&application.Location{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	if this.VirtualServers != nil {
		s = append(s, "VirtualServers: "+fmt.Sprintf("%#v", this.VirtualServers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PoolMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&application.PoolMember{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&application.VirtualServer{")
	s = append(s, "VsName: "+fmt.Sprintf("%#v", this.VsName)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	if this.PoolMembers != nil {
		s = append(s, "PoolMembers: "+fmt.Sprintf("%#v", this.PoolMembers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// List
	//
	// x-displayName: "List Central Manager Applications"
	// List the applications managed by this central manager
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get
	//
	// x-displayName: "Get Central Manager Application"
	// Get details of a particular application managed by the central manager
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.application.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.application.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// List
	//
	// x-displayName: "List Central Manager Applications"
	// List the applications managed by this central manager
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get
	//
	// x-displayName: "Get Central Manager Application"
	// Get details of a particular application managed by the central manager
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.application.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.application.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.central_manager.application.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/central_manager/application/public_customapi.proto",
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Applications) > 0 {
		for iNdEx := len(m.Applications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Links) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Links) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Links) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Last) > 0 {
		i -= len(m.Last)
		copy(dAtA[i:], m.Last)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Last)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.First) > 0 {
		i -= len(m.First)
		copy(dAtA[i:], m.First)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.First)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Next) > 0 {
		i -= len(m.Next)
		copy(dAtA[i:], m.Next)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Next)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prev) > 0 {
		i -= len(m.Prev)
		copy(dAtA[i:], m.Prev)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Prev)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Self) > 0 {
		i -= len(m.Self)
		copy(dAtA[i:], m.Self)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Self)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualServers) > 0 {
		for iNdEx := len(m.VirtualServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolMembers) > 0 {
		for iNdEx := len(m.PoolMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VsName) > 0 {
		i -= len(m.VsName)
		copy(dAtA[i:], m.VsName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.VsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Page))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Count))
	}
	if m.Total != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Total))
	}
	return n
}

func (m *Links) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Self)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Prev)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Type))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Type))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.VirtualServers) > 0 {
		for _, e := range m.VirtualServers {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *PoolMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VsName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.PoolMembers) > 0 {
		for _, e := range m.PoolMembers {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`ApplicationId:` + fmt.Sprintf("%v", this.ApplicationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApplications := "[]*Application{"
	for _, f := range this.Applications {
		repeatedStringForApplications += strings.Replace(f.String(), "Application", "Application", 1) + ","
	}
	repeatedStringForApplications += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Applications:` + repeatedStringForApplications + `,`,
		`Link:` + strings.Replace(this.Link.String(), "Links", "Links", 1) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Links) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Links{`,
		`Self:` + fmt.Sprintf("%v", this.Self) + `,`,
		`Prev:` + fmt.Sprintf("%v", this.Prev) + `,`,
		`Next:` + fmt.Sprintf("%v", this.Next) + `,`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Last:` + fmt.Sprintf("%v", this.Last) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Application) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Application{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*Location{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(f.String(), "Location", "Location", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&GetResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *Location) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualServers := "[]*VirtualServer{"
	for _, f := range this.VirtualServers {
		repeatedStringForVirtualServers += strings.Replace(f.String(), "VirtualServer", "VirtualServer", 1) + ","
	}
	repeatedStringForVirtualServers += "}"
	s := strings.Join([]string{`&Location{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`VirtualServers:` + repeatedStringForVirtualServers + `,`,
		`}`,
	}, "")
	return s
}
func (this *PoolMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PoolMember{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPoolMembers := "[]*PoolMember{"
	for _, f := range this.PoolMembers {
		repeatedStringForPoolMembers += strings.Replace(f.String(), "PoolMember", "PoolMember", 1) + ","
	}
	repeatedStringForPoolMembers += "}"
	s := strings.Join([]string{`&VirtualServer{`,
		`VsName:` + fmt.Sprintf("%v", this.VsName) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`PoolMembers:` + repeatedStringForPoolMembers + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &Application{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &Links{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Links) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Links: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Links: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Self = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AppType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AppType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &Location{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualServers = append(m.VirtualServers, &VirtualServer{})
			if err := m.VirtualServers[len(m.VirtualServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolMembers = append(m.PoolMembers, &PoolMember{})
			if err := m.PoolMembers[len(m.PoolMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

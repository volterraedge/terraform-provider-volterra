// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/central_manager/public_customapi.proto

// Central Manager
//
// x-displayName: "Central Manager"

package central_manager

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// List Request
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC
type ListRequest struct {
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b27b889c7f5be76, []int{0}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

// List Response
//
// x-displayName: "List Response"
// This is the output message of the 'List' RPC
type ListResponse struct {
	// List of Central Managers and Number of Cloud Providers
	//
	// x-displayName: "Central Manager and Number of Cloud Providers"
	// List represents response items
	Payload []*GetResponse `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
	// error_message
	//
	// x-displayName: "Error message"
	// x-example: "CM Internal Error"
	// Error message from central manager
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b27b889c7f5be76, []int{1}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetPayload() []*GetResponse {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ListResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// Get Response
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// providers_count
	//
	// x-displayName: "Providers Count"
	// x-example: "4"
	// Number of Central Manager Cloud Providers
	ProvidersCount uint32 `protobuf:"varint,2,opt,name=providers_count,json=providersCount,proto3" json:"providers_count,omitempty"`
	// applications_count
	//
	// x-displayName: "Applications Count"
	// x-example: "4"
	// Number of Central Manager Cloud Provider Applications
	ApplicationsCount uint32 `protobuf:"varint,3,opt,name=applications_count,json=applicationsCount,proto3" json:"applications_count,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b27b889c7f5be76, []int{2}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *GetResponse) GetProvidersCount() uint32 {
	if m != nil {
		return m.ProvidersCount
	}
	return 0
}

func (m *GetResponse) GetApplicationsCount() uint32 {
	if m != nil {
		return m.ApplicationsCount
	}
	return 0
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.ListResponse")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.GetResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/central_manager/public_customapi.proto", fileDescriptor_9b27b889c7f5be76)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/central_manager/public_customapi.proto", fileDescriptor_9b27b889c7f5be76)
}

var fileDescriptor_9b27b889c7f5be76 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xc7, 0x7d, 0x49, 0xfb, 0xfb, 0xa9, 0x6e, 0x0b, 0xc2, 0x30, 0x44, 0x01, 0x4e, 0x91, 0x19,
	0xa8, 0x00, 0xdb, 0xa2, 0xc0, 0x1f, 0x00, 0x45, 0x42, 0x95, 0x40, 0x42, 0x61, 0x63, 0xb1, 0x2e,
	0x97, 0x17, 0xf7, 0x84, 0xed, 0x77, 0xdc, 0x9d, 0x4d, 0xcb, 0x84, 0xba, 0x23, 0x21, 0xf1, 0x4f,
	0xf0, 0x27, 0x20, 0x75, 0xc9, 0x46, 0x27, 0x14, 0x89, 0xa5, 0x23, 0x71, 0x3a, 0x30, 0x76, 0x66,
	0x42, 0xb1, 0x9d, 0x28, 0x01, 0x04, 0x4c, 0xbe, 0xf7, 0xbe, 0xdf, 0xcf, 0xb3, 0xdf, 0xf3, 0x3b,
	0xfb, 0x6e, 0x0e, 0xda, 0x17, 0x18, 0x68, 0xbe, 0x07, 0x09, 0x0b, 0x38, 0xa4, 0x46, 0xb1, 0x38,
	0x4c, 0x58, 0xca, 0x22, 0x50, 0x81, 0xcc, 0x7a, 0xb1, 0xe0, 0x21, 0xcf, 0xb4, 0xc1, 0x84, 0x49,
	0xe1, 0x4b, 0x85, 0x06, 0x9d, 0xab, 0x15, 0xe5, 0x57, 0x94, 0xff, 0x13, 0xd5, 0xf6, 0x22, 0x61,
	0xf6, 0xb2, 0x9e, 0xcf, 0x31, 0x09, 0x22, 0x8c, 0x30, 0x28, 0xa9, 0x5e, 0x36, 0x28, 0xa3, 0x32,
	0x28, 0x4f, 0x55, 0xb5, 0xf6, 0x95, 0x08, 0x31, 0x8a, 0x21, 0x60, 0x52, 0x04, 0x2c, 0x4d, 0xd1,
	0x30, 0x23, 0x30, 0xd5, 0xb5, 0x7a, 0xb9, 0x56, 0xe7, 0x35, 0x20, 0x91, 0xe6, 0x60, 0x26, 0x2e,
	0x7f, 0x3e, 0xca, 0x45, 0xd2, 0x5d, 0x16, 0x73, 0xd0, 0x90, 0xe6, 0xcb, 0x1e, 0x77, 0xd3, 0x5e,
	0x7f, 0x2c, 0xb4, 0xe9, 0xc2, 0xcb, 0x0c, 0xb4, 0x71, 0x0f, 0xec, 0x8d, 0x2a, 0xd4, 0x12, 0x53,
	0x0d, 0xce, 0x43, 0xfb, 0x7f, 0xc9, 0x0e, 0x62, 0x64, 0xfd, 0x16, 0xe9, 0x34, 0xb7, 0xd6, 0xb7,
	0x6f, 0xf8, 0x7f, 0x6c, 0xdd, 0x7f, 0x04, 0x73, 0xb8, 0x3b, 0x43, 0x9d, 0x6b, 0xf6, 0x26, 0x28,
	0x85, 0x2a, 0x4c, 0x40, 0x6b, 0x16, 0x41, 0xab, 0xd1, 0x21, 0x5b, 0x6b, 0xdd, 0x8d, 0x32, 0xf9,
	0xa4, 0xca, 0xb9, 0xaf, 0xed, 0xf5, 0x05, 0xd8, 0xb9, 0x68, 0xaf, 0xf2, 0x24, 0x14, 0xd3, 0xf7,
	0x4e, 0xbd, 0x2b, 0x3c, 0xd9, 0xed, 0x3b, 0xd7, 0xed, 0xf3, 0x52, 0x61, 0x2e, 0xfa, 0xa0, 0x74,
	0xc8, 0x31, 0x4b, 0x4d, 0x59, 0x6a, 0xb3, 0x7b, 0x6e, 0x9e, 0xde, 0x99, 0x66, 0x1d, 0xcf, 0x76,
	0x98, 0x94, 0xb1, 0xe0, 0xd5, 0x28, 0x6b, 0x6f, 0xb3, 0xf4, 0x5e, 0x58, 0x54, 0x4a, 0xfb, 0xf6,
	0x29, 0xb1, 0xd7, 0x76, 0xca, 0x7f, 0x7c, 0xff, 0xe9, 0xae, 0x33, 0x24, 0xf6, 0xca, 0x74, 0x0a,
	0xce, 0xdf, 0x9a, 0x5d, 0x98, 0x5c, 0xfb, 0xe6, 0x3f, 0x79, 0xab, 0xe6, 0xdc, 0xf0, 0xf8, 0x63,
	0x83, 0x14, 0x9f, 0x5a, 0xc1, 0xe0, 0xde, 0x3e, 0xf7, 0x78, 0x0c, 0x4c, 0xe5, 0x02, 0x5e, 0x79,
	0x99, 0x06, 0x75, 0xab, 0x93, 0x83, 0xf6, 0x04, 0x7a, 0x22, 0x1d, 0x28, 0xa6, 0x8d, 0xca, 0xb8,
	0xc9, 0x14, 0x78, 0x0a, 0x58, 0xff, 0xf0, 0xcb, 0xe9, 0xfb, 0x86, 0xeb, 0x74, 0xea, 0xbd, 0xfc,
	0x65, 0x5d, 0xeb, 0xa7, 0x6e, 0x5f, 0x1a, 0x1e, 0x91, 0xe6, 0xf7, 0x23, 0xb2, 0xda, 0x87, 0x04,
	0x6f, 0x1f, 0x7e, 0x6e, 0x35, 0x47, 0x0d, 0xf2, 0xe0, 0x2d, 0x19, 0x8d, 0xa9, 0x75, 0x32, 0xa6,
	0xd6, 0xd9, 0x98, 0x92, 0x37, 0x05, 0x25, 0x1f, 0x0a, 0x4a, 0x8e, 0x0b, 0x4a, 0x46, 0x05, 0x25,
	0x5f, 0x0b, 0x4a, 0xbe, 0x15, 0xd4, 0x3a, 0x2b, 0x28, 0x79, 0x37, 0xa1, 0xd6, 0x70, 0x42, 0xc9,
	0x68, 0x42, 0xad, 0x93, 0x09, 0xb5, 0x9e, 0x3f, 0x8b, 0x50, 0xbe, 0x88, 0xfc, 0x1c, 0x63, 0x03,
	0x4a, 0x31, 0x3f, 0xd3, 0x41, 0x79, 0x18, 0xa0, 0x4a, 0xbc, 0xd9, 0xf0, 0xbd, 0x99, 0x1c, 0xc8,
	0x5e, 0x84, 0x01, 0xec, 0x9b, 0x7a, 0xf5, 0x7e, 0x7f, 0xbb, 0x7a, 0xff, 0x95, 0x3b, 0x78, 0xe7,
	0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xf8, 0xd6, 0x3e, 0x85, 0x03, 0x00, 0x00,
}

func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Payload) != len(that1.Payload) {
		return false
	}
	for i := range this.Payload {
		if !this.Payload[i].Equal(that1.Payload[i]) {
			return false
		}
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.ProvidersCount != that1.ProvidersCount {
		return false
	}
	if this.ApplicationsCount != that1.ApplicationsCount {
		return false
	}
	return true
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&central_manager.ListRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&central_manager.ListResponse{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&central_manager.GetResponse{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "ProvidersCount: "+fmt.Sprintf("%#v", this.ProvidersCount)+",\n")
	s = append(s, "ApplicationsCount: "+fmt.Sprintf("%#v", this.ApplicationsCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// List
	//
	// x-displayName: "List Central Managers and Number of Cloud Providers"
	// List the Central Managers and Number of Cloud Providers
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// List
	//
	// x-displayName: "List Central Managers and Number of Cloud Providers"
	// List the Central Managers and Number of Cloud Providers
	List(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.central_manager.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/central_manager/public_customapi.proto",
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		for iNdEx := len(m.Payload) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payload[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplicationsCount != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ApplicationsCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ProvidersCount != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ProvidersCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payload) > 0 {
		for _, e := range m.Payload {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ProvidersCount != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ProvidersCount))
	}
	if m.ApplicationsCount != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ApplicationsCount))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPayload := "[]*GetResponse{"
	for _, f := range this.Payload {
		repeatedStringForPayload += strings.Replace(f.String(), "GetResponse", "GetResponse", 1) + ","
	}
	repeatedStringForPayload += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Payload:` + repeatedStringForPayload + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetResponse{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`ProvidersCount:` + fmt.Sprintf("%v", this.ProvidersCount) + `,`,
		`ApplicationsCount:` + fmt.Sprintf("%v", this.ApplicationsCount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload, &GetResponse{})
			if err := m.Payload[len(m.Payload)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvidersCount", wireType)
			}
			m.ProvidersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvidersCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationsCount", wireType)
			}
			m.ApplicationsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicationsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/central_manager/provider/public_customapi.proto

// Central Manager Cloud Providers
//
// x-displayName: "Central Manager Cloud Providers"
// Central Manager Cloud Provider APIs enable the fetch of metrics data
// of different BIG-IP Next Central Managers owned by a Tenant

package provider

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// List Request
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC
type ListRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{0}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

// List Response
//
// x-displayName: "List Response"
// This is the output message of the 'List' RPC
type ListResponse struct {
	// Provider
	//
	// x-displayName: "Provider"
	// cloud provider system metrics for a given Central manager
	Providers []*Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	// count
	//
	// x-displayName: "count"
	// count is number of resources returned in the response
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// total
	//
	// x-displayName: "total"
	// total resources exist
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{1}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetProviders() []*Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *ListResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Get Request
//
// x-displayName: "Get Request"
// This is the input message of the 'Get' RPC
type GetRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// Central Manager Cloud Provider ID
	//
	// x-displayName: "Central Manager Cloud Provider ID"
	// x-required
	// x-example: "a0b9fb1b-fcb0-4da5-9046-775cbda7bb2d"
	// ID of Central Manager Cloud Provider
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{2}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *GetRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

// Get Deployment Request
//
// x-displayName: "Get Deployment Request"
// Get Deployment Request of Central Manager Cloud Provider
type GetDeploymentRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// Central Manager Cloud Provider Deployment ID
	//
	// x-displayName: "Central Manager Cloud Provider Deployment ID"
	// x-required
	// x-example: "a0b9fb1b-fcb0-4da5-9046-775cbda7bb2d"
	// Central Manager Cloud Provider ID
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// limit
	//
	// x-displayName: "Limit"
	// x-example: 20
	// Limits the number of items to return per page
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// page
	//
	// x-displayName: "Page"
	// x-example: 1
	// The number of pages to return
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *GetDeploymentRequest) Reset()      { *m = GetDeploymentRequest{} }
func (*GetDeploymentRequest) ProtoMessage() {}
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{3}
}
func (m *GetDeploymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentRequest.Merge(m, src)
}
func (m *GetDeploymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentRequest proto.InternalMessageInfo

func (m *GetDeploymentRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *GetDeploymentRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetDeploymentRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetDeploymentRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Get Deployment Response
//
// x-displayName: "Get Deployment Response"
// Get Deployment Response of Central Manager Cloud Provider
type GetDeploymentResponse struct {
	// DeploymentList
	//
	// x-displayName: "Deployment List"
	// cloud provider deployment system metrics for a given Central manager
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	// link
	//
	// x-displayName: "link"
	// link is href to next/previous/last/first pages
	Link *Links `protobuf:"bytes,2,opt,name=link,json=_links,proto3" json:"link,omitempty"`
	// count
	//
	// x-displayName: "count"
	// count is number of resources returned in the response
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// total
	//
	// x-displayName: "total"
	// total resources exist
	Total int32 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetDeploymentResponse) Reset()      { *m = GetDeploymentResponse{} }
func (*GetDeploymentResponse) ProtoMessage() {}
func (*GetDeploymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{4}
}
func (m *GetDeploymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentResponse.Merge(m, src)
}
func (m *GetDeploymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentResponse proto.InternalMessageInfo

func (m *GetDeploymentResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *GetDeploymentResponse) GetLink() *Links {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *GetDeploymentResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetDeploymentResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Get Response
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// provider_host
	//
	// x-displayName: "Provider host"
	// x-example: "mbip-70-vcenter.f5net.com"
	// Central manager cloud provider domain
	ProviderHost string `protobuf:"bytes,1,opt,name=provider_host,json=providerHost,proto3" json:"provider_host,omitempty"`
	// provider_id
	//
	// x-displayName: "Provider ID"
	// x-example: "a0b9fb1b-fcb0-4da5-9046-775cbda7bb2d"
	// Central manager cloud provider ID
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// provider_name
	//
	// x-displayName: "Provider Name"
	// x-example: "seattle01"
	// Central manager cloud provider name
	ProviderName string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// provider_type
	//
	// x-displayName: "Provider Type"
	// x-example: "F5os_rseries"
	// Central manager cloud provider type
	ProviderType string `protobuf:"bytes,4,opt,name=provider_type,json=providerType,proto3" json:"provider_type,omitempty"`
	// Updated
	//
	// x-displayName: "Updated"
	// x-example: "2023-05-26T21:36:12.401653-07:00"
	// Central manager cloud provider last software updated
	Updated *types.Timestamp `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
	// product_name
	//
	// x-displayName: "Product Name"
	// x-example: "r10900"
	// Central manager cloud provider product name
	ProductName string `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// cpu
	//
	// x-displayName: "CPU Metrics"
	// Cpu usage w.r.t timestamp and a numerical value
	Cpu []*MetricsAttribute `protobuf:"bytes,7,rep,name=cpu,proto3" json:"cpu,omitempty"`
	// memory
	//
	// x-displayName: "Memory Metrics"
	// Memory usage w.r.t timestamp and a numerical value
	Memory []*MetricsAttribute `protobuf:"bytes,8,rep,name=memory,proto3" json:"memory,omitempty"`
	// bytes_in
	//
	// x-displayName: "Bytes In"
	// Data in w.r.t timestamp and a numerical value
	BytesIn []*MetricsAttribute `protobuf:"bytes,9,rep,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	// bytes_out
	//
	// x-displayName: "Bytes Out"
	// Data out w.r.t timestamp and a numerical value
	BytesOut []*MetricsAttribute `protobuf:"bytes,10,rep,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	// Tenants
	//
	// x-displayName: "Tenants"
	// cloud provider tenant system metrics for a given Central manager
	Tenants *Tenants `protobuf:"bytes,11,opt,name=tenants,proto3" json:"tenants,omitempty"`
	// software_version
	//
	// x-displayName: "Software Version"
	// x-example: "1.8.0-1234"
	// Desired software version for central manager cloud provider
	SoftwareVersion string `protobuf:"bytes,12,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	// base_os_version
	//
	// x-displayName: "Base OS Version"
	// x-example: "1.9.0-6321"
	// Desired base os version for central manager cloud provider
	BaseOsVersion string `protobuf:"bytes,13,opt,name=base_os_version,json=baseOsVersion,proto3" json:"base_os_version,omitempty"`
	// vcpu_total
	//
	// x-displayName: "Vcpu Total"
	// x-example: 44
	// Number of VCPUs in the central manager cloud provider
	VcpuTotal int32 `protobuf:"varint,14,opt,name=vcpu_total,json=vcpuTotal,proto3" json:"vcpu_total,omitempty"`
	// vcpu_deployed
	//
	// x-displayName: "Vcpu Deployed"
	// x-example: 32
	// Number of VCPUs used in the central manager cloud provider
	VcpuDeployed int32 `protobuf:"varint,15,opt,name=vcpu_deployed,json=vcpuDeployed,proto3" json:"vcpu_deployed,omitempty"`
	// system_memory_total
	//
	// x-displayName: "Total System memory"
	// x-example: 128000000
	// Total memory capacity in the central manager cloud provider
	SystemMemoryTotal uint64 `protobuf:"varint,16,opt,name=system_memory_total,json=systemMemoryTotal,proto3" json:"system_memory_total,omitempty"`
	// system_memory_available
	//
	// x-displayName: "Available System memory"
	// x-example: 48000000
	// Available memory capacity in the central manager cloud provider
	SystemMemoryAvailable uint64 `protobuf:"varint,17,opt,name=system_memory_available,json=systemMemoryAvailable,proto3" json:"system_memory_available,omitempty"`
	// disk_size
	//
	// x-displayName: "Disk Size"
	// x-example: 1024000000
	// Total disk size in the central manager cloud provider
	DiskSize uint64 `protobuf:"varint,18,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// disk_available
	//
	// x-displayName: "Disk Available"
	// x-example: 320000000
	// Total disk size available in the central manager cloud provider
	DiskAvailable uint64 `protobuf:"varint,19,opt,name=disk_available,json=diskAvailable,proto3" json:"disk_available,omitempty"`
	// disk_usage
	//
	// x-displayName: "Disk Usage Metrics"
	// Disk usage w.r.t timestamp and a numerical value
	DiskUsage []*MetricsAttribute `protobuf:"bytes,20,rep,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	// alerts
	//
	// x-displayName: "Alert State"
	// Alarm alert of central manager cloud provider
	Alerts []*AlertState `protobuf:"bytes,21,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{5}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetProviderHost() string {
	if m != nil {
		return m.ProviderHost
	}
	return ""
}

func (m *GetResponse) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetResponse) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *GetResponse) GetProviderType() string {
	if m != nil {
		return m.ProviderType
	}
	return ""
}

func (m *GetResponse) GetUpdated() *types.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *GetResponse) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *GetResponse) GetCpu() []*MetricsAttribute {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *GetResponse) GetMemory() []*MetricsAttribute {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *GetResponse) GetBytesIn() []*MetricsAttribute {
	if m != nil {
		return m.BytesIn
	}
	return nil
}

func (m *GetResponse) GetBytesOut() []*MetricsAttribute {
	if m != nil {
		return m.BytesOut
	}
	return nil
}

func (m *GetResponse) GetTenants() *Tenants {
	if m != nil {
		return m.Tenants
	}
	return nil
}

func (m *GetResponse) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *GetResponse) GetBaseOsVersion() string {
	if m != nil {
		return m.BaseOsVersion
	}
	return ""
}

func (m *GetResponse) GetVcpuTotal() int32 {
	if m != nil {
		return m.VcpuTotal
	}
	return 0
}

func (m *GetResponse) GetVcpuDeployed() int32 {
	if m != nil {
		return m.VcpuDeployed
	}
	return 0
}

func (m *GetResponse) GetSystemMemoryTotal() uint64 {
	if m != nil {
		return m.SystemMemoryTotal
	}
	return 0
}

func (m *GetResponse) GetSystemMemoryAvailable() uint64 {
	if m != nil {
		return m.SystemMemoryAvailable
	}
	return 0
}

func (m *GetResponse) GetDiskSize() uint64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *GetResponse) GetDiskAvailable() uint64 {
	if m != nil {
		return m.DiskAvailable
	}
	return 0
}

func (m *GetResponse) GetDiskUsage() []*MetricsAttribute {
	if m != nil {
		return m.DiskUsage
	}
	return nil
}

func (m *GetResponse) GetAlerts() []*AlertState {
	if m != nil {
		return m.Alerts
	}
	return nil
}

// Provider
//
// x-displayName: "Provider"
// cloud provider system metrics for a given Central manager
type Provider struct {
	// provider_host
	//
	// x-displayName: "Provider host"
	// x-example: "mbip-70-vcenter.f5net.com"
	// Central manager cloud provider domain
	ProviderHost string `protobuf:"bytes,1,opt,name=provider_host,json=providerHost,proto3" json:"provider_host,omitempty"`
	// provider_id
	//
	// x-displayName: "Provider ID"
	// x-example: "a0b9fb1b-fcb0-4da5-9046-775cbda7bb2d"
	// Central manager cloud provider ID
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// provider_name
	//
	// x-displayName: "Provider Name"
	// x-example: "seattle01"
	// Central manager cloud provider name
	ProviderName string `protobuf:"bytes,3,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// provider_type
	//
	// x-displayName: "Provider Type"
	// x-example: "F5os_rseries"
	// Central manager cloud provider type
	ProviderType string `protobuf:"bytes,4,opt,name=provider_type,json=providerType,proto3" json:"provider_type,omitempty"`
	// Updated
	//
	// x-displayName: "Updated"
	// x-example: "2023-05-26T21:36:12.401653-07:00"
	// Central manager cloud provider last software updated
	Updated *types.Timestamp `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
	// product_name
	//
	// x-displayName: "Product Name"
	// x-example: "r10900"
	// Central manager cloud provider product name
	ProductName string `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// cpu
	//
	// x-displayName: "CPU Metrics"
	// Cpu usage w.r.t timestamp and a numerical value
	Cpu []*MetricsAttribute `protobuf:"bytes,7,rep,name=cpu,proto3" json:"cpu,omitempty"`
	// memory
	//
	// x-displayName: "Memory Metrics"
	// Memory usage w.r.t timestamp and a numerical value
	Memory []*MetricsAttribute `protobuf:"bytes,8,rep,name=memory,proto3" json:"memory,omitempty"`
	// bytes_in
	//
	// x-displayName: "Bytes In"
	// Data in w.r.t timestamp and a numerical value
	BytesIn []*MetricsAttribute `protobuf:"bytes,9,rep,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	// bytes_out
	//
	// x-displayName: "Bytes Out"
	// Data out w.r.t timestamp and a numerical value
	BytesOut []*MetricsAttribute `protobuf:"bytes,10,rep,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
}

func (m *Provider) Reset()      { *m = Provider{} }
func (*Provider) ProtoMessage() {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{6}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetProviderHost() string {
	if m != nil {
		return m.ProviderHost
	}
	return ""
}

func (m *Provider) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *Provider) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *Provider) GetProviderType() string {
	if m != nil {
		return m.ProviderType
	}
	return ""
}

func (m *Provider) GetUpdated() *types.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *Provider) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Provider) GetCpu() []*MetricsAttribute {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Provider) GetMemory() []*MetricsAttribute {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Provider) GetBytesIn() []*MetricsAttribute {
	if m != nil {
		return m.BytesIn
	}
	return nil
}

func (m *Provider) GetBytesOut() []*MetricsAttribute {
	if m != nil {
		return m.BytesOut
	}
	return nil
}

// Tenants
//
// x-displayName: "Tenants"
// cloud provider tenant system metrics for a given Central manager
type Tenants struct {
	// cpu
	//
	// x-displayName: "CPU Metrics"
	// Cpu usage w.r.t timestamp and a numerical value
	Cpu []*MetricsAttribute `protobuf:"bytes,1,rep,name=cpu,proto3" json:"cpu,omitempty"`
	// memory
	//
	// x-displayName: "Memory Metrics"
	// Memory usage w.r.t timestamp and a numerical value
	Memory []*MetricsAttribute `protobuf:"bytes,2,rep,name=memory,proto3" json:"memory,omitempty"`
	// disk
	//
	// x-displayName: "Disk Metrics"
	// Disk usage w.r.t timestamp and a numerical value
	Disk []*MetricsAttribute `protobuf:"bytes,3,rep,name=disk,proto3" json:"disk,omitempty"`
}

func (m *Tenants) Reset()      { *m = Tenants{} }
func (*Tenants) ProtoMessage() {}
func (*Tenants) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{7}
}
func (m *Tenants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tenants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tenants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tenants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenants.Merge(m, src)
}
func (m *Tenants) XXX_Size() int {
	return m.Size()
}
func (m *Tenants) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenants.DiscardUnknown(m)
}

var xxx_messageInfo_Tenants proto.InternalMessageInfo

func (m *Tenants) GetCpu() []*MetricsAttribute {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Tenants) GetMemory() []*MetricsAttribute {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Tenants) GetDisk() []*MetricsAttribute {
	if m != nil {
		return m.Disk
	}
	return nil
}

// AlertState
//
// x-displayName: "Alert State"
// Alarm alert from the  central manager cloud provider
type AlertState struct {
	// id
	//
	// x-displayName: "id"
	// x-example: "66304"
	// Alarm id of central manager cloud provider
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// resource
	//
	// x-displayName: "Resource"
	// x-example: "lcd"
	// Alarm resource of central manager cloud provider
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// State
	//
	// x-displayName: "State"
	// Alarm state of central manager cloud provider
	State *State `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *AlertState) Reset()      { *m = AlertState{} }
func (*AlertState) ProtoMessage() {}
func (*AlertState) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{8}
}
func (m *AlertState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertState.Merge(m, src)
}
func (m *AlertState) XXX_Size() int {
	return m.Size()
}
func (m *AlertState) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertState.DiscardUnknown(m)
}

var xxx_messageInfo_AlertState proto.InternalMessageInfo

func (m *AlertState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AlertState) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *AlertState) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// State
//
// x-displayName: "State"
// Alarm state of central manager cloud provider
type State struct {
	// severity
	//
	// x-displayName: "Severity"
	// x-example: "f5-alarm-types:ERROR"
	// Alarm severity
	Severity string `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`
	// text
	//
	// x-displayName: "Text"
	// x-example: "LCD fault detected"
	// Description of alarm
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// time_created
	//
	// x-displayName: "Time created"
	// x-example: "2020-06-22 19:13:53.784778959 UTC"
	// Alarm created time
	TimeCreated *types.Timestamp `protobuf:"bytes,3,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
}

func (m *State) Reset()      { *m = State{} }
func (*State) ProtoMessage() {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{9}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *State) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *State) GetTimeCreated() *types.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

// Deployment
//
// x-displayName: "Deployment"
// cloud provider deployment system metrics for a given Central manager
type Deployment struct {
	// cpu
	//
	// x-displayName: "cpu"
	// Cpu usage w.r.t timestamp and a numerical value
	Cpu []*MetricsAttribute `protobuf:"bytes,1,rep,name=cpu,proto3" json:"cpu,omitempty"`
	// memory
	//
	// x-displayName: "Memory Metrics"
	// Memory usage w.r.t timestamp and a numerical value
	Memory []*MetricsAttribute `protobuf:"bytes,2,rep,name=memory,proto3" json:"memory,omitempty"`
	// disk
	//
	// x-displayName: "Disk Metrics"
	// Disk usage w.r.t timestamp and a numerical value
	Disk []*MetricsAttribute `protobuf:"bytes,3,rep,name=disk,proto3" json:"disk,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "tenant1"
	// Central manager cloud provider tenant name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// type
	//
	// x-displayName: "Type"
	// x-example: "BIG-IP"
	// Central manager cloud provider tenant type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// state
	//
	// x-displayName: "State"
	// x-example: "Deployed"
	// Central manager cloud provider tenant state
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// x-example: "Running"
	// Central manager cloud provider tenant status
	Status string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// vcpu
	//
	// x-displayName: "vcpu"
	// x-example: 12
	// Number of CPU
	Vcpu int32 `protobuf:"varint,8,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	// memory_total
	//
	// x-displayName: "Memory total"
	// x-example: 12888
	// Total memory
	MemoryTotal int32 `protobuf:"varint,9,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	// disk_total
	//
	// x-displayName: "Disk total"
	// x-example:  48000000
	// Total disk
	DiskTotal int32 `protobuf:"varint,10,opt,name=disk_total,json=diskTotal,proto3" json:"disk_total,omitempty"`
}

func (m *Deployment) Reset()      { *m = Deployment{} }
func (*Deployment) ProtoMessage() {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{10}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(m, src)
}
func (m *Deployment) XXX_Size() int {
	return m.Size()
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetCpu() []*MetricsAttribute {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Deployment) GetMemory() []*MetricsAttribute {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Deployment) GetDisk() []*MetricsAttribute {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *Deployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deployment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Deployment) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Deployment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Deployment) GetVcpu() int32 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *Deployment) GetMemoryTotal() int32 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *Deployment) GetDiskTotal() int32 {
	if m != nil {
		return m.DiskTotal
	}
	return 0
}

// Links
//
// x-displayName: "Links"
// Link is href to next/previous/last/first pages
type Links struct {
	// self
	//
	// x-displayName: "self"
	// link that navigates to the self page
	Self string `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// prev
	//
	// x-displayName: "prev"
	// link that navigates to the previous page
	Prev string `protobuf:"bytes,2,opt,name=prev,proto3" json:"prev,omitempty"`
	// next
	//
	// x-displayName: "next"
	// link that navigates to the next page
	Next string `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	// first
	//
	// x-displayName: "first"
	// link that navigates to the first page
	First string `protobuf:"bytes,4,opt,name=first,proto3" json:"first,omitempty"`
	// last
	//
	// x-displayName: "last"
	// link that navigates to the last page
	Last string `protobuf:"bytes,5,opt,name=last,proto3" json:"last,omitempty"`
}

func (m *Links) Reset()      { *m = Links{} }
func (*Links) ProtoMessage() {}
func (*Links) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{11}
}
func (m *Links) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Links) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Links.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Links) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Links.Merge(m, src)
}
func (m *Links) XXX_Size() int {
	return m.Size()
}
func (m *Links) XXX_DiscardUnknown() {
	xxx_messageInfo_Links.DiscardUnknown(m)
}

var xxx_messageInfo_Links proto.InternalMessageInfo

func (m *Links) GetSelf() string {
	if m != nil {
		return m.Self
	}
	return ""
}

func (m *Links) GetPrev() string {
	if m != nil {
		return m.Prev
	}
	return ""
}

func (m *Links) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *Links) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Links) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

// Metrics
//
// x-displayName: "Metrics Attribute"
// Metric w.r.t timestamp and a numerical value
type MetricsAttribute struct {
	// timestamp
	//
	// x-displayName: "timestamp"
	// x-example: 1703072439937
	// timestamp
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// value
	//
	// x-displayName: "value"
	// x-example: 50.2
	// value
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricsAttribute) Reset()      { *m = MetricsAttribute{} }
func (*MetricsAttribute) ProtoMessage() {}
func (*MetricsAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_43cf26552480eac7, []int{12}
}
func (m *MetricsAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsAttribute.Merge(m, src)
}
func (m *MetricsAttribute) XXX_Size() int {
	return m.Size()
}
func (m *MetricsAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsAttribute proto.InternalMessageInfo

func (m *MetricsAttribute) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MetricsAttribute) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.provider.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.provider.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.provider.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.provider.ListResponse")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.central_manager.provider.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.central_manager.provider.GetRequest")
	proto.RegisterType((*GetDeploymentRequest)(nil), "ves.io.schema.central_manager.provider.GetDeploymentRequest")
	golang_proto.RegisterType((*GetDeploymentRequest)(nil), "ves.io.schema.central_manager.provider.GetDeploymentRequest")
	proto.RegisterType((*GetDeploymentResponse)(nil), "ves.io.schema.central_manager.provider.GetDeploymentResponse")
	golang_proto.RegisterType((*GetDeploymentResponse)(nil), "ves.io.schema.central_manager.provider.GetDeploymentResponse")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.provider.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.provider.GetResponse")
	proto.RegisterType((*Provider)(nil), "ves.io.schema.central_manager.provider.Provider")
	golang_proto.RegisterType((*Provider)(nil), "ves.io.schema.central_manager.provider.Provider")
	proto.RegisterType((*Tenants)(nil), "ves.io.schema.central_manager.provider.Tenants")
	golang_proto.RegisterType((*Tenants)(nil), "ves.io.schema.central_manager.provider.Tenants")
	proto.RegisterType((*AlertState)(nil), "ves.io.schema.central_manager.provider.AlertState")
	golang_proto.RegisterType((*AlertState)(nil), "ves.io.schema.central_manager.provider.AlertState")
	proto.RegisterType((*State)(nil), "ves.io.schema.central_manager.provider.State")
	golang_proto.RegisterType((*State)(nil), "ves.io.schema.central_manager.provider.State")
	proto.RegisterType((*Deployment)(nil), "ves.io.schema.central_manager.provider.Deployment")
	golang_proto.RegisterType((*Deployment)(nil), "ves.io.schema.central_manager.provider.Deployment")
	proto.RegisterType((*Links)(nil), "ves.io.schema.central_manager.provider.Links")
	golang_proto.RegisterType((*Links)(nil), "ves.io.schema.central_manager.provider.Links")
	proto.RegisterType((*MetricsAttribute)(nil), "ves.io.schema.central_manager.provider.MetricsAttribute")
	golang_proto.RegisterType((*MetricsAttribute)(nil), "ves.io.schema.central_manager.provider.MetricsAttribute")
}

func init() {
	proto.RegisterFile("ves.io/schema/central_manager/provider/public_customapi.proto", fileDescriptor_43cf26552480eac7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/central_manager/provider/public_customapi.proto", fileDescriptor_43cf26552480eac7)
}

var fileDescriptor_43cf26552480eac7 = []byte{
	// 1542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x8f, 0x13, 0x47,
	0x16, 0x9f, 0xf2, 0xc7, 0x8c, 0x5d, 0x9e, 0xe1, 0xa3, 0x18, 0x76, 0x7b, 0x0d, 0x98, 0xd9, 0x5e,
	0x2d, 0x1a, 0xb4, 0xd8, 0x86, 0x01, 0xf6, 0x4b, 0xcb, 0x61, 0xc6, 0x98, 0x59, 0xa3, 0x61, 0x06,
	0x35, 0x66, 0xd1, 0x7e, 0xc9, 0x2a, 0xb7, 0xcb, 0x9e, 0xd6, 0x74, 0x77, 0xf5, 0x76, 0x55, 0x1b,
	0x0c, 0x42, 0x5a, 0xcd, 0x21, 0x87, 0x9c, 0x12, 0x45, 0xca, 0x5f, 0x90, 0x43, 0xfe, 0x84, 0x28,
	0x28, 0x12, 0xb7, 0x70, 0x8a, 0x46, 0xca, 0x85, 0x90, 0x28, 0x04, 0x4f, 0x12, 0x25, 0x37, 0x24,
	0x94, 0x7b, 0x54, 0x55, 0xdd, 0x1e, 0xdb, 0x99, 0x80, 0x07, 0x73, 0x0b, 0xb7, 0xaa, 0xdf, 0x7b,
	0xef, 0xd7, 0xf5, 0x5e, 0xd5, 0x7b, 0x55, 0xaf, 0xe1, 0x85, 0x36, 0x61, 0x05, 0x8b, 0x16, 0x99,
	0xb9, 0x4e, 0x1c, 0x5c, 0x34, 0x89, 0xcb, 0x7d, 0x6c, 0xd7, 0x1c, 0xec, 0xe2, 0x16, 0xf1, 0x8b,
	0x9e, 0x4f, 0xdb, 0x56, 0x43, 0x0c, 0x82, 0xba, 0x6d, 0x99, 0x35, 0x33, 0x60, 0x9c, 0x3a, 0xd8,
	0xb3, 0x0a, 0x9e, 0x4f, 0x39, 0x45, 0x27, 0x94, 0x79, 0x41, 0x99, 0x17, 0x86, 0xcc, 0x0b, 0x91,
	0x79, 0x36, 0xdf, 0xb2, 0xf8, 0x7a, 0x50, 0x2f, 0x98, 0xd4, 0x29, 0xb6, 0x68, 0x8b, 0x16, 0xa5,
	0x79, 0x3d, 0x68, 0xca, 0x99, 0x9c, 0xc8, 0x91, 0xa2, 0xcd, 0x1e, 0x6d, 0x51, 0xda, 0xb2, 0x49,
	0x11, 0x7b, 0x56, 0x11, 0xbb, 0x2e, 0xe5, 0x98, 0x5b, 0xd4, 0x65, 0xa1, 0xf4, 0x48, 0x28, 0xed,
	0x71, 0x10, 0xc7, 0xe3, 0x9d, 0x50, 0x78, 0x7c, 0x58, 0xc8, 0x2d, 0x87, 0x30, 0x8e, 0x1d, 0x2f,
	0xb2, 0x1e, 0xf4, 0x98, 0x7a, 0xfd, 0xd4, 0x47, 0x07, 0x85, 0x6d, 0x6c, 0x5b, 0x0d, 0xcc, 0x49,
	0x28, 0xd5, 0x87, 0xa4, 0x84, 0x11, 0xb7, 0x3d, 0xc4, 0x30, 0x37, 0xa4, 0x63, 0x91, 0x9b, 0xb5,
	0x01, 0x0d, 0x5d, 0x87, 0x99, 0x15, 0x8b, 0x71, 0x83, 0xfc, 0x2f, 0x20, 0x8c, 0xa3, 0x43, 0x30,
	0x69, 0x3a, 0x35, 0xab, 0xa1, 0x81, 0x39, 0x30, 0x9f, 0x36, 0x12, 0xa6, 0x53, 0x69, 0xe8, 0x6f,
	0x02, 0x38, 0xad, 0x94, 0x98, 0x47, 0x5d, 0x46, 0xd0, 0x2a, 0x4c, 0x47, 0xc1, 0x64, 0x1a, 0x98,
	0x8b, 0xcf, 0x67, 0x16, 0x4e, 0x17, 0x46, 0x0b, 0x7e, 0xe1, 0x6a, 0x38, 0x30, 0x76, 0x28, 0xd0,
	0x2c, 0x4c, 0x9a, 0x34, 0x70, 0xb9, 0x16, 0x9b, 0x03, 0xf3, 0x49, 0x43, 0x4d, 0x04, 0xca, 0x29,
	0xc7, 0xb6, 0x16, 0x57, 0xa8, 0x9c, 0xe8, 0x4b, 0x10, 0x2e, 0x93, 0xe7, 0xae, 0x17, 0x1d, 0x87,
	0x99, 0x88, 0x5b, 0x88, 0x62, 0x52, 0x04, 0x23, 0xa8, 0xd2, 0xd0, 0xdf, 0x00, 0x70, 0x76, 0x99,
	0xf0, 0x8b, 0xc4, 0xb3, 0x69, 0xc7, 0x21, 0xee, 0x78, 0x74, 0xe8, 0x18, 0x4c, 0xda, 0x96, 0x63,
	0x71, 0xb5, 0xd0, 0xa5, 0xa9, 0x47, 0xf7, 0x40, 0xfc, 0xcc, 0xe9, 0xd3, 0x86, 0x42, 0xd1, 0x6f,
	0x60, 0xc2, 0xc3, 0x2d, 0xa2, 0x25, 0xa4, 0x34, 0xf9, 0xe8, 0x1e, 0x00, 0x67, 0x0c, 0x09, 0xe9,
	0x5f, 0x02, 0x78, 0x78, 0x68, 0x21, 0x61, 0x88, 0xab, 0x30, 0xd3, 0xe8, 0xa1, 0x51, 0x90, 0x17,
	0x46, 0x0d, 0x72, 0x1f, 0x61, 0x3f, 0x0d, 0x2a, 0xc1, 0x84, 0x6d, 0xb9, 0x1b, 0xd2, 0x87, 0xcc,
	0x42, 0x7e, 0x54, 0xba, 0x15, 0xcb, 0xdd, 0x60, 0xc6, 0x64, 0x4d, 0xd8, 0xf6, 0xed, 0x56, 0x7c,
	0xd7, 0xdd, 0x4a, 0xf4, 0xef, 0xd6, 0xb3, 0x14, 0xcc, 0xc8, 0xed, 0x0a, 0xdd, 0xfa, 0x1d, 0x9c,
	0xe9, 0xc5, 0x72, 0x9d, 0x32, 0x1e, 0x06, 0x7a, 0x3a, 0x02, 0xff, 0x4e, 0x19, 0x7f, 0x71, 0xc0,
	0xfb, 0x59, 0x5c, 0xec, 0x10, 0xb9, 0x92, 0x3e, 0x96, 0x55, 0xec, 0x0c, 0x7e, 0x8a, 0x77, 0x3c,
	0x15, 0xff, 0x3e, 0xa5, 0x6a, 0xc7, 0x23, 0xe8, 0x1c, 0x9c, 0x0a, 0x3c, 0x91, 0x54, 0x0d, 0x2d,
	0x29, 0x63, 0x92, 0x2d, 0xa8, 0x94, 0x2d, 0x44, 0x29, 0x5b, 0xa8, 0x46, 0x29, 0x6b, 0x44, 0xaa,
	0xe8, 0xb7, 0x50, 0xb0, 0x34, 0x02, 0x93, 0xab, 0xcf, 0x4f, 0x4a, 0xe6, 0x4c, 0x88, 0xc9, 0xaf,
	0x5f, 0x86, 0x71, 0xd3, 0x0b, 0xb4, 0x29, 0xb9, 0x6f, 0x7f, 0x1e, 0x35, 0xd0, 0x57, 0x08, 0xf7,
	0x2d, 0x93, 0x2d, 0x72, 0xee, 0x5b, 0xf5, 0x80, 0x13, 0x43, 0x90, 0xa0, 0xab, 0x70, 0xd2, 0x21,
	0x0e, 0xf5, 0x3b, 0x5a, 0x6a, 0x4c, 0xba, 0x90, 0x07, 0x5d, 0x83, 0xa9, 0x7a, 0x87, 0x13, 0x56,
	0xb3, 0x5c, 0x2d, 0x3d, 0x26, 0xe7, 0x94, 0x64, 0xaa, 0xb8, 0xe8, 0x3a, 0x4c, 0x2b, 0x52, 0x1a,
	0x70, 0x0d, 0x8e, 0xc9, 0xaa, 0xd6, 0xb7, 0x16, 0x70, 0x54, 0x81, 0x53, 0x9c, 0xb8, 0x58, 0x64,
	0x41, 0x46, 0x6e, 0x51, 0x71, 0x54, 0xd2, 0xaa, 0x32, 0x33, 0x22, 0x7b, 0x74, 0x12, 0x1e, 0x60,
	0xb4, 0xc9, 0x6f, 0x62, 0x9f, 0xd4, 0xda, 0xc4, 0x67, 0x16, 0x75, 0xb5, 0x69, 0xb9, 0x77, 0xfb,
	0x23, 0xfc, 0x1f, 0x0a, 0x46, 0x27, 0xe0, 0xfe, 0x3a, 0x66, 0xa4, 0x46, 0x59, 0x4f, 0x73, 0x46,
	0x6a, 0xce, 0x08, 0x78, 0x8d, 0x45, 0x7a, 0xc7, 0x20, 0x6c, 0x9b, 0x5e, 0x50, 0x53, 0x67, 0x7f,
	0x9f, 0x3c, 0xfb, 0x69, 0x81, 0x54, 0x05, 0x20, 0x0e, 0xa1, 0x14, 0xab, 0x24, 0x24, 0x0d, 0x6d,
	0xbf, 0xd4, 0x98, 0x16, 0xe0, 0xc5, 0x10, 0x43, 0x05, 0x78, 0x88, 0x75, 0x18, 0x27, 0x4e, 0x4d,
	0x6d, 0x4f, 0x48, 0x76, 0x60, 0x0e, 0xcc, 0x27, 0x8c, 0x83, 0x4a, 0x74, 0x45, 0x4a, 0x14, 0xe9,
	0x1f, 0xe1, 0xaf, 0x07, 0xf5, 0x71, 0x1b, 0x5b, 0x36, 0xae, 0xdb, 0x44, 0x3b, 0x28, 0x6d, 0x0e,
	0xf7, 0xdb, 0x2c, 0x46, 0x42, 0x74, 0x04, 0xa6, 0x1b, 0x16, 0xdb, 0xa8, 0x31, 0xeb, 0x36, 0xd1,
	0x90, 0xd4, 0x4c, 0x09, 0xe0, 0x9a, 0x75, 0x9b, 0xa0, 0xdf, 0xc3, 0x7d, 0x52, 0xb8, 0xc3, 0x75,
	0x48, 0x6a, 0xcc, 0x08, 0x74, 0x87, 0xe3, 0x06, 0x84, 0x52, 0x2d, 0x60, 0xa2, 0xa4, 0xcd, 0x8e,
	0xb9, 0xcb, 0x72, 0x3d, 0xd7, 0x05, 0x15, 0xba, 0x0c, 0x27, 0xb1, 0x4d, 0x7c, 0xce, 0xb4, 0xc3,
	0x7b, 0xab, 0x75, 0x8b, 0xc2, 0xea, 0x1a, 0xc7, 0xe2, 0x78, 0x2b, 0x06, 0xfd, 0xa3, 0x04, 0x4c,
	0x45, 0xf7, 0xcc, 0xeb, 0x92, 0xf3, 0xba, 0xe4, 0xec, 0xb1, 0xe4, 0xe8, 0x3f, 0x00, 0x38, 0x15,
	0x16, 0x8f, 0x28, 0xaa, 0xe0, 0xd5, 0x46, 0x35, 0xf6, 0x8a, 0xa2, 0xba, 0x02, 0x13, 0x22, 0x85,
	0xb4, 0xf8, 0x98, 0x7c, 0x92, 0x45, 0xbf, 0x0b, 0xe1, 0x4e, 0x36, 0xa1, 0x7d, 0x30, 0xd6, 0x7b,
	0x09, 0xc5, 0xac, 0x06, 0xca, 0xc2, 0x94, 0x4f, 0x18, 0x0d, 0x7c, 0x93, 0x84, 0x09, 0xd2, 0x9b,
	0xa3, 0x12, 0x4c, 0x32, 0x61, 0x24, 0xd3, 0x62, 0x0f, 0x2f, 0x0b, 0x95, 0xb7, 0xca, 0x56, 0x7f,
	0x1c, 0x83, 0x49, 0xf5, 0xe9, 0xcd, 0x18, 0x4c, 0x31, 0xd2, 0x26, 0xbe, 0xc5, 0x3b, 0x6a, 0x05,
	0x4b, 0xdf, 0x80, 0x0f, 0xbf, 0xbf, 0x1f, 0x7f, 0x0c, 0xfc, 0x2f, 0x80, 0xf1, 0x19, 0xf8, 0xb7,
	0xde, 0x3c, 0x9f, 0xc7, 0x36, 0xf6, 0x9d, 0xbc, 0x48, 0x34, 0xf6, 0xd7, 0xf2, 0x95, 0xb2, 0xb1,
	0x5c, 0x5e, 0x2d, 0xfd, 0x53, 0x3f, 0x35, 0x37, 0x2c, 0x5b, 0x5c, 0x29, 0x1b, 0x55, 0x81, 0x53,
	0x8f, 0xb8, 0x26, 0x75, 0x9b, 0x56, 0x6b, 0x40, 0x5e, 0x32, 0x2a, 0xd5, 0x4a, 0x69, 0x71, 0x65,
	0x17, 0xd3, 0xb2, 0x61, 0xac, 0x19, 0xcf, 0x31, 0xbd, 0xb1, 0x68, 0xac, 0x56, 0x56, 0x97, 0x77,
	0xb1, 0x5c, 0x5d, 0xab, 0x56, 0x4a, 0xe5, 0x5d, 0x04, 0x95, 0xd5, 0x4b, 0x6b, 0xbb, 0xc0, 0x17,
	0xcb, 0x4b, 0xd7, 0x97, 0xf5, 0xff, 0x1a, 0x3d, 0xbf, 0x11, 0x82, 0x09, 0x4e, 0x6e, 0xf1, 0x30,
	0xd6, 0x72, 0x8c, 0x2e, 0xc0, 0x69, 0xd1, 0x42, 0xd4, 0x4c, 0x9f, 0xc8, 0x0a, 0x12, 0x7f, 0x61,
	0x05, 0xc9, 0x08, 0xfd, 0x92, 0x52, 0xd7, 0xdf, 0x8b, 0x43, 0xb8, 0xf3, 0x36, 0xfc, 0x25, 0x9d,
	0x6d, 0x11, 0x4d, 0x59, 0x38, 0x55, 0x49, 0x96, 0x63, 0x19, 0x61, 0x51, 0xa6, 0x93, 0x61, 0x84,
	0x45, 0x79, 0x9e, 0x8d, 0x4e, 0xb2, 0xaa, 0xb0, 0x6a, 0x82, 0x7e, 0x05, 0x27, 0xc5, 0x20, 0x60,
	0xda, 0x94, 0x84, 0xc3, 0x99, 0x60, 0x10, 0x57, 0xb9, 0x96, 0x92, 0xd7, 0xba, 0x1c, 0x8b, 0x52,
	0x3d, 0x70, 0x8f, 0xa7, 0xa5, 0x2c, 0xe3, 0xf4, 0xdd, 0xe0, 0xc7, 0xc2, 0x5b, 0x54, 0x29, 0x40,
	0xf5, 0x6a, 0x10, 0x88, 0x14, 0xeb, 0x0e, 0x4c, 0xca, 0x27, 0xb7, 0xa0, 0x67, 0xc4, 0x6e, 0x46,
	0xed, 0x88, 0x18, 0x0b, 0xcc, 0xf3, 0x49, 0x3b, 0x3a, 0x16, 0x62, 0x2c, 0x9d, 0x13, 0x47, 0x25,
	0x1e, 0x3a, 0x27, 0x8e, 0xca, 0x2c, 0x4c, 0x36, 0x2d, 0x9f, 0xf1, 0xd0, 0x63, 0x35, 0x11, 0x9a,
	0x36, 0x66, 0x3c, 0x72, 0x59, 0x8c, 0xf5, 0x4b, 0xf0, 0xc0, 0x70, 0xd0, 0xd0, 0x51, 0x98, 0xee,
	0xf5, 0xaa, 0xf2, 0xf3, 0x09, 0x63, 0x07, 0x10, 0xdc, 0x6d, 0x6c, 0x07, 0xaa, 0x0e, 0x00, 0x43,
	0x4d, 0x16, 0x9e, 0x25, 0x61, 0xba, 0x24, 0x7b, 0xf2, 0xc5, 0xab, 0x15, 0xf4, 0x39, 0x80, 0x09,
	0xd1, 0x35, 0xa2, 0xb3, 0xa3, 0xb7, 0x19, 0xbd, 0x46, 0x34, 0x7b, 0x6e, 0x6f, 0x46, 0xaa, 0xbd,
	0xd0, 0xd7, 0x1f, 0x7c, 0x10, 0x03, 0xdd, 0x8f, 0xb5, 0x62, 0xf3, 0xfc, 0x2d, 0x33, 0x6f, 0xda,
	0x04, 0xfb, 0xa2, 0xe7, 0xcd, 0x07, 0x8c, 0xf8, 0xa7, 0x44, 0x33, 0x9c, 0xb7, 0x68, 0xde, 0x72,
	0x9b, 0x3e, 0x66, 0xdc, 0x0f, 0x4c, 0x1e, 0xf8, 0x24, 0xef, 0x13, 0xdc, 0xd8, 0xfc, 0xf4, 0xeb,
	0x77, 0x62, 0x7f, 0x40, 0x27, 0xc3, 0x3f, 0x0b, 0x3f, 0xfb, 0xe7, 0x81, 0x15, 0xef, 0xc8, 0xfe,
	0xf0, 0x2e, 0xfa, 0x16, 0xc0, 0xf8, 0x32, 0xe1, 0x68, 0xe4, 0x67, 0xca, 0x4e, 0xd3, 0x9a, 0x3d,
	0xbb, 0x27, 0x9b, 0xd0, 0xb5, 0xf6, 0x38, 0xae, 0xfd, 0x05, 0xfd, 0x69, 0x64, 0xd7, 0x8a, 0x77,
	0xfa, 0x5e, 0x42, 0x77, 0xd1, 0xdb, 0x31, 0x38, 0x33, 0xd0, 0xa2, 0xa2, 0xbf, 0xed, 0x61, 0xf9,
	0x3f, 0x69, 0xb1, 0xb3, 0x17, 0x5e, 0xd2, 0x3a, 0x0c, 0xc3, 0x26, 0x18, 0x27, 0x0e, 0x65, 0x54,
	0x7a, 0xc9, 0x38, 0x14, 0xfb, 0xda, 0xe8, 0x6c, 0xe6, 0xfe, 0x3d, 0x10, 0xdf, 0xfc, 0x44, 0x8b,
	0x6f, 0xc5, 0xc0, 0xd2, 0xbb, 0x60, 0xeb, 0x49, 0x6e, 0xe2, 0xe1, 0x93, 0xdc, 0xc4, 0xd3, 0x27,
	0x39, 0xf0, 0xff, 0x6e, 0x0e, 0xbc, 0xdf, 0xcd, 0x81, 0x07, 0xdd, 0x1c, 0xd8, 0xea, 0xe6, 0xc0,
	0x57, 0xdd, 0x1c, 0xf8, 0xae, 0x9b, 0x9b, 0x78, 0xda, 0xcd, 0x81, 0xb7, 0xb6, 0x73, 0x13, 0xf7,
	0xb7, 0x73, 0x60, 0x6b, 0x3b, 0x37, 0xf1, 0x70, 0x3b, 0x37, 0xf1, 0xaf, 0xff, 0xb4, 0xa8, 0xb7,
	0xd1, 0x2a, 0xb4, 0xa9, 0xcd, 0x89, 0xef, 0xe3, 0x42, 0xc0, 0x8a, 0x72, 0xd0, 0xa4, 0xbe, 0x93,
	0x8f, 0xbe, 0x9e, 0x8f, 0xc4, 0x45, 0xaf, 0xde, 0xa2, 0x45, 0x72, 0x8b, 0x87, 0x7f, 0x73, 0x5e,
	0xf0, 0x97, 0xac, 0x3e, 0x29, 0x6f, 0x83, 0xb3, 0x3f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x5a,
	0xa7, 0xdd, 0x56, 0x13, 0x00, 0x00,
}

func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Providers) != len(that1.Providers) {
		return false
	}
	for i := range this.Providers {
		if !this.Providers[i].Equal(that1.Providers[i]) {
			return false
		}
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.ProviderId != that1.ProviderId {
		return false
	}
	return true
}
func (this *GetDeploymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeploymentRequest)
	if !ok {
		that2, ok := that.(GetDeploymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.ProviderId != that1.ProviderId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *GetDeploymentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeploymentResponse)
	if !ok {
		that2, ok := that.(GetDeploymentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Deployments) != len(that1.Deployments) {
		return false
	}
	for i := range this.Deployments {
		if !this.Deployments[i].Equal(that1.Deployments[i]) {
			return false
		}
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProviderHost != that1.ProviderHost {
		return false
	}
	if this.ProviderId != that1.ProviderId {
		return false
	}
	if this.ProviderName != that1.ProviderName {
		return false
	}
	if this.ProviderType != that1.ProviderType {
		return false
	}
	if !this.Updated.Equal(that1.Updated) {
		return false
	}
	if this.ProductName != that1.ProductName {
		return false
	}
	if len(this.Cpu) != len(that1.Cpu) {
		return false
	}
	for i := range this.Cpu {
		if !this.Cpu[i].Equal(that1.Cpu[i]) {
			return false
		}
	}
	if len(this.Memory) != len(that1.Memory) {
		return false
	}
	for i := range this.Memory {
		if !this.Memory[i].Equal(that1.Memory[i]) {
			return false
		}
	}
	if len(this.BytesIn) != len(that1.BytesIn) {
		return false
	}
	for i := range this.BytesIn {
		if !this.BytesIn[i].Equal(that1.BytesIn[i]) {
			return false
		}
	}
	if len(this.BytesOut) != len(that1.BytesOut) {
		return false
	}
	for i := range this.BytesOut {
		if !this.BytesOut[i].Equal(that1.BytesOut[i]) {
			return false
		}
	}
	if !this.Tenants.Equal(that1.Tenants) {
		return false
	}
	if this.SoftwareVersion != that1.SoftwareVersion {
		return false
	}
	if this.BaseOsVersion != that1.BaseOsVersion {
		return false
	}
	if this.VcpuTotal != that1.VcpuTotal {
		return false
	}
	if this.VcpuDeployed != that1.VcpuDeployed {
		return false
	}
	if this.SystemMemoryTotal != that1.SystemMemoryTotal {
		return false
	}
	if this.SystemMemoryAvailable != that1.SystemMemoryAvailable {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if this.DiskAvailable != that1.DiskAvailable {
		return false
	}
	if len(this.DiskUsage) != len(that1.DiskUsage) {
		return false
	}
	for i := range this.DiskUsage {
		if !this.DiskUsage[i].Equal(that1.DiskUsage[i]) {
			return false
		}
	}
	if len(this.Alerts) != len(that1.Alerts) {
		return false
	}
	for i := range this.Alerts {
		if !this.Alerts[i].Equal(that1.Alerts[i]) {
			return false
		}
	}
	return true
}
func (this *Provider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Provider)
	if !ok {
		that2, ok := that.(Provider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProviderHost != that1.ProviderHost {
		return false
	}
	if this.ProviderId != that1.ProviderId {
		return false
	}
	if this.ProviderName != that1.ProviderName {
		return false
	}
	if this.ProviderType != that1.ProviderType {
		return false
	}
	if !this.Updated.Equal(that1.Updated) {
		return false
	}
	if this.ProductName != that1.ProductName {
		return false
	}
	if len(this.Cpu) != len(that1.Cpu) {
		return false
	}
	for i := range this.Cpu {
		if !this.Cpu[i].Equal(that1.Cpu[i]) {
			return false
		}
	}
	if len(this.Memory) != len(that1.Memory) {
		return false
	}
	for i := range this.Memory {
		if !this.Memory[i].Equal(that1.Memory[i]) {
			return false
		}
	}
	if len(this.BytesIn) != len(that1.BytesIn) {
		return false
	}
	for i := range this.BytesIn {
		if !this.BytesIn[i].Equal(that1.BytesIn[i]) {
			return false
		}
	}
	if len(this.BytesOut) != len(that1.BytesOut) {
		return false
	}
	for i := range this.BytesOut {
		if !this.BytesOut[i].Equal(that1.BytesOut[i]) {
			return false
		}
	}
	return true
}
func (this *Tenants) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tenants)
	if !ok {
		that2, ok := that.(Tenants)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cpu) != len(that1.Cpu) {
		return false
	}
	for i := range this.Cpu {
		if !this.Cpu[i].Equal(that1.Cpu[i]) {
			return false
		}
	}
	if len(this.Memory) != len(that1.Memory) {
		return false
	}
	for i := range this.Memory {
		if !this.Memory[i].Equal(that1.Memory[i]) {
			return false
		}
	}
	if len(this.Disk) != len(that1.Disk) {
		return false
	}
	for i := range this.Disk {
		if !this.Disk[i].Equal(that1.Disk[i]) {
			return false
		}
	}
	return true
}
func (this *AlertState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlertState)
	if !ok {
		that2, ok := that.(AlertState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Resource != that1.Resource {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	return true
}
func (this *State) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*State)
	if !ok {
		that2, ok := that.(State)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Severity != that1.Severity {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !this.TimeCreated.Equal(that1.TimeCreated) {
		return false
	}
	return true
}
func (this *Deployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Deployment)
	if !ok {
		that2, ok := that.(Deployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cpu) != len(that1.Cpu) {
		return false
	}
	for i := range this.Cpu {
		if !this.Cpu[i].Equal(that1.Cpu[i]) {
			return false
		}
	}
	if len(this.Memory) != len(that1.Memory) {
		return false
	}
	for i := range this.Memory {
		if !this.Memory[i].Equal(that1.Memory[i]) {
			return false
		}
	}
	if len(this.Disk) != len(that1.Disk) {
		return false
	}
	for i := range this.Disk {
		if !this.Disk[i].Equal(that1.Disk[i]) {
			return false
		}
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Vcpu != that1.Vcpu {
		return false
	}
	if this.MemoryTotal != that1.MemoryTotal {
		return false
	}
	if this.DiskTotal != that1.DiskTotal {
		return false
	}
	return true
}
func (this *Links) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Links)
	if !ok {
		that2, ok := that.(Links)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Self != that1.Self {
		return false
	}
	if this.Prev != that1.Prev {
		return false
	}
	if this.Next != that1.Next {
		return false
	}
	if this.First != that1.First {
		return false
	}
	if this.Last != that1.Last {
		return false
	}
	return true
}
func (this *MetricsAttribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsAttribute)
	if !ok {
		that2, ok := that.(MetricsAttribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&provider.ListRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&provider.ListResponse{")
	if this.Providers != nil {
		s = append(s, "Providers: "+fmt.Sprintf("%#v", this.Providers)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&provider.GetRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "ProviderId: "+fmt.Sprintf("%#v", this.ProviderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeploymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&provider.GetDeploymentRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "ProviderId: "+fmt.Sprintf("%#v", this.ProviderId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeploymentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&provider.GetDeploymentResponse{")
	if this.Deployments != nil {
		s = append(s, "Deployments: "+fmt.Sprintf("%#v", this.Deployments)+",\n")
	}
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&provider.GetResponse{")
	s = append(s, "ProviderHost: "+fmt.Sprintf("%#v", this.ProviderHost)+",\n")
	s = append(s, "ProviderId: "+fmt.Sprintf("%#v", this.ProviderId)+",\n")
	s = append(s, "ProviderName: "+fmt.Sprintf("%#v", this.ProviderName)+",\n")
	s = append(s, "ProviderType: "+fmt.Sprintf("%#v", this.ProviderType)+",\n")
	if this.Updated != nil {
		s = append(s, "Updated: "+fmt.Sprintf("%#v", this.Updated)+",\n")
	}
	s = append(s, "ProductName: "+fmt.Sprintf("%#v", this.ProductName)+",\n")
	if this.Cpu != nil {
		s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	}
	if this.Memory != nil {
		s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	}
	if this.BytesIn != nil {
		s = append(s, "BytesIn: "+fmt.Sprintf("%#v", this.BytesIn)+",\n")
	}
	if this.BytesOut != nil {
		s = append(s, "BytesOut: "+fmt.Sprintf("%#v", this.BytesOut)+",\n")
	}
	if this.Tenants != nil {
		s = append(s, "Tenants: "+fmt.Sprintf("%#v", this.Tenants)+",\n")
	}
	s = append(s, "SoftwareVersion: "+fmt.Sprintf("%#v", this.SoftwareVersion)+",\n")
	s = append(s, "BaseOsVersion: "+fmt.Sprintf("%#v", this.BaseOsVersion)+",\n")
	s = append(s, "VcpuTotal: "+fmt.Sprintf("%#v", this.VcpuTotal)+",\n")
	s = append(s, "VcpuDeployed: "+fmt.Sprintf("%#v", this.VcpuDeployed)+",\n")
	s = append(s, "SystemMemoryTotal: "+fmt.Sprintf("%#v", this.SystemMemoryTotal)+",\n")
	s = append(s, "SystemMemoryAvailable: "+fmt.Sprintf("%#v", this.SystemMemoryAvailable)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	s = append(s, "DiskAvailable: "+fmt.Sprintf("%#v", this.DiskAvailable)+",\n")
	if this.DiskUsage != nil {
		s = append(s, "DiskUsage: "+fmt.Sprintf("%#v", this.DiskUsage)+",\n")
	}
	if this.Alerts != nil {
		s = append(s, "Alerts: "+fmt.Sprintf("%#v", this.Alerts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Provider) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&provider.Provider{")
	s = append(s, "ProviderHost: "+fmt.Sprintf("%#v", this.ProviderHost)+",\n")
	s = append(s, "ProviderId: "+fmt.Sprintf("%#v", this.ProviderId)+",\n")
	s = append(s, "ProviderName: "+fmt.Sprintf("%#v", this.ProviderName)+",\n")
	s = append(s, "ProviderType: "+fmt.Sprintf("%#v", this.ProviderType)+",\n")
	if this.Updated != nil {
		s = append(s, "Updated: "+fmt.Sprintf("%#v", this.Updated)+",\n")
	}
	s = append(s, "ProductName: "+fmt.Sprintf("%#v", this.ProductName)+",\n")
	if this.Cpu != nil {
		s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	}
	if this.Memory != nil {
		s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	}
	if this.BytesIn != nil {
		s = append(s, "BytesIn: "+fmt.Sprintf("%#v", this.BytesIn)+",\n")
	}
	if this.BytesOut != nil {
		s = append(s, "BytesOut: "+fmt.Sprintf("%#v", this.BytesOut)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tenants) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&provider.Tenants{")
	if this.Cpu != nil {
		s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	}
	if this.Memory != nil {
		s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	}
	if this.Disk != nil {
		s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlertState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&provider.AlertState{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *State) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&provider.State{")
	s = append(s, "Severity: "+fmt.Sprintf("%#v", this.Severity)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.TimeCreated != nil {
		s = append(s, "TimeCreated: "+fmt.Sprintf("%#v", this.TimeCreated)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Deployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&provider.Deployment{")
	if this.Cpu != nil {
		s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	}
	if this.Memory != nil {
		s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	}
	if this.Disk != nil {
		s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Vcpu: "+fmt.Sprintf("%#v", this.Vcpu)+",\n")
	s = append(s, "MemoryTotal: "+fmt.Sprintf("%#v", this.MemoryTotal)+",\n")
	s = append(s, "DiskTotal: "+fmt.Sprintf("%#v", this.DiskTotal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Links) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&provider.Links{")
	s = append(s, "Self: "+fmt.Sprintf("%#v", this.Self)+",\n")
	s = append(s, "Prev: "+fmt.Sprintf("%#v", this.Prev)+",\n")
	s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "Last: "+fmt.Sprintf("%#v", this.Last)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricsAttribute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&provider.MetricsAttribute{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// List
	//
	// x-displayName: "List Central Manager Cloud Providers"
	// List the Central Manager Cloud Providers
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get
	//
	// x-displayName: "Get Central Manager Cloud Provider"
	// Get Central Manager Cloud Provider
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// GetDeployment
	//
	// x-displayName: "Get Central Manager Cloud Provider Deploymet"
	// Get Central Manager Cloud Provider Deployment
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.provider.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.provider.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.provider.CustomAPI/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// List
	//
	// x-displayName: "List Central Manager Cloud Providers"
	// List the Central Manager Cloud Providers
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get
	//
	// x-displayName: "Get Central Manager Cloud Provider"
	// Get Central Manager Cloud Provider
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// GetDeployment
	//
	// x-displayName: "Get Central Manager Cloud Provider Deploymet"
	// Get Central Manager Cloud Provider Deployment
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) GetDeployment(ctx context.Context, req *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.provider.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.provider.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.provider.CustomAPI/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.central_manager.provider.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _CustomAPI_GetDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/central_manager/provider/public_customapi.proto",
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeploymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeploymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deployments) > 0 {
		for iNdEx := len(m.Deployments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deployments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for iNdEx := len(m.Alerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.DiskUsage) > 0 {
		for iNdEx := len(m.DiskUsage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiskUsage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.DiskAvailable != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.DiskAvailable))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.DiskSize != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SystemMemoryAvailable != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.SystemMemoryAvailable))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.SystemMemoryTotal != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.SystemMemoryTotal))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.VcpuDeployed != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.VcpuDeployed))
		i--
		dAtA[i] = 0x78
	}
	if m.VcpuTotal != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.VcpuTotal))
		i--
		dAtA[i] = 0x70
	}
	if len(m.BaseOsVersion) > 0 {
		i -= len(m.BaseOsVersion)
		copy(dAtA[i:], m.BaseOsVersion)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.BaseOsVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SoftwareVersion) > 0 {
		i -= len(m.SoftwareVersion)
		copy(dAtA[i:], m.SoftwareVersion)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.SoftwareVersion)))
		i--
		dAtA[i] = 0x62
	}
	if m.Tenants != nil {
		{
			size, err := m.Tenants.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.BytesOut) > 0 {
		for iNdEx := len(m.BytesOut) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BytesOut[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.BytesIn) > 0 {
		for iNdEx := len(m.BytesIn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BytesIn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Memory) > 0 {
		for iNdEx := len(m.Memory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Cpu) > 0 {
		for iNdEx := len(m.Cpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Updated != nil {
		{
			size, err := m.Updated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProviderType) > 0 {
		i -= len(m.ProviderType)
		copy(dAtA[i:], m.ProviderType)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderHost) > 0 {
		i -= len(m.ProviderHost)
		copy(dAtA[i:], m.ProviderHost)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BytesOut) > 0 {
		for iNdEx := len(m.BytesOut) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BytesOut[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.BytesIn) > 0 {
		for iNdEx := len(m.BytesIn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BytesIn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Memory) > 0 {
		for iNdEx := len(m.Memory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Cpu) > 0 {
		for iNdEx := len(m.Cpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Updated != nil {
		{
			size, err := m.Updated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProviderType) > 0 {
		i -= len(m.ProviderType)
		copy(dAtA[i:], m.ProviderType)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderHost) > 0 {
		i -= len(m.ProviderHost)
		copy(dAtA[i:], m.ProviderHost)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ProviderHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tenants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tenants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Disk) > 0 {
		for iNdEx := len(m.Disk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Disk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Memory) > 0 {
		for iNdEx := len(m.Memory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Cpu) > 0 {
		for iNdEx := len(m.Cpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AlertState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeCreated != nil {
		{
			size, err := m.TimeCreated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiskTotal != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.DiskTotal))
		i--
		dAtA[i] = 0x50
	}
	if m.MemoryTotal != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.MemoryTotal))
		i--
		dAtA[i] = 0x48
	}
	if m.Vcpu != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Vcpu))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Disk) > 0 {
		for iNdEx := len(m.Disk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Disk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Memory) > 0 {
		for iNdEx := len(m.Memory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Cpu) > 0 {
		for iNdEx := len(m.Cpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Links) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Links) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Links) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Last) > 0 {
		i -= len(m.Last)
		copy(dAtA[i:], m.Last)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Last)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.First) > 0 {
		i -= len(m.First)
		copy(dAtA[i:], m.First)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.First)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Next) > 0 {
		i -= len(m.Next)
		copy(dAtA[i:], m.Next)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Next)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prev) > 0 {
		i -= len(m.Prev)
		copy(dAtA[i:], m.Prev)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Prev)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Self) > 0 {
		i -= len(m.Self)
		copy(dAtA[i:], m.Self)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Self)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetricsAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.Timestamp != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Count))
	}
	if m.Total != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Total))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetDeploymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Page))
	}
	return n
}

func (m *GetDeploymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Count))
	}
	if m.Total != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Total))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderHost)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderType)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Updated != nil {
		l = m.Updated.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Cpu) > 0 {
		for _, e := range m.Cpu {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Memory) > 0 {
		for _, e := range m.Memory {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.BytesIn) > 0 {
		for _, e := range m.BytesIn {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.BytesOut) > 0 {
		for _, e := range m.BytesOut {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.Tenants != nil {
		l = m.Tenants.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.SoftwareVersion)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.BaseOsVersion)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.VcpuTotal != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.VcpuTotal))
	}
	if m.VcpuDeployed != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.VcpuDeployed))
	}
	if m.SystemMemoryTotal != 0 {
		n += 2 + sovPublicCustomapi(uint64(m.SystemMemoryTotal))
	}
	if m.SystemMemoryAvailable != 0 {
		n += 2 + sovPublicCustomapi(uint64(m.SystemMemoryAvailable))
	}
	if m.DiskSize != 0 {
		n += 2 + sovPublicCustomapi(uint64(m.DiskSize))
	}
	if m.DiskAvailable != 0 {
		n += 2 + sovPublicCustomapi(uint64(m.DiskAvailable))
	}
	if len(m.DiskUsage) > 0 {
		for _, e := range m.DiskUsage {
			l = e.Size()
			n += 2 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 2 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderHost)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProviderType)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Updated != nil {
		l = m.Updated.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Cpu) > 0 {
		for _, e := range m.Cpu {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Memory) > 0 {
		for _, e := range m.Memory {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.BytesIn) > 0 {
		for _, e := range m.BytesIn {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.BytesOut) > 0 {
		for _, e := range m.BytesOut {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *Tenants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cpu) > 0 {
		for _, e := range m.Cpu {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Memory) > 0 {
		for _, e := range m.Memory {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Disk) > 0 {
		for _, e := range m.Disk {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *AlertState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TimeCreated != nil {
		l = m.TimeCreated.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *Deployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cpu) > 0 {
		for _, e := range m.Cpu {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Memory) > 0 {
		for _, e := range m.Memory {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Disk) > 0 {
		for _, e := range m.Disk {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Vcpu != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Vcpu))
	}
	if m.MemoryTotal != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.MemoryTotal))
	}
	if m.DiskTotal != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.DiskTotal))
	}
	return n
}

func (m *Links) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Self)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Prev)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *MetricsAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Timestamp))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProviders := "[]*Provider{"
	for _, f := range this.Providers {
		repeatedStringForProviders += strings.Replace(f.String(), "Provider", "Provider", 1) + ","
	}
	repeatedStringForProviders += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Providers:` + repeatedStringForProviders + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`ProviderId:` + fmt.Sprintf("%v", this.ProviderId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeploymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeploymentRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`ProviderId:` + fmt.Sprintf("%v", this.ProviderId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeploymentResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDeployments := "[]*Deployment{"
	for _, f := range this.Deployments {
		repeatedStringForDeployments += strings.Replace(f.String(), "Deployment", "Deployment", 1) + ","
	}
	repeatedStringForDeployments += "}"
	s := strings.Join([]string{`&GetDeploymentResponse{`,
		`Deployments:` + repeatedStringForDeployments + `,`,
		`Link:` + strings.Replace(this.Link.String(), "Links", "Links", 1) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCpu := "[]*MetricsAttribute{"
	for _, f := range this.Cpu {
		repeatedStringForCpu += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForCpu += "}"
	repeatedStringForMemory := "[]*MetricsAttribute{"
	for _, f := range this.Memory {
		repeatedStringForMemory += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForMemory += "}"
	repeatedStringForBytesIn := "[]*MetricsAttribute{"
	for _, f := range this.BytesIn {
		repeatedStringForBytesIn += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForBytesIn += "}"
	repeatedStringForBytesOut := "[]*MetricsAttribute{"
	for _, f := range this.BytesOut {
		repeatedStringForBytesOut += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForBytesOut += "}"
	repeatedStringForDiskUsage := "[]*MetricsAttribute{"
	for _, f := range this.DiskUsage {
		repeatedStringForDiskUsage += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForDiskUsage += "}"
	repeatedStringForAlerts := "[]*AlertState{"
	for _, f := range this.Alerts {
		repeatedStringForAlerts += strings.Replace(f.String(), "AlertState", "AlertState", 1) + ","
	}
	repeatedStringForAlerts += "}"
	s := strings.Join([]string{`&GetResponse{`,
		`ProviderHost:` + fmt.Sprintf("%v", this.ProviderHost) + `,`,
		`ProviderId:` + fmt.Sprintf("%v", this.ProviderId) + `,`,
		`ProviderName:` + fmt.Sprintf("%v", this.ProviderName) + `,`,
		`ProviderType:` + fmt.Sprintf("%v", this.ProviderType) + `,`,
		`Updated:` + strings.Replace(fmt.Sprintf("%v", this.Updated), "Timestamp", "types.Timestamp", 1) + `,`,
		`ProductName:` + fmt.Sprintf("%v", this.ProductName) + `,`,
		`Cpu:` + repeatedStringForCpu + `,`,
		`Memory:` + repeatedStringForMemory + `,`,
		`BytesIn:` + repeatedStringForBytesIn + `,`,
		`BytesOut:` + repeatedStringForBytesOut + `,`,
		`Tenants:` + strings.Replace(this.Tenants.String(), "Tenants", "Tenants", 1) + `,`,
		`SoftwareVersion:` + fmt.Sprintf("%v", this.SoftwareVersion) + `,`,
		`BaseOsVersion:` + fmt.Sprintf("%v", this.BaseOsVersion) + `,`,
		`VcpuTotal:` + fmt.Sprintf("%v", this.VcpuTotal) + `,`,
		`VcpuDeployed:` + fmt.Sprintf("%v", this.VcpuDeployed) + `,`,
		`SystemMemoryTotal:` + fmt.Sprintf("%v", this.SystemMemoryTotal) + `,`,
		`SystemMemoryAvailable:` + fmt.Sprintf("%v", this.SystemMemoryAvailable) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`DiskAvailable:` + fmt.Sprintf("%v", this.DiskAvailable) + `,`,
		`DiskUsage:` + repeatedStringForDiskUsage + `,`,
		`Alerts:` + repeatedStringForAlerts + `,`,
		`}`,
	}, "")
	return s
}
func (this *Provider) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCpu := "[]*MetricsAttribute{"
	for _, f := range this.Cpu {
		repeatedStringForCpu += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForCpu += "}"
	repeatedStringForMemory := "[]*MetricsAttribute{"
	for _, f := range this.Memory {
		repeatedStringForMemory += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForMemory += "}"
	repeatedStringForBytesIn := "[]*MetricsAttribute{"
	for _, f := range this.BytesIn {
		repeatedStringForBytesIn += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForBytesIn += "}"
	repeatedStringForBytesOut := "[]*MetricsAttribute{"
	for _, f := range this.BytesOut {
		repeatedStringForBytesOut += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForBytesOut += "}"
	s := strings.Join([]string{`&Provider{`,
		`ProviderHost:` + fmt.Sprintf("%v", this.ProviderHost) + `,`,
		`ProviderId:` + fmt.Sprintf("%v", this.ProviderId) + `,`,
		`ProviderName:` + fmt.Sprintf("%v", this.ProviderName) + `,`,
		`ProviderType:` + fmt.Sprintf("%v", this.ProviderType) + `,`,
		`Updated:` + strings.Replace(fmt.Sprintf("%v", this.Updated), "Timestamp", "types.Timestamp", 1) + `,`,
		`ProductName:` + fmt.Sprintf("%v", this.ProductName) + `,`,
		`Cpu:` + repeatedStringForCpu + `,`,
		`Memory:` + repeatedStringForMemory + `,`,
		`BytesIn:` + repeatedStringForBytesIn + `,`,
		`BytesOut:` + repeatedStringForBytesOut + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tenants) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCpu := "[]*MetricsAttribute{"
	for _, f := range this.Cpu {
		repeatedStringForCpu += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForCpu += "}"
	repeatedStringForMemory := "[]*MetricsAttribute{"
	for _, f := range this.Memory {
		repeatedStringForMemory += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForMemory += "}"
	repeatedStringForDisk := "[]*MetricsAttribute{"
	for _, f := range this.Disk {
		repeatedStringForDisk += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForDisk += "}"
	s := strings.Join([]string{`&Tenants{`,
		`Cpu:` + repeatedStringForCpu + `,`,
		`Memory:` + repeatedStringForMemory + `,`,
		`Disk:` + repeatedStringForDisk + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlertState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlertState{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Resource:` + fmt.Sprintf("%v", this.Resource) + `,`,
		`State:` + strings.Replace(this.State.String(), "State", "State", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *State) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&State{`,
		`Severity:` + fmt.Sprintf("%v", this.Severity) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`TimeCreated:` + strings.Replace(fmt.Sprintf("%v", this.TimeCreated), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Deployment) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCpu := "[]*MetricsAttribute{"
	for _, f := range this.Cpu {
		repeatedStringForCpu += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForCpu += "}"
	repeatedStringForMemory := "[]*MetricsAttribute{"
	for _, f := range this.Memory {
		repeatedStringForMemory += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForMemory += "}"
	repeatedStringForDisk := "[]*MetricsAttribute{"
	for _, f := range this.Disk {
		repeatedStringForDisk += strings.Replace(f.String(), "MetricsAttribute", "MetricsAttribute", 1) + ","
	}
	repeatedStringForDisk += "}"
	s := strings.Join([]string{`&Deployment{`,
		`Cpu:` + repeatedStringForCpu + `,`,
		`Memory:` + repeatedStringForMemory + `,`,
		`Disk:` + repeatedStringForDisk + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Vcpu:` + fmt.Sprintf("%v", this.Vcpu) + `,`,
		`MemoryTotal:` + fmt.Sprintf("%v", this.MemoryTotal) + `,`,
		`DiskTotal:` + fmt.Sprintf("%v", this.DiskTotal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Links) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Links{`,
		`Self:` + fmt.Sprintf("%v", this.Self) + `,`,
		`Prev:` + fmt.Sprintf("%v", this.Prev) + `,`,
		`Next:` + fmt.Sprintf("%v", this.Next) + `,`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Last:` + fmt.Sprintf("%v", this.Last) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricsAttribute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricsAttribute{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &Links{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = &types.Timestamp{}
			}
			if err := m.Updated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = append(m.Cpu, &MetricsAttribute{})
			if err := m.Cpu[len(m.Cpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory, &MetricsAttribute{})
			if err := m.Memory[len(m.Memory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesIn = append(m.BytesIn, &MetricsAttribute{})
			if err := m.BytesIn[len(m.BytesIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesOut = append(m.BytesOut, &MetricsAttribute{})
			if err := m.BytesOut[len(m.BytesOut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tenants == nil {
				m.Tenants = &Tenants{}
			}
			if err := m.Tenants.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseOsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcpuTotal", wireType)
			}
			m.VcpuTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VcpuTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcpuDeployed", wireType)
			}
			m.VcpuDeployed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VcpuDeployed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMemoryTotal", wireType)
			}
			m.SystemMemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemMemoryTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMemoryAvailable", wireType)
			}
			m.SystemMemoryAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemMemoryAvailable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskAvailable", wireType)
			}
			m.DiskAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskAvailable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskUsage = append(m.DiskUsage, &MetricsAttribute{})
			if err := m.DiskUsage[len(m.DiskUsage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, &AlertState{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = &types.Timestamp{}
			}
			if err := m.Updated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = append(m.Cpu, &MetricsAttribute{})
			if err := m.Cpu[len(m.Cpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory, &MetricsAttribute{})
			if err := m.Memory[len(m.Memory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesIn = append(m.BytesIn, &MetricsAttribute{})
			if err := m.BytesIn[len(m.BytesIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesOut = append(m.BytesOut, &MetricsAttribute{})
			if err := m.BytesOut[len(m.BytesOut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tenants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = append(m.Cpu, &MetricsAttribute{})
			if err := m.Cpu[len(m.Cpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory, &MetricsAttribute{})
			if err := m.Memory[len(m.Memory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disk = append(m.Disk, &MetricsAttribute{})
			if err := m.Disk[len(m.Disk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeCreated == nil {
				m.TimeCreated = &types.Timestamp{}
			}
			if err := m.TimeCreated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = append(m.Cpu, &MetricsAttribute{})
			if err := m.Cpu[len(m.Cpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory, &MetricsAttribute{})
			if err := m.Memory[len(m.Memory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disk = append(m.Disk, &MetricsAttribute{})
			if err := m.Disk[len(m.Disk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcpu", wireType)
			}
			m.Vcpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vcpu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskTotal", wireType)
			}
			m.DiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Links) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Links: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Links: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Self = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

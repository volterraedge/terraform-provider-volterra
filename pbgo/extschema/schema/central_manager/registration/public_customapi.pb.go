// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/central_manager/registration/public_customapi.proto

// Central Manager Registration
//
// x-displayName: "Central Manager Registration"
// Central Manager Registration APIs enable the Lifecycle Management
// of different BIG-IP Next Central Managers owned by a Tenant

package registration

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Central Manager State
//
// x-displayName: "Central Manager State"
// Defines states for a Central Manager System
type State int32

const (
	// x-displayName: "Init"
	// Init
	INIT State = 0
	// x-displayName: "Pending"
	// Pending
	PENDING State = 1
	// x-displayName: "Registered"
	// Registered
	REGISTERED State = 2
)

var State_name = map[int32]string{
	0: "INIT",
	1: "PENDING",
	2: "REGISTERED",
}

var State_value = map[string]int32{
	"INIT":       0,
	"PENDING":    1,
	"REGISTERED": 2,
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{0}
}

// Update Central Manager's Status
//
// x-displayName: "Update Status"
// Update status of Central Manager
type UpdateStatusReq struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// State of Central Manager
	//
	// x-displayName: "Central Manager State"
	// x-required
	// State to set Central Manager to
	Status State `protobuf:"varint,2,opt,name=status,proto3,enum=ves.io.schema.central_manager.registration.State" json:"status,omitempty"`
}

func (m *UpdateStatusReq) Reset()      { *m = UpdateStatusReq{} }
func (*UpdateStatusReq) ProtoMessage() {}
func (*UpdateStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{0}
}
func (m *UpdateStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusReq.Merge(m, src)
}
func (m *UpdateStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusReq proto.InternalMessageInfo

func (m *UpdateStatusReq) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *UpdateStatusReq) GetStatus() State {
	if m != nil {
		return m.Status
	}
	return INIT
}

// List Request
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC
type ListRequest struct {
	// Filter Criteria
	//
	// x-displayName: "Filter Criteria"
	// x-example: "Pending"
	// Get List filtered with provided state. Possible values are No Filter, Registered and Pending
	//
	// Types that are valid to be assigned to Status:
	//	*ListRequest_AllStatus
	//	*ListRequest_RegStatus
	Status isListRequest_Status `protobuf_oneof:"status"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{1}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

type isListRequest_Status interface {
	isListRequest_Status()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListRequest_AllStatus struct {
	AllStatus *types.Empty `protobuf:"bytes,2,opt,name=all_status,json=allStatus,proto3,oneof" json:"all_status,omitempty"`
}
type ListRequest_RegStatus struct {
	RegStatus State `protobuf:"varint,3,opt,name=reg_status,json=regStatus,proto3,enum=ves.io.schema.central_manager.registration.State,oneof" json:"reg_status,omitempty"`
}

func (*ListRequest_AllStatus) isListRequest_Status() {}
func (*ListRequest_RegStatus) isListRequest_Status() {}

func (m *ListRequest) GetStatus() isListRequest_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListRequest) GetAllStatus() *types.Empty {
	if x, ok := m.GetStatus().(*ListRequest_AllStatus); ok {
		return x.AllStatus
	}
	return nil
}

func (m *ListRequest) GetRegStatus() State {
	if x, ok := m.GetStatus().(*ListRequest_RegStatus); ok {
		return x.RegStatus
	}
	return INIT
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListRequest_AllStatus)(nil),
		(*ListRequest_RegStatus)(nil),
	}
}

// List Response
//
// x-displayName: "List Response"
// This is the output message of the 'List' RPC
type ListResponse struct {
	// Central Manager List
	//
	// x-displayName: "Central Manager List"
	// List represents response items
	CmList []*GetResponse `protobuf:"bytes,1,rep,name=cm_list,json=cmList,proto3" json:"cm_list,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{2}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetCmList() []*GetResponse {
	if m != nil {
		return m.CmList
	}
	return nil
}

// Get Request
//
// x-displayName: "Get Request"
// This is the input message of the 'Get' RPC
type GetRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{3}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

// Get Response
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// Tenant ID
	//
	// x-displayName: "Tenant ID"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,2,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
	// Central Manager Registration Token
	//
	// x-displayName: "Registration Token"
	// x-example: "b5767af0-d0d7-476c-8c52-6bf3b1e898ad"
	// Central Manager Registration Token
	RegToken string `protobuf:"bytes,3,opt,name=reg_token,json=regToken,proto3" json:"reg_token,omitempty"`
	// Central Manager Cluster Name
	//
	// x-displayName: "Cluster"
	// x-example: "f5cm01"
	// Name of Cluster to which Central Manager belongs
	ClusterName string `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Central Manager Host Name
	//
	// x-displayName: "Host Name"
	// x-example: "f5cm01.par.corp.infra"
	// Central Manager Host Name
	HostName string `protobuf:"bytes,5,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Central Manager Hardware
	//
	// x-displayName: "Hardware"
	// x-example: "rSeries-4800"
	// Central Manager Hardware
	Hardware string `protobuf:"bytes,6,opt,name=hardware,proto3" json:"hardware,omitempty"`
	// Central Manager State
	//
	// x-displayName: "Central Manager State"
	// Defines states of a Central Manager System
	Status State `protobuf:"varint,7,opt,name=status,proto3,enum=ves.io.schema.central_manager.registration.State" json:"status,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{4}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *GetResponse) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func (m *GetResponse) GetRegToken() string {
	if m != nil {
		return m.RegToken
	}
	return ""
}

func (m *GetResponse) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *GetResponse) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetResponse) GetHardware() string {
	if m != nil {
		return m.Hardware
	}
	return ""
}

func (m *GetResponse) GetStatus() State {
	if m != nil {
		return m.Status
	}
	return INIT
}

// Delete Request
//
// x-displayName: "Delete Request"
// This is the input message of the 'Delete' RPC
type DeleteRequest struct {
	// Central Manager ID
	//
	// x-displayName: "Central Manager ID"
	// x-required
	// x-example: "cm01-eastern-us"
	// ID of Central Manager
	CmId string `protobuf:"bytes,1,opt,name=cm_id,json=cmId,proto3" json:"cm_id,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e65d8aa831bb17, []int{5}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetCmId() string {
	if m != nil {
		return m.CmId
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.central_manager.registration.State", State_name, State_value)
	golang_proto.RegisterEnum("ves.io.schema.central_manager.registration.State", State_name, State_value)
	proto.RegisterType((*UpdateStatusReq)(nil), "ves.io.schema.central_manager.registration.UpdateStatusReq")
	golang_proto.RegisterType((*UpdateStatusReq)(nil), "ves.io.schema.central_manager.registration.UpdateStatusReq")
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.registration.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.central_manager.registration.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.registration.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.central_manager.registration.ListResponse")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.central_manager.registration.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.central_manager.registration.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.registration.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.central_manager.registration.GetResponse")
	proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.central_manager.registration.DeleteRequest")
	golang_proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.central_manager.registration.DeleteRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/central_manager/registration/public_customapi.proto", fileDescriptor_53e65d8aa831bb17)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/central_manager/registration/public_customapi.proto", fileDescriptor_53e65d8aa831bb17)
}

var fileDescriptor_53e65d8aa831bb17 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0xcd, 0x38, 0x69, 0x9a, 0x4c, 0x4a, 0x89, 0x06, 0x84, 0xa2, 0x74, 0x65, 0x75, 0x2d, 0x10,
	0x55, 0x85, 0x6d, 0x36, 0x08, 0x96, 0x1f, 0xa7, 0x2d, 0x8d, 0x4a, 0x10, 0xaa, 0x2a, 0x6f, 0xb9,
	0x70, 0xc9, 0x4e, 0xec, 0xaf, 0xae, 0xb5, 0xb6, 0xc7, 0x9d, 0x19, 0xa7, 0x8b, 0x10, 0x12, 0x2a,
	0x07, 0xae, 0x48, 0xdc, 0xf8, 0x0b, 0xf8, 0x13, 0x10, 0xbd, 0xf4, 0x80, 0xd8, 0x3d, 0xa1, 0x20,
	0x2e, 0x7b, 0x83, 0xba, 0x7b, 0x80, 0xdb, 0x9e, 0x39, 0x21, 0xff, 0xc8, 0x6e, 0x1a, 0xed, 0xae,
	0xea, 0xf6, 0xe6, 0x99, 0x37, 0xdf, 0x9b, 0x79, 0x6f, 0xbe, 0x37, 0x09, 0xbe, 0x35, 0x06, 0x61,
	0x78, 0xcc, 0x14, 0xf6, 0x3e, 0x04, 0xd4, 0xb4, 0x21, 0x94, 0x9c, 0xfa, 0xc3, 0x80, 0x86, 0xd4,
	0x05, 0x6e, 0x72, 0x70, 0x3d, 0x21, 0x39, 0x95, 0x1e, 0x0b, 0xcd, 0x28, 0x1e, 0xf9, 0x9e, 0x3d,
	0xb4, 0x63, 0x21, 0x59, 0x40, 0x23, 0xcf, 0x88, 0x38, 0x93, 0x8c, 0xac, 0xe7, 0x14, 0x46, 0x4e,
	0x61, 0xcc, 0x51, 0x18, 0xb3, 0x14, 0x5d, 0xdd, 0xf5, 0xe4, 0x7e, 0x3c, 0x32, 0x6c, 0x16, 0x98,
	0x2e, 0x73, 0x99, 0x99, 0x51, 0x8c, 0xe2, 0xbd, 0x6c, 0x94, 0x0d, 0xb2, 0xaf, 0x9c, 0xba, 0x7b,
	0xcd, 0x65, 0xcc, 0xf5, 0xc1, 0xa4, 0x91, 0x67, 0xd2, 0x30, 0x64, 0x32, 0x63, 0x11, 0x05, 0xba,
	0x52, 0xa0, 0x4f, 0x38, 0x20, 0x88, 0xe4, 0x97, 0x53, 0xf0, 0xbc, 0x30, 0x16, 0xcd, 0x56, 0x5e,
	0x3b, 0x0f, 0x8e, 0xa9, 0xef, 0x39, 0x54, 0x42, 0x81, 0x6a, 0x73, 0x28, 0x08, 0x08, 0xc7, 0x73,
	0x0c, 0xab, 0x73, 0x6b, 0x3c, 0x38, 0x1c, 0x9e, 0x5b, 0xa1, 0x1d, 0xe0, 0x97, 0x3f, 0x8f, 0x52,
	0xd6, 0xdb, 0x92, 0xca, 0x58, 0x58, 0x70, 0x40, 0x5e, 0xc1, 0x0b, 0x76, 0x30, 0xf4, 0x9c, 0x0e,
	0x5a, 0x45, 0x6b, 0x4d, 0xab, 0x66, 0x07, 0x03, 0x87, 0x0c, 0x70, 0x5d, 0x64, 0x2b, 0x3a, 0xca,
	0x2a, 0x5a, 0x5b, 0xee, 0xdd, 0x30, 0x2e, 0xee, 0xa7, 0x91, 0x72, 0x83, 0x55, 0x10, 0x68, 0xbf,
	0x22, 0xdc, 0xfa, 0xcc, 0x13, 0xd2, 0x82, 0x83, 0x18, 0x84, 0x24, 0x37, 0x31, 0xa6, 0xbe, 0x3f,
	0x9c, 0xa1, 0x6f, 0xf5, 0x5e, 0x33, 0x72, 0xd7, 0x8c, 0xa9, 0x6b, 0x46, 0x3f, 0x75, 0xed, 0x93,
	0x8a, 0xd5, 0xa4, 0xbe, 0x9f, 0x9f, 0x95, 0x8c, 0x30, 0xe6, 0xe0, 0x4e, 0x0b, 0xab, 0x97, 0x3c,
	0xd7, 0xc6, 0xf2, 0x2f, 0xff, 0x9e, 0x54, 0x9b, 0x47, 0xa8, 0xde, 0x46, 0x5d, 0x05, 0x29, 0xe9,
	0x1e, 0x1c, 0xdc, 0x7c, 0x8f, 0x0d, 0x32, 0xd5, 0x4d, 0x1a, 0x27, 0xc7, 0x48, 0x99, 0x1c, 0x23,
	0xf4, 0x69, 0xad, 0x81, 0xda, 0x8a, 0x76, 0x07, 0x2f, 0xe5, 0x2a, 0x44, 0xc4, 0x42, 0x01, 0x64,
	0x07, 0x2f, 0xda, 0xc1, 0xd0, 0xf7, 0x84, 0xec, 0xa0, 0xd5, 0xea, 0x5a, 0xab, 0x77, 0xb3, 0xcc,
	0x51, 0xb6, 0xe0, 0x09, 0x93, 0x55, 0xb7, 0x83, 0x94, 0x59, 0xbb, 0x8e, 0x71, 0x36, 0x9d, 0xdb,
	0xf4, 0xac, 0x6b, 0xd1, 0xbe, 0x55, 0x70, 0x6b, 0xa6, 0x94, 0xac, 0xe0, 0xa6, 0x84, 0x90, 0x86,
	0xf2, 0xe9, 0xc2, 0x46, 0x3e, 0x31, 0x70, 0x9e, 0x32, 0x28, 0x33, 0x17, 0xbb, 0x82, 0x53, 0xb5,
	0x43, 0xc9, 0xee, 0x42, 0x98, 0x79, 0xd8, 0xb4, 0x1a, 0x1c, 0xdc, 0xdd, 0x74, 0x4c, 0xae, 0xe3,
	0x25, 0xdb, 0x8f, 0x85, 0x04, 0x3e, 0x0c, 0x69, 0x00, 0x9d, 0x5a, 0x86, 0xb7, 0x8a, 0xb9, 0x6d,
	0x1a, 0x64, 0x3b, 0xee, 0x33, 0x21, 0x73, 0x7c, 0x21, 0xaf, 0x4f, 0x27, 0x32, 0xb0, 0x8b, 0x1b,
	0xfb, 0x94, 0x3b, 0x87, 0x94, 0x43, 0xa7, 0x5e, 0x60, 0xc5, 0x78, 0xa6, 0xa3, 0x16, 0xaf, 0xda,
	0x51, 0xaf, 0xe3, 0x97, 0x36, 0xc1, 0x07, 0x09, 0x2f, 0xf2, 0x6a, 0xdd, 0xc0, 0x0b, 0x59, 0x19,
	0x69, 0xe0, 0xda, 0x60, 0x7b, 0xb0, 0xdb, 0xae, 0x90, 0x16, 0x5e, 0xdc, 0xe9, 0x6f, 0x6f, 0x0e,
	0xb6, 0xb7, 0xda, 0x88, 0x2c, 0x63, 0x6c, 0xf5, 0xb7, 0x06, 0xb7, 0x77, 0xfb, 0x56, 0x7f, 0xb3,
	0xad, 0xf4, 0xbe, 0x5b, 0xc4, 0xcd, 0x8f, 0xb3, 0x57, 0xe4, 0xd6, 0xce, 0x80, 0xfc, 0x81, 0xf0,
	0xd2, 0x6c, 0x52, 0xc8, 0x47, 0x65, 0xce, 0x3b, 0x97, 0xb1, 0xee, 0x73, 0xfa, 0x5b, 0xf3, 0x93,
	0xfb, 0x9d, 0xb7, 0xf7, 0xde, 0xbd, 0x67, 0xeb, 0xb6, 0x0f, 0x94, 0xa7, 0x81, 0xd5, 0x63, 0x01,
	0xfc, 0xad, 0x34, 0xc9, 0xba, 0xc7, 0x74, 0x2f, 0xdc, 0xe3, 0x54, 0x48, 0x1e, 0xdb, 0x32, 0xe6,
	0xa0, 0x1f, 0x72, 0x4f, 0xc2, 0xd1, 0x9f, 0x8f, 0x7e, 0x50, 0x7a, 0x5d, 0xbd, 0x78, 0xfa, 0x5e,
	0xf8, 0x3c, 0x0a, 0xf3, 0xab, 0xcc, 0x99, 0xaf, 0x3f, 0x44, 0xeb, 0xe4, 0x2f, 0x84, 0x6b, 0x69,
	0xa7, 0x91, 0x52, 0xad, 0x3a, 0x93, 0xdd, 0xee, 0xfb, 0xe5, 0x0b, 0xf3, 0x4e, 0xd5, 0x9c, 0x07,
	0x3f, 0x2b, 0x28, 0xb9, 0xdf, 0x31, 0x4b, 0xa8, 0xe5, 0x40, 0x9d, 0x4c, 0xec, 0x9b, 0xe4, 0x8d,
	0x0b, 0x89, 0x25, 0x8f, 0x10, 0xae, 0x6e, 0x81, 0x24, 0xef, 0x95, 0xce, 0x62, 0xae, 0xef, 0xb2,
	0x19, 0xd6, 0xfc, 0xab, 0xc8, 0x33, 0x49, 0xb9, 0xbb, 0x24, 0xbf, 0x21, 0x5c, 0xcf, 0x13, 0x40,
	0x3e, 0x28, 0x73, 0xe2, 0x73, 0xa9, 0x79, 0x6e, 0x53, 0x7a, 0x97, 0x6e, 0x4a, 0x73, 0xbd, 0x9c,
	0x90, 0xee, 0xab, 0x27, 0xc7, 0xa8, 0xfa, 0xdf, 0x31, 0x5a, 0x70, 0x20, 0x60, 0x37, 0x8e, 0x7e,
	0xef, 0x54, 0x27, 0x0a, 0xda, 0xf8, 0x11, 0x4d, 0x4e, 0xd5, 0xca, 0xc3, 0x53, 0xb5, 0xf2, 0xf8,
	0x54, 0x45, 0xdf, 0x24, 0x2a, 0xfa, 0x29, 0x51, 0xd1, 0x83, 0x44, 0x45, 0x93, 0x44, 0x45, 0x7f,
	0x27, 0x2a, 0xfa, 0x27, 0x51, 0x2b, 0x8f, 0x13, 0x15, 0x7d, 0x7f, 0xa6, 0x56, 0x4e, 0xce, 0x54,
	0x34, 0x39, 0x53, 0x2b, 0x0f, 0xcf, 0xd4, 0xca, 0x17, 0x77, 0x5c, 0x16, 0xdd, 0x75, 0x8d, 0x31,
	0xf3, 0x25, 0x70, 0x4e, 0x8d, 0x58, 0x98, 0xd9, 0xc7, 0x1e, 0xe3, 0x81, 0x1e, 0x71, 0x36, 0xf6,
	0x1c, 0xe0, 0xfa, 0x14, 0x36, 0xa3, 0x91, 0xcb, 0x4c, 0xb8, 0x27, 0x8b, 0x1f, 0xcc, 0x0b, 0xfc,
	0xdf, 0x18, 0xd5, 0x33, 0xb7, 0xde, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xe8, 0x75, 0x32,
	0xa4, 0x08, 0x00, 0x00,
}

func (x State) String() string {
	s, ok := State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UpdateStatusReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStatusReq)
	if !ok {
		that2, ok := that.(UpdateStatusReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Status == nil {
		if this.Status != nil {
			return false
		}
	} else if this.Status == nil {
		return false
	} else if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *ListRequest_AllStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest_AllStatus)
	if !ok {
		that2, ok := that.(ListRequest_AllStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllStatus.Equal(that1.AllStatus) {
		return false
	}
	return true
}
func (this *ListRequest_RegStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest_RegStatus)
	if !ok {
		that2, ok := that.(ListRequest_RegStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegStatus != that1.RegStatus {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CmList) != len(that1.CmList) {
		return false
	}
	for i := range this.CmList {
		if !this.CmList[i].Equal(that1.CmList[i]) {
			return false
		}
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	if this.RegToken != that1.RegToken {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if this.Hardware != that1.Hardware {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmId != that1.CmId {
		return false
	}
	return true
}
func (this *UpdateStatusReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.UpdateStatusReq{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&registration.ListRequest{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest_AllStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&registration.ListRequest_AllStatus{` +
		`AllStatus:` + fmt.Sprintf("%#v", this.AllStatus) + `}`}, ", ")
	return s
}
func (this *ListRequest_RegStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&registration.ListRequest_RegStatus{` +
		`RegStatus:` + fmt.Sprintf("%#v", this.RegStatus) + `}`}, ", ")
	return s
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&registration.ListResponse{")
	if this.CmList != nil {
		s = append(s, "CmList: "+fmt.Sprintf("%#v", this.CmList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&registration.GetRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&registration.GetResponse{")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "RegToken: "+fmt.Sprintf("%#v", this.RegToken)+",\n")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	s = append(s, "Hardware: "+fmt.Sprintf("%#v", this.Hardware)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&registration.DeleteRequest{")
	s = append(s, "CmId: "+fmt.Sprintf("%#v", this.CmId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Update Central Manager's Status
	//
	// x-displayName: "Update Central Manager's Status"
	// Updates Central Manager's Status
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*types.Empty, error)
	// List
	//
	// x-displayName: "List Central Managers"
	// List the Central Managers
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get
	//
	// x-displayName: "Get Central Manager"
	// Get info about a Central Manager Object
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Delete
	//
	// x-displayName: "Delete Central Manager"
	// Delete a Central Manager Object
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.registration.CustomAPI/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.registration.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.registration.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.central_manager.registration.CustomAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Update Central Manager's Status
	//
	// x-displayName: "Update Central Manager's Status"
	// Updates Central Manager's Status
	UpdateStatus(context.Context, *UpdateStatusReq) (*types.Empty, error)
	// List
	//
	// x-displayName: "List Central Managers"
	// List the Central Managers
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get
	//
	// x-displayName: "Get Central Manager"
	// Get info about a Central Manager Object
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Delete
	//
	// x-displayName: "Delete Central Manager"
	// Delete a Central Manager Object
	Delete(context.Context, *DeleteRequest) (*types.Empty, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) UpdateStatus(ctx context.Context, req *UpdateStatusReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) Delete(ctx context.Context, req *DeleteRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.registration.CustomAPI/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.registration.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.registration.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.central_manager.registration.CustomAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.central_manager.registration.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _CustomAPI_UpdateStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/central_manager/registration/public_customapi.proto",
}

func (m *UpdateStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest_AllStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest_AllStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllStatus != nil {
		{
			size, err := m.AllStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ListRequest_RegStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest_RegStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.RegStatus))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CmList) > 0 {
		for iNdEx := len(m.CmList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CmList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Hardware) > 0 {
		i -= len(m.Hardware)
		copy(dAtA[i:], m.Hardware)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Hardware)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RegToken) > 0 {
		i -= len(m.RegToken)
		copy(dAtA[i:], m.RegToken)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.RegToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CmId) > 0 {
		i -= len(m.CmId)
		copy(dAtA[i:], m.CmId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Status))
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *ListRequest_AllStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllStatus != nil {
		l = m.AllStatus.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ListRequest_RegStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPublicCustomapi(uint64(m.RegStatus))
	return n
}
func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CmList) > 0 {
		for _, e := range m.CmList {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.RegToken)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Hardware)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Status))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateStatusReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStatusReq{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest_AllStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest_AllStatus{`,
		`AllStatus:` + strings.Replace(fmt.Sprintf("%v", this.AllStatus), "Empty", "types.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest_RegStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest_RegStatus{`,
		`RegStatus:` + fmt.Sprintf("%v", this.RegStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCmList := "[]*GetResponse{"
	for _, f := range this.CmList {
		repeatedStringForCmList += strings.Replace(f.String(), "GetResponse", "GetResponse", 1) + ","
	}
	repeatedStringForCmList += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`CmList:` + repeatedStringForCmList + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetResponse{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`RegToken:` + fmt.Sprintf("%v", this.RegToken) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`Hardware:` + fmt.Sprintf("%v", this.Hardware) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`CmId:` + fmt.Sprintf("%v", this.CmId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ListRequest_AllStatus{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegStatus", wireType)
			}
			var v State
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &ListRequest_RegStatus{v}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmList = append(m.CmList, &GetResponse{})
			if err := m.CmList[len(m.CmList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

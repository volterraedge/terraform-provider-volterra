// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/gia/public_customapi.proto

// Global IP Allocator
//
// x-displayName: "Global IP Allocator"

package gia

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AllocateIP Request
//
// x-displayName: "AllocateIP Request"
// This is the input message of the 'AllocateIP' RPC
type AllocateIPRequest struct {
}

func (m *AllocateIPRequest) Reset()      { *m = AllocateIPRequest{} }
func (*AllocateIPRequest) ProtoMessage() {}
func (*AllocateIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1329530397cf8606, []int{0}
}
func (m *AllocateIPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateIPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPRequest.Merge(m, src)
}
func (m *AllocateIPRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPRequest proto.InternalMessageInfo

// AllocateIP Response
//
// x-displayName: "AllocateIP Response"
// This is the output message of the 'AllocateIP' RPC
type AllocateIPResponse struct {
	// ip address
	//
	// x-displayName: "IP Address allocated"
	// x-example: "192.168.0.1"
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// error_message
	//
	// x-displayName: "Error message"
	// x-example: "GIA Internal Error"
	// Error message from global ip allocator
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *AllocateIPResponse) Reset()      { *m = AllocateIPResponse{} }
func (*AllocateIPResponse) ProtoMessage() {}
func (*AllocateIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1329530397cf8606, []int{1}
}
func (m *AllocateIPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateIPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateIPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateIPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPResponse.Merge(m, src)
}
func (m *AllocateIPResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllocateIPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPResponse proto.InternalMessageInfo

func (m *AllocateIPResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AllocateIPResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// DeAllocateIPRequest is used to deallocate an ip
//
// x-displayName: "DeAllocateIP Request"
// This is the input message of the 'DeAllocateIP' RPC.
type DeallocateIPRequest struct {
	// ip address
	//
	// x-displayName: "IP Address"
	// x-example: "192.168.0.1"
	// IP which needs to de-allocated
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *DeallocateIPRequest) Reset()      { *m = DeallocateIPRequest{} }
func (*DeallocateIPRequest) ProtoMessage() {}
func (*DeallocateIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1329530397cf8606, []int{2}
}
func (m *DeallocateIPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeallocateIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeallocateIPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeallocateIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeallocateIPRequest.Merge(m, src)
}
func (m *DeallocateIPRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeallocateIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeallocateIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeallocateIPRequest proto.InternalMessageInfo

func (m *DeallocateIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// DeallocateIP Response
//
// x-displayName: "DeAllocateIP Response"
// This is the output message of the 'DeAllocateIP' RPC.
type DeallocateIPResponse struct {
	// message
	//
	// x-displayName: "Message"
	// x-example: "IP de-allocated successfully"
	// Message from global ip allocator
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DeallocateIPResponse) Reset()      { *m = DeallocateIPResponse{} }
func (*DeallocateIPResponse) ProtoMessage() {}
func (*DeallocateIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1329530397cf8606, []int{3}
}
func (m *DeallocateIPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeallocateIPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeallocateIPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeallocateIPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeallocateIPResponse.Merge(m, src)
}
func (m *DeallocateIPResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeallocateIPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeallocateIPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeallocateIPResponse proto.InternalMessageInfo

func (m *DeallocateIPResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*AllocateIPRequest)(nil), "ves.io.schema.gia.AllocateIPRequest")
	golang_proto.RegisterType((*AllocateIPRequest)(nil), "ves.io.schema.gia.AllocateIPRequest")
	proto.RegisterType((*AllocateIPResponse)(nil), "ves.io.schema.gia.AllocateIPResponse")
	golang_proto.RegisterType((*AllocateIPResponse)(nil), "ves.io.schema.gia.AllocateIPResponse")
	proto.RegisterType((*DeallocateIPRequest)(nil), "ves.io.schema.gia.DeallocateIPRequest")
	golang_proto.RegisterType((*DeallocateIPRequest)(nil), "ves.io.schema.gia.DeallocateIPRequest")
	proto.RegisterType((*DeallocateIPResponse)(nil), "ves.io.schema.gia.DeallocateIPResponse")
	golang_proto.RegisterType((*DeallocateIPResponse)(nil), "ves.io.schema.gia.DeallocateIPResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/gia/public_customapi.proto", fileDescriptor_1329530397cf8606)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/gia/public_customapi.proto", fileDescriptor_1329530397cf8606)
}

var fileDescriptor_1329530397cf8606 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x2e, 0x02, 0xe5, 0x28, 0x48, 0x75, 0x11, 0x32, 0x69, 0x39, 0x55, 0xe6, 0x57,
	0x15, 0x61, 0xbb, 0x02, 0xb1, 0xb0, 0xb5, 0x20, 0xa1, 0x0c, 0x88, 0xd2, 0x91, 0xa5, 0xba, 0x38,
	0x2f, 0xd7, 0x13, 0xb6, 0xef, 0xb8, 0x3b, 0x9b, 0xb2, 0x41, 0xff, 0x02, 0x24, 0xfe, 0x09, 0xc4,
	0xc8, 0x08, 0x4b, 0x36, 0x98, 0x50, 0x24, 0x96, 0x8e, 0xc4, 0x61, 0x80, 0xad, 0x23, 0x62, 0x42,
	0xd8, 0x0e, 0x49, 0xda, 0x4a, 0x95, 0xd8, 0xee, 0xbd, 0xef, 0xbb, 0xef, 0xfb, 0x3c, 0xdf, 0x33,
	0x5e, 0xcd, 0x41, 0x07, 0x5c, 0x84, 0x3a, 0xda, 0x81, 0x84, 0x86, 0x8c, 0xd3, 0x50, 0x66, 0x9d,
	0x98, 0x47, 0xdb, 0x51, 0xa6, 0x8d, 0x48, 0xa8, 0xe4, 0x81, 0x54, 0xc2, 0x08, 0x67, 0xa1, 0xaa,
	0x0c, 0xaa, 0xca, 0x80, 0x71, 0xda, 0xf4, 0x19, 0x37, 0x3b, 0x59, 0x27, 0x88, 0x44, 0x12, 0x32,
	0xc1, 0x44, 0x58, 0x56, 0x76, 0xb2, 0x5e, 0x19, 0x95, 0x41, 0x79, 0xaa, 0x1c, 0x9a, 0xcb, 0x4c,
	0x08, 0x16, 0x43, 0x48, 0x25, 0x0f, 0x69, 0x9a, 0x0a, 0x43, 0x0d, 0x17, 0xa9, 0xae, 0xd5, 0xa5,
	0x5a, 0xfd, 0xe7, 0x01, 0x89, 0x34, 0x2f, 0xc6, 0xe2, 0x2c, 0xa6, 0x90, 0xd3, 0x37, 0x97, 0x67,
	0xc5, 0x9c, 0xc6, 0xbc, 0x4b, 0x0d, 0xd4, 0xaa, 0x77, 0x48, 0x05, 0x0d, 0x69, 0x3e, 0xeb, 0xe0,
	0x2d, 0xe2, 0x85, 0xf5, 0x38, 0x16, 0x11, 0x35, 0xd0, 0xde, 0xdc, 0x82, 0x67, 0x19, 0x68, 0xe3,
	0xb5, 0xb1, 0x33, 0x9d, 0xd4, 0x52, 0xa4, 0x1a, 0x9c, 0xf3, 0xd8, 0xe6, 0xd2, 0x45, 0x2b, 0x68,
	0xb5, 0xb1, 0x65, 0x73, 0xe9, 0x5c, 0xc1, 0xe7, 0x40, 0x29, 0xa1, 0xb6, 0x13, 0xd0, 0x9a, 0x32,
	0x70, 0xed, 0x52, 0x9a, 0x2f, 0x93, 0x0f, 0xab, 0x9c, 0xb7, 0x86, 0x17, 0xef, 0x03, 0x3d, 0xdc,
	0xc1, 0xb9, 0x34, 0xf1, 0xda, 0x68, 0x7c, 0xf8, 0xd9, 0x9f, 0x3b, 0xa5, 0x6c, 0x89, 0xfe, 0xda,
	0x7a, 0x6b, 0xf8, 0xc2, 0xec, 0x8d, 0xba, 0xbd, 0x8b, 0xcf, 0x8c, 0x1b, 0x55, 0x0c, 0xe3, 0xf0,
	0xd6, 0x6f, 0x1b, 0x37, 0xee, 0x95, 0x6f, 0xb6, 0xbe, 0xd9, 0x76, 0xde, 0x21, 0x8c, 0x27, 0xf4,
	0xce, 0xd5, 0xe0, 0xc8, 0xeb, 0x05, 0x47, 0x26, 0x6e, 0x5e, 0x3b, 0xa1, 0xaa, 0x62, 0xf0, 0x1e,
	0x15, 0x9f, 0xdc, 0x56, 0xef, 0xce, 0x6e, 0xe4, 0x33, 0x4e, 0xfd, 0x4c, 0x83, 0xba, 0xb9, 0x92,
	0x83, 0xf6, 0xb9, 0xf0, 0x79, 0xda, 0x53, 0x54, 0x1b, 0x95, 0x45, 0x26, 0x53, 0xe0, 0x3f, 0x57,
	0xdc, 0xc0, 0xde, 0xd7, 0xef, 0x6f, 0xec, 0x25, 0xef, 0x62, 0xbd, 0x58, 0xe5, 0x8e, 0x8d, 0x27,
	0xe3, 0xf2, 0x2e, 0x6a, 0x39, 0xef, 0x11, 0x9e, 0x9f, 0x9e, 0xd6, 0xb9, 0x7e, 0x0c, 0xc8, 0x31,
	0x1f, 0xb0, 0x79, 0xe3, 0xc4, 0xba, 0x1a, 0xf9, 0xf1, 0x7f, 0x20, 0x5f, 0x6e, 0xb9, 0xd3, 0xc8,
	0x5d, 0x98, 0x81, 0x6e, 0x9e, 0xed, 0x7f, 0x44, 0x73, 0x7b, 0x5f, 0xdc, 0xb9, 0x5f, 0x36, 0xda,
	0x78, 0x85, 0x06, 0x43, 0x62, 0xed, 0x0f, 0x89, 0x75, 0x30, 0x24, 0xe8, 0x65, 0x41, 0xd0, 0xdb,
	0x82, 0xa0, 0xcf, 0x05, 0x41, 0x83, 0x82, 0xa0, 0x6f, 0x05, 0x41, 0x3f, 0x0a, 0x62, 0x1d, 0x14,
	0x04, 0xbd, 0x1e, 0x11, 0xab, 0x3f, 0x22, 0x68, 0x30, 0x22, 0xd6, 0xfe, 0x88, 0x58, 0x4f, 0x1e,
	0x30, 0x21, 0x9f, 0xb2, 0x20, 0x17, 0xb1, 0x01, 0xa5, 0x68, 0x90, 0xe9, 0xb0, 0x3c, 0xf4, 0x84,
	0x4a, 0x7c, 0xa9, 0x44, 0xce, 0xbb, 0xa0, 0xfc, 0xb1, 0x1c, 0xca, 0x0e, 0x13, 0x21, 0xec, 0x9a,
	0x7a, 0x9d, 0x27, 0xff, 0x6d, 0xe7, 0x74, 0xb9, 0xcb, 0xb7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x50, 0x06, 0xe8, 0x20, 0xd3, 0x03, 0x00, 0x00,
}

func (this *AllocateIPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllocateIPRequest)
	if !ok {
		that2, ok := that.(AllocateIPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AllocateIPResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllocateIPResponse)
	if !ok {
		that2, ok := that.(AllocateIPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *DeallocateIPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeallocateIPRequest)
	if !ok {
		that2, ok := that.(DeallocateIPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *DeallocateIPResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeallocateIPResponse)
	if !ok {
		that2, ok := that.(DeallocateIPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *AllocateIPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gia.AllocateIPRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllocateIPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gia.AllocateIPResponse{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeallocateIPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gia.DeallocateIPRequest{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeallocateIPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gia.DeallocateIPResponse{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Allocate IP through Global IP Allocator
	//
	// x-displayName: "Allocate IP through Global IP Allocator"
	// AllocateIP will allocate an ip address for the tenant read from context
	AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPResponse, error)
	// Deallocate IP through Global IP Allocator
	//
	// x-displayName: "Deallocate IP through Global IP Allocator"
	// DeallocateIP will de-allocate the specified ip address for tenant
	DeallocateIP(ctx context.Context, in *DeallocateIPRequest, opts ...grpc.CallOption) (*DeallocateIPResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPResponse, error) {
	out := new(AllocateIPResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.gia.CustomAPI/AllocateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DeallocateIP(ctx context.Context, in *DeallocateIPRequest, opts ...grpc.CallOption) (*DeallocateIPResponse, error) {
	out := new(DeallocateIPResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.gia.CustomAPI/DeallocateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Allocate IP through Global IP Allocator
	//
	// x-displayName: "Allocate IP through Global IP Allocator"
	// AllocateIP will allocate an ip address for the tenant read from context
	AllocateIP(context.Context, *AllocateIPRequest) (*AllocateIPResponse, error)
	// Deallocate IP through Global IP Allocator
	//
	// x-displayName: "Deallocate IP through Global IP Allocator"
	// DeallocateIP will de-allocate the specified ip address for tenant
	DeallocateIP(context.Context, *DeallocateIPRequest) (*DeallocateIPResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) AllocateIP(ctx context.Context, req *AllocateIPRequest) (*AllocateIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIP not implemented")
}
func (*UnimplementedCustomAPIServer) DeallocateIP(ctx context.Context, req *DeallocateIPRequest) (*DeallocateIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeallocateIP not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_AllocateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).AllocateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.gia.CustomAPI/AllocateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).AllocateIP(ctx, req.(*AllocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DeallocateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeallocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeallocateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.gia.CustomAPI/DeallocateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeallocateIP(ctx, req.(*DeallocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.gia.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateIP",
			Handler:    _CustomAPI_AllocateIP_Handler,
		},
		{
			MethodName: "DeallocateIP",
			Handler:    _CustomAPI_DeallocateIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/gia/public_customapi.proto",
}

func (m *AllocateIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateIPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateIPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllocateIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateIPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateIPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeallocateIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeallocateIPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeallocateIPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeallocateIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeallocateIPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeallocateIPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocateIPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllocateIPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *DeallocateIPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *DeallocateIPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AllocateIPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateIPRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AllocateIPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateIPResponse{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeallocateIPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeallocateIPRequest{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeallocateIPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeallocateIPResponse{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AllocateIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeallocateIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeallocateIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeallocateIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeallocateIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeallocateIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeallocateIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

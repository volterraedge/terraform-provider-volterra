// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package gia

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AllocateIPRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AllocateIPRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AllocateIPRequest) DeepCopy() *AllocateIPRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AllocateIPRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AllocateIPRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AllocateIPRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AllocateIPRequestValidator().Validate(ctx, m, opts...)
}

type ValidateAllocateIPRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAllocateIPRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AllocateIPRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AllocateIPRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["use_v6_range"]; exists {

		vOpts := append(opts, db.WithValidateField("use_v6_range"))
		if err := fv(ctx, m.GetUseV6Range(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAllocateIPRequestValidator = func() *ValidateAllocateIPRequest {
	v := &ValidateAllocateIPRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AllocateIPRequestValidator() db.Validator {
	return DefaultAllocateIPRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *AllocateIPResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AllocateIPResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AllocateIPResponse) DeepCopy() *AllocateIPResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AllocateIPResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AllocateIPResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AllocateIPResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AllocateIPResponseValidator().Validate(ctx, m, opts...)
}

type ValidateAllocateIPResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAllocateIPResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AllocateIPResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AllocateIPResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["error_message"]; exists {

		vOpts := append(opts, db.WithValidateField("error_message"))
		if err := fv(ctx, m.GetErrorMessage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip"]; exists {

		vOpts := append(opts, db.WithValidateField("ip"))
		if err := fv(ctx, m.GetIp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAllocateIPResponseValidator = func() *ValidateAllocateIPResponse {
	v := &ValidateAllocateIPResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AllocateIPResponseValidator() db.Validator {
	return DefaultAllocateIPResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *DeallocateIPRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeallocateIPRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeallocateIPRequest) DeepCopy() *DeallocateIPRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeallocateIPRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeallocateIPRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeallocateIPRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeallocateIPRequestValidator().Validate(ctx, m, opts...)
}

type ValidateDeallocateIPRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeallocateIPRequest) IpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip")
	}

	return validatorFn, nil
}

func (v *ValidateDeallocateIPRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeallocateIPRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeallocateIPRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip"]; exists {

		vOpts := append(opts, db.WithValidateField("ip"))
		if err := fv(ctx, m.GetIp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeallocateIPRequestValidator = func() *ValidateDeallocateIPRequest {
	v := &ValidateDeallocateIPRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIp := v.IpValidationRuleHandler
	rulesIp := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhIp(rulesIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DeallocateIPRequest.ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip"] = vFn

	return v
}()

func DeallocateIPRequestValidator() db.Validator {
	return DefaultDeallocateIPRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *DeallocateIPResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeallocateIPResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeallocateIPResponse) DeepCopy() *DeallocateIPResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeallocateIPResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeallocateIPResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeallocateIPResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeallocateIPResponseValidator().Validate(ctx, m, opts...)
}

type ValidateDeallocateIPResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeallocateIPResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeallocateIPResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeallocateIPResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["message"]; exists {

		vOpts := append(opts, db.WithValidateField("message"))
		if err := fv(ctx, m.GetMessage(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeallocateIPResponseValidator = func() *ValidateDeallocateIPResponse {
	v := &ValidateDeallocateIPResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DeallocateIPResponseValidator() db.Validator {
	return DefaultDeallocateIPResponseValidator
}

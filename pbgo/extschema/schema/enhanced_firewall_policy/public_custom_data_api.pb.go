// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/enhanced_firewall_policy/public_custom_data_api.proto

// Enhanced Firewall Policy
//
// x-displayName: "Enhanced Firewall Policy"
// Monitoring APIs for Enhanced Firewall Policy

package enhanced_firewall_policy

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enhanced Firewall Policy Metric Labels
//
// x-displayName: "Enhanced Firewall Policy Metric Labels"
// Enhanced Firewall Policy hits can be sliced and diced based on one or more labels listed below.
type EnhancedFirewallPolicyMetricLabel int32

const (
	// x-displayName: "Namespace"
	NAMESPACE EnhancedFirewallPolicyMetricLabel = 0
	// x-displayName: "Policy"
	POLICY EnhancedFirewallPolicyMetricLabel = 1
	// x-displayName: "Policy Rule"
	POLICY_RULE EnhancedFirewallPolicyMetricLabel = 2
	// x-displayName: "Action"
	ACTION EnhancedFirewallPolicyMetricLabel = 3
	// x-displayName: "Site"
	SITE EnhancedFirewallPolicyMetricLabel = 4
)

var EnhancedFirewallPolicyMetricLabel_name = map[int32]string{
	0: "NAMESPACE",
	1: "POLICY",
	2: "POLICY_RULE",
	3: "ACTION",
	4: "SITE",
}

var EnhancedFirewallPolicyMetricLabel_value = map[string]int32{
	"NAMESPACE":   0,
	"POLICY":      1,
	"POLICY_RULE": 2,
	"ACTION":      3,
	"SITE":        4,
}

func (EnhancedFirewallPolicyMetricLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_78002c3fd5897c0d, []int{0}
}

// Enhanced Firewall Policy Hits Request
//
// x-displayName: "Enhanced Firewall Policy Hits Request"
// Request to get the Enhanced Firewall Policy hits counter.
type EnhancedFirewallPolicyHitsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace is used to scope Enhanced Firewall Policy hits for the given namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Label Filter"
	// List of label filter expressions of the form "label" Op "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	//
	// Optional: If not specified, then the metrics will be filtered only based on the namespace in the request.
	LabelFilter []*EnhancedFirewallPolicyMetricLabelFilter `protobuf:"bytes,2,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by one of more labels specified in group_by.
	//
	// Optional: If not specified, then the rule hits are aggregated/grouped by POLICY.
	GroupBy []EnhancedFirewallPolicyMetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabel" json:"group_by,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570007981"
	// start time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570007981"
	// end time of metric collection from which data will be considered.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,6,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *EnhancedFirewallPolicyHitsRequest) Reset()      { *m = EnhancedFirewallPolicyHitsRequest{} }
func (*EnhancedFirewallPolicyHitsRequest) ProtoMessage() {}
func (*EnhancedFirewallPolicyHitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78002c3fd5897c0d, []int{0}
}
func (m *EnhancedFirewallPolicyHitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyHitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnhancedFirewallPolicyHitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnhancedFirewallPolicyHitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyHitsRequest.Merge(m, src)
}
func (m *EnhancedFirewallPolicyHitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyHitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyHitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyHitsRequest proto.InternalMessageInfo

func (m *EnhancedFirewallPolicyHitsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsRequest) GetLabelFilter() []*EnhancedFirewallPolicyMetricLabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *EnhancedFirewallPolicyHitsRequest) GetGroupBy() []EnhancedFirewallPolicyMetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *EnhancedFirewallPolicyHitsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Enhanced Firewall Policy Metric Label Filter
//
// x-displayName: "Enhanced Firewall Policy Metric Label Filter"
// Label filter can be specified to filter metrics based on label match
type EnhancedFirewallPolicyMetricLabelFilter struct {
	// Label
	//
	// x-displayName: "Label"
	// Label associated with Enhanced Firewall Policy hits
	Label EnhancedFirewallPolicyMetricLabel `protobuf:"varint,1,opt,name=label,proto3,enum=ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabel" json:"label,omitempty"`
	// Operator
	//
	// x-displayName: "Operator"
	// Operator to evaluate the label
	Op schema.MetricLabelOp `protobuf:"varint,2,opt,name=op,proto3,enum=ves.io.schema.MetricLabelOp" json:"op,omitempty"`
	// Value
	//
	// x-displayName: "Value"
	// x-example: "policy1"
	// Value to be compared with
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) Reset() {
	*m = EnhancedFirewallPolicyMetricLabelFilter{}
}
func (*EnhancedFirewallPolicyMetricLabelFilter) ProtoMessage() {}
func (*EnhancedFirewallPolicyMetricLabelFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_78002c3fd5897c0d, []int{1}
}
func (m *EnhancedFirewallPolicyMetricLabelFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyMetricLabelFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnhancedFirewallPolicyMetricLabelFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnhancedFirewallPolicyMetricLabelFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyMetricLabelFilter.Merge(m, src)
}
func (m *EnhancedFirewallPolicyMetricLabelFilter) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyMetricLabelFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyMetricLabelFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyMetricLabelFilter proto.InternalMessageInfo

func (m *EnhancedFirewallPolicyMetricLabelFilter) GetLabel() EnhancedFirewallPolicyMetricLabel {
	if m != nil {
		return m.Label
	}
	return NAMESPACE
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) GetOp() schema.MetricLabelOp {
	if m != nil {
		return m.Op
	}
	return schema.EQ
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Enhanced Firewall Policy Hits ID
//
// x-displayName: "Enhanced Firewall Policy Hits ID"
// EnhancedFirewallPolicyHitsId uniquely identifies an entry in the response to Enhanced Firewall Policy hits request.
// Enhanced Firewall Policy hits counter is aggregated based on the labels specified in the group_by field in the request.
// Therefore, only the fields that corresponds to the MetricLabel in the group_by field will have non-empty
// value in the response.
type EnhancedFirewallPolicyHitsId struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the policy rule was hit
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Policy
	//
	// x-displayName: "Policy"
	// x-example: "policy1"
	// Policy name
	Policy string `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// Policy Rule
	//
	// x-displayName: "Policy Rule"
	// x-example: "rule1"
	// Policy Rule name
	PolicyRule string `protobuf:"bytes,3,opt,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
	// Action
	//
	// x-displayName: "Action"
	// x-example: "allow"
	// Action associated with the policy rule
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Site
	//
	// x-displayName: "Site"
	// x-example: "ce1"
	// Site name
	Site string `protobuf:"bytes,6,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *EnhancedFirewallPolicyHitsId) Reset()      { *m = EnhancedFirewallPolicyHitsId{} }
func (*EnhancedFirewallPolicyHitsId) ProtoMessage() {}
func (*EnhancedFirewallPolicyHitsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_78002c3fd5897c0d, []int{2}
}
func (m *EnhancedFirewallPolicyHitsId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyHitsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnhancedFirewallPolicyHitsId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnhancedFirewallPolicyHitsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyHitsId.Merge(m, src)
}
func (m *EnhancedFirewallPolicyHitsId) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyHitsId) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyHitsId.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyHitsId proto.InternalMessageInfo

func (m *EnhancedFirewallPolicyHitsId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsId) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsId) GetPolicyRule() string {
	if m != nil {
		return m.PolicyRule
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsId) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EnhancedFirewallPolicyHitsId) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// Enhanced Firewall Policy Hits
//
// x-displayName: "Enhanced Firewall Policy Hits"
// EnhancedFirewallPolicyHits contains the timeseries data of Enhanced Firewall Policy hits
type EnhancedFirewallPolicyHits struct {
	// ID
	//
	// x-displayName: "ID"
	// ID identifies the unique combination of group_by label values in the response
	Id *EnhancedFirewallPolicyHitsId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metric
	//
	// x-displayName: "Metric"
	// x-unit: "count"
	// List of metric values
	Metric []*schema.MetricValue `protobuf:"bytes,2,rep,name=metric,proto3" json:"metric,omitempty"`
}

func (m *EnhancedFirewallPolicyHits) Reset()      { *m = EnhancedFirewallPolicyHits{} }
func (*EnhancedFirewallPolicyHits) ProtoMessage() {}
func (*EnhancedFirewallPolicyHits) Descriptor() ([]byte, []int) {
	return fileDescriptor_78002c3fd5897c0d, []int{3}
}
func (m *EnhancedFirewallPolicyHits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyHits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnhancedFirewallPolicyHits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnhancedFirewallPolicyHits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyHits.Merge(m, src)
}
func (m *EnhancedFirewallPolicyHits) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyHits) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyHits.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyHits proto.InternalMessageInfo

func (m *EnhancedFirewallPolicyHits) GetId() *EnhancedFirewallPolicyHitsId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EnhancedFirewallPolicyHits) GetMetric() []*schema.MetricValue {
	if m != nil {
		return m.Metric
	}
	return nil
}

// Enhanced Firewall Policy Hits Response
//
// x-displayName: "Enhanced Firewall Policy Hits Response"
// Number of Enhanced Firewall Policy rule hits for each unique combination of group_by labels in the request.
type EnhancedFirewallPolicyHitsResponse struct {
	// Enhanced Firewall Policy Hits
	//
	// x-displayName: "Enhanced Firewall Policy Hits"
	// List of Enhanced Firewall Policy hits data
	Data []*EnhancedFirewallPolicyHits `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *EnhancedFirewallPolicyHitsResponse) Reset()      { *m = EnhancedFirewallPolicyHitsResponse{} }
func (*EnhancedFirewallPolicyHitsResponse) ProtoMessage() {}
func (*EnhancedFirewallPolicyHitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78002c3fd5897c0d, []int{4}
}
func (m *EnhancedFirewallPolicyHitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyHitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnhancedFirewallPolicyHitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnhancedFirewallPolicyHitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyHitsResponse.Merge(m, src)
}
func (m *EnhancedFirewallPolicyHitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyHitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyHitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyHitsResponse proto.InternalMessageInfo

func (m *EnhancedFirewallPolicyHitsResponse) GetData() []*EnhancedFirewallPolicyHits {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EnhancedFirewallPolicyHitsResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabel", EnhancedFirewallPolicyMetricLabel_name, EnhancedFirewallPolicyMetricLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabel", EnhancedFirewallPolicyMetricLabel_name, EnhancedFirewallPolicyMetricLabel_value)
	proto.RegisterType((*EnhancedFirewallPolicyHitsRequest)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsRequest")
	golang_proto.RegisterType((*EnhancedFirewallPolicyHitsRequest)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsRequest")
	proto.RegisterType((*EnhancedFirewallPolicyMetricLabelFilter)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabelFilter")
	golang_proto.RegisterType((*EnhancedFirewallPolicyMetricLabelFilter)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabelFilter")
	proto.RegisterType((*EnhancedFirewallPolicyHitsId)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsId")
	golang_proto.RegisterType((*EnhancedFirewallPolicyHitsId)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsId")
	proto.RegisterType((*EnhancedFirewallPolicyHits)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHits")
	golang_proto.RegisterType((*EnhancedFirewallPolicyHits)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHits")
	proto.RegisterType((*EnhancedFirewallPolicyHitsResponse)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsResponse")
	golang_proto.RegisterType((*EnhancedFirewallPolicyHitsResponse)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyHitsResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/enhanced_firewall_policy/public_custom_data_api.proto", fileDescriptor_78002c3fd5897c0d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/enhanced_firewall_policy/public_custom_data_api.proto", fileDescriptor_78002c3fd5897c0d)
}

var fileDescriptor_78002c3fd5897c0d = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xec, 0x3a, 0x6e, 0x3c, 0xa6, 0x60, 0x8d, 0x10, 0x5a, 0x8c, 0xb5, 0x04, 0x4b, 0x40,
	0xa8, 0xba, 0x5e, 0x61, 0xc4, 0x05, 0xb8, 0x38, 0xae, 0x2b, 0x8c, 0xd2, 0x3a, 0xda, 0x86, 0x4a,
	0x20, 0xa4, 0xd5, 0x78, 0xf7, 0x79, 0x3d, 0x74, 0x77, 0x67, 0xd9, 0x99, 0x75, 0x1b, 0x01, 0x52,
	0xd5, 0x3b, 0x12, 0x12, 0x12, 0xe2, 0xc0, 0x01, 0x2e, 0x88, 0x2b, 0x57, 0x7a, 0xc9, 0x0d, 0x4e,
	0x55, 0x04, 0x97, 0x1e, 0x89, 0xc3, 0x01, 0x6e, 0xf9, 0x13, 0x90, 0x67, 0x37, 0x69, 0x5c, 0xea,
	0x36, 0x52, 0x73, 0x7b, 0x6f, 0xbe, 0x37, 0xdf, 0xbc, 0x5f, 0xf3, 0x1e, 0xee, 0x4d, 0x41, 0xb4,
	0x19, 0xb7, 0x85, 0x37, 0x81, 0x88, 0xda, 0x10, 0x4f, 0x68, 0xec, 0x81, 0xef, 0x8e, 0x59, 0x0a,
	0x37, 0x69, 0x18, 0xba, 0x09, 0x0f, 0x99, 0xb7, 0x63, 0x27, 0xd9, 0x28, 0x64, 0x9e, 0xeb, 0x65,
	0x42, 0xf2, 0xc8, 0xf5, 0xa9, 0xa4, 0x2e, 0x4d, 0x58, 0x3b, 0x49, 0xb9, 0xe4, 0xe4, 0xb5, 0x9c,
	0xa4, 0x9d, 0x93, 0xb4, 0x97, 0x91, 0x34, 0xac, 0x80, 0xc9, 0x49, 0x36, 0x6a, 0x7b, 0x3c, 0xb2,
	0x03, 0x1e, 0x70, 0x5b, 0x5d, 0x1f, 0x65, 0x63, 0xa5, 0x29, 0x45, 0x49, 0x39, 0x6d, 0xa3, 0x19,
	0x70, 0x1e, 0x84, 0x60, 0xd3, 0x84, 0xd9, 0x34, 0x8e, 0xb9, 0xa4, 0x92, 0xf1, 0x58, 0x14, 0xe8,
	0x4b, 0x8b, 0x9e, 0xf3, 0xe4, 0x24, 0xf8, 0xe2, 0x22, 0x28, 0x77, 0x12, 0x38, 0x82, 0x9a, 0x8b,
	0xd0, 0x94, 0x86, 0xcc, 0xa7, 0x12, 0x0a, 0xb4, 0xf5, 0x10, 0x0a, 0x02, 0xe2, 0xe9, 0x22, 0x79,
	0xeb, 0x2b, 0x1d, 0xbf, 0xd2, 0x2f, 0x62, 0xbc, 0x5c, 0x84, 0xb8, 0xa5, 0x22, 0x7c, 0x9f, 0x49,
	0xe1, 0xc0, 0x67, 0x19, 0x08, 0x49, 0x9a, 0xb8, 0x1a, 0xd3, 0x08, 0x44, 0x42, 0x3d, 0x30, 0xd0,
	0x1a, 0x5a, 0xaf, 0x3a, 0x0f, 0x0e, 0x48, 0x8a, 0x9f, 0x09, 0xe9, 0x08, 0x42, 0x77, 0xcc, 0x42,
	0x09, 0xa9, 0xa1, 0xad, 0xe9, 0xeb, 0xb5, 0xce, 0xb0, 0x7d, 0xba, 0x4c, 0xb6, 0x1f, 0xfd, 0xfc,
	0x15, 0x90, 0x29, 0xf3, 0x36, 0xe7, 0xbc, 0x97, 0x15, 0xad, 0x53, 0x0b, 0x1f, 0x28, 0xc4, 0xc7,
	0xab, 0x41, 0xca, 0xb3, 0xc4, 0x1d, 0xed, 0x18, 0xfa, 0x9a, 0xbe, 0xfe, 0x6c, 0x67, 0x70, 0x66,
	0xef, 0x39, 0xe7, 0x14, 0xf5, 0xc6, 0x0e, 0x79, 0x03, 0x63, 0x21, 0x69, 0x2a, 0x5d, 0xc9, 0x22,
	0x30, 0xca, 0xf3, 0xc0, 0x37, 0xf0, 0xaf, 0xff, 0xee, 0xea, 0x2b, 0xa9, 0xfe, 0x5d, 0x19, 0x39,
	0x55, 0x85, 0x6e, 0xb3, 0x08, 0xc8, 0xab, 0x78, 0x15, 0x62, 0x3f, 0x37, 0x5c, 0xf9, 0x9f, 0xe1,
	0x39, 0x88, 0x7d, 0x65, 0x66, 0xe2, 0xb2, 0x90, 0x90, 0x18, 0x95, 0x05, 0x93, 0x1f, 0xca, 0xc8,
	0x51, 0xe7, 0xad, 0x7b, 0x08, 0xbf, 0x7e, 0xca, 0x84, 0x10, 0x17, 0xaf, 0xa8, 0x94, 0xa8, 0x8a,
	0x9c, 0x69, 0x02, 0x72, 0x5e, 0x72, 0x11, 0x6b, 0x3c, 0x31, 0x34, 0xc5, 0xde, 0x7c, 0x88, 0xfd,
	0x84, 0xf9, 0x30, 0x71, 0x34, 0x9e, 0x90, 0xe7, 0xf1, 0xca, 0x94, 0x86, 0x19, 0x18, 0xba, 0x6a,
	0x90, 0x5c, 0x69, 0xfd, 0x88, 0x70, 0x73, 0x79, 0x83, 0x0d, 0xfc, 0x27, 0xf4, 0xd6, 0x0b, 0xb8,
	0x92, 0x7b, 0xad, 0xdc, 0xa8, 0x3a, 0x85, 0x46, 0x5e, 0xc6, 0xb5, 0x5c, 0x72, 0xd3, 0x2c, 0x3c,
	0x7a, 0x12, 0xe7, 0x47, 0x4e, 0x16, 0xaa, 0x8b, 0xd4, 0x9b, 0x77, 0x7a, 0x5e, 0x36, 0xa7, 0xd0,
	0x08, 0xc1, 0x65, 0xc1, 0x24, 0xe4, 0x05, 0x70, 0x94, 0xdc, 0xfa, 0x09, 0xe1, 0xc6, 0x72, 0x1f,
	0xc9, 0x36, 0xd6, 0x98, 0xaf, 0x5c, 0xab, 0x75, 0x2e, 0x3d, 0x5d, 0x92, 0xf3, 0x98, 0x1d, 0x8d,
	0xf9, 0xa4, 0x83, 0x2b, 0x91, 0xca, 0x61, 0xf1, 0x5f, 0x1a, 0x8f, 0x4c, 0xf0, 0xf5, 0x79, 0x12,
	0x9d, 0xc2, 0xb2, 0xf5, 0x3d, 0xc2, 0xad, 0xc7, 0xfd, 0x56, 0x91, 0xf0, 0x58, 0x00, 0xb9, 0x8e,
	0xcb, 0xf3, 0xa9, 0x66, 0x20, 0x45, 0xbc, 0xf1, 0xf4, 0x2e, 0x3b, 0x8a, 0xef, 0xb8, 0x79, 0xb5,
	0x85, 0xe6, 0x3d, 0xd4, 0x8a, 0xe6, 0xbd, 0x00, 0xcb, 0x66, 0xc9, 0x89, 0x66, 0x21, 0xe7, 0x71,
	0xf5, 0x6a, 0xf7, 0x4a, 0xff, 0xda, 0x56, 0xb7, 0xd7, 0xaf, 0x97, 0x08, 0xc6, 0x95, 0xad, 0xe1,
	0xe6, 0xa0, 0xf7, 0x51, 0x1d, 0x91, 0xe7, 0x70, 0x2d, 0x97, 0x5d, 0xe7, 0xc3, 0xcd, 0x7e, 0x5d,
	0x9b, 0x83, 0xdd, 0xde, 0xf6, 0x60, 0x78, 0xb5, 0xae, 0x93, 0x55, 0x5c, 0xbe, 0x36, 0xd8, 0xee,
	0xd7, 0xcb, 0x9d, 0xdb, 0x3a, 0x3e, 0xdf, 0x53, 0xc3, 0xfb, 0x12, 0x95, 0xb4, 0xbb, 0x35, 0x20,
	0xbf, 0x68, 0x8f, 0x2d, 0xe0, 0xe0, 0x0c, 0x32, 0x90, 0x4f, 0xc2, 0xc6, 0x07, 0x67, 0x41, 0x95,
	0x97, 0xa9, 0xf5, 0xc5, 0xec, 0x37, 0xe3, 0xcd, 0xf1, 0xdb, 0xb7, 0x3c, 0x4b, 0x80, 0x97, 0xa5,
	0x10, 0x81, 0x98, 0x58, 0x23, 0x2a, 0x98, 0x67, 0x45, 0x3c, 0x66, 0x92, 0xa7, 0x17, 0xa7, 0x20,
	0x2c, 0xc6, 0xad, 0x18, 0xe4, 0x4d, 0x9e, 0xde, 0xb0, 0x52, 0xa0, 0xfe, 0x9d, 0x3f, 0xff, 0xfe,
	0x46, 0xeb, 0xb6, 0xde, 0x2b, 0xd6, 0x98, 0x7d, 0xfc, 0x57, 0x84, 0xfd, 0xf9, 0xb1, 0xfc, 0xe5,
	0xf2, 0xed, 0x37, 0x61, 0x52, 0xbc, 0x83, 0x2e, 0x34, 0xde, 0xdd, 0xbd, 0x8b, 0xf4, 0x3f, 0xee,
	0x22, 0xeb, 0x94, 0x01, 0x0d, 0x47, 0x9f, 0x82, 0x27, 0xef, 0xdc, 0x33, 0x34, 0x03, 0x6d, 0x7c,
	0x8b, 0xf6, 0xf6, 0xcd, 0xd2, 0xfd, 0x7d, 0xb3, 0x74, 0xb8, 0x6f, 0xa2, 0xdb, 0x33, 0x13, 0xfd,
	0x3c, 0x33, 0xd1, 0xef, 0x33, 0x13, 0xed, 0xcd, 0x4c, 0xf4, 0xd7, 0xcc, 0x44, 0xff, 0xcc, 0xcc,
	0xd2, 0xe1, 0xcc, 0x44, 0x5f, 0x1f, 0x98, 0xa5, 0xdd, 0x03, 0x13, 0xed, 0x1d, 0x98, 0xa5, 0xfb,
	0x07, 0x66, 0xe9, 0xe3, 0x4f, 0x02, 0x9e, 0xdc, 0x08, 0xda, 0x53, 0x3e, 0x9f, 0x61, 0x29, 0x6d,
	0x67, 0xc2, 0x56, 0xc2, 0x98, 0xa7, 0x91, 0x95, 0xa4, 0x7c, 0xca, 0x7c, 0x48, 0xad, 0x23, 0xd8,
	0x4e, 0x46, 0x01, 0xb7, 0xe1, 0x96, 0x2c, 0x96, 0xd8, 0x13, 0x76, 0xfb, 0xa8, 0xa2, 0xd6, 0xda,
	0x5b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x65, 0xe4, 0x92, 0xca, 0x0c, 0x08, 0x00, 0x00,
}

func (x EnhancedFirewallPolicyMetricLabel) String() string {
	s, ok := EnhancedFirewallPolicyMetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EnhancedFirewallPolicyHitsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyHitsRequest)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyHitsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyMetricLabelFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyMetricLabelFilter)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyMetricLabelFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyHitsId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyHitsId)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyHitsId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Policy != that1.Policy {
		return false
	}
	if this.PolicyRule != that1.PolicyRule {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyHits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyHits)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyHits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *EnhancedFirewallPolicyHitsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyHitsResponse)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyHitsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyHitsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyHitsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnhancedFirewallPolicyMetricLabelFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyMetricLabelFilter{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnhancedFirewallPolicyHitsId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyHitsId{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	s = append(s, "PolicyRule: "+fmt.Sprintf("%#v", this.PolicyRule)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnhancedFirewallPolicyHits) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyHits{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnhancedFirewallPolicyHitsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyHitsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataAPIClient is the client API for CustomDataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataAPIClient interface {
	// Enhanced Firewall Policy Hits
	//
	// x-displayName: "Enhanced Firewall Policy Hits"
	// Get the counter for Enhanced Firewall Policy hits for a given namespace.
	EnhancedFirewallPolicyHits(ctx context.Context, in *EnhancedFirewallPolicyHitsRequest, opts ...grpc.CallOption) (*EnhancedFirewallPolicyHitsResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) EnhancedFirewallPolicyHits(ctx context.Context, in *EnhancedFirewallPolicyHitsRequest, opts ...grpc.CallOption) (*EnhancedFirewallPolicyHitsResponse, error) {
	out := new(EnhancedFirewallPolicyHitsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.enhanced_firewall_policy.CustomDataAPI/EnhancedFirewallPolicyHits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataAPIServer is the server API for CustomDataAPI service.
type CustomDataAPIServer interface {
	// Enhanced Firewall Policy Hits
	//
	// x-displayName: "Enhanced Firewall Policy Hits"
	// Get the counter for Enhanced Firewall Policy hits for a given namespace.
	EnhancedFirewallPolicyHits(context.Context, *EnhancedFirewallPolicyHitsRequest) (*EnhancedFirewallPolicyHitsResponse, error)
}

// UnimplementedCustomDataAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataAPIServer struct {
}

func (*UnimplementedCustomDataAPIServer) EnhancedFirewallPolicyHits(ctx context.Context, req *EnhancedFirewallPolicyHitsRequest) (*EnhancedFirewallPolicyHitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnhancedFirewallPolicyHits not implemented")
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_EnhancedFirewallPolicyHits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnhancedFirewallPolicyHitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).EnhancedFirewallPolicyHits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.enhanced_firewall_policy.CustomDataAPI/EnhancedFirewallPolicyHits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).EnhancedFirewallPolicyHits(ctx, req.(*EnhancedFirewallPolicyHitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.enhanced_firewall_policy.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnhancedFirewallPolicyHits",
			Handler:    _CustomDataAPI_EnhancedFirewallPolicyHits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/enhanced_firewall_policy/public_custom_data_api.proto",
}

func (m *EnhancedFirewallPolicyHitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyHitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyHitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA2 := make([]byte, len(m.GroupBy)*10)
		var j1 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Op != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x10
	}
	if m.Label != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Label))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnhancedFirewallPolicyHitsId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyHitsId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyHitsId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PolicyRule) > 0 {
		i -= len(m.PolicyRule)
		copy(dAtA[i:], m.PolicyRule)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.PolicyRule)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnhancedFirewallPolicyHits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyHits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyHits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		for iNdEx := len(m.Metric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metric[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnhancedFirewallPolicyHitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyHitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyHitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnhancedFirewallPolicyHitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *EnhancedFirewallPolicyMetricLabelFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Label != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Label))
	}
	if m.Op != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Op))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *EnhancedFirewallPolicyHitsId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.PolicyRule)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *EnhancedFirewallPolicyHits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *EnhancedFirewallPolicyHitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EnhancedFirewallPolicyHitsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*EnhancedFirewallPolicyMetricLabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(f.String(), "EnhancedFirewallPolicyMetricLabelFilter", "EnhancedFirewallPolicyMetricLabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&EnhancedFirewallPolicyHitsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyMetricLabelFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyMetricLabelFilter{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyHitsId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyHitsId{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Policy:` + fmt.Sprintf("%v", this.Policy) + `,`,
		`PolicyRule:` + fmt.Sprintf("%v", this.PolicyRule) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyHits) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetric := "[]*MetricValue{"
	for _, f := range this.Metric {
		repeatedStringForMetric += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForMetric += "}"
	s := strings.Join([]string{`&EnhancedFirewallPolicyHits{`,
		`Id:` + strings.Replace(this.Id.String(), "EnhancedFirewallPolicyHitsId", "EnhancedFirewallPolicyHitsId", 1) + `,`,
		`Metric:` + repeatedStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyHitsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*EnhancedFirewallPolicyHits{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "EnhancedFirewallPolicyHits", "EnhancedFirewallPolicyHits", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&EnhancedFirewallPolicyHitsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EnhancedFirewallPolicyHitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &EnhancedFirewallPolicyMetricLabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v EnhancedFirewallPolicyMetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= EnhancedFirewallPolicyMetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]EnhancedFirewallPolicyMetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v EnhancedFirewallPolicyMetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= EnhancedFirewallPolicyMetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedFirewallPolicyMetricLabelFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyMetricLabelFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyMetricLabelFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= EnhancedFirewallPolicyMetricLabel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= schema.MetricLabelOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedFirewallPolicyHitsId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHitsId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHitsId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedFirewallPolicyHits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &EnhancedFirewallPolicyHitsId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, &schema.MetricValue{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedFirewallPolicyHitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyHitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &EnhancedFirewallPolicyHits{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataApi = fmt.Errorf("proto: unexpected end of group")
)

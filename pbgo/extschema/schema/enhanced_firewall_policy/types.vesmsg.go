// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package enhanced_firewall_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_network_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_AllowAll:

		return nil, nil

	case *CreateSpecType_AllowedSources:

		return nil, nil

	case *CreateSpecType_AllowedDestinations:

		return nil, nil

	case *CreateSpecType_DenyAll:

		return nil, nil

	case *CreateSpecType_DeniedSources:

		return nil, nil

	case *CreateSpecType_DeniedDestinations:

		return nil, nil

	case *CreateSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AllowedSources:
		if fv, exists := v.FldValidators["rule_choice.allowed_sources"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowedSources).AllowedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AllowedDestinations:
		if fv, exists := v.FldValidators["rule_choice.allowed_destinations"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowedDestinations).AllowedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DenyAll:
		if fv, exists := v.FldValidators["rule_choice.deny_all"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_DenyAll).DenyAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DeniedSources:
		if fv, exists := v.FldValidators["rule_choice.denied_sources"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_DeniedSources).DeniedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DeniedDestinations:
		if fv, exists := v.FldValidators["rule_choice.denied_destinations"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_DeniedDestinations).DeniedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["rule_choice.allowed_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.allowed_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = EnhancedFirewallPolicyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EnhancedFirewallPolicyRuleListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EnhancedFirewallPolicyRuleListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EnhancedFirewallPolicyRuleListType) DeepCopy() *EnhancedFirewallPolicyRuleListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EnhancedFirewallPolicyRuleListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EnhancedFirewallPolicyRuleListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EnhancedFirewallPolicyRuleListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EnhancedFirewallPolicyRuleListTypeValidator().Validate(ctx, m, opts...)
}

func (m *EnhancedFirewallPolicyRuleListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *EnhancedFirewallPolicyRuleListType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateEnhancedFirewallPolicyRuleListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEnhancedFirewallPolicyRuleListType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*EnhancedFirewallPolicyRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := EnhancedFirewallPolicyRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*EnhancedFirewallPolicyRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*EnhancedFirewallPolicyRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateEnhancedFirewallPolicyRuleListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EnhancedFirewallPolicyRuleListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EnhancedFirewallPolicyRuleListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEnhancedFirewallPolicyRuleListTypeValidator = func() *ValidateEnhancedFirewallPolicyRuleListType {
	v := &ValidateEnhancedFirewallPolicyRuleListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "128",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EnhancedFirewallPolicyRuleListType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	return v
}()

func EnhancedFirewallPolicyRuleListTypeValidator() db.Validator {
	return DefaultEnhancedFirewallPolicyRuleListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EnhancedFirewallPolicyRuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EnhancedFirewallPolicyRuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EnhancedFirewallPolicyRuleType) DeepCopy() *EnhancedFirewallPolicyRuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EnhancedFirewallPolicyRuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EnhancedFirewallPolicyRuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EnhancedFirewallPolicyRuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EnhancedFirewallPolicyRuleTypeValidator().Validate(ctx, m, opts...)
}

func (m *EnhancedFirewallPolicyRuleType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetActionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetActionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDestinationChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDestinationChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSourceChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSourceChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *EnhancedFirewallPolicyRuleType) GetActionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetActionChoice() == nil {
		return nil, nil
	}
	switch m.GetActionChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_Deny:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_Allow:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_InsertService:

		drInfos, err := m.GetInsertService().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInsertService().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "insert_service." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *EnhancedFirewallPolicyRuleType) GetDestinationChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDestinationChoice() == nil {
		return nil, nil
	}
	switch m.GetDestinationChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_AllDestinations:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_DestinationPrefixList:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet:

		drInfos, err := m.GetDestinationIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDestinationIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "destination_ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	case *EnhancedFirewallPolicyRuleType_InsideDestinations:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_OutsideDestinations:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_DestinationLabelSelector:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_AllSloVips:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_AllSliVips:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *EnhancedFirewallPolicyRuleType) GetSourceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSourceChoice() == nil {
		return nil, nil
	}
	switch m.GetSourceChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_AllSources:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_SourcePrefixList:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet:

		drInfos, err := m.GetSourceIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSourceIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "source_ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	case *EnhancedFirewallPolicyRuleType_InsideSources:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_OutsideSources:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_SourceLabelSelector:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds:

		return nil, nil

	case *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateEnhancedFirewallPolicyRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEnhancedFirewallPolicyRuleType) ActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEnhancedFirewallPolicyRuleType) DestinationChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for destination_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEnhancedFirewallPolicyRuleType) SourceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for source_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEnhancedFirewallPolicyRuleType) TrafficChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for traffic_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEnhancedFirewallPolicyRuleType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateEnhancedFirewallPolicyRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EnhancedFirewallPolicyRuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EnhancedFirewallPolicyRuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action_choice"]; exists {
		val := m.GetActionChoice()
		vOpts := append(opts,
			db.WithValidateField("action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetActionChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_Deny:
		if fv, exists := v.FldValidators["action_choice.deny"]; exists {
			val := m.GetActionChoice().(*EnhancedFirewallPolicyRuleType_Deny).Deny
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_Allow:
		if fv, exists := v.FldValidators["action_choice.allow"]; exists {
			val := m.GetActionChoice().(*EnhancedFirewallPolicyRuleType_Allow).Allow
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("allow"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_InsertService:
		if fv, exists := v.FldValidators["action_choice.insert_service"]; exists {
			val := m.GetActionChoice().(*EnhancedFirewallPolicyRuleType_InsertService).InsertService
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("insert_service"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["advanced_action"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_action"))
		if err := fv(ctx, m.GetAdvancedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_choice"]; exists {
		val := m.GetDestinationChoice()
		vOpts := append(opts,
			db.WithValidateField("destination_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDestinationChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_AllDestinations:
		if fv, exists := v.FldValidators["destination_choice.all_destinations"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_AllDestinations).AllDestinations
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("all_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_DestinationPrefixList:
		if fv, exists := v.FldValidators["destination_choice.destination_prefix_list"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationPrefixList).DestinationPrefixList
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("destination_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet:
		if fv, exists := v.FldValidators["destination_choice.destination_ip_prefix_set"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet).DestinationIpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("destination_ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_InsideDestinations:
		if fv, exists := v.FldValidators["destination_choice.inside_destinations"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_InsideDestinations).InsideDestinations
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("inside_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_OutsideDestinations:
		if fv, exists := v.FldValidators["destination_choice.outside_destinations"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_OutsideDestinations).OutsideDestinations
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("outside_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_DestinationNamespace:
		if fv, exists := v.FldValidators["destination_choice.destination_namespace"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationNamespace).DestinationNamespace
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("destination_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_DestinationLabelSelector:
		if fv, exists := v.FldValidators["destination_choice.destination_label_selector"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationLabelSelector).DestinationLabelSelector
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("destination_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_AllSloVips:
		if fv, exists := v.FldValidators["destination_choice.all_slo_vips"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_AllSloVips).AllSloVips
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("all_slo_vips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_AllSliVips:
		if fv, exists := v.FldValidators["destination_choice.all_sli_vips"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_AllSliVips).AllSliVips
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("all_sli_vips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds:
		if fv, exists := v.FldValidators["destination_choice.destination_aws_vpc_ids"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds).DestinationAwsVpcIds
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("destination_aws_vpc_ids"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds:
		if fv, exists := v.FldValidators["destination_choice.destination_aws_subnet_ids"]; exists {
			val := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds).DestinationAwsSubnetIds
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("destination_aws_subnet_ids"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_choice"]; exists {
		val := m.GetSourceChoice()
		vOpts := append(opts,
			db.WithValidateField("source_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSourceChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_AllSources:
		if fv, exists := v.FldValidators["source_choice.all_sources"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_AllSources).AllSources
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("all_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_SourcePrefixList:
		if fv, exists := v.FldValidators["source_choice.source_prefix_list"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourcePrefixList).SourcePrefixList
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet:
		if fv, exists := v.FldValidators["source_choice.source_ip_prefix_set"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceIpPrefixSet).SourceIpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_InsideSources:
		if fv, exists := v.FldValidators["source_choice.inside_sources"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_InsideSources).InsideSources
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("inside_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_OutsideSources:
		if fv, exists := v.FldValidators["source_choice.outside_sources"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_OutsideSources).OutsideSources
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("outside_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_SourceNamespace:
		if fv, exists := v.FldValidators["source_choice.source_namespace"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceNamespace).SourceNamespace
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_SourceLabelSelector:
		if fv, exists := v.FldValidators["source_choice.source_label_selector"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceLabelSelector).SourceLabelSelector
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds:
		if fv, exists := v.FldValidators["source_choice.source_aws_vpc_ids"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceAwsVpcIds).SourceAwsVpcIds
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_aws_vpc_ids"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds:
		if fv, exists := v.FldValidators["source_choice.source_aws_subnet_ids"]; exists {
			val := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds).SourceAwsSubnetIds
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_aws_subnet_ids"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["traffic_choice"]; exists {
		val := m.GetTrafficChoice()
		vOpts := append(opts,
			db.WithValidateField("traffic_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrafficChoice().(type) {
	case *EnhancedFirewallPolicyRuleType_AllTraffic:
		if fv, exists := v.FldValidators["traffic_choice.all_traffic"]; exists {
			val := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_AllTraffic).AllTraffic
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("all_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_AllTcpTraffic:
		if fv, exists := v.FldValidators["traffic_choice.all_tcp_traffic"]; exists {
			val := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_AllTcpTraffic).AllTcpTraffic
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("all_tcp_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_AllUdpTraffic:
		if fv, exists := v.FldValidators["traffic_choice.all_udp_traffic"]; exists {
			val := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_AllUdpTraffic).AllUdpTraffic
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("all_udp_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_Applications:
		if fv, exists := v.FldValidators["traffic_choice.applications"]; exists {
			val := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_Applications).Applications
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("applications"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnhancedFirewallPolicyRuleType_ProtocolPortRange:
		if fv, exists := v.FldValidators["traffic_choice.protocol_port_range"]; exists {
			val := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_ProtocolPortRange).ProtocolPortRange
			vOpts := append(opts,
				db.WithValidateField("traffic_choice"),
				db.WithValidateField("protocol_port_range"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEnhancedFirewallPolicyRuleTypeValidator = func() *ValidateEnhancedFirewallPolicyRuleType {
	v := &ValidateEnhancedFirewallPolicyRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhActionChoice := v.ActionChoiceValidationRuleHandler
	rulesActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhActionChoice(rulesActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EnhancedFirewallPolicyRuleType.action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action_choice"] = vFn

	vrhDestinationChoice := v.DestinationChoiceValidationRuleHandler
	rulesDestinationChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDestinationChoice(rulesDestinationChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EnhancedFirewallPolicyRuleType.destination_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination_choice"] = vFn

	vrhSourceChoice := v.SourceChoiceValidationRuleHandler
	rulesSourceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSourceChoice(rulesSourceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EnhancedFirewallPolicyRuleType.source_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source_choice"] = vFn

	vrhTrafficChoice := v.TrafficChoiceValidationRuleHandler
	rulesTrafficChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrafficChoice(rulesTrafficChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EnhancedFirewallPolicyRuleType.traffic_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["traffic_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EnhancedFirewallPolicyRuleType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["action_choice.insert_service"] = ServiceActionTypeValidator().Validate

	v.FldValidators["destination_choice.destination_prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["destination_choice.destination_ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate
	v.FldValidators["destination_choice.destination_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["destination_choice.destination_aws_vpc_ids"] = ves_io_schema.AwsVpcListValidator().Validate
	v.FldValidators["destination_choice.destination_aws_subnet_ids"] = ves_io_schema.AwsSubnetListValidator().Validate

	v.FldValidators["source_choice.source_prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["source_choice.source_ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate
	v.FldValidators["source_choice.source_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["source_choice.source_aws_vpc_ids"] = ves_io_schema.AwsVpcListValidator().Validate
	v.FldValidators["source_choice.source_aws_subnet_ids"] = ves_io_schema.AwsSubnetListValidator().Validate

	v.FldValidators["traffic_choice.protocol_port_range"] = ves_io_schema_network_policy.ProtocolPortTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func EnhancedFirewallPolicyRuleTypeValidator() db.Validator {
	return DefaultEnhancedFirewallPolicyRuleTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GetSpecType_AllowAll:

		return nil, nil

	case *GetSpecType_AllowedSources:

		return nil, nil

	case *GetSpecType_AllowedDestinations:

		return nil, nil

	case *GetSpecType_DenyAll:

		return nil, nil

	case *GetSpecType_DeniedSources:

		return nil, nil

	case *GetSpecType_DeniedDestinations:

		return nil, nil

	case *GetSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GetSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AllowedSources:
		if fv, exists := v.FldValidators["rule_choice.allowed_sources"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowedSources).AllowedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AllowedDestinations:
		if fv, exists := v.FldValidators["rule_choice.allowed_destinations"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowedDestinations).AllowedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DenyAll:
		if fv, exists := v.FldValidators["rule_choice.deny_all"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_DenyAll).DenyAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DeniedSources:
		if fv, exists := v.FldValidators["rule_choice.denied_sources"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_DeniedSources).DeniedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DeniedDestinations:
		if fv, exists := v.FldValidators["rule_choice.denied_destinations"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_DeniedDestinations).DeniedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["rule_choice.allowed_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.allowed_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = EnhancedFirewallPolicyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetOperGcSpecDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOperGcSpecDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOperGcSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOperGcSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOperGcSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOperGcSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "oper_gc_spec." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_AllowAll:

		return nil, nil

	case *GlobalSpecType_AllowedSources:

		return nil, nil

	case *GlobalSpecType_AllowedDestinations:

		return nil, nil

	case *GlobalSpecType_DenyAll:

		return nil, nil

	case *GlobalSpecType_DeniedSources:

		return nil, nil

	case *GlobalSpecType_DeniedDestinations:

		return nil, nil

	case *GlobalSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["oper_gc_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("oper_gc_spec"))
		if err := fv(ctx, m.GetOperGcSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AllowedSources:
		if fv, exists := v.FldValidators["rule_choice.allowed_sources"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowedSources).AllowedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AllowedDestinations:
		if fv, exists := v.FldValidators["rule_choice.allowed_destinations"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowedDestinations).AllowedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DenyAll:
		if fv, exists := v.FldValidators["rule_choice.deny_all"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_DenyAll).DenyAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DeniedSources:
		if fv, exists := v.FldValidators["rule_choice.denied_sources"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_DeniedSources).DeniedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DeniedDestinations:
		if fv, exists := v.FldValidators["rule_choice.denied_destinations"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_DeniedDestinations).DeniedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["rule_choice.allowed_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.allowed_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = EnhancedFirewallPolicyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *OperGlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OperGlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OperGlobalSpecType) DeepCopy() *OperGlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OperGlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OperGlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OperGlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OperGlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *OperGlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkInterfaceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkInterfaceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNfvServiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNfvServiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *OperGlobalSpecType) GetNetworkInterfaceDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetNetworkInterface()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("OperGlobalSpecType.network_interface[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_interface",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetNetworkInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *OperGlobalSpecType) GetNetworkInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetNetworkInterface() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *OperGlobalSpecType) GetNfvServiceDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetNfvService()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("OperGlobalSpecType.nfv_service[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "nfv_service.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "nfv_service",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetNfvServiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *OperGlobalSpecType) GetNfvServiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "nfv_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: nfv_service")
	}
	for _, ref := range m.GetNfvService() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateOperGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOperGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OperGlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OperGlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_interface"]; exists {

		vOpts := append(opts, db.WithValidateField("network_interface"))
		for idx, item := range m.GetNetworkInterface() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nfv_service"]; exists {

		vOpts := append(opts, db.WithValidateField("nfv_service"))
		for idx, item := range m.GetNfvService() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOperGlobalSpecTypeValidator = func() *ValidateOperGlobalSpecType {
	v := &ValidateOperGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func OperGlobalSpecTypeValidator() db.Validator {
	return DefaultOperGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_AllowAll:

		return nil, nil

	case *ReplaceSpecType_AllowedSources:

		return nil, nil

	case *ReplaceSpecType_AllowedDestinations:

		return nil, nil

	case *ReplaceSpecType_DenyAll:

		return nil, nil

	case *ReplaceSpecType_DeniedSources:

		return nil, nil

	case *ReplaceSpecType_DeniedDestinations:

		return nil, nil

	case *ReplaceSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AllowedSources:
		if fv, exists := v.FldValidators["rule_choice.allowed_sources"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowedSources).AllowedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AllowedDestinations:
		if fv, exists := v.FldValidators["rule_choice.allowed_destinations"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowedDestinations).AllowedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allowed_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DenyAll:
		if fv, exists := v.FldValidators["rule_choice.deny_all"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_DenyAll).DenyAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DeniedSources:
		if fv, exists := v.FldValidators["rule_choice.denied_sources"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_DeniedSources).DeniedSources
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DeniedDestinations:
		if fv, exists := v.FldValidators["rule_choice.denied_destinations"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_DeniedDestinations).DeniedDestinations
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("denied_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["rule_choice.allowed_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.allowed_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_sources"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.denied_destinations"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = EnhancedFirewallPolicyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ServiceActionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServiceActionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServiceActionType) DeepCopy() *ServiceActionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServiceActionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServiceActionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServiceActionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServiceActionTypeValidator().Validate(ctx, m, opts...)
}

func (m *ServiceActionType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNfvServiceDRefInfo()

}

func (m *ServiceActionType) GetNfvServiceDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetNfvService()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("nfv_service.Object")
	dri := db.DRefInfo{
		RefdType:   "nfv_service.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "nfv_service",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetNfvServiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ServiceActionType) GetNfvServiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "nfv_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: nfv_service")
	}

	vref := m.GetNfvService()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "nfv_service.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateServiceActionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServiceActionType) NfvServiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for nfv_service")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateServiceActionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServiceActionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServiceActionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["nfv_service"]; exists {

		vOpts := append(opts, db.WithValidateField("nfv_service"))
		if err := fv(ctx, m.GetNfvService(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServiceActionTypeValidator = func() *ValidateServiceActionType {
	v := &ValidateServiceActionType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNfvService := v.NfvServiceValidationRuleHandler
	rulesNfvService := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNfvService(rulesNfvService)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServiceActionType.nfv_service: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nfv_service"] = vFn

	return v
}()

func ServiceActionTypeValidator() db.Validator {
	return DefaultServiceActionTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *CreateSpecType_AllowAll:
		o.RuleChoice = &GlobalSpecType_AllowAll{AllowAll: of.AllowAll}

	case *CreateSpecType_AllowedDestinations:
		o.RuleChoice = &GlobalSpecType_AllowedDestinations{AllowedDestinations: of.AllowedDestinations}

	case *CreateSpecType_AllowedSources:
		o.RuleChoice = &GlobalSpecType_AllowedSources{AllowedSources: of.AllowedSources}

	case *CreateSpecType_DeniedDestinations:
		o.RuleChoice = &GlobalSpecType_DeniedDestinations{DeniedDestinations: of.DeniedDestinations}

	case *CreateSpecType_DeniedSources:
		o.RuleChoice = &GlobalSpecType_DeniedSources{DeniedSources: of.DeniedSources}

	case *CreateSpecType_DenyAll:
		o.RuleChoice = &GlobalSpecType_DenyAll{DenyAll: of.DenyAll}

	case *CreateSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAll:
		r.RuleChoice = &CreateSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GlobalSpecType_AllowedDestinations:
		r.RuleChoice = &CreateSpecType_AllowedDestinations{AllowedDestinations: of.AllowedDestinations}

	case *GlobalSpecType_AllowedSources:
		r.RuleChoice = &CreateSpecType_AllowedSources{AllowedSources: of.AllowedSources}

	case *GlobalSpecType_DeniedDestinations:
		r.RuleChoice = &CreateSpecType_DeniedDestinations{DeniedDestinations: of.DeniedDestinations}

	case *GlobalSpecType_DeniedSources:
		r.RuleChoice = &CreateSpecType_DeniedSources{DeniedSources: of.DeniedSources}

	case *GlobalSpecType_DenyAll:
		r.RuleChoice = &CreateSpecType_DenyAll{DenyAll: of.DenyAll}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &CreateSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *GetSpecType_AllowAll:
		o.RuleChoice = &GlobalSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GetSpecType_AllowedDestinations:
		o.RuleChoice = &GlobalSpecType_AllowedDestinations{AllowedDestinations: of.AllowedDestinations}

	case *GetSpecType_AllowedSources:
		o.RuleChoice = &GlobalSpecType_AllowedSources{AllowedSources: of.AllowedSources}

	case *GetSpecType_DeniedDestinations:
		o.RuleChoice = &GlobalSpecType_DeniedDestinations{DeniedDestinations: of.DeniedDestinations}

	case *GetSpecType_DeniedSources:
		o.RuleChoice = &GlobalSpecType_DeniedSources{DeniedSources: of.DeniedSources}

	case *GetSpecType_DenyAll:
		o.RuleChoice = &GlobalSpecType_DenyAll{DenyAll: of.DenyAll}

	case *GetSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAll:
		r.RuleChoice = &GetSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GlobalSpecType_AllowedDestinations:
		r.RuleChoice = &GetSpecType_AllowedDestinations{AllowedDestinations: of.AllowedDestinations}

	case *GlobalSpecType_AllowedSources:
		r.RuleChoice = &GetSpecType_AllowedSources{AllowedSources: of.AllowedSources}

	case *GlobalSpecType_DeniedDestinations:
		r.RuleChoice = &GetSpecType_DeniedDestinations{DeniedDestinations: of.DeniedDestinations}

	case *GlobalSpecType_DeniedSources:
		r.RuleChoice = &GetSpecType_DeniedSources{DeniedSources: of.DeniedSources}

	case *GlobalSpecType_DenyAll:
		r.RuleChoice = &GetSpecType_DenyAll{DenyAll: of.DenyAll}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &GetSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *ReplaceSpecType_AllowAll:
		o.RuleChoice = &GlobalSpecType_AllowAll{AllowAll: of.AllowAll}

	case *ReplaceSpecType_AllowedDestinations:
		o.RuleChoice = &GlobalSpecType_AllowedDestinations{AllowedDestinations: of.AllowedDestinations}

	case *ReplaceSpecType_AllowedSources:
		o.RuleChoice = &GlobalSpecType_AllowedSources{AllowedSources: of.AllowedSources}

	case *ReplaceSpecType_DeniedDestinations:
		o.RuleChoice = &GlobalSpecType_DeniedDestinations{DeniedDestinations: of.DeniedDestinations}

	case *ReplaceSpecType_DeniedSources:
		o.RuleChoice = &GlobalSpecType_DeniedSources{DeniedSources: of.DeniedSources}

	case *ReplaceSpecType_DenyAll:
		o.RuleChoice = &GlobalSpecType_DenyAll{DenyAll: of.DenyAll}

	case *ReplaceSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAll:
		r.RuleChoice = &ReplaceSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GlobalSpecType_AllowedDestinations:
		r.RuleChoice = &ReplaceSpecType_AllowedDestinations{AllowedDestinations: of.AllowedDestinations}

	case *GlobalSpecType_AllowedSources:
		r.RuleChoice = &ReplaceSpecType_AllowedSources{AllowedSources: of.AllowedSources}

	case *GlobalSpecType_DeniedDestinations:
		r.RuleChoice = &ReplaceSpecType_DeniedDestinations{DeniedDestinations: of.DeniedDestinations}

	case *GlobalSpecType_DeniedSources:
		r.RuleChoice = &ReplaceSpecType_DeniedSources{DeniedSources: of.DeniedSources}

	case *GlobalSpecType_DenyAll:
		r.RuleChoice = &ReplaceSpecType_DenyAll{DenyAll: of.DenyAll}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &ReplaceSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

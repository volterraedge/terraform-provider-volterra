// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/enhanced_firewall_policy/types.proto

package enhanced_firewall_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	network_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy"
	network_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Policy Action to Forward Traffic to External Service
//
// x-displayName: "Policy Action to Forward Traffic to External Service"
// Action to forward traffic to external service
type ServiceActionType struct {
	// Select External Service
	//
	// x-displayName: "Select External Service"
	// x-required
	// Select External Service, to which the traffic should be forwarded to. Forwarding to Palo Alto Networks external service is supported.
	NfvService *views.ObjectRefType `protobuf:"bytes,1,opt,name=nfv_service,json=nfvService,proto3" json:"nfv_service,omitempty"`
}

func (m *ServiceActionType) Reset()      { *m = ServiceActionType{} }
func (*ServiceActionType) ProtoMessage() {}
func (*ServiceActionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{0}
}
func (m *ServiceActionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceActionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceActionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceActionType.Merge(m, src)
}
func (m *ServiceActionType) XXX_Size() int {
	return m.Size()
}
func (m *ServiceActionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceActionType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceActionType proto.InternalMessageInfo

func (m *ServiceActionType) GetNfvService() *views.ObjectRefType {
	if m != nil {
		return m.NfvService
	}
	return nil
}

// Enhanced Firewall Policy Rule
//
// x-displayName: "Enhanced Firewall Policy Rule"
// Enhanced Firewall Policy rules definition
type EnhancedFirewallPolicyRuleType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Action
	//
	// x-displayName: "Action"
	// x-required
	// Action for any connection matching the rule
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*EnhancedFirewallPolicyRuleType_Deny
	//	*EnhancedFirewallPolicyRuleType_Allow
	//	*EnhancedFirewallPolicyRuleType_InsertService
	ActionChoice isEnhancedFirewallPolicyRuleType_ActionChoice `protobuf_oneof:"action_choice"`
	// Advanced Action
	//
	// x-displayName: "Logging Action"
	// Log any connection matching the rule
	AdvancedAction *network_policy_rule.NetworkPolicyRuleAdvancedAction `protobuf:"bytes,14,opt,name=advanced_action,json=advancedAction,proto3" json:"advanced_action,omitempty"`
	// Source Traffic Filter
	//
	// x-displayName: "Source Traffic Filter"
	// x-required
	// Source Traffic Filter for the policy
	//
	// Types that are valid to be assigned to SourceChoice:
	//	*EnhancedFirewallPolicyRuleType_AllSources
	//	*EnhancedFirewallPolicyRuleType_SourcePrefixList
	//	*EnhancedFirewallPolicyRuleType_SourceIpPrefixSet
	//	*EnhancedFirewallPolicyRuleType_InsideSources
	//	*EnhancedFirewallPolicyRuleType_OutsideSources
	//	*EnhancedFirewallPolicyRuleType_SourceNamespace
	//	*EnhancedFirewallPolicyRuleType_SourceLabelSelector
	//	*EnhancedFirewallPolicyRuleType_SourceAwsVpcIds
	//	*EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds
	SourceChoice isEnhancedFirewallPolicyRuleType_SourceChoice `protobuf_oneof:"source_choice"`
	// Destination Traffic Filter
	//
	// x-displayName: "Destination Traffic Filter"
	// x-required
	// Destination Traffic Filter for the policy
	//
	// Types that are valid to be assigned to DestinationChoice:
	//	*EnhancedFirewallPolicyRuleType_AllDestinations
	//	*EnhancedFirewallPolicyRuleType_DestinationPrefixList
	//	*EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet
	//	*EnhancedFirewallPolicyRuleType_InsideDestinations
	//	*EnhancedFirewallPolicyRuleType_OutsideDestinations
	//	*EnhancedFirewallPolicyRuleType_DestinationNamespace
	//	*EnhancedFirewallPolicyRuleType_DestinationLabelSelector
	//	*EnhancedFirewallPolicyRuleType_AllSloVips
	//	*EnhancedFirewallPolicyRuleType_AllSliVips
	//	*EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds
	//	*EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds
	DestinationChoice isEnhancedFirewallPolicyRuleType_DestinationChoice `protobuf_oneof:"destination_choice"`
	// Traffic Type
	//
	// x-displayName: "Select Type of Traffic to Match"
	// x-required
	// Select type of traffic to match
	//
	// Types that are valid to be assigned to TrafficChoice:
	//	*EnhancedFirewallPolicyRuleType_AllTraffic
	//	*EnhancedFirewallPolicyRuleType_AllTcpTraffic
	//	*EnhancedFirewallPolicyRuleType_AllUdpTraffic
	//	*EnhancedFirewallPolicyRuleType_Applications
	//	*EnhancedFirewallPolicyRuleType_ProtocolPortRange
	TrafficChoice isEnhancedFirewallPolicyRuleType_TrafficChoice `protobuf_oneof:"traffic_choice"`
	// Common Label Matcher for Source and Destination
	//
	// x-displayName: "Common Label Matcher for Source and Destination"
	// A list of label keys that identify the label values that need to be the same for the source and destination. Note that the actual label values are
	// not specified here, just the label keys. This facilitates reuse of policies across multiple dimensions such as deployment, environment, and location.
	LabelMatcher *schema.LabelMatcherType `protobuf:"bytes,80,opt,name=label_matcher,json=labelMatcher,proto3" json:"label_matcher,omitempty"`
}

func (m *EnhancedFirewallPolicyRuleType) Reset()      { *m = EnhancedFirewallPolicyRuleType{} }
func (*EnhancedFirewallPolicyRuleType) ProtoMessage() {}
func (*EnhancedFirewallPolicyRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{1}
}
func (m *EnhancedFirewallPolicyRuleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnhancedFirewallPolicyRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyRuleType.Merge(m, src)
}
func (m *EnhancedFirewallPolicyRuleType) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyRuleType proto.InternalMessageInfo

type isEnhancedFirewallPolicyRuleType_ActionChoice interface {
	isEnhancedFirewallPolicyRuleType_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEnhancedFirewallPolicyRuleType_SourceChoice interface {
	isEnhancedFirewallPolicyRuleType_SourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEnhancedFirewallPolicyRuleType_DestinationChoice interface {
	isEnhancedFirewallPolicyRuleType_DestinationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEnhancedFirewallPolicyRuleType_TrafficChoice interface {
	isEnhancedFirewallPolicyRuleType_TrafficChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EnhancedFirewallPolicyRuleType_Deny struct {
	Deny *schema.Empty `protobuf:"bytes,11,opt,name=deny,proto3,oneof" json:"deny,omitempty"`
}
type EnhancedFirewallPolicyRuleType_Allow struct {
	Allow *schema.Empty `protobuf:"bytes,12,opt,name=allow,proto3,oneof" json:"allow,omitempty"`
}
type EnhancedFirewallPolicyRuleType_InsertService struct {
	InsertService *ServiceActionType `protobuf:"bytes,13,opt,name=insert_service,json=insertService,proto3,oneof" json:"insert_service,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllSources struct {
	AllSources *schema.Empty `protobuf:"bytes,21,opt,name=all_sources,json=allSources,proto3,oneof" json:"all_sources,omitempty"`
}
type EnhancedFirewallPolicyRuleType_SourcePrefixList struct {
	SourcePrefixList *views.PrefixStringListType `protobuf:"bytes,22,opt,name=source_prefix_list,json=sourcePrefixList,proto3,oneof" json:"source_prefix_list,omitempty"`
}
type EnhancedFirewallPolicyRuleType_SourceIpPrefixSet struct {
	SourceIpPrefixSet *schema.IpPrefixSetRefType `protobuf:"bytes,23,opt,name=source_ip_prefix_set,json=sourceIpPrefixSet,proto3,oneof" json:"source_ip_prefix_set,omitempty"`
}
type EnhancedFirewallPolicyRuleType_InsideSources struct {
	InsideSources *schema.Empty `protobuf:"bytes,24,opt,name=inside_sources,json=insideSources,proto3,oneof" json:"inside_sources,omitempty"`
}
type EnhancedFirewallPolicyRuleType_OutsideSources struct {
	OutsideSources *schema.Empty `protobuf:"bytes,25,opt,name=outside_sources,json=outsideSources,proto3,oneof" json:"outside_sources,omitempty"`
}
type EnhancedFirewallPolicyRuleType_SourceNamespace struct {
	SourceNamespace string `protobuf:"bytes,26,opt,name=source_namespace,json=sourceNamespace,proto3,oneof" json:"source_namespace,omitempty"`
}
type EnhancedFirewallPolicyRuleType_SourceLabelSelector struct {
	SourceLabelSelector *schema.LabelSelectorType `protobuf:"bytes,27,opt,name=source_label_selector,json=sourceLabelSelector,proto3,oneof" json:"source_label_selector,omitempty"`
}
type EnhancedFirewallPolicyRuleType_SourceAwsVpcIds struct {
	SourceAwsVpcIds *schema.AwsVpcList `protobuf:"bytes,28,opt,name=source_aws_vpc_ids,json=sourceAwsVpcIds,proto3,oneof" json:"source_aws_vpc_ids,omitempty"`
}
type EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds struct {
	SourceAwsSubnetIds *schema.AwsSubnetList `protobuf:"bytes,30,opt,name=source_aws_subnet_ids,json=sourceAwsSubnetIds,proto3,oneof" json:"source_aws_subnet_ids,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllDestinations struct {
	AllDestinations *schema.Empty `protobuf:"bytes,41,opt,name=all_destinations,json=allDestinations,proto3,oneof" json:"all_destinations,omitempty"`
}
type EnhancedFirewallPolicyRuleType_DestinationPrefixList struct {
	DestinationPrefixList *views.PrefixStringListType `protobuf:"bytes,42,opt,name=destination_prefix_list,json=destinationPrefixList,proto3,oneof" json:"destination_prefix_list,omitempty"`
}
type EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet struct {
	DestinationIpPrefixSet *schema.IpPrefixSetRefType `protobuf:"bytes,43,opt,name=destination_ip_prefix_set,json=destinationIpPrefixSet,proto3,oneof" json:"destination_ip_prefix_set,omitempty"`
}
type EnhancedFirewallPolicyRuleType_InsideDestinations struct {
	InsideDestinations *schema.Empty `protobuf:"bytes,44,opt,name=inside_destinations,json=insideDestinations,proto3,oneof" json:"inside_destinations,omitempty"`
}
type EnhancedFirewallPolicyRuleType_OutsideDestinations struct {
	OutsideDestinations *schema.Empty `protobuf:"bytes,45,opt,name=outside_destinations,json=outsideDestinations,proto3,oneof" json:"outside_destinations,omitempty"`
}
type EnhancedFirewallPolicyRuleType_DestinationNamespace struct {
	DestinationNamespace string `protobuf:"bytes,46,opt,name=destination_namespace,json=destinationNamespace,proto3,oneof" json:"destination_namespace,omitempty"`
}
type EnhancedFirewallPolicyRuleType_DestinationLabelSelector struct {
	DestinationLabelSelector *schema.LabelSelectorType `protobuf:"bytes,47,opt,name=destination_label_selector,json=destinationLabelSelector,proto3,oneof" json:"destination_label_selector,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllSloVips struct {
	AllSloVips *schema.Empty `protobuf:"bytes,48,opt,name=all_slo_vips,json=allSloVips,proto3,oneof" json:"all_slo_vips,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllSliVips struct {
	AllSliVips *schema.Empty `protobuf:"bytes,49,opt,name=all_sli_vips,json=allSliVips,proto3,oneof" json:"all_sli_vips,omitempty"`
}
type EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds struct {
	DestinationAwsVpcIds *schema.AwsVpcList `protobuf:"bytes,50,opt,name=destination_aws_vpc_ids,json=destinationAwsVpcIds,proto3,oneof" json:"destination_aws_vpc_ids,omitempty"`
}
type EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds struct {
	DestinationAwsSubnetIds *schema.AwsSubnetList `protobuf:"bytes,52,opt,name=destination_aws_subnet_ids,json=destinationAwsSubnetIds,proto3,oneof" json:"destination_aws_subnet_ids,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllTraffic struct {
	AllTraffic *schema.Empty `protobuf:"bytes,61,opt,name=all_traffic,json=allTraffic,proto3,oneof" json:"all_traffic,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllTcpTraffic struct {
	AllTcpTraffic *schema.Empty `protobuf:"bytes,62,opt,name=all_tcp_traffic,json=allTcpTraffic,proto3,oneof" json:"all_tcp_traffic,omitempty"`
}
type EnhancedFirewallPolicyRuleType_AllUdpTraffic struct {
	AllUdpTraffic *schema.Empty `protobuf:"bytes,63,opt,name=all_udp_traffic,json=allUdpTraffic,proto3,oneof" json:"all_udp_traffic,omitempty"`
}
type EnhancedFirewallPolicyRuleType_Applications struct {
	Applications *network_policy.ApplicationsType `protobuf:"bytes,64,opt,name=applications,proto3,oneof" json:"applications,omitempty"`
}
type EnhancedFirewallPolicyRuleType_ProtocolPortRange struct {
	ProtocolPortRange *network_policy.ProtocolPortType `protobuf:"bytes,65,opt,name=protocol_port_range,json=protocolPortRange,proto3,oneof" json:"protocol_port_range,omitempty"`
}

func (*EnhancedFirewallPolicyRuleType_Deny) isEnhancedFirewallPolicyRuleType_ActionChoice()  {}
func (*EnhancedFirewallPolicyRuleType_Allow) isEnhancedFirewallPolicyRuleType_ActionChoice() {}
func (*EnhancedFirewallPolicyRuleType_InsertService) isEnhancedFirewallPolicyRuleType_ActionChoice() {
}
func (*EnhancedFirewallPolicyRuleType_AllSources) isEnhancedFirewallPolicyRuleType_SourceChoice() {}
func (*EnhancedFirewallPolicyRuleType_SourcePrefixList) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_InsideSources) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_OutsideSources) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_SourceNamespace) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_SourceLabelSelector) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) isEnhancedFirewallPolicyRuleType_SourceChoice() {
}
func (*EnhancedFirewallPolicyRuleType_AllDestinations) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_DestinationPrefixList) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_InsideDestinations) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_OutsideDestinations) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_DestinationNamespace) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_DestinationLabelSelector) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_AllSloVips) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_AllSliVips) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) isEnhancedFirewallPolicyRuleType_DestinationChoice() {
}
func (*EnhancedFirewallPolicyRuleType_AllTraffic) isEnhancedFirewallPolicyRuleType_TrafficChoice() {}
func (*EnhancedFirewallPolicyRuleType_AllTcpTraffic) isEnhancedFirewallPolicyRuleType_TrafficChoice() {
}
func (*EnhancedFirewallPolicyRuleType_AllUdpTraffic) isEnhancedFirewallPolicyRuleType_TrafficChoice() {
}
func (*EnhancedFirewallPolicyRuleType_Applications) isEnhancedFirewallPolicyRuleType_TrafficChoice() {
}
func (*EnhancedFirewallPolicyRuleType_ProtocolPortRange) isEnhancedFirewallPolicyRuleType_TrafficChoice() {
}

func (m *EnhancedFirewallPolicyRuleType) GetActionChoice() isEnhancedFirewallPolicyRuleType_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}
func (m *EnhancedFirewallPolicyRuleType) GetSourceChoice() isEnhancedFirewallPolicyRuleType_SourceChoice {
	if m != nil {
		return m.SourceChoice
	}
	return nil
}
func (m *EnhancedFirewallPolicyRuleType) GetDestinationChoice() isEnhancedFirewallPolicyRuleType_DestinationChoice {
	if m != nil {
		return m.DestinationChoice
	}
	return nil
}
func (m *EnhancedFirewallPolicyRuleType) GetTrafficChoice() isEnhancedFirewallPolicyRuleType_TrafficChoice {
	if m != nil {
		return m.TrafficChoice
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetDeny() *schema.Empty {
	if x, ok := m.GetActionChoice().(*EnhancedFirewallPolicyRuleType_Deny); ok {
		return x.Deny
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllow() *schema.Empty {
	if x, ok := m.GetActionChoice().(*EnhancedFirewallPolicyRuleType_Allow); ok {
		return x.Allow
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetInsertService() *ServiceActionType {
	if x, ok := m.GetActionChoice().(*EnhancedFirewallPolicyRuleType_InsertService); ok {
		return x.InsertService
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAdvancedAction() *network_policy_rule.NetworkPolicyRuleAdvancedAction {
	if m != nil {
		return m.AdvancedAction
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllSources() *schema.Empty {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_AllSources); ok {
		return x.AllSources
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetSourcePrefixList() *views.PrefixStringListType {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourcePrefixList); ok {
		return x.SourcePrefixList
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetSourceIpPrefixSet() *schema.IpPrefixSetRefType {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceIpPrefixSet); ok {
		return x.SourceIpPrefixSet
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetInsideSources() *schema.Empty {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_InsideSources); ok {
		return x.InsideSources
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetOutsideSources() *schema.Empty {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_OutsideSources); ok {
		return x.OutsideSources
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetSourceNamespace() string {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceNamespace); ok {
		return x.SourceNamespace
	}
	return ""
}

func (m *EnhancedFirewallPolicyRuleType) GetSourceLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceLabelSelector); ok {
		return x.SourceLabelSelector
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetSourceAwsVpcIds() *schema.AwsVpcList {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceAwsVpcIds); ok {
		return x.SourceAwsVpcIds
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetSourceAwsSubnetIds() *schema.AwsSubnetList {
	if x, ok := m.GetSourceChoice().(*EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds); ok {
		return x.SourceAwsSubnetIds
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllDestinations() *schema.Empty {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_AllDestinations); ok {
		return x.AllDestinations
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetDestinationPrefixList() *views.PrefixStringListType {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationPrefixList); ok {
		return x.DestinationPrefixList
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetDestinationIpPrefixSet() *schema.IpPrefixSetRefType {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet); ok {
		return x.DestinationIpPrefixSet
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetInsideDestinations() *schema.Empty {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_InsideDestinations); ok {
		return x.InsideDestinations
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetOutsideDestinations() *schema.Empty {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_OutsideDestinations); ok {
		return x.OutsideDestinations
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetDestinationNamespace() string {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationNamespace); ok {
		return x.DestinationNamespace
	}
	return ""
}

func (m *EnhancedFirewallPolicyRuleType) GetDestinationLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationLabelSelector); ok {
		return x.DestinationLabelSelector
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllSloVips() *schema.Empty {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_AllSloVips); ok {
		return x.AllSloVips
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllSliVips() *schema.Empty {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_AllSliVips); ok {
		return x.AllSliVips
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetDestinationAwsVpcIds() *schema.AwsVpcList {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds); ok {
		return x.DestinationAwsVpcIds
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetDestinationAwsSubnetIds() *schema.AwsSubnetList {
	if x, ok := m.GetDestinationChoice().(*EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds); ok {
		return x.DestinationAwsSubnetIds
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllTraffic() *schema.Empty {
	if x, ok := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_AllTraffic); ok {
		return x.AllTraffic
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllTcpTraffic() *schema.Empty {
	if x, ok := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_AllTcpTraffic); ok {
		return x.AllTcpTraffic
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetAllUdpTraffic() *schema.Empty {
	if x, ok := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_AllUdpTraffic); ok {
		return x.AllUdpTraffic
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetApplications() *network_policy.ApplicationsType {
	if x, ok := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_Applications); ok {
		return x.Applications
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetProtocolPortRange() *network_policy.ProtocolPortType {
	if x, ok := m.GetTrafficChoice().(*EnhancedFirewallPolicyRuleType_ProtocolPortRange); ok {
		return x.ProtocolPortRange
	}
	return nil
}

func (m *EnhancedFirewallPolicyRuleType) GetLabelMatcher() *schema.LabelMatcherType {
	if m != nil {
		return m.LabelMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EnhancedFirewallPolicyRuleType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EnhancedFirewallPolicyRuleType_Deny)(nil),
		(*EnhancedFirewallPolicyRuleType_Allow)(nil),
		(*EnhancedFirewallPolicyRuleType_InsertService)(nil),
		(*EnhancedFirewallPolicyRuleType_AllSources)(nil),
		(*EnhancedFirewallPolicyRuleType_SourcePrefixList)(nil),
		(*EnhancedFirewallPolicyRuleType_SourceIpPrefixSet)(nil),
		(*EnhancedFirewallPolicyRuleType_InsideSources)(nil),
		(*EnhancedFirewallPolicyRuleType_OutsideSources)(nil),
		(*EnhancedFirewallPolicyRuleType_SourceNamespace)(nil),
		(*EnhancedFirewallPolicyRuleType_SourceLabelSelector)(nil),
		(*EnhancedFirewallPolicyRuleType_SourceAwsVpcIds)(nil),
		(*EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds)(nil),
		(*EnhancedFirewallPolicyRuleType_AllDestinations)(nil),
		(*EnhancedFirewallPolicyRuleType_DestinationPrefixList)(nil),
		(*EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet)(nil),
		(*EnhancedFirewallPolicyRuleType_InsideDestinations)(nil),
		(*EnhancedFirewallPolicyRuleType_OutsideDestinations)(nil),
		(*EnhancedFirewallPolicyRuleType_DestinationNamespace)(nil),
		(*EnhancedFirewallPolicyRuleType_DestinationLabelSelector)(nil),
		(*EnhancedFirewallPolicyRuleType_AllSloVips)(nil),
		(*EnhancedFirewallPolicyRuleType_AllSliVips)(nil),
		(*EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds)(nil),
		(*EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds)(nil),
		(*EnhancedFirewallPolicyRuleType_AllTraffic)(nil),
		(*EnhancedFirewallPolicyRuleType_AllTcpTraffic)(nil),
		(*EnhancedFirewallPolicyRuleType_AllUdpTraffic)(nil),
		(*EnhancedFirewallPolicyRuleType_Applications)(nil),
		(*EnhancedFirewallPolicyRuleType_ProtocolPortRange)(nil),
	}
}

// Custom Enhanced Firewall Policy Rules
//
// x-displayName: "Custom Enhanced Firewall Policy Rules"
// Custom Enhanced Firewall Policy Rules
type EnhancedFirewallPolicyRuleListType struct {
	// List of Enhanced Firewall Policy Rules
	//
	// x-displayName: "List of Enhanced Firewall Policy Rules"
	// x-required
	// Ordered List of Enhanced Firewall Policy Rules
	Rules []*EnhancedFirewallPolicyRuleType `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *EnhancedFirewallPolicyRuleListType) Reset()      { *m = EnhancedFirewallPolicyRuleListType{} }
func (*EnhancedFirewallPolicyRuleListType) ProtoMessage() {}
func (*EnhancedFirewallPolicyRuleListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{2}
}
func (m *EnhancedFirewallPolicyRuleListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnhancedFirewallPolicyRuleListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnhancedFirewallPolicyRuleListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnhancedFirewallPolicyRuleListType.Merge(m, src)
}
func (m *EnhancedFirewallPolicyRuleListType) XXX_Size() int {
	return m.Size()
}
func (m *EnhancedFirewallPolicyRuleListType) XXX_DiscardUnknown() {
	xxx_messageInfo_EnhancedFirewallPolicyRuleListType.DiscardUnknown(m)
}

var xxx_messageInfo_EnhancedFirewallPolicyRuleListType proto.InternalMessageInfo

func (m *EnhancedFirewallPolicyRuleListType) GetRules() []*EnhancedFirewallPolicyRuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Enhanced Firewall Policy
//
// x-displayName: "Enhanced Firewall Policy"
// Desired state for Enhanced Firewall Policy
type GlobalSpecType struct {
	// Select Enhanced Firewall Policy Rule Type
	//
	// x-displayName: "Select Enhanced Firewall Policy Rule Type"
	// x-required
	// Select specific/custom rules for Enhanced Firewall Policy
	//
	// Types that are valid to be assigned to RuleChoice:
	//	*GlobalSpecType_AllowAll
	//	*GlobalSpecType_AllowedSources
	//	*GlobalSpecType_AllowedDestinations
	//	*GlobalSpecType_DenyAll
	//	*GlobalSpecType_DeniedSources
	//	*GlobalSpecType_DeniedDestinations
	//	*GlobalSpecType_RuleList
	RuleChoice isGlobalSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
	// Segments
	//
	// x-displayName: "Configure Segments"
	// Select source and destination segments where rule is applied
	// Skip the configuration or set option as Any to ignore corresponding segment match
	SegmentPolicy *policy.SegmentPolicyType `protobuf:"bytes,9,opt,name=segment_policy,json=segmentPolicy,proto3" json:"segment_policy,omitempty"`
	// Oper GcSpecType
	//
	// x-displayName: "Oper GcSpecType"
	// operational information derived from view based configuration
	// the configuration in attributes like vip_choice or origin_pools uses reference by
	// name as defined in views. However, modules like Vega can work with only with UID
	// references only. Akar translates the reference and updates UID based references
	// below
	OperGcSpec *OperGlobalSpecType `protobuf:"bytes,100,opt,name=oper_gc_spec,json=operGcSpec,proto3" json:"oper_gc_spec,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_RuleChoice interface {
	isGlobalSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,2,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type GlobalSpecType_AllowedSources struct {
	AllowedSources *schema.PrefixListType `protobuf:"bytes,3,opt,name=allowed_sources,json=allowedSources,proto3,oneof" json:"allowed_sources,omitempty"`
}
type GlobalSpecType_AllowedDestinations struct {
	AllowedDestinations *schema.PrefixListType `protobuf:"bytes,4,opt,name=allowed_destinations,json=allowedDestinations,proto3,oneof" json:"allowed_destinations,omitempty"`
}
type GlobalSpecType_DenyAll struct {
	DenyAll *schema.Empty `protobuf:"bytes,5,opt,name=deny_all,json=denyAll,proto3,oneof" json:"deny_all,omitempty"`
}
type GlobalSpecType_DeniedSources struct {
	DeniedSources *schema.PrefixListType `protobuf:"bytes,6,opt,name=denied_sources,json=deniedSources,proto3,oneof" json:"denied_sources,omitempty"`
}
type GlobalSpecType_DeniedDestinations struct {
	DeniedDestinations *schema.PrefixListType `protobuf:"bytes,7,opt,name=denied_destinations,json=deniedDestinations,proto3,oneof" json:"denied_destinations,omitempty"`
}
type GlobalSpecType_RuleList struct {
	RuleList *EnhancedFirewallPolicyRuleListType `protobuf:"bytes,8,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*GlobalSpecType_AllowAll) isGlobalSpecType_RuleChoice()            {}
func (*GlobalSpecType_AllowedSources) isGlobalSpecType_RuleChoice()      {}
func (*GlobalSpecType_AllowedDestinations) isGlobalSpecType_RuleChoice() {}
func (*GlobalSpecType_DenyAll) isGlobalSpecType_RuleChoice()             {}
func (*GlobalSpecType_DeniedSources) isGlobalSpecType_RuleChoice()       {}
func (*GlobalSpecType_DeniedDestinations) isGlobalSpecType_RuleChoice()  {}
func (*GlobalSpecType_RuleList) isGlobalSpecType_RuleChoice()            {}

func (m *GlobalSpecType) GetRuleChoice() isGlobalSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *GlobalSpecType) GetAllowedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowedSources); ok {
		return x.AllowedSources
	}
	return nil
}

func (m *GlobalSpecType) GetAllowedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowedDestinations); ok {
		return x.AllowedDestinations
	}
	return nil
}

func (m *GlobalSpecType) GetDenyAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_DenyAll); ok {
		return x.DenyAll
	}
	return nil
}

func (m *GlobalSpecType) GetDeniedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_DeniedSources); ok {
		return x.DeniedSources
	}
	return nil
}

func (m *GlobalSpecType) GetDeniedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_DeniedDestinations); ok {
		return x.DeniedDestinations
	}
	return nil
}

func (m *GlobalSpecType) GetRuleList() *EnhancedFirewallPolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

func (m *GlobalSpecType) GetSegmentPolicy() *policy.SegmentPolicyType {
	if m != nil {
		return m.SegmentPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetOperGcSpec() *OperGlobalSpecType {
	if m != nil {
		return m.OperGcSpec
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_AllowAll)(nil),
		(*GlobalSpecType_AllowedSources)(nil),
		(*GlobalSpecType_AllowedDestinations)(nil),
		(*GlobalSpecType_DenyAll)(nil),
		(*GlobalSpecType_DeniedSources)(nil),
		(*GlobalSpecType_DeniedDestinations)(nil),
		(*GlobalSpecType_RuleList)(nil),
	}
}

// Operational specifications
//
// x-displayName: "Operational Specifications"
// Operational state derived from GlobalSpecType
// The fields below must always be interpreted based on the configuration in GlobalSpecType
type OperGlobalSpecType struct {
	// NFV Service reference
	//
	// x-displayName: "NFV Service"
	// Reference to a nfv-service object
	NfvService []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=nfv_service,json=nfvService,proto3" json:"nfv_service,omitempty"`
	// Network Interface
	//
	// x-displayName: "Network Interface"
	// Reference to a network-interface
	NetworkInterface []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
}

func (m *OperGlobalSpecType) Reset()      { *m = OperGlobalSpecType{} }
func (*OperGlobalSpecType) ProtoMessage() {}
func (*OperGlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{4}
}
func (m *OperGlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperGlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OperGlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperGlobalSpecType.Merge(m, src)
}
func (m *OperGlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *OperGlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_OperGlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_OperGlobalSpecType proto.InternalMessageInfo

func (m *OperGlobalSpecType) GetNfvService() []*schema.ObjectRefType {
	if m != nil {
		return m.NfvService
	}
	return nil
}

func (m *OperGlobalSpecType) GetNetworkInterface() []*schema.ObjectRefType {
	if m != nil {
		return m.NetworkInterface
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Enhanced Firewall Policy"
// Shape of Enhanced Firewall Policy specification
type CreateSpecType struct {
	// Types that are valid to be assigned to RuleChoice:
	//	*CreateSpecType_AllowAll
	//	*CreateSpecType_AllowedSources
	//	*CreateSpecType_AllowedDestinations
	//	*CreateSpecType_DenyAll
	//	*CreateSpecType_DeniedSources
	//	*CreateSpecType_DeniedDestinations
	//	*CreateSpecType_RuleList
	RuleChoice    isCreateSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
	SegmentPolicy *policy.SegmentPolicyType   `protobuf:"bytes,9,opt,name=segment_policy,json=segmentPolicy,proto3" json:"segment_policy,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_RuleChoice interface {
	isCreateSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,2,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type CreateSpecType_AllowedSources struct {
	AllowedSources *schema.PrefixListType `protobuf:"bytes,3,opt,name=allowed_sources,json=allowedSources,proto3,oneof" json:"allowed_sources,omitempty"`
}
type CreateSpecType_AllowedDestinations struct {
	AllowedDestinations *schema.PrefixListType `protobuf:"bytes,4,opt,name=allowed_destinations,json=allowedDestinations,proto3,oneof" json:"allowed_destinations,omitempty"`
}
type CreateSpecType_DenyAll struct {
	DenyAll *schema.Empty `protobuf:"bytes,5,opt,name=deny_all,json=denyAll,proto3,oneof" json:"deny_all,omitempty"`
}
type CreateSpecType_DeniedSources struct {
	DeniedSources *schema.PrefixListType `protobuf:"bytes,6,opt,name=denied_sources,json=deniedSources,proto3,oneof" json:"denied_sources,omitempty"`
}
type CreateSpecType_DeniedDestinations struct {
	DeniedDestinations *schema.PrefixListType `protobuf:"bytes,7,opt,name=denied_destinations,json=deniedDestinations,proto3,oneof" json:"denied_destinations,omitempty"`
}
type CreateSpecType_RuleList struct {
	RuleList *EnhancedFirewallPolicyRuleListType `protobuf:"bytes,8,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*CreateSpecType_AllowAll) isCreateSpecType_RuleChoice()            {}
func (*CreateSpecType_AllowedSources) isCreateSpecType_RuleChoice()      {}
func (*CreateSpecType_AllowedDestinations) isCreateSpecType_RuleChoice() {}
func (*CreateSpecType_DenyAll) isCreateSpecType_RuleChoice()             {}
func (*CreateSpecType_DeniedSources) isCreateSpecType_RuleChoice()       {}
func (*CreateSpecType_DeniedDestinations) isCreateSpecType_RuleChoice()  {}
func (*CreateSpecType_RuleList) isCreateSpecType_RuleChoice()            {}

func (m *CreateSpecType) GetRuleChoice() isCreateSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *CreateSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *CreateSpecType) GetAllowedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowedSources); ok {
		return x.AllowedSources
	}
	return nil
}

func (m *CreateSpecType) GetAllowedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowedDestinations); ok {
		return x.AllowedDestinations
	}
	return nil
}

func (m *CreateSpecType) GetDenyAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_DenyAll); ok {
		return x.DenyAll
	}
	return nil
}

func (m *CreateSpecType) GetDeniedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_DeniedSources); ok {
		return x.DeniedSources
	}
	return nil
}

func (m *CreateSpecType) GetDeniedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_DeniedDestinations); ok {
		return x.DeniedDestinations
	}
	return nil
}

func (m *CreateSpecType) GetRuleList() *EnhancedFirewallPolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

func (m *CreateSpecType) GetSegmentPolicy() *policy.SegmentPolicyType {
	if m != nil {
		return m.SegmentPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_AllowAll)(nil),
		(*CreateSpecType_AllowedSources)(nil),
		(*CreateSpecType_AllowedDestinations)(nil),
		(*CreateSpecType_DenyAll)(nil),
		(*CreateSpecType_DeniedSources)(nil),
		(*CreateSpecType_DeniedDestinations)(nil),
		(*CreateSpecType_RuleList)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Enhanced Firewall Policy"
// Shape of Enhanced Firewall Policy replace specification
type ReplaceSpecType struct {
	// Types that are valid to be assigned to RuleChoice:
	//	*ReplaceSpecType_AllowAll
	//	*ReplaceSpecType_AllowedSources
	//	*ReplaceSpecType_AllowedDestinations
	//	*ReplaceSpecType_DenyAll
	//	*ReplaceSpecType_DeniedSources
	//	*ReplaceSpecType_DeniedDestinations
	//	*ReplaceSpecType_RuleList
	RuleChoice    isReplaceSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
	SegmentPolicy *policy.SegmentPolicyType    `protobuf:"bytes,9,opt,name=segment_policy,json=segmentPolicy,proto3" json:"segment_policy,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_RuleChoice interface {
	isReplaceSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,2,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type ReplaceSpecType_AllowedSources struct {
	AllowedSources *schema.PrefixListType `protobuf:"bytes,3,opt,name=allowed_sources,json=allowedSources,proto3,oneof" json:"allowed_sources,omitempty"`
}
type ReplaceSpecType_AllowedDestinations struct {
	AllowedDestinations *schema.PrefixListType `protobuf:"bytes,4,opt,name=allowed_destinations,json=allowedDestinations,proto3,oneof" json:"allowed_destinations,omitempty"`
}
type ReplaceSpecType_DenyAll struct {
	DenyAll *schema.Empty `protobuf:"bytes,5,opt,name=deny_all,json=denyAll,proto3,oneof" json:"deny_all,omitempty"`
}
type ReplaceSpecType_DeniedSources struct {
	DeniedSources *schema.PrefixListType `protobuf:"bytes,6,opt,name=denied_sources,json=deniedSources,proto3,oneof" json:"denied_sources,omitempty"`
}
type ReplaceSpecType_DeniedDestinations struct {
	DeniedDestinations *schema.PrefixListType `protobuf:"bytes,7,opt,name=denied_destinations,json=deniedDestinations,proto3,oneof" json:"denied_destinations,omitempty"`
}
type ReplaceSpecType_RuleList struct {
	RuleList *EnhancedFirewallPolicyRuleListType `protobuf:"bytes,8,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*ReplaceSpecType_AllowAll) isReplaceSpecType_RuleChoice()            {}
func (*ReplaceSpecType_AllowedSources) isReplaceSpecType_RuleChoice()      {}
func (*ReplaceSpecType_AllowedDestinations) isReplaceSpecType_RuleChoice() {}
func (*ReplaceSpecType_DenyAll) isReplaceSpecType_RuleChoice()             {}
func (*ReplaceSpecType_DeniedSources) isReplaceSpecType_RuleChoice()       {}
func (*ReplaceSpecType_DeniedDestinations) isReplaceSpecType_RuleChoice()  {}
func (*ReplaceSpecType_RuleList) isReplaceSpecType_RuleChoice()            {}

func (m *ReplaceSpecType) GetRuleChoice() isReplaceSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowedSources); ok {
		return x.AllowedSources
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowedDestinations); ok {
		return x.AllowedDestinations
	}
	return nil
}

func (m *ReplaceSpecType) GetDenyAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_DenyAll); ok {
		return x.DenyAll
	}
	return nil
}

func (m *ReplaceSpecType) GetDeniedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_DeniedSources); ok {
		return x.DeniedSources
	}
	return nil
}

func (m *ReplaceSpecType) GetDeniedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_DeniedDestinations); ok {
		return x.DeniedDestinations
	}
	return nil
}

func (m *ReplaceSpecType) GetRuleList() *EnhancedFirewallPolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

func (m *ReplaceSpecType) GetSegmentPolicy() *policy.SegmentPolicyType {
	if m != nil {
		return m.SegmentPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_AllowAll)(nil),
		(*ReplaceSpecType_AllowedSources)(nil),
		(*ReplaceSpecType_AllowedDestinations)(nil),
		(*ReplaceSpecType_DenyAll)(nil),
		(*ReplaceSpecType_DeniedSources)(nil),
		(*ReplaceSpecType_DeniedDestinations)(nil),
		(*ReplaceSpecType_RuleList)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Enhanced Firewall Policy"
// Shape of the Enhanced Firewall Policy specification
type GetSpecType struct {
	// Types that are valid to be assigned to RuleChoice:
	//	*GetSpecType_AllowAll
	//	*GetSpecType_AllowedSources
	//	*GetSpecType_AllowedDestinations
	//	*GetSpecType_DenyAll
	//	*GetSpecType_DeniedSources
	//	*GetSpecType_DeniedDestinations
	//	*GetSpecType_RuleList
	RuleChoice    isGetSpecType_RuleChoice  `protobuf_oneof:"rule_choice"`
	SegmentPolicy *policy.SegmentPolicyType `protobuf:"bytes,9,opt,name=segment_policy,json=segmentPolicy,proto3" json:"segment_policy,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fbba61196a322a, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_RuleChoice interface {
	isGetSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,2,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type GetSpecType_AllowedSources struct {
	AllowedSources *schema.PrefixListType `protobuf:"bytes,3,opt,name=allowed_sources,json=allowedSources,proto3,oneof" json:"allowed_sources,omitempty"`
}
type GetSpecType_AllowedDestinations struct {
	AllowedDestinations *schema.PrefixListType `protobuf:"bytes,4,opt,name=allowed_destinations,json=allowedDestinations,proto3,oneof" json:"allowed_destinations,omitempty"`
}
type GetSpecType_DenyAll struct {
	DenyAll *schema.Empty `protobuf:"bytes,5,opt,name=deny_all,json=denyAll,proto3,oneof" json:"deny_all,omitempty"`
}
type GetSpecType_DeniedSources struct {
	DeniedSources *schema.PrefixListType `protobuf:"bytes,6,opt,name=denied_sources,json=deniedSources,proto3,oneof" json:"denied_sources,omitempty"`
}
type GetSpecType_DeniedDestinations struct {
	DeniedDestinations *schema.PrefixListType `protobuf:"bytes,7,opt,name=denied_destinations,json=deniedDestinations,proto3,oneof" json:"denied_destinations,omitempty"`
}
type GetSpecType_RuleList struct {
	RuleList *EnhancedFirewallPolicyRuleListType `protobuf:"bytes,8,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*GetSpecType_AllowAll) isGetSpecType_RuleChoice()            {}
func (*GetSpecType_AllowedSources) isGetSpecType_RuleChoice()      {}
func (*GetSpecType_AllowedDestinations) isGetSpecType_RuleChoice() {}
func (*GetSpecType_DenyAll) isGetSpecType_RuleChoice()             {}
func (*GetSpecType_DeniedSources) isGetSpecType_RuleChoice()       {}
func (*GetSpecType_DeniedDestinations) isGetSpecType_RuleChoice()  {}
func (*GetSpecType_RuleList) isGetSpecType_RuleChoice()            {}

func (m *GetSpecType) GetRuleChoice() isGetSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GetSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *GetSpecType) GetAllowedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowedSources); ok {
		return x.AllowedSources
	}
	return nil
}

func (m *GetSpecType) GetAllowedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowedDestinations); ok {
		return x.AllowedDestinations
	}
	return nil
}

func (m *GetSpecType) GetDenyAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*GetSpecType_DenyAll); ok {
		return x.DenyAll
	}
	return nil
}

func (m *GetSpecType) GetDeniedSources() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_DeniedSources); ok {
		return x.DeniedSources
	}
	return nil
}

func (m *GetSpecType) GetDeniedDestinations() *schema.PrefixListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_DeniedDestinations); ok {
		return x.DeniedDestinations
	}
	return nil
}

func (m *GetSpecType) GetRuleList() *EnhancedFirewallPolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

func (m *GetSpecType) GetSegmentPolicy() *policy.SegmentPolicyType {
	if m != nil {
		return m.SegmentPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_AllowAll)(nil),
		(*GetSpecType_AllowedSources)(nil),
		(*GetSpecType_AllowedDestinations)(nil),
		(*GetSpecType_DenyAll)(nil),
		(*GetSpecType_DeniedSources)(nil),
		(*GetSpecType_DeniedDestinations)(nil),
		(*GetSpecType_RuleList)(nil),
	}
}

func init() {
	proto.RegisterType((*ServiceActionType)(nil), "ves.io.schema.enhanced_firewall_policy.ServiceActionType")
	golang_proto.RegisterType((*ServiceActionType)(nil), "ves.io.schema.enhanced_firewall_policy.ServiceActionType")
	proto.RegisterType((*EnhancedFirewallPolicyRuleType)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyRuleType")
	golang_proto.RegisterType((*EnhancedFirewallPolicyRuleType)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyRuleType")
	proto.RegisterType((*EnhancedFirewallPolicyRuleListType)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyRuleListType")
	golang_proto.RegisterType((*EnhancedFirewallPolicyRuleListType)(nil), "ves.io.schema.enhanced_firewall_policy.EnhancedFirewallPolicyRuleListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.GlobalSpecType")
	proto.RegisterType((*OperGlobalSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.OperGlobalSpecType")
	golang_proto.RegisterType((*OperGlobalSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.OperGlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.enhanced_firewall_policy.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/enhanced_firewall_policy/types.proto", fileDescriptor_38fbba61196a322a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/enhanced_firewall_policy/types.proto", fileDescriptor_38fbba61196a322a)
}

var fileDescriptor_38fbba61196a322a = []byte{
	// 2339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6c, 0xdb, 0xc8,
	0x15, 0xf6, 0x48, 0xb2, 0x23, 0x3f, 0x59, 0xb2, 0x42, 0xdb, 0x31, 0xed, 0x38, 0x8c, 0x22, 0x6c,
	0xb3, 0xb6, 0x96, 0xa1, 0x25, 0x4a, 0xb6, 0x93, 0x60, 0x93, 0xac, 0x94, 0x6c, 0x12, 0xbb, 0xf9,
	0x51, 0xe9, 0xac, 0x77, 0x91, 0xfe, 0x08, 0x34, 0x35, 0x92, 0xd9, 0xd0, 0x22, 0x41, 0xd2, 0xf2,
	0xfa, 0x90, 0x45, 0xd0, 0xf6, 0xd4, 0x53, 0x1b, 0xa0, 0x97, 0xdc, 0x0a, 0x6c, 0x81, 0x22, 0xa7,
	0x9e, 0x2b, 0x1f, 0x8c, 0x05, 0x0a, 0x14, 0x7b, 0x32, 0x7a, 0xca, 0x71, 0xa3, 0x5c, 0xb6, 0x3d,
	0xa5, 0x40, 0x0f, 0x8b, 0xa2, 0x40, 0x0b, 0xce, 0x50, 0x32, 0x29, 0xc9, 0x5a, 0x27, 0x29, 0xb0,
	0x7b, 0xc8, 0xc9, 0x22, 0xe7, 0xfb, 0xbe, 0x37, 0xf3, 0xe6, 0xcd, 0x7b, 0x6f, 0x68, 0x10, 0xeb,
	0xd8, 0x12, 0x54, 0x7d, 0xde, 0x52, 0x36, 0xf0, 0xa6, 0x3c, 0x8f, 0x6b, 0x1b, 0x72, 0x4d, 0xc1,
	0xe5, 0x52, 0x45, 0x35, 0xf1, 0xb6, 0xac, 0x69, 0x25, 0x43, 0xd7, 0x54, 0x65, 0x67, 0xde, 0xde,
	0x31, 0xb0, 0x25, 0x18, 0xa6, 0x6e, 0xeb, 0xcc, 0x59, 0xca, 0x11, 0x28, 0x47, 0x38, 0x8c, 0x33,
	0x7d, 0xae, 0xaa, 0xda, 0x1b, 0x5b, 0xeb, 0x82, 0xa2, 0x6f, 0xce, 0x57, 0xf5, 0xaa, 0x3e, 0x4f,
	0xe8, 0xeb, 0x5b, 0x15, 0xf2, 0x44, 0x1e, 0xc8, 0x2f, 0x2a, 0x3b, 0x3d, 0xe9, 0x9f, 0x4a, 0x0d,
	0xdb, 0xee, 0xc0, 0x6c, 0xd7, 0xc0, 0xb6, 0x6e, 0x3e, 0xe8, 0x31, 0xb3, 0xe9, 0x73, 0xfd, 0x90,
	0x25, 0x73, 0x4b, 0xc3, 0x3e, 0xf8, 0x49, 0x3f, 0x5c, 0x37, 0x6c, 0x55, 0xaf, 0xb5, 0x06, 0x13,
	0xfe, 0xc1, 0x1e, 0xd6, 0xa6, 0xfc, 0x08, 0xef, 0xd0, 0x8c, 0x7f, 0xa8, 0x2e, 0x6b, 0x6a, 0x59,
	0xb6, 0x71, 0x6f, 0xe9, 0xba, 0x8a, 0xb7, 0x4b, 0x7e, 0xe3, 0xa7, 0xbb, 0x11, 0x96, 0xd7, 0x40,
	0x52, 0x83, 0xe3, 0xab, 0xd8, 0xac, 0xab, 0x0a, 0xce, 0x2b, 0x0e, 0xf1, 0xde, 0x8e, 0x81, 0x99,
	0x8f, 0x21, 0x52, 0xab, 0xd4, 0x4b, 0x16, 0x1d, 0x60, 0x51, 0x02, 0xcd, 0x46, 0xc4, 0xa4, 0xe0,
	0xdf, 0x2e, 0xa2, 0x25, 0xdc, 0x5d, 0xff, 0x39, 0x56, 0x6c, 0x09, 0x57, 0x1c, 0x62, 0x81, 0x79,
	0xfa, 0xd0, 0xcb, 0x7c, 0xb4, 0x8b, 0x90, 0x04, 0xb5, 0x4a, 0xdd, 0x35, 0x91, 0xfc, 0xdd, 0x69,
	0xe0, 0x3e, 0x74, 0xb7, 0xf9, 0xba, 0xbb, 0xcb, 0x45, 0xe2, 0x10, 0x69, 0x4b, 0xc3, 0xc4, 0xf6,
	0x45, 0x08, 0x6f, 0x62, 0x5b, 0x2e, 0xcb, 0xb6, 0xec, 0x1a, 0xe6, 0x3a, 0x0c, 0xdf, 0xc6, 0x96,
	0x25, 0x57, 0xf1, 0x6d, 0x6c, 0xcb, 0x0e, 0x43, 0x6a, 0xe3, 0x99, 0x14, 0x84, 0xca, 0xb8, 0xb6,
	0xc3, 0x46, 0x08, 0x6f, 0xbc, 0x83, 0xf7, 0xe1, 0xa6, 0x61, 0xef, 0xdc, 0x1c, 0x90, 0x08, 0x86,
	0xe1, 0x61, 0x50, 0xd6, 0x34, 0x7d, 0x9b, 0x1d, 0xe9, 0x0b, 0xa6, 0x20, 0x66, 0x03, 0x62, 0x6a,
	0xcd, 0xc2, 0xa6, 0xdd, 0x76, 0x4a, 0x94, 0xd0, 0x2e, 0x08, 0x47, 0x8b, 0x61, 0xa1, 0xcb, 0xc9,
	0x85, 0xd0, 0xcb, 0x06, 0x42, 0x37, 0x07, 0xa4, 0x28, 0x15, 0x76, 0x01, 0xcc, 0x16, 0x8c, 0xca,
	0xe5, 0x3a, 0x15, 0x91, 0x09, 0x9a, 0x8d, 0x11, 0x53, 0x85, 0x0e, 0x53, 0x3d, 0x82, 0x52, 0xb8,
	0x43, 0xdf, 0x1d, 0xb8, 0x34, 0xef, 0x4a, 0x51, 0xbb, 0x85, 0xf0, 0x5e, 0x03, 0x21, 0xc7, 0xae,
	0x14, 0x93, 0x7d, 0x23, 0xcc, 0x12, 0x44, 0x9c, 0xd9, 0x5a, 0xfa, 0x96, 0xa9, 0x60, 0x8b, 0x9d,
	0xe8, 0xe3, 0x14, 0x24, 0x81, 0xac, 0x69, 0xab, 0x14, 0xc9, 0x94, 0x80, 0xa1, 0xa4, 0x92, 0x61,
	0xe2, 0x8a, 0xfa, 0x69, 0x49, 0x53, 0x2d, 0x9b, 0x3d, 0x41, 0xf8, 0x73, 0x3d, 0x43, 0xa6, 0x48,
	0x70, 0xab, 0xb6, 0xa9, 0xd6, 0xaa, 0xb7, 0x54, 0xcb, 0xa6, 0xde, 0xd8, 0x77, 0xbc, 0x81, 0xa4,
	0x38, 0x15, 0xa3, 0x18, 0x67, 0x94, 0xb9, 0x0f, 0xe3, 0xae, 0x01, 0xd5, 0x68, 0xd9, 0xb0, 0xb0,
	0xcd, 0x4e, 0x12, 0x13, 0x67, 0x3a, 0x4c, 0x2c, 0x1b, 0xae, 0x3c, 0x6e, 0x07, 0x65, 0xe8, 0x4f,
	0xbb, 0x44, 0xfa, 0x38, 0x95, 0xf1, 0x20, 0x98, 0x4b, 0x64, 0x5b, 0xd5, 0x32, 0x6e, 0x2f, 0x9c,
	0xed, 0xbb, 0xf0, 0x28, 0x45, 0xb7, 0xd6, 0x7e, 0x05, 0x46, 0xf5, 0x2d, 0xdb, 0xc7, 0x9f, 0xea,
	0xcb, 0x8f, 0xb9, 0xf0, 0x96, 0x40, 0x0e, 0xdc, 0xf5, 0x96, 0x6a, 0xf2, 0x26, 0xb6, 0x0c, 0x59,
	0xc1, 0xec, 0x74, 0x02, 0xcd, 0x0e, 0x17, 0x8e, 0x3d, 0x7b, 0x88, 0xbe, 0xa6, 0x2e, 0x19, 0xa5,
	0x90, 0x3b, 0x2d, 0x04, 0x83, 0x61, 0xc2, 0x65, 0x69, 0xf2, 0x3a, 0xd6, 0x4a, 0x16, 0xd6, 0xb0,
	0x62, 0xeb, 0x26, 0x7b, 0x92, 0x18, 0x4f, 0x74, 0x18, 0xbf, 0xe5, 0x80, 0x56, 0x5d, 0x0c, 0xf1,
	0x48, 0xf4, 0xc9, 0x2e, 0x1a, 0x84, 0x20, 0x0a, 0x0f, 0xb8, 0xae, 0x19, 0xa3, 0x7a, 0x3e, 0x24,
	0x73, 0xa7, 0xbd, 0xb3, 0xf2, 0xb6, 0x55, 0xaa, 0x1b, 0x4a, 0x49, 0x2d, 0x5b, 0xec, 0x0c, 0xb1,
	0x31, 0xd5, 0x61, 0x23, 0xbf, 0x6d, 0xad, 0x19, 0x8a, 0xb3, 0x5f, 0x6d, 0x77, 0xbb, 0xd3, 0xa6,
	0x23, 0xcb, 0x65, 0x8b, 0xf9, 0x59, 0x7b, 0xda, 0x8e, 0x9e, 0xb5, 0xb5, 0x5e, 0xc3, 0x36, 0x91,
	0xe4, 0x88, 0xe4, 0x4c, 0xb7, 0xe4, 0x2a, 0xc1, 0x10, 0xd5, 0xc8, 0x3f, 0x1e, 0x86, 0x6c, 0x6c,
	0xd9, 0xae, 0x38, 0xd3, 0x16, 0xa7, 0x18, 0x47, 0x3f, 0x0f, 0x71, 0x27, 0x84, 0xcb, 0xd8, 0xb2,
	0xd5, 0x9a, 0x4c, 0xb2, 0x20, 0x3b, 0xd7, 0x67, 0x3b, 0x02, 0xd2, 0xa8, 0xac, 0x69, 0xd7, 0x3c,
	0x70, 0x46, 0x85, 0x49, 0x0f, 0xdd, 0x17, 0xd1, 0xa9, 0xd7, 0x8b, 0xe8, 0x80, 0x34, 0xe1, 0x51,
	0xf4, 0x84, 0x75, 0x19, 0xa6, 0xbc, 0xa6, 0xfc, 0xb1, 0xfd, 0xde, 0xab, 0xc5, 0x76, 0x40, 0x3a,
	0xe1, 0xd1, 0xf2, 0x06, 0xf8, 0x0d, 0x18, 0x73, 0x03, 0xdc, 0xe7, 0x16, 0xbe, 0xaf, 0x5b, 0x18,
	0x4a, 0xf1, 0x79, 0x66, 0x19, 0xc6, 0x5b, 0xa1, 0xee, 0x53, 0x3a, 0xd7, 0x57, 0x69, 0xcc, 0xe5,
	0xf8, 0xa4, 0x2e, 0x83, 0xd7, 0x25, 0x9e, 0xc8, 0x17, 0xfc, 0x91, 0x1f, 0x90, 0xc6, 0x3d, 0xb8,
	0x83, 0xf0, 0xd7, 0x61, 0xda, 0xcb, 0xef, 0x38, 0x03, 0xf3, 0xaf, 0x77, 0x06, 0x02, 0x12, 0xeb,
	0x11, 0xf5, 0x1f, 0x84, 0xf3, 0x30, 0x42, 0x72, 0xa3, 0xa6, 0x97, 0xea, 0xaa, 0x61, 0xb1, 0xe9,
	0xbe, 0x6b, 0x26, 0xc9, 0x51, 0xd3, 0xd7, 0x54, 0xc3, 0x3a, 0x60, 0xaa, 0x94, 0x99, 0x39, 0x02,
	0x53, 0x25, 0xcc, 0x4f, 0xfc, 0x91, 0xe8, 0x3d, 0x81, 0xe2, 0xd1, 0x4e, 0xa0, 0xdf, 0x7d, 0x07,
	0xc7, 0x70, 0xc3, 0xef, 0xbe, 0x8e, 0xb3, 0x98, 0x7b, 0xd5, 0xb3, 0x18, 0x90, 0x26, 0xfd, 0x66,
	0x0e, 0x0e, 0xa4, 0x5b, 0x53, 0x6c, 0x53, 0xae, 0x54, 0x54, 0x85, 0xbd, 0xd4, 0x67, 0xf1, 0x41,
	0xb2, 0xf8, 0x7b, 0x14, 0xc9, 0x5c, 0x86, 0x51, 0x42, 0x54, 0x8c, 0x36, 0xf9, 0x72, 0x5f, 0x72,
	0xd4, 0x21, 0x2b, 0x46, 0x07, 0x7f, 0xab, 0x7c, 0xc0, 0xbf, 0xf2, 0xad, 0xfc, 0x8f, 0xca, 0x6d,
	0xfe, 0x7d, 0x18, 0x91, 0x0d, 0x43, 0x53, 0x15, 0x37, 0xc8, 0x3f, 0x20, 0x64, 0xa1, 0x6f, 0x01,
	0x16, 0xf2, 0x1e, 0x86, 0xe7, 0x6c, 0x06, 0x25, 0x9f, 0x16, 0x53, 0x81, 0x31, 0xd2, 0x79, 0x29,
	0xba, 0xd3, 0x1b, 0x98, 0x76, 0xc9, 0x94, 0x6b, 0x55, 0xcc, 0xe6, 0x8f, 0x62, 0xa2, 0xe8, 0x12,
	0x8b, 0xba, 0x69, 0xfb, 0x4c, 0x1c, 0x37, 0x3c, 0x23, 0x92, 0x23, 0xc8, 0x48, 0x10, 0xa5, 0x27,
	0x63, 0x53, 0xb6, 0x95, 0x0d, 0x6c, 0xb2, 0x45, 0x62, 0xe1, 0x74, 0xaf, 0x83, 0x71, 0x9b, 0x42,
	0x88, 0xe4, 0xc8, 0x93, 0x5d, 0x14, 0x82, 0x00, 0x0a, 0x3b, 0xd2, 0xd2, 0x88, 0xe6, 0x19, 0xbf,
	0xf8, 0x62, 0xf8, 0x8b, 0x06, 0xe2, 0x60, 0x06, 0x06, 0x9d, 0xde, 0xc2, 0x62, 0xc6, 0x32, 0x7c,
	0x26, 0xcd, 0x8b, 0x69, 0x3e, 0x97, 0xe6, 0x17, 0xd3, 0xfc, 0xf9, 0x34, 0x9f, 0xc9, 0x7d, 0xd9,
	0x40, 0xbb, 0xc3, 0x30, 0x09, 0x21, 0xe7, 0xc0, 0x4e, 0x8f, 0x42, 0xb4, 0xd5, 0x9d, 0x09, 0xce,
	0x41, 0x87, 0x1f, 0x41, 0xc4, 0xe1, 0x26, 0x68, 0xdb, 0x91, 0x2a, 0xc0, 0x07, 0x30, 0x42, 0xbb,
	0x36, 0x31, 0x74, 0x0d, 0xd7, 0x76, 0x20, 0xe6, 0xf6, 0x65, 0xe2, 0x60, 0xde, 0xf9, 0x03, 0x89,
	0xce, 0xce, 0x4b, 0x8c, 0x2d, 0x93, 0xe7, 0x84, 0xdb, 0x31, 0xc1, 0xaf, 0x83, 0x30, 0x44, 0x0b,
	0x6a, 0xea, 0xbf, 0x01, 0xf8, 0x4f, 0x00, 0x18, 0x5f, 0x2f, 0x23, 0x06, 0xf3, 0xb5, 0x1d, 0x10,
	0xe0, 0x64, 0x77, 0x9b, 0x22, 0xd0, 0xdf, 0xd8, 0x4a, 0x8e, 0xc6, 0x83, 0xa9, 0xc8, 0x72, 0x31,
	0x51, 0x74, 0x5f, 0xc0, 0x72, 0x1b, 0xef, 0xcb, 0xcc, 0x82, 0x89, 0x2b, 0x3f, 0x4e, 0xff, 0x94,
	0x19, 0x99, 0x06, 0x0a, 0x4d, 0x38, 0xc9, 0x78, 0x06, 0xd8, 0xc3, 0xc0, 0x71, 0x04, 0xef, 0x76,
	0x36, 0x19, 0xe2, 0xc4, 0x9a, 0x2a, 0x27, 0x96, 0xc9, 0xbb, 0xc4, 0x72, 0xcd, 0xc6, 0x66, 0x45,
	0x56, 0xb0, 0x05, 0x73, 0x5d, 0xed, 0x84, 0x78, 0xc2, 0x41, 0xde, 0xa5, 0x2f, 0xbd, 0xd0, 0xd3,
	0xdd, 0x8d, 0x03, 0x13, 0x99, 0x1e, 0x6e, 0x27, 0x49, 0x98, 0x3c, 0xa4, 0x47, 0x80, 0x39, 0x98,
	0xea, 0xae, 0xea, 0x02, 0xfd, 0x9b, 0x1c, 0x89, 0x07, 0x53, 0xe1, 0xfc, 0xc7, 0xab, 0x89, 0xb5,
	0xe2, 0x55, 0x0b, 0x44, 0x38, 0xdd, 0xb3, 0x60, 0x0b, 0xed, 0x9f, 0xd4, 0x6f, 0x0e, 0x81, 0x9e,
	0x7a, 0x0b, 0x7e, 0x15, 0x82, 0x88, 0x27, 0xdb, 0xa7, 0xfe, 0x15, 0x84, 0x7f, 0x06, 0x61, 0xb2,
	0xbb, 0x34, 0xd3, 0x6d, 0xc9, 0x42, 0xe2, 0x90, 0x82, 0xdb, 0x67, 0x6f, 0x56, 0xfd, 0xa4, 0x23,
	0x6c, 0xd0, 0x19, 0x38, 0xd5, 0x97, 0x11, 0x47, 0xc0, 0xf7, 0xac, 0x94, 0x87, 0x6d, 0x95, 0xd0,
	0xbb, 0x1c, 0x1e, 0xba, 0x5f, 0xef, 0x1c, 0x52, 0xf3, 0xfc, 0x9b, 0x36, 0xd3, 0xaf, 0xb2, 0x41,
	0xc2, 0x5f, 0x86, 0xc4, 0x78, 0x5e, 0xd3, 0xda, 0xb6, 0xd6, 0x96, 0x8b, 0x4e, 0x54, 0xf8, 0xca,
	0x8d, 0x38, 0xea, 0x20, 0xdc, 0xc9, 0x13, 0x80, 0x00, 0xdc, 0x21, 0x55, 0xa5, 0x77, 0x04, 0x2c,
	0xc1, 0x3b, 0x87, 0xd7, 0x8a, 0x7e, 0x61, 0xf0, 0x5b, 0x04, 0x23, 0x6e, 0x36, 0x4d, 0x38, 0x69,
	0x25, 0xf5, 0x08, 0xc1, 0x67, 0xad, 0x83, 0xe9, 0xe6, 0x64, 0x1a, 0x01, 0x27, 0xba, 0x72, 0xbd,
	0x18, 0xbc, 0x77, 0xb5, 0xd8, 0x7a, 0xef, 0xc9, 0xe1, 0x62, 0xf0, 0xa3, 0x6b, 0x45, 0x38, 0x03,
	0x53, 0xde, 0x7c, 0x2a, 0x78, 0x1f, 0x92, 0xa1, 0x78, 0x30, 0x8d, 0x60, 0xa2, 0x67, 0x8a, 0x85,
	0xb3, 0x00, 0x24, 0xdb, 0x25, 0x7e, 0x88, 0x77, 0xac, 0x38, 0x2a, 0x9c, 0x00, 0xc6, 0x97, 0x21,
	0x85, 0x07, 0xce, 0xfb, 0x60, 0xe1, 0x07, 0x10, 0xa5, 0x17, 0xaf, 0x92, 0xb2, 0xa1, 0x3b, 0x57,
	0xb2, 0xf1, 0xbd, 0x06, 0x8a, 0xec, 0x37, 0x10, 0x34, 0x1b, 0x28, 0x9c, 0xc9, 0xf0, 0x19, 0x91,
	0xcf, 0x64, 0x0b, 0x4b, 0x10, 0x75, 0x4f, 0x87, 0x0b, 0x3b, 0xbb, 0xd7, 0x40, 0x13, 0xfb, 0x0d,
	0x34, 0xde, 0x6c, 0xa0, 0x69, 0x31, 0xc3, 0x8b, 0x22, 0x2f, 0x66, 0x79, 0x31, 0xc7, 0x8b, 0x0b,
	0xbc, 0xb8, 0xc8, 0x8b, 0x4b, 0xbc, 0x78, 0x9e, 0xcf, 0xa6, 0x0b, 0x57, 0x80, 0xf1, 0x3a, 0xd5,
	0x65, 0xcf, 0xed, 0x35, 0xd0, 0xdc, 0x7e, 0x03, 0xcd, 0x36, 0x1b, 0xe8, 0x54, 0x4e, 0xe4, 0x73,
	0x59, 0x3e, 0x97, 0xe3, 0x73, 0x0b, 0x7c, 0x6e, 0x91, 0xcf, 0x2d, 0xf1, 0xb9, 0xf3, 0x7c, 0xee,
	0x02, 0xbf, 0x90, 0xe6, 0x17, 0xc4, 0x02, 0x0f, 0x31, 0xd7, 0x25, 0x2d, 0xf2, 0xf4, 0x5e, 0x03,
	0x5d, 0xda, 0x6f, 0xa0, 0xf7, 0x9b, 0x0d, 0x14, 0x5b, 0xcc, 0xf0, 0x8b, 0x22, 0xbf, 0x98, 0xe5,
	0x17, 0x73, 0xfc, 0xe2, 0xc2, 0x4a, 0x28, 0x0c, 0xf1, 0xc8, 0x4a, 0x28, 0x3c, 0x1e, 0x9f, 0x58,
	0x09, 0x85, 0x4f, 0xc5, 0xb9, 0x95, 0x50, 0x78, 0x36, 0x3e, 0xb7, 0x12, 0x0a, 0x67, 0xe3, 0xb9,
	0x95, 0x50, 0xf8, 0xfd, 0xf8, 0xa5, 0xe4, 0xe7, 0x08, 0x92, 0x87, 0xdf, 0xcb, 0x5b, 0x2d, 0x2d,
	0xf3, 0x19, 0x0c, 0x3a, 0xd7, 0x4c, 0x8b, 0x45, 0x89, 0xe0, 0x6c, 0x44, 0xbc, 0x7e, 0xd4, 0xcb,
	0x6f, 0xff, 0x2b, 0x7f, 0x21, 0xf1, 0xe7, 0xbf, 0xef, 0x05, 0x87, 0x1e, 0xa3, 0x60, 0xfc, 0x11,
	0x72, 0x7e, 0x0e, 0x3e, 0x46, 0x81, 0x34, 0x6a, 0x7e, 0xf5, 0x97, 0xe0, 0xd0, 0xe3, 0x5d, 0x14,
	0x88, 0x23, 0x89, 0x9a, 0x4d, 0x7e, 0x33, 0x04, 0xb1, 0x1b, 0x9a, 0xbe, 0x2e, 0x6b, 0xab, 0x06,
	0x56, 0xc8, 0x94, 0xb2, 0x30, 0x4c, 0xca, 0x45, 0x49, 0xd6, 0x34, 0x36, 0xd0, 0xf7, 0x2a, 0x1f,
	0x26, 0xc0, 0xbc, 0xa6, 0x31, 0x77, 0x48, 0x6c, 0xe9, 0xdb, 0xb8, 0xdc, 0xbe, 0xb7, 0x05, 0x09,
	0xf5, 0x54, 0x07, 0xf5, 0xa0, 0x5f, 0xa7, 0xe5, 0xf6, 0x9b, 0x06, 0x1a, 0xb8, 0x39, 0x20, 0xc5,
	0x5c, 0x76, 0xeb, 0x1a, 0xf7, 0x09, 0x8c, 0xb7, 0xf4, 0x7c, 0xcd, 0x71, 0xe8, 0x55, 0x44, 0xc7,
	0x5c, 0x09, 0x5f, 0xaf, 0x9c, 0x81, 0xb0, 0x53, 0x1b, 0xc9, 0xea, 0x06, 0xfb, 0xae, 0xee, 0x98,
	0x83, 0x73, 0x16, 0x77, 0x0b, 0x62, 0x65, 0x5c, 0x53, 0x3d, 0x6b, 0x1b, 0x7a, 0x95, 0x69, 0x44,
	0x29, 0xb9, 0xb5, 0xb4, 0x35, 0x18, 0x73, 0xd5, 0x7c, 0x2b, 0x3b, 0xf6, 0x2a, 0x92, 0x0c, 0x55,
	0xe8, 0xb8, 0x69, 0x0d, 0x3b, 0x7b, 0x4a, 0xef, 0x56, 0x61, 0xa2, 0xb6, 0xf2, 0xe6, 0xe1, 0xd4,
	0x32, 0xed, 0xec, 0xb6, 0xe9, 0x3e, 0x33, 0xbf, 0x44, 0x10, 0xb3, 0x70, 0x75, 0x13, 0xd7, 0x6c,
	0x57, 0x81, 0x1d, 0x26, 0x06, 0xdf, 0xed, 0x30, 0xd8, 0xfe, 0x54, 0x43, 0xb0, 0x54, 0x95, 0x2c,
	0x24, 0xfb, 0xb2, 0x81, 0xd0, 0xd3, 0x5d, 0xf4, 0x5e, 0x2a, 0xa8, 0x98, 0x76, 0xea, 0x98, 0x65,
	0xcb, 0x55, 0xb5, 0x56, 0x4d, 0x85, 0x0c, 0x53, 0x2f, 0xa7, 0x46, 0x2c, 0xbd, 0x62, 0xaf, 0xcb,
	0xb5, 0x07, 0xa5, 0x4d, 0xac, 0xa4, 0x8e, 0x55, 0x70, 0xd9, 0x94, 0x37, 0x0d, 0x29, 0x6a, 0x79,
	0x75, 0x18, 0x0c, 0x23, 0xba, 0x81, 0xcd, 0x52, 0x55, 0x29, 0x59, 0x06, 0x56, 0xd8, 0x32, 0x99,
	0xc2, 0xc5, 0xa3, 0xae, 0xf9, 0xae, 0x81, 0x4d, 0x7f, 0xe8, 0xb7, 0x2f, 0x4a, 0x12, 0x38, 0xc2,
	0x37, 0x14, 0x67, 0xe0, 0xe2, 0xd9, 0x2f, 0x1a, 0x28, 0x09, 0xc3, 0x10, 0x72, 0xdc, 0xc1, 0xa0,
	0x0c, 0x4c, 0x40, 0xdc, 0x5d, 0x50, 0xa2, 0x7d, 0xa1, 0x41, 0x17, 0x0a, 0xb3, 0x10, 0x21, 0xfe,
	0x77, 0x13, 0xc8, 0xd4, 0x5e, 0x03, 0x05, 0x9c, 0x0b, 0x6b, 0xb3, 0x81, 0xa2, 0x22, 0x9f, 0xe5,
	0x73, 0xfc, 0x02, 0xbf, 0xc8, 0x2f, 0xf1, 0xe7, 0x57, 0x42, 0x61, 0x14, 0x0f, 0x24, 0xff, 0x86,
	0x80, 0xe9, 0x9e, 0x03, 0x73, 0xaf, 0xf3, 0x4b, 0x61, 0xb0, 0xc7, 0xed, 0xc1, 0xff, 0x8d, 0x70,
	0xc2, 0xff, 0x8d, 0xb0, 0xbd, 0x88, 0x83, 0xcf, 0x84, 0x4c, 0x05, 0x8e, 0xb7, 0x3a, 0x5f, 0xb5,
	0x55, 0x43, 0xd9, 0xc0, 0x11, 0xb4, 0x4f, 0x3e, 0x7d, 0xd8, 0xcd, 0x6c, 0x59, 0x88, 0xbb, 0x23,
	0xed, 0xb2, 0x9c, 0xfc, 0x7c, 0x10, 0x62, 0x57, 0x4d, 0x2c, 0xdb, 0xf8, 0xcd, 0xf2, 0xc9, 0xcd,
	0xd7, 0xcb, 0x27, 0x3d, 0x32, 0x89, 0xf4, 0x06, 0x99, 0xe4, 0xff, 0x98, 0x43, 0xae, 0xbf, 0x56,
	0x0e, 0xe9, 0xce, 0x1e, 0xc5, 0xd7, 0xcf, 0x1e, 0xdf, 0x7d, 0xde, 0xb8, 0xf3, 0x86, 0x69, 0xa3,
	0x23, 0x03, 0x5c, 0x3c, 0xfe, 0xe5, 0xe5, 0x8e, 0xea, 0x55, 0xe0, 0xfc, 0xa7, 0x70, 0xf4, 0x17,
	0xff, 0x46, 0xde, 0x17, 0xee, 0xd9, 0xfb, 0xc3, 0x20, 0x8c, 0x4a, 0xd8, 0xd0, 0x64, 0xe5, 0x6d,
	0x9c, 0xbe, 0x8d, 0xd3, 0xef, 0x6f, 0x9c, 0xfe, 0x7e, 0x10, 0x22, 0x37, 0xb0, 0xfd, 0x36, 0x46,
	0xdf, 0xc6, 0xe8, 0xf7, 0x35, 0x46, 0x0b, 0x4f, 0xd0, 0xfe, 0x73, 0x6e, 0xe0, 0xd9, 0x73, 0x6e,
	0xe0, 0xe5, 0x73, 0x0e, 0x3d, 0x6a, 0x72, 0xe8, 0x8f, 0x4d, 0x0e, 0xfd, 0xb5, 0xc9, 0xa1, 0xfd,
	0x26, 0x87, 0x9e, 0x35, 0x39, 0xf4, 0x55, 0x93, 0x43, 0x5f, 0x37, 0xb9, 0x81, 0x97, 0x4d, 0x0e,
	0xfd, 0xe6, 0x05, 0x37, 0xb0, 0xf7, 0x82, 0x43, 0xfb, 0x2f, 0xb8, 0x81, 0x67, 0x2f, 0xb8, 0x81,
	0xfb, 0x3f, 0xa9, 0xea, 0xc6, 0x83, 0xaa, 0x50, 0xd7, 0x35, 0x1b, 0x9b, 0xa6, 0x2c, 0x6c, 0x59,
	0xf3, 0xe4, 0x47, 0x45, 0x37, 0x37, 0xcf, 0x19, 0xa6, 0x5e, 0x57, 0xcb, 0xd8, 0x3c, 0xd7, 0x1a,
	0x9e, 0x37, 0xd6, 0xab, 0xfa, 0x3c, 0xfe, 0xd4, 0x76, 0xff, 0xfd, 0xfa, 0x2d, 0xff, 0x1c, 0x5f,
	0x1f, 0x22, 0xd7, 0xd6, 0xec, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x81, 0xd4, 0xb1, 0x4d,
	0x1f, 0x00, 0x00,
}

func (this *ServiceActionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceActionType)
	if !ok {
		that2, ok := that.(ServiceActionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NfvService.Equal(that1.NfvService) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	if !this.AdvancedAction.Equal(that1.AdvancedAction) {
		return false
	}
	if that1.SourceChoice == nil {
		if this.SourceChoice != nil {
			return false
		}
	} else if this.SourceChoice == nil {
		return false
	} else if !this.SourceChoice.Equal(that1.SourceChoice) {
		return false
	}
	if that1.DestinationChoice == nil {
		if this.DestinationChoice != nil {
			return false
		}
	} else if this.DestinationChoice == nil {
		return false
	} else if !this.DestinationChoice.Equal(that1.DestinationChoice) {
		return false
	}
	if that1.TrafficChoice == nil {
		if this.TrafficChoice != nil {
			return false
		}
	} else if this.TrafficChoice == nil {
		return false
	} else if !this.TrafficChoice.Equal(that1.TrafficChoice) {
		return false
	}
	if !this.LabelMatcher.Equal(that1.LabelMatcher) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_Deny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_Deny)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_Deny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deny.Equal(that1.Deny) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_Allow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_Allow)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_Allow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Allow.Equal(that1.Allow) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_InsertService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_InsertService)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_InsertService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsertService.Equal(that1.InsertService) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllSources)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllSources.Equal(that1.AllSources) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_SourcePrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_SourcePrefixList)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_SourcePrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePrefixList.Equal(that1.SourcePrefixList) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_SourceIpPrefixSet)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_SourceIpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpPrefixSet.Equal(that1.SourceIpPrefixSet) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_InsideSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_InsideSources)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_InsideSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideSources.Equal(that1.InsideSources) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_OutsideSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_OutsideSources)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_OutsideSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideSources.Equal(that1.OutsideSources) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_SourceNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_SourceNamespace)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_SourceNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceNamespace != that1.SourceNamespace {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_SourceLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_SourceLabelSelector)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_SourceLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceLabelSelector.Equal(that1.SourceLabelSelector) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_SourceAwsVpcIds)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_SourceAwsVpcIds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceAwsVpcIds.Equal(that1.SourceAwsVpcIds) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceAwsSubnetIds.Equal(that1.SourceAwsSubnetIds) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllDestinations)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllDestinations.Equal(that1.AllDestinations) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_DestinationPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_DestinationPrefixList)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_DestinationPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPrefixList.Equal(that1.DestinationPrefixList) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationIpPrefixSet.Equal(that1.DestinationIpPrefixSet) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_InsideDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_InsideDestinations)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_InsideDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideDestinations.Equal(that1.InsideDestinations) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_OutsideDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_OutsideDestinations)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_OutsideDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideDestinations.Equal(that1.OutsideDestinations) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_DestinationNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_DestinationNamespace)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_DestinationNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationNamespace != that1.DestinationNamespace {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_DestinationLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_DestinationLabelSelector)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_DestinationLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationLabelSelector.Equal(that1.DestinationLabelSelector) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllSloVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllSloVips)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllSloVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllSloVips.Equal(that1.AllSloVips) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllSliVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllSliVips)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllSliVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllSliVips.Equal(that1.AllSliVips) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationAwsVpcIds.Equal(that1.DestinationAwsVpcIds) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationAwsSubnetIds.Equal(that1.DestinationAwsSubnetIds) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllTraffic)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllTraffic.Equal(that1.AllTraffic) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllTcpTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllTcpTraffic)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllTcpTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllTcpTraffic.Equal(that1.AllTcpTraffic) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_AllUdpTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_AllUdpTraffic)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_AllUdpTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllUdpTraffic.Equal(that1.AllUdpTraffic) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_Applications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_Applications)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_Applications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Applications.Equal(that1.Applications) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleType_ProtocolPortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleType_ProtocolPortRange)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleType_ProtocolPortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolPortRange.Equal(that1.ProtocolPortRange) {
		return false
	}
	return true
}
func (this *EnhancedFirewallPolicyRuleListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnhancedFirewallPolicyRuleListType)
	if !ok {
		that2, ok := that.(EnhancedFirewallPolicyRuleListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if !this.SegmentPolicy.Equal(that1.SegmentPolicy) {
		return false
	}
	if !this.OperGcSpec.Equal(that1.OperGcSpec) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowedSources)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedSources.Equal(that1.AllowedSources) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowedDestinations)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedDestinations.Equal(that1.AllowedDestinations) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DenyAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DenyAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_DenyAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAll.Equal(that1.DenyAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DeniedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DeniedSources)
	if !ok {
		that2, ok := that.(GlobalSpecType_DeniedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedSources.Equal(that1.DeniedSources) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DeniedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DeniedDestinations)
	if !ok {
		that2, ok := that.(GlobalSpecType_DeniedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedDestinations.Equal(that1.DeniedDestinations) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RuleList)
	if !ok {
		that2, ok := that.(GlobalSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *OperGlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperGlobalSpecType)
	if !ok {
		that2, ok := that.(OperGlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NfvService) != len(that1.NfvService) {
		return false
	}
	for i := range this.NfvService {
		if !this.NfvService[i].Equal(that1.NfvService[i]) {
			return false
		}
	}
	if len(this.NetworkInterface) != len(that1.NetworkInterface) {
		return false
	}
	for i := range this.NetworkInterface {
		if !this.NetworkInterface[i].Equal(that1.NetworkInterface[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if !this.SegmentPolicy.Equal(that1.SegmentPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowAll)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowedSources)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedSources.Equal(that1.AllowedSources) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowedDestinations)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedDestinations.Equal(that1.AllowedDestinations) {
		return false
	}
	return true
}
func (this *CreateSpecType_DenyAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DenyAll)
	if !ok {
		that2, ok := that.(CreateSpecType_DenyAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAll.Equal(that1.DenyAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_DeniedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DeniedSources)
	if !ok {
		that2, ok := that.(CreateSpecType_DeniedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedSources.Equal(that1.DeniedSources) {
		return false
	}
	return true
}
func (this *CreateSpecType_DeniedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DeniedDestinations)
	if !ok {
		that2, ok := that.(CreateSpecType_DeniedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedDestinations.Equal(that1.DeniedDestinations) {
		return false
	}
	return true
}
func (this *CreateSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RuleList)
	if !ok {
		that2, ok := that.(CreateSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if !this.SegmentPolicy.Equal(that1.SegmentPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowedSources)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedSources.Equal(that1.AllowedSources) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowedDestinations)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedDestinations.Equal(that1.AllowedDestinations) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DenyAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DenyAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DenyAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAll.Equal(that1.DenyAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DeniedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DeniedSources)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DeniedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedSources.Equal(that1.DeniedSources) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DeniedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DeniedDestinations)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DeniedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedDestinations.Equal(that1.DeniedDestinations) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RuleList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if !this.SegmentPolicy.Equal(that1.SegmentPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowAll)
	if !ok {
		that2, ok := that.(GetSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowedSources)
	if !ok {
		that2, ok := that.(GetSpecType_AllowedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedSources.Equal(that1.AllowedSources) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowedDestinations)
	if !ok {
		that2, ok := that.(GetSpecType_AllowedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedDestinations.Equal(that1.AllowedDestinations) {
		return false
	}
	return true
}
func (this *GetSpecType_DenyAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DenyAll)
	if !ok {
		that2, ok := that.(GetSpecType_DenyAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyAll.Equal(that1.DenyAll) {
		return false
	}
	return true
}
func (this *GetSpecType_DeniedSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DeniedSources)
	if !ok {
		that2, ok := that.(GetSpecType_DeniedSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedSources.Equal(that1.DeniedSources) {
		return false
	}
	return true
}
func (this *GetSpecType_DeniedDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DeniedDestinations)
	if !ok {
		that2, ok := that.(GetSpecType_DeniedDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeniedDestinations.Equal(that1.DeniedDestinations) {
		return false
	}
	return true
}
func (this *GetSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RuleList)
	if !ok {
		that2, ok := that.(GetSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *ServiceActionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&enhanced_firewall_policy.ServiceActionType{")
	if this.NfvService != nil {
		s = append(s, "NfvService: "+fmt.Sprintf("%#v", this.NfvService)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnhancedFirewallPolicyRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 35)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	if this.AdvancedAction != nil {
		s = append(s, "AdvancedAction: "+fmt.Sprintf("%#v", this.AdvancedAction)+",\n")
	}
	if this.SourceChoice != nil {
		s = append(s, "SourceChoice: "+fmt.Sprintf("%#v", this.SourceChoice)+",\n")
	}
	if this.DestinationChoice != nil {
		s = append(s, "DestinationChoice: "+fmt.Sprintf("%#v", this.DestinationChoice)+",\n")
	}
	if this.TrafficChoice != nil {
		s = append(s, "TrafficChoice: "+fmt.Sprintf("%#v", this.TrafficChoice)+",\n")
	}
	if this.LabelMatcher != nil {
		s = append(s, "LabelMatcher: "+fmt.Sprintf("%#v", this.LabelMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnhancedFirewallPolicyRuleType_Deny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Deny{` +
		`Deny:` + fmt.Sprintf("%#v", this.Deny) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_Allow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Allow{` +
		`Allow:` + fmt.Sprintf("%#v", this.Allow) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_InsertService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsertService{` +
		`InsertService:` + fmt.Sprintf("%#v", this.InsertService) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSources{` +
		`AllSources:` + fmt.Sprintf("%#v", this.AllSources) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourcePrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourcePrefixList{` +
		`SourcePrefixList:` + fmt.Sprintf("%#v", this.SourcePrefixList) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceIpPrefixSet{` +
		`SourceIpPrefixSet:` + fmt.Sprintf("%#v", this.SourceIpPrefixSet) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_InsideSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsideSources{` +
		`InsideSources:` + fmt.Sprintf("%#v", this.InsideSources) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_OutsideSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_OutsideSources{` +
		`OutsideSources:` + fmt.Sprintf("%#v", this.OutsideSources) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceNamespace{` +
		`SourceNamespace:` + fmt.Sprintf("%#v", this.SourceNamespace) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceLabelSelector{` +
		`SourceLabelSelector:` + fmt.Sprintf("%#v", this.SourceLabelSelector) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceAwsVpcIds{` +
		`SourceAwsVpcIds:` + fmt.Sprintf("%#v", this.SourceAwsVpcIds) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds{` +
		`SourceAwsSubnetIds:` + fmt.Sprintf("%#v", this.SourceAwsSubnetIds) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllDestinations{` +
		`AllDestinations:` + fmt.Sprintf("%#v", this.AllDestinations) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationPrefixList{` +
		`DestinationPrefixList:` + fmt.Sprintf("%#v", this.DestinationPrefixList) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet{` +
		`DestinationIpPrefixSet:` + fmt.Sprintf("%#v", this.DestinationIpPrefixSet) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_InsideDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_InsideDestinations{` +
		`InsideDestinations:` + fmt.Sprintf("%#v", this.InsideDestinations) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_OutsideDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_OutsideDestinations{` +
		`OutsideDestinations:` + fmt.Sprintf("%#v", this.OutsideDestinations) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationNamespace{` +
		`DestinationNamespace:` + fmt.Sprintf("%#v", this.DestinationNamespace) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationLabelSelector{` +
		`DestinationLabelSelector:` + fmt.Sprintf("%#v", this.DestinationLabelSelector) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllSloVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSloVips{` +
		`AllSloVips:` + fmt.Sprintf("%#v", this.AllSloVips) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllSliVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllSliVips{` +
		`AllSliVips:` + fmt.Sprintf("%#v", this.AllSliVips) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds{` +
		`DestinationAwsVpcIds:` + fmt.Sprintf("%#v", this.DestinationAwsVpcIds) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds{` +
		`DestinationAwsSubnetIds:` + fmt.Sprintf("%#v", this.DestinationAwsSubnetIds) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllTraffic{` +
		`AllTraffic:` + fmt.Sprintf("%#v", this.AllTraffic) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllTcpTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllTcpTraffic{` +
		`AllTcpTraffic:` + fmt.Sprintf("%#v", this.AllTcpTraffic) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllUdpTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_AllUdpTraffic{` +
		`AllUdpTraffic:` + fmt.Sprintf("%#v", this.AllUdpTraffic) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_Applications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_Applications{` +
		`Applications:` + fmt.Sprintf("%#v", this.Applications) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_ProtocolPortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.EnhancedFirewallPolicyRuleType_ProtocolPortRange{` +
		`ProtocolPortRange:` + fmt.Sprintf("%#v", this.ProtocolPortRange) + `}`}, ", ")
	return s
}
func (this *EnhancedFirewallPolicyRuleListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&enhanced_firewall_policy.EnhancedFirewallPolicyRuleListType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&enhanced_firewall_policy.GlobalSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	if this.SegmentPolicy != nil {
		s = append(s, "SegmentPolicy: "+fmt.Sprintf("%#v", this.SegmentPolicy)+",\n")
	}
	if this.OperGcSpec != nil {
		s = append(s, "OperGcSpec: "+fmt.Sprintf("%#v", this.OperGcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_AllowedSources{` +
		`AllowedSources:` + fmt.Sprintf("%#v", this.AllowedSources) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_AllowedDestinations{` +
		`AllowedDestinations:` + fmt.Sprintf("%#v", this.AllowedDestinations) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DenyAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_DenyAll{` +
		`DenyAll:` + fmt.Sprintf("%#v", this.DenyAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DeniedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_DeniedSources{` +
		`DeniedSources:` + fmt.Sprintf("%#v", this.DeniedSources) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DeniedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_DeniedDestinations{` +
		`DeniedDestinations:` + fmt.Sprintf("%#v", this.DeniedDestinations) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GlobalSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *OperGlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&enhanced_firewall_policy.OperGlobalSpecType{")
	if this.NfvService != nil {
		s = append(s, "NfvService: "+fmt.Sprintf("%#v", this.NfvService)+",\n")
	}
	if this.NetworkInterface != nil {
		s = append(s, "NetworkInterface: "+fmt.Sprintf("%#v", this.NetworkInterface)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&enhanced_firewall_policy.CreateSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	if this.SegmentPolicy != nil {
		s = append(s, "SegmentPolicy: "+fmt.Sprintf("%#v", this.SegmentPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_AllowedSources{` +
		`AllowedSources:` + fmt.Sprintf("%#v", this.AllowedSources) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_AllowedDestinations{` +
		`AllowedDestinations:` + fmt.Sprintf("%#v", this.AllowedDestinations) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DenyAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_DenyAll{` +
		`DenyAll:` + fmt.Sprintf("%#v", this.DenyAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DeniedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_DeniedSources{` +
		`DeniedSources:` + fmt.Sprintf("%#v", this.DeniedSources) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DeniedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_DeniedDestinations{` +
		`DeniedDestinations:` + fmt.Sprintf("%#v", this.DeniedDestinations) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.CreateSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&enhanced_firewall_policy.ReplaceSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	if this.SegmentPolicy != nil {
		s = append(s, "SegmentPolicy: "+fmt.Sprintf("%#v", this.SegmentPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_AllowedSources{` +
		`AllowedSources:` + fmt.Sprintf("%#v", this.AllowedSources) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_AllowedDestinations{` +
		`AllowedDestinations:` + fmt.Sprintf("%#v", this.AllowedDestinations) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DenyAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_DenyAll{` +
		`DenyAll:` + fmt.Sprintf("%#v", this.DenyAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DeniedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_DeniedSources{` +
		`DeniedSources:` + fmt.Sprintf("%#v", this.DeniedSources) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DeniedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_DeniedDestinations{` +
		`DeniedDestinations:` + fmt.Sprintf("%#v", this.DeniedDestinations) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.ReplaceSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&enhanced_firewall_policy.GetSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	if this.SegmentPolicy != nil {
		s = append(s, "SegmentPolicy: "+fmt.Sprintf("%#v", this.SegmentPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_AllowedSources{` +
		`AllowedSources:` + fmt.Sprintf("%#v", this.AllowedSources) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_AllowedDestinations{` +
		`AllowedDestinations:` + fmt.Sprintf("%#v", this.AllowedDestinations) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DenyAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_DenyAll{` +
		`DenyAll:` + fmt.Sprintf("%#v", this.DenyAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DeniedSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_DeniedSources{` +
		`DeniedSources:` + fmt.Sprintf("%#v", this.DeniedSources) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DeniedDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_DeniedDestinations{` +
		`DeniedDestinations:` + fmt.Sprintf("%#v", this.DeniedDestinations) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&enhanced_firewall_policy.GetSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServiceActionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceActionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceActionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NfvService != nil {
		{
			size, err := m.NfvService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnhancedFirewallPolicyRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyRuleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LabelMatcher != nil {
		{
			size, err := m.LabelMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.TrafficChoice != nil {
		{
			size := m.TrafficChoice.Size()
			i -= size
			if _, err := m.TrafficChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DestinationChoice != nil {
		{
			size := m.DestinationChoice.Size()
			i -= size
			if _, err := m.DestinationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourceChoice != nil {
		{
			size := m.SourceChoice.Size()
			i -= size
			if _, err := m.SourceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvancedAction != nil {
		{
			size, err := m.AdvancedAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnhancedFirewallPolicyRuleType_Deny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_Deny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Deny != nil {
		{
			size, err := m.Deny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_Allow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_Allow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Allow != nil {
		{
			size, err := m.Allow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_InsertService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_InsertService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsertService != nil {
		{
			size, err := m.InsertService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllSources != nil {
		{
			size, err := m.AllSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_SourcePrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_SourcePrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePrefixList != nil {
		{
			size, err := m.SourcePrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpPrefixSet != nil {
		{
			size, err := m.SourceIpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_InsideSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_InsideSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideSources != nil {
		{
			size, err := m.InsideSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_OutsideSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_OutsideSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideSources != nil {
		{
			size, err := m.OutsideSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_SourceNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_SourceNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourceNamespace)
	copy(dAtA[i:], m.SourceNamespace)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceNamespace)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_SourceLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_SourceLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceLabelSelector != nil {
		{
			size, err := m.SourceLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceAwsVpcIds != nil {
		{
			size, err := m.SourceAwsVpcIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceAwsSubnetIds != nil {
		{
			size, err := m.SourceAwsSubnetIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllDestinations != nil {
		{
			size, err := m.AllDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_DestinationPrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_DestinationPrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPrefixList != nil {
		{
			size, err := m.DestinationPrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationIpPrefixSet != nil {
		{
			size, err := m.DestinationIpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_InsideDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_InsideDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideDestinations != nil {
		{
			size, err := m.InsideDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_OutsideDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_OutsideDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideDestinations != nil {
		{
			size, err := m.OutsideDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_DestinationNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_DestinationNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationNamespace)
	copy(dAtA[i:], m.DestinationNamespace)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationNamespace)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf2
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_DestinationLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_DestinationLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationLabelSelector != nil {
		{
			size, err := m.DestinationLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllSloVips) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllSloVips) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllSloVips != nil {
		{
			size, err := m.AllSloVips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllSliVips) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllSliVips) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllSliVips != nil {
		{
			size, err := m.AllSliVips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationAwsVpcIds != nil {
		{
			size, err := m.DestinationAwsVpcIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationAwsSubnetIds != nil {
		{
			size, err := m.DestinationAwsSubnetIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllTraffic != nil {
		{
			size, err := m.AllTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllTcpTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllTcpTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllTcpTraffic != nil {
		{
			size, err := m.AllTcpTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_AllUdpTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_AllUdpTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllUdpTraffic != nil {
		{
			size, err := m.AllUdpTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_Applications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_Applications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Applications != nil {
		{
			size, err := m.Applications.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleType_ProtocolPortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleType_ProtocolPortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolPortRange != nil {
		{
			size, err := m.ProtocolPortRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *EnhancedFirewallPolicyRuleListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnhancedFirewallPolicyRuleListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnhancedFirewallPolicyRuleListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperGcSpec != nil {
		{
			size, err := m.OperGcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.SegmentPolicy != nil {
		{
			size, err := m.SegmentPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedSources != nil {
		{
			size, err := m.AllowedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedDestinations != nil {
		{
			size, err := m.AllowedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DenyAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DenyAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAll != nil {
		{
			size, err := m.DenyAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DeniedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DeniedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedSources != nil {
		{
			size, err := m.DeniedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DeniedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DeniedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedDestinations != nil {
		{
			size, err := m.DeniedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *OperGlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperGlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperGlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkInterface) > 0 {
		for iNdEx := len(m.NetworkInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NfvService) > 0 {
		for iNdEx := len(m.NfvService) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NfvService[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SegmentPolicy != nil {
		{
			size, err := m.SegmentPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedSources != nil {
		{
			size, err := m.AllowedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedDestinations != nil {
		{
			size, err := m.AllowedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DenyAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DenyAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAll != nil {
		{
			size, err := m.DenyAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DeniedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DeniedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedSources != nil {
		{
			size, err := m.DeniedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DeniedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DeniedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedDestinations != nil {
		{
			size, err := m.DeniedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SegmentPolicy != nil {
		{
			size, err := m.SegmentPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedSources != nil {
		{
			size, err := m.AllowedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedDestinations != nil {
		{
			size, err := m.AllowedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DenyAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DenyAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAll != nil {
		{
			size, err := m.DenyAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DeniedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DeniedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedSources != nil {
		{
			size, err := m.DeniedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DeniedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DeniedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedDestinations != nil {
		{
			size, err := m.DeniedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SegmentPolicy != nil {
		{
			size, err := m.SegmentPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedSources != nil {
		{
			size, err := m.AllowedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedDestinations != nil {
		{
			size, err := m.AllowedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DenyAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DenyAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyAll != nil {
		{
			size, err := m.DenyAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DeniedSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DeniedSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedSources != nil {
		{
			size, err := m.DeniedSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DeniedDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DeniedDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeniedDestinations != nil {
		{
			size, err := m.DeniedDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceActionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NfvService != nil {
		l = m.NfvService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EnhancedFirewallPolicyRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	if m.AdvancedAction != nil {
		l = m.AdvancedAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SourceChoice != nil {
		n += m.SourceChoice.Size()
	}
	if m.DestinationChoice != nil {
		n += m.DestinationChoice.Size()
	}
	if m.TrafficChoice != nil {
		n += m.TrafficChoice.Size()
	}
	if m.LabelMatcher != nil {
		l = m.LabelMatcher.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EnhancedFirewallPolicyRuleType_Deny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deny != nil {
		l = m.Deny.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_Allow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allow != nil {
		l = m.Allow.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_InsertService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsertService != nil {
		l = m.InsertService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllSources != nil {
		l = m.AllSources.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_SourcePrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePrefixList != nil {
		l = m.SourcePrefixList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpPrefixSet != nil {
		l = m.SourceIpPrefixSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_InsideSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideSources != nil {
		l = m.InsideSources.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_OutsideSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideSources != nil {
		l = m.OutsideSources.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_SourceNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceNamespace)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *EnhancedFirewallPolicyRuleType_SourceLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceLabelSelector != nil {
		l = m.SourceLabelSelector.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceAwsVpcIds != nil {
		l = m.SourceAwsVpcIds.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceAwsSubnetIds != nil {
		l = m.SourceAwsSubnetIds.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllDestinations != nil {
		l = m.AllDestinations.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_DestinationPrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPrefixList != nil {
		l = m.DestinationPrefixList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationIpPrefixSet != nil {
		l = m.DestinationIpPrefixSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_InsideDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideDestinations != nil {
		l = m.InsideDestinations.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_OutsideDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideDestinations != nil {
		l = m.OutsideDestinations.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_DestinationNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationNamespace)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *EnhancedFirewallPolicyRuleType_DestinationLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationLabelSelector != nil {
		l = m.DestinationLabelSelector.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllSloVips) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllSloVips != nil {
		l = m.AllSloVips.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllSliVips) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllSliVips != nil {
		l = m.AllSliVips.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationAwsVpcIds != nil {
		l = m.DestinationAwsVpcIds.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationAwsSubnetIds != nil {
		l = m.DestinationAwsSubnetIds.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllTraffic != nil {
		l = m.AllTraffic.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllTcpTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllTcpTraffic != nil {
		l = m.AllTcpTraffic.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_AllUdpTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllUdpTraffic != nil {
		l = m.AllUdpTraffic.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_Applications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Applications != nil {
		l = m.Applications.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleType_ProtocolPortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolPortRange != nil {
		l = m.ProtocolPortRange.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnhancedFirewallPolicyRuleListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	if m.SegmentPolicy != nil {
		l = m.SegmentPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OperGcSpec != nil {
		l = m.OperGcSpec.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedSources != nil {
		l = m.AllowedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedDestinations != nil {
		l = m.AllowedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DenyAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAll != nil {
		l = m.DenyAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DeniedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedSources != nil {
		l = m.DeniedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DeniedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedDestinations != nil {
		l = m.DeniedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OperGlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NfvService) > 0 {
		for _, e := range m.NfvService {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NetworkInterface) > 0 {
		for _, e := range m.NetworkInterface {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	if m.SegmentPolicy != nil {
		l = m.SegmentPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedSources != nil {
		l = m.AllowedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedDestinations != nil {
		l = m.AllowedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DenyAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAll != nil {
		l = m.DenyAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DeniedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedSources != nil {
		l = m.DeniedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DeniedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedDestinations != nil {
		l = m.DeniedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	if m.SegmentPolicy != nil {
		l = m.SegmentPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedSources != nil {
		l = m.AllowedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedDestinations != nil {
		l = m.AllowedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DenyAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAll != nil {
		l = m.DenyAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DeniedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedSources != nil {
		l = m.DeniedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DeniedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedDestinations != nil {
		l = m.DeniedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	if m.SegmentPolicy != nil {
		l = m.SegmentPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedSources != nil {
		l = m.AllowedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedDestinations != nil {
		l = m.AllowedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DenyAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyAll != nil {
		l = m.DenyAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DeniedSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedSources != nil {
		l = m.DeniedSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DeniedDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeniedDestinations != nil {
		l = m.DeniedDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceActionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceActionType{`,
		`NfvService:` + strings.Replace(fmt.Sprintf("%v", this.NfvService), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`AdvancedAction:` + strings.Replace(fmt.Sprintf("%v", this.AdvancedAction), "NetworkPolicyRuleAdvancedAction", "network_policy_rule.NetworkPolicyRuleAdvancedAction", 1) + `,`,
		`SourceChoice:` + fmt.Sprintf("%v", this.SourceChoice) + `,`,
		`DestinationChoice:` + fmt.Sprintf("%v", this.DestinationChoice) + `,`,
		`TrafficChoice:` + fmt.Sprintf("%v", this.TrafficChoice) + `,`,
		`LabelMatcher:` + strings.Replace(fmt.Sprintf("%v", this.LabelMatcher), "LabelMatcherType", "schema.LabelMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_Deny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_Deny{`,
		`Deny:` + strings.Replace(fmt.Sprintf("%v", this.Deny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_Allow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_Allow{`,
		`Allow:` + strings.Replace(fmt.Sprintf("%v", this.Allow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_InsertService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_InsertService{`,
		`InsertService:` + strings.Replace(fmt.Sprintf("%v", this.InsertService), "ServiceActionType", "ServiceActionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllSources{`,
		`AllSources:` + strings.Replace(fmt.Sprintf("%v", this.AllSources), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourcePrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_SourcePrefixList{`,
		`SourcePrefixList:` + strings.Replace(fmt.Sprintf("%v", this.SourcePrefixList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceIpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_SourceIpPrefixSet{`,
		`SourceIpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpPrefixSet), "IpPrefixSetRefType", "schema.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_InsideSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_InsideSources{`,
		`InsideSources:` + strings.Replace(fmt.Sprintf("%v", this.InsideSources), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_OutsideSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_OutsideSources{`,
		`OutsideSources:` + strings.Replace(fmt.Sprintf("%v", this.OutsideSources), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_SourceNamespace{`,
		`SourceNamespace:` + fmt.Sprintf("%v", this.SourceNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_SourceLabelSelector{`,
		`SourceLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.SourceLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceAwsVpcIds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_SourceAwsVpcIds{`,
		`SourceAwsVpcIds:` + strings.Replace(fmt.Sprintf("%v", this.SourceAwsVpcIds), "AwsVpcList", "schema.AwsVpcList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds{`,
		`SourceAwsSubnetIds:` + strings.Replace(fmt.Sprintf("%v", this.SourceAwsSubnetIds), "AwsSubnetList", "schema.AwsSubnetList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllDestinations{`,
		`AllDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllDestinations), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_DestinationPrefixList{`,
		`DestinationPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPrefixList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet{`,
		`DestinationIpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.DestinationIpPrefixSet), "IpPrefixSetRefType", "schema.IpPrefixSetRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_InsideDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_InsideDestinations{`,
		`InsideDestinations:` + strings.Replace(fmt.Sprintf("%v", this.InsideDestinations), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_OutsideDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_OutsideDestinations{`,
		`OutsideDestinations:` + strings.Replace(fmt.Sprintf("%v", this.OutsideDestinations), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_DestinationNamespace{`,
		`DestinationNamespace:` + fmt.Sprintf("%v", this.DestinationNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_DestinationLabelSelector{`,
		`DestinationLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.DestinationLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllSloVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllSloVips{`,
		`AllSloVips:` + strings.Replace(fmt.Sprintf("%v", this.AllSloVips), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllSliVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllSliVips{`,
		`AllSliVips:` + strings.Replace(fmt.Sprintf("%v", this.AllSliVips), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds{`,
		`DestinationAwsVpcIds:` + strings.Replace(fmt.Sprintf("%v", this.DestinationAwsVpcIds), "AwsVpcList", "schema.AwsVpcList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds{`,
		`DestinationAwsSubnetIds:` + strings.Replace(fmt.Sprintf("%v", this.DestinationAwsSubnetIds), "AwsSubnetList", "schema.AwsSubnetList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllTraffic{`,
		`AllTraffic:` + strings.Replace(fmt.Sprintf("%v", this.AllTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllTcpTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllTcpTraffic{`,
		`AllTcpTraffic:` + strings.Replace(fmt.Sprintf("%v", this.AllTcpTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_AllUdpTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_AllUdpTraffic{`,
		`AllUdpTraffic:` + strings.Replace(fmt.Sprintf("%v", this.AllUdpTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_Applications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_Applications{`,
		`Applications:` + strings.Replace(fmt.Sprintf("%v", this.Applications), "ApplicationsType", "network_policy.ApplicationsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleType_ProtocolPortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleType_ProtocolPortRange{`,
		`ProtocolPortRange:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolPortRange), "ProtocolPortType", "network_policy.ProtocolPortType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnhancedFirewallPolicyRuleListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*EnhancedFirewallPolicyRuleType{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "EnhancedFirewallPolicyRuleType", "EnhancedFirewallPolicyRuleType", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&EnhancedFirewallPolicyRuleListType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`SegmentPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SegmentPolicy), "SegmentPolicyType", "policy.SegmentPolicyType", 1) + `,`,
		`OperGcSpec:` + strings.Replace(this.OperGcSpec.String(), "OperGlobalSpecType", "OperGlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowedSources{`,
		`AllowedSources:` + strings.Replace(fmt.Sprintf("%v", this.AllowedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowedDestinations{`,
		`AllowedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllowedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DenyAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DenyAll{`,
		`DenyAll:` + strings.Replace(fmt.Sprintf("%v", this.DenyAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DeniedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DeniedSources{`,
		`DeniedSources:` + strings.Replace(fmt.Sprintf("%v", this.DeniedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DeniedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DeniedDestinations{`,
		`DeniedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.DeniedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "EnhancedFirewallPolicyRuleListType", "EnhancedFirewallPolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperGlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNfvService := "[]*ObjectRefType{"
	for _, f := range this.NfvService {
		repeatedStringForNfvService += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForNfvService += "}"
	repeatedStringForNetworkInterface := "[]*ObjectRefType{"
	for _, f := range this.NetworkInterface {
		repeatedStringForNetworkInterface += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkInterface += "}"
	s := strings.Join([]string{`&OperGlobalSpecType{`,
		`NfvService:` + repeatedStringForNfvService + `,`,
		`NetworkInterface:` + repeatedStringForNetworkInterface + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`SegmentPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SegmentPolicy), "SegmentPolicyType", "policy.SegmentPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowedSources{`,
		`AllowedSources:` + strings.Replace(fmt.Sprintf("%v", this.AllowedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowedDestinations{`,
		`AllowedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllowedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DenyAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DenyAll{`,
		`DenyAll:` + strings.Replace(fmt.Sprintf("%v", this.DenyAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DeniedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DeniedSources{`,
		`DeniedSources:` + strings.Replace(fmt.Sprintf("%v", this.DeniedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DeniedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DeniedDestinations{`,
		`DeniedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.DeniedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "EnhancedFirewallPolicyRuleListType", "EnhancedFirewallPolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`SegmentPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SegmentPolicy), "SegmentPolicyType", "policy.SegmentPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowedSources{`,
		`AllowedSources:` + strings.Replace(fmt.Sprintf("%v", this.AllowedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowedDestinations{`,
		`AllowedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllowedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DenyAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DenyAll{`,
		`DenyAll:` + strings.Replace(fmt.Sprintf("%v", this.DenyAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DeniedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DeniedSources{`,
		`DeniedSources:` + strings.Replace(fmt.Sprintf("%v", this.DeniedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DeniedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DeniedDestinations{`,
		`DeniedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.DeniedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "EnhancedFirewallPolicyRuleListType", "EnhancedFirewallPolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`SegmentPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SegmentPolicy), "SegmentPolicyType", "policy.SegmentPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowedSources{`,
		`AllowedSources:` + strings.Replace(fmt.Sprintf("%v", this.AllowedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowedDestinations{`,
		`AllowedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllowedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DenyAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DenyAll{`,
		`DenyAll:` + strings.Replace(fmt.Sprintf("%v", this.DenyAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DeniedSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DeniedSources{`,
		`DeniedSources:` + strings.Replace(fmt.Sprintf("%v", this.DeniedSources), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DeniedDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DeniedDestinations{`,
		`DeniedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.DeniedDestinations), "PrefixListType", "schema.PrefixListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "EnhancedFirewallPolicyRuleListType", "EnhancedFirewallPolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceActionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceActionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceActionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NfvService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NfvService == nil {
				m.NfvService = &views.ObjectRefType{}
			}
			if err := m.NfvService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedFirewallPolicyRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &EnhancedFirewallPolicyRuleType_Deny{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &EnhancedFirewallPolicyRuleType_Allow{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceActionType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &EnhancedFirewallPolicyRuleType_InsertService{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedAction == nil {
				m.AdvancedAction = &network_policy_rule.NetworkPolicyRuleAdvancedAction{}
			}
			if err := m.AdvancedAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_AllSources{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_SourcePrefixList{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_SourceIpPrefixSet{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_InsideSources{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_OutsideSources{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_SourceNamespace{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_SourceLabelSelector{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAwsVpcIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.AwsVpcList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_SourceAwsVpcIds{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAwsSubnetIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.AwsSubnetList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &EnhancedFirewallPolicyRuleType_SourceAwsSubnetIds{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_AllDestinations{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_DestinationPrefixList{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.IpPrefixSetRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_DestinationIpPrefixSet{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_InsideDestinations{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_OutsideDestinations{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_DestinationNamespace{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_DestinationLabelSelector{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSloVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_AllSloVips{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSliVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_AllSliVips{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAwsVpcIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.AwsVpcList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_DestinationAwsVpcIds{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAwsSubnetIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.AwsSubnetList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &EnhancedFirewallPolicyRuleType_DestinationAwsSubnetIds{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrafficChoice = &EnhancedFirewallPolicyRuleType_AllTraffic{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllTcpTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrafficChoice = &EnhancedFirewallPolicyRuleType_AllTcpTraffic{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllUdpTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrafficChoice = &EnhancedFirewallPolicyRuleType_AllUdpTraffic{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_policy.ApplicationsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrafficChoice = &EnhancedFirewallPolicyRuleType_Applications{v}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_policy.ProtocolPortType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrafficChoice = &EnhancedFirewallPolicyRuleType_ProtocolPortRange{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelMatcher == nil {
				m.LabelMatcher = &schema.LabelMatcherType{}
			}
			if err := m.LabelMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnhancedFirewallPolicyRuleListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyRuleListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnhancedFirewallPolicyRuleListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &EnhancedFirewallPolicyRuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowAll{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowedSources{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowedDestinations{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_DenyAll{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_DeniedSources{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_DeniedDestinations{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnhancedFirewallPolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_RuleList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentPolicy == nil {
				m.SegmentPolicy = &policy.SegmentPolicyType{}
			}
			if err := m.SegmentPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperGcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperGcSpec == nil {
				m.OperGcSpec = &OperGlobalSpecType{}
			}
			if err := m.OperGcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperGlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperGlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperGlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NfvService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NfvService = append(m.NfvService, &schema.ObjectRefType{})
			if err := m.NfvService[len(m.NfvService)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterface = append(m.NetworkInterface, &schema.ObjectRefType{})
			if err := m.NetworkInterface[len(m.NetworkInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowAll{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowedSources{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowedDestinations{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_DenyAll{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_DeniedSources{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_DeniedDestinations{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnhancedFirewallPolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_RuleList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentPolicy == nil {
				m.SegmentPolicy = &policy.SegmentPolicyType{}
			}
			if err := m.SegmentPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowAll{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowedSources{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowedDestinations{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_DenyAll{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_DeniedSources{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_DeniedDestinations{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnhancedFirewallPolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_RuleList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentPolicy == nil {
				m.SegmentPolicy = &policy.SegmentPolicyType{}
			}
			if err := m.SegmentPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowAll{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowedSources{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowedDestinations{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_DenyAll{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_DeniedSources{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PrefixListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_DeniedDestinations{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnhancedFirewallPolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_RuleList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentPolicy == nil {
				m.SegmentPolicy = &policy.SegmentPolicyType{}
			}
			if err := m.SegmentPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

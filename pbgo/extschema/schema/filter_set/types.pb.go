// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/filter_set/types.proto

package filter_set

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FilterTimeRangeField
//
// x-displayName: "Filter Date/Time Range Field"
// either an absolute time range or a relative time interval
type FilterTimeRangeField struct {
	// range_type
	//
	// x-displayName: "Date/Time Range Type"
	// x-required
	//
	// Types that are valid to be assigned to RangeType:
	//	*FilterTimeRangeField_Absolute
	//	*FilterTimeRangeField_Relative
	RangeType isFilterTimeRangeField_RangeType `protobuf_oneof:"range_type"`
}

func (m *FilterTimeRangeField) Reset()      { *m = FilterTimeRangeField{} }
func (*FilterTimeRangeField) ProtoMessage() {}
func (*FilterTimeRangeField) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{0}
}
func (m *FilterTimeRangeField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterTimeRangeField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FilterTimeRangeField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterTimeRangeField.Merge(m, src)
}
func (m *FilterTimeRangeField) XXX_Size() int {
	return m.Size()
}
func (m *FilterTimeRangeField) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterTimeRangeField.DiscardUnknown(m)
}

var xxx_messageInfo_FilterTimeRangeField proto.InternalMessageInfo

type isFilterTimeRangeField_RangeType interface {
	isFilterTimeRangeField_RangeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FilterTimeRangeField_Absolute struct {
	Absolute *schema.DateRange `protobuf:"bytes,2,opt,name=absolute,proto3,oneof" json:"absolute,omitempty"`
}
type FilterTimeRangeField_Relative struct {
	Relative *types.Duration `protobuf:"bytes,3,opt,name=relative,proto3,oneof" json:"relative,omitempty"`
}

func (*FilterTimeRangeField_Absolute) isFilterTimeRangeField_RangeType() {}
func (*FilterTimeRangeField_Relative) isFilterTimeRangeField_RangeType() {}

func (m *FilterTimeRangeField) GetRangeType() isFilterTimeRangeField_RangeType {
	if m != nil {
		return m.RangeType
	}
	return nil
}

func (m *FilterTimeRangeField) GetAbsolute() *schema.DateRange {
	if x, ok := m.GetRangeType().(*FilterTimeRangeField_Absolute); ok {
		return x.Absolute
	}
	return nil
}

func (m *FilterTimeRangeField) GetRelative() *types.Duration {
	if x, ok := m.GetRangeType().(*FilterTimeRangeField_Relative); ok {
		return x.Relative
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FilterTimeRangeField) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FilterTimeRangeField_Absolute)(nil),
		(*FilterTimeRangeField_Relative)(nil),
	}
}

// FilterStringField
//
// x-displayName: "Filter String Field"
type FilterStringField struct {
	// field_values
	//
	// x-displayName: "String Value(s)"
	// x-required
	FieldValues []string `protobuf:"bytes,1,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
}

func (m *FilterStringField) Reset()      { *m = FilterStringField{} }
func (*FilterStringField) ProtoMessage() {}
func (*FilterStringField) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{1}
}
func (m *FilterStringField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterStringField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FilterStringField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterStringField.Merge(m, src)
}
func (m *FilterStringField) XXX_Size() int {
	return m.Size()
}
func (m *FilterStringField) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterStringField.DiscardUnknown(m)
}

var xxx_messageInfo_FilterStringField proto.InternalMessageInfo

func (m *FilterStringField) GetFieldValues() []string {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

// FilterExpressionField
//
// x-displayName: "Filter Expression Field"
type FilterExpressionField struct {
	// expression
	//
	// x-displayName: "Expression Value"
	// x-required
	// x-example: "region in (us-west1, us-west2),tier in (staging)"
	// expression is a kubernetes style label expression for selections, but
	// differs in that it allows special characters in the keys and values
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (m *FilterExpressionField) Reset()      { *m = FilterExpressionField{} }
func (*FilterExpressionField) ProtoMessage() {}
func (*FilterExpressionField) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{2}
}
func (m *FilterExpressionField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterExpressionField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FilterExpressionField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterExpressionField.Merge(m, src)
}
func (m *FilterExpressionField) XXX_Size() int {
	return m.Size()
}
func (m *FilterExpressionField) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterExpressionField.DiscardUnknown(m)
}

var xxx_messageInfo_FilterExpressionField proto.InternalMessageInfo

func (m *FilterExpressionField) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

// FilterSetField
//
// x-displayName: "Filter Set Field"
// a field ID and its value selected by the user
type FilterSetField struct {
	// field_id
	//
	// x-displayName: "Field ID"
	// x-required
	// an identifier for the field that maps to some UI filter component
	FieldId string `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// field_value
	//
	// x-displayName: "Field Value Type"
	// x-required
	// the type of value selected by the user
	//
	// Types that are valid to be assigned to FieldValue:
	//	*FilterSetField_StringField
	//	*FilterSetField_DateField
	//	*FilterSetField_LabelSelectorField
	//	*FilterSetField_FilterExpressionField
	FieldValue isFilterSetField_FieldValue `protobuf_oneof:"field_value"`
}

func (m *FilterSetField) Reset()      { *m = FilterSetField{} }
func (*FilterSetField) ProtoMessage() {}
func (*FilterSetField) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{3}
}
func (m *FilterSetField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterSetField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FilterSetField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterSetField.Merge(m, src)
}
func (m *FilterSetField) XXX_Size() int {
	return m.Size()
}
func (m *FilterSetField) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterSetField.DiscardUnknown(m)
}

var xxx_messageInfo_FilterSetField proto.InternalMessageInfo

type isFilterSetField_FieldValue interface {
	isFilterSetField_FieldValue()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FilterSetField_StringField struct {
	StringField *FilterStringField `protobuf:"bytes,3,opt,name=string_field,json=stringField,proto3,oneof" json:"string_field,omitempty"`
}
type FilterSetField_DateField struct {
	DateField *FilterTimeRangeField `protobuf:"bytes,4,opt,name=date_field,json=dateField,proto3,oneof" json:"date_field,omitempty"`
}
type FilterSetField_LabelSelectorField struct {
	LabelSelectorField *schema.LabelSelectorType `protobuf:"bytes,5,opt,name=label_selector_field,json=labelSelectorField,proto3,oneof" json:"label_selector_field,omitempty"`
}
type FilterSetField_FilterExpressionField struct {
	FilterExpressionField *FilterExpressionField `protobuf:"bytes,6,opt,name=filter_expression_field,json=filterExpressionField,proto3,oneof" json:"filter_expression_field,omitempty"`
}

func (*FilterSetField_StringField) isFilterSetField_FieldValue()           {}
func (*FilterSetField_DateField) isFilterSetField_FieldValue()             {}
func (*FilterSetField_LabelSelectorField) isFilterSetField_FieldValue()    {}
func (*FilterSetField_FilterExpressionField) isFilterSetField_FieldValue() {}

func (m *FilterSetField) GetFieldValue() isFilterSetField_FieldValue {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

func (m *FilterSetField) GetFieldId() string {
	if m != nil {
		return m.FieldId
	}
	return ""
}

func (m *FilterSetField) GetStringField() *FilterStringField {
	if x, ok := m.GetFieldValue().(*FilterSetField_StringField); ok {
		return x.StringField
	}
	return nil
}

func (m *FilterSetField) GetDateField() *FilterTimeRangeField {
	if x, ok := m.GetFieldValue().(*FilterSetField_DateField); ok {
		return x.DateField
	}
	return nil
}

func (m *FilterSetField) GetLabelSelectorField() *schema.LabelSelectorType {
	if x, ok := m.GetFieldValue().(*FilterSetField_LabelSelectorField); ok {
		return x.LabelSelectorField
	}
	return nil
}

func (m *FilterSetField) GetFilterExpressionField() *FilterExpressionField {
	if x, ok := m.GetFieldValue().(*FilterSetField_FilterExpressionField); ok {
		return x.FilterExpressionField
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FilterSetField) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FilterSetField_StringField)(nil),
		(*FilterSetField_DateField)(nil),
		(*FilterSetField_LabelSelectorField)(nil),
		(*FilterSetField_FilterExpressionField)(nil),
	}
}

// Global Specification
//
// x-displayName: "Global Specification"
// Global specification
type GlobalSpecType struct {
	// context_key
	//
	// x-displayName: "Context Key"
	// x-required
	// indexable context key that identifies a page or page type for which the FilterSet is applicable
	ContextKey string `protobuf:"bytes,1,opt,name=context_key,json=contextKey,proto3" json:"context_key,omitempty"`
	// filter_fields
	//
	// x-displayName: "Filter Fields"
	// x-required
	// list of fields and their values selected by the user
	FilterFields []*FilterSetField `protobuf:"bytes,2,rep,name=filter_fields,json=filterFields,proto3" json:"filter_fields,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetContextKey() string {
	if m != nil {
		return m.ContextKey
	}
	return ""
}

func (m *GlobalSpecType) GetFilterFields() []*FilterSetField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// Create Specification
//
// x-displayName: "Create Specification"
// Create specification
type CreateSpecType struct {
	ContextKey   string            `protobuf:"bytes,1,opt,name=context_key,json=contextKey,proto3" json:"context_key,omitempty"`
	FilterFields []*FilterSetField `protobuf:"bytes,2,rep,name=filter_fields,json=filterFields,proto3" json:"filter_fields,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetContextKey() string {
	if m != nil {
		return m.ContextKey
	}
	return ""
}

func (m *CreateSpecType) GetFilterFields() []*FilterSetField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// Replace Specification
//
// x-displayName: "Replace Specification"
// Replace specification
type ReplaceSpecType struct {
	ContextKey   string            `protobuf:"bytes,1,opt,name=context_key,json=contextKey,proto3" json:"context_key,omitempty"`
	FilterFields []*FilterSetField `protobuf:"bytes,2,rep,name=filter_fields,json=filterFields,proto3" json:"filter_fields,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetContextKey() string {
	if m != nil {
		return m.ContextKey
	}
	return ""
}

func (m *ReplaceSpecType) GetFilterFields() []*FilterSetField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// Get Specification
//
// x-displayName: "Get Specification"
// Get specification
type GetSpecType struct {
	ContextKey   string            `protobuf:"bytes,1,opt,name=context_key,json=contextKey,proto3" json:"context_key,omitempty"`
	FilterFields []*FilterSetField `protobuf:"bytes,2,rep,name=filter_fields,json=filterFields,proto3" json:"filter_fields,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d10208c8b5f19db, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetContextKey() string {
	if m != nil {
		return m.ContextKey
	}
	return ""
}

func (m *GetSpecType) GetFilterFields() []*FilterSetField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

func init() {
	proto.RegisterType((*FilterTimeRangeField)(nil), "ves.io.schema.filter_set.FilterTimeRangeField")
	golang_proto.RegisterType((*FilterTimeRangeField)(nil), "ves.io.schema.filter_set.FilterTimeRangeField")
	proto.RegisterType((*FilterStringField)(nil), "ves.io.schema.filter_set.FilterStringField")
	golang_proto.RegisterType((*FilterStringField)(nil), "ves.io.schema.filter_set.FilterStringField")
	proto.RegisterType((*FilterExpressionField)(nil), "ves.io.schema.filter_set.FilterExpressionField")
	golang_proto.RegisterType((*FilterExpressionField)(nil), "ves.io.schema.filter_set.FilterExpressionField")
	proto.RegisterType((*FilterSetField)(nil), "ves.io.schema.filter_set.FilterSetField")
	golang_proto.RegisterType((*FilterSetField)(nil), "ves.io.schema.filter_set.FilterSetField")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.filter_set.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.filter_set.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.filter_set.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.filter_set.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.filter_set.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.filter_set.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.filter_set.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.filter_set.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/filter_set/types.proto", fileDescriptor_0d10208c8b5f19db)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/filter_set/types.proto", fileDescriptor_0d10208c8b5f19db)
}

var fileDescriptor_0d10208c8b5f19db = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xbf, 0x4f, 0xdb, 0x4c,
	0x18, 0xf6, 0x25, 0x81, 0x2f, 0x5c, 0xf8, 0xf8, 0xc0, 0x1f, 0xa8, 0x26, 0xad, 0xae, 0x6e, 0xda,
	0x21, 0x6a, 0x85, 0x2d, 0x51, 0x09, 0x24, 0x86, 0x0e, 0x29, 0x85, 0x94, 0xfe, 0x94, 0x41, 0x1d,
	0xba, 0x44, 0x4e, 0xf2, 0xc6, 0x58, 0x38, 0x39, 0xcb, 0x77, 0x49, 0xc9, 0x50, 0x89, 0x3f, 0xa0,
	0x03, 0x6a, 0xab, 0xee, 0xdd, 0xfa, 0x37, 0x94, 0x85, 0xb1, 0x62, 0xca, 0xc8, 0xd6, 0xe2, 0x2c,
	0x74, 0xe3, 0x4f, 0xa8, 0x7c, 0xbe, 0x40, 0x12, 0x8a, 0xa8, 0xd4, 0x85, 0xed, 0xee, 0x7d, 0x9f,
	0xe7, 0xb9, 0xe7, 0xb9, 0x7b, 0x65, 0xe3, 0x3b, 0x2d, 0x60, 0x86, 0x4b, 0x4d, 0x56, 0xd9, 0x84,
	0xba, 0x6d, 0xd6, 0x5c, 0x8f, 0x43, 0x50, 0x62, 0xc0, 0x4d, 0xde, 0xf6, 0x81, 0x19, 0x7e, 0x40,
	0x39, 0x55, 0xb5, 0x18, 0x65, 0xc4, 0x28, 0xe3, 0x0c, 0x95, 0x9d, 0x73, 0x5c, 0xbe, 0xd9, 0x2c,
	0x1b, 0x15, 0x5a, 0x37, 0x1d, 0xea, 0x50, 0x53, 0x10, 0xca, 0xcd, 0x9a, 0xd8, 0x89, 0x8d, 0x58,
	0xc5, 0x42, 0x59, 0xe2, 0x50, 0xea, 0x78, 0x70, 0x86, 0xaa, 0x36, 0x03, 0x9b, 0xbb, 0xb4, 0x21,
	0xfb, 0xd7, 0x07, 0xed, 0x50, 0x3f, 0xea, 0x49, 0x17, 0xd9, 0xd9, 0xc1, 0x66, 0x9f, 0xc1, 0xec,
	0x8d, 0xc1, 0x56, 0xcb, 0xf6, 0xdc, 0xaa, 0xcd, 0x41, 0x76, 0xf5, 0xa1, 0xae, 0x0b, 0x6f, 0x4a,
	0x03, 0xd2, 0xb9, 0xcf, 0x08, 0x4f, 0xaf, 0x88, 0x54, 0x1b, 0x6e, 0x1d, 0x2c, 0xbb, 0xe1, 0xc0,
	0x8a, 0x0b, 0x5e, 0x55, 0x5d, 0xc0, 0x69, 0xbb, 0xcc, 0xa8, 0xd7, 0xe4, 0xa0, 0x25, 0x74, 0x94,
	0xcf, 0xcc, 0x6b, 0xc6, 0xe0, 0x65, 0x2c, 0xdb, 0x3c, 0x26, 0x14, 0x15, 0xeb, 0x14, 0xab, 0x2e,
	0xe2, 0x74, 0x00, 0x9e, 0xcd, 0xdd, 0x16, 0x68, 0x49, 0xc1, 0x9b, 0x35, 0xe2, 0xec, 0x46, 0x2f,
	0xbb, 0xb1, 0x2c, 0xb3, 0x47, 0xc4, 0x1e, 0xb8, 0xa0, 0x62, 0x1c, 0x44, 0x6a, 0xa5, 0x28, 0x9e,
	0x9a, 0xea, 0xec, 0x21, 0xb4, 0x96, 0x4a, 0xa3, 0xc9, 0x44, 0x6e, 0x01, 0x4f, 0xc5, 0x16, 0xd7,
	0x79, 0xe0, 0x36, 0x9c, 0xd8, 0xdf, 0x2d, 0x3c, 0x5e, 0x8b, 0x16, 0xa5, 0x96, 0xed, 0x35, 0x81,
	0x69, 0x48, 0x4f, 0xe6, 0xc7, 0xac, 0x8c, 0xa8, 0xbd, 0x12, 0xa5, 0xdc, 0x22, 0x9e, 0x89, 0x79,
	0x8f, 0xb6, 0xfd, 0x00, 0x18, 0x73, 0x69, 0x23, 0xe6, 0x12, 0x8c, 0xe1, 0xb4, 0xa4, 0x21, 0x1d,
	0xe5, 0xc7, 0xac, 0xbe, 0x4a, 0xee, 0x7b, 0x12, 0x4f, 0xc8, 0x13, 0x81, 0xc7, 0x94, 0x59, 0x9c,
	0x8e, 0x8f, 0x73, 0xab, 0x92, 0xf0, 0x8f, 0xd8, 0x3f, 0xae, 0xaa, 0x2f, 0xf1, 0x38, 0x13, 0xc6,
	0x4a, 0xa2, 0x22, 0x53, 0xdf, 0x33, 0x2e, 0x1a, 0x1d, 0xe3, 0x5c, 0x98, 0xa2, 0x62, 0x65, 0x58,
	0x5f, 0xb6, 0x17, 0x18, 0x47, 0x8f, 0x28, 0xf5, 0x52, 0x42, 0xcf, 0xb8, 0x4c, 0x6f, 0xf0, 0xfd,
	0x8a, 0x8a, 0x35, 0x16, 0x69, 0xc4, 0x82, 0x3b, 0x08, 0x4f, 0x7b, 0x76, 0x19, 0xbc, 0x12, 0x03,
	0x0f, 0x2a, 0x9c, 0x06, 0x52, 0x7b, 0x44, 0x68, 0xeb, 0x43, 0xda, 0x4f, 0x23, 0xe8, 0xba, 0x44,
	0x6e, 0xb4, 0x7d, 0x28, 0xdc, 0x0d, 0xdf, 0xde, 0x6e, 0x32, 0xd0, 0xe5, 0xa9, 0x67, 0x77, 0x15,
	0xeb, 0xe8, 0x6e, 0x83, 0x71, 0xb0, 0xab, 0xc7, 0x7b, 0x08, 0x15, 0x15, 0x4b, 0xf5, 0xfa, 0x05,
	0x62, 0x0b, 0x2e, 0xbe, 0x76, 0x01, 0x59, 0x1b, 0x15, 0x26, 0xcc, 0xcb, 0x02, 0x0e, 0xbd, 0x62,
	0x51, 0xb1, 0x66, 0x6a, 0xbf, 0x6b, 0x2c, 0x8d, 0x1e, 0xec, 0xa1, 0xc4, 0x24, 0x2a, 0xfc, 0x8f,
	0x33, 0x7d, 0x23, 0x22, 0x46, 0x2a, 0xb1, 0x96, 0x4a, 0x27, 0x26, 0x93, 0xb9, 0x4f, 0x08, 0x4f,
	0xac, 0x7a, 0xb4, 0x6c, 0x7b, 0xeb, 0x3e, 0x54, 0xa2, 0x88, 0xea, 0x4d, 0x9c, 0xa9, 0xd0, 0x06,
	0x87, 0x6d, 0x5e, 0xda, 0x82, 0x76, 0x6f, 0x2a, 0x64, 0xe9, 0x09, 0xb4, 0xd5, 0x0a, 0xfe, 0x57,
	0x7a, 0x12, 0xaa, 0x4c, 0x4b, 0xe8, 0xc9, 0x7c, 0x66, 0x3e, 0x7f, 0xe9, 0x43, 0xcb, 0x19, 0x2a,
	0x4c, 0x7f, 0xfd, 0xb9, 0x9f, 0x1c, 0x79, 0x8f, 0x12, 0x69, 0xd4, 0x5b, 0x69, 0xc8, 0x1a, 0x8f,
	0x09, 0x02, 0xc2, 0x72, 0x1f, 0x10, 0x9e, 0x78, 0x18, 0x80, 0xcd, 0xe1, 0xcf, 0x8d, 0x3d, 0xfb,
	0x4b, 0x63, 0x83, 0x16, 0x96, 0xa6, 0x0e, 0x1e, 0x0c, 0xdd, 0x4d, 0xee, 0x23, 0xc2, 0xff, 0x59,
	0xe0, 0x7b, 0x76, 0xe5, 0x4a, 0xd9, 0xda, 0x45, 0x38, 0xb3, 0x0a, 0xfc, 0x0a, 0x59, 0x2a, 0xbc,
	0x43, 0x9d, 0x23, 0xa2, 0x1c, 0x1e, 0x11, 0xe5, 0xe4, 0x88, 0xa0, 0x9d, 0x90, 0xa0, 0x2f, 0x21,
	0x41, 0xdf, 0x42, 0x82, 0x3a, 0x21, 0x41, 0x87, 0x21, 0x41, 0x3f, 0x42, 0x82, 0x8e, 0x43, 0xa2,
	0x9c, 0x84, 0x04, 0xed, 0x76, 0x89, 0xb2, 0xdf, 0x25, 0xa8, 0xd3, 0x25, 0xca, 0x61, 0x97, 0x28,
	0xaf, 0x9f, 0x3b, 0xd4, 0xdf, 0x72, 0x8c, 0x16, 0x8d, 0x4e, 0x09, 0x6c, 0xa3, 0xc9, 0x4c, 0xb1,
	0xa8, 0xd1, 0xa0, 0x3e, 0xe7, 0x07, 0xb4, 0xe5, 0x56, 0x21, 0x98, 0xeb, 0xb5, 0x4d, 0xbf, 0xec,
	0x50, 0x13, 0xb6, 0xb9, 0xfc, 0xbe, 0x9f, 0xfb, 0x97, 0x95, 0x47, 0xc5, 0x37, 0xf7, 0xfe, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x7b, 0x2a, 0x94, 0xee, 0x06, 0x00, 0x00,
}

func (this *FilterTimeRangeField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterTimeRangeField)
	if !ok {
		that2, ok := that.(FilterTimeRangeField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RangeType == nil {
		if this.RangeType != nil {
			return false
		}
	} else if this.RangeType == nil {
		return false
	} else if !this.RangeType.Equal(that1.RangeType) {
		return false
	}
	return true
}
func (this *FilterTimeRangeField_Absolute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterTimeRangeField_Absolute)
	if !ok {
		that2, ok := that.(FilterTimeRangeField_Absolute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Absolute.Equal(that1.Absolute) {
		return false
	}
	return true
}
func (this *FilterTimeRangeField_Relative) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterTimeRangeField_Relative)
	if !ok {
		that2, ok := that.(FilterTimeRangeField_Relative)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Relative.Equal(that1.Relative) {
		return false
	}
	return true
}
func (this *FilterStringField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterStringField)
	if !ok {
		that2, ok := that.(FilterStringField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FieldValues) != len(that1.FieldValues) {
		return false
	}
	for i := range this.FieldValues {
		if this.FieldValues[i] != that1.FieldValues[i] {
			return false
		}
	}
	return true
}
func (this *FilterExpressionField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterExpressionField)
	if !ok {
		that2, ok := that.(FilterExpressionField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expression != that1.Expression {
		return false
	}
	return true
}
func (this *FilterSetField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterSetField)
	if !ok {
		that2, ok := that.(FilterSetField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldId != that1.FieldId {
		return false
	}
	if that1.FieldValue == nil {
		if this.FieldValue != nil {
			return false
		}
	} else if this.FieldValue == nil {
		return false
	} else if !this.FieldValue.Equal(that1.FieldValue) {
		return false
	}
	return true
}
func (this *FilterSetField_StringField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterSetField_StringField)
	if !ok {
		that2, ok := that.(FilterSetField_StringField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StringField.Equal(that1.StringField) {
		return false
	}
	return true
}
func (this *FilterSetField_DateField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterSetField_DateField)
	if !ok {
		that2, ok := that.(FilterSetField_DateField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DateField.Equal(that1.DateField) {
		return false
	}
	return true
}
func (this *FilterSetField_LabelSelectorField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterSetField_LabelSelectorField)
	if !ok {
		that2, ok := that.(FilterSetField_LabelSelectorField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LabelSelectorField.Equal(that1.LabelSelectorField) {
		return false
	}
	return true
}
func (this *FilterSetField_FilterExpressionField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterSetField_FilterExpressionField)
	if !ok {
		that2, ok := that.(FilterSetField_FilterExpressionField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FilterExpressionField.Equal(that1.FilterExpressionField) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContextKey != that1.ContextKey {
		return false
	}
	if len(this.FilterFields) != len(that1.FilterFields) {
		return false
	}
	for i := range this.FilterFields {
		if !this.FilterFields[i].Equal(that1.FilterFields[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContextKey != that1.ContextKey {
		return false
	}
	if len(this.FilterFields) != len(that1.FilterFields) {
		return false
	}
	for i := range this.FilterFields {
		if !this.FilterFields[i].Equal(that1.FilterFields[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContextKey != that1.ContextKey {
		return false
	}
	if len(this.FilterFields) != len(that1.FilterFields) {
		return false
	}
	for i := range this.FilterFields {
		if !this.FilterFields[i].Equal(that1.FilterFields[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContextKey != that1.ContextKey {
		return false
	}
	if len(this.FilterFields) != len(that1.FilterFields) {
		return false
	}
	for i := range this.FilterFields {
		if !this.FilterFields[i].Equal(that1.FilterFields[i]) {
			return false
		}
	}
	return true
}
func (this *FilterTimeRangeField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filter_set.FilterTimeRangeField{")
	if this.RangeType != nil {
		s = append(s, "RangeType: "+fmt.Sprintf("%#v", this.RangeType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilterTimeRangeField_Absolute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filter_set.FilterTimeRangeField_Absolute{` +
		`Absolute:` + fmt.Sprintf("%#v", this.Absolute) + `}`}, ", ")
	return s
}
func (this *FilterTimeRangeField_Relative) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filter_set.FilterTimeRangeField_Relative{` +
		`Relative:` + fmt.Sprintf("%#v", this.Relative) + `}`}, ", ")
	return s
}
func (this *FilterStringField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&filter_set.FilterStringField{")
	s = append(s, "FieldValues: "+fmt.Sprintf("%#v", this.FieldValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilterExpressionField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&filter_set.FilterExpressionField{")
	s = append(s, "Expression: "+fmt.Sprintf("%#v", this.Expression)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilterSetField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&filter_set.FilterSetField{")
	s = append(s, "FieldId: "+fmt.Sprintf("%#v", this.FieldId)+",\n")
	if this.FieldValue != nil {
		s = append(s, "FieldValue: "+fmt.Sprintf("%#v", this.FieldValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilterSetField_StringField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filter_set.FilterSetField_StringField{` +
		`StringField:` + fmt.Sprintf("%#v", this.StringField) + `}`}, ", ")
	return s
}
func (this *FilterSetField_DateField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filter_set.FilterSetField_DateField{` +
		`DateField:` + fmt.Sprintf("%#v", this.DateField) + `}`}, ", ")
	return s
}
func (this *FilterSetField_LabelSelectorField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filter_set.FilterSetField_LabelSelectorField{` +
		`LabelSelectorField:` + fmt.Sprintf("%#v", this.LabelSelectorField) + `}`}, ", ")
	return s
}
func (this *FilterSetField_FilterExpressionField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filter_set.FilterSetField_FilterExpressionField{` +
		`FilterExpressionField:` + fmt.Sprintf("%#v", this.FilterExpressionField) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filter_set.GlobalSpecType{")
	s = append(s, "ContextKey: "+fmt.Sprintf("%#v", this.ContextKey)+",\n")
	if this.FilterFields != nil {
		s = append(s, "FilterFields: "+fmt.Sprintf("%#v", this.FilterFields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filter_set.CreateSpecType{")
	s = append(s, "ContextKey: "+fmt.Sprintf("%#v", this.ContextKey)+",\n")
	if this.FilterFields != nil {
		s = append(s, "FilterFields: "+fmt.Sprintf("%#v", this.FilterFields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filter_set.ReplaceSpecType{")
	s = append(s, "ContextKey: "+fmt.Sprintf("%#v", this.ContextKey)+",\n")
	if this.FilterFields != nil {
		s = append(s, "FilterFields: "+fmt.Sprintf("%#v", this.FilterFields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filter_set.GetSpecType{")
	s = append(s, "ContextKey: "+fmt.Sprintf("%#v", this.ContextKey)+",\n")
	if this.FilterFields != nil {
		s = append(s, "FilterFields: "+fmt.Sprintf("%#v", this.FilterFields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FilterTimeRangeField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterTimeRangeField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterTimeRangeField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RangeType != nil {
		{
			size := m.RangeType.Size()
			i -= size
			if _, err := m.RangeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilterTimeRangeField_Absolute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterTimeRangeField_Absolute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Absolute != nil {
		{
			size, err := m.Absolute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FilterTimeRangeField_Relative) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterTimeRangeField_Relative) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Relative != nil {
		{
			size, err := m.Relative.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FilterStringField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterStringField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterStringField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldValues) > 0 {
		for iNdEx := len(m.FieldValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldValues[iNdEx])
			copy(dAtA[i:], m.FieldValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.FieldValues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilterExpressionField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterExpressionField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterExpressionField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expression) > 0 {
		i -= len(m.Expression)
		copy(dAtA[i:], m.Expression)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Expression)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterSetField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterSetField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSetField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldValue != nil {
		{
			size := m.FieldValue.Size()
			i -= size
			if _, err := m.FieldValue.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.FieldId) > 0 {
		i -= len(m.FieldId)
		copy(dAtA[i:], m.FieldId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FieldId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterSetField_StringField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSetField_StringField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StringField != nil {
		{
			size, err := m.StringField.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FilterSetField_DateField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSetField_DateField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DateField != nil {
		{
			size, err := m.DateField.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FilterSetField_LabelSelectorField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSetField_LabelSelectorField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LabelSelectorField != nil {
		{
			size, err := m.LabelSelectorField.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FilterSetField_FilterExpressionField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSetField_FilterExpressionField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FilterExpressionField != nil {
		{
			size, err := m.FilterExpressionField.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterFields) > 0 {
		for iNdEx := len(m.FilterFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FilterFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContextKey) > 0 {
		i -= len(m.ContextKey)
		copy(dAtA[i:], m.ContextKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterFields) > 0 {
		for iNdEx := len(m.FilterFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FilterFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContextKey) > 0 {
		i -= len(m.ContextKey)
		copy(dAtA[i:], m.ContextKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterFields) > 0 {
		for iNdEx := len(m.FilterFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FilterFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContextKey) > 0 {
		i -= len(m.ContextKey)
		copy(dAtA[i:], m.ContextKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterFields) > 0 {
		for iNdEx := len(m.FilterFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FilterFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContextKey) > 0 {
		i -= len(m.ContextKey)
		copy(dAtA[i:], m.ContextKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContextKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FilterTimeRangeField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeType != nil {
		n += m.RangeType.Size()
	}
	return n
}

func (m *FilterTimeRangeField_Absolute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Absolute != nil {
		l = m.Absolute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FilterTimeRangeField_Relative) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relative != nil {
		l = m.Relative.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FilterStringField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FieldValues) > 0 {
		for _, s := range m.FieldValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *FilterExpressionField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Expression)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *FilterSetField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FieldValue != nil {
		n += m.FieldValue.Size()
	}
	return n
}

func (m *FilterSetField_StringField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringField != nil {
		l = m.StringField.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FilterSetField_DateField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateField != nil {
		l = m.DateField.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FilterSetField_LabelSelectorField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelSelectorField != nil {
		l = m.LabelSelectorField.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FilterSetField_FilterExpressionField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterExpressionField != nil {
		l = m.FilterExpressionField.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.FilterFields) > 0 {
		for _, e := range m.FilterFields {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.FilterFields) > 0 {
		for _, e := range m.FilterFields {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.FilterFields) > 0 {
		for _, e := range m.FilterFields {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContextKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.FilterFields) > 0 {
		for _, e := range m.FilterFields {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FilterTimeRangeField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterTimeRangeField{`,
		`RangeType:` + fmt.Sprintf("%v", this.RangeType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterTimeRangeField_Absolute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterTimeRangeField_Absolute{`,
		`Absolute:` + strings.Replace(fmt.Sprintf("%v", this.Absolute), "DateRange", "schema.DateRange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterTimeRangeField_Relative) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterTimeRangeField_Relative{`,
		`Relative:` + strings.Replace(fmt.Sprintf("%v", this.Relative), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterStringField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterStringField{`,
		`FieldValues:` + fmt.Sprintf("%v", this.FieldValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterExpressionField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterExpressionField{`,
		`Expression:` + fmt.Sprintf("%v", this.Expression) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterSetField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterSetField{`,
		`FieldId:` + fmt.Sprintf("%v", this.FieldId) + `,`,
		`FieldValue:` + fmt.Sprintf("%v", this.FieldValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterSetField_StringField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterSetField_StringField{`,
		`StringField:` + strings.Replace(fmt.Sprintf("%v", this.StringField), "FilterStringField", "FilterStringField", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterSetField_DateField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterSetField_DateField{`,
		`DateField:` + strings.Replace(fmt.Sprintf("%v", this.DateField), "FilterTimeRangeField", "FilterTimeRangeField", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterSetField_LabelSelectorField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterSetField_LabelSelectorField{`,
		`LabelSelectorField:` + strings.Replace(fmt.Sprintf("%v", this.LabelSelectorField), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterSetField_FilterExpressionField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterSetField_FilterExpressionField{`,
		`FilterExpressionField:` + strings.Replace(fmt.Sprintf("%v", this.FilterExpressionField), "FilterExpressionField", "FilterExpressionField", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFilterFields := "[]*FilterSetField{"
	for _, f := range this.FilterFields {
		repeatedStringForFilterFields += strings.Replace(f.String(), "FilterSetField", "FilterSetField", 1) + ","
	}
	repeatedStringForFilterFields += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ContextKey:` + fmt.Sprintf("%v", this.ContextKey) + `,`,
		`FilterFields:` + repeatedStringForFilterFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFilterFields := "[]*FilterSetField{"
	for _, f := range this.FilterFields {
		repeatedStringForFilterFields += strings.Replace(f.String(), "FilterSetField", "FilterSetField", 1) + ","
	}
	repeatedStringForFilterFields += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`ContextKey:` + fmt.Sprintf("%v", this.ContextKey) + `,`,
		`FilterFields:` + repeatedStringForFilterFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFilterFields := "[]*FilterSetField{"
	for _, f := range this.FilterFields {
		repeatedStringForFilterFields += strings.Replace(f.String(), "FilterSetField", "FilterSetField", 1) + ","
	}
	repeatedStringForFilterFields += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ContextKey:` + fmt.Sprintf("%v", this.ContextKey) + `,`,
		`FilterFields:` + repeatedStringForFilterFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFilterFields := "[]*FilterSetField{"
	for _, f := range this.FilterFields {
		repeatedStringForFilterFields += strings.Replace(f.String(), "FilterSetField", "FilterSetField", 1) + ","
	}
	repeatedStringForFilterFields += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`ContextKey:` + fmt.Sprintf("%v", this.ContextKey) + `,`,
		`FilterFields:` + repeatedStringForFilterFields + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FilterTimeRangeField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterTimeRangeField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterTimeRangeField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Absolute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DateRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RangeType = &FilterTimeRangeField_Absolute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relative", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Duration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RangeType = &FilterTimeRangeField_Relative{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterStringField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterStringField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterStringField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValues = append(m.FieldValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterExpressionField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterExpressionField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterExpressionField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterSetField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterSetField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterSetField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringField", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilterStringField{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldValue = &FilterSetField_StringField{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateField", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilterTimeRangeField{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldValue = &FilterSetField_DateField{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectorField", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldValue = &FilterSetField_LabelSelectorField{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterExpressionField", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilterExpressionField{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FieldValue = &FilterSetField_FilterExpressionField{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterFields = append(m.FilterFields, &FilterSetField{})
			if err := m.FilterFields[len(m.FilterFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterFields = append(m.FilterFields, &FilterSetField{})
			if err := m.FilterFields[len(m.FilterFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterFields = append(m.FilterFields, &FilterSetField{})
			if err := m.FilterFields[len(m.FilterFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterFields = append(m.FilterFields, &FilterSetField{})
			if err := m.FilterFields[len(m.FilterFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package filter_set

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ContextKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for context_key")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) FilterFieldsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for filter_fields")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FilterSetField, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FilterSetFieldValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for filter_fields")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FilterSetField)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FilterSetField, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated filter_fields")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items filter_fields")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["context_key"]; exists {

		vOpts := append(opts, db.WithValidateField("context_key"))
		if err := fv(ctx, m.GetContextKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filter_fields"]; exists {
		vOpts := append(opts, db.WithValidateField("filter_fields"))
		if err := fv(ctx, m.GetFilterFields(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhContextKey := v.ContextKeyValidationRuleHandler
	rulesContextKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhContextKey(rulesContextKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.context_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["context_key"] = vFn

	vrhFilterFields := v.FilterFieldsValidationRuleHandler
	rulesFilterFields := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFilterFields(rulesFilterFields)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.filter_fields: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_fields"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *FilterExpressionField) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FilterExpressionField) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FilterExpressionField) DeepCopy() *FilterExpressionField {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FilterExpressionField{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FilterExpressionField) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FilterExpressionField) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FilterExpressionFieldValidator().Validate(ctx, m, opts...)
}

type ValidateFilterExpressionField struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFilterExpressionField) ExpressionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expression")
	}

	return validatorFn, nil
}

func (v *ValidateFilterExpressionField) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FilterExpressionField)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FilterExpressionField got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expression"]; exists {

		vOpts := append(opts, db.WithValidateField("expression"))
		if err := fv(ctx, m.GetExpression(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFilterExpressionFieldValidator = func() *ValidateFilterExpressionField {
	v := &ValidateFilterExpressionField{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpression := v.ExpressionValidationRuleHandler
	rulesExpression := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhExpression(rulesExpression)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FilterExpressionField.expression: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expression"] = vFn

	return v
}()

func FilterExpressionFieldValidator() db.Validator {
	return DefaultFilterExpressionFieldValidator
}

// augmented methods on protoc/std generated struct

func (m *FilterSetField) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FilterSetField) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FilterSetField) DeepCopy() *FilterSetField {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FilterSetField{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FilterSetField) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FilterSetField) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FilterSetFieldValidator().Validate(ctx, m, opts...)
}

type ValidateFilterSetField struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFilterSetField) FieldValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field_value")
	}
	return validatorFn, nil
}

func (v *ValidateFilterSetField) FieldIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field_id")
	}

	return validatorFn, nil
}

func (v *ValidateFilterSetField) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FilterSetField)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FilterSetField got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field_id"]; exists {

		vOpts := append(opts, db.WithValidateField("field_id"))
		if err := fv(ctx, m.GetFieldId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["field_value"]; exists {
		val := m.GetFieldValue()
		vOpts := append(opts,
			db.WithValidateField("field_value"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFieldValue().(type) {
	case *FilterSetField_StringField:
		if fv, exists := v.FldValidators["field_value.string_field"]; exists {
			val := m.GetFieldValue().(*FilterSetField_StringField).StringField
			vOpts := append(opts,
				db.WithValidateField("field_value"),
				db.WithValidateField("string_field"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FilterSetField_DateField:
		if fv, exists := v.FldValidators["field_value.date_field"]; exists {
			val := m.GetFieldValue().(*FilterSetField_DateField).DateField
			vOpts := append(opts,
				db.WithValidateField("field_value"),
				db.WithValidateField("date_field"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FilterSetField_LabelSelectorField:
		if fv, exists := v.FldValidators["field_value.label_selector_field"]; exists {
			val := m.GetFieldValue().(*FilterSetField_LabelSelectorField).LabelSelectorField
			vOpts := append(opts,
				db.WithValidateField("field_value"),
				db.WithValidateField("label_selector_field"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FilterSetField_FilterExpressionField:
		if fv, exists := v.FldValidators["field_value.filter_expression_field"]; exists {
			val := m.GetFieldValue().(*FilterSetField_FilterExpressionField).FilterExpressionField
			vOpts := append(opts,
				db.WithValidateField("field_value"),
				db.WithValidateField("filter_expression_field"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFilterSetFieldValidator = func() *ValidateFilterSetField {
	v := &ValidateFilterSetField{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFieldValue := v.FieldValueValidationRuleHandler
	rulesFieldValue := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFieldValue(rulesFieldValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FilterSetField.field_value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field_value"] = vFn

	vrhFieldId := v.FieldIdValidationRuleHandler
	rulesFieldId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhFieldId(rulesFieldId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FilterSetField.field_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field_id"] = vFn

	v.FldValidators["field_value.string_field"] = FilterStringFieldValidator().Validate
	v.FldValidators["field_value.date_field"] = FilterTimeRangeFieldValidator().Validate
	v.FldValidators["field_value.label_selector_field"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["field_value.filter_expression_field"] = FilterExpressionFieldValidator().Validate

	return v
}()

func FilterSetFieldValidator() db.Validator {
	return DefaultFilterSetFieldValidator
}

// augmented methods on protoc/std generated struct

func (m *FilterStringField) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FilterStringField) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FilterStringField) DeepCopy() *FilterStringField {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FilterStringField{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FilterStringField) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FilterStringField) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FilterStringFieldValidator().Validate(ctx, m, opts...)
}

type ValidateFilterStringField struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFilterStringField) FieldValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for field_values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for field_values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated field_values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items field_values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateFilterStringField) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FilterStringField)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FilterStringField got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field_values"]; exists {
		vOpts := append(opts, db.WithValidateField("field_values"))
		if err := fv(ctx, m.GetFieldValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFilterStringFieldValidator = func() *ValidateFilterStringField {
	v := &ValidateFilterStringField{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFieldValues := v.FieldValuesValidationRuleHandler
	rulesFieldValues := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhFieldValues(rulesFieldValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FilterStringField.field_values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field_values"] = vFn

	return v
}()

func FilterStringFieldValidator() db.Validator {
	return DefaultFilterStringFieldValidator
}

// augmented methods on protoc/std generated struct

func (m *FilterTimeRangeField) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FilterTimeRangeField) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FilterTimeRangeField) DeepCopy() *FilterTimeRangeField {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FilterTimeRangeField{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FilterTimeRangeField) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FilterTimeRangeField) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FilterTimeRangeFieldValidator().Validate(ctx, m, opts...)
}

type ValidateFilterTimeRangeField struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFilterTimeRangeField) RangeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for range_type")
	}
	return validatorFn, nil
}

func (v *ValidateFilterTimeRangeField) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FilterTimeRangeField)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FilterTimeRangeField got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["range_type"]; exists {
		val := m.GetRangeType()
		vOpts := append(opts,
			db.WithValidateField("range_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRangeType().(type) {
	case *FilterTimeRangeField_Absolute:
		if fv, exists := v.FldValidators["range_type.absolute"]; exists {
			val := m.GetRangeType().(*FilterTimeRangeField_Absolute).Absolute
			vOpts := append(opts,
				db.WithValidateField("range_type"),
				db.WithValidateField("absolute"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FilterTimeRangeField_Relative:
		if fv, exists := v.FldValidators["range_type.relative"]; exists {
			val := m.GetRangeType().(*FilterTimeRangeField_Relative).Relative
			vOpts := append(opts,
				db.WithValidateField("range_type"),
				db.WithValidateField("relative"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFilterTimeRangeFieldValidator = func() *ValidateFilterTimeRangeField {
	v := &ValidateFilterTimeRangeField{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRangeType := v.RangeTypeValidationRuleHandler
	rulesRangeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRangeType(rulesRangeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FilterTimeRangeField.range_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["range_type"] = vFn

	v.FldValidators["range_type.absolute"] = ves_io_schema.DateRangeValidator().Validate

	return v
}()

func FilterTimeRangeFieldValidator() db.Validator {
	return DefaultFilterTimeRangeFieldValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ContextKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for context_key")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) FilterFieldsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for filter_fields")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FilterSetField, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FilterSetFieldValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for filter_fields")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FilterSetField)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FilterSetField, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated filter_fields")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items filter_fields")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["context_key"]; exists {

		vOpts := append(opts, db.WithValidateField("context_key"))
		if err := fv(ctx, m.GetContextKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filter_fields"]; exists {
		vOpts := append(opts, db.WithValidateField("filter_fields"))
		if err := fv(ctx, m.GetFilterFields(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhContextKey := v.ContextKeyValidationRuleHandler
	rulesContextKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhContextKey(rulesContextKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.context_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["context_key"] = vFn

	vrhFilterFields := v.FilterFieldsValidationRuleHandler
	rulesFilterFields := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFilterFields(rulesFilterFields)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.filter_fields: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_fields"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ContextKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for context_key")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) FilterFieldsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for filter_fields")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FilterSetField, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FilterSetFieldValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for filter_fields")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FilterSetField)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FilterSetField, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated filter_fields")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items filter_fields")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["context_key"]; exists {

		vOpts := append(opts, db.WithValidateField("context_key"))
		if err := fv(ctx, m.GetContextKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filter_fields"]; exists {
		vOpts := append(opts, db.WithValidateField("filter_fields"))
		if err := fv(ctx, m.GetFilterFields(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhContextKey := v.ContextKeyValidationRuleHandler
	rulesContextKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhContextKey(rulesContextKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.context_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["context_key"] = vFn

	vrhFilterFields := v.FilterFieldsValidationRuleHandler
	rulesFilterFields := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFilterFields(rulesFilterFields)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.filter_fields: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_fields"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ContextKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for context_key")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) FilterFieldsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for filter_fields")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FilterSetField, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FilterSetFieldValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for filter_fields")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FilterSetField)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FilterSetField, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated filter_fields")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items filter_fields")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["context_key"]; exists {

		vOpts := append(opts, db.WithValidateField("context_key"))
		if err := fv(ctx, m.GetContextKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filter_fields"]; exists {
		vOpts := append(opts, db.WithValidateField("filter_fields"))
		if err := fv(ctx, m.GetFilterFields(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhContextKey := v.ContextKeyValidationRuleHandler
	rulesContextKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhContextKey(rulesContextKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.context_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["context_key"] = vFn

	vrhFilterFields := v.FilterFieldsValidationRuleHandler
	rulesFilterFields := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFilterFields(rulesFilterFields)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.filter_fields: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_fields"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ContextKey = f.GetContextKey()
	m.FilterFields = f.GetFilterFields()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ContextKey = m1.ContextKey
	f.FilterFields = m1.FilterFields
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ContextKey = f.GetContextKey()
	m.FilterFields = f.GetFilterFields()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ContextKey = m1.ContextKey
	f.FilterFields = m1.FilterFields
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ContextKey = f.GetContextKey()
	m.FilterFields = f.GetFilterFields()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ContextKey = m1.ContextKey
	f.FilterFields = m1.FilterFields
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

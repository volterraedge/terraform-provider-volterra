// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package network_connector

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableForwardProxy().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.enable_forward_proxy")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetConnectorChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetConnectorChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectorChoice() == nil {
		return nil, nil
	}
	switch m.GetConnectorChoice().(type) {
	case *CreateSpecType_SliToSloSnat:

		drInfos, err := m.GetSliToSloSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToSloSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_slo_snat." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_SliToSloDr:

		return nil, nil

	case *CreateSpecType_SliToGlobalDr:

		drInfos, err := m.GetSliToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_global_dr." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_SliToGlobalSnat:

		drInfos, err := m.GetSliToGlobalSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToGlobalSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_global_snat." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_SloToGlobalDr:

		drInfos, err := m.GetSloToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_dr." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_SloToGlobalSnat:

		drInfos, err := m.GetSloToGlobalSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_snat." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ConnectorChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connector_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connector_choice"]; exists {
		val := m.GetConnectorChoice()
		vOpts := append(opts,
			db.WithValidateField("connector_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectorChoice().(type) {
	case *CreateSpecType_SliToSloSnat:
		if fv, exists := v.FldValidators["connector_choice.sli_to_slo_snat"]; exists {
			val := m.GetConnectorChoice().(*CreateSpecType_SliToSloSnat).SliToSloSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_slo_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SliToSloDr:
		if fv, exists := v.FldValidators["connector_choice.sli_to_slo_dr"]; exists {
			val := m.GetConnectorChoice().(*CreateSpecType_SliToSloDr).SliToSloDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_slo_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SliToGlobalDr:
		if fv, exists := v.FldValidators["connector_choice.sli_to_global_dr"]; exists {
			val := m.GetConnectorChoice().(*CreateSpecType_SliToGlobalDr).SliToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SliToGlobalSnat:
		if fv, exists := v.FldValidators["connector_choice.sli_to_global_snat"]; exists {
			val := m.GetConnectorChoice().(*CreateSpecType_SliToGlobalSnat).SliToGlobalSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_global_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SloToGlobalDr:
		if fv, exists := v.FldValidators["connector_choice.slo_to_global_dr"]; exists {
			val := m.GetConnectorChoice().(*CreateSpecType_SloToGlobalDr).SloToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("slo_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SloToGlobalSnat:
		if fv, exists := v.FldValidators["connector_choice.slo_to_global_snat"]; exists {
			val := m.GetConnectorChoice().(*CreateSpecType_SloToGlobalSnat).SloToGlobalSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("slo_to_global_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *CreateSpecType_DisableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.disable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*CreateSpecType_DisableForwardProxy).DisableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("disable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.enable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*CreateSpecType_EnableForwardProxy).EnableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("enable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectorChoice := v.ConnectorChoiceValidationRuleHandler
	rulesConnectorChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectorChoice(rulesConnectorChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.connector_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connector_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	v.FldValidators["connector_choice.sli_to_slo_snat"] = SnatConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.sli_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.sli_to_global_snat"] = GlobalSnatConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.slo_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.slo_to_global_snat"] = GlobalSnatConnectorTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.enable_forward_proxy"] = ves_io_schema.ForwardProxyConfigTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DynamicReverseProxyListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DynamicReverseProxyListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DynamicReverseProxyListType) DeepCopy() *DynamicReverseProxyListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DynamicReverseProxyListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DynamicReverseProxyListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DynamicReverseProxyListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DynamicReverseProxyListTypeValidator().Validate(ctx, m, opts...)
}

func (m *DynamicReverseProxyListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDrpsDRefInfo()

}

func (m *DynamicReverseProxyListType) GetDrpsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDrps()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("DynamicReverseProxyListType.drps[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("virtual_host.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "drps",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDrpsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DynamicReverseProxyListType) GetDrpsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for i, vref := range m.GetDrps() {
		if vref == nil {
			return nil, fmt.Errorf("DynamicReverseProxyListType.drps[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "virtual_host.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDynamicReverseProxyListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDynamicReverseProxyListType) DrpsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for drps")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for drps")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated drps")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items drps")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDynamicReverseProxyListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DynamicReverseProxyListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DynamicReverseProxyListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["drps"]; exists {
		vOpts := append(opts, db.WithValidateField("drps"))
		if err := fv(ctx, m.GetDrps(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDynamicReverseProxyListTypeValidator = func() *ValidateDynamicReverseProxyListType {
	v := &ValidateDynamicReverseProxyListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDrps := v.DrpsValidationRuleHandler
	rulesDrps := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhDrps(rulesDrps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DynamicReverseProxyListType.drps: %s", err)
		panic(errMsg)
	}
	v.FldValidators["drps"] = vFn

	return v
}()

func DynamicReverseProxyListTypeValidator() db.Validator {
	return DefaultDynamicReverseProxyListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableForwardProxy().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.enable_forward_proxy")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetConnectorChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetConnectorChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectorChoice() == nil {
		return nil, nil
	}
	switch m.GetConnectorChoice().(type) {
	case *GetSpecType_SliToSloSnat:

		drInfos, err := m.GetSliToSloSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToSloSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_slo_snat." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_SliToSloDr:

		return nil, nil

	case *GetSpecType_SliToGlobalDr:

		drInfos, err := m.GetSliToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_global_dr." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_SliToGlobalSnat:

		drInfos, err := m.GetSliToGlobalSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToGlobalSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_global_snat." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_SloToGlobalDr:

		drInfos, err := m.GetSloToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_dr." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_SloToGlobalSnat:

		drInfos, err := m.GetSloToGlobalSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_snat." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ConnectorChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connector_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connector_choice"]; exists {
		val := m.GetConnectorChoice()
		vOpts := append(opts,
			db.WithValidateField("connector_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectorChoice().(type) {
	case *GetSpecType_SliToSloSnat:
		if fv, exists := v.FldValidators["connector_choice.sli_to_slo_snat"]; exists {
			val := m.GetConnectorChoice().(*GetSpecType_SliToSloSnat).SliToSloSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_slo_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SliToSloDr:
		if fv, exists := v.FldValidators["connector_choice.sli_to_slo_dr"]; exists {
			val := m.GetConnectorChoice().(*GetSpecType_SliToSloDr).SliToSloDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_slo_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SliToGlobalDr:
		if fv, exists := v.FldValidators["connector_choice.sli_to_global_dr"]; exists {
			val := m.GetConnectorChoice().(*GetSpecType_SliToGlobalDr).SliToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SliToGlobalSnat:
		if fv, exists := v.FldValidators["connector_choice.sli_to_global_snat"]; exists {
			val := m.GetConnectorChoice().(*GetSpecType_SliToGlobalSnat).SliToGlobalSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_global_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SloToGlobalDr:
		if fv, exists := v.FldValidators["connector_choice.slo_to_global_dr"]; exists {
			val := m.GetConnectorChoice().(*GetSpecType_SloToGlobalDr).SloToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("slo_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SloToGlobalSnat:
		if fv, exists := v.FldValidators["connector_choice.slo_to_global_snat"]; exists {
			val := m.GetConnectorChoice().(*GetSpecType_SloToGlobalSnat).SloToGlobalSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("slo_to_global_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *GetSpecType_DisableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.disable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GetSpecType_DisableForwardProxy).DisableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("disable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.enable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*GetSpecType_EnableForwardProxy).EnableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("enable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectorChoice := v.ConnectorChoiceValidationRuleHandler
	rulesConnectorChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectorChoice(rulesConnectorChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.connector_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connector_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	v.FldValidators["connector_choice.sli_to_slo_snat"] = SnatConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.sli_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.sli_to_global_snat"] = GlobalSnatConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.slo_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.slo_to_global_snat"] = GlobalSnatConnectorTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.enable_forward_proxy"] = ves_io_schema.ForwardProxyConfigTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSnatConnectorType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSnatConnectorType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSnatConnectorType) DeepCopy() *GlobalSnatConnectorType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSnatConnectorType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSnatConnectorType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSnatConnectorType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSnatConnectorTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSnatConnectorType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetGlobalVnDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalVnDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSnatConfigDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSnatConfigDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSnatConnectorType) GetGlobalVnDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetGlobalVn()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("virtual_network.Object")
	dri := db.DRefInfo{
		RefdType:   "virtual_network.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "global_vn",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetGlobalVnDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSnatConnectorType) GetGlobalVnDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_network.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_network")
	}

	vref := m.GetGlobalVn()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "virtual_network.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSnatConnectorType) GetSnatConfigDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSnatConfig() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSnatConfig().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSnatConfig().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "snat_config." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSnatConnectorType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSnatConnectorType) GlobalVnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for global_vn")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSnatConnectorType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSnatConnectorType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSnatConnectorType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["global_vn"]; exists {

		vOpts := append(opts, db.WithValidateField("global_vn"))
		if err := fv(ctx, m.GetGlobalVn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["snat_config"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_config"))
		if err := fv(ctx, m.GetSnatConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSnatConnectorTypeValidator = func() *ValidateGlobalSnatConnectorType {
	v := &ValidateGlobalSnatConnectorType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGlobalVn := v.GlobalVnValidationRuleHandler
	rulesGlobalVn := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGlobalVn(rulesGlobalVn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSnatConnectorType.global_vn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_vn"] = vFn

	v.FldValidators["snat_config"] = SnatConnectorTypeValidator().Validate

	return v
}()

func GlobalSnatConnectorTypeValidator() db.Validator {
	return DefaultGlobalSnatConnectorTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetForwardProxy().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.forward_proxy")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDynamicReverseProxyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDynamicReverseProxyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInsideNetworkDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInsideNetworkDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOutsideNetworkDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOutsideNetworkDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetDynamicReverseProxyDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetDynamicReverseProxy()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.dynamic_reverse_proxy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "dynamic_reverse_proxy",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetDynamicReverseProxyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDynamicReverseProxyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetDynamicReverseProxy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetInsideNetworkDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetInsideNetwork()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.inside_network[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_network.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "inside_network",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetInsideNetworkDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetInsideNetworkDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_network.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_network")
	}
	for _, ref := range m.GetInsideNetwork() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetOutsideNetworkDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetOutsideNetwork()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.outside_network[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_network.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "outside_network",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetOutsideNetworkDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetOutsideNetworkDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_network.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_network")
	}
	for _, ref := range m.GetOutsideNetwork() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ConnectorTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(NetworkConnectorType)
		return int32(i)
	}
	// NetworkConnectorType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, NetworkConnectorType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connector_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OutsideNetworkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for outside_network_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OutsideNetworkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for outside_network")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for outside_network")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated outside_network")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items outside_network")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) InsideNetworkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_network_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) InsideNetworkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for inside_network")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for inside_network")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated inside_network")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items inside_network")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SnatPoolTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(NetworkConnectorSNATPoolType)
		return int32(i)
	}
	// NetworkConnectorSNATPoolType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, NetworkConnectorSNATPoolType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for snat_pool_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NatPoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for nat_pool")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.Ipv4SubnetType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.Ipv4SubnetTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for nat_pool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.Ipv4SubnetType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.Ipv4SubnetType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated nat_pool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items nat_pool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DynamicReverseProxyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for dynamic_reverse_proxy")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dynamic_reverse_proxy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dynamic_reverse_proxy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dynamic_reverse_proxy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connector_type"]; exists {

		vOpts := append(opts, db.WithValidateField("connector_type"))
		if err := fv(ctx, m.GetConnectorType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dynamic_reverse_proxy"]; exists {
		vOpts := append(opts, db.WithValidateField("dynamic_reverse_proxy"))
		if err := fv(ctx, m.GetDynamicReverseProxy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forward_proxy"]; exists {

		vOpts := append(opts, db.WithValidateField("forward_proxy"))
		if err := fv(ctx, m.GetForwardProxy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inside_network"]; exists {
		vOpts := append(opts, db.WithValidateField("inside_network"))
		if err := fv(ctx, m.GetInsideNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inside_network_type"]; exists {

		vOpts := append(opts, db.WithValidateField("inside_network_type"))
		if err := fv(ctx, m.GetInsideNetworkType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nat_pool"]; exists {
		vOpts := append(opts, db.WithValidateField("nat_pool"))
		if err := fv(ctx, m.GetNatPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_network"]; exists {
		vOpts := append(opts, db.WithValidateField("outside_network"))
		if err := fv(ctx, m.GetOutsideNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["outside_network_type"]; exists {

		vOpts := append(opts, db.WithValidateField("outside_network_type"))
		if err := fv(ctx, m.GetOutsideNetworkType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["proxy_type"]; exists {

		vOpts := append(opts, db.WithValidateField("proxy_type"))
		if err := fv(ctx, m.GetProxyType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["snat_pool_type"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_pool_type"))
		if err := fv(ctx, m.GetSnatPoolType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectorType := v.ConnectorTypeValidationRuleHandler
	rulesConnectorType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,2]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhConnectorType(rulesConnectorType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.connector_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connector_type"] = vFn

	vrhOutsideNetworkType := v.OutsideNetworkTypeValidationRuleHandler
	rulesOutsideNetworkType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1,2,3,4]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOutsideNetworkType(rulesOutsideNetworkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.outside_network_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_network_type"] = vFn

	vrhOutsideNetwork := v.OutsideNetworkValidationRuleHandler
	rulesOutsideNetwork := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhOutsideNetwork(rulesOutsideNetwork)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.outside_network: %s", err)
		panic(errMsg)
	}
	v.FldValidators["outside_network"] = vFn

	vrhInsideNetworkType := v.InsideNetworkTypeValidationRuleHandler
	rulesInsideNetworkType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1,2]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhInsideNetworkType(rulesInsideNetworkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.inside_network_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_network_type"] = vFn

	vrhInsideNetwork := v.InsideNetworkValidationRuleHandler
	rulesInsideNetwork := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhInsideNetwork(rulesInsideNetwork)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.inside_network: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_network"] = vFn

	vrhSnatPoolType := v.SnatPoolTypeValidationRuleHandler
	rulesSnatPoolType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0]",
	}
	vFn, err = vrhSnatPoolType(rulesSnatPoolType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.snat_pool_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["snat_pool_type"] = vFn

	vrhNatPool := v.NatPoolValidationRuleHandler
	rulesNatPool := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNatPool(rulesNatPool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.nat_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nat_pool"] = vFn

	vrhDynamicReverseProxy := v.DynamicReverseProxyValidationRuleHandler
	rulesDynamicReverseProxy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhDynamicReverseProxy(rulesDynamicReverseProxy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.dynamic_reverse_proxy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dynamic_reverse_proxy"] = vFn

	v.FldValidators["forward_proxy"] = ves_io_schema.ForwardProxyConfigTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkConnectorStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkConnectorStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkConnectorStatus) DeepCopy() *NetworkConnectorStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkConnectorStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkConnectorStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkConnectorStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkConnectorStatusValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkConnectorStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkConnectorStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkConnectorStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkConnectorStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["installed"]; exists {

		vOpts := append(opts, db.WithValidateField("installed"))
		if err := fv(ctx, m.GetInstalled(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkConnectorStatusValidator = func() *ValidateNetworkConnectorStatus {
	v := &ValidateNetworkConnectorStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkConnectorStatusValidator() db.Validator {
	return DefaultNetworkConnectorStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableForwardProxy().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.enable_forward_proxy")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetConnectorChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetConnectorChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConnectorChoice() == nil {
		return nil, nil
	}
	switch m.GetConnectorChoice().(type) {
	case *ReplaceSpecType_SliToSloSnat:

		drInfos, err := m.GetSliToSloSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToSloSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_slo_snat." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_SliToSloDr:

		return nil, nil

	case *ReplaceSpecType_SliToGlobalDr:

		drInfos, err := m.GetSliToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_global_dr." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_SliToGlobalSnat:

		drInfos, err := m.GetSliToGlobalSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliToGlobalSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_to_global_snat." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_SloToGlobalDr:

		drInfos, err := m.GetSloToGlobalDr().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalDr().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_dr." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_SloToGlobalSnat:

		drInfos, err := m.GetSloToGlobalSnat().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloToGlobalSnat().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_to_global_snat." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ConnectorChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connector_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connector_choice"]; exists {
		val := m.GetConnectorChoice()
		vOpts := append(opts,
			db.WithValidateField("connector_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConnectorChoice().(type) {
	case *ReplaceSpecType_SliToSloSnat:
		if fv, exists := v.FldValidators["connector_choice.sli_to_slo_snat"]; exists {
			val := m.GetConnectorChoice().(*ReplaceSpecType_SliToSloSnat).SliToSloSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_slo_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SliToSloDr:
		if fv, exists := v.FldValidators["connector_choice.sli_to_slo_dr"]; exists {
			val := m.GetConnectorChoice().(*ReplaceSpecType_SliToSloDr).SliToSloDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_slo_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SliToGlobalDr:
		if fv, exists := v.FldValidators["connector_choice.sli_to_global_dr"]; exists {
			val := m.GetConnectorChoice().(*ReplaceSpecType_SliToGlobalDr).SliToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SliToGlobalSnat:
		if fv, exists := v.FldValidators["connector_choice.sli_to_global_snat"]; exists {
			val := m.GetConnectorChoice().(*ReplaceSpecType_SliToGlobalSnat).SliToGlobalSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("sli_to_global_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SloToGlobalDr:
		if fv, exists := v.FldValidators["connector_choice.slo_to_global_dr"]; exists {
			val := m.GetConnectorChoice().(*ReplaceSpecType_SloToGlobalDr).SloToGlobalDr
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("slo_to_global_dr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SloToGlobalSnat:
		if fv, exists := v.FldValidators["connector_choice.slo_to_global_snat"]; exists {
			val := m.GetConnectorChoice().(*ReplaceSpecType_SloToGlobalSnat).SloToGlobalSnat
			vOpts := append(opts,
				db.WithValidateField("connector_choice"),
				db.WithValidateField("slo_to_global_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *ReplaceSpecType_DisableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.disable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*ReplaceSpecType_DisableForwardProxy).DisableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("disable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.enable_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*ReplaceSpecType_EnableForwardProxy).EnableForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("enable_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectorChoice := v.ConnectorChoiceValidationRuleHandler
	rulesConnectorChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConnectorChoice(rulesConnectorChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.connector_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connector_choice"] = vFn

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	v.FldValidators["connector_choice.sli_to_slo_snat"] = SnatConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.sli_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.sli_to_global_snat"] = GlobalSnatConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.slo_to_global_dr"] = ves_io_schema_views.GlobalConnectorTypeValidator().Validate
	v.FldValidators["connector_choice.slo_to_global_snat"] = GlobalSnatConnectorTypeValidator().Validate

	v.FldValidators["forward_proxy_choice.enable_forward_proxy"] = ves_io_schema.ForwardProxyConfigTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SnatConnectorType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SnatConnectorType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SnatConnectorType) DeepCopy() *SnatConnectorType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SnatConnectorType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SnatConnectorType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SnatConnectorType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SnatConnectorTypeValidator().Validate(ctx, m, opts...)
}

func (m *SnatConnectorType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPoolChoiceDRefInfo()

}

func (m *SnatConnectorType) GetPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetPoolChoice().(type) {
	case *SnatConnectorType_InterfaceIp:

		return nil, nil

	case *SnatConnectorType_SnatPoolAllocator:

		vref := m.GetSnatPoolAllocator()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("address_allocator.Object")
		dri := db.DRefInfo{
			RefdType:   "address_allocator.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "snat_pool_allocator",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetPoolChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SnatConnectorType) GetPoolChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetPoolChoice().(type) {
	case *SnatConnectorType_InterfaceIp:

	case *SnatConnectorType_SnatPoolAllocator:
		refdType, err := d.TypeForEntryKind("", "", "address_allocator.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: address_allocator")
		}

		vref := m.GetSnatPoolAllocator()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "address_allocator.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateSnatConnectorType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSnatConnectorType) PoolChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for pool_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSnatConnectorType) RoutingChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for routing_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSnatConnectorType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SnatConnectorType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SnatConnectorType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pool_choice"]; exists {
		val := m.GetPoolChoice()
		vOpts := append(opts,
			db.WithValidateField("pool_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPoolChoice().(type) {
	case *SnatConnectorType_InterfaceIp:
		if fv, exists := v.FldValidators["pool_choice.interface_ip"]; exists {
			val := m.GetPoolChoice().(*SnatConnectorType_InterfaceIp).InterfaceIp
			vOpts := append(opts,
				db.WithValidateField("pool_choice"),
				db.WithValidateField("interface_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SnatConnectorType_SnatPool:
		if fv, exists := v.FldValidators["pool_choice.snat_pool"]; exists {
			val := m.GetPoolChoice().(*SnatConnectorType_SnatPool).SnatPool
			vOpts := append(opts,
				db.WithValidateField("pool_choice"),
				db.WithValidateField("snat_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SnatConnectorType_SnatPoolAllocator:
		if fv, exists := v.FldValidators["pool_choice.snat_pool_allocator"]; exists {
			val := m.GetPoolChoice().(*SnatConnectorType_SnatPoolAllocator).SnatPoolAllocator
			vOpts := append(opts,
				db.WithValidateField("pool_choice"),
				db.WithValidateField("snat_pool_allocator"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routing_choice"]; exists {
		val := m.GetRoutingChoice()
		vOpts := append(opts,
			db.WithValidateField("routing_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRoutingChoice().(type) {
	case *SnatConnectorType_DefaultGwSnat:
		if fv, exists := v.FldValidators["routing_choice.default_gw_snat"]; exists {
			val := m.GetRoutingChoice().(*SnatConnectorType_DefaultGwSnat).DefaultGwSnat
			vOpts := append(opts,
				db.WithValidateField("routing_choice"),
				db.WithValidateField("default_gw_snat"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SnatConnectorType_DynamicRouting:
		if fv, exists := v.FldValidators["routing_choice.dynamic_routing"]; exists {
			val := m.GetRoutingChoice().(*SnatConnectorType_DynamicRouting).DynamicRouting
			vOpts := append(opts,
				db.WithValidateField("routing_choice"),
				db.WithValidateField("dynamic_routing"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSnatConnectorTypeValidator = func() *ValidateSnatConnectorType {
	v := &ValidateSnatConnectorType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPoolChoice := v.PoolChoiceValidationRuleHandler
	rulesPoolChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPoolChoice(rulesPoolChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SnatConnectorType.pool_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["pool_choice"] = vFn

	vrhRoutingChoice := v.RoutingChoiceValidationRuleHandler
	rulesRoutingChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRoutingChoice(rulesRoutingChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SnatConnectorType.routing_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routing_choice"] = vFn

	v.FldValidators["pool_choice.snat_pool_allocator"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func SnatConnectorTypeValidator() db.Validator {
	return DefaultSnatConnectorTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}

}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}

}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}

}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

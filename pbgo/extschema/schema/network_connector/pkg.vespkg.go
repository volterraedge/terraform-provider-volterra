// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package network_connector

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.network_connector.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.network_connector.Object"] = ObjectValidator()
	vr["ves.io.schema.network_connector.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.network_connector.CreateRequest"] = CreateRequestValidator()
	vr["ves.io.schema.network_connector.CreateResponse"] = CreateResponseValidator()
	vr["ves.io.schema.network_connector.DeleteRequest"] = DeleteRequestValidator()
	vr["ves.io.schema.network_connector.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.network_connector.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.network_connector.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.network_connector.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.network_connector.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.network_connector.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.network_connector.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.network_connector.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.network_connector.DynamicReverseProxyListType"] = DynamicReverseProxyListTypeValidator()
	vr["ves.io.schema.network_connector.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.network_connector.GlobalSnatConnectorType"] = GlobalSnatConnectorTypeValidator()
	vr["ves.io.schema.network_connector.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.network_connector.NetworkConnectorStatus"] = NetworkConnectorStatusValidator()
	vr["ves.io.schema.network_connector.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.network_connector.SnatConnectorType"] = SnatConnectorTypeValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.network_connector.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.network_connector.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.network_connector.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.network_connector.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.network_connector.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.network_connector.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.network_connector.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.network_connector.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.network_connector.API.Create"] = []string{
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.blindfold_secret_info_internal",
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.secret_encoding_type",
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.vault_secret_info",
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.wingman_secret_info",
		"spec.sli_to_global_snat",
		"spec.sli_to_slo_dr",
		"spec.sli_to_slo_snat.dynamic_routing",
		"spec.sli_to_slo_snat.snat_pool",
		"spec.sli_to_slo_snat.snat_pool_allocator",
		"spec.slo_to_global_snat",
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.network_connector.API.Create"] = "ves.io.schema.network_connector.CreateRequest"

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.network_connector.API.Replace"] = []string{
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.blindfold_secret_info_internal",
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.secret_encoding_type",
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.vault_secret_info",
		"spec.enable_forward_proxy.tls_intercept.custom_certificate.private_key.wingman_secret_info",
		"spec.sli_to_global_snat",
		"spec.sli_to_slo_dr",
		"spec.sli_to_slo_snat.dynamic_routing",
		"spec.sli_to_slo_snat.snat_pool",
		"spec.sli_to_slo_snat.snat_pool_allocator",
		"spec.slo_to_global_snat",
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.network_connector.API.Replace"] = "ves.io.schema.network_connector.ReplaceRequest"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.network_connector.API"] = "config"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.network_connector.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.network_connector.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.network_connector.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.network_connector.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.network_connector.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.network_connector.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.network_connector.Object"] = NewCRUDAPIServer

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

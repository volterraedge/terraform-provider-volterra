//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package dns_domain

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DNSDomainStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSDomainStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSDomainStatus) DeepCopy() *DNSDomainStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSDomainStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSDomainStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSDomainStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSDomainStatusValidator().Validate(ctx, m, opts...)
}

type ValidateDNSDomainStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSDomainStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSDomainStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSDomainStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dnssec_status"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_status"))
		if err := fv(ctx, m.GetDnssecStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_verification"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_verification"))
		if err := fv(ctx, m.GetDomainVerification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_nameservers"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_nameservers"))
		for idx, item := range m.GetVolterraNameservers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSDomainStatusValidator = func() *ValidateDNSDomainStatus {
	v := &ValidateDNSDomainStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DNSDomainStatusValidator() db.Validator {
	return DefaultDNSDomainStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSSECStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSSECStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSSECStatus) DeepCopy() *DNSSECStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSSECStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSSECStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSSECStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSSECStatusValidator().Validate(ctx, m, opts...)
}

type ValidateDNSSECStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSSECStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSSECStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSSECStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("algorithm"))
		if err := fv(ctx, m.GetAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["digest"]; exists {

		vOpts := append(opts, db.WithValidateField("digest"))
		if err := fv(ctx, m.GetDigest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["digest_type"]; exists {

		vOpts := append(opts, db.WithValidateField("digest_type"))
		if err := fv(ctx, m.GetDigestType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["flags"]; exists {

		vOpts := append(opts, db.WithValidateField("flags"))
		if err := fv(ctx, m.GetFlags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["key_tag"]; exists {

		vOpts := append(opts, db.WithValidateField("key_tag"))
		if err := fv(ctx, m.GetKeyTag(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_key"]; exists {

		vOpts := append(opts, db.WithValidateField("public_key"))
		if err := fv(ctx, m.GetPublicKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ttl"]; exists {

		vOpts := append(opts, db.WithValidateField("ttl"))
		if err := fv(ctx, m.GetTtl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSSECStatusValidator = func() *ValidateDNSSECStatus {
	v := &ValidateDNSSECStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DNSSECStatusValidator() db.Validator {
	return DefaultDNSSECStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *SpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SpecType) DeepCopy() *SpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *SpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetGcSpecDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *SpecType) GetGcSpecDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetGcSpec() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetGcSpec().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "gc_spec." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["gc_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("gc_spec"))
		if err := fv(ctx, m.GetGcSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSpecTypeValidator = func() *ValidateSpecType {
	v := &ValidateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["gc_spec"] = GlobalSpecTypeValidator().Validate

	return v
}()

func SpecTypeValidator() db.Validator {
	return DefaultSpecTypeValidator
}

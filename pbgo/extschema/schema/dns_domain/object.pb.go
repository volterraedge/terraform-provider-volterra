// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_domain/object.proto

package dns_domain

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DNS Domain Verification Type
//
// x-displayName: "DNS Domain Verification Type"
// Verification Status of DNS Domain
type DNSDomainVerificationType int32

const (
	// x-displayName: "DNS Domain Verification Pending"
	// Verification Status of DNS Domain has not succeeded yet
	DNS_DOMAIN_VERIFICATION_PENDING DNSDomainVerificationType = 0
	// x-displayName: "DNS Domain Verification Success"
	// Verification Status of DNS Domain is successful, sub domain can be used now
	DNS_DOMAIN_VERIFICATION_SUCCESS DNSDomainVerificationType = 1
	// x-displayName: "DNS Domain Verification Failed"
	// Verification Status of DNS Domain has failed and this domain cannot be used.
	DNS_DOMAIN_VERIFICATION_FAILED DNSDomainVerificationType = 2
)

var DNSDomainVerificationType_name = map[int32]string{
	0: "DNS_DOMAIN_VERIFICATION_PENDING",
	1: "DNS_DOMAIN_VERIFICATION_SUCCESS",
	2: "DNS_DOMAIN_VERIFICATION_FAILED",
}

var DNSDomainVerificationType_value = map[string]int32{
	"DNS_DOMAIN_VERIFICATION_PENDING": 0,
	"DNS_DOMAIN_VERIFICATION_SUCCESS": 1,
	"DNS_DOMAIN_VERIFICATION_FAILED":  2,
}

func (DNSDomainVerificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96fdda59be23e7e7, []int{0}
}

// DNS Domain
//
// x-displayName: "DNS Domain"
// DNS Domain object
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the desired behavior of the DNS Domain
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_96fdda59be23e7e7, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// DNS Domain specification
//
// x-displayName: "Specification"
// Shape of the DNS Domain specification
type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	GcSpec *GlobalSpecType `protobuf:"bytes,2,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_96fdda59be23e7e7, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// DNSSEC Status
//
// x-displayName: "DNSSEC Status"
// Status of DNSSEC in DNS Domain
type DNSSECStatus struct {
	// DNSSEC Mode
	//
	// x-displayName: "DNSSEC Mode"
	// Indicate whether DNSSEC is enabled or disabled on the DNS domain
	Mode DNSSECMode `protobuf:"varint,1,opt,name=mode,proto3,enum=ves.io.schema.dns_domain.DNSSECMode" json:"mode,omitempty"`
	// Key Tag
	//
	// x-displayName: "Key Tag"
	// Key tag of DNSSEC, when enabled
	KeyTag string `protobuf:"bytes,2,opt,name=key_tag,json=keyTag,proto3" json:"key_tag,omitempty"`
	// Algorithm
	//
	// x-displayName: "Algorithm"
	// Signing algorithm used
	Algorithm string `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Flags
	//
	// x-displayName: "Flags"
	// DNSSEC Flags
	Flags string `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
	// Digest Type
	//
	// x-displayName: "Digest Type"
	// Type of DNSSEC digest that follows
	DigestType string `protobuf:"bytes,5,opt,name=digest_type,json=digestType,proto3" json:"digest_type,omitempty"`
	// Digest
	//
	// x-displayName: "Digest"
	// DNSSEC Digest
	Digest string `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
	// Public Key
	//
	// x-displayName: "Public Key"
	// The zone's public key
	PublicKey string `protobuf:"bytes,7,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// TTL
	//
	// x-displayName: "TTL"
	// TTL value for DS record
	Ttl uint32 `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *DNSSECStatus) Reset()      { *m = DNSSECStatus{} }
func (*DNSSECStatus) ProtoMessage() {}
func (*DNSSECStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_96fdda59be23e7e7, []int{2}
}
func (m *DNSSECStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSECStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSSECStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSECStatus.Merge(m, src)
}
func (m *DNSSECStatus) XXX_Size() int {
	return m.Size()
}
func (m *DNSSECStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSECStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSECStatus proto.InternalMessageInfo

func (m *DNSSECStatus) GetMode() DNSSECMode {
	if m != nil {
		return m.Mode
	}
	return DNSSEC_DISABLE
}

func (m *DNSSECStatus) GetKeyTag() string {
	if m != nil {
		return m.KeyTag
	}
	return ""
}

func (m *DNSSECStatus) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *DNSSECStatus) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

func (m *DNSSECStatus) GetDigestType() string {
	if m != nil {
		return m.DigestType
	}
	return ""
}

func (m *DNSSECStatus) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *DNSSECStatus) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *DNSSECStatus) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// DNS Domain Status
//
// x-displayName: "DNS Domain Status"
// Status DNS Domain
type DNSDomainStatus struct {
	// Domain Verification status
	//
	// x-displayName: "Domain Verification Status"
	// Status of DNS domain verification process.
	DomainVerification DNSDomainVerificationType `protobuf:"varint,1,opt,name=domain_verification,json=domainVerification,proto3,enum=ves.io.schema.dns_domain.DNSDomainVerificationType" json:"domain_verification,omitempty"`
	// Volterra Nameservers
	//
	// x-displayName: "Volterra Nameservers"
	// Status of DNS domain verification process.
	VolterraNameservers []string `protobuf:"bytes,2,rep,name=volterra_nameservers,json=volterraNameservers,proto3" json:"volterra_nameservers,omitempty"`
	// DNSSEC Status
	//
	// x-displayName: "DNSSEC Status"
	// Status of DNSSEC on the dns domain
	DnssecStatus *DNSSECStatus `protobuf:"bytes,3,opt,name=dnssec_status,json=dnssecStatus,proto3" json:"dnssec_status,omitempty"`
}

func (m *DNSDomainStatus) Reset()      { *m = DNSDomainStatus{} }
func (*DNSDomainStatus) ProtoMessage() {}
func (*DNSDomainStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_96fdda59be23e7e7, []int{3}
}
func (m *DNSDomainStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSDomainStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSDomainStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSDomainStatus.Merge(m, src)
}
func (m *DNSDomainStatus) XXX_Size() int {
	return m.Size()
}
func (m *DNSDomainStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSDomainStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DNSDomainStatus proto.InternalMessageInfo

func (m *DNSDomainStatus) GetDomainVerification() DNSDomainVerificationType {
	if m != nil {
		return m.DomainVerification
	}
	return DNS_DOMAIN_VERIFICATION_PENDING
}

func (m *DNSDomainStatus) GetVolterraNameservers() []string {
	if m != nil {
		return m.VolterraNameservers
	}
	return nil
}

func (m *DNSDomainStatus) GetDnssecStatus() *DNSSECStatus {
	if m != nil {
		return m.DnssecStatus
	}
	return nil
}

// Status of DNS Domain
//
// x-displayName: "Status"
// Most recently observed status of object
type StatusObject struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard status's metadata
	Metadata *schema.StatusMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// object_refs
	//
	// x-displayName: "Config Object"
	// Reference to object for current status
	ObjectRefs []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// conditions
	//
	// x-displayName: "Conditions"
	// Conditions reported by various component of the system
	Conditions []*schema.ConditionType `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Verification Status
	//
	// x-displayName: "Verification Status"
	// Verification Status of the DNS domain
	VerificationStatus *DNSDomainStatus `protobuf:"bytes,4,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
}

func (m *StatusObject) Reset()      { *m = StatusObject{} }
func (*StatusObject) ProtoMessage() {}
func (*StatusObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_96fdda59be23e7e7, []int{4}
}
func (m *StatusObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusObject.Merge(m, src)
}
func (m *StatusObject) XXX_Size() int {
	return m.Size()
}
func (m *StatusObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusObject.DiscardUnknown(m)
}

var xxx_messageInfo_StatusObject proto.InternalMessageInfo

func (m *StatusObject) GetMetadata() *schema.StatusMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatusObject) GetObjectRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.ObjectRefs
	}
	return nil
}

func (m *StatusObject) GetConditions() []*schema.ConditionType {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StatusObject) GetVerificationStatus() *DNSDomainStatus {
	if m != nil {
		return m.VerificationStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.dns_domain.DNSDomainVerificationType", DNSDomainVerificationType_name, DNSDomainVerificationType_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_domain.DNSDomainVerificationType", DNSDomainVerificationType_name, DNSDomainVerificationType_value)
	proto.RegisterType((*Object)(nil), "ves.io.schema.dns_domain.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.dns_domain.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.dns_domain.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.dns_domain.SpecType")
	proto.RegisterType((*DNSSECStatus)(nil), "ves.io.schema.dns_domain.DNSSECStatus")
	golang_proto.RegisterType((*DNSSECStatus)(nil), "ves.io.schema.dns_domain.DNSSECStatus")
	proto.RegisterType((*DNSDomainStatus)(nil), "ves.io.schema.dns_domain.DNSDomainStatus")
	golang_proto.RegisterType((*DNSDomainStatus)(nil), "ves.io.schema.dns_domain.DNSDomainStatus")
	proto.RegisterType((*StatusObject)(nil), "ves.io.schema.dns_domain.StatusObject")
	golang_proto.RegisterType((*StatusObject)(nil), "ves.io.schema.dns_domain.StatusObject")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_domain/object.proto", fileDescriptor_96fdda59be23e7e7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_domain/object.proto", fileDescriptor_96fdda59be23e7e7)
}

var fileDescriptor_96fdda59be23e7e7 = []byte{
	// 840 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0x38, 0xa9, 0x93, 0xbc, 0xf9, 0xa8, 0x35, 0x29, 0xb0, 0x2d, 0xed, 0x34, 0x72, 0x0b,
	0x32, 0x48, 0x5e, 0x8b, 0x54, 0x42, 0x50, 0x21, 0x50, 0x6a, 0xbb, 0x95, 0xd5, 0x7a, 0x83, 0x76,
	0x43, 0x0f, 0xbd, 0xac, 0xc6, 0xbb, 0xe3, 0xcd, 0x12, 0xaf, 0x67, 0xb5, 0x33, 0x5e, 0xe1, 0x03,
	0x12, 0xe2, 0x86, 0xc4, 0x81, 0x9f, 0x81, 0xf8, 0x15, 0x94, 0x03, 0x42, 0x9c, 0x22, 0x4e, 0x39,
	0x92, 0xcd, 0x85, 0x63, 0x25, 0x0e, 0x1c, 0x41, 0x9e, 0xf1, 0xc6, 0x76, 0x1b, 0x97, 0xdc, 0xde,
	0x8f, 0xe7, 0x79, 0xde, 0x8f, 0x99, 0xd9, 0x85, 0x77, 0x52, 0x26, 0xcc, 0x90, 0xd7, 0x85, 0x77,
	0xc8, 0x22, 0x5a, 0xf7, 0x07, 0xc2, 0xf5, 0x79, 0x44, 0xc3, 0x41, 0x9d, 0x77, 0xbf, 0x64, 0x9e,
	0x34, 0xe3, 0x84, 0x4b, 0x8e, 0x0d, 0x0d, 0x33, 0x35, 0xcc, 0x9c, 0xc2, 0x6e, 0xd4, 0x82, 0x50,
	0x1e, 0x0e, 0xbb, 0xa6, 0xc7, 0xa3, 0x7a, 0xc0, 0x03, 0x5e, 0x57, 0x84, 0xee, 0xb0, 0xa7, 0x3c,
	0xe5, 0x28, 0x4b, 0x0b, 0xdd, 0xb8, 0xbb, 0xb0, 0x9e, 0x1c, 0xc5, 0x4c, 0x4c, 0x50, 0x6f, 0xcf,
	0xa3, 0x78, 0x2c, 0x43, 0x3e, 0xc8, 0x93, 0xd7, 0xe7, 0x93, 0xb3, 0xbc, 0xca, 0x7c, 0x2a, 0x65,
	0x82, 0x0d, 0xd2, 0x79, 0x7a, 0xe5, 0x6f, 0x04, 0xa5, 0x7d, 0x35, 0x1b, 0xfe, 0x18, 0x56, 0x23,
	0x26, 0xa9, 0x4f, 0x25, 0x35, 0xd0, 0x0e, 0xaa, 0xae, 0xef, 0xde, 0x32, 0xe7, 0x07, 0xd5, 0xc0,
	0x0e, 0x93, 0xf4, 0x60, 0x14, 0x33, 0xfb, 0x1c, 0x8e, 0x9f, 0xc0, 0x55, 0x31, 0x12, 0x92, 0x45,
	0xee, 0xb9, 0x42, 0x51, 0x29, 0xdc, 0x79, 0x49, 0xc1, 0x51, 0xa8, 0x97, 0x74, 0xb6, 0x34, 0xb7,
	0x93, 0xab, 0x7d, 0x08, 0xcb, 0x22, 0x66, 0x9e, 0xb1, 0xa4, 0x24, 0x2a, 0xe6, 0xa2, 0x6d, 0x9b,
	0x4e, 0xcc, 0x3c, 0xa5, 0xa0, 0xf0, 0xf7, 0xab, 0xdf, 0x7e, 0x56, 0xd2, 0x52, 0xbf, 0x3c, 0x37,
	0x8a, 0x65, 0xf4, 0xfb, 0x73, 0xe3, 0x8d, 0x94, 0x89, 0x5a, 0xc8, 0x6b, 0xe1, 0xa0, 0x97, 0x50,
	0x21, 0x93, 0xa1, 0x27, 0x87, 0x09, 0xab, 0x74, 0x60, 0x35, 0xe7, 0xe2, 0x3d, 0x58, 0x09, 0x3c,
	0x57, 0x15, 0xd4, 0x3d, 0x57, 0x17, 0x17, 0x7c, 0xd4, 0xe7, 0x5d, 0xda, 0x3f, 0x2f, 0x5b, 0x0a,
	0xbc, 0xb1, 0x5d, 0xf9, 0x17, 0xc1, 0x46, 0xd3, 0x72, 0x9c, 0x56, 0xc3, 0x91, 0x54, 0x0e, 0x05,
	0xfe, 0x08, 0x96, 0x23, 0xee, 0x33, 0xb5, 0xc6, 0xad, 0xdd, 0xbb, 0x8b, 0x05, 0x35, 0xab, 0xc3,
	0x7d, 0x66, 0x2b, 0x06, 0x7e, 0x0b, 0x56, 0x8e, 0xd8, 0xc8, 0x95, 0x34, 0x50, 0xdd, 0xac, 0xd9,
	0xa5, 0x23, 0x36, 0x3a, 0xa0, 0x01, 0xbe, 0x09, 0x6b, 0xb4, 0x1f, 0xf0, 0x24, 0x94, 0x87, 0x91,
	0xda, 0xcc, 0x9a, 0x3d, 0x0d, 0xe0, 0x6b, 0x70, 0xa5, 0xd7, 0xa7, 0x81, 0x30, 0x96, 0x55, 0x46,
	0x3b, 0xf8, 0x36, 0xac, 0xfb, 0x61, 0xc0, 0x84, 0x74, 0xc7, 0xd7, 0xc2, 0xb8, 0xa2, 0x72, 0xa0,
	0x43, 0x6a, 0xf6, 0x37, 0xa1, 0xa4, 0x3d, 0xa3, 0xa4, 0x8b, 0x69, 0x0f, 0xdf, 0x02, 0x88, 0x87,
	0xdd, 0x7e, 0xe8, 0xb9, 0x47, 0x6c, 0x64, 0xac, 0xe8, 0x6a, 0x3a, 0xf2, 0x98, 0x8d, 0x70, 0x19,
	0x96, 0xa4, 0xec, 0x1b, 0xab, 0x3b, 0xa8, 0xba, 0x69, 0x8f, 0xcd, 0xca, 0x3f, 0x08, 0xae, 0x36,
	0x2d, 0xa7, 0xa9, 0xa6, 0x9a, 0x2c, 0xc1, 0x87, 0x6d, 0x3d, 0xa5, 0x9b, 0xb2, 0x24, 0xec, 0x85,
	0x1e, 0x1d, 0x5f, 0xbc, 0xc9, 0x4e, 0xee, 0xbd, 0x76, 0x27, 0x5a, 0xe7, 0xe9, 0x0c, 0x4d, 0xed,
	0x1b, 0xfb, 0xaf, 0xc4, 0xf1, 0x07, 0x70, 0x2d, 0xe5, 0x7d, 0xc9, 0x92, 0x84, 0xba, 0x03, 0x1a,
	0x31, 0xc1, 0x92, 0x94, 0x25, 0xc2, 0x28, 0xee, 0x2c, 0x55, 0xd7, 0xec, 0xed, 0x3c, 0x67, 0x4d,
	0x53, 0xf8, 0x31, 0x6c, 0xfa, 0x03, 0x21, 0x98, 0xe7, 0x0a, 0xd5, 0xe9, 0xe4, 0xa2, 0xbd, 0xfb,
	0x7f, 0xc7, 0xa4, 0xe7, 0xb2, 0x37, 0x34, 0x59, 0x7b, 0x95, 0x5f, 0x8b, 0xb0, 0xa1, 0xcd, 0x4b,
	0x3f, 0x23, 0x0d, 0xbf, 0xf0, 0x19, 0xad, 0xeb, 0xef, 0x8c, 0x9b, 0xb0, 0x9e, 0x1e, 0x61, 0x7d,
	0xf7, 0xe6, 0x85, 0x8f, 0xd0, 0x66, 0xbd, 0x31, 0xf9, 0xc1, 0xe6, 0x4f, 0x5f, 0xc3, 0xb4, 0x51,
	0x1b, 0x78, 0x9e, 0x15, 0xf8, 0x13, 0x00, 0x8f, 0x0f, 0xfc, 0x50, 0x3d, 0x77, 0x63, 0xe9, 0x42,
	0xb1, 0x46, 0x0e, 0x50, 0x9d, 0xcc, 0xe0, 0xf1, 0x33, 0xd8, 0x9e, 0x3d, 0xb6, 0x7c, 0x55, 0xcb,
	0x6a, 0xa2, 0xf7, 0x2e, 0x71, 0x7a, 0x93, 0x6d, 0xe1, 0x59, 0x15, 0x1d, 0xbb, 0xbf, 0xfd, 0xc7,
	0xa7, 0x65, 0xd8, 0x82, 0x8d, 0x7c, 0x70, 0x73, 0x18, 0xfa, 0xef, 0x7f, 0x87, 0xe0, 0xfa, 0xc2,
	0xa3, 0xc7, 0x77, 0xe0, 0x76, 0xd3, 0x72, 0xdc, 0xe6, 0x7e, 0x67, 0xaf, 0x6d, 0xb9, 0x4f, 0x5b,
	0x76, 0xfb, 0x61, 0xbb, 0xb1, 0x77, 0xd0, 0xde, 0xb7, 0xdc, 0xcf, 0x5b, 0x56, 0xb3, 0x6d, 0x3d,
	0x2a, 0x17, 0x5e, 0x07, 0x72, 0xbe, 0x68, 0x34, 0x5a, 0x8e, 0x53, 0x46, 0xb8, 0x02, 0x64, 0x11,
	0xe8, 0xe1, 0x5e, 0xfb, 0x49, 0xab, 0x59, 0x2e, 0x3e, 0xf8, 0x1e, 0x1d, 0x9f, 0x92, 0xc2, 0xc9,
	0x29, 0x29, 0xbc, 0x38, 0x25, 0xe8, 0x9b, 0x8c, 0xa0, 0x1f, 0x33, 0x82, 0x7e, 0xcb, 0x08, 0x3a,
	0xce, 0x08, 0x3a, 0xc9, 0x08, 0xfa, 0x33, 0x23, 0xe8, 0xaf, 0x8c, 0x14, 0x5e, 0x64, 0x04, 0xfd,
	0x70, 0x46, 0x0a, 0x3f, 0x9f, 0x11, 0x74, 0x7c, 0x46, 0x0a, 0x27, 0x67, 0xa4, 0xf0, 0xcc, 0x0a,
	0x78, 0x7c, 0x14, 0x98, 0xf9, 0xdd, 0x33, 0x87, 0xa2, 0xae, 0x8c, 0x1e, 0x4f, 0xa2, 0x5a, 0x9c,
	0xf0, 0x34, 0xf4, 0x59, 0x52, 0xcb, 0xd3, 0xf5, 0xb8, 0x1b, 0xf0, 0x3a, 0xfb, 0x4a, 0x4e, 0xbe,
	0xd3, 0xaf, 0xfc, 0x0c, 0xba, 0x25, 0xf5, 0xad, 0xbe, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x8e, 0x51, 0x58, 0x9f, 0x06, 0x00, 0x00,
}

func (x DNSDomainVerificationType) String() string {
	s, ok := DNSDomainVerificationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *DNSSECStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSECStatus)
	if !ok {
		that2, ok := that.(DNSSECStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.KeyTag != that1.KeyTag {
		return false
	}
	if this.Algorithm != that1.Algorithm {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.DigestType != that1.DigestType {
		return false
	}
	if this.Digest != that1.Digest {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.Ttl != that1.Ttl {
		return false
	}
	return true
}
func (this *DNSDomainStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSDomainStatus)
	if !ok {
		that2, ok := that.(DNSDomainStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainVerification != that1.DomainVerification {
		return false
	}
	if len(this.VolterraNameservers) != len(that1.VolterraNameservers) {
		return false
	}
	for i := range this.VolterraNameservers {
		if this.VolterraNameservers[i] != that1.VolterraNameservers[i] {
			return false
		}
	}
	if !this.DnssecStatus.Equal(that1.DnssecStatus) {
		return false
	}
	return true
}
func (this *StatusObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusObject)
	if !ok {
		that2, ok := that.(StatusObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ObjectRefs) != len(that1.ObjectRefs) {
		return false
	}
	for i := range this.ObjectRefs {
		if !this.ObjectRefs[i].Equal(that1.ObjectRefs[i]) {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if !this.VerificationStatus.Equal(that1.VerificationStatus) {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_domain.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_domain.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSSECStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dns_domain.DNSSECStatus{")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "KeyTag: "+fmt.Sprintf("%#v", this.KeyTag)+",\n")
	s = append(s, "Algorithm: "+fmt.Sprintf("%#v", this.Algorithm)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "DigestType: "+fmt.Sprintf("%#v", this.DigestType)+",\n")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSDomainStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_domain.DNSDomainStatus{")
	s = append(s, "DomainVerification: "+fmt.Sprintf("%#v", this.DomainVerification)+",\n")
	s = append(s, "VolterraNameservers: "+fmt.Sprintf("%#v", this.VolterraNameservers)+",\n")
	if this.DnssecStatus != nil {
		s = append(s, "DnssecStatus: "+fmt.Sprintf("%#v", this.DnssecStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dns_domain.StatusObject{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ObjectRefs != nil {
		s = append(s, "ObjectRefs: "+fmt.Sprintf("%#v", this.ObjectRefs)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.VerificationStatus != nil {
		s = append(s, "VerificationStatus: "+fmt.Sprintf("%#v", this.VerificationStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DNSSECStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSECStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSECStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ttl != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintObject(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DigestType) > 0 {
		i -= len(m.DigestType)
		copy(dAtA[i:], m.DigestType)
		i = encodeVarintObject(dAtA, i, uint64(len(m.DigestType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Flags) > 0 {
		i -= len(m.Flags)
		copy(dAtA[i:], m.Flags)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Flags)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Algorithm) > 0 {
		i -= len(m.Algorithm)
		copy(dAtA[i:], m.Algorithm)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Algorithm)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyTag) > 0 {
		i -= len(m.KeyTag)
		copy(dAtA[i:], m.KeyTag)
		i = encodeVarintObject(dAtA, i, uint64(len(m.KeyTag)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mode != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNSDomainStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSDomainStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSDomainStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnssecStatus != nil {
		{
			size, err := m.DnssecStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VolterraNameservers) > 0 {
		for iNdEx := len(m.VolterraNameservers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VolterraNameservers[iNdEx])
			copy(dAtA[i:], m.VolterraNameservers[iNdEx])
			i = encodeVarintObject(dAtA, i, uint64(len(m.VolterraNameservers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DomainVerification != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.DomainVerification))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerificationStatus != nil {
		{
			size, err := m.VerificationStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjectRefs) > 0 {
		for iNdEx := len(m.ObjectRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObjectRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *DNSSECStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovObject(uint64(m.Mode))
	}
	l = len(m.KeyTag)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.Flags)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.DigestType)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Ttl != 0 {
		n += 1 + sovObject(uint64(m.Ttl))
	}
	return n
}

func (m *DNSDomainStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainVerification != 0 {
		n += 1 + sovObject(uint64(m.DomainVerification))
	}
	if len(m.VolterraNameservers) > 0 {
		for _, s := range m.VolterraNameservers {
			l = len(s)
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.DnssecStatus != nil {
		l = m.DnssecStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *StatusObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.ObjectRefs) > 0 {
		for _, e := range m.ObjectRefs {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.VerificationStatus != nil {
		l = m.VerificationStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSSECStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSSECStatus{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`KeyTag:` + fmt.Sprintf("%v", this.KeyTag) + `,`,
		`Algorithm:` + fmt.Sprintf("%v", this.Algorithm) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`DigestType:` + fmt.Sprintf("%v", this.DigestType) + `,`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Ttl:` + fmt.Sprintf("%v", this.Ttl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSDomainStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSDomainStatus{`,
		`DomainVerification:` + fmt.Sprintf("%v", this.DomainVerification) + `,`,
		`VolterraNameservers:` + fmt.Sprintf("%v", this.VolterraNameservers) + `,`,
		`DnssecStatus:` + strings.Replace(this.DnssecStatus.String(), "DNSSECStatus", "DNSSECStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjectRefs := "[]*ObjectRefType{"
	for _, f := range this.ObjectRefs {
		repeatedStringForObjectRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForObjectRefs += "}"
	repeatedStringForConditions := "[]*ConditionType{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "ConditionType", "schema.ConditionType", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StatusObject{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "StatusMetaType", "schema.StatusMetaType", 1) + `,`,
		`ObjectRefs:` + repeatedStringForObjectRefs + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`VerificationStatus:` + strings.Replace(this.VerificationStatus.String(), "DNSDomainStatus", "DNSDomainStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSSECStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSECStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSECStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= DNSSECMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DigestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSDomainStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSDomainStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSDomainStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainVerification", wireType)
			}
			m.DomainVerification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainVerification |= DNSDomainVerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraNameservers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraNameservers = append(m.VolterraNameservers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnssecStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnssecStatus == nil {
				m.DnssecStatus = &DNSSECStatus{}
			}
			if err := m.DnssecStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.StatusMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectRefs = append(m.ObjectRefs, &schema.ObjectRefType{})
			if err := m.ObjectRefs[len(m.ObjectRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &schema.ConditionType{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationStatus == nil {
				m.VerificationStatus = &DNSDomainStatus{}
			}
			if err := m.VerificationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)

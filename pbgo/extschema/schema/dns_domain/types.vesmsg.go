//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package dns_domain

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSRoute53Type) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSRoute53Type) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSRoute53Type) DeepCopy() *AWSRoute53Type {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSRoute53Type{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSRoute53Type) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSRoute53Type) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSRoute53TypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSRoute53Type) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCredsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *AWSRoute53Type) GetCredsDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetCreds()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "creds",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetCredsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSRoute53Type) GetCredsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetCreds()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAWSRoute53Type struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSRoute53Type) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSRoute53Type)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSRoute53Type got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["creds"]; exists {

		vOpts := append(opts, db.WithValidateField("creds"))
		if err := fv(ctx, m.GetCreds(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSRoute53TypeValidator = func() *ValidateAWSRoute53Type {
	v := &ValidateAWSRoute53Type{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["creds"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func AWSRoute53TypeValidator() db.Validator {
	return DefaultAWSRoute53TypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDomainChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDomainChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDomainChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDomainChoice().(type) {
	case *CreateSpecType_VolterraManaged:

	case *CreateSpecType_Route53:
		odrInfos, err = m.GetRoute53().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "route53." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_VerificationOnly:

	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *CreateSpecType_VolterraManaged:
		if fv, exists := v.FldValidators["domain_choice.volterra_managed"]; exists {
			val := m.GetDomainChoice().(*CreateSpecType_VolterraManaged).VolterraManaged
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("volterra_managed"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Route53:
		if fv, exists := v.FldValidators["domain_choice.route53"]; exists {
			val := m.GetDomainChoice().(*CreateSpecType_Route53).Route53
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("route53"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_VerificationOnly:
		if fv, exists := v.FldValidators["domain_choice.verification_only"]; exists {
			val := m.GetDomainChoice().(*CreateSpecType_VerificationOnly).VerificationOnly
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("verification_only"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	v.FldValidators["domain_choice.route53"] = AWSRoute53TypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDomainChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDomainChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDomainChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDomainChoice().(type) {
	case *GetSpecType_VolterraManaged:

	case *GetSpecType_Route53:
		odrInfos, err = m.GetRoute53().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "route53." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_VerificationOnly:

	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *GetSpecType_VolterraManaged:
		if fv, exists := v.FldValidators["domain_choice.volterra_managed"]; exists {
			val := m.GetDomainChoice().(*GetSpecType_VolterraManaged).VolterraManaged
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("volterra_managed"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Route53:
		if fv, exists := v.FldValidators["domain_choice.route53"]; exists {
			val := m.GetDomainChoice().(*GetSpecType_Route53).Route53
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("route53"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_VerificationOnly:
		if fv, exists := v.FldValidators["domain_choice.verification_only"]; exists {
			val := m.GetDomainChoice().(*GetSpecType_VerificationOnly).VerificationOnly
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("verification_only"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["txt_record"]; exists {

		vOpts := append(opts, db.WithValidateField("txt_record"))
		if err := fv(ctx, m.GetTxtRecord(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	v.FldValidators["domain_choice.route53"] = AWSRoute53TypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDomainChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDomainChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDomainChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDomainChoice().(type) {
	case *GlobalSpecType_VolterraManaged:

	case *GlobalSpecType_Route53:
		odrInfos, err = m.GetRoute53().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "route53." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_VerificationOnly:

	}

	return drInfos, err
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *GlobalSpecType_VolterraManaged:
		if fv, exists := v.FldValidators["domain_choice.volterra_managed"]; exists {
			val := m.GetDomainChoice().(*GlobalSpecType_VolterraManaged).VolterraManaged
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("volterra_managed"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Route53:
		if fv, exists := v.FldValidators["domain_choice.route53"]; exists {
			val := m.GetDomainChoice().(*GlobalSpecType_Route53).Route53
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("route53"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_VerificationOnly:
		if fv, exists := v.FldValidators["domain_choice.verification_only"]; exists {
			val := m.GetDomainChoice().(*GlobalSpecType_VerificationOnly).VerificationOnly
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("verification_only"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["txt_record"]; exists {

		vOpts := append(opts, db.WithValidateField("txt_record"))
		if err := fv(ctx, m.GetTxtRecord(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	v.FldValidators["domain_choice.route53"] = AWSRoute53TypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDomainChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDomainChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDomainChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetDomainChoice().(type) {
	case *ReplaceSpecType_VolterraManaged:

	case *ReplaceSpecType_Route53:
		odrInfos, err = m.GetRoute53().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "route53." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_VerificationOnly:

	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *ReplaceSpecType_VolterraManaged:
		if fv, exists := v.FldValidators["domain_choice.volterra_managed"]; exists {
			val := m.GetDomainChoice().(*ReplaceSpecType_VolterraManaged).VolterraManaged
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("volterra_managed"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Route53:
		if fv, exists := v.FldValidators["domain_choice.route53"]; exists {
			val := m.GetDomainChoice().(*ReplaceSpecType_Route53).Route53
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("route53"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_VerificationOnly:
		if fv, exists := v.FldValidators["domain_choice.verification_only"]; exists {
			val := m.GetDomainChoice().(*ReplaceSpecType_VerificationOnly).VerificationOnly
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("verification_only"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	v.FldValidators["domain_choice.route53"] = AWSRoute53TypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDomainChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DomainChoice.(type) {
	case nil:
		o.DomainChoice = nil

	case *CreateSpecType_Route53:
		o.DomainChoice = &GlobalSpecType_Route53{Route53: of.Route53}

	case *CreateSpecType_VerificationOnly:
		o.DomainChoice = &GlobalSpecType_VerificationOnly{VerificationOnly: of.VerificationOnly}

	case *CreateSpecType_VolterraManaged:
		o.DomainChoice = &GlobalSpecType_VolterraManaged{VolterraManaged: of.VolterraManaged}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDomainChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DomainChoice.(type) {
	case nil:
		r.DomainChoice = nil

	case *GlobalSpecType_Route53:
		r.DomainChoice = &CreateSpecType_Route53{Route53: of.Route53}

	case *GlobalSpecType_VerificationOnly:
		r.DomainChoice = &CreateSpecType_VerificationOnly{VerificationOnly: of.VerificationOnly}

	case *GlobalSpecType_VolterraManaged:
		r.DomainChoice = &CreateSpecType_VolterraManaged{VolterraManaged: of.VolterraManaged}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.DnssecMode = f.GetDnssecMode()
	m.GetDomainChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.DnssecMode = m1.DnssecMode
	m1.SetDomainChoiceToGlobalSpecType(f)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDomainChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DomainChoice.(type) {
	case nil:
		o.DomainChoice = nil

	case *GetSpecType_Route53:
		o.DomainChoice = &GlobalSpecType_Route53{Route53: of.Route53}

	case *GetSpecType_VerificationOnly:
		o.DomainChoice = &GlobalSpecType_VerificationOnly{VerificationOnly: of.VerificationOnly}

	case *GetSpecType_VolterraManaged:
		o.DomainChoice = &GlobalSpecType_VolterraManaged{VolterraManaged: of.VolterraManaged}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDomainChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DomainChoice.(type) {
	case nil:
		r.DomainChoice = nil

	case *GlobalSpecType_Route53:
		r.DomainChoice = &GetSpecType_Route53{Route53: of.Route53}

	case *GlobalSpecType_VerificationOnly:
		r.DomainChoice = &GetSpecType_VerificationOnly{VerificationOnly: of.VerificationOnly}

	case *GlobalSpecType_VolterraManaged:
		r.DomainChoice = &GetSpecType_VolterraManaged{VolterraManaged: of.VolterraManaged}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.DnssecMode = f.GetDnssecMode()

	m.GetDomainChoiceFromGlobalSpecType(f)
	m.TxtRecord = f.GetTxtRecord()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.DnssecMode = m1.DnssecMode

	m1.SetDomainChoiceToGlobalSpecType(f)
	f.TxtRecord = m1.TxtRecord
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDomainChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DomainChoice.(type) {
	case nil:
		o.DomainChoice = nil

	case *ReplaceSpecType_Route53:
		o.DomainChoice = &GlobalSpecType_Route53{Route53: of.Route53}

	case *ReplaceSpecType_VerificationOnly:
		o.DomainChoice = &GlobalSpecType_VerificationOnly{VerificationOnly: of.VerificationOnly}

	case *ReplaceSpecType_VolterraManaged:
		o.DomainChoice = &GlobalSpecType_VolterraManaged{VolterraManaged: of.VolterraManaged}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDomainChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DomainChoice.(type) {
	case nil:
		r.DomainChoice = nil

	case *GlobalSpecType_Route53:
		r.DomainChoice = &ReplaceSpecType_Route53{Route53: of.Route53}

	case *GlobalSpecType_VerificationOnly:
		r.DomainChoice = &ReplaceSpecType_VerificationOnly{VerificationOnly: of.VerificationOnly}

	case *GlobalSpecType_VolterraManaged:
		r.DomainChoice = &ReplaceSpecType_VolterraManaged{VolterraManaged: of.VolterraManaged}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.DnssecMode = f.GetDnssecMode()
	m.GetDomainChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.DnssecMode = m1.DnssecMode
	m1.SetDomainChoiceToGlobalSpecType(f)
}

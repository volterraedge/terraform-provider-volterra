// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_firewall/types.proto

package app_firewall

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// App Firewall Violation Type
//
// x-displayName: "App Firewall Violation Type"
// List of all supported Violation Types
type AppFirewallViolationType int32

const (
	// x-displayName: "No violation"
	// VIOL_NONE
	VIOL_NONE AppFirewallViolationType = 0
	// x-displayName: "Illegal filetype"
	// VIOL_FILETYPE
	VIOL_FILETYPE AppFirewallViolationType = 1
	// x-displayName: "Illegal method"
	// VIOL_METHOD
	VIOL_METHOD AppFirewallViolationType = 2
	// x-displayName: "Mandatory HTTP header is missing"
	// VIOL_MANDATORY_HEADER
	VIOL_MANDATORY_HEADER AppFirewallViolationType = 3
	// x-displayName: "Illegal HTTP status in response"
	// VIOL_HTTP_RESPONSE_STATUS
	VIOL_HTTP_RESPONSE_STATUS AppFirewallViolationType = 4
	// x-displayName: "Request length exceeds defined buffer size"
	// VIOL_REQUEST_MAX_LENGTH
	VIOL_REQUEST_MAX_LENGTH AppFirewallViolationType = 5
	// x-displayName: "Disallowed file upload content detected"
	// VIOL_FILE_UPLOAD
	VIOL_FILE_UPLOAD AppFirewallViolationType = 6
	// x-displayName: "Disallowed file upload content detected in body"
	// VIOL_FILE_UPLOAD_IN_BODY
	VIOL_FILE_UPLOAD_IN_BODY AppFirewallViolationType = 7
	// x-displayName: "Malformed XML data"
	// VIOL_XML_MALFORMED
	VIOL_XML_MALFORMED AppFirewallViolationType = 8
	// x-displayName: "Malformed JSON data"
	// VIOL_JSON_MALFORMED
	VIOL_JSON_MALFORMED AppFirewallViolationType = 9
	// x-displayName: "Modified ASM cookie"
	// VIOL_ASM_COOKIE_MODIFIED
	VIOL_ASM_COOKIE_MODIFIED AppFirewallViolationType = 10
	// x-displayName: "Multiple Host headers"
	// VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS
	VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS AppFirewallViolationType = 11
	// x-displayName: "Bad Host header value"
	// VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE
	VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE AppFirewallViolationType = 13
	// x-displayName: "Unparsable request content"
	// VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT
	VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT AppFirewallViolationType = 15
	// x-displayName: "Null in request"
	// VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST
	VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST AppFirewallViolationType = 17
	// x-displayName: "Bad HTTP version"
	// VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION
	VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION AppFirewallViolationType = 18
	// x-displayName: "CRLF characters before request start"
	// VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START
	VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START AppFirewallViolationType = 21
	// x-displayName: "No Host header in HTTP/1.1 request"
	// VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST
	VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST AppFirewallViolationType = 22
	// x-displayName: "Bad multipart parameters parsing"
	// VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING
	VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING AppFirewallViolationType = 23
	// x-displayName: "Several Content-Length headers"
	// VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS
	VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS AppFirewallViolationType = 27
	// x-displayName: "Content-Length should be a positive number"
	// VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER
	VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER AppFirewallViolationType = 29
	// x-displayName: "Directory traversal"
	// VIOL_EVASION_DIRECTORY_TRAVERSALS
	VIOL_EVASION_DIRECTORY_TRAVERSALS AppFirewallViolationType = 37
	// x-displayName: "Malformed request"
	// VIOL_MALFORMED_REQUEST
	VIOL_MALFORMED_REQUEST AppFirewallViolationType = 38
	// x-displayName: "Multiple decoding"
	// VIOL_EVASION_MULTIPLE_DECODING
	VIOL_EVASION_MULTIPLE_DECODING AppFirewallViolationType = 39
	// x-displayName: "Data guard"
	// VIOL_DATA_GUARD
	VIOL_DATA_GUARD AppFirewallViolationType = 40
	// x-displayName: "Apache Whitespace"
	// VIOL_EVASION_APACHE_WHITESPACE
	VIOL_EVASION_APACHE_WHITESPACE AppFirewallViolationType = 41
	// x-displayName: "Cookie Modified"
	// VIOL_COOKIE_MODIFIED
	VIOL_COOKIE_MODIFIED AppFirewallViolationType = 42
	// x-displayName: "IIS Unicode Codepoints"
	// VIOL_EVASION_IIS_UNICODE_CODEPOINTS
	VIOL_EVASION_IIS_UNICODE_CODEPOINTS AppFirewallViolationType = 43
	// x-displayName: "IIS Backslashes"
	// VIOL_EVASION_IIS_BACKSLASHES
	VIOL_EVASION_IIS_BACKSLASHES AppFirewallViolationType = 44
	// x-displayName: "Percent U Decoding"
	// VIOL_EVASION_PERCENT_U_DECODING
	VIOL_EVASION_PERCENT_U_DECODING AppFirewallViolationType = 45
	// x-displayName: "Bare Byte Decoding"
	// VIOL_EVASION_BARE_BYTE_DECODING
	VIOL_EVASION_BARE_BYTE_DECODING AppFirewallViolationType = 46
	// x-displayName: "Bad Unescape"
	// VIOL_EVASION_BAD_UNESCAPE
	VIOL_EVASION_BAD_UNESCAPE AppFirewallViolationType = 47
	// x-displayName: "Bad Multipart/Form-Data Request Parsing"
	// VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORMDATA_REQUEST_PARSING
	VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORMDATA_REQUEST_PARSING AppFirewallViolationType = 48
	// x-displayName: "Body in GET or HEAD Request"
	// VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUEST
	VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUEST AppFirewallViolationType = 49
	// x-displayName: "High ASCII Characters in Headers"
	// VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS
	VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS AppFirewallViolationType = 50
	// x-displayName: "Failed to Convert Character"
	// VIOL_ENCODING
	VIOL_ENCODING AppFirewallViolationType = 51
	// x-displayName: "Cookie Not RFC-Compliant"
	// VIOL_COOKIE_MALFORMED
	VIOL_COOKIE_MALFORMED AppFirewallViolationType = 52
	// x-displayName: "GraphQL data does not comply with format settings"
	// VIOL_GRAPHQL_FORMAT
	VIOL_GRAPHQL_FORMAT AppFirewallViolationType = 53
	// x-displayName: "Malformed GraphQL data"
	// VIOL_GRAPHQL_MALFORMED
	VIOL_GRAPHQL_MALFORMED AppFirewallViolationType = 54
	// x-displayName: "GraphQL introspection query"
	// VIOL_GRAPHQL_INTROSPECTION_QUERY
	VIOL_GRAPHQL_INTROSPECTION_QUERY AppFirewallViolationType = 55
)

var AppFirewallViolationType_name = map[int32]string{
	0:  "VIOL_NONE",
	1:  "VIOL_FILETYPE",
	2:  "VIOL_METHOD",
	3:  "VIOL_MANDATORY_HEADER",
	4:  "VIOL_HTTP_RESPONSE_STATUS",
	5:  "VIOL_REQUEST_MAX_LENGTH",
	6:  "VIOL_FILE_UPLOAD",
	7:  "VIOL_FILE_UPLOAD_IN_BODY",
	8:  "VIOL_XML_MALFORMED",
	9:  "VIOL_JSON_MALFORMED",
	10: "VIOL_ASM_COOKIE_MODIFIED",
	11: "VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS",
	13: "VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE",
	15: "VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT",
	17: "VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST",
	18: "VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION",
	21: "VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START",
	22: "VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST",
	23: "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING",
	27: "VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS",
	29: "VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER",
	37: "VIOL_EVASION_DIRECTORY_TRAVERSALS",
	38: "VIOL_MALFORMED_REQUEST",
	39: "VIOL_EVASION_MULTIPLE_DECODING",
	40: "VIOL_DATA_GUARD",
	41: "VIOL_EVASION_APACHE_WHITESPACE",
	42: "VIOL_COOKIE_MODIFIED",
	43: "VIOL_EVASION_IIS_UNICODE_CODEPOINTS",
	44: "VIOL_EVASION_IIS_BACKSLASHES",
	45: "VIOL_EVASION_PERCENT_U_DECODING",
	46: "VIOL_EVASION_BARE_BYTE_DECODING",
	47: "VIOL_EVASION_BAD_UNESCAPE",
	48: "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORMDATA_REQUEST_PARSING",
	49: "VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUEST",
	50: "VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS",
	51: "VIOL_ENCODING",
	52: "VIOL_COOKIE_MALFORMED",
	53: "VIOL_GRAPHQL_FORMAT",
	54: "VIOL_GRAPHQL_MALFORMED",
	55: "VIOL_GRAPHQL_INTROSPECTION_QUERY",
}

var AppFirewallViolationType_value = map[string]int32{
	"VIOL_NONE":                                                     0,
	"VIOL_FILETYPE":                                                 1,
	"VIOL_METHOD":                                                   2,
	"VIOL_MANDATORY_HEADER":                                         3,
	"VIOL_HTTP_RESPONSE_STATUS":                                     4,
	"VIOL_REQUEST_MAX_LENGTH":                                       5,
	"VIOL_FILE_UPLOAD":                                              6,
	"VIOL_FILE_UPLOAD_IN_BODY":                                      7,
	"VIOL_XML_MALFORMED":                                            8,
	"VIOL_JSON_MALFORMED":                                           9,
	"VIOL_ASM_COOKIE_MODIFIED":                                      10,
	"VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS":                      11,
	"VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE":                      13,
	"VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT":                 15,
	"VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST":                            17,
	"VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION":                           18,
	"VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START":       21,
	"VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST":         22,
	"VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING":           23,
	"VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS":             27,
	"VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER": 29,
	"VIOL_EVASION_DIRECTORY_TRAVERSALS":                             37,
	"VIOL_MALFORMED_REQUEST":                                        38,
	"VIOL_EVASION_MULTIPLE_DECODING":                                39,
	"VIOL_DATA_GUARD":                                               40,
	"VIOL_EVASION_APACHE_WHITESPACE":                                41,
	"VIOL_COOKIE_MODIFIED":                                          42,
	"VIOL_EVASION_IIS_UNICODE_CODEPOINTS":                           43,
	"VIOL_EVASION_IIS_BACKSLASHES":                                  44,
	"VIOL_EVASION_PERCENT_U_DECODING":                               45,
	"VIOL_EVASION_BARE_BYTE_DECODING":                               46,
	"VIOL_EVASION_BAD_UNESCAPE":                                     47,
	"VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORMDATA_REQUEST_PARSING":     48,
	"VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUEST":                49,
	"VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS":           50,
	"VIOL_ENCODING":                                                 51,
	"VIOL_COOKIE_MALFORMED":                                         52,
	"VIOL_GRAPHQL_FORMAT":                                           53,
	"VIOL_GRAPHQL_MALFORMED":                                        54,
	"VIOL_GRAPHQL_INTROSPECTION_QUERY":                              55,
}

func (AppFirewallViolationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{0}
}

// AttackType
//
// x-displayName: "Attack Types"
// List of all Attack Types
type AttackType int32

const (
	// x-displayName: "No attack"
	// ATTACK_TYPE_NONE
	ATTACK_TYPE_NONE AttackType = 0
	// x-displayName: "Non-Browser Client"
	// ATTACK_TYPE_NON_BROWSER_CLIENT
	ATTACK_TYPE_NON_BROWSER_CLIENT AttackType = 1
	// x-displayName: "Other Application Attack"
	// ATTACK_TYPE_OTHER_APPLICATION_ATTACKS
	ATTACK_TYPE_OTHER_APPLICATION_ATTACKS AttackType = 2
	// x-displayName: "Trojan Backdoor Spyware"
	// ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE
	ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE AttackType = 3
	// x-displayName: "Detection Evasion"
	// ATTACK_TYPE_DETECTION_EVASION
	ATTACK_TYPE_DETECTION_EVASION AttackType = 4
	// x-displayName: "Vulnerability Scan"
	// ATTACK_TYPE_VULNERABILITY_SCAN
	ATTACK_TYPE_VULNERABILITY_SCAN AttackType = 5
	// x-displayName: "Abuse of Functionality"
	// ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY
	ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY AttackType = 6
	// x-displayName: "Authentication Authorization Attack"
	// ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS
	ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS AttackType = 7
	// x-displayName: "Buffer Overflow"
	// ATTACK_TYPE_BUFFER_OVERFLOW
	ATTACK_TYPE_BUFFER_OVERFLOW AttackType = 8
	// x-displayName: "Predictable Resource Location"
	// ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION
	ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION AttackType = 9
	// x-displayName: "Information Leakage"
	// ATTACK_TYPE_INFORMATION_LEAKAGE
	ATTACK_TYPE_INFORMATION_LEAKAGE AttackType = 10
	// x-displayName: "Directory Indexing"
	// ATTACK_TYPE_DIRECTORY_INDEXING
	ATTACK_TYPE_DIRECTORY_INDEXING AttackType = 11
	// x-displayName: "Path Traversal"
	// ATTACK_TYPE_PATH_TRAVERSAL
	ATTACK_TYPE_PATH_TRAVERSAL AttackType = 12
	// x-displayName: "XPath Injection"
	// ATTACK_TYPE_XPATH_INJECTION
	ATTACK_TYPE_XPATH_INJECTION AttackType = 13
	// x-displayName: "LDAP Injection"
	// ATTACK_TYPE_LDAP_INJECTION
	ATTACK_TYPE_LDAP_INJECTION AttackType = 14
	// x-displayName: "Server-Side Code Injection"
	// ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION
	ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION AttackType = 15
	// x-displayName: "Command Execution"
	// ATTACK_TYPE_COMMAND_EXECUTION
	ATTACK_TYPE_COMMAND_EXECUTION AttackType = 16
	// x-displayName: "SQL Injection"
	// ATTACK_TYPE_SQL_INJECTION
	ATTACK_TYPE_SQL_INJECTION AttackType = 17
	// x-displayName: "Cross-Site Scripting"
	// ATTACK_TYPE_CROSS_SITE_SCRIPTING
	ATTACK_TYPE_CROSS_SITE_SCRIPTING AttackType = 18
	// x-displayName: "Denial of Service"
	// ATTACK_TYPE_DENIAL_OF_SERVICE
	ATTACK_TYPE_DENIAL_OF_SERVICE AttackType = 19
	// x-displayName: "HTTP Parser Attack"
	// ATTACK_TYPE_HTTP_PARSER_ATTACK
	ATTACK_TYPE_HTTP_PARSER_ATTACK AttackType = 20
	// x-displayName: "Session Hijacking"
	// ATTACK_TYPE_SESSION_HIJACKING
	ATTACK_TYPE_SESSION_HIJACKING AttackType = 21
	// x-displayName: "HTTP Response Splitting"
	// ATTACK_TYPE_HTTP_RESPONSE_SPLITTING
	ATTACK_TYPE_HTTP_RESPONSE_SPLITTING AttackType = 22
	// x-displayName: "Forceful Browsing"
	// ATTACK_TYPE_FORCEFUL_BROWSING
	ATTACK_TYPE_FORCEFUL_BROWSING AttackType = 23
	// x-displayName: "Remote File Include"
	// ATTACK_TYPE_REMOTE_FILE_INCLUDE
	ATTACK_TYPE_REMOTE_FILE_INCLUDE AttackType = 24
	// x-displayName: "Malicious File Upload"
	// ATTACK_TYPE_MALICIOUS_FILE_UPLOAD
	ATTACK_TYPE_MALICIOUS_FILE_UPLOAD AttackType = 25
	// x-displayName: "GraphQL Parser Attack"
	// ATTACK_TYPE_GRAPHQL_PARSER_ATTACK
	ATTACK_TYPE_GRAPHQL_PARSER_ATTACK AttackType = 26
)

var AttackType_name = map[int32]string{
	0:  "ATTACK_TYPE_NONE",
	1:  "ATTACK_TYPE_NON_BROWSER_CLIENT",
	2:  "ATTACK_TYPE_OTHER_APPLICATION_ATTACKS",
	3:  "ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE",
	4:  "ATTACK_TYPE_DETECTION_EVASION",
	5:  "ATTACK_TYPE_VULNERABILITY_SCAN",
	6:  "ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY",
	7:  "ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS",
	8:  "ATTACK_TYPE_BUFFER_OVERFLOW",
	9:  "ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION",
	10: "ATTACK_TYPE_INFORMATION_LEAKAGE",
	11: "ATTACK_TYPE_DIRECTORY_INDEXING",
	12: "ATTACK_TYPE_PATH_TRAVERSAL",
	13: "ATTACK_TYPE_XPATH_INJECTION",
	14: "ATTACK_TYPE_LDAP_INJECTION",
	15: "ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION",
	16: "ATTACK_TYPE_COMMAND_EXECUTION",
	17: "ATTACK_TYPE_SQL_INJECTION",
	18: "ATTACK_TYPE_CROSS_SITE_SCRIPTING",
	19: "ATTACK_TYPE_DENIAL_OF_SERVICE",
	20: "ATTACK_TYPE_HTTP_PARSER_ATTACK",
	21: "ATTACK_TYPE_SESSION_HIJACKING",
	22: "ATTACK_TYPE_HTTP_RESPONSE_SPLITTING",
	23: "ATTACK_TYPE_FORCEFUL_BROWSING",
	24: "ATTACK_TYPE_REMOTE_FILE_INCLUDE",
	25: "ATTACK_TYPE_MALICIOUS_FILE_UPLOAD",
	26: "ATTACK_TYPE_GRAPHQL_PARSER_ATTACK",
}

var AttackType_value = map[string]int32{
	"ATTACK_TYPE_NONE":                                 0,
	"ATTACK_TYPE_NON_BROWSER_CLIENT":                   1,
	"ATTACK_TYPE_OTHER_APPLICATION_ATTACKS":            2,
	"ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE":              3,
	"ATTACK_TYPE_DETECTION_EVASION":                    4,
	"ATTACK_TYPE_VULNERABILITY_SCAN":                   5,
	"ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY":               6,
	"ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS": 7,
	"ATTACK_TYPE_BUFFER_OVERFLOW":                      8,
	"ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION":        9,
	"ATTACK_TYPE_INFORMATION_LEAKAGE":                  10,
	"ATTACK_TYPE_DIRECTORY_INDEXING":                   11,
	"ATTACK_TYPE_PATH_TRAVERSAL":                       12,
	"ATTACK_TYPE_XPATH_INJECTION":                      13,
	"ATTACK_TYPE_LDAP_INJECTION":                       14,
	"ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION":           15,
	"ATTACK_TYPE_COMMAND_EXECUTION":                    16,
	"ATTACK_TYPE_SQL_INJECTION":                        17,
	"ATTACK_TYPE_CROSS_SITE_SCRIPTING":                 18,
	"ATTACK_TYPE_DENIAL_OF_SERVICE":                    19,
	"ATTACK_TYPE_HTTP_PARSER_ATTACK":                   20,
	"ATTACK_TYPE_SESSION_HIJACKING":                    21,
	"ATTACK_TYPE_HTTP_RESPONSE_SPLITTING":              22,
	"ATTACK_TYPE_FORCEFUL_BROWSING":                    23,
	"ATTACK_TYPE_REMOTE_FILE_INCLUDE":                  24,
	"ATTACK_TYPE_MALICIOUS_FILE_UPLOAD":                25,
	"ATTACK_TYPE_GRAPHQL_PARSER_ATTACK":                26,
}

func (AttackType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{1}
}

// Bot Action
//
// x-displayName: "Bot Action"
// Action to be performed on the request
type BotAction int32

const (
	// x-displayName: "Block"
	// Log and block
	BLOCK BotAction = 0
	// x-displayName: "Report"
	// Log only
	REPORT BotAction = 1
	// x-displayName: "Ignore"
	// Disable detection
	IGNORE BotAction = 2
)

var BotAction_name = map[int32]string{
	0: "BLOCK",
	1: "REPORT",
	2: "IGNORE",
}

var BotAction_value = map[string]int32{
	"BLOCK":  0,
	"REPORT": 1,
	"IGNORE": 2,
}

func (BotAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{2}
}

// Risk Based Blocking Action
//
// x-displayName: "Risk Based Blocking Action"
// Action to be performed on the request
type RiskBasedBlockingAction int32

const (
	// x-displayName: "Block"
	// Log and block
	AI_BLOCK RiskBasedBlockingAction = 0
	// x-displayName: "Report"
	// Log only
	AI_REPORT RiskBasedBlockingAction = 1
)

var RiskBasedBlockingAction_name = map[int32]string{
	0: "AI_BLOCK",
	1: "AI_REPORT",
}

var RiskBasedBlockingAction_value = map[string]int32{
	"AI_BLOCK":  0,
	"AI_REPORT": 1,
}

func (RiskBasedBlockingAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{3}
}

// BotProtectionSetting
//
// x-displayName: "Bot Protection"
// Configuration of WAF Bot Protection
type BotProtectionSetting struct {
	// malicious_bot_action
	//
	// x-displayName: "Malicious Bot"
	// A client that exhibits malicious intent such as DoS tools, known exploit tools, and vulnerability scanners
	MaliciousBotAction BotAction `protobuf:"varint,1,opt,name=malicious_bot_action,json=maliciousBotAction,proto3,enum=ves.io.schema.app_firewall.BotAction" json:"malicious_bot_action,omitempty"`
	// suspicious_bot_action
	//
	// x-displayName: "Suspicious Bot"
	// A client that exhibits non-malicious tools such as site crawlers, monitors, spiders, web downloaders and bots behaviors, signatures such as search bots and social media agents
	SuspiciousBotAction BotAction `protobuf:"varint,2,opt,name=suspicious_bot_action,json=suspiciousBotAction,proto3,enum=ves.io.schema.app_firewall.BotAction" json:"suspicious_bot_action,omitempty"`
	// good_bot_action
	//
	// x-displayName: "Good Bot"
	// A client that exhibits known search engine behaviors and signatures
	GoodBotAction BotAction `protobuf:"varint,3,opt,name=good_bot_action,json=goodBotAction,proto3,enum=ves.io.schema.app_firewall.BotAction" json:"good_bot_action,omitempty"`
}

func (m *BotProtectionSetting) Reset()      { *m = BotProtectionSetting{} }
func (*BotProtectionSetting) ProtoMessage() {}
func (*BotProtectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{0}
}
func (m *BotProtectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotProtectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotProtectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotProtectionSetting.Merge(m, src)
}
func (m *BotProtectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *BotProtectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BotProtectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BotProtectionSetting proto.InternalMessageInfo

func (m *BotProtectionSetting) GetMaliciousBotAction() BotAction {
	if m != nil {
		return m.MaliciousBotAction
	}
	return BLOCK
}

func (m *BotProtectionSetting) GetSuspiciousBotAction() BotAction {
	if m != nil {
		return m.SuspiciousBotAction
	}
	return BLOCK
}

func (m *BotProtectionSetting) GetGoodBotAction() BotAction {
	if m != nil {
		return m.GoodBotAction
	}
	return BLOCK
}

// Attack Type Settings
//
// x-displayName: "Attack Type Settings"
// Specifies attack-type settings to be used by WAF
type AttackTypeSettings struct {
	// Disabled Attack Types
	//
	// x-displayName: "Disabled Attack Types"
	// x-required
	// List of Attack Types that will be ignored and not trigger a detection
	DisabledAttackTypes []AttackType `protobuf:"varint,1,rep,packed,name=disabled_attack_types,json=disabledAttackTypes,proto3,enum=ves.io.schema.app_firewall.AttackType" json:"disabled_attack_types,omitempty"`
}

func (m *AttackTypeSettings) Reset()      { *m = AttackTypeSettings{} }
func (*AttackTypeSettings) ProtoMessage() {}
func (*AttackTypeSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{1}
}
func (m *AttackTypeSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttackTypeSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AttackTypeSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttackTypeSettings.Merge(m, src)
}
func (m *AttackTypeSettings) XXX_Size() int {
	return m.Size()
}
func (m *AttackTypeSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AttackTypeSettings.DiscardUnknown(m)
}

var xxx_messageInfo_AttackTypeSettings proto.InternalMessageInfo

func (m *AttackTypeSettings) GetDisabledAttackTypes() []AttackType {
	if m != nil {
		return m.DisabledAttackTypes
	}
	return nil
}

// Attack Signatures
//
// x-displayName: "Attack Signatures"
// Attack Signatures are patterns that identify attacks on a web application and its components
type SignatureSelectionSetting struct {
	// Signature selection by accuracy
	//
	// x-displayName: "Signature Selection By Accuracy"
	// x-required
	// Accuracy indicates the ability of the Attack Signatures to identify the attack including susceptibility to false-positive alarms.
	// Low: Indicates a high likelihood of false positives.
	// Medium: Indicates some likelihood of false positives.
	// High: Indicates a low likelihood of false positives.
	//
	// Types that are valid to be assigned to SignatureSelectionByAccuracy:
	//	*SignatureSelectionSetting_OnlyHighAccuracySignatures
	//	*SignatureSelectionSetting_HighMediumAccuracySignatures
	//	*SignatureSelectionSetting_HighMediumLowAccuracySignatures
	SignatureSelectionByAccuracy isSignatureSelectionSetting_SignatureSelectionByAccuracy `protobuf_oneof:"signature_selection_by_accuracy"`
	// Attack Types
	//
	// x-displayName: "Attack Types"
	// x-required
	// The types of attacks that Attack Signatures can detect
	//
	// Types that are valid to be assigned to AttackTypeSetting:
	//	*SignatureSelectionSetting_DefaultAttackTypeSettings
	//	*SignatureSelectionSetting_AttackTypeSettings
	AttackTypeSetting isSignatureSelectionSetting_AttackTypeSetting `protobuf_oneof:"attack_type_setting"`
}

func (m *SignatureSelectionSetting) Reset()      { *m = SignatureSelectionSetting{} }
func (*SignatureSelectionSetting) ProtoMessage() {}
func (*SignatureSelectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{2}
}
func (m *SignatureSelectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureSelectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignatureSelectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureSelectionSetting.Merge(m, src)
}
func (m *SignatureSelectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *SignatureSelectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureSelectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureSelectionSetting proto.InternalMessageInfo

type isSignatureSelectionSetting_SignatureSelectionByAccuracy interface {
	isSignatureSelectionSetting_SignatureSelectionByAccuracy()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSignatureSelectionSetting_AttackTypeSetting interface {
	isSignatureSelectionSetting_AttackTypeSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SignatureSelectionSetting_OnlyHighAccuracySignatures struct {
	OnlyHighAccuracySignatures *schema.Empty `protobuf:"bytes,2,opt,name=only_high_accuracy_signatures,json=onlyHighAccuracySignatures,proto3,oneof" json:"only_high_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_HighMediumAccuracySignatures struct {
	HighMediumAccuracySignatures *schema.Empty `protobuf:"bytes,3,opt,name=high_medium_accuracy_signatures,json=highMediumAccuracySignatures,proto3,oneof" json:"high_medium_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_HighMediumLowAccuracySignatures struct {
	HighMediumLowAccuracySignatures *schema.Empty `protobuf:"bytes,4,opt,name=high_medium_low_accuracy_signatures,json=highMediumLowAccuracySignatures,proto3,oneof" json:"high_medium_low_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_DefaultAttackTypeSettings struct {
	DefaultAttackTypeSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_attack_type_settings,json=defaultAttackTypeSettings,proto3,oneof" json:"default_attack_type_settings,omitempty"`
}
type SignatureSelectionSetting_AttackTypeSettings struct {
	AttackTypeSettings *AttackTypeSettings `protobuf:"bytes,8,opt,name=attack_type_settings,json=attackTypeSettings,proto3,oneof" json:"attack_type_settings,omitempty"`
}

func (*SignatureSelectionSetting_OnlyHighAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_HighMediumAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_HighMediumLowAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_DefaultAttackTypeSettings) isSignatureSelectionSetting_AttackTypeSetting() {
}
func (*SignatureSelectionSetting_AttackTypeSettings) isSignatureSelectionSetting_AttackTypeSetting() {
}

func (m *SignatureSelectionSetting) GetSignatureSelectionByAccuracy() isSignatureSelectionSetting_SignatureSelectionByAccuracy {
	if m != nil {
		return m.SignatureSelectionByAccuracy
	}
	return nil
}
func (m *SignatureSelectionSetting) GetAttackTypeSetting() isSignatureSelectionSetting_AttackTypeSetting {
	if m != nil {
		return m.AttackTypeSetting
	}
	return nil
}

func (m *SignatureSelectionSetting) GetOnlyHighAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_OnlyHighAccuracySignatures); ok {
		return x.OnlyHighAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetHighMediumAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_HighMediumAccuracySignatures); ok {
		return x.HighMediumAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetHighMediumLowAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_HighMediumLowAccuracySignatures); ok {
		return x.HighMediumLowAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetDefaultAttackTypeSettings() *schema.Empty {
	if x, ok := m.GetAttackTypeSetting().(*SignatureSelectionSetting_DefaultAttackTypeSettings); ok {
		return x.DefaultAttackTypeSettings
	}
	return nil
}

func (m *SignatureSelectionSetting) GetAttackTypeSettings() *AttackTypeSettings {
	if x, ok := m.GetAttackTypeSetting().(*SignatureSelectionSetting_AttackTypeSettings); ok {
		return x.AttackTypeSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignatureSelectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignatureSelectionSetting_OnlyHighAccuracySignatures)(nil),
		(*SignatureSelectionSetting_HighMediumAccuracySignatures)(nil),
		(*SignatureSelectionSetting_HighMediumLowAccuracySignatures)(nil),
		(*SignatureSelectionSetting_DefaultAttackTypeSettings)(nil),
		(*SignatureSelectionSetting_AttackTypeSettings)(nil),
	}
}

// Violation Settings
//
// x-displayName: "Violation Settings"
// Specifies violation settings to be used by WAF
type ViolationSettings struct {
	// Disabled Violations
	//
	// x-displayName: "Disabled Violations"
	// x-required
	// List of violations to be excluded
	DisabledViolationTypes []AppFirewallViolationType `protobuf:"varint,1,rep,packed,name=disabled_violation_types,json=disabledViolationTypes,proto3,enum=ves.io.schema.app_firewall.AppFirewallViolationType" json:"disabled_violation_types,omitempty"`
}

func (m *ViolationSettings) Reset()      { *m = ViolationSettings{} }
func (*ViolationSettings) ProtoMessage() {}
func (*ViolationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{3}
}
func (m *ViolationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViolationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ViolationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViolationSettings.Merge(m, src)
}
func (m *ViolationSettings) XXX_Size() int {
	return m.Size()
}
func (m *ViolationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ViolationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ViolationSettings proto.InternalMessageInfo

func (m *ViolationSettings) GetDisabledViolationTypes() []AppFirewallViolationType {
	if m != nil {
		return m.DisabledViolationTypes
	}
	return nil
}

// Detection Settings
//
// x-displayName: "Detection Settings"
// Specifies detection settings to be used by WAF
type DetectionSetting struct {
	// Signature Selection Setting
	//
	// x-displayName: "Attack Signatures"
	// Attack Signatures are patterns that identify attacks on a web application and its components
	SignatureSelectionSetting *SignatureSelectionSetting `protobuf:"bytes,1,opt,name=signature_selection_setting,json=signatureSelectionSetting,proto3" json:"signature_selection_setting,omitempty"`
	// Automatic Attack Signatures Tuning
	//
	// x-displayName: "Automatic Attack Signatures Tuning"
	// x-required
	// Self-learning probabilistic machine learning model that suppresses false positive triggers
	//
	// Types that are valid to be assigned to FalsePositiveSuppression:
	//	*DetectionSetting_EnableSuppression
	//	*DetectionSetting_DisableSuppression
	FalsePositiveSuppression isDetectionSetting_FalsePositiveSuppression `protobuf_oneof:"false_positive_suppression"`
	// Threat Campaigns
	//
	// x-displayName: "Threat Campaigns"
	// x-required
	// Threat Campaigns provide targeted signatures to protect organizations from sophisticated attacks
	//
	// Types that are valid to be assigned to ThreatCampaignChoice:
	//	*DetectionSetting_EnableThreatCampaigns
	//	*DetectionSetting_DisableThreatCampaigns
	ThreatCampaignChoice isDetectionSetting_ThreatCampaignChoice `protobuf_oneof:"threat_campaign_choice"`
	// Violations
	//
	// x-displayName: "Violations"
	// x-required
	// Lists of validation checks that are performed on HTTP requests to ensure the requests are properly formatted, detection of evasion techniques and other violations
	//
	// Types that are valid to be assigned to ViolationDetectionSetting:
	//	*DetectionSetting_DefaultViolationSettings
	//	*DetectionSetting_ViolationSettings
	ViolationDetectionSetting isDetectionSetting_ViolationDetectionSetting `protobuf_oneof:"violation_detection_setting"`
	// Attack Signatures Staging Settings
	//
	// x-displayName: "Attack Signatures Staging"
	// Attack signatures are added/updated on the Distributed cloud platform on a regular cadence. This setting
	// enables/disables staging process for new and modified attack signatures. Staging means that, when new signatures
	// are added or existing signatures are updated on the platform, WAF applies the attack signature to web application
	// traffic, but does not block an incoming request if it triggers this attack signature. The default staging period
	// is 7 days
	//
	// Types that are valid to be assigned to SignaturesStagingSettings:
	//	*DetectionSetting_DisableStaging
	//	*DetectionSetting_StageNewSignatures
	//	*DetectionSetting_StageNewAndUpdatedSignatures
	SignaturesStagingSettings isDetectionSetting_SignaturesStagingSettings `protobuf_oneof:"signatures_staging_settings"`
}

func (m *DetectionSetting) Reset()      { *m = DetectionSetting{} }
func (*DetectionSetting) ProtoMessage() {}
func (*DetectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{4}
}
func (m *DetectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DetectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionSetting.Merge(m, src)
}
func (m *DetectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *DetectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionSetting proto.InternalMessageInfo

type isDetectionSetting_FalsePositiveSuppression interface {
	isDetectionSetting_FalsePositiveSuppression()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_ThreatCampaignChoice interface {
	isDetectionSetting_ThreatCampaignChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_ViolationDetectionSetting interface {
	isDetectionSetting_ViolationDetectionSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_SignaturesStagingSettings interface {
	isDetectionSetting_SignaturesStagingSettings()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DetectionSetting_EnableSuppression struct {
	EnableSuppression *schema.Empty `protobuf:"bytes,3,opt,name=enable_suppression,json=enableSuppression,proto3,oneof" json:"enable_suppression,omitempty"`
}
type DetectionSetting_DisableSuppression struct {
	DisableSuppression *schema.Empty `protobuf:"bytes,4,opt,name=disable_suppression,json=disableSuppression,proto3,oneof" json:"disable_suppression,omitempty"`
}
type DetectionSetting_EnableThreatCampaigns struct {
	EnableThreatCampaigns *schema.Empty `protobuf:"bytes,6,opt,name=enable_threat_campaigns,json=enableThreatCampaigns,proto3,oneof" json:"enable_threat_campaigns,omitempty"`
}
type DetectionSetting_DisableThreatCampaigns struct {
	DisableThreatCampaigns *schema.Empty `protobuf:"bytes,7,opt,name=disable_threat_campaigns,json=disableThreatCampaigns,proto3,oneof" json:"disable_threat_campaigns,omitempty"`
}
type DetectionSetting_DefaultViolationSettings struct {
	DefaultViolationSettings *schema.Empty `protobuf:"bytes,9,opt,name=default_violation_settings,json=defaultViolationSettings,proto3,oneof" json:"default_violation_settings,omitempty"`
}
type DetectionSetting_ViolationSettings struct {
	ViolationSettings *ViolationSettings `protobuf:"bytes,11,opt,name=violation_settings,json=violationSettings,proto3,oneof" json:"violation_settings,omitempty"`
}
type DetectionSetting_DisableStaging struct {
	DisableStaging *schema.Empty `protobuf:"bytes,13,opt,name=disable_staging,json=disableStaging,proto3,oneof" json:"disable_staging,omitempty"`
}
type DetectionSetting_StageNewSignatures struct {
	StageNewSignatures *SignaturesStagingSettings `protobuf:"bytes,14,opt,name=stage_new_signatures,json=stageNewSignatures,proto3,oneof" json:"stage_new_signatures,omitempty"`
}
type DetectionSetting_StageNewAndUpdatedSignatures struct {
	StageNewAndUpdatedSignatures *SignaturesStagingSettings `protobuf:"bytes,15,opt,name=stage_new_and_updated_signatures,json=stageNewAndUpdatedSignatures,proto3,oneof" json:"stage_new_and_updated_signatures,omitempty"`
}

func (*DetectionSetting_EnableSuppression) isDetectionSetting_FalsePositiveSuppression()         {}
func (*DetectionSetting_DisableSuppression) isDetectionSetting_FalsePositiveSuppression()        {}
func (*DetectionSetting_EnableThreatCampaigns) isDetectionSetting_ThreatCampaignChoice()         {}
func (*DetectionSetting_DisableThreatCampaigns) isDetectionSetting_ThreatCampaignChoice()        {}
func (*DetectionSetting_DefaultViolationSettings) isDetectionSetting_ViolationDetectionSetting() {}
func (*DetectionSetting_ViolationSettings) isDetectionSetting_ViolationDetectionSetting()        {}
func (*DetectionSetting_DisableStaging) isDetectionSetting_SignaturesStagingSettings()           {}
func (*DetectionSetting_StageNewSignatures) isDetectionSetting_SignaturesStagingSettings()       {}
func (*DetectionSetting_StageNewAndUpdatedSignatures) isDetectionSetting_SignaturesStagingSettings() {
}

func (m *DetectionSetting) GetFalsePositiveSuppression() isDetectionSetting_FalsePositiveSuppression {
	if m != nil {
		return m.FalsePositiveSuppression
	}
	return nil
}
func (m *DetectionSetting) GetThreatCampaignChoice() isDetectionSetting_ThreatCampaignChoice {
	if m != nil {
		return m.ThreatCampaignChoice
	}
	return nil
}
func (m *DetectionSetting) GetViolationDetectionSetting() isDetectionSetting_ViolationDetectionSetting {
	if m != nil {
		return m.ViolationDetectionSetting
	}
	return nil
}
func (m *DetectionSetting) GetSignaturesStagingSettings() isDetectionSetting_SignaturesStagingSettings {
	if m != nil {
		return m.SignaturesStagingSettings
	}
	return nil
}

func (m *DetectionSetting) GetSignatureSelectionSetting() *SignatureSelectionSetting {
	if m != nil {
		return m.SignatureSelectionSetting
	}
	return nil
}

func (m *DetectionSetting) GetEnableSuppression() *schema.Empty {
	if x, ok := m.GetFalsePositiveSuppression().(*DetectionSetting_EnableSuppression); ok {
		return x.EnableSuppression
	}
	return nil
}

func (m *DetectionSetting) GetDisableSuppression() *schema.Empty {
	if x, ok := m.GetFalsePositiveSuppression().(*DetectionSetting_DisableSuppression); ok {
		return x.DisableSuppression
	}
	return nil
}

func (m *DetectionSetting) GetEnableThreatCampaigns() *schema.Empty {
	if x, ok := m.GetThreatCampaignChoice().(*DetectionSetting_EnableThreatCampaigns); ok {
		return x.EnableThreatCampaigns
	}
	return nil
}

func (m *DetectionSetting) GetDisableThreatCampaigns() *schema.Empty {
	if x, ok := m.GetThreatCampaignChoice().(*DetectionSetting_DisableThreatCampaigns); ok {
		return x.DisableThreatCampaigns
	}
	return nil
}

func (m *DetectionSetting) GetDefaultViolationSettings() *schema.Empty {
	if x, ok := m.GetViolationDetectionSetting().(*DetectionSetting_DefaultViolationSettings); ok {
		return x.DefaultViolationSettings
	}
	return nil
}

func (m *DetectionSetting) GetViolationSettings() *ViolationSettings {
	if x, ok := m.GetViolationDetectionSetting().(*DetectionSetting_ViolationSettings); ok {
		return x.ViolationSettings
	}
	return nil
}

func (m *DetectionSetting) GetDisableStaging() *schema.Empty {
	if x, ok := m.GetSignaturesStagingSettings().(*DetectionSetting_DisableStaging); ok {
		return x.DisableStaging
	}
	return nil
}

func (m *DetectionSetting) GetStageNewSignatures() *SignaturesStagingSettings {
	if x, ok := m.GetSignaturesStagingSettings().(*DetectionSetting_StageNewSignatures); ok {
		return x.StageNewSignatures
	}
	return nil
}

func (m *DetectionSetting) GetStageNewAndUpdatedSignatures() *SignaturesStagingSettings {
	if x, ok := m.GetSignaturesStagingSettings().(*DetectionSetting_StageNewAndUpdatedSignatures); ok {
		return x.StageNewAndUpdatedSignatures
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DetectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DetectionSetting_EnableSuppression)(nil),
		(*DetectionSetting_DisableSuppression)(nil),
		(*DetectionSetting_EnableThreatCampaigns)(nil),
		(*DetectionSetting_DisableThreatCampaigns)(nil),
		(*DetectionSetting_DefaultViolationSettings)(nil),
		(*DetectionSetting_ViolationSettings)(nil),
		(*DetectionSetting_DisableStaging)(nil),
		(*DetectionSetting_StageNewSignatures)(nil),
		(*DetectionSetting_StageNewAndUpdatedSignatures)(nil),
	}
}

// Attack Signatures Staging Settings
//
// x-displayName: "Attack Signatures Staging Settings"
// Attack Signatures staging configuration.
type SignaturesStagingSettings struct {
	// Staging Period
	//
	// x-displayName: "Staging Period"
	// x-example: "7"
	// x-required
	// Define staging period in days. The default staging period is 7 days and the max supported staging period is
	// 20 days.
	StagingPeriod uint32 `protobuf:"varint,1,opt,name=staging_period,json=stagingPeriod,proto3" json:"staging_period,omitempty"`
}

func (m *SignaturesStagingSettings) Reset()      { *m = SignaturesStagingSettings{} }
func (*SignaturesStagingSettings) ProtoMessage() {}
func (*SignaturesStagingSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{5}
}
func (m *SignaturesStagingSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignaturesStagingSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignaturesStagingSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignaturesStagingSettings.Merge(m, src)
}
func (m *SignaturesStagingSettings) XXX_Size() int {
	return m.Size()
}
func (m *SignaturesStagingSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_SignaturesStagingSettings.DiscardUnknown(m)
}

var xxx_messageInfo_SignaturesStagingSettings proto.InternalMessageInfo

func (m *SignaturesStagingSettings) GetStagingPeriod() uint32 {
	if m != nil {
		return m.StagingPeriod
	}
	return 0
}

// Allowed Response Codes
//
// x-displayName: "Allowed Response Codes"
// List of HTTP response status codes that are allowed
type AllowedResponseCodes struct {
	// response_code
	//
	// x-displayName: "Response Code"
	// x-example: "[200, 201, 204, 300, 302, 400, 403, 404, 500, 501, 503]"
	// x-required
	// List of HTTP response status codes that are allowed
	ResponseCode []uint32 `protobuf:"varint,1,rep,packed,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
}

func (m *AllowedResponseCodes) Reset()      { *m = AllowedResponseCodes{} }
func (*AllowedResponseCodes) ProtoMessage() {}
func (*AllowedResponseCodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{6}
}
func (m *AllowedResponseCodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedResponseCodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AllowedResponseCodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedResponseCodes.Merge(m, src)
}
func (m *AllowedResponseCodes) XXX_Size() int {
	return m.Size()
}
func (m *AllowedResponseCodes) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedResponseCodes.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedResponseCodes proto.InternalMessageInfo

func (m *AllowedResponseCodes) GetResponseCode() []uint32 {
	if m != nil {
		return m.ResponseCode
	}
	return nil
}

// AnonymizeHttpHeader
//
// x-displayName: "Anonymize HTTP Header"
// Configure anonymization for HTTP Headers
type AnonymizeHttpHeader struct {
	// header_name
	//
	// x-displayName: "Header Name"
	// x-example: "value"
	// x-required
	// Masks the HTTP header value. The setting does not mask the HTTP header name.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
}

func (m *AnonymizeHttpHeader) Reset()      { *m = AnonymizeHttpHeader{} }
func (*AnonymizeHttpHeader) ProtoMessage() {}
func (*AnonymizeHttpHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{7}
}
func (m *AnonymizeHttpHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymizeHttpHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnonymizeHttpHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizeHttpHeader.Merge(m, src)
}
func (m *AnonymizeHttpHeader) XXX_Size() int {
	return m.Size()
}
func (m *AnonymizeHttpHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizeHttpHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizeHttpHeader proto.InternalMessageInfo

func (m *AnonymizeHttpHeader) GetHeaderName() string {
	if m != nil {
		return m.HeaderName
	}
	return ""
}

// AnonymizeHttpQueryParameter
//
// x-displayName: "Anonymize HTTP Query Parameter"
// Configure anonymization for HTTP Parameters
type AnonymizeHttpQueryParameter struct {
	// query_param_name
	//
	// x-displayName: "Query Parameter Name"
	// x-example: "value"
	// x-required
	// Masks the query parameter value. The setting does not mask the query parameter name.
	QueryParamName string `protobuf:"bytes,1,opt,name=query_param_name,json=queryParamName,proto3" json:"query_param_name,omitempty"`
}

func (m *AnonymizeHttpQueryParameter) Reset()      { *m = AnonymizeHttpQueryParameter{} }
func (*AnonymizeHttpQueryParameter) ProtoMessage() {}
func (*AnonymizeHttpQueryParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{8}
}
func (m *AnonymizeHttpQueryParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymizeHttpQueryParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnonymizeHttpQueryParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizeHttpQueryParameter.Merge(m, src)
}
func (m *AnonymizeHttpQueryParameter) XXX_Size() int {
	return m.Size()
}
func (m *AnonymizeHttpQueryParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizeHttpQueryParameter.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizeHttpQueryParameter proto.InternalMessageInfo

func (m *AnonymizeHttpQueryParameter) GetQueryParamName() string {
	if m != nil {
		return m.QueryParamName
	}
	return ""
}

// AnonymizeHttpCookie
//
// x-displayName: "Anonymize HTTP Cookie"
// Configure anonymization for HTTP Cookies
type AnonymizeHttpCookie struct {
	// cookie_name
	//
	// x-displayName: "Cookie Name"
	// x-example: "value"
	// x-required
	// Masks the cookie value. The setting does not mask the cookie name.
	CookieName string `protobuf:"bytes,1,opt,name=cookie_name,json=cookieName,proto3" json:"cookie_name,omitempty"`
}

func (m *AnonymizeHttpCookie) Reset()      { *m = AnonymizeHttpCookie{} }
func (*AnonymizeHttpCookie) ProtoMessage() {}
func (*AnonymizeHttpCookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{9}
}
func (m *AnonymizeHttpCookie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymizeHttpCookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnonymizeHttpCookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizeHttpCookie.Merge(m, src)
}
func (m *AnonymizeHttpCookie) XXX_Size() int {
	return m.Size()
}
func (m *AnonymizeHttpCookie) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizeHttpCookie.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizeHttpCookie proto.InternalMessageInfo

func (m *AnonymizeHttpCookie) GetCookieName() string {
	if m != nil {
		return m.CookieName
	}
	return ""
}

// AnonymizationConfiguration
//
// x-displayName: "Anonymization Configuration"
// Configure anonymization for HTTP headers, parameters or cookies which may contain sensitive data
type AnonymizationConfiguration struct {
	// Anonymization Choice
	//
	// x-displayName: "Choice"
	// x-required
	// Define HTTP headers, query parameters or cookie names whose values should be masked
	//
	// Types that are valid to be assigned to AnonymizationChoice:
	//	*AnonymizationConfiguration_HttpHeader
	//	*AnonymizationConfiguration_QueryParameter
	//	*AnonymizationConfiguration_Cookie
	AnonymizationChoice isAnonymizationConfiguration_AnonymizationChoice `protobuf_oneof:"anonymization_choice"`
}

func (m *AnonymizationConfiguration) Reset()      { *m = AnonymizationConfiguration{} }
func (*AnonymizationConfiguration) ProtoMessage() {}
func (*AnonymizationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{10}
}
func (m *AnonymizationConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymizationConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnonymizationConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizationConfiguration.Merge(m, src)
}
func (m *AnonymizationConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AnonymizationConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizationConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizationConfiguration proto.InternalMessageInfo

type isAnonymizationConfiguration_AnonymizationChoice interface {
	isAnonymizationConfiguration_AnonymizationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AnonymizationConfiguration_HttpHeader struct {
	HttpHeader *AnonymizeHttpHeader `protobuf:"bytes,2,opt,name=http_header,json=httpHeader,proto3,oneof" json:"http_header,omitempty"`
}
type AnonymizationConfiguration_QueryParameter struct {
	QueryParameter *AnonymizeHttpQueryParameter `protobuf:"bytes,3,opt,name=query_parameter,json=queryParameter,proto3,oneof" json:"query_parameter,omitempty"`
}
type AnonymizationConfiguration_Cookie struct {
	Cookie *AnonymizeHttpCookie `protobuf:"bytes,4,opt,name=cookie,proto3,oneof" json:"cookie,omitempty"`
}

func (*AnonymizationConfiguration_HttpHeader) isAnonymizationConfiguration_AnonymizationChoice() {}
func (*AnonymizationConfiguration_QueryParameter) isAnonymizationConfiguration_AnonymizationChoice() {
}
func (*AnonymizationConfiguration_Cookie) isAnonymizationConfiguration_AnonymizationChoice() {}

func (m *AnonymizationConfiguration) GetAnonymizationChoice() isAnonymizationConfiguration_AnonymizationChoice {
	if m != nil {
		return m.AnonymizationChoice
	}
	return nil
}

func (m *AnonymizationConfiguration) GetHttpHeader() *AnonymizeHttpHeader {
	if x, ok := m.GetAnonymizationChoice().(*AnonymizationConfiguration_HttpHeader); ok {
		return x.HttpHeader
	}
	return nil
}

func (m *AnonymizationConfiguration) GetQueryParameter() *AnonymizeHttpQueryParameter {
	if x, ok := m.GetAnonymizationChoice().(*AnonymizationConfiguration_QueryParameter); ok {
		return x.QueryParameter
	}
	return nil
}

func (m *AnonymizationConfiguration) GetCookie() *AnonymizeHttpCookie {
	if x, ok := m.GetAnonymizationChoice().(*AnonymizationConfiguration_Cookie); ok {
		return x.Cookie
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AnonymizationConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AnonymizationConfiguration_HttpHeader)(nil),
		(*AnonymizationConfiguration_QueryParameter)(nil),
		(*AnonymizationConfiguration_Cookie)(nil),
	}
}

// AnonymizationSetting
//
// x-displayName: "Anonymization Configuration"
// Anonymization settings which is a list of HTTP headers, parameters and cookies
type AnonymizationSetting struct {
	// AnonymizationConfiguration
	//
	// x-displayName: "Configuration"
	// x-required
	// List of HTTP headers, cookies and query parameters whose values will be masked
	AnonymizationConfig []*AnonymizationConfiguration `protobuf:"bytes,1,rep,name=anonymization_config,json=anonymizationConfig,proto3" json:"anonymization_config,omitempty"`
}

func (m *AnonymizationSetting) Reset()      { *m = AnonymizationSetting{} }
func (*AnonymizationSetting) ProtoMessage() {}
func (*AnonymizationSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{11}
}
func (m *AnonymizationSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymizationSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnonymizationSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizationSetting.Merge(m, src)
}
func (m *AnonymizationSetting) XXX_Size() int {
	return m.Size()
}
func (m *AnonymizationSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizationSetting.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizationSetting proto.InternalMessageInfo

func (m *AnonymizationSetting) GetAnonymizationConfig() []*AnonymizationConfiguration {
	if m != nil {
		return m.AnonymizationConfig
	}
	return nil
}

// Custom Blocking Page
//
// x-displayName: "Custom Blocking Response Page"
// Custom blocking response page body
type CustomBlockingPage struct {
	// blocking_page
	//
	// x-displayName: "Blocking Response Page Body"
	// x-example: "<html><head><title>Request Rejected</title></head><body>The requested URL was rejected. Please consult with your administrator.<br/><br/>Your support ID is: {{request_id}}<br/><br/><a href=\"javascript:history.back()\">[Go Back]</a></body></html>"
	// Define the content of the response page (e.g., an HTML document or a JSON object), use the
	// {{request_id}} placeholder to provide users with a unique
	// identifier to be able to trace the blocked request in the logs.
	// The maximum allowed size of response body is 4096 bytes after base64 encoding,
	// which would be about 3070 bytes in plain text.
	BlockingPage string `protobuf:"bytes,1,opt,name=blocking_page,json=blockingPage,proto3" json:"blocking_page,omitempty"`
	// response_code
	//
	// x-displayName: "Response Code"
	// x-example: 200 OK
	// HTTP status code to be sent for blocked requests
	ResponseCode schema.HttpStatusCode `protobuf:"varint,2,opt,name=response_code,json=responseCode,proto3,enum=ves.io.schema.HttpStatusCode" json:"response_code,omitempty"`
}

func (m *CustomBlockingPage) Reset()      { *m = CustomBlockingPage{} }
func (*CustomBlockingPage) ProtoMessage() {}
func (*CustomBlockingPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{12}
}
func (m *CustomBlockingPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomBlockingPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomBlockingPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomBlockingPage.Merge(m, src)
}
func (m *CustomBlockingPage) XXX_Size() int {
	return m.Size()
}
func (m *CustomBlockingPage) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomBlockingPage.DiscardUnknown(m)
}

var xxx_messageInfo_CustomBlockingPage proto.InternalMessageInfo

func (m *CustomBlockingPage) GetBlockingPage() string {
	if m != nil {
		return m.BlockingPage
	}
	return ""
}

func (m *CustomBlockingPage) GetResponseCode() schema.HttpStatusCode {
	if m != nil {
		return m.ResponseCode
	}
	return schema.EmptyStatusCode
}

// GlobalSpecType
//
// x-displayName: "Application Firewall Specification"
type GlobalSpecType struct {
	// Enforcement Mode
	//
	// x-displayName: "Enforcement Mode"
	// x-required
	// Monitoring mode will identify and log threats, whereas Blocking mode will both log and block threats
	//
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*GlobalSpecType_UseLoadbalancerSetting
	//	*GlobalSpecType_Blocking
	//	*GlobalSpecType_Monitoring
	EnforcementModeChoice isGlobalSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Security Policy
	//
	// x-displayName: "Security Policy"
	// x-required
	// Settings used by WAF to detect malicious requests.
	// These settings can be used to tune WAF operations for optimum detection with minimal false positives.
	//
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*GlobalSpecType_DefaultDetectionSettings
	//	*GlobalSpecType_DetectionSettings
	//	*GlobalSpecType_AiRiskBasedBlocking
	DetectionSettingChoice isGlobalSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Signature-based Bot Protection
	//
	// x-displayName: "Signature-Based Bot Protection"
	// x-required
	// Settings to manage and mitigate bot traffic. These settings work in tandem with the appfirewall enforcement mode i.e, block setting for bot protection is enforced if both bot and appfirewall enforcement modes are in block. In all other scenarios, bots will only be reported. Behavior based bot protection, which prevents large-scale fraud with account takeover protection and much more, is available as F5 Distributed Cloud Bot Defense and is an add-on subscription service.
	//
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*GlobalSpecType_DefaultBotSetting
	//	*GlobalSpecType_BotProtectionSetting
	BotProtectionChoice isGlobalSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
	// Allowed Response Status Codes
	//
	// x-displayName: "Allowed Response Status Codes"
	// x-required
	// HTTP response status codes which are allowed to pass through the platform to the client. All response codes other than the allowed ones are blocked by the platform.
	//
	// Types that are valid to be assigned to AllowedResponseCodesChoice:
	//	*GlobalSpecType_AllowAllResponseCodes
	//	*GlobalSpecType_AllowedResponseCodes
	AllowedResponseCodesChoice isGlobalSpecType_AllowedResponseCodesChoice `protobuf_oneof:"allowed_response_codes_choice"`
	// Anonymization Settings
	//
	// x-displayName: "Mask Sensitive Parameters in Logs"
	// x-required
	// Replaces sensitive data in the logs (as defined in the context) with a string of asterisks (*)
	//
	// Types that are valid to be assigned to AnonymizationSetting:
	//	*GlobalSpecType_DisableAnonymization
	//	*GlobalSpecType_DefaultAnonymization
	//	*GlobalSpecType_CustomAnonymization
	AnonymizationSetting isGlobalSpecType_AnonymizationSetting `protobuf_oneof:"anonymization_setting"`
	// Blocking Page
	//
	// x-displayName: "Blocking Response Page"
	// x-required
	// Blocking response page that should be returned to the client when the client request, or the web server response, is blocked by the App Firewall
	//
	// Types that are valid to be assigned to BlockingPageChoice:
	//	*GlobalSpecType_UseDefaultBlockingPage
	//	*GlobalSpecType_BlockingPage
	BlockingPageChoice isGlobalSpecType_BlockingPageChoice `protobuf_oneof:"blocking_page_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{13}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_EnforcementModeChoice interface {
	isGlobalSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DetectionSettingChoice interface {
	isGlobalSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BotProtectionChoice interface {
	isGlobalSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AllowedResponseCodesChoice interface {
	isGlobalSpecType_AllowedResponseCodesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AnonymizationSetting interface {
	isGlobalSpecType_AnonymizationSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockingPageChoice interface {
	isGlobalSpecType_BlockingPageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type GlobalSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type GlobalSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type GlobalSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type GlobalSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type GlobalSpecType_AiRiskBasedBlocking struct {
	AiRiskBasedBlocking *AiRiskBasedBlocking `protobuf:"bytes,21,opt,name=ai_risk_based_blocking,json=aiRiskBasedBlocking,proto3,oneof" json:"ai_risk_based_blocking,omitempty"`
}
type GlobalSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type GlobalSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}
type GlobalSpecType_AllowAllResponseCodes struct {
	AllowAllResponseCodes *schema.Empty `protobuf:"bytes,12,opt,name=allow_all_response_codes,json=allowAllResponseCodes,proto3,oneof" json:"allow_all_response_codes,omitempty"`
}
type GlobalSpecType_AllowedResponseCodes struct {
	AllowedResponseCodes *AllowedResponseCodes `protobuf:"bytes,13,opt,name=allowed_response_codes,json=allowedResponseCodes,proto3,oneof" json:"allowed_response_codes,omitempty"`
}
type GlobalSpecType_DisableAnonymization struct {
	DisableAnonymization *schema.Empty `protobuf:"bytes,15,opt,name=disable_anonymization,json=disableAnonymization,proto3,oneof" json:"disable_anonymization,omitempty"`
}
type GlobalSpecType_DefaultAnonymization struct {
	DefaultAnonymization *schema.Empty `protobuf:"bytes,16,opt,name=default_anonymization,json=defaultAnonymization,proto3,oneof" json:"default_anonymization,omitempty"`
}
type GlobalSpecType_CustomAnonymization struct {
	CustomAnonymization *AnonymizationSetting `protobuf:"bytes,17,opt,name=custom_anonymization,json=customAnonymization,proto3,oneof" json:"custom_anonymization,omitempty"`
}
type GlobalSpecType_UseDefaultBlockingPage struct {
	UseDefaultBlockingPage *schema.Empty `protobuf:"bytes,19,opt,name=use_default_blocking_page,json=useDefaultBlockingPage,proto3,oneof" json:"use_default_blocking_page,omitempty"`
}
type GlobalSpecType_BlockingPage struct {
	BlockingPage *CustomBlockingPage `protobuf:"bytes,20,opt,name=blocking_page,json=blockingPage,proto3,oneof" json:"blocking_page,omitempty"`
}

func (*GlobalSpecType_UseLoadbalancerSetting) isGlobalSpecType_EnforcementModeChoice()     {}
func (*GlobalSpecType_Blocking) isGlobalSpecType_EnforcementModeChoice()                   {}
func (*GlobalSpecType_Monitoring) isGlobalSpecType_EnforcementModeChoice()                 {}
func (*GlobalSpecType_DefaultDetectionSettings) isGlobalSpecType_DetectionSettingChoice()  {}
func (*GlobalSpecType_DetectionSettings) isGlobalSpecType_DetectionSettingChoice()         {}
func (*GlobalSpecType_AiRiskBasedBlocking) isGlobalSpecType_DetectionSettingChoice()       {}
func (*GlobalSpecType_DefaultBotSetting) isGlobalSpecType_BotProtectionChoice()            {}
func (*GlobalSpecType_BotProtectionSetting) isGlobalSpecType_BotProtectionChoice()         {}
func (*GlobalSpecType_AllowAllResponseCodes) isGlobalSpecType_AllowedResponseCodesChoice() {}
func (*GlobalSpecType_AllowedResponseCodes) isGlobalSpecType_AllowedResponseCodesChoice()  {}
func (*GlobalSpecType_DisableAnonymization) isGlobalSpecType_AnonymizationSetting()        {}
func (*GlobalSpecType_DefaultAnonymization) isGlobalSpecType_AnonymizationSetting()        {}
func (*GlobalSpecType_CustomAnonymization) isGlobalSpecType_AnonymizationSetting()         {}
func (*GlobalSpecType_UseDefaultBlockingPage) isGlobalSpecType_BlockingPageChoice()        {}
func (*GlobalSpecType_BlockingPage) isGlobalSpecType_BlockingPageChoice()                  {}

func (m *GlobalSpecType) GetEnforcementModeChoice() isGlobalSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDetectionSettingChoice() isGlobalSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBotProtectionChoice() isGlobalSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetAllowedResponseCodesChoice() isGlobalSpecType_AllowedResponseCodesChoice {
	if m != nil {
		return m.AllowedResponseCodesChoice
	}
	return nil
}
func (m *GlobalSpecType) GetAnonymizationSetting() isGlobalSpecType_AnonymizationSetting {
	if m != nil {
		return m.AnonymizationSetting
	}
	return nil
}
func (m *GlobalSpecType) GetBlockingPageChoice() isGlobalSpecType_BlockingPageChoice {
	if m != nil {
		return m.BlockingPageChoice
	}
	return nil
}

func (m *GlobalSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *GlobalSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *GlobalSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *GlobalSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *GlobalSpecType) GetAiRiskBasedBlocking() *AiRiskBasedBlocking {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_AiRiskBasedBlocking); ok {
		return x.AiRiskBasedBlocking
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*GlobalSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *GlobalSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*GlobalSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

func (m *GlobalSpecType) GetAllowAllResponseCodes() *schema.Empty {
	if x, ok := m.GetAllowedResponseCodesChoice().(*GlobalSpecType_AllowAllResponseCodes); ok {
		return x.AllowAllResponseCodes
	}
	return nil
}

func (m *GlobalSpecType) GetAllowedResponseCodes() *AllowedResponseCodes {
	if x, ok := m.GetAllowedResponseCodesChoice().(*GlobalSpecType_AllowedResponseCodes); ok {
		return x.AllowedResponseCodes
	}
	return nil
}

func (m *GlobalSpecType) GetDisableAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*GlobalSpecType_DisableAnonymization); ok {
		return x.DisableAnonymization
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*GlobalSpecType_DefaultAnonymization); ok {
		return x.DefaultAnonymization
	}
	return nil
}

func (m *GlobalSpecType) GetCustomAnonymization() *AnonymizationSetting {
	if x, ok := m.GetAnonymizationSetting().(*GlobalSpecType_CustomAnonymization); ok {
		return x.CustomAnonymization
	}
	return nil
}

func (m *GlobalSpecType) GetUseDefaultBlockingPage() *schema.Empty {
	if x, ok := m.GetBlockingPageChoice().(*GlobalSpecType_UseDefaultBlockingPage); ok {
		return x.UseDefaultBlockingPage
	}
	return nil
}

func (m *GlobalSpecType) GetBlockingPage() *CustomBlockingPage {
	if x, ok := m.GetBlockingPageChoice().(*GlobalSpecType_BlockingPage); ok {
		return x.BlockingPage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_UseLoadbalancerSetting)(nil),
		(*GlobalSpecType_Blocking)(nil),
		(*GlobalSpecType_Monitoring)(nil),
		(*GlobalSpecType_DefaultDetectionSettings)(nil),
		(*GlobalSpecType_DetectionSettings)(nil),
		(*GlobalSpecType_AiRiskBasedBlocking)(nil),
		(*GlobalSpecType_DefaultBotSetting)(nil),
		(*GlobalSpecType_BotProtectionSetting)(nil),
		(*GlobalSpecType_AllowAllResponseCodes)(nil),
		(*GlobalSpecType_AllowedResponseCodes)(nil),
		(*GlobalSpecType_DisableAnonymization)(nil),
		(*GlobalSpecType_DefaultAnonymization)(nil),
		(*GlobalSpecType_CustomAnonymization)(nil),
		(*GlobalSpecType_UseDefaultBlockingPage)(nil),
		(*GlobalSpecType_BlockingPage)(nil),
	}
}

// AI Risk Based Blocking
//
// x-displayName: "Risk-based blocking (powered by AI)"
// Default policy settings will be applied. All attack types, including high, medium, and low accuracy signatures,
// automatic attack signature tuning, threat campaigns, and all violations will be enabled. ML algorithms will
// assess transaction risk, and only high-risk transactions will be blocked.
type AiRiskBasedBlocking struct {
	// high_risk_action
	//
	// x-displayName: "High Risk"
	// x-required
	// High-risk HTTP transactions are associated with attack attempts or requests that violate the application firewall policy.
	HighRiskAction RiskBasedBlockingAction `protobuf:"varint,1,opt,name=high_risk_action,json=highRiskAction,proto3,enum=ves.io.schema.app_firewall.RiskBasedBlockingAction" json:"high_risk_action,omitempty"`
	// medium_risk_action
	//
	// x-displayName: "Medium Risk"
	// x-required
	// Medium-risk HTTP transactions are associated with suspicious requests.
	MediumRiskAction RiskBasedBlockingAction `protobuf:"varint,2,opt,name=medium_risk_action,json=mediumRiskAction,proto3,enum=ves.io.schema.app_firewall.RiskBasedBlockingAction" json:"medium_risk_action,omitempty"`
	// low_risk_action
	//
	// x-displayName: "Low Risk"
	// x-required
	// Low-risk HTTP transactions are associated with findings that do not present an actual threat to the protected application.
	LowRiskAction RiskBasedBlockingAction `protobuf:"varint,3,opt,name=low_risk_action,json=lowRiskAction,proto3,enum=ves.io.schema.app_firewall.RiskBasedBlockingAction" json:"low_risk_action,omitempty"`
}

func (m *AiRiskBasedBlocking) Reset()      { *m = AiRiskBasedBlocking{} }
func (*AiRiskBasedBlocking) ProtoMessage() {}
func (*AiRiskBasedBlocking) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{14}
}
func (m *AiRiskBasedBlocking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AiRiskBasedBlocking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AiRiskBasedBlocking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AiRiskBasedBlocking.Merge(m, src)
}
func (m *AiRiskBasedBlocking) XXX_Size() int {
	return m.Size()
}
func (m *AiRiskBasedBlocking) XXX_DiscardUnknown() {
	xxx_messageInfo_AiRiskBasedBlocking.DiscardUnknown(m)
}

var xxx_messageInfo_AiRiskBasedBlocking proto.InternalMessageInfo

func (m *AiRiskBasedBlocking) GetHighRiskAction() RiskBasedBlockingAction {
	if m != nil {
		return m.HighRiskAction
	}
	return AI_BLOCK
}

func (m *AiRiskBasedBlocking) GetMediumRiskAction() RiskBasedBlockingAction {
	if m != nil {
		return m.MediumRiskAction
	}
	return AI_BLOCK
}

func (m *AiRiskBasedBlocking) GetLowRiskAction() RiskBasedBlockingAction {
	if m != nil {
		return m.LowRiskAction
	}
	return AI_BLOCK
}

// Create Application Firewall
//
// x-displayName: "Create Application Firewall"
// Create Application Firewall
type CreateSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*CreateSpecType_UseLoadbalancerSetting
	//	*CreateSpecType_Blocking
	//	*CreateSpecType_Monitoring
	EnforcementModeChoice isCreateSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*CreateSpecType_DefaultDetectionSettings
	//	*CreateSpecType_DetectionSettings
	//	*CreateSpecType_AiRiskBasedBlocking
	DetectionSettingChoice isCreateSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*CreateSpecType_DefaultBotSetting
	//	*CreateSpecType_BotProtectionSetting
	BotProtectionChoice isCreateSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
	// Types that are valid to be assigned to AllowedResponseCodesChoice:
	//	*CreateSpecType_AllowAllResponseCodes
	//	*CreateSpecType_AllowedResponseCodes
	AllowedResponseCodesChoice isCreateSpecType_AllowedResponseCodesChoice `protobuf_oneof:"allowed_response_codes_choice"`
	// Types that are valid to be assigned to AnonymizationSetting:
	//	*CreateSpecType_DisableAnonymization
	//	*CreateSpecType_DefaultAnonymization
	//	*CreateSpecType_CustomAnonymization
	AnonymizationSetting isCreateSpecType_AnonymizationSetting `protobuf_oneof:"anonymization_setting"`
	// Types that are valid to be assigned to BlockingPageChoice:
	//	*CreateSpecType_UseDefaultBlockingPage
	//	*CreateSpecType_BlockingPage
	BlockingPageChoice isCreateSpecType_BlockingPageChoice `protobuf_oneof:"blocking_page_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{15}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_EnforcementModeChoice interface {
	isCreateSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DetectionSettingChoice interface {
	isCreateSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BotProtectionChoice interface {
	isCreateSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AllowedResponseCodesChoice interface {
	isCreateSpecType_AllowedResponseCodesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AnonymizationSetting interface {
	isCreateSpecType_AnonymizationSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockingPageChoice interface {
	isCreateSpecType_BlockingPageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type CreateSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type CreateSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type CreateSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type CreateSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type CreateSpecType_AiRiskBasedBlocking struct {
	AiRiskBasedBlocking *AiRiskBasedBlocking `protobuf:"bytes,21,opt,name=ai_risk_based_blocking,json=aiRiskBasedBlocking,proto3,oneof" json:"ai_risk_based_blocking,omitempty"`
}
type CreateSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type CreateSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}
type CreateSpecType_AllowAllResponseCodes struct {
	AllowAllResponseCodes *schema.Empty `protobuf:"bytes,12,opt,name=allow_all_response_codes,json=allowAllResponseCodes,proto3,oneof" json:"allow_all_response_codes,omitempty"`
}
type CreateSpecType_AllowedResponseCodes struct {
	AllowedResponseCodes *AllowedResponseCodes `protobuf:"bytes,13,opt,name=allowed_response_codes,json=allowedResponseCodes,proto3,oneof" json:"allowed_response_codes,omitempty"`
}
type CreateSpecType_DisableAnonymization struct {
	DisableAnonymization *schema.Empty `protobuf:"bytes,15,opt,name=disable_anonymization,json=disableAnonymization,proto3,oneof" json:"disable_anonymization,omitempty"`
}
type CreateSpecType_DefaultAnonymization struct {
	DefaultAnonymization *schema.Empty `protobuf:"bytes,16,opt,name=default_anonymization,json=defaultAnonymization,proto3,oneof" json:"default_anonymization,omitempty"`
}
type CreateSpecType_CustomAnonymization struct {
	CustomAnonymization *AnonymizationSetting `protobuf:"bytes,17,opt,name=custom_anonymization,json=customAnonymization,proto3,oneof" json:"custom_anonymization,omitempty"`
}
type CreateSpecType_UseDefaultBlockingPage struct {
	UseDefaultBlockingPage *schema.Empty `protobuf:"bytes,19,opt,name=use_default_blocking_page,json=useDefaultBlockingPage,proto3,oneof" json:"use_default_blocking_page,omitempty"`
}
type CreateSpecType_BlockingPage struct {
	BlockingPage *CustomBlockingPage `protobuf:"bytes,20,opt,name=blocking_page,json=blockingPage,proto3,oneof" json:"blocking_page,omitempty"`
}

func (*CreateSpecType_UseLoadbalancerSetting) isCreateSpecType_EnforcementModeChoice()     {}
func (*CreateSpecType_Blocking) isCreateSpecType_EnforcementModeChoice()                   {}
func (*CreateSpecType_Monitoring) isCreateSpecType_EnforcementModeChoice()                 {}
func (*CreateSpecType_DefaultDetectionSettings) isCreateSpecType_DetectionSettingChoice()  {}
func (*CreateSpecType_DetectionSettings) isCreateSpecType_DetectionSettingChoice()         {}
func (*CreateSpecType_AiRiskBasedBlocking) isCreateSpecType_DetectionSettingChoice()       {}
func (*CreateSpecType_DefaultBotSetting) isCreateSpecType_BotProtectionChoice()            {}
func (*CreateSpecType_BotProtectionSetting) isCreateSpecType_BotProtectionChoice()         {}
func (*CreateSpecType_AllowAllResponseCodes) isCreateSpecType_AllowedResponseCodesChoice() {}
func (*CreateSpecType_AllowedResponseCodes) isCreateSpecType_AllowedResponseCodesChoice()  {}
func (*CreateSpecType_DisableAnonymization) isCreateSpecType_AnonymizationSetting()        {}
func (*CreateSpecType_DefaultAnonymization) isCreateSpecType_AnonymizationSetting()        {}
func (*CreateSpecType_CustomAnonymization) isCreateSpecType_AnonymizationSetting()         {}
func (*CreateSpecType_UseDefaultBlockingPage) isCreateSpecType_BlockingPageChoice()        {}
func (*CreateSpecType_BlockingPage) isCreateSpecType_BlockingPageChoice()                  {}

func (m *CreateSpecType) GetEnforcementModeChoice() isCreateSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *CreateSpecType) GetDetectionSettingChoice() isCreateSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *CreateSpecType) GetBotProtectionChoice() isCreateSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}
func (m *CreateSpecType) GetAllowedResponseCodesChoice() isCreateSpecType_AllowedResponseCodesChoice {
	if m != nil {
		return m.AllowedResponseCodesChoice
	}
	return nil
}
func (m *CreateSpecType) GetAnonymizationSetting() isCreateSpecType_AnonymizationSetting {
	if m != nil {
		return m.AnonymizationSetting
	}
	return nil
}
func (m *CreateSpecType) GetBlockingPageChoice() isCreateSpecType_BlockingPageChoice {
	if m != nil {
		return m.BlockingPageChoice
	}
	return nil
}

func (m *CreateSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *CreateSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *CreateSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *CreateSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *CreateSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *CreateSpecType) GetAiRiskBasedBlocking() *AiRiskBasedBlocking {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_AiRiskBasedBlocking); ok {
		return x.AiRiskBasedBlocking
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*CreateSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *CreateSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*CreateSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

func (m *CreateSpecType) GetAllowAllResponseCodes() *schema.Empty {
	if x, ok := m.GetAllowedResponseCodesChoice().(*CreateSpecType_AllowAllResponseCodes); ok {
		return x.AllowAllResponseCodes
	}
	return nil
}

func (m *CreateSpecType) GetAllowedResponseCodes() *AllowedResponseCodes {
	if x, ok := m.GetAllowedResponseCodesChoice().(*CreateSpecType_AllowedResponseCodes); ok {
		return x.AllowedResponseCodes
	}
	return nil
}

func (m *CreateSpecType) GetDisableAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*CreateSpecType_DisableAnonymization); ok {
		return x.DisableAnonymization
	}
	return nil
}

func (m *CreateSpecType) GetDefaultAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*CreateSpecType_DefaultAnonymization); ok {
		return x.DefaultAnonymization
	}
	return nil
}

func (m *CreateSpecType) GetCustomAnonymization() *AnonymizationSetting {
	if x, ok := m.GetAnonymizationSetting().(*CreateSpecType_CustomAnonymization); ok {
		return x.CustomAnonymization
	}
	return nil
}

func (m *CreateSpecType) GetUseDefaultBlockingPage() *schema.Empty {
	if x, ok := m.GetBlockingPageChoice().(*CreateSpecType_UseDefaultBlockingPage); ok {
		return x.UseDefaultBlockingPage
	}
	return nil
}

func (m *CreateSpecType) GetBlockingPage() *CustomBlockingPage {
	if x, ok := m.GetBlockingPageChoice().(*CreateSpecType_BlockingPage); ok {
		return x.BlockingPage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_UseLoadbalancerSetting)(nil),
		(*CreateSpecType_Blocking)(nil),
		(*CreateSpecType_Monitoring)(nil),
		(*CreateSpecType_DefaultDetectionSettings)(nil),
		(*CreateSpecType_DetectionSettings)(nil),
		(*CreateSpecType_AiRiskBasedBlocking)(nil),
		(*CreateSpecType_DefaultBotSetting)(nil),
		(*CreateSpecType_BotProtectionSetting)(nil),
		(*CreateSpecType_AllowAllResponseCodes)(nil),
		(*CreateSpecType_AllowedResponseCodes)(nil),
		(*CreateSpecType_DisableAnonymization)(nil),
		(*CreateSpecType_DefaultAnonymization)(nil),
		(*CreateSpecType_CustomAnonymization)(nil),
		(*CreateSpecType_UseDefaultBlockingPage)(nil),
		(*CreateSpecType_BlockingPage)(nil),
	}
}

// Replace Application Firewall
//
// x-displayName: "Replace Application Firewall"
// Replace Application Firewall
type ReplaceSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*ReplaceSpecType_UseLoadbalancerSetting
	//	*ReplaceSpecType_Blocking
	//	*ReplaceSpecType_Monitoring
	EnforcementModeChoice isReplaceSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*ReplaceSpecType_DefaultDetectionSettings
	//	*ReplaceSpecType_DetectionSettings
	//	*ReplaceSpecType_AiRiskBasedBlocking
	DetectionSettingChoice isReplaceSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*ReplaceSpecType_DefaultBotSetting
	//	*ReplaceSpecType_BotProtectionSetting
	BotProtectionChoice isReplaceSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
	// Types that are valid to be assigned to AllowedResponseCodesChoice:
	//	*ReplaceSpecType_AllowAllResponseCodes
	//	*ReplaceSpecType_AllowedResponseCodes
	AllowedResponseCodesChoice isReplaceSpecType_AllowedResponseCodesChoice `protobuf_oneof:"allowed_response_codes_choice"`
	// Types that are valid to be assigned to AnonymizationSetting:
	//	*ReplaceSpecType_DisableAnonymization
	//	*ReplaceSpecType_DefaultAnonymization
	//	*ReplaceSpecType_CustomAnonymization
	AnonymizationSetting isReplaceSpecType_AnonymizationSetting `protobuf_oneof:"anonymization_setting"`
	// Types that are valid to be assigned to BlockingPageChoice:
	//	*ReplaceSpecType_UseDefaultBlockingPage
	//	*ReplaceSpecType_BlockingPage
	BlockingPageChoice isReplaceSpecType_BlockingPageChoice `protobuf_oneof:"blocking_page_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{16}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_EnforcementModeChoice interface {
	isReplaceSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DetectionSettingChoice interface {
	isReplaceSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BotProtectionChoice interface {
	isReplaceSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AllowedResponseCodesChoice interface {
	isReplaceSpecType_AllowedResponseCodesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AnonymizationSetting interface {
	isReplaceSpecType_AnonymizationSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockingPageChoice interface {
	isReplaceSpecType_BlockingPageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type ReplaceSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type ReplaceSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type ReplaceSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type ReplaceSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type ReplaceSpecType_AiRiskBasedBlocking struct {
	AiRiskBasedBlocking *AiRiskBasedBlocking `protobuf:"bytes,21,opt,name=ai_risk_based_blocking,json=aiRiskBasedBlocking,proto3,oneof" json:"ai_risk_based_blocking,omitempty"`
}
type ReplaceSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type ReplaceSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}
type ReplaceSpecType_AllowAllResponseCodes struct {
	AllowAllResponseCodes *schema.Empty `protobuf:"bytes,12,opt,name=allow_all_response_codes,json=allowAllResponseCodes,proto3,oneof" json:"allow_all_response_codes,omitempty"`
}
type ReplaceSpecType_AllowedResponseCodes struct {
	AllowedResponseCodes *AllowedResponseCodes `protobuf:"bytes,13,opt,name=allowed_response_codes,json=allowedResponseCodes,proto3,oneof" json:"allowed_response_codes,omitempty"`
}
type ReplaceSpecType_DisableAnonymization struct {
	DisableAnonymization *schema.Empty `protobuf:"bytes,15,opt,name=disable_anonymization,json=disableAnonymization,proto3,oneof" json:"disable_anonymization,omitempty"`
}
type ReplaceSpecType_DefaultAnonymization struct {
	DefaultAnonymization *schema.Empty `protobuf:"bytes,16,opt,name=default_anonymization,json=defaultAnonymization,proto3,oneof" json:"default_anonymization,omitempty"`
}
type ReplaceSpecType_CustomAnonymization struct {
	CustomAnonymization *AnonymizationSetting `protobuf:"bytes,17,opt,name=custom_anonymization,json=customAnonymization,proto3,oneof" json:"custom_anonymization,omitempty"`
}
type ReplaceSpecType_UseDefaultBlockingPage struct {
	UseDefaultBlockingPage *schema.Empty `protobuf:"bytes,19,opt,name=use_default_blocking_page,json=useDefaultBlockingPage,proto3,oneof" json:"use_default_blocking_page,omitempty"`
}
type ReplaceSpecType_BlockingPage struct {
	BlockingPage *CustomBlockingPage `protobuf:"bytes,20,opt,name=blocking_page,json=blockingPage,proto3,oneof" json:"blocking_page,omitempty"`
}

func (*ReplaceSpecType_UseLoadbalancerSetting) isReplaceSpecType_EnforcementModeChoice()     {}
func (*ReplaceSpecType_Blocking) isReplaceSpecType_EnforcementModeChoice()                   {}
func (*ReplaceSpecType_Monitoring) isReplaceSpecType_EnforcementModeChoice()                 {}
func (*ReplaceSpecType_DefaultDetectionSettings) isReplaceSpecType_DetectionSettingChoice()  {}
func (*ReplaceSpecType_DetectionSettings) isReplaceSpecType_DetectionSettingChoice()         {}
func (*ReplaceSpecType_AiRiskBasedBlocking) isReplaceSpecType_DetectionSettingChoice()       {}
func (*ReplaceSpecType_DefaultBotSetting) isReplaceSpecType_BotProtectionChoice()            {}
func (*ReplaceSpecType_BotProtectionSetting) isReplaceSpecType_BotProtectionChoice()         {}
func (*ReplaceSpecType_AllowAllResponseCodes) isReplaceSpecType_AllowedResponseCodesChoice() {}
func (*ReplaceSpecType_AllowedResponseCodes) isReplaceSpecType_AllowedResponseCodesChoice()  {}
func (*ReplaceSpecType_DisableAnonymization) isReplaceSpecType_AnonymizationSetting()        {}
func (*ReplaceSpecType_DefaultAnonymization) isReplaceSpecType_AnonymizationSetting()        {}
func (*ReplaceSpecType_CustomAnonymization) isReplaceSpecType_AnonymizationSetting()         {}
func (*ReplaceSpecType_UseDefaultBlockingPage) isReplaceSpecType_BlockingPageChoice()        {}
func (*ReplaceSpecType_BlockingPage) isReplaceSpecType_BlockingPageChoice()                  {}

func (m *ReplaceSpecType) GetEnforcementModeChoice() isReplaceSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetDetectionSettingChoice() isReplaceSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBotProtectionChoice() isReplaceSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetAllowedResponseCodesChoice() isReplaceSpecType_AllowedResponseCodesChoice {
	if m != nil {
		return m.AllowedResponseCodesChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetAnonymizationSetting() isReplaceSpecType_AnonymizationSetting {
	if m != nil {
		return m.AnonymizationSetting
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockingPageChoice() isReplaceSpecType_BlockingPageChoice {
	if m != nil {
		return m.BlockingPageChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *ReplaceSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *ReplaceSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetAiRiskBasedBlocking() *AiRiskBasedBlocking {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_AiRiskBasedBlocking); ok {
		return x.AiRiskBasedBlocking
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*ReplaceSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *ReplaceSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*ReplaceSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowAllResponseCodes() *schema.Empty {
	if x, ok := m.GetAllowedResponseCodesChoice().(*ReplaceSpecType_AllowAllResponseCodes); ok {
		return x.AllowAllResponseCodes
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowedResponseCodes() *AllowedResponseCodes {
	if x, ok := m.GetAllowedResponseCodesChoice().(*ReplaceSpecType_AllowedResponseCodes); ok {
		return x.AllowedResponseCodes
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*ReplaceSpecType_DisableAnonymization); ok {
		return x.DisableAnonymization
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*ReplaceSpecType_DefaultAnonymization); ok {
		return x.DefaultAnonymization
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomAnonymization() *AnonymizationSetting {
	if x, ok := m.GetAnonymizationSetting().(*ReplaceSpecType_CustomAnonymization); ok {
		return x.CustomAnonymization
	}
	return nil
}

func (m *ReplaceSpecType) GetUseDefaultBlockingPage() *schema.Empty {
	if x, ok := m.GetBlockingPageChoice().(*ReplaceSpecType_UseDefaultBlockingPage); ok {
		return x.UseDefaultBlockingPage
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockingPage() *CustomBlockingPage {
	if x, ok := m.GetBlockingPageChoice().(*ReplaceSpecType_BlockingPage); ok {
		return x.BlockingPage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_UseLoadbalancerSetting)(nil),
		(*ReplaceSpecType_Blocking)(nil),
		(*ReplaceSpecType_Monitoring)(nil),
		(*ReplaceSpecType_DefaultDetectionSettings)(nil),
		(*ReplaceSpecType_DetectionSettings)(nil),
		(*ReplaceSpecType_AiRiskBasedBlocking)(nil),
		(*ReplaceSpecType_DefaultBotSetting)(nil),
		(*ReplaceSpecType_BotProtectionSetting)(nil),
		(*ReplaceSpecType_AllowAllResponseCodes)(nil),
		(*ReplaceSpecType_AllowedResponseCodes)(nil),
		(*ReplaceSpecType_DisableAnonymization)(nil),
		(*ReplaceSpecType_DefaultAnonymization)(nil),
		(*ReplaceSpecType_CustomAnonymization)(nil),
		(*ReplaceSpecType_UseDefaultBlockingPage)(nil),
		(*ReplaceSpecType_BlockingPage)(nil),
	}
}

// Get Application Firewall
//
// x-displayName: "Get Application Firewall"
// Get Application Firewall
type GetSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*GetSpecType_UseLoadbalancerSetting
	//	*GetSpecType_Blocking
	//	*GetSpecType_Monitoring
	EnforcementModeChoice isGetSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*GetSpecType_DefaultDetectionSettings
	//	*GetSpecType_DetectionSettings
	//	*GetSpecType_AiRiskBasedBlocking
	DetectionSettingChoice isGetSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*GetSpecType_DefaultBotSetting
	//	*GetSpecType_BotProtectionSetting
	BotProtectionChoice isGetSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
	// Types that are valid to be assigned to AllowedResponseCodesChoice:
	//	*GetSpecType_AllowAllResponseCodes
	//	*GetSpecType_AllowedResponseCodes
	AllowedResponseCodesChoice isGetSpecType_AllowedResponseCodesChoice `protobuf_oneof:"allowed_response_codes_choice"`
	// Types that are valid to be assigned to AnonymizationSetting:
	//	*GetSpecType_DisableAnonymization
	//	*GetSpecType_DefaultAnonymization
	//	*GetSpecType_CustomAnonymization
	AnonymizationSetting isGetSpecType_AnonymizationSetting `protobuf_oneof:"anonymization_setting"`
	// Types that are valid to be assigned to BlockingPageChoice:
	//	*GetSpecType_UseDefaultBlockingPage
	//	*GetSpecType_BlockingPage
	BlockingPageChoice isGetSpecType_BlockingPageChoice `protobuf_oneof:"blocking_page_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{17}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_EnforcementModeChoice interface {
	isGetSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DetectionSettingChoice interface {
	isGetSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BotProtectionChoice interface {
	isGetSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AllowedResponseCodesChoice interface {
	isGetSpecType_AllowedResponseCodesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AnonymizationSetting interface {
	isGetSpecType_AnonymizationSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockingPageChoice interface {
	isGetSpecType_BlockingPageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type GetSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type GetSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type GetSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type GetSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type GetSpecType_AiRiskBasedBlocking struct {
	AiRiskBasedBlocking *AiRiskBasedBlocking `protobuf:"bytes,21,opt,name=ai_risk_based_blocking,json=aiRiskBasedBlocking,proto3,oneof" json:"ai_risk_based_blocking,omitempty"`
}
type GetSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type GetSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}
type GetSpecType_AllowAllResponseCodes struct {
	AllowAllResponseCodes *schema.Empty `protobuf:"bytes,12,opt,name=allow_all_response_codes,json=allowAllResponseCodes,proto3,oneof" json:"allow_all_response_codes,omitempty"`
}
type GetSpecType_AllowedResponseCodes struct {
	AllowedResponseCodes *AllowedResponseCodes `protobuf:"bytes,13,opt,name=allowed_response_codes,json=allowedResponseCodes,proto3,oneof" json:"allowed_response_codes,omitempty"`
}
type GetSpecType_DisableAnonymization struct {
	DisableAnonymization *schema.Empty `protobuf:"bytes,15,opt,name=disable_anonymization,json=disableAnonymization,proto3,oneof" json:"disable_anonymization,omitempty"`
}
type GetSpecType_DefaultAnonymization struct {
	DefaultAnonymization *schema.Empty `protobuf:"bytes,16,opt,name=default_anonymization,json=defaultAnonymization,proto3,oneof" json:"default_anonymization,omitempty"`
}
type GetSpecType_CustomAnonymization struct {
	CustomAnonymization *AnonymizationSetting `protobuf:"bytes,17,opt,name=custom_anonymization,json=customAnonymization,proto3,oneof" json:"custom_anonymization,omitempty"`
}
type GetSpecType_UseDefaultBlockingPage struct {
	UseDefaultBlockingPage *schema.Empty `protobuf:"bytes,19,opt,name=use_default_blocking_page,json=useDefaultBlockingPage,proto3,oneof" json:"use_default_blocking_page,omitempty"`
}
type GetSpecType_BlockingPage struct {
	BlockingPage *CustomBlockingPage `protobuf:"bytes,20,opt,name=blocking_page,json=blockingPage,proto3,oneof" json:"blocking_page,omitempty"`
}

func (*GetSpecType_UseLoadbalancerSetting) isGetSpecType_EnforcementModeChoice()     {}
func (*GetSpecType_Blocking) isGetSpecType_EnforcementModeChoice()                   {}
func (*GetSpecType_Monitoring) isGetSpecType_EnforcementModeChoice()                 {}
func (*GetSpecType_DefaultDetectionSettings) isGetSpecType_DetectionSettingChoice()  {}
func (*GetSpecType_DetectionSettings) isGetSpecType_DetectionSettingChoice()         {}
func (*GetSpecType_AiRiskBasedBlocking) isGetSpecType_DetectionSettingChoice()       {}
func (*GetSpecType_DefaultBotSetting) isGetSpecType_BotProtectionChoice()            {}
func (*GetSpecType_BotProtectionSetting) isGetSpecType_BotProtectionChoice()         {}
func (*GetSpecType_AllowAllResponseCodes) isGetSpecType_AllowedResponseCodesChoice() {}
func (*GetSpecType_AllowedResponseCodes) isGetSpecType_AllowedResponseCodesChoice()  {}
func (*GetSpecType_DisableAnonymization) isGetSpecType_AnonymizationSetting()        {}
func (*GetSpecType_DefaultAnonymization) isGetSpecType_AnonymizationSetting()        {}
func (*GetSpecType_CustomAnonymization) isGetSpecType_AnonymizationSetting()         {}
func (*GetSpecType_UseDefaultBlockingPage) isGetSpecType_BlockingPageChoice()        {}
func (*GetSpecType_BlockingPage) isGetSpecType_BlockingPageChoice()                  {}

func (m *GetSpecType) GetEnforcementModeChoice() isGetSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *GetSpecType) GetDetectionSettingChoice() isGetSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *GetSpecType) GetBotProtectionChoice() isGetSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}
func (m *GetSpecType) GetAllowedResponseCodesChoice() isGetSpecType_AllowedResponseCodesChoice {
	if m != nil {
		return m.AllowedResponseCodesChoice
	}
	return nil
}
func (m *GetSpecType) GetAnonymizationSetting() isGetSpecType_AnonymizationSetting {
	if m != nil {
		return m.AnonymizationSetting
	}
	return nil
}
func (m *GetSpecType) GetBlockingPageChoice() isGetSpecType_BlockingPageChoice {
	if m != nil {
		return m.BlockingPageChoice
	}
	return nil
}

func (m *GetSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *GetSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *GetSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *GetSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *GetSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *GetSpecType) GetAiRiskBasedBlocking() *AiRiskBasedBlocking {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_AiRiskBasedBlocking); ok {
		return x.AiRiskBasedBlocking
	}
	return nil
}

func (m *GetSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*GetSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *GetSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*GetSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

func (m *GetSpecType) GetAllowAllResponseCodes() *schema.Empty {
	if x, ok := m.GetAllowedResponseCodesChoice().(*GetSpecType_AllowAllResponseCodes); ok {
		return x.AllowAllResponseCodes
	}
	return nil
}

func (m *GetSpecType) GetAllowedResponseCodes() *AllowedResponseCodes {
	if x, ok := m.GetAllowedResponseCodesChoice().(*GetSpecType_AllowedResponseCodes); ok {
		return x.AllowedResponseCodes
	}
	return nil
}

func (m *GetSpecType) GetDisableAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*GetSpecType_DisableAnonymization); ok {
		return x.DisableAnonymization
	}
	return nil
}

func (m *GetSpecType) GetDefaultAnonymization() *schema.Empty {
	if x, ok := m.GetAnonymizationSetting().(*GetSpecType_DefaultAnonymization); ok {
		return x.DefaultAnonymization
	}
	return nil
}

func (m *GetSpecType) GetCustomAnonymization() *AnonymizationSetting {
	if x, ok := m.GetAnonymizationSetting().(*GetSpecType_CustomAnonymization); ok {
		return x.CustomAnonymization
	}
	return nil
}

func (m *GetSpecType) GetUseDefaultBlockingPage() *schema.Empty {
	if x, ok := m.GetBlockingPageChoice().(*GetSpecType_UseDefaultBlockingPage); ok {
		return x.UseDefaultBlockingPage
	}
	return nil
}

func (m *GetSpecType) GetBlockingPage() *CustomBlockingPage {
	if x, ok := m.GetBlockingPageChoice().(*GetSpecType_BlockingPage); ok {
		return x.BlockingPage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_UseLoadbalancerSetting)(nil),
		(*GetSpecType_Blocking)(nil),
		(*GetSpecType_Monitoring)(nil),
		(*GetSpecType_DefaultDetectionSettings)(nil),
		(*GetSpecType_DetectionSettings)(nil),
		(*GetSpecType_AiRiskBasedBlocking)(nil),
		(*GetSpecType_DefaultBotSetting)(nil),
		(*GetSpecType_BotProtectionSetting)(nil),
		(*GetSpecType_AllowAllResponseCodes)(nil),
		(*GetSpecType_AllowedResponseCodes)(nil),
		(*GetSpecType_DisableAnonymization)(nil),
		(*GetSpecType_DefaultAnonymization)(nil),
		(*GetSpecType_CustomAnonymization)(nil),
		(*GetSpecType_UseDefaultBlockingPage)(nil),
		(*GetSpecType_BlockingPage)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.app_firewall.AppFirewallViolationType", AppFirewallViolationType_name, AppFirewallViolationType_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.AttackType", AttackType_name, AttackType_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.BotAction", BotAction_name, BotAction_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.RiskBasedBlockingAction", RiskBasedBlockingAction_name, RiskBasedBlockingAction_value)
	proto.RegisterType((*BotProtectionSetting)(nil), "ves.io.schema.app_firewall.BotProtectionSetting")
	proto.RegisterType((*AttackTypeSettings)(nil), "ves.io.schema.app_firewall.AttackTypeSettings")
	proto.RegisterType((*SignatureSelectionSetting)(nil), "ves.io.schema.app_firewall.SignatureSelectionSetting")
	proto.RegisterType((*ViolationSettings)(nil), "ves.io.schema.app_firewall.ViolationSettings")
	proto.RegisterType((*DetectionSetting)(nil), "ves.io.schema.app_firewall.DetectionSetting")
	proto.RegisterType((*SignaturesStagingSettings)(nil), "ves.io.schema.app_firewall.SignaturesStagingSettings")
	proto.RegisterType((*AllowedResponseCodes)(nil), "ves.io.schema.app_firewall.AllowedResponseCodes")
	proto.RegisterType((*AnonymizeHttpHeader)(nil), "ves.io.schema.app_firewall.AnonymizeHttpHeader")
	proto.RegisterType((*AnonymizeHttpQueryParameter)(nil), "ves.io.schema.app_firewall.AnonymizeHttpQueryParameter")
	proto.RegisterType((*AnonymizeHttpCookie)(nil), "ves.io.schema.app_firewall.AnonymizeHttpCookie")
	proto.RegisterType((*AnonymizationConfiguration)(nil), "ves.io.schema.app_firewall.AnonymizationConfiguration")
	proto.RegisterType((*AnonymizationSetting)(nil), "ves.io.schema.app_firewall.AnonymizationSetting")
	proto.RegisterType((*CustomBlockingPage)(nil), "ves.io.schema.app_firewall.CustomBlockingPage")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_firewall.GlobalSpecType")
	proto.RegisterType((*AiRiskBasedBlocking)(nil), "ves.io.schema.app_firewall.AiRiskBasedBlocking")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_firewall.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_firewall.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_firewall.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/app_firewall/types.proto", fileDescriptor_f3c53032614c5085)
}

var fileDescriptor_f3c53032614c5085 = []byte{
	// 4172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x6f, 0xe3, 0x58,
	0x72, 0xf7, 0xb3, 0x64, 0xb7, 0xfd, 0x6c, 0xd9, 0x34, 0xad, 0x76, 0xcb, 0xee, 0x6e, 0xb7, 0x56,
	0x93, 0xe9, 0xed, 0x76, 0xb3, 0x6d, 0x7d, 0xfa, 0x63, 0x36, 0x33, 0x09, 0x29, 0xd1, 0x12, 0xdd,
	0xb2, 0x48, 0x93, 0x94, 0xbf, 0x90, 0x84, 0xa1, 0x24, 0xb6, 0xa4, 0xb1, 0x24, 0x6a, 0x24, 0xca,
	0x6e, 0x37, 0xb0, 0xd9, 0x41, 0x23, 0x58, 0x04, 0xbb, 0x97, 0xc5, 0x1c, 0x32, 0x40, 0x0e, 0x39,
	0xe4, 0x94, 0x43, 0xfe, 0x80, 0x20, 0x9a, 0x43, 0x23, 0x40, 0x80, 0xc5, 0x9e, 0x9c, 0x5c, 0x32,
	0xe8, 0xd3, 0x8e, 0xe7, 0x32, 0xb9, 0x0d, 0xf6, 0x34, 0x98, 0x53, 0xf0, 0xf8, 0x25, 0x52, 0x92,
	0xdd, 0xbd, 0x93, 0x05, 0xf6, 0x10, 0x5f, 0x08, 0xea, 0x55, 0xd5, 0xaf, 0xea, 0xd5, 0xab, 0x57,
	0x55, 0xef, 0xd9, 0x84, 0x0f, 0x4f, 0x95, 0xf6, 0x6a, 0x55, 0x5d, 0x6b, 0x17, 0x2b, 0x4a, 0x5d,
	0x5e, 0x93, 0x9b, 0x4d, 0xe9, 0x79, 0xb5, 0xa5, 0x9c, 0xc9, 0xb5, 0xda, 0x9a, 0x76, 0xde, 0x54,
	0xda, 0xab, 0xcd, 0x96, 0xaa, 0xa9, 0xf8, 0x92, 0xc1, 0xb7, 0x6a, 0xf0, 0xad, 0x3a, 0xf9, 0x96,
	0x9e, 0x96, 0xab, 0x5a, 0xa5, 0x53, 0x58, 0x2d, 0xaa, 0xf5, 0xb5, 0xb2, 0x5a, 0x56, 0xd7, 0x74,
	0x91, 0x42, 0xe7, 0xb9, 0xfe, 0x4b, 0xff, 0xa1, 0xbf, 0x19, 0x50, 0x4b, 0x77, 0xdc, 0x2a, 0x1b,
	0x8a, 0x66, 0x12, 0xee, 0xba, 0x09, 0x6a, 0x53, 0xab, 0xaa, 0x0d, 0xd3, 0x80, 0xa5, 0x45, 0x37,
	0xd1, 0x61, 0xdb, 0xd2, 0x3d, 0x37, 0xe9, 0x54, 0xae, 0x55, 0x4b, 0xb2, 0xa6, 0x98, 0xd4, 0x60,
	0x1f, 0xb5, 0xaa, 0x9c, 0x49, 0x2e, 0xe8, 0xd0, 0x17, 0xa3, 0xd0, 0x4f, 0xa9, 0x1a, 0xd7, 0x52,
	0x35, 0xa5, 0x88, 0x08, 0x82, 0xa2, 0x69, 0xd5, 0x46, 0x19, 0x2f, 0x40, 0x7f, 0x5d, 0xae, 0x55,
	0x8b, 0x55, 0xb5, 0xd3, 0x96, 0x0a, 0xaa, 0x26, 0xc9, 0x3a, 0x39, 0x00, 0x82, 0xe0, 0xd1, 0x4c,
	0xf4, 0xfd, 0xd5, 0xab, 0x7d, 0xb2, 0x4a, 0xa9, 0x1a, 0xa9, 0x33, 0x53, 0x93, 0x6f, 0xba, 0x60,
	0x8c, 0xca, 0xb2, 0xc9, 0x67, 0x3c, 0x6e, 0xa3, 0xd9, 0x64, 0x5c, 0x81, 0xb7, 0xdb, 0x9d, 0x76,
	0x73, 0x50, 0xc9, 0xe8, 0xef, 0xa3, 0x04, 0xbe, 0xe9, 0x82, 0x71, 0x9e, 0xe6, 0x58, 0x5e, 0xe4,
	0xe7, 0x7b, 0x78, 0x3d, 0x35, 0x47, 0x70, 0xb6, 0xac, 0xaa, 0x25, 0xa7, 0x02, 0xcf, 0x0f, 0x55,
	0xe0, 0x43, 0x48, 0x36, 0x29, 0xf4, 0x73, 0x00, 0x71, 0x52, 0xd3, 0xe4, 0xe2, 0x89, 0x78, 0xde,
	0x54, 0x4c, 0xdf, 0xb5, 0xf1, 0x26, 0xbc, 0x5d, 0xaa, 0xb6, 0xe5, 0x42, 0x4d, 0x29, 0x49, 0xb2,
	0x4e, 0x96, 0xf4, 0x45, 0x0b, 0x80, 0xa0, 0xe7, 0xd1, 0x4c, 0xf4, 0xe1, 0x75, 0x7a, 0x7b, 0x70,
	0x94, 0xff, 0xdf, 0xfe, 0xe7, 0xb5, 0x67, 0xec, 0x33, 0x30, 0x8a, 0x2d, 0x58, 0x6f, 0x01, 0xc0,
	0xcf, 0x5b, 0xd0, 0x3d, 0xce, 0x76, 0xe8, 0x5b, 0x2f, 0x5c, 0x14, 0xaa, 0xe5, 0x86, 0xac, 0x75,
	0x5a, 0x8a, 0xa0, 0xd4, 0xdc, 0x8b, 0x79, 0x04, 0xef, 0xab, 0x8d, 0xda, 0xb9, 0x54, 0xa9, 0x96,
	0x2b, 0x92, 0x5c, 0x2c, 0x76, 0x5a, 0x72, 0xf1, 0x5c, 0x6a, 0x5b, 0xfc, 0x6d, 0xdd, 0xe1, 0x53,
	0x51, 0x7f, 0x9f, 0x5d, 0x74, 0xbd, 0xa9, 0x9d, 0x67, 0x46, 0xf8, 0x25, 0x24, 0x9c, 0xa9, 0x96,
	0x2b, 0xa4, 0x29, 0x6a, 0x6b, 0x6a, 0xe3, 0x7f, 0x09, 0x1f, 0xe8, 0xa8, 0x75, 0xa5, 0x54, 0xed,
	0xd4, 0x87, 0x82, 0x7b, 0xae, 0x05, 0xbf, 0x87, 0xc4, 0x77, 0x75, 0xe9, 0x21, 0xf0, 0x25, 0xf8,
	0x9e, 0x13, 0xbe, 0xa6, 0x9e, 0x0d, 0x55, 0xe1, 0xbd, 0x56, 0xc5, 0x83, 0x9e, 0x8a, 0xac, 0x7a,
	0x36, 0x44, 0xcb, 0x01, 0xbc, 0x57, 0x52, 0x9e, 0xcb, 0x9d, 0x9a, 0xe6, 0x5c, 0x2e, 0xa9, 0x6d,
	0xae, 0x67, 0x60, 0xfc, 0x1a, 0x78, 0xc0, 0x2f, 0x9a, 0xb2, 0x43, 0x02, 0xa1, 0x00, 0xfd, 0x43,
	0x01, 0x27, 0x74, 0xc0, 0xd5, 0x77, 0x8b, 0x03, 0x0b, 0x2d, 0x03, 0x78, 0x5c, 0x1e, 0x18, 0xfd,
	0x60, 0xfc, 0x77, 0x1f, 0x79, 0x12, 0x44, 0x84, 0x8a, 0xc3, 0x07, 0xb6, 0x47, 0xa4, 0xb6, 0x15,
	0x02, 0x52, 0xe1, 0xdc, 0xf6, 0x18, 0x3e, 0xf7, 0xba, 0x0b, 0x3c, 0x17, 0x5d, 0x00, 0x2e, 0xbb,
	0x60, 0x2c, 0x4a, 0xc4, 0x88, 0x38, 0xf5, 0x10, 0xce, 0x0f, 0xb1, 0x10, 0x9f, 0x7d, 0xdd, 0x05,
	0xe3, 0x17, 0x5d, 0x30, 0x76, 0xd9, 0x05, 0x9e, 0x75, 0x62, 0x73, 0xc7, 0x3b, 0x01, 0xb0, 0xd1,
	0x1d, 0xef, 0xc4, 0x18, 0x36, 0xbe, 0xe3, 0x9d, 0xb8, 0x85, 0x4d, 0x84, 0xfe, 0x01, 0xc0, 0xb9,
	0xfd, 0xaa, 0x5a, 0x93, 0x1d, 0x91, 0xd6, 0xc6, 0xff, 0x16, 0xc0, 0x80, 0x1d, 0xfb, 0xa7, 0x16,
	0xd9, 0x15, 0xfe, 0xf1, 0x6b, 0xa7, 0xdd, 0x6c, 0x6e, 0x9b, 0xef, 0x36, 0x78, 0xdf, 0x66, 0x78,
	0xe4, 0xd8, 0x0c, 0x0b, 0x96, 0x2e, 0x17, 0x73, 0x3b, 0xf4, 0xcb, 0x49, 0x88, 0xa5, 0x94, 0xbe,
	0x9c, 0xd6, 0x81, 0x77, 0x87, 0x79, 0xc8, 0x9c, 0xb3, 0x9e, 0xda, 0xa6, 0xa2, 0x89, 0xeb, 0xac,
	0xbb, 0x72, 0x8b, 0xf1, 0x8b, 0xed, 0x2b, 0x77, 0x1f, 0x0d, 0x71, 0xa5, 0x81, 0x8c, 0x94, 0xda,
	0x9d, 0x66, 0xb3, 0xa5, 0xb4, 0xdb, 0x56, 0x0a, 0xba, 0x3a, 0x64, 0xe7, 0x0c, 0x09, 0xa1, 0x27,
	0x80, 0xa7, 0xa1, 0xb5, 0xf3, 0x5d, 0x38, 0xd7, 0x87, 0x3e, 0x6e, 0x8a, 0x38, 0x81, 0x72, 0xf0,
	0x8e, 0x69, 0x8f, 0x56, 0x69, 0x29, 0xb2, 0x26, 0x15, 0xe5, 0x7a, 0x53, 0xae, 0x96, 0x1b, 0x6f,
	0x0b, 0xf4, 0xdb, 0x86, 0x98, 0xa8, 0x4b, 0x25, 0x2d, 0x21, 0x9c, 0xb3, 0x57, 0x7c, 0x10, 0xf0,
	0xd6, 0xb5, 0x80, 0xd6, 0xea, 0xf5, 0x23, 0x8a, 0x70, 0xc9, 0xda, 0x8f, 0xbd, 0x10, 0xb2, 0x37,
	0xcf, 0xe4, 0x35, 0x98, 0xa3, 0x7c, 0xc0, 0x94, 0x1c, 0x0c, 0xcd, 0xbf, 0x82, 0xf8, 0x10, 0xb4,
	0x29, 0x1d, 0xed, 0xe9, 0x75, 0xab, 0x3e, 0x00, 0x95, 0x19, 0xe5, 0xe7, 0x4e, 0x07, 0xf0, 0xff,
	0x0c, 0xce, 0xda, 0x0b, 0xa4, 0xc9, 0x65, 0x14, 0x52, 0xbe, 0x6b, 0x4c, 0xf5, 0xf0, 0x33, 0xd6,
	0xe2, 0x18, 0xdc, 0x78, 0x15, 0xfa, 0x91, 0xa0, 0x22, 0x35, 0x94, 0x33, 0x67, 0x76, 0x9b, 0xf9,
	0x3d, 0x02, 0xb3, 0x6d, 0x82, 0xd9, 0xa6, 0x7a, 0x78, 0x5c, 0x07, 0xcd, 0x29, 0x67, 0x8e, 0x8c,
	0xf7, 0x33, 0x18, 0xec, 0xa9, 0x92, 0x1b, 0x25, 0xa9, 0xd3, 0x44, 0x7d, 0x43, 0xc9, 0xa9, 0x76,
	0xf6, 0xff, 0xa6, 0xf6, 0x9e, 0xa5, 0x96, 0x6c, 0x94, 0xf2, 0x06, 0x7a, 0x8f, 0xfd, 0x03, 0xdf,
	0xef, 0x3e, 0x82, 0x11, 0x22, 0x4a, 0x44, 0xa2, 0x44, 0x82, 0xd8, 0xa4, 0x9e, 0xc2, 0xa5, 0xe7,
	0x72, 0xad, 0xad, 0x48, 0x4d, 0xb5, 0x5d, 0xd5, 0xaa, 0xa7, 0xae, 0x18, 0xd7, 0xb3, 0x11, 0xca,
	0x5b, 0xa3, 0x28, 0x1b, 0xa1, 0xac, 0xf5, 0x18, 0x2e, 0xf4, 0x85, 0x9a, 0x54, 0xac, 0xa8, 0xd5,
	0xa2, 0xd2, 0x9f, 0xb8, 0x36, 0xa8, 0x35, 0x78, 0xb7, 0xb7, 0xea, 0x25, 0x2b, 0x25, 0xd8, 0x89,
	0x0e, 0x7b, 0xdd, 0x05, 0x93, 0x17, 0x5d, 0x30, 0x71, 0xd9, 0x05, 0xde, 0x2d, 0x22, 0x12, 0xa1,
	0x62, 0x8e, 0x2c, 0xd1, 0xb6, 0x56, 0xd2, 0x8e, 0x17, 0xdc, 0xff, 0xba, 0x0b, 0x7c, 0x17, 0x5d,
	0x30, 0x7d, 0xd9, 0x05, 0x13, 0x91, 0x18, 0x11, 0x89, 0x13, 0x91, 0xc4, 0x8e, 0x77, 0x62, 0x14,
	0xf3, 0xd8, 0xe9, 0x71, 0x02, 0x9b, 0xdc, 0xf1, 0x4e, 0x40, 0x6c, 0x6a, 0xc7, 0x3b, 0x31, 0x8d,
	0xf9, 0x42, 0x87, 0x8e, 0xe2, 0xdc, 0xef, 0x29, 0xfc, 0x27, 0x70, 0xc6, 0x52, 0xd2, 0x54, 0x5a,
	0x55, 0xb5, 0xa4, 0x27, 0x22, 0x1f, 0xe5, 0x7f, 0xd3, 0x05, 0x60, 0xe3, 0xef, 0xbe, 0x00, 0x5e,
	0x94, 0xef, 0xc6, 0x57, 0xbc, 0x01, 0xff, 0x23, 0xc0, 0xfb, 0x4c, 0x5e, 0x4e, 0x67, 0x0d, 0xfd,
	0xe7, 0x28, 0xf4, 0x93, 0xb5, 0x9a, 0x7a, 0xa6, 0x94, 0x78, 0xa5, 0xdd, 0x54, 0x1b, 0x6d, 0x25,
	0xa9, 0x96, 0x94, 0x36, 0xfe, 0xaf, 0xa3, 0xd0, 0xd7, 0x32, 0x47, 0xa4, 0xa2, 0x5a, 0x52, 0xf4,
	0xe4, 0xeb, 0xa3, 0x3e, 0x1b, 0x7d, 0xd3, 0x05, 0x52, 0x34, 0x1c, 0x26, 0xa2, 0xe1, 0x08, 0x11,
	0x0d, 0x47, 0x89, 0x68, 0x38, 0x46, 0x44, 0xc3, 0x71, 0x22, 0x1a, 0x4e, 0x10, 0xd1, 0xf0, 0x3a,
	0x11, 0x0b, 0x87, 0x89, 0x58, 0x38, 0x42, 0xc4, 0xc2, 0x51, 0x22, 0x16, 0x8e, 0x11, 0xb1, 0x70,
	0x9c, 0x88, 0x85, 0x37, 0x89, 0x58, 0x78, 0x83, 0x88, 0x87, 0xc3, 0x44, 0x3c, 0x1c, 0x21, 0xe2,
	0xe1, 0x18, 0x11, 0x0f, 0xc7, 0x89, 0x38, 0x1a, 0x8b, 0x6e, 0x11, 0x89, 0x70, 0x98, 0x48, 0x84,
	0x23, 0x44, 0x22, 0x1c, 0x25, 0x12, 0xe1, 0xd8, 0x65, 0x17, 0xbc, 0x80, 0x9e, 0x68, 0x38, 0x8c,
	0x1e, 0x11, 0xf4, 0x88, 0xa2, 0x47, 0x0c, 0x3d, 0xe2, 0xe8, 0x91, 0x40, 0x8f, 0x75, 0xe8, 0x89,
	0x21, 0x96, 0x18, 0x62, 0x89, 0x21, 0x96, 0x18, 0x62, 0x89, 0x21, 0x96, 0x58, 0x78, 0x13, 0x3d,
	0x36, 0xa0, 0x27, 0x8e, 0x58, 0xe2, 0x88, 0x25, 0x8e, 0xa8, 0x71, 0x44, 0x8d, 0xeb, 0x84, 0xe8,
	0x16, 0xf4, 0x24, 0x10, 0x35, 0x81, 0xa8, 0x09, 0x04, 0x90, 0x08, 0xc7, 0xbe, 0xeb, 0x82, 0x11,
	0xe4, 0xb0, 0xe9, 0xcf, 0xc0, 0x64, 0xe8, 0xd6, 0xca, 0x58, 0xe0, 0xbf, 0xbd, 0x8f, 0x4a, 0x76,
	0xed, 0x08, 0x5b, 0x6f, 0x13, 0xc0, 0x51, 0x45, 0xa6, 0x5b, 0x0e, 0xdf, 0x85, 0x28, 0x38, 0x4f,
	0x36, 0xd4, 0xc6, 0x79, 0xbd, 0xfa, 0x52, 0xc9, 0x68, 0x5a, 0x33, 0xa3, 0xc8, 0x25, 0xa5, 0x85,
	0x3f, 0x81, 0x53, 0x15, 0xfd, 0x4d, 0x6a, 0xc8, 0x75, 0x45, 0x5f, 0xa4, 0x49, 0x0a, 0xea, 0x28,
	0x2d, 0xcf, 0xaf, 0x01, 0xe0, 0xa1, 0x41, 0xce, 0xc9, 0x75, 0x25, 0x24, 0xc0, 0xbb, 0x2e, 0x8c,
	0xbd, 0x8e, 0xd2, 0x3a, 0xe7, 0xe4, 0x96, 0x5c, 0x57, 0x34, 0xa5, 0x85, 0xc7, 0x21, 0xf6, 0x09,
	0x1a, 0x91, 0x9a, 0x68, 0x68, 0x18, 0x60, 0xe0, 0xd3, 0x51, 0x7e, 0xe6, 0x13, 0x5b, 0x4a, 0x07,
	0xed, 0x37, 0x2c, 0xa9, 0xaa, 0x27, 0x55, 0x05, 0x19, 0x56, 0xd4, 0xdf, 0xae, 0xc2, 0x81, 0x06,
	0x59, 0xc7, 0xf8, 0x17, 0x2f, 0x5c, 0xb2, 0x40, 0xf4, 0x3d, 0x91, 0x54, 0x1b, 0xcf, 0xab, 0xe5,
	0x4e, 0x4b, 0xff, 0x81, 0x1f, 0xc2, 0xa9, 0x8a, 0xa6, 0x35, 0x25, 0x63, 0x2a, 0x66, 0x5f, 0xb8,
	0x76, 0x6d, 0xc1, 0x1e, 0x74, 0x15, 0xe5, 0xfd, 0xb6, 0x0b, 0x40, 0x66, 0x84, 0x87, 0x95, 0x9e,
	0xfb, 0x2a, 0x70, 0xd6, 0x31, 0x65, 0xe4, 0x05, 0xb3, 0x04, 0x6e, 0xbc, 0x33, 0xba, 0xdb, 0x89,
	0xb6, 0x16, 0x87, 0x9b, 0x74, 0xe7, 0xb2, 0x70, 0xdc, 0x98, 0xb0, 0x59, 0x1b, 0xdf, 0xdd, 0x7c,
	0xc3, 0xa1, 0x36, 0xb0, 0x09, 0xf3, 0xc1, 0x7f, 0x80, 0xdf, 0x74, 0xc1, 0x6b, 0x00, 0xff, 0x02,
	0x7a, 0x51, 0x77, 0xb1, 0x22, 0x42, 0x1e, 0x2e, 0xb9, 0x1c, 0x15, 0x9d, 0xca, 0x88, 0x22, 0x17,
	0x34, 0xa6, 0x0a, 0x43, 0x03, 0x53, 0x8d, 0xce, 0xea, 0xb6, 0x07, 0x6d, 0x23, 0x21, 0x66, 0x19,
	0x19, 0x1d, 0x37, 0xb4, 0xc2, 0xbf, 0x86, 0x63, 0xfb, 0x72, 0xad, 0xa3, 0xac, 0x1c, 0xc0, 0x3c,
	0x5c, 0x84, 0x77, 0x1c, 0xf0, 0xab, 0x8e, 0xc0, 0x83, 0x21, 0x18, 0xec, 0x43, 0x5f, 0xed, 0x8f,
	0x25, 0xe8, 0x87, 0xb8, 0x81, 0xbe, 0xea, 0x88, 0x0c, 0xea, 0x09, 0xf4, 0xcb, 0xce, 0xa5, 0xb7,
	0x72, 0xe6, 0xbc, 0xa3, 0x2d, 0xbc, 0x15, 0x25, 0x82, 0x31, 0x22, 0x18, 0x37, 0x1a, 0xbe, 0xd0,
	0xe7, 0x00, 0xfa, 0x5d, 0xe1, 0x62, 0x35, 0x35, 0x3f, 0x1b, 0xc0, 0xd2, 0xe3, 0x48, 0xcf, 0x32,
	0x53, 0xd1, 0xf5, 0x77, 0x71, 0xf9, 0x60, 0xf8, 0x39, 0x9a, 0xbc, 0x3f, 0x77, 0x9e, 0x78, 0xe4,
	0x41, 0x89, 0xd0, 0xdf, 0x7b, 0x21, 0x9e, 0xec, 0xb4, 0x35, 0xb5, 0x4e, 0xd5, 0xd4, 0xe2, 0x09,
	0x4a, 0x89, 0x72, 0x59, 0xc1, 0xff, 0xd1, 0x03, 0x7d, 0x05, 0x73, 0x40, 0x6a, 0xca, 0x65, 0x6b,
	0x3f, 0x7c, 0x87, 0xf2, 0xde, 0x7f, 0x8d, 0xb6, 0xb5, 0x56, 0xb5, 0x51, 0xfe, 0x60, 0x6d, 0x6d,
	0x8d, 0x4b, 0x57, 0xc2, 0x85, 0x83, 0xb3, 0x27, 0x5c, 0xba, 0x52, 0x3b, 0x3a, 0xd8, 0x7b, 0xc2,
	0x65, 0xf8, 0x66, 0x29, 0xfd, 0xa2, 0xc6, 0xd5, 0x76, 0x6a, 0xc5, 0xc3, 0xfd, 0x5a, 0x31, 0xb6,
	0x57, 0xce, 0xd7, 0xf7, 0x3f, 0x39, 0x3e, 0xc8, 0x85, 0x8f, 0x0f, 0xf6, 0x36, 0xb3, 0x31, 0x93,
	0xfe, 0xf1, 0xd9, 0xa9, 0x9c, 0xde, 0xaf, 0x1c, 0xa7, 0xe2, 0x9b, 0x47, 0xf5, 0xad, 0x13, 0x45,
	0x4c, 0xe4, 0xe5, 0x74, 0xbe, 0x5c, 0xac, 0xef, 0xbf, 0x28, 0x1d, 0xec, 0xbf, 0x2c, 0xa5, 0xf7,
	0x4f, 0x98, 0xed, 0x7d, 0x41, 0x4c, 0x52, 0xb1, 0xa3, 0xc3, 0x5d, 0x34, 0x6e, 0x61, 0x74, 0x98,
	0x6d, 0xaa, 0x7d, 0x7c, 0xb0, 0xfd, 0xf2, 0x58, 0xa0, 0x3e, 0x2e, 0x44, 0x13, 0x2f, 0x4b, 0x07,
	0x2f, 0xc2, 0x4c, 0xa6, 0xd4, 0x2c, 0xa5, 0xcb, 0x65, 0xe5, 0x60, 0x2b, 0x52, 0xac, 0x52, 0x95,
	0xe3, 0x74, 0xa4, 0x59, 0xa8, 0xd7, 0x5e, 0x96, 0x32, 0x3b, 0x95, 0x52, 0x7a, 0xeb, 0x3c, 0xfb,
	0xf1, 0x8b, 0x6a, 0xb1, 0xba, 0xf9, 0x84, 0x4b, 0xef, 0x9c, 0x67, 0x5f, 0x26, 0x8e, 0x0b, 0xb1,
	0xfd, 0x73, 0x26, 0x93, 0x8b, 0x14, 0x33, 0xd4, 0x69, 0xb1, 0xb1, 0x57, 0x16, 0xf2, 0x7b, 0x65,
	0xf9, 0x70, 0x77, 0x9d, 0xc9, 0x68, 0x1b, 0xb6, 0x0d, 0xdb, 0x5b, 0xcd, 0xe3, 0x4c, 0x64, 0xcb,
	0x90, 0x89, 0x6f, 0x1e, 0x35, 0x98, 0x53, 0xee, 0xe3, 0x17, 0x15, 0x26, 0x5d, 0x39, 0x3f, 0x3e,
	0x38, 0xda, 0x62, 0xea, 0xcd, 0x4a, 0xa9, 0xbe, 0xfd, 0xf2, 0x28, 0xb6, 0xd3, 0x2c, 0x66, 0xf6,
	0xd6, 0xe5, 0x74, 0xed, 0x25, 0xd2, 0xa5, 0x08, 0x89, 0xea, 0xd1, 0x41, 0xae, 0xf5, 0x2c, 0x79,
	0x52, 0xe5, 0x6a, 0x5a, 0xa6, 0x70, 0x4e, 0x25, 0xd1, 0xef, 0x43, 0xf1, 0xec, 0xf4, 0x48, 0x8c,
	0x6f, 0x66, 0xa3, 0x3b, 0xa7, 0xc7, 0x99, 0x93, 0x27, 0x5c, 0x72, 0x4b, 0x2d, 0xa5, 0x23, 0x6d,
	0xae, 0xfc, 0xe1, 0x87, 0xdf, 0x75, 0x81, 0xf7, 0x9f, 0xbe, 0x00, 0xd3, 0x9a, 0xf2, 0x42, 0x23,
	0x82, 0x05, 0xb9, 0xad, 0xac, 0xc7, 0xd1, 0xda, 0x4d, 0xb4, 0xc6, 0x03, 0x9f, 0x06, 0x7f, 0x05,
	0x00, 0x3f, 0x5d, 0x70, 0x2e, 0xd0, 0x41, 0x7f, 0x5d, 0x32, 0x0e, 0xfb, 0xf7, 0xfb, 0x22, 0x06,
	0x6d, 0x47, 0x41, 0x93, 0xb5, 0x4e, 0x1b, 0xe5, 0x64, 0x6a, 0xfe, 0x4d, 0x17, 0x8c, 0xb2, 0xcf,
	0x74, 0xe0, 0x57, 0x60, 0x0c, 0x03, 0x21, 0x30, 0xe2, 0x4e, 0xdb, 0xfa, 0x39, 0x28, 0x4a, 0x44,
	0x42, 0x17, 0x3e, 0x38, 0x93, 0xae, 0xa9, 0x05, 0xb9, 0x26, 0x34, 0x95, 0x22, 0xda, 0xb0, 0xf8,
	0x11, 0x0c, 0x74, 0xda, 0x8a, 0x54, 0x53, 0xe5, 0x52, 0x41, 0xae, 0xc9, 0x8d, 0xa2, 0xd2, 0xb2,
	0xbb, 0xfe, 0x6b, 0x8e, 0xbe, 0xd4, 0xad, 0x2f, 0x7f, 0x0a, 0xbe, 0x31, 0x72, 0xc1, 0x42, 0xa7,
	0xad, 0x64, 0x1d, 0xf2, 0xd6, 0x3e, 0x88, 0xc2, 0x09, 0x6b, 0x7a, 0x6f, 0x69, 0xe9, 0x6d, 0x3e,
	0x7c, 0x1d, 0xc2, 0xba, 0xda, 0xa8, 0x6a, 0x2a, 0x8a, 0xc5, 0xb7, 0x34, 0xf0, 0x0e, 0x4e, 0x67,
	0x5b, 0x3c, 0xd0, 0xc8, 0xbc, 0xad, 0x77, 0xb7, 0xda, 0xe2, 0xfe, 0x43, 0x11, 0x3a, 0xc1, 0xe3,
	0x43, 0xd0, 0x8c, 0xc6, 0x9d, 0xb8, 0x6e, 0x1f, 0xf7, 0x43, 0x65, 0x00, 0x3f, 0x57, 0x1a, 0x80,
	0x57, 0xe1, 0x82, 0x5c, 0x95, 0x5a, 0xd5, 0xf6, 0x89, 0x84, 0x82, 0xa3, 0x24, 0xd9, 0xee, 0xba,
	0xfd, 0x0e, 0xd9, 0xb9, 0xca, 0x57, 0xdb, 0x27, 0x14, 0x92, 0xb3, 0x76, 0x79, 0x6f, 0x51, 0x50,
	0x62, 0x18, 0xa4, 0xe3, 0xdb, 0x70, 0xde, 0xf2, 0x52, 0x41, 0xd5, 0xec, 0x75, 0xbe, 0xfe, 0xd4,
	0x30, 0x67, 0x8a, 0x50, 0xaa, 0x66, 0xad, 0x6c, 0x05, 0x2e, 0x20, 0xf9, 0xa6, 0x7d, 0x35, 0x66,
	0x43, 0x41, 0x1d, 0x2a, 0xfc, 0x96, 0xdb, 0xa3, 0x81, 0x3b, 0xb5, 0xcc, 0x28, 0xef, 0x2f, 0x0c,
	0xbb, 0x6b, 0x63, 0x61, 0x40, 0xae, 0xe9, 0x57, 0x1b, 0xb5, 0x9a, 0xe4, 0xda, 0x1c, 0xed, 0xc0,
	0xf4, 0xb5, 0x27, 0x88, 0xdb, 0xba, 0x1c, 0x59, 0xab, 0xb9, 0x9b, 0xbf, 0x0a, 0x5c, 0x90, 0x8d,
	0xa6, 0xb0, 0x1f, 0xce, 0xf7, 0x76, 0xd3, 0x87, 0xb5, 0x93, 0x19, 0x0f, 0xef, 0x97, 0x87, 0xb5,
	0x99, 0xcf, 0xec, 0x9b, 0x2e, 0xc9, 0x95, 0xa4, 0xcd, 0xc3, 0xc3, 0x70, 0xbb, 0xbd, 0xbc, 0xdf,
	0x14, 0x72, 0x95, 0x02, 0x1d, 0xcc, 0xba, 0x86, 0x71, 0x81, 0x61, 0x6f, 0x01, 0x33, 0xef, 0x5f,
	0x5c, 0x60, 0x0a, 0xf4, 0x17, 0xf5, 0xf2, 0xd0, 0x87, 0x35, 0xf7, 0x0e, 0x1e, 0x18, 0x52, 0xf0,
	0x32, 0x5e, 0x7e, 0xde, 0xc0, 0x73, 0xab, 0xd9, 0x83, 0x8b, 0x28, 0xb5, 0xd8, 0x11, 0xe7, 0x2a,
	0x3d, 0xf3, 0xd7, 0xd8, 0x3d, 0xa6, 0xa7, 0x94, 0x94, 0x19, 0x76, 0xce, 0x0c, 0x99, 0xef, 0xaf,
	0x60, 0xfe, 0xb7, 0xdf, 0x16, 0x0d, 0x56, 0xc2, 0xcc, 0x98, 0x3b, 0xf1, 0x7e, 0xf0, 0x37, 0xff,
	0xde, 0x05, 0x2f, 0xe1, 0x1d, 0x88, 0xd1, 0x8d, 0xe7, 0x6a, 0xab, 0xa8, 0xd4, 0x95, 0x86, 0x16,
	0xdc, 0x55, 0x4b, 0x0a, 0x0e, 0x22, 0x8f, 0x00, 0xbc, 0x0f, 0x03, 0x82, 0x52, 0xec, 0xb4, 0xaa,
	0xda, 0x79, 0x90, 0x53, 0x6b, 0xd5, 0xe2, 0x79, 0xd0, 0xde, 0xc3, 0x20, 0x01, 0xef, 0xc1, 0x3b,
	0x94, 0xaa, 0x05, 0x7b, 0xc1, 0xeb, 0xa0, 0x6e, 0xc2, 0x10, 0x5c, 0x20, 0x4b, 0xa7, 0x28, 0x31,
	0x96, 0x82, 0x45, 0x57, 0x43, 0x39, 0x11, 0x89, 0xe8, 0x47, 0xa4, 0x4d, 0x6a, 0x05, 0xde, 0x51,
	0x7a, 0x9a, 0xa5, 0xba, 0x5a, 0x52, 0x9c, 0x87, 0x36, 0xaf, 0xd9, 0x80, 0x78, 0xe2, 0x44, 0x8c,
	0x5a, 0x85, 0x81, 0x81, 0x9c, 0x64, 0x31, 0xe3, 0x8e, 0x13, 0xde, 0xf8, 0x3a, 0x11, 0x8d, 0x10,
	0x1b, 0xd4, 0x63, 0x78, 0xbb, 0x6f, 0xaf, 0x9a, 0xcc, 0xfd, 0xc7, 0xbb, 0x30, 0x15, 0x85, 0xf7,
	0x87, 0xef, 0x0d, 0x4b, 0x64, 0xee, 0x75, 0x17, 0x4c, 0x5f, 0x74, 0xc1, 0xd4, 0x65, 0x17, 0x8c,
	0x45, 0xa2, 0x44, 0x24, 0x46, 0xad, 0xc1, 0xdb, 0xee, 0x66, 0xc7, 0x3a, 0x3d, 0x2e, 0xbc, 0xee,
	0x02, 0xec, 0xa2, 0x0b, 0x66, 0x2e, 0xbb, 0x00, 0x46, 0x12, 0x44, 0x30, 0xb2, 0x4e, 0x04, 0x23,
	0xc8, 0x1e, 0xbf, 0x6b, 0x09, 0x9d, 0xd8, 0xf3, 0x17, 0x5d, 0x80, 0xeb, 0xd8, 0x5b, 0x44, 0x34,
	0xdc, 0x77, 0xb1, 0x66, 0x9c, 0x1c, 0xa7, 0xb0, 0xe9, 0x1d, 0xef, 0xc4, 0x0c, 0x36, 0xbb, 0xe3,
	0x9d, 0xc0, 0xb1, 0xf9, 0xd0, 0x6f, 0x47, 0xe1, 0xfc, 0x90, 0x54, 0x88, 0x9f, 0x40, 0x4c, 0xbf,
	0x1d, 0xd5, 0xb3, 0xab, 0xeb, 0x82, 0x3e, 0x76, 0x5d, 0xb0, 0x0c, 0x00, 0x99, 0x17, 0xdd, 0xd3,
	0x6f, 0xba, 0x60, 0x82, 0x64, 0x24, 0xe3, 0xc6, 0x7e, 0x06, 0x41, 0x23, 0x56, 0xf3, 0x1a, 0xbd,
	0x09, 0x71, 0xf3, 0x16, 0xd6, 0xa9, 0x6e, 0xf4, 0x87, 0xab, 0xf3, 0xbd, 0xe9, 0x82, 0x49, 0x92,
	0x91, 0xcc, 0xab, 0x75, 0xcc, 0x40, 0x77, 0x68, 0xfc, 0x18, 0xce, 0xa2, 0xac, 0xe8, 0x54, 0xe7,
	0xf9, 0x83, 0xa9, 0xf3, 0xd5, 0xd4, 0xb3, 0x9e, 0xae, 0xd0, 0x2f, 0x7c, 0x70, 0x26, 0xd9, 0x52,
	0x64, 0x4d, 0xb1, 0xbb, 0x06, 0xee, 0x87, 0x75, 0x0d, 0x37, 0xcd, 0xc2, 0x0f, 0x6f, 0x16, 0x9e,
	0xff, 0x81, 0x9b, 0x85, 0x9b, 0x1e, 0xe1, 0xa6, 0x47, 0xb8, 0xe9, 0x11, 0xde, 0xbd, 0x47, 0x98,
	0xfb, 0xcd, 0x47, 0x7d, 0x67, 0x27, 0x6a, 0xfd, 0xea, 0xb2, 0x7d, 0xf7, 0xd5, 0xf7, 0xe0, 0x2a,
	0x22, 0xb5, 0x79, 0x4d, 0x09, 0xbf, 0xf7, 0xea, 0x7b, 0x70, 0x25, 0x95, 0x8a, 0x5e, 0x55, 0xcc,
	0x17, 0x5f, 0x7d, 0x0f, 0x86, 0x93, 0x28, 0xea, 0x6d, 0x55, 0xfd, 0x47, 0xaf, 0xbe, 0x07, 0xd7,
	0xb3, 0x20, 0xbd, 0xc3, 0xab, 0xbc, 0xae, 0x77, 0x28, 0x89, 0x0a, 0x5f, 0x51, 0xe8, 0x03, 0xaf,
	0xbe, 0x07, 0x43, 0x29, 0xef, 0x54, 0xef, 0x7f, 0xe9, 0x83, 0xb3, 0xbc, 0xd2, 0xac, 0xc9, 0xc5,
	0x9b, 0x6a, 0x74, 0x53, 0x8d, 0x6e, 0xaa, 0xd1, 0x4d, 0x35, 0xba, 0xa9, 0x46, 0x37, 0xd5, 0xe8,
	0x8f, 0x55, 0x8d, 0x3e, 0xf7, 0xc1, 0xa9, 0xb4, 0xa2, 0xdd, 0x54, 0xa2, 0x9b, 0x4a, 0x74, 0x53,
	0x89, 0x6e, 0x2a, 0xd1, 0x4d, 0x25, 0xfa, 0x23, 0x55, 0x22, 0xea, 0xaa, 0x4a, 0xf4, 0xb8, 0xff,
	0x92, 0xf3, 0xff, 0x49, 0x65, 0x5a, 0xf9, 0x7c, 0x1a, 0x06, 0xae, 0xfa, 0x87, 0x41, 0x1c, 0x87,
	0x93, 0xfb, 0x0c, 0x9b, 0x95, 0x72, 0x6c, 0x8e, 0xc6, 0x46, 0x96, 0x3c, 0x9f, 0xfe, 0x14, 0xe0,
	0x73, 0xd0, 0xa7, 0x8f, 0x6d, 0x33, 0x59, 0x5a, 0x3c, 0xe2, 0x68, 0x0c, 0xe0, 0xb3, 0x70, 0x4a,
	0x1f, 0xda, 0xa5, 0xc5, 0x0c, 0x9b, 0xc2, 0x46, 0xf1, 0x45, 0x78, 0xdb, 0x18, 0x20, 0x73, 0x29,
	0x52, 0x64, 0xf9, 0x23, 0x29, 0x43, 0x93, 0x29, 0x9a, 0xc7, 0x3c, 0x78, 0x08, 0x2e, 0xea, 0xa4,
	0x8c, 0x28, 0x72, 0x12, 0x4f, 0x0b, 0x1c, 0x9b, 0x13, 0x68, 0x49, 0x10, 0x49, 0x31, 0x2f, 0x60,
	0x5e, 0x43, 0xc5, 0x5d, 0x78, 0x47, 0xe7, 0xe1, 0xe9, 0xbd, 0x3c, 0x2d, 0x88, 0xd2, 0x2e, 0x79,
	0x28, 0x65, 0xe9, 0x5c, 0x5a, 0xcc, 0x60, 0x63, 0xb8, 0x1f, 0x62, 0xb6, 0x7e, 0x29, 0xcf, 0x65,
	0x59, 0x32, 0x85, 0x8d, 0xe3, 0xf7, 0x60, 0xa0, 0x7f, 0x54, 0x62, 0x72, 0x12, 0xc5, 0xa6, 0x8e,
	0xb0, 0x5b, 0xf8, 0x02, 0xc4, 0x75, 0xea, 0xe1, 0x2e, 0xb2, 0x29, 0xbb, 0xcd, 0xf2, 0xbb, 0x74,
	0x0a, 0x9b, 0xc0, 0xef, 0xc0, 0x79, 0x7d, 0x7c, 0x47, 0x60, 0x73, 0x0e, 0xc2, 0xa4, 0x0d, 0x47,
	0x0a, 0xbb, 0x52, 0x92, 0x65, 0x9f, 0x31, 0xb4, 0xb4, 0xcb, 0xa6, 0x98, 0x6d, 0x86, 0x4e, 0x61,
	0x10, 0x27, 0xe0, 0xa3, 0xde, 0x1c, 0x38, 0x9e, 0x15, 0xd9, 0x24, 0x9a, 0x6c, 0x3e, 0x2b, 0x32,
	0x5c, 0x96, 0x96, 0x32, 0xac, 0x20, 0x9a, 0x13, 0x16, 0xb0, 0xa9, 0x2b, 0xb8, 0x29, 0x32, 0xe5,
	0x64, 0x94, 0xf6, 0xc9, 0x6c, 0x9e, 0xc6, 0x7c, 0x78, 0x04, 0x3e, 0x1d, 0xc2, 0x9d, 0xcf, 0x71,
	0x24, 0x2f, 0x90, 0x54, 0x96, 0xb6, 0x9d, 0x92, 0x64, 0x73, 0x22, 0x9d, 0x13, 0xb1, 0x59, 0xfc,
	0x21, 0x0c, 0x0d, 0x11, 0xc9, 0xe5, 0xb3, 0x59, 0xe4, 0x02, 0x93, 0x1f, 0x9b, 0xc3, 0x7f, 0x0c,
	0xdf, 0xbb, 0xca, 0x10, 0x34, 0xb2, 0x4f, 0xf3, 0x02, 0xc3, 0xe6, 0x30, 0x1c, 0xff, 0x09, 0xdc,
	0x18, 0xc2, 0x98, 0xe4, 0xb3, 0xdb, 0x52, 0x32, 0x43, 0xf2, 0x64, 0x52, 0xa4, 0x79, 0x41, 0xa2,
	0xe8, 0x6d, 0x96, 0xef, 0xd9, 0x23, 0x88, 0x24, 0x2f, 0x62, 0xb7, 0xf1, 0x2d, 0x98, 0x18, 0x66,
	0x0d, 0xeb, 0x9a, 0x2d, 0x93, 0x33, 0xe8, 0x11, 0x29, 0x62, 0x1b, 0xb8, 0x80, 0x6f, 0xc0, 0xd8,
	0x15, 0x06, 0x1a, 0xbe, 0x25, 0x79, 0x51, 0xe2, 0x48, 0x9e, 0xdc, 0xa5, 0x75, 0x03, 0x90, 0x4b,
	0x98, 0x5c, 0x1a, 0xbb, 0x83, 0x27, 0x60, 0x64, 0x88, 0xa0, 0x40, 0xef, 0xd3, 0x3c, 0x99, 0xb5,
	0x3c, 0x65, 0x86, 0x90, 0xbd, 0x32, 0x77, 0x71, 0x12, 0x7e, 0x38, 0x6c, 0x9e, 0x6e, 0x76, 0x21,
	0xc3, 0xe6, 0xb3, 0x29, 0x89, 0xa2, 0x25, 0x52, 0xe2, 0x58, 0x81, 0x11, 0x99, 0x7d, 0x5a, 0xca,
	0xe5, 0x77, 0x29, 0x9a, 0xc7, 0xee, 0xe3, 0xef, 0xc3, 0x1f, 0xe9, 0x10, 0xf4, 0x3e, 0x89, 0x9c,
	0x27, 0xa5, 0x18, 0x9e, 0x4e, 0xea, 0x11, 0x2f, 0xf2, 0x24, 0xf2, 0x28, 0x99, 0x15, 0xb0, 0xf7,
	0xf1, 0x25, 0xb8, 0x60, 0x6e, 0x08, 0x33, 0xc6, 0xec, 0x59, 0x3f, 0xc4, 0x43, 0x70, 0xd9, 0x05,
	0x61, 0xc7, 0x51, 0x8a, 0x4e, 0xb2, 0x29, 0x34, 0xc1, 0x1f, 0xe3, 0x01, 0x38, 0xab, 0xf3, 0xa4,
	0x48, 0x91, 0x94, 0xd2, 0x79, 0x92, 0x4f, 0x61, 0x8f, 0x8c, 0xbd, 0xd2, 0x2f, 0x4d, 0x72, 0x64,
	0x32, 0x43, 0x4b, 0x07, 0x19, 0x46, 0xa4, 0x05, 0x8e, 0x4c, 0xd2, 0xd8, 0x63, 0x3c, 0x00, 0xfd,
	0x3a, 0x4f, 0x7f, 0x24, 0xaf, 0xd8, 0x21, 0x61, 0x49, 0x33, 0x8c, 0x20, 0xe5, 0x73, 0x4c, 0x92,
	0x4d, 0xd1, 0x12, 0x7a, 0x70, 0x2c, 0x93, 0x13, 0x05, 0xec, 0x09, 0x1e, 0x84, 0xf7, 0x06, 0x18,
	0x29, 0x32, 0xf9, 0x4c, 0xc8, 0x92, 0x42, 0x86, 0x16, 0x30, 0x02, 0x7f, 0x0f, 0x3e, 0x70, 0x71,
	0x70, 0x34, 0x9f, 0x44, 0x6e, 0xcc, 0xf7, 0xe6, 0xf1, 0x74, 0x80, 0x89, 0x22, 0x79, 0x5a, 0xa2,
	0x8e, 0x44, 0xc7, 0x64, 0x57, 0xed, 0x14, 0xd1, 0x63, 0x4a, 0x49, 0xf9, 0x1c, 0x2d, 0x24, 0x49,
	0x8e, 0xc6, 0xd6, 0x8c, 0x69, 0x53, 0x70, 0xeb, 0xad, 0xa1, 0x82, 0x3c, 0xad, 0x3b, 0xcc, 0x0a,
	0x51, 0x2b, 0x60, 0xc2, 0x06, 0xc6, 0x06, 0x5c, 0x1d, 0x86, 0xc1, 0xa6, 0x8e, 0x50, 0x7c, 0xa6,
	0x69, 0x51, 0x62, 0x79, 0x3d, 0x5a, 0xec, 0xc5, 0x8a, 0x18, 0x82, 0x7f, 0x3a, 0x34, 0x4e, 0x33,
	0x4c, 0x3a, 0x23, 0x91, 0x42, 0x92, 0x61, 0x9c, 0xbb, 0x04, 0x45, 0xba, 0x19, 0x70, 0x51, 0x43,
	0x7a, 0xc1, 0x4c, 0xa0, 0x74, 0xce, 0x9c, 0x71, 0xcc, 0x18, 0x5f, 0x36, 0x93, 0xa6, 0xb5, 0x4a,
	0x76, 0x3a, 0x8a, 0x1b, 0xf4, 0x7b, 0x66, 0xb2, 0x4a, 0xf3, 0x24, 0x97, 0xd9, 0xcb, 0xea, 0xd3,
	0x23, 0x45, 0x2c, 0x61, 0x50, 0x1f, 0x98, 0x11, 0x66, 0x51, 0x7b, 0xe2, 0xeb, 0x06, 0xc3, 0x63,
	0x18, 0x74, 0x31, 0x30, 0x39, 0x91, 0x67, 0x05, 0x8e, 0x4e, 0x8a, 0xc8, 0xc7, 0x7b, 0x79, 0x9a,
	0x3f, 0xc2, 0x36, 0x74, 0xd6, 0x25, 0xef, 0x37, 0x5d, 0x00, 0x56, 0x7e, 0x3e, 0x01, 0x61, 0xef,
	0x3f, 0xe8, 0xf1, 0x45, 0x88, 0x91, 0xa2, 0x48, 0x26, 0x9f, 0x49, 0x28, 0xeb, 0xbb, 0x4a, 0x42,
	0x08, 0x2e, 0xf7, 0x91, 0x24, 0x8a, 0x67, 0x0f, 0x04, 0x9a, 0x97, 0x92, 0x59, 0x06, 0x25, 0x29,
	0xa4, 0xfe, 0x7d, 0x27, 0x0f, 0x2b, 0x66, 0x68, 0x5e, 0x22, 0x39, 0x2e, 0xcb, 0x24, 0x49, 0xdd,
	0x02, 0x83, 0x2a, 0x60, 0xa3, 0x28, 0x28, 0x9d, 0xac, 0x22, 0xcf, 0xee, 0x90, 0x39, 0x3d, 0xda,
	0x52, 0x2c, 0xcb, 0x4b, 0x02, 0x77, 0x74, 0x40, 0xf2, 0x34, 0xe6, 0xc1, 0x7f, 0x04, 0xef, 0x3b,
	0x19, 0x53, 0xb4, 0x68, 0xce, 0xc6, 0x8c, 0x1c, 0xcc, 0xdb, 0x6f, 0xda, 0x7e, 0x3e, 0x9b, 0xa3,
	0x79, 0x92, 0x62, 0xb2, 0x8c, 0x78, 0x24, 0x09, 0x49, 0x32, 0x87, 0x8d, 0xa1, 0xfc, 0xe9, 0xe4,
	0x21, 0xa9, 0xbc, 0x40, 0x4b, 0xec, 0xb6, 0xb4, 0x9d, 0xcf, 0xe9, 0x70, 0x24, 0x62, 0xc6, 0xc6,
	0xf1, 0x38, 0x0c, 0xbb, 0xf8, 0xf2, 0x62, 0x86, 0xce, 0x89, 0xb6, 0xfd, 0x79, 0x31, 0xc3, 0xf2,
	0xcc, 0xb1, 0x7b, 0x36, 0xb7, 0xf0, 0x07, 0xf0, 0xae, 0x53, 0x8a, 0xca, 0x6f, 0x6f, 0xd3, 0xbc,
	0xc4, 0xee, 0xd3, 0xfc, 0x76, 0x96, 0x3d, 0xc0, 0x26, 0xf0, 0xa7, 0xf0, 0xb1, 0x93, 0x81, 0xe3,
	0xe9, 0x14, 0x93, 0x14, 0xcd, 0x5c, 0x2f, 0xb0, 0x79, 0x3e, 0x49, 0x4b, 0x59, 0xd6, 0xd0, 0x82,
	0x4d, 0xa2, 0x2d, 0xe4, 0x64, 0x67, 0x72, 0x46, 0x1c, 0x20, 0xa5, 0x59, 0x9a, 0x7c, 0x46, 0xa6,
	0x69, 0x0c, 0xf6, 0x4f, 0xbb, 0x97, 0x95, 0x98, 0x5c, 0x8a, 0x3e, 0x44, 0x41, 0x37, 0x85, 0x2f,
	0xc3, 0x25, 0x97, 0x5e, 0x52, 0xcc, 0xf4, 0x92, 0x16, 0x36, 0xdd, 0x6f, 0xf8, 0xa1, 0xce, 0xc0,
	0xe4, 0x76, 0x0c, 0x1f, 0x63, 0xbe, 0x7e, 0x80, 0x6c, 0x8a, 0xe4, 0x1c, 0xf4, 0x19, 0x7c, 0x05,
	0x3e, 0x74, 0xd2, 0x05, 0x9a, 0xdf, 0xa7, 0x79, 0x49, 0x60, 0xcc, 0xdc, 0xe2, 0xe0, 0x9d, 0xed,
	0x5f, 0xca, 0x24, 0xbb, 0x8b, 0x7a, 0x07, 0x89, 0x3e, 0xa4, 0x93, 0x79, 0x9d, 0x05, 0xc3, 0xef,
	0xc3, 0x45, 0x17, 0x9c, 0x1e, 0xc3, 0x16, 0xc2, 0x1c, 0xfe, 0x27, 0x30, 0xe8, 0x42, 0xe0, 0x59,
	0x41, 0x90, 0x04, 0x46, 0xa4, 0x25, 0x21, 0xc9, 0x33, 0x9c, 0x88, 0x26, 0x8d, 0x0f, 0x86, 0x4c,
	0x8e, 0x21, 0xb3, 0x68, 0xb1, 0x91, 0x75, 0x4c, 0x92, 0xc6, 0xe6, 0xfb, 0x7d, 0x67, 0x6c, 0x72,
	0x92, 0x47, 0xd1, 0x6c, 0x8c, 0x63, 0xfe, 0x7e, 0x18, 0x81, 0x16, 0xf4, 0x4c, 0x95, 0x61, 0x76,
	0xc8, 0xe4, 0x33, 0xa4, 0xe9, 0x76, 0x7f, 0x14, 0xf7, 0xf5, 0x3b, 0x5c, 0x96, 0x11, 0x75, 0x93,
	0x16, 0xfa, 0xb1, 0xb6, 0x59, 0x3e, 0x49, 0x6f, 0xe7, 0xb3, 0xc6, 0x16, 0x32, 0xea, 0x5b, 0xdf,
	0x9a, 0xf3, 0xf4, 0x2e, 0x2b, 0xd2, 0x46, 0xaf, 0xc3, 0xe4, 0x92, 0xd9, 0x7c, 0x8a, 0xc6, 0x02,
	0xa8, 0x14, 0x39, 0x99, 0x76, 0xc9, 0x2c, 0x93, 0x64, 0xd8, 0xbc, 0xe0, 0xea, 0x94, 0x16, 0xf1,
	0x15, 0x37, 0x9b, 0x95, 0x0e, 0xdc, 0x33, 0x5c, 0x72, 0x26, 0x82, 0x55, 0x38, 0xd9, 0xfb, 0x12,
	0x6c, 0x12, 0x1a, 0x5f, 0xa3, 0x61, 0x23, 0x38, 0x84, 0xe6, 0x27, 0x5d, 0x18, 0x40, 0xef, 0x4c,
	0x3a, 0xc7, 0xf2, 0x34, 0x36, 0xba, 0xb2, 0x0e, 0xef, 0x5c, 0xf1, 0x07, 0x64, 0x7c, 0x1a, 0xda,
	0x7f, 0x1c, 0xc7, 0x46, 0x70, 0x1f, 0xec, 0xfd, 0x31, 0x19, 0x03, 0xd4, 0x2f, 0xc0, 0xc5, 0x57,
	0xcb, 0x23, 0x5f, 0x7e, 0xb5, 0x3c, 0xf2, 0xed, 0x57, 0xcb, 0xe0, 0xd3, 0xcb, 0x65, 0xf0, 0xcf,
	0x97, 0xcb, 0xe0, 0xd7, 0x97, 0xcb, 0xe0, 0xe2, 0x72, 0x19, 0x7c, 0x79, 0xb9, 0x0c, 0x7e, 0x7b,
	0xb9, 0x0c, 0xbe, 0xb9, 0x5c, 0x1e, 0xf9, 0xf6, 0x72, 0x19, 0xfc, 0xea, 0xeb, 0xe5, 0x91, 0x8b,
	0xaf, 0x97, 0x47, 0xbe, 0xfc, 0x7a, 0x79, 0xe4, 0x98, 0x2b, 0xab, 0xcd, 0x93, 0xf2, 0xea, 0xa9,
	0x5a, 0xd3, 0x94, 0x56, 0x4b, 0x5e, 0xed, 0xb4, 0xd7, 0xf4, 0x97, 0xe7, 0x6a, 0xab, 0xfe, 0xb4,
	0xd9, 0x52, 0x4f, 0xab, 0x25, 0xa5, 0xf5, 0xd4, 0x22, 0xaf, 0x35, 0x0b, 0x65, 0x75, 0x4d, 0x79,
	0xa1, 0x99, 0x1f, 0xf5, 0x0d, 0xf9, 0x7a, 0xb1, 0x30, 0xae, 0x7f, 0xdc, 0x17, 0xfb, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x75, 0xcc, 0x0d, 0xb0, 0xe2, 0x38, 0x00, 0x00,
}

func (x AppFirewallViolationType) String() string {
	s, ok := AppFirewallViolationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AttackType) String() string {
	s, ok := AttackType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BotAction) String() string {
	s, ok := BotAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RiskBasedBlockingAction) String() string {
	s, ok := RiskBasedBlockingAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotProtectionSetting)
	if !ok {
		that2, ok := that.(BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaliciousBotAction != that1.MaliciousBotAction {
		return false
	}
	if this.SuspiciousBotAction != that1.SuspiciousBotAction {
		return false
	}
	if this.GoodBotAction != that1.GoodBotAction {
		return false
	}
	return true
}
func (this *AttackTypeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttackTypeSettings)
	if !ok {
		that2, ok := that.(AttackTypeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DisabledAttackTypes) != len(that1.DisabledAttackTypes) {
		return false
	}
	for i := range this.DisabledAttackTypes {
		if this.DisabledAttackTypes[i] != that1.DisabledAttackTypes[i] {
			return false
		}
	}
	return true
}
func (this *SignatureSelectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SignatureSelectionByAccuracy == nil {
		if this.SignatureSelectionByAccuracy != nil {
			return false
		}
	} else if this.SignatureSelectionByAccuracy == nil {
		return false
	} else if !this.SignatureSelectionByAccuracy.Equal(that1.SignatureSelectionByAccuracy) {
		return false
	}
	if that1.AttackTypeSetting == nil {
		if this.AttackTypeSetting != nil {
			return false
		}
	} else if this.AttackTypeSetting == nil {
		return false
	} else if !this.AttackTypeSetting.Equal(that1.AttackTypeSetting) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_OnlyHighAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_OnlyHighAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OnlyHighAccuracySignatures.Equal(that1.OnlyHighAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_HighMediumAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_HighMediumAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HighMediumAccuracySignatures.Equal(that1.HighMediumAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_HighMediumLowAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_HighMediumLowAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HighMediumLowAccuracySignatures.Equal(that1.HighMediumLowAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_DefaultAttackTypeSettings)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_DefaultAttackTypeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAttackTypeSettings.Equal(that1.DefaultAttackTypeSettings) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_AttackTypeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_AttackTypeSettings)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_AttackTypeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AttackTypeSettings.Equal(that1.AttackTypeSettings) {
		return false
	}
	return true
}
func (this *ViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSettings)
	if !ok {
		that2, ok := that.(ViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DisabledViolationTypes) != len(that1.DisabledViolationTypes) {
		return false
	}
	for i := range this.DisabledViolationTypes {
		if this.DisabledViolationTypes[i] != that1.DisabledViolationTypes[i] {
			return false
		}
	}
	return true
}
func (this *DetectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting)
	if !ok {
		that2, ok := that.(DetectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignatureSelectionSetting.Equal(that1.SignatureSelectionSetting) {
		return false
	}
	if that1.FalsePositiveSuppression == nil {
		if this.FalsePositiveSuppression != nil {
			return false
		}
	} else if this.FalsePositiveSuppression == nil {
		return false
	} else if !this.FalsePositiveSuppression.Equal(that1.FalsePositiveSuppression) {
		return false
	}
	if that1.ThreatCampaignChoice == nil {
		if this.ThreatCampaignChoice != nil {
			return false
		}
	} else if this.ThreatCampaignChoice == nil {
		return false
	} else if !this.ThreatCampaignChoice.Equal(that1.ThreatCampaignChoice) {
		return false
	}
	if that1.ViolationDetectionSetting == nil {
		if this.ViolationDetectionSetting != nil {
			return false
		}
	} else if this.ViolationDetectionSetting == nil {
		return false
	} else if !this.ViolationDetectionSetting.Equal(that1.ViolationDetectionSetting) {
		return false
	}
	if that1.SignaturesStagingSettings == nil {
		if this.SignaturesStagingSettings != nil {
			return false
		}
	} else if this.SignaturesStagingSettings == nil {
		return false
	} else if !this.SignaturesStagingSettings.Equal(that1.SignaturesStagingSettings) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnableSuppression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnableSuppression)
	if !ok {
		that2, ok := that.(DetectionSetting_EnableSuppression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSuppression.Equal(that1.EnableSuppression) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableSuppression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableSuppression)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableSuppression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSuppression.Equal(that1.DisableSuppression) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnableThreatCampaigns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnableThreatCampaigns)
	if !ok {
		that2, ok := that.(DetectionSetting_EnableThreatCampaigns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatCampaigns.Equal(that1.EnableThreatCampaigns) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableThreatCampaigns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableThreatCampaigns)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableThreatCampaigns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatCampaigns.Equal(that1.DisableThreatCampaigns) {
		return false
	}
	return true
}
func (this *DetectionSetting_DefaultViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DefaultViolationSettings)
	if !ok {
		that2, ok := that.(DetectionSetting_DefaultViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultViolationSettings.Equal(that1.DefaultViolationSettings) {
		return false
	}
	return true
}
func (this *DetectionSetting_ViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_ViolationSettings)
	if !ok {
		that2, ok := that.(DetectionSetting_ViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViolationSettings.Equal(that1.ViolationSettings) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableStaging) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableStaging)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableStaging)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableStaging.Equal(that1.DisableStaging) {
		return false
	}
	return true
}
func (this *DetectionSetting_StageNewSignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_StageNewSignatures)
	if !ok {
		that2, ok := that.(DetectionSetting_StageNewSignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StageNewSignatures.Equal(that1.StageNewSignatures) {
		return false
	}
	return true
}
func (this *DetectionSetting_StageNewAndUpdatedSignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_StageNewAndUpdatedSignatures)
	if !ok {
		that2, ok := that.(DetectionSetting_StageNewAndUpdatedSignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StageNewAndUpdatedSignatures.Equal(that1.StageNewAndUpdatedSignatures) {
		return false
	}
	return true
}
func (this *SignaturesStagingSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignaturesStagingSettings)
	if !ok {
		that2, ok := that.(SignaturesStagingSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StagingPeriod != that1.StagingPeriod {
		return false
	}
	return true
}
func (this *AllowedResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedResponseCodes)
	if !ok {
		that2, ok := that.(AllowedResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResponseCode) != len(that1.ResponseCode) {
		return false
	}
	for i := range this.ResponseCode {
		if this.ResponseCode[i] != that1.ResponseCode[i] {
			return false
		}
	}
	return true
}
func (this *AnonymizeHttpHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizeHttpHeader)
	if !ok {
		that2, ok := that.(AnonymizeHttpHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeaderName != that1.HeaderName {
		return false
	}
	return true
}
func (this *AnonymizeHttpQueryParameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizeHttpQueryParameter)
	if !ok {
		that2, ok := that.(AnonymizeHttpQueryParameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryParamName != that1.QueryParamName {
		return false
	}
	return true
}
func (this *AnonymizeHttpCookie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizeHttpCookie)
	if !ok {
		that2, ok := that.(AnonymizeHttpCookie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CookieName != that1.CookieName {
		return false
	}
	return true
}
func (this *AnonymizationConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizationConfiguration)
	if !ok {
		that2, ok := that.(AnonymizationConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AnonymizationChoice == nil {
		if this.AnonymizationChoice != nil {
			return false
		}
	} else if this.AnonymizationChoice == nil {
		return false
	} else if !this.AnonymizationChoice.Equal(that1.AnonymizationChoice) {
		return false
	}
	return true
}
func (this *AnonymizationConfiguration_HttpHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizationConfiguration_HttpHeader)
	if !ok {
		that2, ok := that.(AnonymizationConfiguration_HttpHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHeader.Equal(that1.HttpHeader) {
		return false
	}
	return true
}
func (this *AnonymizationConfiguration_QueryParameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizationConfiguration_QueryParameter)
	if !ok {
		that2, ok := that.(AnonymizationConfiguration_QueryParameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryParameter.Equal(that1.QueryParameter) {
		return false
	}
	return true
}
func (this *AnonymizationConfiguration_Cookie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizationConfiguration_Cookie)
	if !ok {
		that2, ok := that.(AnonymizationConfiguration_Cookie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cookie.Equal(that1.Cookie) {
		return false
	}
	return true
}
func (this *AnonymizationSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnonymizationSetting)
	if !ok {
		that2, ok := that.(AnonymizationSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AnonymizationConfig) != len(that1.AnonymizationConfig) {
		return false
	}
	for i := range this.AnonymizationConfig {
		if !this.AnonymizationConfig[i].Equal(that1.AnonymizationConfig[i]) {
			return false
		}
	}
	return true
}
func (this *CustomBlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomBlockingPage)
	if !ok {
		that2, ok := that.(CustomBlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockingPage != that1.BlockingPage {
		return false
	}
	if this.ResponseCode != that1.ResponseCode {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	if that1.AllowedResponseCodesChoice == nil {
		if this.AllowedResponseCodesChoice != nil {
			return false
		}
	} else if this.AllowedResponseCodesChoice == nil {
		return false
	} else if !this.AllowedResponseCodesChoice.Equal(that1.AllowedResponseCodesChoice) {
		return false
	}
	if that1.AnonymizationSetting == nil {
		if this.AnonymizationSetting != nil {
			return false
		}
	} else if this.AnonymizationSetting == nil {
		return false
	} else if !this.AnonymizationSetting.Equal(that1.AnonymizationSetting) {
		return false
	}
	if that1.BlockingPageChoice == nil {
		if this.BlockingPageChoice != nil {
			return false
		}
	} else if this.BlockingPageChoice == nil {
		return false
	} else if !this.BlockingPageChoice.Equal(that1.BlockingPageChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Blocking)
	if !ok {
		that2, ok := that.(GlobalSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Monitoring)
	if !ok {
		that2, ok := that.(GlobalSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(GlobalSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AiRiskBasedBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AiRiskBasedBlocking)
	if !ok {
		that2, ok := that.(GlobalSpecType_AiRiskBasedBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AiRiskBasedBlocking.Equal(that1.AiRiskBasedBlocking) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowAllResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowAllResponseCodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowAllResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllResponseCodes.Equal(that1.AllowAllResponseCodes) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowedResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowedResponseCodes)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowedResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedResponseCodes.Equal(that1.AllowedResponseCodes) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableAnonymization)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAnonymization.Equal(that1.DisableAnonymization) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultAnonymization)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAnonymization.Equal(that1.DefaultAnonymization) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomAnonymization)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAnonymization.Equal(that1.CustomAnonymization) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseDefaultBlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseDefaultBlockingPage)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseDefaultBlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultBlockingPage.Equal(that1.UseDefaultBlockingPage) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockingPage)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockingPage.Equal(that1.BlockingPage) {
		return false
	}
	return true
}
func (this *AiRiskBasedBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AiRiskBasedBlocking)
	if !ok {
		that2, ok := that.(AiRiskBasedBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HighRiskAction != that1.HighRiskAction {
		return false
	}
	if this.MediumRiskAction != that1.MediumRiskAction {
		return false
	}
	if this.LowRiskAction != that1.LowRiskAction {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	if that1.AllowedResponseCodesChoice == nil {
		if this.AllowedResponseCodesChoice != nil {
			return false
		}
	} else if this.AllowedResponseCodesChoice == nil {
		return false
	} else if !this.AllowedResponseCodesChoice.Equal(that1.AllowedResponseCodesChoice) {
		return false
	}
	if that1.AnonymizationSetting == nil {
		if this.AnonymizationSetting != nil {
			return false
		}
	} else if this.AnonymizationSetting == nil {
		return false
	} else if !this.AnonymizationSetting.Equal(that1.AnonymizationSetting) {
		return false
	}
	if that1.BlockingPageChoice == nil {
		if this.BlockingPageChoice != nil {
			return false
		}
	} else if this.BlockingPageChoice == nil {
		return false
	} else if !this.BlockingPageChoice.Equal(that1.BlockingPageChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Blocking)
	if !ok {
		that2, ok := that.(CreateSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *CreateSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Monitoring)
	if !ok {
		that2, ok := that.(CreateSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(CreateSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType_AiRiskBasedBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AiRiskBasedBlocking)
	if !ok {
		that2, ok := that.(CreateSpecType_AiRiskBasedBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AiRiskBasedBlocking.Equal(that1.AiRiskBasedBlocking) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowAllResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowAllResponseCodes)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowAllResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllResponseCodes.Equal(that1.AllowAllResponseCodes) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowedResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowedResponseCodes)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowedResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedResponseCodes.Equal(that1.AllowedResponseCodes) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableAnonymization)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAnonymization.Equal(that1.DisableAnonymization) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultAnonymization)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAnonymization.Equal(that1.DefaultAnonymization) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomAnonymization)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAnonymization.Equal(that1.CustomAnonymization) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseDefaultBlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseDefaultBlockingPage)
	if !ok {
		that2, ok := that.(CreateSpecType_UseDefaultBlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultBlockingPage.Equal(that1.UseDefaultBlockingPage) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockingPage)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockingPage.Equal(that1.BlockingPage) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	if that1.AllowedResponseCodesChoice == nil {
		if this.AllowedResponseCodesChoice != nil {
			return false
		}
	} else if this.AllowedResponseCodesChoice == nil {
		return false
	} else if !this.AllowedResponseCodesChoice.Equal(that1.AllowedResponseCodesChoice) {
		return false
	}
	if that1.AnonymizationSetting == nil {
		if this.AnonymizationSetting != nil {
			return false
		}
	} else if this.AnonymizationSetting == nil {
		return false
	} else if !this.AnonymizationSetting.Equal(that1.AnonymizationSetting) {
		return false
	}
	if that1.BlockingPageChoice == nil {
		if this.BlockingPageChoice != nil {
			return false
		}
	} else if this.BlockingPageChoice == nil {
		return false
	} else if !this.BlockingPageChoice.Equal(that1.BlockingPageChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Blocking)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Monitoring)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AiRiskBasedBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AiRiskBasedBlocking)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AiRiskBasedBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AiRiskBasedBlocking.Equal(that1.AiRiskBasedBlocking) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowAllResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowAllResponseCodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowAllResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllResponseCodes.Equal(that1.AllowAllResponseCodes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowedResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowedResponseCodes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowedResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedResponseCodes.Equal(that1.AllowedResponseCodes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableAnonymization)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAnonymization.Equal(that1.DisableAnonymization) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultAnonymization)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAnonymization.Equal(that1.DefaultAnonymization) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomAnonymization)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAnonymization.Equal(that1.CustomAnonymization) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseDefaultBlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseDefaultBlockingPage)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseDefaultBlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultBlockingPage.Equal(that1.UseDefaultBlockingPage) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockingPage)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockingPage.Equal(that1.BlockingPage) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	if that1.AllowedResponseCodesChoice == nil {
		if this.AllowedResponseCodesChoice != nil {
			return false
		}
	} else if this.AllowedResponseCodesChoice == nil {
		return false
	} else if !this.AllowedResponseCodesChoice.Equal(that1.AllowedResponseCodesChoice) {
		return false
	}
	if that1.AnonymizationSetting == nil {
		if this.AnonymizationSetting != nil {
			return false
		}
	} else if this.AnonymizationSetting == nil {
		return false
	} else if !this.AnonymizationSetting.Equal(that1.AnonymizationSetting) {
		return false
	}
	if that1.BlockingPageChoice == nil {
		if this.BlockingPageChoice != nil {
			return false
		}
	} else if this.BlockingPageChoice == nil {
		return false
	} else if !this.BlockingPageChoice.Equal(that1.BlockingPageChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(GetSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *GetSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Blocking)
	if !ok {
		that2, ok := that.(GetSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *GetSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Monitoring)
	if !ok {
		that2, ok := that.(GetSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *GetSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(GetSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *GetSpecType_AiRiskBasedBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AiRiskBasedBlocking)
	if !ok {
		that2, ok := that.(GetSpecType_AiRiskBasedBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AiRiskBasedBlocking.Equal(that1.AiRiskBasedBlocking) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *GetSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(GetSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowAllResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowAllResponseCodes)
	if !ok {
		that2, ok := that.(GetSpecType_AllowAllResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAllResponseCodes.Equal(that1.AllowAllResponseCodes) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowedResponseCodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowedResponseCodes)
	if !ok {
		that2, ok := that.(GetSpecType_AllowedResponseCodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedResponseCodes.Equal(that1.AllowedResponseCodes) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableAnonymization)
	if !ok {
		that2, ok := that.(GetSpecType_DisableAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAnonymization.Equal(that1.DisableAnonymization) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultAnonymization)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAnonymization.Equal(that1.DefaultAnonymization) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomAnonymization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomAnonymization)
	if !ok {
		that2, ok := that.(GetSpecType_CustomAnonymization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAnonymization.Equal(that1.CustomAnonymization) {
		return false
	}
	return true
}
func (this *GetSpecType_UseDefaultBlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseDefaultBlockingPage)
	if !ok {
		that2, ok := that.(GetSpecType_UseDefaultBlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultBlockingPage.Equal(that1.UseDefaultBlockingPage) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockingPage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockingPage)
	if !ok {
		that2, ok := that.(GetSpecType_BlockingPage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockingPage.Equal(that1.BlockingPage) {
		return false
	}
	return true
}
func (this *BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_firewall.BotProtectionSetting{")
	s = append(s, "MaliciousBotAction: "+fmt.Sprintf("%#v", this.MaliciousBotAction)+",\n")
	s = append(s, "SuspiciousBotAction: "+fmt.Sprintf("%#v", this.SuspiciousBotAction)+",\n")
	s = append(s, "GoodBotAction: "+fmt.Sprintf("%#v", this.GoodBotAction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AttackTypeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.AttackTypeSettings{")
	s = append(s, "DisabledAttackTypes: "+fmt.Sprintf("%#v", this.DisabledAttackTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignatureSelectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.SignatureSelectionSetting{")
	if this.SignatureSelectionByAccuracy != nil {
		s = append(s, "SignatureSelectionByAccuracy: "+fmt.Sprintf("%#v", this.SignatureSelectionByAccuracy)+",\n")
	}
	if this.AttackTypeSetting != nil {
		s = append(s, "AttackTypeSetting: "+fmt.Sprintf("%#v", this.AttackTypeSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_OnlyHighAccuracySignatures{` +
		`OnlyHighAccuracySignatures:` + fmt.Sprintf("%#v", this.OnlyHighAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_HighMediumAccuracySignatures{` +
		`HighMediumAccuracySignatures:` + fmt.Sprintf("%#v", this.HighMediumAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_HighMediumLowAccuracySignatures{` +
		`HighMediumLowAccuracySignatures:` + fmt.Sprintf("%#v", this.HighMediumLowAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_DefaultAttackTypeSettings{` +
		`DefaultAttackTypeSettings:` + fmt.Sprintf("%#v", this.DefaultAttackTypeSettings) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_AttackTypeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_AttackTypeSettings{` +
		`AttackTypeSettings:` + fmt.Sprintf("%#v", this.AttackTypeSettings) + `}`}, ", ")
	return s
}
func (this *ViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.ViolationSettings{")
	s = append(s, "DisabledViolationTypes: "+fmt.Sprintf("%#v", this.DisabledViolationTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&app_firewall.DetectionSetting{")
	if this.SignatureSelectionSetting != nil {
		s = append(s, "SignatureSelectionSetting: "+fmt.Sprintf("%#v", this.SignatureSelectionSetting)+",\n")
	}
	if this.FalsePositiveSuppression != nil {
		s = append(s, "FalsePositiveSuppression: "+fmt.Sprintf("%#v", this.FalsePositiveSuppression)+",\n")
	}
	if this.ThreatCampaignChoice != nil {
		s = append(s, "ThreatCampaignChoice: "+fmt.Sprintf("%#v", this.ThreatCampaignChoice)+",\n")
	}
	if this.ViolationDetectionSetting != nil {
		s = append(s, "ViolationDetectionSetting: "+fmt.Sprintf("%#v", this.ViolationDetectionSetting)+",\n")
	}
	if this.SignaturesStagingSettings != nil {
		s = append(s, "SignaturesStagingSettings: "+fmt.Sprintf("%#v", this.SignaturesStagingSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionSetting_EnableSuppression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnableSuppression{` +
		`EnableSuppression:` + fmt.Sprintf("%#v", this.EnableSuppression) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableSuppression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableSuppression{` +
		`DisableSuppression:` + fmt.Sprintf("%#v", this.DisableSuppression) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_EnableThreatCampaigns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnableThreatCampaigns{` +
		`EnableThreatCampaigns:` + fmt.Sprintf("%#v", this.EnableThreatCampaigns) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableThreatCampaigns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableThreatCampaigns{` +
		`DisableThreatCampaigns:` + fmt.Sprintf("%#v", this.DisableThreatCampaigns) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DefaultViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DefaultViolationSettings{` +
		`DefaultViolationSettings:` + fmt.Sprintf("%#v", this.DefaultViolationSettings) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_ViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_ViolationSettings{` +
		`ViolationSettings:` + fmt.Sprintf("%#v", this.ViolationSettings) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableStaging) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableStaging{` +
		`DisableStaging:` + fmt.Sprintf("%#v", this.DisableStaging) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_StageNewSignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_StageNewSignatures{` +
		`StageNewSignatures:` + fmt.Sprintf("%#v", this.StageNewSignatures) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_StageNewAndUpdatedSignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_StageNewAndUpdatedSignatures{` +
		`StageNewAndUpdatedSignatures:` + fmt.Sprintf("%#v", this.StageNewAndUpdatedSignatures) + `}`}, ", ")
	return s
}
func (this *SignaturesStagingSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.SignaturesStagingSettings{")
	s = append(s, "StagingPeriod: "+fmt.Sprintf("%#v", this.StagingPeriod)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllowedResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.AllowedResponseCodes{")
	s = append(s, "ResponseCode: "+fmt.Sprintf("%#v", this.ResponseCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnonymizeHttpHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.AnonymizeHttpHeader{")
	s = append(s, "HeaderName: "+fmt.Sprintf("%#v", this.HeaderName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnonymizeHttpQueryParameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.AnonymizeHttpQueryParameter{")
	s = append(s, "QueryParamName: "+fmt.Sprintf("%#v", this.QueryParamName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnonymizeHttpCookie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.AnonymizeHttpCookie{")
	s = append(s, "CookieName: "+fmt.Sprintf("%#v", this.CookieName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnonymizationConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_firewall.AnonymizationConfiguration{")
	if this.AnonymizationChoice != nil {
		s = append(s, "AnonymizationChoice: "+fmt.Sprintf("%#v", this.AnonymizationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnonymizationConfiguration_HttpHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.AnonymizationConfiguration_HttpHeader{` +
		`HttpHeader:` + fmt.Sprintf("%#v", this.HttpHeader) + `}`}, ", ")
	return s
}
func (this *AnonymizationConfiguration_QueryParameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.AnonymizationConfiguration_QueryParameter{` +
		`QueryParameter:` + fmt.Sprintf("%#v", this.QueryParameter) + `}`}, ", ")
	return s
}
func (this *AnonymizationConfiguration_Cookie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.AnonymizationConfiguration_Cookie{` +
		`Cookie:` + fmt.Sprintf("%#v", this.Cookie) + `}`}, ", ")
	return s
}
func (this *AnonymizationSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.AnonymizationSetting{")
	if this.AnonymizationConfig != nil {
		s = append(s, "AnonymizationConfig: "+fmt.Sprintf("%#v", this.AnonymizationConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomBlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_firewall.CustomBlockingPage{")
	s = append(s, "BlockingPage: "+fmt.Sprintf("%#v", this.BlockingPage)+",\n")
	s = append(s, "ResponseCode: "+fmt.Sprintf("%#v", this.ResponseCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_firewall.GlobalSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	if this.AllowedResponseCodesChoice != nil {
		s = append(s, "AllowedResponseCodesChoice: "+fmt.Sprintf("%#v", this.AllowedResponseCodesChoice)+",\n")
	}
	if this.AnonymizationSetting != nil {
		s = append(s, "AnonymizationSetting: "+fmt.Sprintf("%#v", this.AnonymizationSetting)+",\n")
	}
	if this.BlockingPageChoice != nil {
		s = append(s, "BlockingPageChoice: "+fmt.Sprintf("%#v", this.BlockingPageChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AiRiskBasedBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_AiRiskBasedBlocking{` +
		`AiRiskBasedBlocking:` + fmt.Sprintf("%#v", this.AiRiskBasedBlocking) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowAllResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_AllowAllResponseCodes{` +
		`AllowAllResponseCodes:` + fmt.Sprintf("%#v", this.AllowAllResponseCodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowedResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_AllowedResponseCodes{` +
		`AllowedResponseCodes:` + fmt.Sprintf("%#v", this.AllowedResponseCodes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DisableAnonymization{` +
		`DisableAnonymization:` + fmt.Sprintf("%#v", this.DisableAnonymization) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DefaultAnonymization{` +
		`DefaultAnonymization:` + fmt.Sprintf("%#v", this.DefaultAnonymization) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_CustomAnonymization{` +
		`CustomAnonymization:` + fmt.Sprintf("%#v", this.CustomAnonymization) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UseDefaultBlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_UseDefaultBlockingPage{` +
		`UseDefaultBlockingPage:` + fmt.Sprintf("%#v", this.UseDefaultBlockingPage) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_BlockingPage{` +
		`BlockingPage:` + fmt.Sprintf("%#v", this.BlockingPage) + `}`}, ", ")
	return s
}
func (this *AiRiskBasedBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_firewall.AiRiskBasedBlocking{")
	s = append(s, "HighRiskAction: "+fmt.Sprintf("%#v", this.HighRiskAction)+",\n")
	s = append(s, "MediumRiskAction: "+fmt.Sprintf("%#v", this.MediumRiskAction)+",\n")
	s = append(s, "LowRiskAction: "+fmt.Sprintf("%#v", this.LowRiskAction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_firewall.CreateSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	if this.AllowedResponseCodesChoice != nil {
		s = append(s, "AllowedResponseCodesChoice: "+fmt.Sprintf("%#v", this.AllowedResponseCodesChoice)+",\n")
	}
	if this.AnonymizationSetting != nil {
		s = append(s, "AnonymizationSetting: "+fmt.Sprintf("%#v", this.AnonymizationSetting)+",\n")
	}
	if this.BlockingPageChoice != nil {
		s = append(s, "BlockingPageChoice: "+fmt.Sprintf("%#v", this.BlockingPageChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AiRiskBasedBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_AiRiskBasedBlocking{` +
		`AiRiskBasedBlocking:` + fmt.Sprintf("%#v", this.AiRiskBasedBlocking) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowAllResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_AllowAllResponseCodes{` +
		`AllowAllResponseCodes:` + fmt.Sprintf("%#v", this.AllowAllResponseCodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowedResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_AllowedResponseCodes{` +
		`AllowedResponseCodes:` + fmt.Sprintf("%#v", this.AllowedResponseCodes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DisableAnonymization{` +
		`DisableAnonymization:` + fmt.Sprintf("%#v", this.DisableAnonymization) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DefaultAnonymization{` +
		`DefaultAnonymization:` + fmt.Sprintf("%#v", this.DefaultAnonymization) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_CustomAnonymization{` +
		`CustomAnonymization:` + fmt.Sprintf("%#v", this.CustomAnonymization) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UseDefaultBlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_UseDefaultBlockingPage{` +
		`UseDefaultBlockingPage:` + fmt.Sprintf("%#v", this.UseDefaultBlockingPage) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_BlockingPage{` +
		`BlockingPage:` + fmt.Sprintf("%#v", this.BlockingPage) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_firewall.ReplaceSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	if this.AllowedResponseCodesChoice != nil {
		s = append(s, "AllowedResponseCodesChoice: "+fmt.Sprintf("%#v", this.AllowedResponseCodesChoice)+",\n")
	}
	if this.AnonymizationSetting != nil {
		s = append(s, "AnonymizationSetting: "+fmt.Sprintf("%#v", this.AnonymizationSetting)+",\n")
	}
	if this.BlockingPageChoice != nil {
		s = append(s, "BlockingPageChoice: "+fmt.Sprintf("%#v", this.BlockingPageChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AiRiskBasedBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_AiRiskBasedBlocking{` +
		`AiRiskBasedBlocking:` + fmt.Sprintf("%#v", this.AiRiskBasedBlocking) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowAllResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_AllowAllResponseCodes{` +
		`AllowAllResponseCodes:` + fmt.Sprintf("%#v", this.AllowAllResponseCodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowedResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_AllowedResponseCodes{` +
		`AllowedResponseCodes:` + fmt.Sprintf("%#v", this.AllowedResponseCodes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DisableAnonymization{` +
		`DisableAnonymization:` + fmt.Sprintf("%#v", this.DisableAnonymization) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DefaultAnonymization{` +
		`DefaultAnonymization:` + fmt.Sprintf("%#v", this.DefaultAnonymization) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_CustomAnonymization{` +
		`CustomAnonymization:` + fmt.Sprintf("%#v", this.CustomAnonymization) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UseDefaultBlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_UseDefaultBlockingPage{` +
		`UseDefaultBlockingPage:` + fmt.Sprintf("%#v", this.UseDefaultBlockingPage) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_BlockingPage{` +
		`BlockingPage:` + fmt.Sprintf("%#v", this.BlockingPage) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_firewall.GetSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	if this.AllowedResponseCodesChoice != nil {
		s = append(s, "AllowedResponseCodesChoice: "+fmt.Sprintf("%#v", this.AllowedResponseCodesChoice)+",\n")
	}
	if this.AnonymizationSetting != nil {
		s = append(s, "AnonymizationSetting: "+fmt.Sprintf("%#v", this.AnonymizationSetting)+",\n")
	}
	if this.BlockingPageChoice != nil {
		s = append(s, "BlockingPageChoice: "+fmt.Sprintf("%#v", this.BlockingPageChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AiRiskBasedBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_AiRiskBasedBlocking{` +
		`AiRiskBasedBlocking:` + fmt.Sprintf("%#v", this.AiRiskBasedBlocking) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowAllResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_AllowAllResponseCodes{` +
		`AllowAllResponseCodes:` + fmt.Sprintf("%#v", this.AllowAllResponseCodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowedResponseCodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_AllowedResponseCodes{` +
		`AllowedResponseCodes:` + fmt.Sprintf("%#v", this.AllowedResponseCodes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DisableAnonymization{` +
		`DisableAnonymization:` + fmt.Sprintf("%#v", this.DisableAnonymization) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DefaultAnonymization{` +
		`DefaultAnonymization:` + fmt.Sprintf("%#v", this.DefaultAnonymization) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomAnonymization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_CustomAnonymization{` +
		`CustomAnonymization:` + fmt.Sprintf("%#v", this.CustomAnonymization) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UseDefaultBlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_UseDefaultBlockingPage{` +
		`UseDefaultBlockingPage:` + fmt.Sprintf("%#v", this.UseDefaultBlockingPage) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockingPage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_BlockingPage{` +
		`BlockingPage:` + fmt.Sprintf("%#v", this.BlockingPage) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BotProtectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GoodBotAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GoodBotAction))
		i--
		dAtA[i] = 0x18
	}
	if m.SuspiciousBotAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SuspiciousBotAction))
		i--
		dAtA[i] = 0x10
	}
	if m.MaliciousBotAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousBotAction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttackTypeSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttackTypeSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttackTypeSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisabledAttackTypes) > 0 {
		dAtA2 := make([]byte, len(m.DisabledAttackTypes)*10)
		var j1 int
		for _, num := range m.DisabledAttackTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureSelectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureSelectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttackTypeSetting != nil {
		{
			size := m.AttackTypeSetting.Size()
			i -= size
			if _, err := m.AttackTypeSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignatureSelectionByAccuracy != nil {
		{
			size := m.SignatureSelectionByAccuracy.Size()
			i -= size
			if _, err := m.SignatureSelectionByAccuracy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnlyHighAccuracySignatures != nil {
		{
			size, err := m.OnlyHighAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HighMediumAccuracySignatures != nil {
		{
			size, err := m.HighMediumAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HighMediumLowAccuracySignatures != nil {
		{
			size, err := m.HighMediumLowAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAttackTypeSettings != nil {
		{
			size, err := m.DefaultAttackTypeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_AttackTypeSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_AttackTypeSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AttackTypeSettings != nil {
		{
			size, err := m.AttackTypeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ViolationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisabledViolationTypes) > 0 {
		dAtA9 := make([]byte, len(m.DisabledViolationTypes)*10)
		var j8 int
		for _, num := range m.DisabledViolationTypes {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTypes(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignaturesStagingSettings != nil {
		{
			size := m.SignaturesStagingSettings.Size()
			i -= size
			if _, err := m.SignaturesStagingSettings.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ViolationDetectionSetting != nil {
		{
			size := m.ViolationDetectionSetting.Size()
			i -= size
			if _, err := m.ViolationDetectionSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatCampaignChoice != nil {
		{
			size := m.ThreatCampaignChoice.Size()
			i -= size
			if _, err := m.ThreatCampaignChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FalsePositiveSuppression != nil {
		{
			size := m.FalsePositiveSuppression.Size()
			i -= size
			if _, err := m.FalsePositiveSuppression.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignatureSelectionSetting != nil {
		{
			size, err := m.SignatureSelectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectionSetting_EnableSuppression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnableSuppression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableSuppression != nil {
		{
			size, err := m.EnableSuppression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableSuppression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableSuppression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSuppression != nil {
		{
			size, err := m.DisableSuppression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_EnableThreatCampaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnableThreatCampaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatCampaigns != nil {
		{
			size, err := m.EnableThreatCampaigns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableThreatCampaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableThreatCampaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatCampaigns != nil {
		{
			size, err := m.DisableThreatCampaigns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DefaultViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DefaultViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultViolationSettings != nil {
		{
			size, err := m.DefaultViolationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_ViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_ViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViolationSettings != nil {
		{
			size, err := m.ViolationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableStaging) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableStaging) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableStaging != nil {
		{
			size, err := m.DisableStaging.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_StageNewSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_StageNewSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StageNewSignatures != nil {
		{
			size, err := m.StageNewSignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_StageNewAndUpdatedSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_StageNewAndUpdatedSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StageNewAndUpdatedSignatures != nil {
		{
			size, err := m.StageNewAndUpdatedSignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SignaturesStagingSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignaturesStagingSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignaturesStagingSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StagingPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StagingPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowedResponseCodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResponseCode) > 0 {
		dAtA21 := make([]byte, len(m.ResponseCode)*10)
		var j20 int
		for _, num := range m.ResponseCode {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintTypes(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymizeHttpHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymizeHttpHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizeHttpHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeaderName) > 0 {
		i -= len(m.HeaderName)
		copy(dAtA[i:], m.HeaderName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HeaderName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymizeHttpQueryParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymizeHttpQueryParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizeHttpQueryParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryParamName) > 0 {
		i -= len(m.QueryParamName)
		copy(dAtA[i:], m.QueryParamName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.QueryParamName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymizeHttpCookie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymizeHttpCookie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizeHttpCookie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CookieName) > 0 {
		i -= len(m.CookieName)
		copy(dAtA[i:], m.CookieName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CookieName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymizationConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymizationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizationConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnonymizationChoice != nil {
		{
			size := m.AnonymizationChoice.Size()
			i -= size
			if _, err := m.AnonymizationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnonymizationConfiguration_HttpHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizationConfiguration_HttpHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHeader != nil {
		{
			size, err := m.HttpHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AnonymizationConfiguration_QueryParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizationConfiguration_QueryParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryParameter != nil {
		{
			size, err := m.QueryParameter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AnonymizationConfiguration_Cookie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizationConfiguration_Cookie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cookie != nil {
		{
			size, err := m.Cookie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AnonymizationSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymizationSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymizationSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AnonymizationConfig) > 0 {
		for iNdEx := len(m.AnonymizationConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AnonymizationConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomBlockingPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomBlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomBlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseCode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ResponseCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockingPage) > 0 {
		i -= len(m.BlockingPage)
		copy(dAtA[i:], m.BlockingPage)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BlockingPage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockingPageChoice != nil {
		{
			size := m.BlockingPageChoice.Size()
			i -= size
			if _, err := m.BlockingPageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AnonymizationSetting != nil {
		{
			size := m.AnonymizationSetting.Size()
			i -= size
			if _, err := m.AnonymizationSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedResponseCodesChoice != nil {
		{
			size := m.AllowedResponseCodesChoice.Size()
			i -= size
			if _, err := m.AllowedResponseCodesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowAllResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowAllResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllResponseCodes != nil {
		{
			size, err := m.AllowAllResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowedResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowedResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedResponseCodes != nil {
		{
			size, err := m.AllowedResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAnonymization != nil {
		{
			size, err := m.DisableAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAnonymization != nil {
		{
			size, err := m.DefaultAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomAnonymization != nil {
		{
			size, err := m.CustomAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UseDefaultBlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseDefaultBlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultBlockingPage != nil {
		{
			size, err := m.UseDefaultBlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockingPage != nil {
		{
			size, err := m.BlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AiRiskBasedBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AiRiskBasedBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AiRiskBasedBlocking != nil {
		{
			size, err := m.AiRiskBasedBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *AiRiskBasedBlocking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AiRiskBasedBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AiRiskBasedBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LowRiskAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LowRiskAction))
		i--
		dAtA[i] = 0x18
	}
	if m.MediumRiskAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MediumRiskAction))
		i--
		dAtA[i] = 0x10
	}
	if m.HighRiskAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HighRiskAction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockingPageChoice != nil {
		{
			size := m.BlockingPageChoice.Size()
			i -= size
			if _, err := m.BlockingPageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AnonymizationSetting != nil {
		{
			size := m.AnonymizationSetting.Size()
			i -= size
			if _, err := m.AnonymizationSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedResponseCodesChoice != nil {
		{
			size := m.AllowedResponseCodesChoice.Size()
			i -= size
			if _, err := m.AllowedResponseCodesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowAllResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowAllResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllResponseCodes != nil {
		{
			size, err := m.AllowAllResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowedResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowedResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedResponseCodes != nil {
		{
			size, err := m.AllowedResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAnonymization != nil {
		{
			size, err := m.DisableAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAnonymization != nil {
		{
			size, err := m.DefaultAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomAnonymization != nil {
		{
			size, err := m.CustomAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UseDefaultBlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UseDefaultBlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultBlockingPage != nil {
		{
			size, err := m.UseDefaultBlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockingPage != nil {
		{
			size, err := m.BlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AiRiskBasedBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AiRiskBasedBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AiRiskBasedBlocking != nil {
		{
			size, err := m.AiRiskBasedBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockingPageChoice != nil {
		{
			size := m.BlockingPageChoice.Size()
			i -= size
			if _, err := m.BlockingPageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AnonymizationSetting != nil {
		{
			size := m.AnonymizationSetting.Size()
			i -= size
			if _, err := m.AnonymizationSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedResponseCodesChoice != nil {
		{
			size := m.AllowedResponseCodesChoice.Size()
			i -= size
			if _, err := m.AllowedResponseCodesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowAllResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowAllResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllResponseCodes != nil {
		{
			size, err := m.AllowAllResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowedResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowedResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedResponseCodes != nil {
		{
			size, err := m.AllowedResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAnonymization != nil {
		{
			size, err := m.DisableAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAnonymization != nil {
		{
			size, err := m.DefaultAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CustomAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CustomAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomAnonymization != nil {
		{
			size, err := m.CustomAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UseDefaultBlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UseDefaultBlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultBlockingPage != nil {
		{
			size, err := m.UseDefaultBlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockingPage != nil {
		{
			size, err := m.BlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AiRiskBasedBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AiRiskBasedBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AiRiskBasedBlocking != nil {
		{
			size, err := m.AiRiskBasedBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockingPageChoice != nil {
		{
			size := m.BlockingPageChoice.Size()
			i -= size
			if _, err := m.BlockingPageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AnonymizationSetting != nil {
		{
			size := m.AnonymizationSetting.Size()
			i -= size
			if _, err := m.AnonymizationSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedResponseCodesChoice != nil {
		{
			size := m.AllowedResponseCodesChoice.Size()
			i -= size
			if _, err := m.AllowedResponseCodesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowAllResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowAllResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAllResponseCodes != nil {
		{
			size, err := m.AllowAllResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowedResponseCodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowedResponseCodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowedResponseCodes != nil {
		{
			size, err := m.AllowedResponseCodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAnonymization != nil {
		{
			size, err := m.DisableAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAnonymization != nil {
		{
			size, err := m.DefaultAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomAnonymization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomAnonymization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomAnonymization != nil {
		{
			size, err := m.CustomAnonymization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UseDefaultBlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseDefaultBlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultBlockingPage != nil {
		{
			size, err := m.UseDefaultBlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockingPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockingPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockingPage != nil {
		{
			size, err := m.BlockingPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AiRiskBasedBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AiRiskBasedBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AiRiskBasedBlocking != nil {
		{
			size, err := m.AiRiskBasedBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousBotAction != 0 {
		n += 1 + sovTypes(uint64(m.MaliciousBotAction))
	}
	if m.SuspiciousBotAction != 0 {
		n += 1 + sovTypes(uint64(m.SuspiciousBotAction))
	}
	if m.GoodBotAction != 0 {
		n += 1 + sovTypes(uint64(m.GoodBotAction))
	}
	return n
}

func (m *AttackTypeSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisabledAttackTypes) > 0 {
		l = 0
		for _, e := range m.DisabledAttackTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *SignatureSelectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureSelectionByAccuracy != nil {
		n += m.SignatureSelectionByAccuracy.Size()
	}
	if m.AttackTypeSetting != nil {
		n += m.AttackTypeSetting.Size()
	}
	return n
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnlyHighAccuracySignatures != nil {
		l = m.OnlyHighAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighMediumAccuracySignatures != nil {
		l = m.HighMediumAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighMediumLowAccuracySignatures != nil {
		l = m.HighMediumLowAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAttackTypeSettings != nil {
		l = m.DefaultAttackTypeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_AttackTypeSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttackTypeSettings != nil {
		l = m.AttackTypeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisabledViolationTypes) > 0 {
		l = 0
		for _, e := range m.DisabledViolationTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *DetectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureSelectionSetting != nil {
		l = m.SignatureSelectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FalsePositiveSuppression != nil {
		n += m.FalsePositiveSuppression.Size()
	}
	if m.ThreatCampaignChoice != nil {
		n += m.ThreatCampaignChoice.Size()
	}
	if m.ViolationDetectionSetting != nil {
		n += m.ViolationDetectionSetting.Size()
	}
	if m.SignaturesStagingSettings != nil {
		n += m.SignaturesStagingSettings.Size()
	}
	return n
}

func (m *DetectionSetting_EnableSuppression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSuppression != nil {
		l = m.EnableSuppression.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableSuppression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSuppression != nil {
		l = m.DisableSuppression.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_EnableThreatCampaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatCampaigns != nil {
		l = m.EnableThreatCampaigns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableThreatCampaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatCampaigns != nil {
		l = m.DisableThreatCampaigns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DefaultViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultViolationSettings != nil {
		l = m.DefaultViolationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_ViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViolationSettings != nil {
		l = m.ViolationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableStaging) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableStaging != nil {
		l = m.DisableStaging.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_StageNewSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageNewSignatures != nil {
		l = m.StageNewSignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_StageNewAndUpdatedSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageNewAndUpdatedSignatures != nil {
		l = m.StageNewAndUpdatedSignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignaturesStagingSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StagingPeriod != 0 {
		n += 1 + sovTypes(uint64(m.StagingPeriod))
	}
	return n
}

func (m *AllowedResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResponseCode) > 0 {
		l = 0
		for _, e := range m.ResponseCode {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *AnonymizeHttpHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AnonymizeHttpQueryParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryParamName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AnonymizeHttpCookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookieName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AnonymizationConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnonymizationChoice != nil {
		n += m.AnonymizationChoice.Size()
	}
	return n
}

func (m *AnonymizationConfiguration_HttpHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHeader != nil {
		l = m.HttpHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AnonymizationConfiguration_QueryParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryParameter != nil {
		l = m.QueryParameter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AnonymizationConfiguration_Cookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cookie != nil {
		l = m.Cookie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AnonymizationSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AnonymizationConfig) > 0 {
		for _, e := range m.AnonymizationConfig {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomBlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockingPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ResponseCode != 0 {
		n += 1 + sovTypes(uint64(m.ResponseCode))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	if m.AllowedResponseCodesChoice != nil {
		n += m.AllowedResponseCodesChoice.Size()
	}
	if m.AnonymizationSetting != nil {
		n += m.AnonymizationSetting.Size()
	}
	if m.BlockingPageChoice != nil {
		n += m.BlockingPageChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowAllResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllResponseCodes != nil {
		l = m.AllowAllResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowedResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedResponseCodes != nil {
		l = m.AllowedResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAnonymization != nil {
		l = m.DisableAnonymization.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAnonymization != nil {
		l = m.DefaultAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomAnonymization != nil {
		l = m.CustomAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UseDefaultBlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultBlockingPage != nil {
		l = m.UseDefaultBlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockingPage != nil {
		l = m.BlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AiRiskBasedBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AiRiskBasedBlocking != nil {
		l = m.AiRiskBasedBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AiRiskBasedBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighRiskAction != 0 {
		n += 1 + sovTypes(uint64(m.HighRiskAction))
	}
	if m.MediumRiskAction != 0 {
		n += 1 + sovTypes(uint64(m.MediumRiskAction))
	}
	if m.LowRiskAction != 0 {
		n += 1 + sovTypes(uint64(m.LowRiskAction))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	if m.AllowedResponseCodesChoice != nil {
		n += m.AllowedResponseCodesChoice.Size()
	}
	if m.AnonymizationSetting != nil {
		n += m.AnonymizationSetting.Size()
	}
	if m.BlockingPageChoice != nil {
		n += m.BlockingPageChoice.Size()
	}
	return n
}

func (m *CreateSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowAllResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllResponseCodes != nil {
		l = m.AllowAllResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowedResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedResponseCodes != nil {
		l = m.AllowedResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAnonymization != nil {
		l = m.DisableAnonymization.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAnonymization != nil {
		l = m.DefaultAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomAnonymization != nil {
		l = m.CustomAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UseDefaultBlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultBlockingPage != nil {
		l = m.UseDefaultBlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockingPage != nil {
		l = m.BlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AiRiskBasedBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AiRiskBasedBlocking != nil {
		l = m.AiRiskBasedBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	if m.AllowedResponseCodesChoice != nil {
		n += m.AllowedResponseCodesChoice.Size()
	}
	if m.AnonymizationSetting != nil {
		n += m.AnonymizationSetting.Size()
	}
	if m.BlockingPageChoice != nil {
		n += m.BlockingPageChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowAllResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllResponseCodes != nil {
		l = m.AllowAllResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowedResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedResponseCodes != nil {
		l = m.AllowedResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAnonymization != nil {
		l = m.DisableAnonymization.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAnonymization != nil {
		l = m.DefaultAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomAnonymization != nil {
		l = m.CustomAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UseDefaultBlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultBlockingPage != nil {
		l = m.UseDefaultBlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockingPage != nil {
		l = m.BlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AiRiskBasedBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AiRiskBasedBlocking != nil {
		l = m.AiRiskBasedBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	if m.AllowedResponseCodesChoice != nil {
		n += m.AllowedResponseCodesChoice.Size()
	}
	if m.AnonymizationSetting != nil {
		n += m.AnonymizationSetting.Size()
	}
	if m.BlockingPageChoice != nil {
		n += m.BlockingPageChoice.Size()
	}
	return n
}

func (m *GetSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowAllResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAllResponseCodes != nil {
		l = m.AllowAllResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowedResponseCodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedResponseCodes != nil {
		l = m.AllowedResponseCodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAnonymization != nil {
		l = m.DisableAnonymization.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAnonymization != nil {
		l = m.DefaultAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomAnonymization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomAnonymization != nil {
		l = m.CustomAnonymization.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UseDefaultBlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultBlockingPage != nil {
		l = m.UseDefaultBlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockingPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockingPage != nil {
		l = m.BlockingPage.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AiRiskBasedBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AiRiskBasedBlocking != nil {
		l = m.AiRiskBasedBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotProtectionSetting{`,
		`MaliciousBotAction:` + fmt.Sprintf("%v", this.MaliciousBotAction) + `,`,
		`SuspiciousBotAction:` + fmt.Sprintf("%v", this.SuspiciousBotAction) + `,`,
		`GoodBotAction:` + fmt.Sprintf("%v", this.GoodBotAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttackTypeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttackTypeSettings{`,
		`DisabledAttackTypes:` + fmt.Sprintf("%v", this.DisabledAttackTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting{`,
		`SignatureSelectionByAccuracy:` + fmt.Sprintf("%v", this.SignatureSelectionByAccuracy) + `,`,
		`AttackTypeSetting:` + fmt.Sprintf("%v", this.AttackTypeSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_OnlyHighAccuracySignatures{`,
		`OnlyHighAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.OnlyHighAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_HighMediumAccuracySignatures{`,
		`HighMediumAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.HighMediumAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_HighMediumLowAccuracySignatures{`,
		`HighMediumLowAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.HighMediumLowAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_DefaultAttackTypeSettings{`,
		`DefaultAttackTypeSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAttackTypeSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_AttackTypeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_AttackTypeSettings{`,
		`AttackTypeSettings:` + strings.Replace(fmt.Sprintf("%v", this.AttackTypeSettings), "AttackTypeSettings", "AttackTypeSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSettings{`,
		`DisabledViolationTypes:` + fmt.Sprintf("%v", this.DisabledViolationTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting{`,
		`SignatureSelectionSetting:` + strings.Replace(this.SignatureSelectionSetting.String(), "SignatureSelectionSetting", "SignatureSelectionSetting", 1) + `,`,
		`FalsePositiveSuppression:` + fmt.Sprintf("%v", this.FalsePositiveSuppression) + `,`,
		`ThreatCampaignChoice:` + fmt.Sprintf("%v", this.ThreatCampaignChoice) + `,`,
		`ViolationDetectionSetting:` + fmt.Sprintf("%v", this.ViolationDetectionSetting) + `,`,
		`SignaturesStagingSettings:` + fmt.Sprintf("%v", this.SignaturesStagingSettings) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnableSuppression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnableSuppression{`,
		`EnableSuppression:` + strings.Replace(fmt.Sprintf("%v", this.EnableSuppression), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableSuppression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableSuppression{`,
		`DisableSuppression:` + strings.Replace(fmt.Sprintf("%v", this.DisableSuppression), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnableThreatCampaigns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnableThreatCampaigns{`,
		`EnableThreatCampaigns:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatCampaigns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableThreatCampaigns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableThreatCampaigns{`,
		`DisableThreatCampaigns:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatCampaigns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DefaultViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DefaultViolationSettings{`,
		`DefaultViolationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultViolationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_ViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_ViolationSettings{`,
		`ViolationSettings:` + strings.Replace(fmt.Sprintf("%v", this.ViolationSettings), "ViolationSettings", "ViolationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableStaging) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableStaging{`,
		`DisableStaging:` + strings.Replace(fmt.Sprintf("%v", this.DisableStaging), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_StageNewSignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_StageNewSignatures{`,
		`StageNewSignatures:` + strings.Replace(fmt.Sprintf("%v", this.StageNewSignatures), "SignaturesStagingSettings", "SignaturesStagingSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_StageNewAndUpdatedSignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_StageNewAndUpdatedSignatures{`,
		`StageNewAndUpdatedSignatures:` + strings.Replace(fmt.Sprintf("%v", this.StageNewAndUpdatedSignatures), "SignaturesStagingSettings", "SignaturesStagingSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignaturesStagingSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignaturesStagingSettings{`,
		`StagingPeriod:` + fmt.Sprintf("%v", this.StagingPeriod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedResponseCodes{`,
		`ResponseCode:` + fmt.Sprintf("%v", this.ResponseCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizeHttpHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizeHttpHeader{`,
		`HeaderName:` + fmt.Sprintf("%v", this.HeaderName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizeHttpQueryParameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizeHttpQueryParameter{`,
		`QueryParamName:` + fmt.Sprintf("%v", this.QueryParamName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizeHttpCookie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizeHttpCookie{`,
		`CookieName:` + fmt.Sprintf("%v", this.CookieName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizationConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizationConfiguration{`,
		`AnonymizationChoice:` + fmt.Sprintf("%v", this.AnonymizationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizationConfiguration_HttpHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizationConfiguration_HttpHeader{`,
		`HttpHeader:` + strings.Replace(fmt.Sprintf("%v", this.HttpHeader), "AnonymizeHttpHeader", "AnonymizeHttpHeader", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizationConfiguration_QueryParameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizationConfiguration_QueryParameter{`,
		`QueryParameter:` + strings.Replace(fmt.Sprintf("%v", this.QueryParameter), "AnonymizeHttpQueryParameter", "AnonymizeHttpQueryParameter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizationConfiguration_Cookie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnonymizationConfiguration_Cookie{`,
		`Cookie:` + strings.Replace(fmt.Sprintf("%v", this.Cookie), "AnonymizeHttpCookie", "AnonymizeHttpCookie", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnonymizationSetting) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAnonymizationConfig := "[]*AnonymizationConfiguration{"
	for _, f := range this.AnonymizationConfig {
		repeatedStringForAnonymizationConfig += strings.Replace(f.String(), "AnonymizationConfiguration", "AnonymizationConfiguration", 1) + ","
	}
	repeatedStringForAnonymizationConfig += "}"
	s := strings.Join([]string{`&AnonymizationSetting{`,
		`AnonymizationConfig:` + repeatedStringForAnonymizationConfig + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomBlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomBlockingPage{`,
		`BlockingPage:` + fmt.Sprintf("%v", this.BlockingPage) + `,`,
		`ResponseCode:` + fmt.Sprintf("%v", this.ResponseCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`AllowedResponseCodesChoice:` + fmt.Sprintf("%v", this.AllowedResponseCodesChoice) + `,`,
		`AnonymizationSetting:` + fmt.Sprintf("%v", this.AnonymizationSetting) + `,`,
		`BlockingPageChoice:` + fmt.Sprintf("%v", this.BlockingPageChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowAllResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowAllResponseCodes{`,
		`AllowAllResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllResponseCodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowedResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowedResponseCodes{`,
		`AllowedResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowedResponseCodes), "AllowedResponseCodes", "AllowedResponseCodes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableAnonymization{`,
		`DisableAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DisableAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultAnonymization{`,
		`DefaultAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomAnonymization{`,
		`CustomAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.CustomAnonymization), "AnonymizationSetting", "AnonymizationSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseDefaultBlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseDefaultBlockingPage{`,
		`UseDefaultBlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultBlockingPage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockingPage{`,
		`BlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.BlockingPage), "CustomBlockingPage", "CustomBlockingPage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AiRiskBasedBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AiRiskBasedBlocking{`,
		`AiRiskBasedBlocking:` + strings.Replace(fmt.Sprintf("%v", this.AiRiskBasedBlocking), "AiRiskBasedBlocking", "AiRiskBasedBlocking", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AiRiskBasedBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AiRiskBasedBlocking{`,
		`HighRiskAction:` + fmt.Sprintf("%v", this.HighRiskAction) + `,`,
		`MediumRiskAction:` + fmt.Sprintf("%v", this.MediumRiskAction) + `,`,
		`LowRiskAction:` + fmt.Sprintf("%v", this.LowRiskAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`AllowedResponseCodesChoice:` + fmt.Sprintf("%v", this.AllowedResponseCodesChoice) + `,`,
		`AnonymizationSetting:` + fmt.Sprintf("%v", this.AnonymizationSetting) + `,`,
		`BlockingPageChoice:` + fmt.Sprintf("%v", this.BlockingPageChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowAllResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowAllResponseCodes{`,
		`AllowAllResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllResponseCodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowedResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowedResponseCodes{`,
		`AllowedResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowedResponseCodes), "AllowedResponseCodes", "AllowedResponseCodes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableAnonymization{`,
		`DisableAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DisableAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultAnonymization{`,
		`DefaultAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomAnonymization{`,
		`CustomAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.CustomAnonymization), "AnonymizationSetting", "AnonymizationSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseDefaultBlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseDefaultBlockingPage{`,
		`UseDefaultBlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultBlockingPage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockingPage{`,
		`BlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.BlockingPage), "CustomBlockingPage", "CustomBlockingPage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AiRiskBasedBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AiRiskBasedBlocking{`,
		`AiRiskBasedBlocking:` + strings.Replace(fmt.Sprintf("%v", this.AiRiskBasedBlocking), "AiRiskBasedBlocking", "AiRiskBasedBlocking", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`AllowedResponseCodesChoice:` + fmt.Sprintf("%v", this.AllowedResponseCodesChoice) + `,`,
		`AnonymizationSetting:` + fmt.Sprintf("%v", this.AnonymizationSetting) + `,`,
		`BlockingPageChoice:` + fmt.Sprintf("%v", this.BlockingPageChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowAllResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowAllResponseCodes{`,
		`AllowAllResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllResponseCodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowedResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowedResponseCodes{`,
		`AllowedResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowedResponseCodes), "AllowedResponseCodes", "AllowedResponseCodes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableAnonymization{`,
		`DisableAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DisableAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultAnonymization{`,
		`DefaultAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomAnonymization{`,
		`CustomAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.CustomAnonymization), "AnonymizationSetting", "AnonymizationSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseDefaultBlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseDefaultBlockingPage{`,
		`UseDefaultBlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultBlockingPage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockingPage{`,
		`BlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.BlockingPage), "CustomBlockingPage", "CustomBlockingPage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AiRiskBasedBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AiRiskBasedBlocking{`,
		`AiRiskBasedBlocking:` + strings.Replace(fmt.Sprintf("%v", this.AiRiskBasedBlocking), "AiRiskBasedBlocking", "AiRiskBasedBlocking", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`AllowedResponseCodesChoice:` + fmt.Sprintf("%v", this.AllowedResponseCodesChoice) + `,`,
		`AnonymizationSetting:` + fmt.Sprintf("%v", this.AnonymizationSetting) + `,`,
		`BlockingPageChoice:` + fmt.Sprintf("%v", this.BlockingPageChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowAllResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowAllResponseCodes{`,
		`AllowAllResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowAllResponseCodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowedResponseCodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowedResponseCodes{`,
		`AllowedResponseCodes:` + strings.Replace(fmt.Sprintf("%v", this.AllowedResponseCodes), "AllowedResponseCodes", "AllowedResponseCodes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableAnonymization{`,
		`DisableAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DisableAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultAnonymization{`,
		`DefaultAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAnonymization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomAnonymization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomAnonymization{`,
		`CustomAnonymization:` + strings.Replace(fmt.Sprintf("%v", this.CustomAnonymization), "AnonymizationSetting", "AnonymizationSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseDefaultBlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseDefaultBlockingPage{`,
		`UseDefaultBlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultBlockingPage), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockingPage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockingPage{`,
		`BlockingPage:` + strings.Replace(fmt.Sprintf("%v", this.BlockingPage), "CustomBlockingPage", "CustomBlockingPage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AiRiskBasedBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AiRiskBasedBlocking{`,
		`AiRiskBasedBlocking:` + strings.Replace(fmt.Sprintf("%v", this.AiRiskBasedBlocking), "AiRiskBasedBlocking", "AiRiskBasedBlocking", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BotProtectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotProtectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotProtectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousBotAction", wireType)
			}
			m.MaliciousBotAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaliciousBotAction |= BotAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspiciousBotAction", wireType)
			}
			m.SuspiciousBotAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuspiciousBotAction |= BotAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodBotAction", wireType)
			}
			m.GoodBotAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodBotAction |= BotAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttackTypeSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttackTypeSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttackTypeSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v AttackType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AttackType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DisabledAttackTypes = append(m.DisabledAttackTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DisabledAttackTypes) == 0 {
					m.DisabledAttackTypes = make([]AttackType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AttackType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AttackType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DisabledAttackTypes = append(m.DisabledAttackTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledAttackTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureSelectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureSelectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureSelectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyHighAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_OnlyHighAccuracySignatures{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighMediumAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_HighMediumAccuracySignatures{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighMediumLowAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_HighMediumLowAccuracySignatures{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAttackTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttackTypeSetting = &SignatureSelectionSetting_DefaultAttackTypeSettings{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AttackTypeSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttackTypeSetting = &SignatureSelectionSetting_AttackTypeSettings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViolationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViolationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViolationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v AppFirewallViolationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AppFirewallViolationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DisabledViolationTypes = append(m.DisabledViolationTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DisabledViolationTypes) == 0 {
					m.DisabledViolationTypes = make([]AppFirewallViolationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AppFirewallViolationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AppFirewallViolationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DisabledViolationTypes = append(m.DisabledViolationTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledViolationTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureSelectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureSelectionSetting == nil {
				m.SignatureSelectionSetting = &SignatureSelectionSetting{}
			}
			if err := m.SignatureSelectionSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSuppression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FalsePositiveSuppression = &DetectionSetting_EnableSuppression{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSuppression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FalsePositiveSuppression = &DetectionSetting_DisableSuppression{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatCampaignChoice = &DetectionSetting_EnableThreatCampaigns{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatCampaignChoice = &DetectionSetting_DisableThreatCampaigns{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultViolationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ViolationDetectionSetting = &DetectionSetting_DefaultViolationSettings{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViolationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViolationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ViolationDetectionSetting = &DetectionSetting_ViolationSettings{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableStaging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignaturesStagingSettings = &DetectionSetting_DisableStaging{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageNewSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignaturesStagingSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignaturesStagingSettings = &DetectionSetting_StageNewSignatures{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageNewAndUpdatedSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignaturesStagingSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignaturesStagingSettings = &DetectionSetting_StageNewAndUpdatedSignatures{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignaturesStagingSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignaturesStagingSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignaturesStagingSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StagingPeriod", wireType)
			}
			m.StagingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StagingPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowedResponseCodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedResponseCodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedResponseCodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResponseCode = append(m.ResponseCode, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ResponseCode) == 0 {
					m.ResponseCode = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResponseCode = append(m.ResponseCode, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymizeHttpHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymizeHttpHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymizeHttpHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymizeHttpQueryParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymizeHttpQueryParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymizeHttpQueryParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryParamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymizeHttpCookie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymizeHttpCookie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymizeHttpCookie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookieName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymizationConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymizationConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymizationConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizeHttpHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationChoice = &AnonymizationConfiguration_HttpHeader{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParameter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizeHttpQueryParameter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationChoice = &AnonymizationConfiguration_QueryParameter{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizeHttpCookie{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationChoice = &AnonymizationConfiguration_Cookie{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymizationSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymizationSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymizationSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonymizationConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnonymizationConfig = append(m.AnonymizationConfig, &AnonymizationConfiguration{})
			if err := m.AnonymizationConfig[len(m.AnonymizationConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomBlockingPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomBlockingPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomBlockingPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockingPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			m.ResponseCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseCode |= schema.HttpStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GlobalSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GlobalSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &GlobalSpecType_AllowAllResponseCodes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllowedResponseCodes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &GlobalSpecType_AllowedResponseCodes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &GlobalSpecType_DisableAnonymization{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &GlobalSpecType_DefaultAnonymization{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizationSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &GlobalSpecType_CustomAnonymization{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultBlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &GlobalSpecType_UseDefaultBlockingPage{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomBlockingPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &GlobalSpecType_BlockingPage{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRiskBasedBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AiRiskBasedBlocking{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_AiRiskBasedBlocking{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AiRiskBasedBlocking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AiRiskBasedBlocking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AiRiskBasedBlocking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighRiskAction", wireType)
			}
			m.HighRiskAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighRiskAction |= RiskBasedBlockingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumRiskAction", wireType)
			}
			m.MediumRiskAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediumRiskAction |= RiskBasedBlockingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowRiskAction", wireType)
			}
			m.LowRiskAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowRiskAction |= RiskBasedBlockingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &CreateSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &CreateSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &CreateSpecType_AllowAllResponseCodes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllowedResponseCodes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &CreateSpecType_AllowedResponseCodes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &CreateSpecType_DisableAnonymization{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &CreateSpecType_DefaultAnonymization{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizationSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &CreateSpecType_CustomAnonymization{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultBlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &CreateSpecType_UseDefaultBlockingPage{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomBlockingPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &CreateSpecType_BlockingPage{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRiskBasedBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AiRiskBasedBlocking{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_AiRiskBasedBlocking{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &ReplaceSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &ReplaceSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &ReplaceSpecType_AllowAllResponseCodes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllowedResponseCodes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &ReplaceSpecType_AllowedResponseCodes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &ReplaceSpecType_DisableAnonymization{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &ReplaceSpecType_DefaultAnonymization{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizationSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &ReplaceSpecType_CustomAnonymization{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultBlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &ReplaceSpecType_UseDefaultBlockingPage{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomBlockingPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &ReplaceSpecType_BlockingPage{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRiskBasedBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AiRiskBasedBlocking{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_AiRiskBasedBlocking{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GetSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GetSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAllResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &GetSpecType_AllowAllResponseCodes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedResponseCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllowedResponseCodes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AllowedResponseCodesChoice = &GetSpecType_AllowedResponseCodes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &GetSpecType_DisableAnonymization{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &GetSpecType_DefaultAnonymization{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAnonymization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymizationSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AnonymizationSetting = &GetSpecType_CustomAnonymization{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultBlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &GetSpecType_UseDefaultBlockingPage{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomBlockingPage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockingPageChoice = &GetSpecType_BlockingPage{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRiskBasedBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AiRiskBasedBlocking{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_AiRiskBasedBlocking{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

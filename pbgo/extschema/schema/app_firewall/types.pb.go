// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_firewall/types.proto

package app_firewall

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AttackType
//
// x-displayName: "Attack Type"
// List of all Attack Types
type AttackType int32

const (
	// x-displayName: "None"
	ATTACK_TYPE_NONE AttackType = 0
	// x-displayName: "Non-Browser Client"
	ATTACK_TYPE_NON_BROWSER_CLIENT AttackType = 1
	// x-displayName: "Other Application Attacks"
	ATTACK_TYPE_OTHER_APPLICATION_ATTACKS AttackType = 2
	// x-displayName: "Trojan Backdoor Spyware"
	ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE AttackType = 3
	// x-displayName: "Detection Evasion"
	ATTACK_TYPE_DETECTION_EVASION AttackType = 4
	// x-displayName: "Vulnerability Scan"
	ATTACK_TYPE_VULNERABILITY_SCAN AttackType = 5
	// x-displayName: "Abuse of Functionality"
	ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY AttackType = 6
	// x-displayName: "Authentication Authorization Atutacks"
	ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS AttackType = 7
	// x-displayName: "Buffer Overflow"
	ATTACK_TYPE_BUFFER_OVERFLOW AttackType = 8
	// x-displayName: "Predictable Resource Location"
	ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION AttackType = 9
	// x-displayName: "Information Leakage"
	ATTACK_TYPE_INFORMATION_LEAKAGE AttackType = 10
	// x-displayName: "Directory Indexing"
	ATTACK_TYPE_DIRECTORY_INDEXING AttackType = 11
	// x-displayName: "Path Traversal"
	ATTACK_TYPE_PATH_TRAVERSAL AttackType = 12
	// x-displayName: "XPath Injection"
	ATTACK_TYPE_XPATH_INJECTION AttackType = 13
	// x-displayName: "LDAP Injection"
	ATTACK_TYPE_LDAP_INJECTION AttackType = 14
	// x-displayName: "Server-Side Code Injection"
	ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION AttackType = 15
	// x-displayName: "Command Execution"
	ATTACK_TYPE_COMMAND_EXECUTION AttackType = 16
	// x-displayName: "SQL Injection"
	ATTACK_TYPE_SQL_INJECTION AttackType = 17
	// x-displayName: "Cross-Site Scripting"
	ATTACK_TYPE_CROSS_SITE_SCRIPTING AttackType = 18
	// x-displayName: "Denial of Service"
	ATTACK_TYPE_DENIAL_OF_SERVICE AttackType = 19
	// x-displayName: "HTTP Parser Attack"
	ATTACK_TYPE_HTTP_PARSER_ATTACK AttackType = 20
	// x-displayName: "Session Hijacking"
	ATTACK_TYPE_SESSION_HIJACKING AttackType = 21
	// x-displayName: "HTTP Response Splitting"
	ATTACK_TYPE_HTTP_RESPONSE_SPLITTING AttackType = 22
)

var AttackType_name = map[int32]string{
	0:  "ATTACK_TYPE_NONE",
	1:  "ATTACK_TYPE_NON_BROWSER_CLIENT",
	2:  "ATTACK_TYPE_OTHER_APPLICATION_ATTACKS",
	3:  "ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE",
	4:  "ATTACK_TYPE_DETECTION_EVASION",
	5:  "ATTACK_TYPE_VULNERABILITY_SCAN",
	6:  "ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY",
	7:  "ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS",
	8:  "ATTACK_TYPE_BUFFER_OVERFLOW",
	9:  "ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION",
	10: "ATTACK_TYPE_INFORMATION_LEAKAGE",
	11: "ATTACK_TYPE_DIRECTORY_INDEXING",
	12: "ATTACK_TYPE_PATH_TRAVERSAL",
	13: "ATTACK_TYPE_XPATH_INJECTION",
	14: "ATTACK_TYPE_LDAP_INJECTION",
	15: "ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION",
	16: "ATTACK_TYPE_COMMAND_EXECUTION",
	17: "ATTACK_TYPE_SQL_INJECTION",
	18: "ATTACK_TYPE_CROSS_SITE_SCRIPTING",
	19: "ATTACK_TYPE_DENIAL_OF_SERVICE",
	20: "ATTACK_TYPE_HTTP_PARSER_ATTACK",
	21: "ATTACK_TYPE_SESSION_HIJACKING",
	22: "ATTACK_TYPE_HTTP_RESPONSE_SPLITTING",
}

var AttackType_value = map[string]int32{
	"ATTACK_TYPE_NONE":                                 0,
	"ATTACK_TYPE_NON_BROWSER_CLIENT":                   1,
	"ATTACK_TYPE_OTHER_APPLICATION_ATTACKS":            2,
	"ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE":              3,
	"ATTACK_TYPE_DETECTION_EVASION":                    4,
	"ATTACK_TYPE_VULNERABILITY_SCAN":                   5,
	"ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY":               6,
	"ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS": 7,
	"ATTACK_TYPE_BUFFER_OVERFLOW":                      8,
	"ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION":        9,
	"ATTACK_TYPE_INFORMATION_LEAKAGE":                  10,
	"ATTACK_TYPE_DIRECTORY_INDEXING":                   11,
	"ATTACK_TYPE_PATH_TRAVERSAL":                       12,
	"ATTACK_TYPE_XPATH_INJECTION":                      13,
	"ATTACK_TYPE_LDAP_INJECTION":                       14,
	"ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION":           15,
	"ATTACK_TYPE_COMMAND_EXECUTION":                    16,
	"ATTACK_TYPE_SQL_INJECTION":                        17,
	"ATTACK_TYPE_CROSS_SITE_SCRIPTING":                 18,
	"ATTACK_TYPE_DENIAL_OF_SERVICE":                    19,
	"ATTACK_TYPE_HTTP_PARSER_ATTACK":                   20,
	"ATTACK_TYPE_SESSION_HIJACKING":                    21,
	"ATTACK_TYPE_HTTP_RESPONSE_SPLITTING":              22,
}

func (AttackType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{0}
}

// Bot Action
//
// x-displayName: "Bot Action"
// Action to be performed on the request
type BotAction int32

const (
	// x-displayName: "Block"
	BLOCK BotAction = 0
	// x-displayName: "Report"
	REPORT BotAction = 1
	// x-displayName: "Ignore"
	IGNORE BotAction = 2
)

var BotAction_name = map[int32]string{
	0: "BLOCK",
	1: "REPORT",
	2: "IGNORE",
}

var BotAction_value = map[string]int32{
	"BLOCK":  0,
	"REPORT": 1,
	"IGNORE": 2,
}

func (BotAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{1}
}

// BotProtectionSetting
//
// x-displayName: "Bot Protection"
// Configuration of WAF Bot Protection
type BotProtectionSetting struct {
	// malicious_bot_action
	//
	// x-displayName: "Malicious Bot Action"
	// Action to be taken when a malicious bot agent is detected
	MaliciousBotAction BotAction `protobuf:"varint,1,opt,name=malicious_bot_action,json=maliciousBotAction,proto3,enum=ves.io.schema.app_firewall.BotAction" json:"malicious_bot_action,omitempty"`
	// suspicious_bot_action
	//
	// x-displayName: "Suspicious Bot Action"
	// Action to be taken when a suspicious bot agent is detected
	SuspiciousBotAction BotAction `protobuf:"varint,2,opt,name=suspicious_bot_action,json=suspiciousBotAction,proto3,enum=ves.io.schema.app_firewall.BotAction" json:"suspicious_bot_action,omitempty"`
	// good_bot_action
	//
	// x-displayName: "Good Bot Action"
	// Action to be taken when a good (benign) bot agent is detected
	GoodBotAction BotAction `protobuf:"varint,3,opt,name=good_bot_action,json=goodBotAction,proto3,enum=ves.io.schema.app_firewall.BotAction" json:"good_bot_action,omitempty"`
}

func (m *BotProtectionSetting) Reset()      { *m = BotProtectionSetting{} }
func (*BotProtectionSetting) ProtoMessage() {}
func (*BotProtectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{0}
}
func (m *BotProtectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotProtectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotProtectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotProtectionSetting.Merge(m, src)
}
func (m *BotProtectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *BotProtectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BotProtectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BotProtectionSetting proto.InternalMessageInfo

func (m *BotProtectionSetting) GetMaliciousBotAction() BotAction {
	if m != nil {
		return m.MaliciousBotAction
	}
	return BLOCK
}

func (m *BotProtectionSetting) GetSuspiciousBotAction() BotAction {
	if m != nil {
		return m.SuspiciousBotAction
	}
	return BLOCK
}

func (m *BotProtectionSetting) GetGoodBotAction() BotAction {
	if m != nil {
		return m.GoodBotAction
	}
	return BLOCK
}

// Enabled Attack Types
//
// x-displayName: "Enabled Attack Types"
// This list specifies which attack types are to be excluded from detection
type EnabledAttackTypes struct {
	// Enabled Attack Types
	//
	// x-displayName: "Enabled Attack Types"
	// x-required
	// This list specifies which attack types are to be excluded from detection
	EnabledAttackTypes []AttackType `protobuf:"varint,1,rep,packed,name=enabled_attack_types,json=enabledAttackTypes,proto3,enum=ves.io.schema.app_firewall.AttackType" json:"enabled_attack_types,omitempty"`
}

func (m *EnabledAttackTypes) Reset()      { *m = EnabledAttackTypes{} }
func (*EnabledAttackTypes) ProtoMessage() {}
func (*EnabledAttackTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{1}
}
func (m *EnabledAttackTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnabledAttackTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnabledAttackTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledAttackTypes.Merge(m, src)
}
func (m *EnabledAttackTypes) XXX_Size() int {
	return m.Size()
}
func (m *EnabledAttackTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledAttackTypes.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledAttackTypes proto.InternalMessageInfo

func (m *EnabledAttackTypes) GetEnabledAttackTypes() []AttackType {
	if m != nil {
		return m.EnabledAttackTypes
	}
	return nil
}

// Signature Selection Setting
//
// x-displayName: "Signature Selection Setting"
// Specifies signature settings to be used by WAF
type SignatureSelectionSetting struct {
	// Signature selection by accuracy
	//
	// x-displayName: "Signature Selection By Accuracy"
	// x-required
	// Specify the signatures to be selected by accuracy
	//
	// Types that are valid to be assigned to SignatureSelectionByAccuracy:
	//	*SignatureSelectionSetting_OnlyHighAccuracySignatures
	//	*SignatureSelectionSetting_HighMediumAccuracySignatures
	//	*SignatureSelectionSetting_HighMediumLowAccuracySignatures
	SignatureSelectionByAccuracy isSignatureSelectionSetting_SignatureSelectionByAccuracy `protobuf_oneof:"signature_selection_by_accuracy"`
	// Attack Types
	//
	// x-displayName: "Attack Types"
	// x-required
	// Specifies which attack types are to be enabled for detection
	//
	// Types that are valid to be assigned to AttackTypeSetting:
	//	*SignatureSelectionSetting_DefaultAttackTypeSettings
	//	*SignatureSelectionSetting_EnabledAttackTypes
	AttackTypeSetting isSignatureSelectionSetting_AttackTypeSetting `protobuf_oneof:"attack_type_setting"`
}

func (m *SignatureSelectionSetting) Reset()      { *m = SignatureSelectionSetting{} }
func (*SignatureSelectionSetting) ProtoMessage() {}
func (*SignatureSelectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{2}
}
func (m *SignatureSelectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureSelectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignatureSelectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureSelectionSetting.Merge(m, src)
}
func (m *SignatureSelectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *SignatureSelectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureSelectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureSelectionSetting proto.InternalMessageInfo

type isSignatureSelectionSetting_SignatureSelectionByAccuracy interface {
	isSignatureSelectionSetting_SignatureSelectionByAccuracy()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSignatureSelectionSetting_AttackTypeSetting interface {
	isSignatureSelectionSetting_AttackTypeSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SignatureSelectionSetting_OnlyHighAccuracySignatures struct {
	OnlyHighAccuracySignatures *schema.Empty `protobuf:"bytes,2,opt,name=only_high_accuracy_signatures,json=onlyHighAccuracySignatures,proto3,oneof" json:"only_high_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_HighMediumAccuracySignatures struct {
	HighMediumAccuracySignatures *schema.Empty `protobuf:"bytes,3,opt,name=high_medium_accuracy_signatures,json=highMediumAccuracySignatures,proto3,oneof" json:"high_medium_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_HighMediumLowAccuracySignatures struct {
	HighMediumLowAccuracySignatures *schema.Empty `protobuf:"bytes,4,opt,name=high_medium_low_accuracy_signatures,json=highMediumLowAccuracySignatures,proto3,oneof" json:"high_medium_low_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_DefaultAttackTypeSettings struct {
	DefaultAttackTypeSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_attack_type_settings,json=defaultAttackTypeSettings,proto3,oneof" json:"default_attack_type_settings,omitempty"`
}
type SignatureSelectionSetting_EnabledAttackTypes struct {
	EnabledAttackTypes *EnabledAttackTypes `protobuf:"bytes,7,opt,name=enabled_attack_types,json=enabledAttackTypes,proto3,oneof" json:"enabled_attack_types,omitempty"`
}

func (*SignatureSelectionSetting_OnlyHighAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_HighMediumAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_HighMediumLowAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_DefaultAttackTypeSettings) isSignatureSelectionSetting_AttackTypeSetting() {
}
func (*SignatureSelectionSetting_EnabledAttackTypes) isSignatureSelectionSetting_AttackTypeSetting() {
}

func (m *SignatureSelectionSetting) GetSignatureSelectionByAccuracy() isSignatureSelectionSetting_SignatureSelectionByAccuracy {
	if m != nil {
		return m.SignatureSelectionByAccuracy
	}
	return nil
}
func (m *SignatureSelectionSetting) GetAttackTypeSetting() isSignatureSelectionSetting_AttackTypeSetting {
	if m != nil {
		return m.AttackTypeSetting
	}
	return nil
}

func (m *SignatureSelectionSetting) GetOnlyHighAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_OnlyHighAccuracySignatures); ok {
		return x.OnlyHighAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetHighMediumAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_HighMediumAccuracySignatures); ok {
		return x.HighMediumAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetHighMediumLowAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_HighMediumLowAccuracySignatures); ok {
		return x.HighMediumLowAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetDefaultAttackTypeSettings() *schema.Empty {
	if x, ok := m.GetAttackTypeSetting().(*SignatureSelectionSetting_DefaultAttackTypeSettings); ok {
		return x.DefaultAttackTypeSettings
	}
	return nil
}

func (m *SignatureSelectionSetting) GetEnabledAttackTypes() *EnabledAttackTypes {
	if x, ok := m.GetAttackTypeSetting().(*SignatureSelectionSetting_EnabledAttackTypes); ok {
		return x.EnabledAttackTypes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignatureSelectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignatureSelectionSetting_OnlyHighAccuracySignatures)(nil),
		(*SignatureSelectionSetting_HighMediumAccuracySignatures)(nil),
		(*SignatureSelectionSetting_HighMediumLowAccuracySignatures)(nil),
		(*SignatureSelectionSetting_DefaultAttackTypeSettings)(nil),
		(*SignatureSelectionSetting_EnabledAttackTypes)(nil),
	}
}

// Violation Setting
//
// x-displayName: "Violation Setting"
// Specifies violation settings to be used by WAF
type ViolationSetting struct {
	// Enable Violations
	//
	// x-displayName: "Enable Violations for Detection"
	// x-required
	// List of violations to be detected
	EnabledViolationTypes []schema.AppFirewallViolationType `protobuf:"varint,1,rep,packed,name=enabled_violation_types,json=enabledViolationTypes,proto3,enum=ves.io.schema.AppFirewallViolationType" json:"enabled_violation_types,omitempty"`
}

func (m *ViolationSetting) Reset()      { *m = ViolationSetting{} }
func (*ViolationSetting) ProtoMessage() {}
func (*ViolationSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{3}
}
func (m *ViolationSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViolationSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ViolationSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViolationSetting.Merge(m, src)
}
func (m *ViolationSetting) XXX_Size() int {
	return m.Size()
}
func (m *ViolationSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ViolationSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ViolationSetting proto.InternalMessageInfo

func (m *ViolationSetting) GetEnabledViolationTypes() []schema.AppFirewallViolationType {
	if m != nil {
		return m.EnabledViolationTypes
	}
	return nil
}

// Detection Setting
//
// x-displayName: "Detection Setting"
// Specifies detection settings to be used by WAF
type DetectionSetting struct {
	// Signature Selection Setting
	//
	// x-displayName: "Signature Selection Setting"
	// Specifies signature settings to be used by WAF
	SignatureSelectionSetting *SignatureSelectionSetting `protobuf:"bytes,1,opt,name=signature_selection_setting,json=signatureSelectionSetting,proto3" json:"signature_selection_setting,omitempty"`
	// Automatic False Positive Suppression
	//
	// x-displayName: "Automatic False Positive Suppression"
	// x-required
	// Enable or disable automatic suppression of false positives
	//
	// Types that are valid to be assigned to FalsePositiveSuppression:
	//	*DetectionSetting_EnableSuppression
	//	*DetectionSetting_DisableSuppression
	FalsePositiveSuppression isDetectionSetting_FalsePositiveSuppression `protobuf_oneof:"false_positive_suppression"`
	// Threat Campaign Choice
	//
	// x-displayName: "Threat Campaign Choice"
	// x-required
	// Enable or disable F5 threat campaign detection feature
	//
	// Types that are valid to be assigned to ThreatCampaignChoice:
	//	*DetectionSetting_EnableThreatCampaigns
	//	*DetectionSetting_DisableThreatCampaigns
	ThreatCampaignChoice isDetectionSetting_ThreatCampaignChoice `protobuf_oneof:"threat_campaign_choice"`
	// Violation Detection Setting
	//
	// x-displayName: "Violation Detection Setting"
	// x-required
	// Violation detection settings
	//
	// Types that are valid to be assigned to ViolationDetectionSetting:
	//	*DetectionSetting_DefaultViolationSettings
	//	*DetectionSetting_EnabledViolationTypes
	ViolationDetectionSetting isDetectionSetting_ViolationDetectionSetting `protobuf_oneof:"violation_detection_setting"`
}

func (m *DetectionSetting) Reset()      { *m = DetectionSetting{} }
func (*DetectionSetting) ProtoMessage() {}
func (*DetectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{4}
}
func (m *DetectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DetectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionSetting.Merge(m, src)
}
func (m *DetectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *DetectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionSetting proto.InternalMessageInfo

type isDetectionSetting_FalsePositiveSuppression interface {
	isDetectionSetting_FalsePositiveSuppression()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_ThreatCampaignChoice interface {
	isDetectionSetting_ThreatCampaignChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_ViolationDetectionSetting interface {
	isDetectionSetting_ViolationDetectionSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DetectionSetting_EnableSuppression struct {
	EnableSuppression *schema.Empty `protobuf:"bytes,3,opt,name=enable_suppression,json=enableSuppression,proto3,oneof" json:"enable_suppression,omitempty"`
}
type DetectionSetting_DisableSuppression struct {
	DisableSuppression *schema.Empty `protobuf:"bytes,4,opt,name=disable_suppression,json=disableSuppression,proto3,oneof" json:"disable_suppression,omitempty"`
}
type DetectionSetting_EnableThreatCampaigns struct {
	EnableThreatCampaigns *schema.Empty `protobuf:"bytes,6,opt,name=enable_threat_campaigns,json=enableThreatCampaigns,proto3,oneof" json:"enable_threat_campaigns,omitempty"`
}
type DetectionSetting_DisableThreatCampaigns struct {
	DisableThreatCampaigns *schema.Empty `protobuf:"bytes,7,opt,name=disable_threat_campaigns,json=disableThreatCampaigns,proto3,oneof" json:"disable_threat_campaigns,omitempty"`
}
type DetectionSetting_DefaultViolationSettings struct {
	DefaultViolationSettings *schema.Empty `protobuf:"bytes,9,opt,name=default_violation_settings,json=defaultViolationSettings,proto3,oneof" json:"default_violation_settings,omitempty"`
}
type DetectionSetting_EnabledViolationTypes struct {
	EnabledViolationTypes *ViolationSetting `protobuf:"bytes,10,opt,name=enabled_violation_types,json=enabledViolationTypes,proto3,oneof" json:"enabled_violation_types,omitempty"`
}

func (*DetectionSetting_EnableSuppression) isDetectionSetting_FalsePositiveSuppression()         {}
func (*DetectionSetting_DisableSuppression) isDetectionSetting_FalsePositiveSuppression()        {}
func (*DetectionSetting_EnableThreatCampaigns) isDetectionSetting_ThreatCampaignChoice()         {}
func (*DetectionSetting_DisableThreatCampaigns) isDetectionSetting_ThreatCampaignChoice()        {}
func (*DetectionSetting_DefaultViolationSettings) isDetectionSetting_ViolationDetectionSetting() {}
func (*DetectionSetting_EnabledViolationTypes) isDetectionSetting_ViolationDetectionSetting()    {}

func (m *DetectionSetting) GetFalsePositiveSuppression() isDetectionSetting_FalsePositiveSuppression {
	if m != nil {
		return m.FalsePositiveSuppression
	}
	return nil
}
func (m *DetectionSetting) GetThreatCampaignChoice() isDetectionSetting_ThreatCampaignChoice {
	if m != nil {
		return m.ThreatCampaignChoice
	}
	return nil
}
func (m *DetectionSetting) GetViolationDetectionSetting() isDetectionSetting_ViolationDetectionSetting {
	if m != nil {
		return m.ViolationDetectionSetting
	}
	return nil
}

func (m *DetectionSetting) GetSignatureSelectionSetting() *SignatureSelectionSetting {
	if m != nil {
		return m.SignatureSelectionSetting
	}
	return nil
}

func (m *DetectionSetting) GetEnableSuppression() *schema.Empty {
	if x, ok := m.GetFalsePositiveSuppression().(*DetectionSetting_EnableSuppression); ok {
		return x.EnableSuppression
	}
	return nil
}

func (m *DetectionSetting) GetDisableSuppression() *schema.Empty {
	if x, ok := m.GetFalsePositiveSuppression().(*DetectionSetting_DisableSuppression); ok {
		return x.DisableSuppression
	}
	return nil
}

func (m *DetectionSetting) GetEnableThreatCampaigns() *schema.Empty {
	if x, ok := m.GetThreatCampaignChoice().(*DetectionSetting_EnableThreatCampaigns); ok {
		return x.EnableThreatCampaigns
	}
	return nil
}

func (m *DetectionSetting) GetDisableThreatCampaigns() *schema.Empty {
	if x, ok := m.GetThreatCampaignChoice().(*DetectionSetting_DisableThreatCampaigns); ok {
		return x.DisableThreatCampaigns
	}
	return nil
}

func (m *DetectionSetting) GetDefaultViolationSettings() *schema.Empty {
	if x, ok := m.GetViolationDetectionSetting().(*DetectionSetting_DefaultViolationSettings); ok {
		return x.DefaultViolationSettings
	}
	return nil
}

func (m *DetectionSetting) GetEnabledViolationTypes() *ViolationSetting {
	if x, ok := m.GetViolationDetectionSetting().(*DetectionSetting_EnabledViolationTypes); ok {
		return x.EnabledViolationTypes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DetectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DetectionSetting_EnableSuppression)(nil),
		(*DetectionSetting_DisableSuppression)(nil),
		(*DetectionSetting_EnableThreatCampaigns)(nil),
		(*DetectionSetting_DisableThreatCampaigns)(nil),
		(*DetectionSetting_DefaultViolationSettings)(nil),
		(*DetectionSetting_EnabledViolationTypes)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Application Firewall Specification"
type GlobalSpecType struct {
	// Enforcement Mode
	//
	// x-displayName: "Enforcement Mode"
	// x-required
	// Specifies whether WAF needs to run in Blocking or Monitoring mode
	//
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*GlobalSpecType_UseLoadbalancerSetting
	//	*GlobalSpecType_Blocking
	//	*GlobalSpecType_Monitoring
	EnforcementModeChoice isGlobalSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Detection Settings
	//
	// x-displayName: "Detection Settings"
	// x-required
	// Settings used by WAF to detect malicious requests.
	// These settings can be used to tune WAF operation for optimum detection with minimal false positives.
	//
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*GlobalSpecType_DefaultDetectionSettings
	//	*GlobalSpecType_DetectionSettings
	DetectionSettingChoice isGlobalSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Bot Protection
	//
	// x-displayName: "Bot Protection"
	// x-required
	// Bot protection choice
	//
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*GlobalSpecType_DefaultBotSetting
	//	*GlobalSpecType_BotProtectionSetting
	BotProtectionChoice isGlobalSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{5}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_EnforcementModeChoice interface {
	isGlobalSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DetectionSettingChoice interface {
	isGlobalSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BotProtectionChoice interface {
	isGlobalSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type GlobalSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type GlobalSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type GlobalSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type GlobalSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type GlobalSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type GlobalSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}

func (*GlobalSpecType_UseLoadbalancerSetting) isGlobalSpecType_EnforcementModeChoice()    {}
func (*GlobalSpecType_Blocking) isGlobalSpecType_EnforcementModeChoice()                  {}
func (*GlobalSpecType_Monitoring) isGlobalSpecType_EnforcementModeChoice()                {}
func (*GlobalSpecType_DefaultDetectionSettings) isGlobalSpecType_DetectionSettingChoice() {}
func (*GlobalSpecType_DetectionSettings) isGlobalSpecType_DetectionSettingChoice()        {}
func (*GlobalSpecType_DefaultBotSetting) isGlobalSpecType_BotProtectionChoice()           {}
func (*GlobalSpecType_BotProtectionSetting) isGlobalSpecType_BotProtectionChoice()        {}

func (m *GlobalSpecType) GetEnforcementModeChoice() isGlobalSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDetectionSettingChoice() isGlobalSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBotProtectionChoice() isGlobalSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}

func (m *GlobalSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *GlobalSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *GlobalSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *GlobalSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*GlobalSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *GlobalSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*GlobalSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_UseLoadbalancerSetting)(nil),
		(*GlobalSpecType_Blocking)(nil),
		(*GlobalSpecType_Monitoring)(nil),
		(*GlobalSpecType_DefaultDetectionSettings)(nil),
		(*GlobalSpecType_DetectionSettings)(nil),
		(*GlobalSpecType_DefaultBotSetting)(nil),
		(*GlobalSpecType_BotProtectionSetting)(nil),
	}
}

// Create Application Firewall
//
// x-displayName: "Create Application Firewall"
// Create Application Firewall
type CreateSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*CreateSpecType_UseLoadbalancerSetting
	//	*CreateSpecType_Blocking
	//	*CreateSpecType_Monitoring
	EnforcementModeChoice isCreateSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*CreateSpecType_DefaultDetectionSettings
	//	*CreateSpecType_DetectionSettings
	DetectionSettingChoice isCreateSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*CreateSpecType_DefaultBotSetting
	//	*CreateSpecType_BotProtectionSetting
	BotProtectionChoice isCreateSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{6}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_EnforcementModeChoice interface {
	isCreateSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DetectionSettingChoice interface {
	isCreateSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BotProtectionChoice interface {
	isCreateSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type CreateSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type CreateSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type CreateSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type CreateSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type CreateSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type CreateSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}

func (*CreateSpecType_UseLoadbalancerSetting) isCreateSpecType_EnforcementModeChoice()    {}
func (*CreateSpecType_Blocking) isCreateSpecType_EnforcementModeChoice()                  {}
func (*CreateSpecType_Monitoring) isCreateSpecType_EnforcementModeChoice()                {}
func (*CreateSpecType_DefaultDetectionSettings) isCreateSpecType_DetectionSettingChoice() {}
func (*CreateSpecType_DetectionSettings) isCreateSpecType_DetectionSettingChoice()        {}
func (*CreateSpecType_DefaultBotSetting) isCreateSpecType_BotProtectionChoice()           {}
func (*CreateSpecType_BotProtectionSetting) isCreateSpecType_BotProtectionChoice()        {}

func (m *CreateSpecType) GetEnforcementModeChoice() isCreateSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *CreateSpecType) GetDetectionSettingChoice() isCreateSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *CreateSpecType) GetBotProtectionChoice() isCreateSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}

func (m *CreateSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *CreateSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *CreateSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *CreateSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *CreateSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*CreateSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *CreateSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*CreateSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_UseLoadbalancerSetting)(nil),
		(*CreateSpecType_Blocking)(nil),
		(*CreateSpecType_Monitoring)(nil),
		(*CreateSpecType_DefaultDetectionSettings)(nil),
		(*CreateSpecType_DetectionSettings)(nil),
		(*CreateSpecType_DefaultBotSetting)(nil),
		(*CreateSpecType_BotProtectionSetting)(nil),
	}
}

// Replace Application Firewall
//
// x-displayName: "Replace Application Firewall"
// Replace Application Firewall
type ReplaceSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*ReplaceSpecType_UseLoadbalancerSetting
	//	*ReplaceSpecType_Blocking
	//	*ReplaceSpecType_Monitoring
	EnforcementModeChoice isReplaceSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*ReplaceSpecType_DefaultDetectionSettings
	//	*ReplaceSpecType_DetectionSettings
	DetectionSettingChoice isReplaceSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*ReplaceSpecType_DefaultBotSetting
	//	*ReplaceSpecType_BotProtectionSetting
	BotProtectionChoice isReplaceSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{7}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_EnforcementModeChoice interface {
	isReplaceSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DetectionSettingChoice interface {
	isReplaceSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BotProtectionChoice interface {
	isReplaceSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type ReplaceSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type ReplaceSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type ReplaceSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type ReplaceSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type ReplaceSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type ReplaceSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}

func (*ReplaceSpecType_UseLoadbalancerSetting) isReplaceSpecType_EnforcementModeChoice()    {}
func (*ReplaceSpecType_Blocking) isReplaceSpecType_EnforcementModeChoice()                  {}
func (*ReplaceSpecType_Monitoring) isReplaceSpecType_EnforcementModeChoice()                {}
func (*ReplaceSpecType_DefaultDetectionSettings) isReplaceSpecType_DetectionSettingChoice() {}
func (*ReplaceSpecType_DetectionSettings) isReplaceSpecType_DetectionSettingChoice()        {}
func (*ReplaceSpecType_DefaultBotSetting) isReplaceSpecType_BotProtectionChoice()           {}
func (*ReplaceSpecType_BotProtectionSetting) isReplaceSpecType_BotProtectionChoice()        {}

func (m *ReplaceSpecType) GetEnforcementModeChoice() isReplaceSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetDetectionSettingChoice() isReplaceSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBotProtectionChoice() isReplaceSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *ReplaceSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *ReplaceSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*ReplaceSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *ReplaceSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*ReplaceSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_UseLoadbalancerSetting)(nil),
		(*ReplaceSpecType_Blocking)(nil),
		(*ReplaceSpecType_Monitoring)(nil),
		(*ReplaceSpecType_DefaultDetectionSettings)(nil),
		(*ReplaceSpecType_DetectionSettings)(nil),
		(*ReplaceSpecType_DefaultBotSetting)(nil),
		(*ReplaceSpecType_BotProtectionSetting)(nil),
	}
}

// Get Application Firewall
//
// x-displayName: "Get Application Firewall"
// Get Application Firewall
type GetSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*GetSpecType_UseLoadbalancerSetting
	//	*GetSpecType_Blocking
	//	*GetSpecType_Monitoring
	EnforcementModeChoice isGetSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*GetSpecType_DefaultDetectionSettings
	//	*GetSpecType_DetectionSettings
	DetectionSettingChoice isGetSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
	// Types that are valid to be assigned to BotProtectionChoice:
	//	*GetSpecType_DefaultBotSetting
	//	*GetSpecType_BotProtectionSetting
	BotProtectionChoice isGetSpecType_BotProtectionChoice `protobuf_oneof:"bot_protection_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{8}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_EnforcementModeChoice interface {
	isGetSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DetectionSettingChoice interface {
	isGetSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BotProtectionChoice interface {
	isGetSpecType_BotProtectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type GetSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type GetSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type GetSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type GetSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}
type GetSpecType_DefaultBotSetting struct {
	DefaultBotSetting *schema.Empty `protobuf:"bytes,9,opt,name=default_bot_setting,json=defaultBotSetting,proto3,oneof" json:"default_bot_setting,omitempty"`
}
type GetSpecType_BotProtectionSetting struct {
	BotProtectionSetting *BotProtectionSetting `protobuf:"bytes,10,opt,name=bot_protection_setting,json=botProtectionSetting,proto3,oneof" json:"bot_protection_setting,omitempty"`
}

func (*GetSpecType_UseLoadbalancerSetting) isGetSpecType_EnforcementModeChoice()    {}
func (*GetSpecType_Blocking) isGetSpecType_EnforcementModeChoice()                  {}
func (*GetSpecType_Monitoring) isGetSpecType_EnforcementModeChoice()                {}
func (*GetSpecType_DefaultDetectionSettings) isGetSpecType_DetectionSettingChoice() {}
func (*GetSpecType_DetectionSettings) isGetSpecType_DetectionSettingChoice()        {}
func (*GetSpecType_DefaultBotSetting) isGetSpecType_BotProtectionChoice()           {}
func (*GetSpecType_BotProtectionSetting) isGetSpecType_BotProtectionChoice()        {}

func (m *GetSpecType) GetEnforcementModeChoice() isGetSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *GetSpecType) GetDetectionSettingChoice() isGetSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}
func (m *GetSpecType) GetBotProtectionChoice() isGetSpecType_BotProtectionChoice {
	if m != nil {
		return m.BotProtectionChoice
	}
	return nil
}

func (m *GetSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *GetSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *GetSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *GetSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *GetSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

func (m *GetSpecType) GetDefaultBotSetting() *schema.Empty {
	if x, ok := m.GetBotProtectionChoice().(*GetSpecType_DefaultBotSetting); ok {
		return x.DefaultBotSetting
	}
	return nil
}

func (m *GetSpecType) GetBotProtectionSetting() *BotProtectionSetting {
	if x, ok := m.GetBotProtectionChoice().(*GetSpecType_BotProtectionSetting); ok {
		return x.BotProtectionSetting
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_UseLoadbalancerSetting)(nil),
		(*GetSpecType_Blocking)(nil),
		(*GetSpecType_Monitoring)(nil),
		(*GetSpecType_DefaultDetectionSettings)(nil),
		(*GetSpecType_DetectionSettings)(nil),
		(*GetSpecType_DefaultBotSetting)(nil),
		(*GetSpecType_BotProtectionSetting)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.app_firewall.AttackType", AttackType_name, AttackType_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.BotAction", BotAction_name, BotAction_value)
	proto.RegisterType((*BotProtectionSetting)(nil), "ves.io.schema.app_firewall.BotProtectionSetting")
	proto.RegisterType((*EnabledAttackTypes)(nil), "ves.io.schema.app_firewall.EnabledAttackTypes")
	proto.RegisterType((*SignatureSelectionSetting)(nil), "ves.io.schema.app_firewall.SignatureSelectionSetting")
	proto.RegisterType((*ViolationSetting)(nil), "ves.io.schema.app_firewall.ViolationSetting")
	proto.RegisterType((*DetectionSetting)(nil), "ves.io.schema.app_firewall.DetectionSetting")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_firewall.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_firewall.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_firewall.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_firewall.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/app_firewall/types.proto", fileDescriptor_f3c53032614c5085)
}

var fileDescriptor_f3c53032614c5085 = []byte{
	// 1728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0xd6, 0xc8, 0xb6, 0x62, 0x4f, 0xba, 0x09, 0x4d, 0x3b, 0x5e, 0x5b, 0x4e, 0xe4, 0xd4, 0xe9,
	0x7a, 0xd7, 0xa9, 0x2d, 0xa5, 0xde, 0x34, 0xfd, 0x71, 0x28, 0x40, 0x52, 0x63, 0x8b, 0xb6, 0x42,
	0xaa, 0x43, 0xda, 0x89, 0x17, 0x28, 0x06, 0x14, 0x35, 0x96, 0x89, 0x50, 0x1a, 0x42, 0xa4, 0x9c,
	0xfa, 0xb6, 0x0d, 0x7a, 0x69, 0x81, 0x02, 0x45, 0x0f, 0xfd, 0x1b, 0xfa, 0x37, 0x54, 0x3d, 0xe4,
	0x58, 0x14, 0x28, 0xe0, 0x63, 0xb0, 0xa7, 0x8d, 0x72, 0x69, 0x6f, 0x7b, 0xce, 0xa9, 0x20, 0x45,
	0x4a, 0x14, 0xf5, 0x23, 0xdd, 0xde, 0x8a, 0xf5, 0x8d, 0xe2, 0xfb, 0xde, 0xf7, 0xde, 0xbc, 0xf7,
	0xbd, 0xe1, 0x60, 0x04, 0xb7, 0x2e, 0xa8, 0x9b, 0xb7, 0x58, 0xc1, 0x35, 0xcf, 0x69, 0xc3, 0x28,
	0x18, 0x8e, 0x43, 0xce, 0xac, 0x16, 0x7d, 0x69, 0xd8, 0x76, 0xc1, 0xbb, 0x74, 0xa8, 0x9b, 0x77,
	0x5a, 0xcc, 0x63, 0x7c, 0xb6, 0x87, 0xcb, 0xf7, 0x70, 0xf9, 0x38, 0x2e, 0xbb, 0x5b, 0xb7, 0xbc,
	0xf3, 0x76, 0x35, 0x6f, 0xb2, 0x46, 0xa1, 0xce, 0xea, 0xac, 0x10, 0xb8, 0x54, 0xdb, 0x67, 0xc1,
	0xaf, 0xe0, 0x47, 0xf0, 0xd4, 0xa3, 0xca, 0x7e, 0x3c, 0x1c, 0xb2, 0x49, 0xbd, 0xd0, 0xb0, 0x3e,
	0x6c, 0x60, 0x8e, 0x67, 0xb1, 0x66, 0x98, 0x40, 0xf6, 0xfe, 0xb0, 0xd1, 0x61, 0xb6, 0x65, 0x5e,
	0xc6, 0x53, 0xcc, 0xae, 0x0d, 0x23, 0xe2, 0xa6, 0xbb, 0xc3, 0xa6, 0x0b, 0xc3, 0xb6, 0x6a, 0x86,
	0x47, 0xc7, 0x53, 0x5f, 0x58, 0xf4, 0x25, 0x19, 0x0a, 0xbe, 0xf9, 0xb7, 0x34, 0x5c, 0x16, 0x99,
	0x57, 0x69, 0x31, 0x8f, 0x9a, 0xbe, 0x41, 0xa3, 0x9e, 0x67, 0x35, 0xeb, 0x7c, 0x15, 0x2e, 0x37,
	0x0c, 0xdb, 0x32, 0x2d, 0xd6, 0x76, 0x49, 0x95, 0x79, 0xc4, 0x08, 0xcc, 0xab, 0xe0, 0x3e, 0xf8,
	0xec, 0xd6, 0xde, 0x27, 0xf9, 0xc9, 0x55, 0xcb, 0x8b, 0xcc, 0x13, 0x02, 0xb0, 0xb8, 0xf0, 0x55,
	0x07, 0xcc, 0x89, 0x65, 0x55, 0x3a, 0xc2, 0x7c, 0x9f, 0xad, 0x6f, 0xe6, 0x29, 0xbc, 0xe3, 0xb6,
	0x5d, 0x67, 0x34, 0x48, 0xfa, 0xdb, 0x04, 0x81, 0x5f, 0x75, 0x40, 0x06, 0xa3, 0x8a, 0x8a, 0x75,
	0xbc, 0x34, 0xe0, 0x1b, 0x84, 0x39, 0x85, 0xb7, 0xeb, 0x8c, 0xd5, 0xe2, 0x01, 0x66, 0xfe, 0xd7,
	0x00, 0x1f, 0xf9, 0x4c, 0x7d, 0xd3, 0xe6, 0x6f, 0x01, 0xe4, 0x51, 0xd3, 0xa8, 0xda, 0xb4, 0x26,
	0x78, 0x9e, 0x61, 0xbe, 0xd0, 0xfd, 0xde, 0xf0, 0x4d, 0xb8, 0x4c, 0x7b, 0x6f, 0x89, 0x11, 0xbc,
	0x26, 0x41, 0xcf, 0x56, 0xc1, 0xfd, 0x99, 0xcf, 0x6e, 0xed, 0x6d, 0x4d, 0x0b, 0x3b, 0xa0, 0x11,
	0x97, 0xff, 0xfa, 0xef, 0xd7, 0x33, 0x73, 0x7f, 0x02, 0x69, 0x6e, 0x25, 0x7a, 0x5a, 0x05, 0x98,
	0xa7, 0x23, 0xf1, 0x36, 0xbb, 0xb3, 0x70, 0x4d, 0xb3, 0xea, 0x4d, 0xc3, 0x6b, 0xb7, 0xa8, 0x46,
	0xed, 0xe1, 0x56, 0x9e, 0xc2, 0x7b, 0xac, 0x69, 0x5f, 0x92, 0x73, 0xab, 0x7e, 0x4e, 0x0c, 0xd3,
	0x6c, 0xb7, 0x0c, 0xf3, 0x92, 0xb8, 0x11, 0xde, 0x0d, 0xca, 0x7d, 0x73, 0x6f, 0x39, 0x91, 0x16,
	0x6a, 0x38, 0xde, 0x65, 0x29, 0x85, 0xb3, 0xbe, 0x73, 0xc9, 0xaa, 0x9f, 0x0b, 0xa1, 0x6b, 0x3f,
	0x92, 0xcb, 0xff, 0x0a, 0x6e, 0x04, 0xac, 0x0d, 0x5a, 0xb3, 0xda, 0x8d, 0xb1, 0xe4, 0x33, 0x53,
	0xc9, 0xef, 0xfa, 0xee, 0x4f, 0x03, 0xef, 0x31, 0xf4, 0x35, 0xf8, 0x20, 0x4e, 0x6f, 0xb3, 0x97,
	0x63, 0x43, 0xcc, 0x4e, 0x0d, 0xb1, 0x31, 0x08, 0x51, 0x66, 0x2f, 0xc7, 0x44, 0x79, 0x06, 0xef,
	0xd6, 0xe8, 0x99, 0xd1, 0xb6, 0xbd, 0x78, 0xb7, 0x88, 0xdb, 0x2b, 0x9f, 0xbb, 0x9a, 0x99, 0x42,
	0x0f, 0xf0, 0x5a, 0xe8, 0x3b, 0xe8, 0x47, 0x58, 0x77, 0xd7, 0x9f, 0xa1, 0xb1, 0x32, 0xb8, 0x11,
	0x10, 0xe6, 0xa7, 0xc9, 0x60, 0x54, 0x54, 0xa5, 0xb1, 0xad, 0x17, 0x1f, 0xc3, 0x8d, 0x7e, 0x25,
	0x88, 0x1b, 0xb5, 0x9e, 0x54, 0x2f, 0xfb, 0x95, 0xe2, 0x17, 0x5f, 0x77, 0x40, 0xfa, 0xaa, 0x03,
	0x40, 0xb7, 0x03, 0xe6, 0xf6, 0x76, 0x3e, 0xdf, 0x79, 0x2c, 0x6e, 0xc1, 0xa5, 0x31, 0x4b, 0xe5,
	0x6f, 0xbf, 0xee, 0x80, 0xcc, 0x55, 0x07, 0xcc, 0x75, 0x3b, 0x60, 0xe6, 0xc9, 0xce, 0x4f, 0x0e,
	0x67, 0xe7, 0x01, 0x97, 0x3e, 0x9c, 0x9d, 0x9f, 0xe3, 0x32, 0x9b, 0xbf, 0x03, 0x90, 0x3b, 0xb1,
	0x98, 0x6d, 0xc4, 0xb5, 0xd5, 0x86, 0x1f, 0x47, 0x4b, 0xbc, 0x88, 0x6c, 0x43, 0x62, 0xff, 0x34,
	0xb1, 0x4a, 0xc1, 0x71, 0xf6, 0xc3, 0x45, 0xf6, 0xc9, 0x12, 0x6a, 0x87, 0x31, 0xb5, 0xdf, 0x09,
	0xd9, 0x87, 0xb0, 0xee, 0xe6, 0x9f, 0x33, 0x90, 0x2b, 0xd2, 0xc4, 0x96, 0xd5, 0x86, 0xeb, 0xe3,
	0x4a, 0x11, 0x2e, 0x2e, 0xd8, 0xb9, 0x6e, 0xee, 0xfd, 0x78, 0x5a, 0xd5, 0x27, 0xce, 0x10, 0x5e,
	0x73, 0x27, 0x8e, 0x17, 0x82, 0x61, 0x5f, 0x88, 0xdb, 0x76, 0x9c, 0x16, 0x75, 0xdd, 0x68, 0x87,
	0x99, 0xac, 0xc9, 0xc5, 0x9e, 0x87, 0x36, 0x70, 0xe0, 0x0f, 0xe0, 0x52, 0xcd, 0x72, 0x47, 0x78,
	0xa6, 0x6b, 0x9b, 0x0f, 0x5d, 0xe2, 0x44, 0x4a, 0xd4, 0x12, 0xe2, 0x9d, 0xb7, 0xa8, 0xe1, 0x11,
	0xd3, 0x68, 0x38, 0x86, 0x55, 0x6f, 0x7e, 0x48, 0xc9, 0x61, 0xad, 0xf5, 0xc0, 0x4b, 0x8a, 0x9c,
	0xf8, 0x0a, 0x5c, 0x8d, 0x12, 0x1b, 0x21, 0xbc, 0x31, 0x95, 0x70, 0x25, 0xf4, 0x4b, 0x32, 0xea,
	0x30, 0x1b, 0x0d, 0xdc, 0x40, 0x34, 0xfd, 0x71, 0x5b, 0x98, 0xc2, 0x99, 0xc6, 0xab, 0xa1, 0x67,
	0x52, 0x89, 0x2e, 0x7f, 0x36, 0x59, 0x8a, 0x30, 0xa0, 0xdc, 0x99, 0xd6, 0xfa, 0x24, 0x5f, 0x29,
	0x3d, 0x41, 0x7b, 0xe2, 0x2e, 0xcc, 0x9e, 0x19, 0xb6, 0x4b, 0x89, 0xc3, 0x5c, 0xcb, 0xb3, 0x2e,
	0x86, 0xfa, 0x15, 0x8c, 0xd0, 0xcc, 0x55, 0x07, 0xa4, 0xfd, 0x11, 0xf2, 0x47, 0x6d, 0x1b, 0xae,
	0x24, 0xca, 0x46, 0xcc, 0x73, 0x66, 0x99, 0x74, 0x64, 0xda, 0xc4, 0x02, 0x5c, 0x1f, 0x64, 0x5e,
	0x8b, 0xe4, 0xdd, 0x9f, 0x4e, 0xee, 0x75, 0x07, 0x2c, 0x5c, 0x75, 0xc0, 0x7c, 0xb7, 0x03, 0x66,
	0x7f, 0xb6, 0xf3, 0xa3, 0x47, 0x87, 0xb3, 0xf3, 0x69, 0x6e, 0xa6, 0x37, 0x9e, 0x87, 0xb3, 0xf3,
	0xf3, 0xdc, 0xc2, 0xe6, 0x3f, 0xe7, 0xe0, 0xad, 0x03, 0x9b, 0x55, 0x0d, 0x5b, 0x73, 0xa8, 0xe9,
	0x27, 0xec, 0xf7, 0xaf, 0xed, 0x52, 0x62, 0x33, 0xa3, 0x56, 0x35, 0x6c, 0xa3, 0x69, 0xd2, 0x56,
	0x7f, 0x26, 0xa6, 0xef, 0xfc, 0x2b, 0x6d, 0x97, 0x96, 0x63, 0x6e, 0x91, 0xe2, 0xf7, 0xe0, 0x7c,
	0xd5, 0x66, 0xe6, 0x0b, 0x9f, 0x61, 0xba, 0xce, 0xfb, 0x38, 0xfe, 0x09, 0x84, 0x0d, 0xd6, 0xb4,
	0x3c, 0xd6, 0xf2, 0xbd, 0xa6, 0xab, 0x3a, 0x86, 0x8c, 0x6b, 0x65, 0xa4, 0x22, 0x1f, 0x12, 0x74,
	0xa4, 0x95, 0xe4, 0x4e, 0xe1, 0x7f, 0xb7, 0xf8, 0x31, 0x6c, 0x37, 0x3e, 0x2c, 0x93, 0x24, 0x55,
	0x09, 0xe0, 0xc5, 0xda, 0x08, 0xfd, 0x3e, 0x5c, 0x8a, 0x92, 0xf6, 0x0f, 0x1d, 0x51, 0xb5, 0xa7,
	0x2b, 0x7b, 0x31, 0x74, 0x11, 0x99, 0x17, 0x15, 0xfa, 0x1c, 0xae, 0xf8, 0xfe, 0x4e, 0xff, 0x74,
	0xd6, 0xa7, 0xea, 0x29, 0xfa, 0xd1, 0x07, 0x0e, 0x30, 0x23, 0xc7, 0xba, 0x52, 0x1a, 0x2f, 0x57,
	0xc7, 0xbc, 0x17, 0x77, 0xfc, 0xe1, 0x39, 0x63, 0x2d, 0x93, 0x36, 0x68, 0xd3, 0x23, 0x0d, 0x56,
	0xa3, 0x91, 0x4c, 0xc7, 0x7c, 0x3e, 0x7e, 0x08, 0x57, 0x47, 0xca, 0x37, 0x51, 0xd5, 0xdb, 0xf0,
	0x4e, 0x62, 0x11, 0x21, 0x72, 0x9c, 0x9e, 0xfb, 0x9f, 0x9b, 0x50, 0xcf, 0x5f, 0x66, 0xe0, 0x2d,
	0xc9, 0x9f, 0x1e, 0x7a, 0xad, 0xe7, 0x6b, 0x3d, 0xff, 0xd7, 0x7a, 0xfe, 0xf9, 0xe2, 0x3f, 0x7e,
	0x91, 0xd8, 0x07, 0xc5, 0x27, 0x93, 0x25, 0xbe, 0xfe, 0xea, 0x3d, 0x98, 0x64, 0x14, 0x7f, 0x3a,
	0x45, 0xec, 0x77, 0x5f, 0xbd, 0x07, 0x13, 0xad, 0xe2, 0xde, 0x24, 0xe5, 0xaf, 0xbd, 0x7a, 0x0f,
	0xc6, 0x9b, 0xc6, 0x8c, 0xc0, 0x6f, 0x32, 0xf0, 0x36, 0xa6, 0x8e, 0x6d, 0x98, 0xd7, 0x33, 0x70,
	0x3d, 0x03, 0xdf, 0xcd, 0x19, 0xf8, 0x43, 0x06, 0xde, 0x3c, 0xa0, 0xde, 0xb5, 0xfe, 0xaf, 0xf5,
	0xff, 0x7f, 0xa6, 0x7f, 0x71, 0x92, 0xfe, 0xb7, 0x93, 0xa7, 0x9f, 0x6f, 0x31, 0x0f, 0x0f, 0xbf,
	0xce, 0x40, 0x38, 0xb8, 0x05, 0xe0, 0x97, 0x21, 0x27, 0xe8, 0xba, 0x20, 0x1d, 0x11, 0xfd, 0xb4,
	0x82, 0x88, 0xa2, 0x2a, 0x88, 0x4b, 0xf1, 0x9b, 0x30, 0x97, 0x78, 0x4b, 0x44, 0xac, 0x3e, 0xd3,
	0x10, 0x26, 0x52, 0x59, 0x46, 0x8a, 0xce, 0x01, 0x7e, 0x1b, 0x7e, 0x12, 0xc7, 0xa8, 0x7a, 0x09,
	0x61, 0x22, 0x54, 0x2a, 0x65, 0x59, 0x12, 0x74, 0x59, 0x55, 0x48, 0xcf, 0xaa, 0x71, 0x69, 0xfe,
	0x53, 0xf8, 0x20, 0x0e, 0xd5, 0xb1, 0x7a, 0x28, 0x28, 0x44, 0x14, 0xa4, 0xa3, 0xa2, 0xaa, 0x62,
	0xa2, 0x55, 0x4e, 0x9f, 0x09, 0x18, 0x71, 0x33, 0xfc, 0xf7, 0xe1, 0xbd, 0x38, 0xb0, 0x88, 0x74,
	0x24, 0x05, 0x5c, 0xe8, 0x44, 0xd0, 0x64, 0x55, 0xe1, 0x66, 0x93, 0xa9, 0x9d, 0x1c, 0x97, 0x15,
	0x84, 0x05, 0x51, 0x2e, 0xcb, 0xfa, 0x29, 0xd1, 0x24, 0x41, 0xe1, 0xe6, 0xf8, 0x2d, 0xb8, 0x19,
	0xc7, 0x08, 0xe2, 0xb1, 0x86, 0x88, 0xba, 0x4f, 0xf6, 0x8f, 0x95, 0x80, 0x4e, 0xf0, 0xc1, 0x5c,
	0x86, 0x7f, 0x0c, 0x1f, 0x0d, 0xe1, 0x8e, 0xf5, 0x12, 0x52, 0xf4, 0x7e, 0xfe, 0xc7, 0x7a, 0x49,
	0xc5, 0xf2, 0x17, 0xc3, 0xab, 0xb9, 0xc1, 0x6f, 0xc0, 0xf5, 0xb8, 0x97, 0x78, 0xbc, 0xbf, 0x8f,
	0x30, 0x51, 0x4f, 0x10, 0xde, 0x2f, 0xab, 0xcf, 0xb8, 0x79, 0x7e, 0x17, 0x6e, 0xc7, 0x01, 0x15,
	0x8c, 0x8a, 0xb2, 0xa4, 0x0b, 0x62, 0x19, 0x11, 0x8c, 0x34, 0xf5, 0x18, 0x4b, 0x88, 0x94, 0xd5,
	0x5e, 0x14, 0x6e, 0x81, 0x7f, 0x00, 0x37, 0xe2, 0x70, 0x59, 0xd9, 0x57, 0xf1, 0xd3, 0x5e, 0xd0,
	0x32, 0x12, 0x8e, 0x84, 0x03, 0xc4, 0xc1, 0xe4, 0xb2, 0x8b, 0x32, 0x46, 0x92, 0xae, 0xe2, 0x53,
	0x22, 0x2b, 0x45, 0xf4, 0x5c, 0x56, 0x0e, 0xb8, 0x9b, 0x7c, 0x0e, 0x66, 0x87, 0xe2, 0x0a, 0x7a,
	0x89, 0xe8, 0x58, 0x38, 0x41, 0x58, 0x13, 0xca, 0xdc, 0xf7, 0x92, 0x89, 0x3f, 0x0f, 0x00, 0xb2,
	0x72, 0xd8, 0xab, 0x31, 0xf7, 0x51, 0x92, 0xa0, 0x5c, 0x14, 0x2a, 0x31, 0xfb, 0x2d, 0xfe, 0x21,
	0xdc, 0x8a, 0xdb, 0x35, 0x84, 0x4f, 0x10, 0x26, 0x9a, 0x5c, 0x44, 0x44, 0x52, 0x8b, 0x28, 0x86,
	0xbd, 0x9d, 0x6c, 0xa5, 0xa4, 0x3e, 0x7d, 0x2a, 0x28, 0x45, 0x82, 0x9e, 0x23, 0xe9, 0x38, 0x80,
	0x70, 0xfc, 0x3d, 0xb8, 0x36, 0x44, 0xf7, 0xcb, 0x72, 0x8c, 0x61, 0x91, 0xff, 0x01, 0xbc, 0x3f,
	0xc4, 0x80, 0x55, 0x4d, 0x23, 0x9a, 0xac, 0x23, 0xa2, 0x49, 0x58, 0xae, 0xe8, 0xfe, 0xa2, 0xf9,
	0x51, 0xc9, 0x28, 0xb2, 0x50, 0xf6, 0x9b, 0xed, 0x67, 0x27, 0x4b, 0x88, 0x5b, 0x4a, 0xd6, 0xae,
	0xa4, 0xeb, 0x15, 0x52, 0x11, 0xb0, 0xaf, 0xe6, 0xde, 0x7b, 0x6e, 0x39, 0x49, 0xa3, 0x21, 0xcd,
	0xd7, 0x1b, 0x29, 0xc9, 0x87, 0x82, 0x74, 0xe4, 0x47, 0xba, 0x93, 0x54, 0x71, 0x40, 0x83, 0x91,
	0x56, 0x51, 0x15, 0x0d, 0x11, 0xad, 0x52, 0x96, 0xf5, 0x20, 0xa5, 0x95, 0x87, 0x79, 0xb8, 0x30,
	0xb8, 0x42, 0x5e, 0x80, 0xbd, 0x6b, 0x6c, 0x2e, 0xc5, 0x43, 0x18, 0xde, 0x05, 0x73, 0xc0, 0x7f,
	0x96, 0x0f, 0x14, 0x15, 0x23, 0x2e, 0x2d, 0xfe, 0x1e, 0x5c, 0xbd, 0xcd, 0xa5, 0xde, 0xbc, 0xcd,
	0xa5, 0xbe, 0x79, 0x9b, 0x03, 0x5f, 0x76, 0x73, 0xe0, 0x2f, 0xdd, 0x1c, 0xf8, 0x7b, 0x37, 0x07,
	0xae, 0xba, 0x39, 0xf0, 0xa6, 0x9b, 0x03, 0x5f, 0x77, 0x73, 0xe0, 0x5f, 0xdd, 0x5c, 0xea, 0x9b,
	0x6e, 0x0e, 0xfc, 0xf1, 0x5d, 0x2e, 0x75, 0xf5, 0x2e, 0x97, 0x7a, 0xf3, 0x2e, 0x97, 0xfa, 0xa2,
	0x52, 0x67, 0xce, 0x8b, 0x7a, 0xfe, 0x82, 0xd9, 0x1e, 0x6d, 0xb5, 0x8c, 0x7c, 0xdb, 0x2d, 0x04,
	0x0f, 0x67, 0xac, 0xd5, 0xd8, 0x75, 0x5a, 0xec, 0xc2, 0xaa, 0xd1, 0xd6, 0x6e, 0x64, 0x2e, 0x38,
	0xd5, 0x3a, 0x2b, 0xd0, 0x5f, 0x7b, 0xe1, 0xad, 0xfe, 0x98, 0x3f, 0x38, 0xaa, 0x99, 0xe0, 0x76,
	0xff, 0xf3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x7a, 0xa3, 0x83, 0x05, 0x19, 0x00, 0x00,
}

func (x AttackType) String() string {
	s, ok := AttackType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BotAction) String() string {
	s, ok := BotAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotProtectionSetting)
	if !ok {
		that2, ok := that.(BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaliciousBotAction != that1.MaliciousBotAction {
		return false
	}
	if this.SuspiciousBotAction != that1.SuspiciousBotAction {
		return false
	}
	if this.GoodBotAction != that1.GoodBotAction {
		return false
	}
	return true
}
func (this *EnabledAttackTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnabledAttackTypes)
	if !ok {
		that2, ok := that.(EnabledAttackTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EnabledAttackTypes) != len(that1.EnabledAttackTypes) {
		return false
	}
	for i := range this.EnabledAttackTypes {
		if this.EnabledAttackTypes[i] != that1.EnabledAttackTypes[i] {
			return false
		}
	}
	return true
}
func (this *SignatureSelectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SignatureSelectionByAccuracy == nil {
		if this.SignatureSelectionByAccuracy != nil {
			return false
		}
	} else if this.SignatureSelectionByAccuracy == nil {
		return false
	} else if !this.SignatureSelectionByAccuracy.Equal(that1.SignatureSelectionByAccuracy) {
		return false
	}
	if that1.AttackTypeSetting == nil {
		if this.AttackTypeSetting != nil {
			return false
		}
	} else if this.AttackTypeSetting == nil {
		return false
	} else if !this.AttackTypeSetting.Equal(that1.AttackTypeSetting) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_OnlyHighAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_OnlyHighAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OnlyHighAccuracySignatures.Equal(that1.OnlyHighAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_HighMediumAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_HighMediumAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HighMediumAccuracySignatures.Equal(that1.HighMediumAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_HighMediumLowAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_HighMediumLowAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HighMediumLowAccuracySignatures.Equal(that1.HighMediumLowAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_DefaultAttackTypeSettings)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_DefaultAttackTypeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAttackTypeSettings.Equal(that1.DefaultAttackTypeSettings) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_EnabledAttackTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_EnabledAttackTypes)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_EnabledAttackTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledAttackTypes.Equal(that1.EnabledAttackTypes) {
		return false
	}
	return true
}
func (this *ViolationSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSetting)
	if !ok {
		that2, ok := that.(ViolationSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EnabledViolationTypes) != len(that1.EnabledViolationTypes) {
		return false
	}
	for i := range this.EnabledViolationTypes {
		if this.EnabledViolationTypes[i] != that1.EnabledViolationTypes[i] {
			return false
		}
	}
	return true
}
func (this *DetectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting)
	if !ok {
		that2, ok := that.(DetectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignatureSelectionSetting.Equal(that1.SignatureSelectionSetting) {
		return false
	}
	if that1.FalsePositiveSuppression == nil {
		if this.FalsePositiveSuppression != nil {
			return false
		}
	} else if this.FalsePositiveSuppression == nil {
		return false
	} else if !this.FalsePositiveSuppression.Equal(that1.FalsePositiveSuppression) {
		return false
	}
	if that1.ThreatCampaignChoice == nil {
		if this.ThreatCampaignChoice != nil {
			return false
		}
	} else if this.ThreatCampaignChoice == nil {
		return false
	} else if !this.ThreatCampaignChoice.Equal(that1.ThreatCampaignChoice) {
		return false
	}
	if that1.ViolationDetectionSetting == nil {
		if this.ViolationDetectionSetting != nil {
			return false
		}
	} else if this.ViolationDetectionSetting == nil {
		return false
	} else if !this.ViolationDetectionSetting.Equal(that1.ViolationDetectionSetting) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnableSuppression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnableSuppression)
	if !ok {
		that2, ok := that.(DetectionSetting_EnableSuppression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSuppression.Equal(that1.EnableSuppression) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableSuppression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableSuppression)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableSuppression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSuppression.Equal(that1.DisableSuppression) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnableThreatCampaigns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnableThreatCampaigns)
	if !ok {
		that2, ok := that.(DetectionSetting_EnableThreatCampaigns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatCampaigns.Equal(that1.EnableThreatCampaigns) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableThreatCampaigns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableThreatCampaigns)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableThreatCampaigns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatCampaigns.Equal(that1.DisableThreatCampaigns) {
		return false
	}
	return true
}
func (this *DetectionSetting_DefaultViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DefaultViolationSettings)
	if !ok {
		that2, ok := that.(DetectionSetting_DefaultViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultViolationSettings.Equal(that1.DefaultViolationSettings) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnabledViolationTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnabledViolationTypes)
	if !ok {
		that2, ok := that.(DetectionSetting_EnabledViolationTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledViolationTypes.Equal(that1.EnabledViolationTypes) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Blocking)
	if !ok {
		that2, ok := that.(GlobalSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Monitoring)
	if !ok {
		that2, ok := that.(GlobalSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(GlobalSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Blocking)
	if !ok {
		that2, ok := that.(CreateSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *CreateSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Monitoring)
	if !ok {
		that2, ok := that.(CreateSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(CreateSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Blocking)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Monitoring)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	if that1.BotProtectionChoice == nil {
		if this.BotProtectionChoice != nil {
			return false
		}
	} else if this.BotProtectionChoice == nil {
		return false
	} else if !this.BotProtectionChoice.Equal(that1.BotProtectionChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(GetSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *GetSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Blocking)
	if !ok {
		that2, ok := that.(GetSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *GetSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Monitoring)
	if !ok {
		that2, ok := that.(GetSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *GetSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(GetSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBotSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBotSetting)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBotSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBotSetting.Equal(that1.DefaultBotSetting) {
		return false
	}
	return true
}
func (this *GetSpecType_BotProtectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotProtectionSetting)
	if !ok {
		that2, ok := that.(GetSpecType_BotProtectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotProtectionSetting.Equal(that1.BotProtectionSetting) {
		return false
	}
	return true
}
func (this *BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_firewall.BotProtectionSetting{")
	s = append(s, "MaliciousBotAction: "+fmt.Sprintf("%#v", this.MaliciousBotAction)+",\n")
	s = append(s, "SuspiciousBotAction: "+fmt.Sprintf("%#v", this.SuspiciousBotAction)+",\n")
	s = append(s, "GoodBotAction: "+fmt.Sprintf("%#v", this.GoodBotAction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnabledAttackTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.EnabledAttackTypes{")
	s = append(s, "EnabledAttackTypes: "+fmt.Sprintf("%#v", this.EnabledAttackTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignatureSelectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.SignatureSelectionSetting{")
	if this.SignatureSelectionByAccuracy != nil {
		s = append(s, "SignatureSelectionByAccuracy: "+fmt.Sprintf("%#v", this.SignatureSelectionByAccuracy)+",\n")
	}
	if this.AttackTypeSetting != nil {
		s = append(s, "AttackTypeSetting: "+fmt.Sprintf("%#v", this.AttackTypeSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_OnlyHighAccuracySignatures{` +
		`OnlyHighAccuracySignatures:` + fmt.Sprintf("%#v", this.OnlyHighAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_HighMediumAccuracySignatures{` +
		`HighMediumAccuracySignatures:` + fmt.Sprintf("%#v", this.HighMediumAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_HighMediumLowAccuracySignatures{` +
		`HighMediumLowAccuracySignatures:` + fmt.Sprintf("%#v", this.HighMediumLowAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_DefaultAttackTypeSettings{` +
		`DefaultAttackTypeSettings:` + fmt.Sprintf("%#v", this.DefaultAttackTypeSettings) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_EnabledAttackTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_EnabledAttackTypes{` +
		`EnabledAttackTypes:` + fmt.Sprintf("%#v", this.EnabledAttackTypes) + `}`}, ", ")
	return s
}
func (this *ViolationSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.ViolationSetting{")
	s = append(s, "EnabledViolationTypes: "+fmt.Sprintf("%#v", this.EnabledViolationTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_firewall.DetectionSetting{")
	if this.SignatureSelectionSetting != nil {
		s = append(s, "SignatureSelectionSetting: "+fmt.Sprintf("%#v", this.SignatureSelectionSetting)+",\n")
	}
	if this.FalsePositiveSuppression != nil {
		s = append(s, "FalsePositiveSuppression: "+fmt.Sprintf("%#v", this.FalsePositiveSuppression)+",\n")
	}
	if this.ThreatCampaignChoice != nil {
		s = append(s, "ThreatCampaignChoice: "+fmt.Sprintf("%#v", this.ThreatCampaignChoice)+",\n")
	}
	if this.ViolationDetectionSetting != nil {
		s = append(s, "ViolationDetectionSetting: "+fmt.Sprintf("%#v", this.ViolationDetectionSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionSetting_EnableSuppression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnableSuppression{` +
		`EnableSuppression:` + fmt.Sprintf("%#v", this.EnableSuppression) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableSuppression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableSuppression{` +
		`DisableSuppression:` + fmt.Sprintf("%#v", this.DisableSuppression) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_EnableThreatCampaigns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnableThreatCampaigns{` +
		`EnableThreatCampaigns:` + fmt.Sprintf("%#v", this.EnableThreatCampaigns) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableThreatCampaigns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableThreatCampaigns{` +
		`DisableThreatCampaigns:` + fmt.Sprintf("%#v", this.DisableThreatCampaigns) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DefaultViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DefaultViolationSettings{` +
		`DefaultViolationSettings:` + fmt.Sprintf("%#v", this.DefaultViolationSettings) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_EnabledViolationTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnabledViolationTypes{` +
		`EnabledViolationTypes:` + fmt.Sprintf("%#v", this.EnabledViolationTypes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_firewall.GlobalSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_firewall.CreateSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_firewall.ReplaceSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_firewall.GetSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	if this.BotProtectionChoice != nil {
		s = append(s, "BotProtectionChoice: "+fmt.Sprintf("%#v", this.BotProtectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBotSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DefaultBotSetting{` +
		`DefaultBotSetting:` + fmt.Sprintf("%#v", this.DefaultBotSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotProtectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_BotProtectionSetting{` +
		`BotProtectionSetting:` + fmt.Sprintf("%#v", this.BotProtectionSetting) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BotProtectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GoodBotAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GoodBotAction))
		i--
		dAtA[i] = 0x18
	}
	if m.SuspiciousBotAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SuspiciousBotAction))
		i--
		dAtA[i] = 0x10
	}
	if m.MaliciousBotAction != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaliciousBotAction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnabledAttackTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnabledAttackTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnabledAttackTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnabledAttackTypes) > 0 {
		dAtA2 := make([]byte, len(m.EnabledAttackTypes)*10)
		var j1 int
		for _, num := range m.EnabledAttackTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureSelectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureSelectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttackTypeSetting != nil {
		{
			size := m.AttackTypeSetting.Size()
			i -= size
			if _, err := m.AttackTypeSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignatureSelectionByAccuracy != nil {
		{
			size := m.SignatureSelectionByAccuracy.Size()
			i -= size
			if _, err := m.SignatureSelectionByAccuracy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnlyHighAccuracySignatures != nil {
		{
			size, err := m.OnlyHighAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HighMediumAccuracySignatures != nil {
		{
			size, err := m.HighMediumAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HighMediumLowAccuracySignatures != nil {
		{
			size, err := m.HighMediumLowAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAttackTypeSettings != nil {
		{
			size, err := m.DefaultAttackTypeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_EnabledAttackTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_EnabledAttackTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledAttackTypes != nil {
		{
			size, err := m.EnabledAttackTypes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ViolationSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViolationSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnabledViolationTypes) > 0 {
		dAtA9 := make([]byte, len(m.EnabledViolationTypes)*10)
		var j8 int
		for _, num := range m.EnabledViolationTypes {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTypes(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViolationDetectionSetting != nil {
		{
			size := m.ViolationDetectionSetting.Size()
			i -= size
			if _, err := m.ViolationDetectionSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatCampaignChoice != nil {
		{
			size := m.ThreatCampaignChoice.Size()
			i -= size
			if _, err := m.ThreatCampaignChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FalsePositiveSuppression != nil {
		{
			size := m.FalsePositiveSuppression.Size()
			i -= size
			if _, err := m.FalsePositiveSuppression.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignatureSelectionSetting != nil {
		{
			size, err := m.SignatureSelectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectionSetting_EnableSuppression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnableSuppression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableSuppression != nil {
		{
			size, err := m.EnableSuppression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableSuppression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableSuppression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSuppression != nil {
		{
			size, err := m.DisableSuppression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_EnableThreatCampaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnableThreatCampaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatCampaigns != nil {
		{
			size, err := m.EnableThreatCampaigns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableThreatCampaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableThreatCampaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatCampaigns != nil {
		{
			size, err := m.DisableThreatCampaigns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DefaultViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DefaultViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultViolationSettings != nil {
		{
			size, err := m.DefaultViolationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_EnabledViolationTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnabledViolationTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledViolationTypes != nil {
		{
			size, err := m.EnabledViolationTypes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotProtectionChoice != nil {
		{
			size := m.BotProtectionChoice.Size()
			i -= size
			if _, err := m.BotProtectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBotSetting != nil {
		{
			size, err := m.DefaultBotSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotProtectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotProtectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotProtectionSetting != nil {
		{
			size, err := m.BotProtectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousBotAction != 0 {
		n += 1 + sovTypes(uint64(m.MaliciousBotAction))
	}
	if m.SuspiciousBotAction != 0 {
		n += 1 + sovTypes(uint64(m.SuspiciousBotAction))
	}
	if m.GoodBotAction != 0 {
		n += 1 + sovTypes(uint64(m.GoodBotAction))
	}
	return n
}

func (m *EnabledAttackTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnabledAttackTypes) > 0 {
		l = 0
		for _, e := range m.EnabledAttackTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *SignatureSelectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureSelectionByAccuracy != nil {
		n += m.SignatureSelectionByAccuracy.Size()
	}
	if m.AttackTypeSetting != nil {
		n += m.AttackTypeSetting.Size()
	}
	return n
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnlyHighAccuracySignatures != nil {
		l = m.OnlyHighAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighMediumAccuracySignatures != nil {
		l = m.HighMediumAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighMediumLowAccuracySignatures != nil {
		l = m.HighMediumLowAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAttackTypeSettings != nil {
		l = m.DefaultAttackTypeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_EnabledAttackTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledAttackTypes != nil {
		l = m.EnabledAttackTypes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ViolationSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnabledViolationTypes) > 0 {
		l = 0
		for _, e := range m.EnabledViolationTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *DetectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureSelectionSetting != nil {
		l = m.SignatureSelectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FalsePositiveSuppression != nil {
		n += m.FalsePositiveSuppression.Size()
	}
	if m.ThreatCampaignChoice != nil {
		n += m.ThreatCampaignChoice.Size()
	}
	if m.ViolationDetectionSetting != nil {
		n += m.ViolationDetectionSetting.Size()
	}
	return n
}

func (m *DetectionSetting_EnableSuppression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSuppression != nil {
		l = m.EnableSuppression.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableSuppression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSuppression != nil {
		l = m.DisableSuppression.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_EnableThreatCampaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatCampaigns != nil {
		l = m.EnableThreatCampaigns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableThreatCampaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatCampaigns != nil {
		l = m.DisableThreatCampaigns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DefaultViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultViolationSettings != nil {
		l = m.DefaultViolationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_EnabledViolationTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledViolationTypes != nil {
		l = m.EnabledViolationTypes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	return n
}

func (m *CreateSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	if m.BotProtectionChoice != nil {
		n += m.BotProtectionChoice.Size()
	}
	return n
}

func (m *GetSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBotSetting != nil {
		l = m.DefaultBotSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotProtectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotProtectionSetting != nil {
		l = m.BotProtectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotProtectionSetting{`,
		`MaliciousBotAction:` + fmt.Sprintf("%v", this.MaliciousBotAction) + `,`,
		`SuspiciousBotAction:` + fmt.Sprintf("%v", this.SuspiciousBotAction) + `,`,
		`GoodBotAction:` + fmt.Sprintf("%v", this.GoodBotAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnabledAttackTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnabledAttackTypes{`,
		`EnabledAttackTypes:` + fmt.Sprintf("%v", this.EnabledAttackTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting{`,
		`SignatureSelectionByAccuracy:` + fmt.Sprintf("%v", this.SignatureSelectionByAccuracy) + `,`,
		`AttackTypeSetting:` + fmt.Sprintf("%v", this.AttackTypeSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_OnlyHighAccuracySignatures{`,
		`OnlyHighAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.OnlyHighAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_HighMediumAccuracySignatures{`,
		`HighMediumAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.HighMediumAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_HighMediumLowAccuracySignatures{`,
		`HighMediumLowAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.HighMediumLowAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_DefaultAttackTypeSettings{`,
		`DefaultAttackTypeSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAttackTypeSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_EnabledAttackTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_EnabledAttackTypes{`,
		`EnabledAttackTypes:` + strings.Replace(fmt.Sprintf("%v", this.EnabledAttackTypes), "EnabledAttackTypes", "EnabledAttackTypes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSetting{`,
		`EnabledViolationTypes:` + fmt.Sprintf("%v", this.EnabledViolationTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting{`,
		`SignatureSelectionSetting:` + strings.Replace(this.SignatureSelectionSetting.String(), "SignatureSelectionSetting", "SignatureSelectionSetting", 1) + `,`,
		`FalsePositiveSuppression:` + fmt.Sprintf("%v", this.FalsePositiveSuppression) + `,`,
		`ThreatCampaignChoice:` + fmt.Sprintf("%v", this.ThreatCampaignChoice) + `,`,
		`ViolationDetectionSetting:` + fmt.Sprintf("%v", this.ViolationDetectionSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnableSuppression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnableSuppression{`,
		`EnableSuppression:` + strings.Replace(fmt.Sprintf("%v", this.EnableSuppression), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableSuppression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableSuppression{`,
		`DisableSuppression:` + strings.Replace(fmt.Sprintf("%v", this.DisableSuppression), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnableThreatCampaigns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnableThreatCampaigns{`,
		`EnableThreatCampaigns:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatCampaigns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableThreatCampaigns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableThreatCampaigns{`,
		`DisableThreatCampaigns:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatCampaigns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DefaultViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DefaultViolationSettings{`,
		`DefaultViolationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultViolationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnabledViolationTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnabledViolationTypes{`,
		`EnabledViolationTypes:` + strings.Replace(fmt.Sprintf("%v", this.EnabledViolationTypes), "ViolationSetting", "ViolationSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`BotProtectionChoice:` + fmt.Sprintf("%v", this.BotProtectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBotSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBotSetting{`,
		`DefaultBotSetting:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBotSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotProtectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotProtectionSetting{`,
		`BotProtectionSetting:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionSetting), "BotProtectionSetting", "BotProtectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BotProtectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotProtectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotProtectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousBotAction", wireType)
			}
			m.MaliciousBotAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaliciousBotAction |= BotAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspiciousBotAction", wireType)
			}
			m.SuspiciousBotAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuspiciousBotAction |= BotAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodBotAction", wireType)
			}
			m.GoodBotAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodBotAction |= BotAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnabledAttackTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledAttackTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledAttackTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v AttackType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AttackType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledAttackTypes = append(m.EnabledAttackTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnabledAttackTypes) == 0 {
					m.EnabledAttackTypes = make([]AttackType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AttackType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AttackType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledAttackTypes = append(m.EnabledAttackTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledAttackTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureSelectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureSelectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureSelectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyHighAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_OnlyHighAccuracySignatures{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighMediumAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_HighMediumAccuracySignatures{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighMediumLowAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_HighMediumLowAccuracySignatures{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAttackTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttackTypeSetting = &SignatureSelectionSetting_DefaultAttackTypeSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledAttackTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnabledAttackTypes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttackTypeSetting = &SignatureSelectionSetting_EnabledAttackTypes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViolationSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViolationSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViolationSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.AppFirewallViolationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.AppFirewallViolationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledViolationTypes = append(m.EnabledViolationTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnabledViolationTypes) == 0 {
					m.EnabledViolationTypes = make([]schema.AppFirewallViolationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.AppFirewallViolationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.AppFirewallViolationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledViolationTypes = append(m.EnabledViolationTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledViolationTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureSelectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureSelectionSetting == nil {
				m.SignatureSelectionSetting = &SignatureSelectionSetting{}
			}
			if err := m.SignatureSelectionSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSuppression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FalsePositiveSuppression = &DetectionSetting_EnableSuppression{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSuppression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FalsePositiveSuppression = &DetectionSetting_DisableSuppression{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatCampaignChoice = &DetectionSetting_EnableThreatCampaigns{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatCampaignChoice = &DetectionSetting_DisableThreatCampaigns{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultViolationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ViolationDetectionSetting = &DetectionSetting_DefaultViolationSettings{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledViolationTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViolationSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ViolationDetectionSetting = &DetectionSetting_EnabledViolationTypes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GlobalSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GlobalSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &CreateSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &CreateSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &ReplaceSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &ReplaceSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_DetectionSettings{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBotSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GetSpecType_DefaultBotSetting{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotProtectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotProtectionChoice = &GetSpecType_BotProtectionSetting{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

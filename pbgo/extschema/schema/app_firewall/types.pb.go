// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_firewall/types.proto

package app_firewall

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Evasion Sub-Violation Type
//
// x-displayName: "Evasion Sub-Violation Type"
// List of Sub-Violation Types
type EvasionSubViolationType int32

const (
	// x-displayName: "NONE"
	VIOL_EVASION_NONE EvasionSubViolationType = 0
	// x-displayName: "Bad unescape"
	VIOL_EVASION_BAD_UNESCAPE EvasionSubViolationType = 1
	// x-displayName: "Apache whitespace"
	VIOL_EVASION_APACHE_WHITESPACE EvasionSubViolationType = 2
	// x-displayName: "Bare byte decoding"
	VIOL_EVASION_BARE_BYTE_DECODING EvasionSubViolationType = 3
	// x-displayName: "IIS Unicode codepoints"
	VIOL_EVASION_IIS_UNICODE_CODEPOINTS EvasionSubViolationType = 4
	// x-displayName: "IIS backslashes"
	VIOL_EVASION_IIS_BACKSLASHES EvasionSubViolationType = 5
	// x-displayName: "%u decoding"
	VIOL_EVASION_U_DECODING EvasionSubViolationType = 6
	// x-displayName: "Multiple decoding"
	VIOL_EVASION_MULTIPLE_DECODING EvasionSubViolationType = 7
	// x-displayName: "Directory traversal"
	VIOL_EVASION_DIRECTORY_TRAVERSALS EvasionSubViolationType = 8
)

var EvasionSubViolationType_name = map[int32]string{
	0: "VIOL_EVASION_NONE",
	1: "VIOL_EVASION_BAD_UNESCAPE",
	2: "VIOL_EVASION_APACHE_WHITESPACE",
	3: "VIOL_EVASION_BARE_BYTE_DECODING",
	4: "VIOL_EVASION_IIS_UNICODE_CODEPOINTS",
	5: "VIOL_EVASION_IIS_BACKSLASHES",
	6: "VIOL_EVASION_U_DECODING",
	7: "VIOL_EVASION_MULTIPLE_DECODING",
	8: "VIOL_EVASION_DIRECTORY_TRAVERSALS",
}

var EvasionSubViolationType_value = map[string]int32{
	"VIOL_EVASION_NONE":                   0,
	"VIOL_EVASION_BAD_UNESCAPE":           1,
	"VIOL_EVASION_APACHE_WHITESPACE":      2,
	"VIOL_EVASION_BARE_BYTE_DECODING":     3,
	"VIOL_EVASION_IIS_UNICODE_CODEPOINTS": 4,
	"VIOL_EVASION_IIS_BACKSLASHES":        5,
	"VIOL_EVASION_U_DECODING":             6,
	"VIOL_EVASION_MULTIPLE_DECODING":      7,
	"VIOL_EVASION_DIRECTORY_TRAVERSALS":   8,
}

func (EvasionSubViolationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{0}
}

// HTTP Protocol Sub-Violation Type
//
// x-displayName: "HTTP Protocol Sub-Violation Type"
// List of Sub-Violation Types
type HTTPProtocolSubViolationType int32

const (
	// x-displayName: "NONE"
	VIOL_HTTP_PROTOCOL_NONE HTTPProtocolSubViolationType = 0
	// x-displayName: "Multiple host headers"
	VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS HTTPProtocolSubViolationType = 1
	// x-displayName: "Check maximum number of parameters"
	VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_PARAMETERS HTTPProtocolSubViolationType = 2
	// x-displayName: "Bad host header value"
	VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE HTTPProtocolSubViolationType = 3
	// x-displayName: "Check maximum number of headers"
	VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_HEADERS HTTPProtocolSubViolationType = 4
	// x-displayName: "Unparsable request content"
	VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT HTTPProtocolSubViolationType = 5
	// x-displayName: "High ASCII characters in headers"
	VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS HTTPProtocolSubViolationType = 6
	// x-displayName: "Null in request"
	VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST HTTPProtocolSubViolationType = 7
	// x-displayName: "Bad HTTP version"
	VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION HTTPProtocolSubViolationType = 8
	// x-displayName: "Content length should be a positive number"
	VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER HTTPProtocolSubViolationType = 9
	// x-displayName: "Host header contains IP address"
	VIOL_HTTP_PROTOCOL_HOST_HEADER_CONTAINS_IP_ADDRESS HTTPProtocolSubViolationType = 10
	// x-displayName: "CRLF characters before request start"
	VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START HTTPProtocolSubViolationType = 11
	// x-displayName: "No Host header in HTTP/1.1 request"
	VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST HTTPProtocolSubViolationType = 12
	// x-displayName: "Bad multipart parameters parsing"
	VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING HTTPProtocolSubViolationType = 13
	// x-displayName: "Bad multipart/form-data request parsing"
	VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORM_DATA_REQUEST_PARSING HTTPProtocolSubViolationType = 14
	// x-displayName: "Body in GET or HEAD requests"
	VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUESTS HTTPProtocolSubViolationType = 15
	// x-displayName: "Chunked request with Content-Length header"
	VIOL_HTTP_PROTOCOL_CHUNKED_REQUEST_WITH_CONTENT_LENGTH_HEADER HTTPProtocolSubViolationType = 16
	// x-displayName: "Several Content-Length headers"
	VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS HTTPProtocolSubViolationType = 17
	// x-displayName: "Header name with no header value"
	VIOL_HTTP_PROTOCOL_HEADER_NAME_WITH_NO_HEADER_VALUE HTTPProtocolSubViolationType = 18
	// x-displayName: "POST request with Content-Length: 0"
	VIOL_HTTP_PROTOCOL_POST_REQUEST_WITH_CONTENT_LENGTH_0 HTTPProtocolSubViolationType = 19
)

var HTTPProtocolSubViolationType_name = map[int32]string{
	0:  "VIOL_HTTP_PROTOCOL_NONE",
	1:  "VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS",
	2:  "VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_PARAMETERS",
	3:  "VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE",
	4:  "VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_HEADERS",
	5:  "VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT",
	6:  "VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS",
	7:  "VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST",
	8:  "VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION",
	9:  "VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER",
	10: "VIOL_HTTP_PROTOCOL_HOST_HEADER_CONTAINS_IP_ADDRESS",
	11: "VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START",
	12: "VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST",
	13: "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING",
	14: "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORM_DATA_REQUEST_PARSING",
	15: "VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUESTS",
	16: "VIOL_HTTP_PROTOCOL_CHUNKED_REQUEST_WITH_CONTENT_LENGTH_HEADER",
	17: "VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS",
	18: "VIOL_HTTP_PROTOCOL_HEADER_NAME_WITH_NO_HEADER_VALUE",
	19: "VIOL_HTTP_PROTOCOL_POST_REQUEST_WITH_CONTENT_LENGTH_0",
}

var HTTPProtocolSubViolationType_value = map[string]int32{
	"VIOL_HTTP_PROTOCOL_NONE":                                       0,
	"VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS":                      1,
	"VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_PARAMETERS":         2,
	"VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE":                      3,
	"VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_HEADERS":            4,
	"VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT":                 5,
	"VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS":           6,
	"VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST":                            7,
	"VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION":                           8,
	"VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER": 9,
	"VIOL_HTTP_PROTOCOL_HOST_HEADER_CONTAINS_IP_ADDRESS":            10,
	"VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START":       11,
	"VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST":         12,
	"VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING":           13,
	"VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORM_DATA_REQUEST_PARSING":    14,
	"VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUESTS":               15,
	"VIOL_HTTP_PROTOCOL_CHUNKED_REQUEST_WITH_CONTENT_LENGTH_HEADER": 16,
	"VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS":             17,
	"VIOL_HTTP_PROTOCOL_HEADER_NAME_WITH_NO_HEADER_VALUE":           18,
	"VIOL_HTTP_PROTOCOL_POST_REQUEST_WITH_CONTENT_LENGTH_0":         19,
}

func (HTTPProtocolSubViolationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{1}
}

// Violation Type
//
// x-displayName: "Violation Type"
// List of all Violation Types
type ViolationType int32

const (
	// x-displayName: "no violation"
	VIOL_NONE ViolationType = 0
	// x-displayName: "Illegal file type"
	VIOL_FILETYPE ViolationType = 1
	// x-displayName: "Illegal method"
	VIOL_METHOD ViolationType = 2
	// x-displayName: "Mandatory HTTP header is missing"
	VIOL_MANDATORY_HEADER ViolationType = 3
	// x-displayName: "Illegal HTTP status in response"
	VIOL_HTTP_RESPONSE_STATUS ViolationType = 4
	// x-displayName: "Request length exceeds defined buffer size"
	VIOL_REQUEST_MAX_LENGTH ViolationType = 5
	// x-displayName: "Disallowed file upload content detected"
	VIOL_FILE_UPLOAD ViolationType = 6
	// x-displayName: "Disallowed file upload content detected in body"
	VIOL_FILE_UPLOAD_IN_BODY ViolationType = 7
	// x-displayName: "Malformed XML data"
	VIOL_XML_MALFORMED ViolationType = 8
	// x-displayName: "Malformed JSON data"
	VIOL_JSON_MALFORMED ViolationType = 9
	// x-displayName: "Modified ASM cookie"
	VIOL_ASM_COOKIE_MODIFIED ViolationType = 10
)

var ViolationType_name = map[int32]string{
	0:  "VIOL_NONE",
	1:  "VIOL_FILETYPE",
	2:  "VIOL_METHOD",
	3:  "VIOL_MANDATORY_HEADER",
	4:  "VIOL_HTTP_RESPONSE_STATUS",
	5:  "VIOL_REQUEST_MAX_LENGTH",
	6:  "VIOL_FILE_UPLOAD",
	7:  "VIOL_FILE_UPLOAD_IN_BODY",
	8:  "VIOL_XML_MALFORMED",
	9:  "VIOL_JSON_MALFORMED",
	10: "VIOL_ASM_COOKIE_MODIFIED",
}

var ViolationType_value = map[string]int32{
	"VIOL_NONE":                 0,
	"VIOL_FILETYPE":             1,
	"VIOL_METHOD":               2,
	"VIOL_MANDATORY_HEADER":     3,
	"VIOL_HTTP_RESPONSE_STATUS": 4,
	"VIOL_REQUEST_MAX_LENGTH":   5,
	"VIOL_FILE_UPLOAD":          6,
	"VIOL_FILE_UPLOAD_IN_BODY":  7,
	"VIOL_XML_MALFORMED":        8,
	"VIOL_JSON_MALFORMED":       9,
	"VIOL_ASM_COOKIE_MODIFIED":  10,
}

func (ViolationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{2}
}

// AttackType
//
// x-displayName: "Attack Type"
// List of all Attack Types
type AttackType int32

const (
	// x-displayName: "None"
	ATTACK_TYPE_NONE AttackType = 0
	// x-displayName: "Non-Browser Client"
	ATTACK_TYPE_NON_BROWSER_CLIENT AttackType = 1
	// x-displayName: "Other Application Attacks"
	ATTACK_TYPE_OTHER_APPLICATION_ATTACKS AttackType = 2
	// x-displayName: "Trojan Backdoor Spyware"
	ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE AttackType = 3
	// x-displayName: "Detection Evasion"
	ATTACK_TYPE_DETECTION_EVASION AttackType = 4
	// x-displayName: "Vulnerability Scan"
	ATTACK_TYPE_VULNERABILITY_SCAN AttackType = 5
	// x-displayName: "Abuse of Functionality"
	ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY AttackType = 6
	// x-displayName: "Authentication Authorization Atutacks"
	ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS AttackType = 7
	// x-displayName: "Buffer Overflow"
	ATTACK_TYPE_BUFFER_OVERFLOW AttackType = 8
	// x-displayName: "Predictable Resource Location"
	ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION AttackType = 9
	// x-displayName: "Information Leakage"
	ATTACK_TYPE_INFORMATION_LEAKAGE AttackType = 10
	// x-displayName: "Directory Indexing"
	ATTACK_TYPE_DIRECTORY_INDEXING AttackType = 11
	// x-displayName: "Path Traversal"
	ATTACK_TYPE_PATH_TRAVERSAL AttackType = 12
	// x-displayName: "XPath Injection"
	ATTACK_TYPE_XPATH_INJECTION AttackType = 13
	// x-displayName: "LDAP Injection"
	ATTACK_TYPE_LDAP_INJECTION AttackType = 14
	// x-displayName: "Server-Side Code Injection"
	ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION AttackType = 15
	// x-displayName: "Command Execution"
	ATTACK_TYPE_COMMAND_EXECUTION AttackType = 16
	// x-displayName: "SQL Injection"
	ATTACK_TYPE_SQL_INJECTION AttackType = 17
	// x-displayName: "Cross-Site Scripting"
	ATTACK_TYPE_CROSS_SITE_SCRIPTING AttackType = 18
	// x-displayName: "Denial of Service"
	ATTACK_TYPE_DENIAL_OF_SERVICE AttackType = 19
	// x-displayName: "HTTP Parser Attack"
	ATTACK_TYPE_HTTP_PARSER_ATTACK AttackType = 20
	// x-displayName: "Session Hijacking"
	ATTACK_TYPE_SESSION_HIJACKING AttackType = 21
	// x-displayName: "HTTP Response Splitting"
	ATTACK_TYPE_HTTP_RESPONSE_SPLITTING AttackType = 22
)

var AttackType_name = map[int32]string{
	0:  "ATTACK_TYPE_NONE",
	1:  "ATTACK_TYPE_NON_BROWSER_CLIENT",
	2:  "ATTACK_TYPE_OTHER_APPLICATION_ATTACKS",
	3:  "ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE",
	4:  "ATTACK_TYPE_DETECTION_EVASION",
	5:  "ATTACK_TYPE_VULNERABILITY_SCAN",
	6:  "ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY",
	7:  "ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS",
	8:  "ATTACK_TYPE_BUFFER_OVERFLOW",
	9:  "ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION",
	10: "ATTACK_TYPE_INFORMATION_LEAKAGE",
	11: "ATTACK_TYPE_DIRECTORY_INDEXING",
	12: "ATTACK_TYPE_PATH_TRAVERSAL",
	13: "ATTACK_TYPE_XPATH_INJECTION",
	14: "ATTACK_TYPE_LDAP_INJECTION",
	15: "ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION",
	16: "ATTACK_TYPE_COMMAND_EXECUTION",
	17: "ATTACK_TYPE_SQL_INJECTION",
	18: "ATTACK_TYPE_CROSS_SITE_SCRIPTING",
	19: "ATTACK_TYPE_DENIAL_OF_SERVICE",
	20: "ATTACK_TYPE_HTTP_PARSER_ATTACK",
	21: "ATTACK_TYPE_SESSION_HIJACKING",
	22: "ATTACK_TYPE_HTTP_RESPONSE_SPLITTING",
}

var AttackType_value = map[string]int32{
	"ATTACK_TYPE_NONE":                                 0,
	"ATTACK_TYPE_NON_BROWSER_CLIENT":                   1,
	"ATTACK_TYPE_OTHER_APPLICATION_ATTACKS":            2,
	"ATTACK_TYPE_TROJAN_BACKDOOR_SPYWARE":              3,
	"ATTACK_TYPE_DETECTION_EVASION":                    4,
	"ATTACK_TYPE_VULNERABILITY_SCAN":                   5,
	"ATTACK_TYPE_ABUSE_OF_FUNCTIONALITY":               6,
	"ATTACK_TYPE_AUTHENTICATION_AUTHORIZATION_ATTACKS": 7,
	"ATTACK_TYPE_BUFFER_OVERFLOW":                      8,
	"ATTACK_TYPE_PREDICTABLE_RESOURCE_LOCATION":        9,
	"ATTACK_TYPE_INFORMATION_LEAKAGE":                  10,
	"ATTACK_TYPE_DIRECTORY_INDEXING":                   11,
	"ATTACK_TYPE_PATH_TRAVERSAL":                       12,
	"ATTACK_TYPE_XPATH_INJECTION":                      13,
	"ATTACK_TYPE_LDAP_INJECTION":                       14,
	"ATTACK_TYPE_SERVER_SIDE_CODE_INJECTION":           15,
	"ATTACK_TYPE_COMMAND_EXECUTION":                    16,
	"ATTACK_TYPE_SQL_INJECTION":                        17,
	"ATTACK_TYPE_CROSS_SITE_SCRIPTING":                 18,
	"ATTACK_TYPE_DENIAL_OF_SERVICE":                    19,
	"ATTACK_TYPE_HTTP_PARSER_ATTACK":                   20,
	"ATTACK_TYPE_SESSION_HIJACKING":                    21,
	"ATTACK_TYPE_HTTP_RESPONSE_SPLITTING":              22,
}

func (AttackType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{3}
}

// Enabled Attack Types
//
// x-displayName: "Enabled Attack Types"
// This list specifies which attack types are to be excluded from detection
type EnabledAttackTypes struct {
	// Enabled Attack Types
	//
	// x-displayName: "Enabled Attack Types"
	// x-required
	// This list specifies which attack types are to be excluded from detection
	EnabledAttackTypes []AttackType `protobuf:"varint,1,rep,packed,name=enabled_attack_types,json=enabledAttackTypes,proto3,enum=ves.io.schema.app_firewall.AttackType" json:"enabled_attack_types,omitempty"`
}

func (m *EnabledAttackTypes) Reset()      { *m = EnabledAttackTypes{} }
func (*EnabledAttackTypes) ProtoMessage() {}
func (*EnabledAttackTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{0}
}
func (m *EnabledAttackTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnabledAttackTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnabledAttackTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledAttackTypes.Merge(m, src)
}
func (m *EnabledAttackTypes) XXX_Size() int {
	return m.Size()
}
func (m *EnabledAttackTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledAttackTypes.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledAttackTypes proto.InternalMessageInfo

func (m *EnabledAttackTypes) GetEnabledAttackTypes() []AttackType {
	if m != nil {
		return m.EnabledAttackTypes
	}
	return nil
}

// Signature Selection Setting
//
// x-displayName: "Signature Selection Setting"
// Specifies signature settings to be used by WAF
type SignatureSelectionSetting struct {
	// Signature selection by accuracy
	//
	// x-displayName: "Signature Selection By Accuracy"
	// x-required
	// Specify the signatures to be selected by accuracy
	//
	// Types that are valid to be assigned to SignatureSelectionByAccuracy:
	//	*SignatureSelectionSetting_OnlyHighAccuracySignatures
	//	*SignatureSelectionSetting_HighMediumAccuracySignatures
	//	*SignatureSelectionSetting_HighMediumLowAccuracySignatures
	SignatureSelectionByAccuracy isSignatureSelectionSetting_SignatureSelectionByAccuracy `protobuf_oneof:"signature_selection_by_accuracy"`
	// Attack Types
	//
	// x-displayName: "Attack Types"
	// x-required
	// Specifies which attack types are to be enabled for detection
	//
	// Types that are valid to be assigned to AttackTypeSetting:
	//	*SignatureSelectionSetting_DefaultAttackTypeSettings
	//	*SignatureSelectionSetting_EnabledAttackTypes
	AttackTypeSetting isSignatureSelectionSetting_AttackTypeSetting `protobuf_oneof:"attack_type_setting"`
}

func (m *SignatureSelectionSetting) Reset()      { *m = SignatureSelectionSetting{} }
func (*SignatureSelectionSetting) ProtoMessage() {}
func (*SignatureSelectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{1}
}
func (m *SignatureSelectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureSelectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignatureSelectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureSelectionSetting.Merge(m, src)
}
func (m *SignatureSelectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *SignatureSelectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureSelectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureSelectionSetting proto.InternalMessageInfo

type isSignatureSelectionSetting_SignatureSelectionByAccuracy interface {
	isSignatureSelectionSetting_SignatureSelectionByAccuracy()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSignatureSelectionSetting_AttackTypeSetting interface {
	isSignatureSelectionSetting_AttackTypeSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SignatureSelectionSetting_OnlyHighAccuracySignatures struct {
	OnlyHighAccuracySignatures *schema.Empty `protobuf:"bytes,2,opt,name=only_high_accuracy_signatures,json=onlyHighAccuracySignatures,proto3,oneof" json:"only_high_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_HighMediumAccuracySignatures struct {
	HighMediumAccuracySignatures *schema.Empty `protobuf:"bytes,3,opt,name=high_medium_accuracy_signatures,json=highMediumAccuracySignatures,proto3,oneof" json:"high_medium_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_HighMediumLowAccuracySignatures struct {
	HighMediumLowAccuracySignatures *schema.Empty `protobuf:"bytes,4,opt,name=high_medium_low_accuracy_signatures,json=highMediumLowAccuracySignatures,proto3,oneof" json:"high_medium_low_accuracy_signatures,omitempty"`
}
type SignatureSelectionSetting_DefaultAttackTypeSettings struct {
	DefaultAttackTypeSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_attack_type_settings,json=defaultAttackTypeSettings,proto3,oneof" json:"default_attack_type_settings,omitempty"`
}
type SignatureSelectionSetting_EnabledAttackTypes struct {
	EnabledAttackTypes *EnabledAttackTypes `protobuf:"bytes,7,opt,name=enabled_attack_types,json=enabledAttackTypes,proto3,oneof" json:"enabled_attack_types,omitempty"`
}

func (*SignatureSelectionSetting_OnlyHighAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_HighMediumAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_HighMediumLowAccuracySignatures) isSignatureSelectionSetting_SignatureSelectionByAccuracy() {
}
func (*SignatureSelectionSetting_DefaultAttackTypeSettings) isSignatureSelectionSetting_AttackTypeSetting() {
}
func (*SignatureSelectionSetting_EnabledAttackTypes) isSignatureSelectionSetting_AttackTypeSetting() {
}

func (m *SignatureSelectionSetting) GetSignatureSelectionByAccuracy() isSignatureSelectionSetting_SignatureSelectionByAccuracy {
	if m != nil {
		return m.SignatureSelectionByAccuracy
	}
	return nil
}
func (m *SignatureSelectionSetting) GetAttackTypeSetting() isSignatureSelectionSetting_AttackTypeSetting {
	if m != nil {
		return m.AttackTypeSetting
	}
	return nil
}

func (m *SignatureSelectionSetting) GetOnlyHighAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_OnlyHighAccuracySignatures); ok {
		return x.OnlyHighAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetHighMediumAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_HighMediumAccuracySignatures); ok {
		return x.HighMediumAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetHighMediumLowAccuracySignatures() *schema.Empty {
	if x, ok := m.GetSignatureSelectionByAccuracy().(*SignatureSelectionSetting_HighMediumLowAccuracySignatures); ok {
		return x.HighMediumLowAccuracySignatures
	}
	return nil
}

func (m *SignatureSelectionSetting) GetDefaultAttackTypeSettings() *schema.Empty {
	if x, ok := m.GetAttackTypeSetting().(*SignatureSelectionSetting_DefaultAttackTypeSettings); ok {
		return x.DefaultAttackTypeSettings
	}
	return nil
}

func (m *SignatureSelectionSetting) GetEnabledAttackTypes() *EnabledAttackTypes {
	if x, ok := m.GetAttackTypeSetting().(*SignatureSelectionSetting_EnabledAttackTypes); ok {
		return x.EnabledAttackTypes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignatureSelectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignatureSelectionSetting_OnlyHighAccuracySignatures)(nil),
		(*SignatureSelectionSetting_HighMediumAccuracySignatures)(nil),
		(*SignatureSelectionSetting_HighMediumLowAccuracySignatures)(nil),
		(*SignatureSelectionSetting_DefaultAttackTypeSettings)(nil),
		(*SignatureSelectionSetting_EnabledAttackTypes)(nil),
	}
}

// Enabled HTTP Protocol Violations
//
// x-displayName: "Enabled HTTP Protocol Violations"
// list of enabled sub-violation types for detection.
type EnabledHTTPProtocolSubViolations struct {
	// Enabled HTTP Protocol Violations
	//
	// x-displayName: "Enabled HTTP Protocol Violations"
	// x-required
	// list of enabled sub-violation types for detection.
	HttpProtocolSubViolations []HTTPProtocolSubViolationType `protobuf:"varint,1,rep,packed,name=http_protocol_sub_violations,json=httpProtocolSubViolations,proto3,enum=ves.io.schema.app_firewall.HTTPProtocolSubViolationType" json:"http_protocol_sub_violations,omitempty"`
}

func (m *EnabledHTTPProtocolSubViolations) Reset()      { *m = EnabledHTTPProtocolSubViolations{} }
func (*EnabledHTTPProtocolSubViolations) ProtoMessage() {}
func (*EnabledHTTPProtocolSubViolations) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{2}
}
func (m *EnabledHTTPProtocolSubViolations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnabledHTTPProtocolSubViolations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnabledHTTPProtocolSubViolations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledHTTPProtocolSubViolations.Merge(m, src)
}
func (m *EnabledHTTPProtocolSubViolations) XXX_Size() int {
	return m.Size()
}
func (m *EnabledHTTPProtocolSubViolations) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledHTTPProtocolSubViolations.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledHTTPProtocolSubViolations proto.InternalMessageInfo

func (m *EnabledHTTPProtocolSubViolations) GetHttpProtocolSubViolations() []HTTPProtocolSubViolationType {
	if m != nil {
		return m.HttpProtocolSubViolations
	}
	return nil
}

// Enabled Evasion Violations
//
// x-displayName: "Enabled Evasion Violations"
// list of enabled sub-violation types for detection.
type EnabledEvasionSubViolations struct {
	// Evasion Violation Settings
	//
	// x-displayName: "Evasion Violations"
	// x-required
	// list of enabled sub-violation types for detection.
	EvasionViolationSettings []EvasionSubViolationType `protobuf:"varint,1,rep,packed,name=evasion_violation_settings,json=evasionViolationSettings,proto3,enum=ves.io.schema.app_firewall.EvasionSubViolationType" json:"evasion_violation_settings,omitempty"`
}

func (m *EnabledEvasionSubViolations) Reset()      { *m = EnabledEvasionSubViolations{} }
func (*EnabledEvasionSubViolations) ProtoMessage() {}
func (*EnabledEvasionSubViolations) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{3}
}
func (m *EnabledEvasionSubViolations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnabledEvasionSubViolations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnabledEvasionSubViolations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledEvasionSubViolations.Merge(m, src)
}
func (m *EnabledEvasionSubViolations) XXX_Size() int {
	return m.Size()
}
func (m *EnabledEvasionSubViolations) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledEvasionSubViolations.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledEvasionSubViolations proto.InternalMessageInfo

func (m *EnabledEvasionSubViolations) GetEvasionViolationSettings() []EvasionSubViolationType {
	if m != nil {
		return m.EvasionViolationSettings
	}
	return nil
}

// Violation Setting
//
// x-displayName: "Violation Setting"
// Specifies violation settings to be used by WAF
type ViolationSetting struct {
	// Enable Violations
	//
	// x-displayName: "Enable Violations for Detection"
	// x-required
	// List of violations to be detected
	EnabledViolationTypes []ViolationType `protobuf:"varint,1,rep,packed,name=enabled_violation_types,json=enabledViolationTypes,proto3,enum=ves.io.schema.app_firewall.ViolationType" json:"enabled_violation_types,omitempty"`
	// HTTP Protocol Violation Setting
	//
	// x-displayName: "HTTP Protocol Violation Setting"
	// x-required
	// Violation detection settings
	//
	// Types that are valid to be assigned to HttpProtocolViolationSetting:
	//	*ViolationSetting_DefaultHttpProtocolViolationSettings
	//	*ViolationSetting_EnabledHttpProtocolViolations
	HttpProtocolViolationSetting isViolationSetting_HttpProtocolViolationSetting `protobuf_oneof:"http_protocol_violation_setting"`
	// Evasion Violation Setting
	//
	// x-displayName: "Evasion Violation Setting"
	// x-required
	// Violation detection settings
	//
	// Types that are valid to be assigned to EvasionViolationSetting:
	//	*ViolationSetting_DefaultEvasionViolationSettings
	//	*ViolationSetting_EnabledEvasionViolations
	EvasionViolationSetting isViolationSetting_EvasionViolationSetting `protobuf_oneof:"evasion_violation_setting"`
}

func (m *ViolationSetting) Reset()      { *m = ViolationSetting{} }
func (*ViolationSetting) ProtoMessage() {}
func (*ViolationSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{4}
}
func (m *ViolationSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViolationSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ViolationSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViolationSetting.Merge(m, src)
}
func (m *ViolationSetting) XXX_Size() int {
	return m.Size()
}
func (m *ViolationSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ViolationSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ViolationSetting proto.InternalMessageInfo

type isViolationSetting_HttpProtocolViolationSetting interface {
	isViolationSetting_HttpProtocolViolationSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isViolationSetting_EvasionViolationSetting interface {
	isViolationSetting_EvasionViolationSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ViolationSetting_DefaultHttpProtocolViolationSettings struct {
	DefaultHttpProtocolViolationSettings *schema.Empty `protobuf:"bytes,3,opt,name=default_http_protocol_violation_settings,json=defaultHttpProtocolViolationSettings,proto3,oneof" json:"default_http_protocol_violation_settings,omitempty"`
}
type ViolationSetting_EnabledHttpProtocolViolations struct {
	EnabledHttpProtocolViolations *EnabledHTTPProtocolSubViolations `protobuf:"bytes,4,opt,name=enabled_http_protocol_violations,json=enabledHttpProtocolViolations,proto3,oneof" json:"enabled_http_protocol_violations,omitempty"`
}
type ViolationSetting_DefaultEvasionViolationSettings struct {
	DefaultEvasionViolationSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_evasion_violation_settings,json=defaultEvasionViolationSettings,proto3,oneof" json:"default_evasion_violation_settings,omitempty"`
}
type ViolationSetting_EnabledEvasionViolations struct {
	EnabledEvasionViolations *EnabledEvasionSubViolations `protobuf:"bytes,7,opt,name=enabled_evasion_violations,json=enabledEvasionViolations,proto3,oneof" json:"enabled_evasion_violations,omitempty"`
}

func (*ViolationSetting_DefaultHttpProtocolViolationSettings) isViolationSetting_HttpProtocolViolationSetting() {
}
func (*ViolationSetting_EnabledHttpProtocolViolations) isViolationSetting_HttpProtocolViolationSetting() {
}
func (*ViolationSetting_DefaultEvasionViolationSettings) isViolationSetting_EvasionViolationSetting() {
}
func (*ViolationSetting_EnabledEvasionViolations) isViolationSetting_EvasionViolationSetting() {}

func (m *ViolationSetting) GetHttpProtocolViolationSetting() isViolationSetting_HttpProtocolViolationSetting {
	if m != nil {
		return m.HttpProtocolViolationSetting
	}
	return nil
}
func (m *ViolationSetting) GetEvasionViolationSetting() isViolationSetting_EvasionViolationSetting {
	if m != nil {
		return m.EvasionViolationSetting
	}
	return nil
}

func (m *ViolationSetting) GetEnabledViolationTypes() []ViolationType {
	if m != nil {
		return m.EnabledViolationTypes
	}
	return nil
}

func (m *ViolationSetting) GetDefaultHttpProtocolViolationSettings() *schema.Empty {
	if x, ok := m.GetHttpProtocolViolationSetting().(*ViolationSetting_DefaultHttpProtocolViolationSettings); ok {
		return x.DefaultHttpProtocolViolationSettings
	}
	return nil
}

func (m *ViolationSetting) GetEnabledHttpProtocolViolations() *EnabledHTTPProtocolSubViolations {
	if x, ok := m.GetHttpProtocolViolationSetting().(*ViolationSetting_EnabledHttpProtocolViolations); ok {
		return x.EnabledHttpProtocolViolations
	}
	return nil
}

func (m *ViolationSetting) GetDefaultEvasionViolationSettings() *schema.Empty {
	if x, ok := m.GetEvasionViolationSetting().(*ViolationSetting_DefaultEvasionViolationSettings); ok {
		return x.DefaultEvasionViolationSettings
	}
	return nil
}

func (m *ViolationSetting) GetEnabledEvasionViolations() *EnabledEvasionSubViolations {
	if x, ok := m.GetEvasionViolationSetting().(*ViolationSetting_EnabledEvasionViolations); ok {
		return x.EnabledEvasionViolations
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ViolationSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ViolationSetting_DefaultHttpProtocolViolationSettings)(nil),
		(*ViolationSetting_EnabledHttpProtocolViolations)(nil),
		(*ViolationSetting_DefaultEvasionViolationSettings)(nil),
		(*ViolationSetting_EnabledEvasionViolations)(nil),
	}
}

// Detection Setting
//
// x-displayName: "Detection Setting"
// Specifies detection settings to be used by WAF
type DetectionSetting struct {
	// Signature Selection Setting
	//
	// x-displayName: "Signature Selection Setting"
	// Specifies signature settings to be used by WAF
	SignatureSelectionSetting *SignatureSelectionSetting `protobuf:"bytes,1,opt,name=signature_selection_setting,json=signatureSelectionSetting,proto3" json:"signature_selection_setting,omitempty"`
	// Automatic False Positive Suppression
	//
	// x-displayName: "Automatic False Positive Suppression"
	// x-required
	// Enable or disable automatic suppression of false positives
	//
	// Types that are valid to be assigned to FalsePositiveSuppression:
	//	*DetectionSetting_EnableSuppression
	//	*DetectionSetting_DisableSuppression
	FalsePositiveSuppression isDetectionSetting_FalsePositiveSuppression `protobuf_oneof:"false_positive_suppression"`
	// Threat Campaign Choice
	//
	// x-displayName: "Threat Campaign Choice"
	// x-required
	// Enable or disable F5 threat campaign detection feature
	//
	// Types that are valid to be assigned to ThreatCampaignChoice:
	//	*DetectionSetting_EnableThreatCampaigns
	//	*DetectionSetting_DisableThreatCampaigns
	ThreatCampaignChoice isDetectionSetting_ThreatCampaignChoice `protobuf_oneof:"threat_campaign_choice"`
	// Violation Detection Setting
	//
	// x-displayName: "Violation Detection Setting"
	// x-required
	// Violation detection settings
	//
	// Types that are valid to be assigned to ViolationDetectionSetting:
	//	*DetectionSetting_DefaultViolationSettings
	//	*DetectionSetting_EnabledViolationTypes
	ViolationDetectionSetting isDetectionSetting_ViolationDetectionSetting `protobuf_oneof:"violation_detection_setting"`
}

func (m *DetectionSetting) Reset()      { *m = DetectionSetting{} }
func (*DetectionSetting) ProtoMessage() {}
func (*DetectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{5}
}
func (m *DetectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DetectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionSetting.Merge(m, src)
}
func (m *DetectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *DetectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionSetting proto.InternalMessageInfo

type isDetectionSetting_FalsePositiveSuppression interface {
	isDetectionSetting_FalsePositiveSuppression()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_ThreatCampaignChoice interface {
	isDetectionSetting_ThreatCampaignChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDetectionSetting_ViolationDetectionSetting interface {
	isDetectionSetting_ViolationDetectionSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DetectionSetting_EnableSuppression struct {
	EnableSuppression *schema.Empty `protobuf:"bytes,3,opt,name=enable_suppression,json=enableSuppression,proto3,oneof" json:"enable_suppression,omitempty"`
}
type DetectionSetting_DisableSuppression struct {
	DisableSuppression *schema.Empty `protobuf:"bytes,4,opt,name=disable_suppression,json=disableSuppression,proto3,oneof" json:"disable_suppression,omitempty"`
}
type DetectionSetting_EnableThreatCampaigns struct {
	EnableThreatCampaigns *schema.Empty `protobuf:"bytes,6,opt,name=enable_threat_campaigns,json=enableThreatCampaigns,proto3,oneof" json:"enable_threat_campaigns,omitempty"`
}
type DetectionSetting_DisableThreatCampaigns struct {
	DisableThreatCampaigns *schema.Empty `protobuf:"bytes,7,opt,name=disable_threat_campaigns,json=disableThreatCampaigns,proto3,oneof" json:"disable_threat_campaigns,omitempty"`
}
type DetectionSetting_DefaultViolationSettings struct {
	DefaultViolationSettings *schema.Empty `protobuf:"bytes,9,opt,name=default_violation_settings,json=defaultViolationSettings,proto3,oneof" json:"default_violation_settings,omitempty"`
}
type DetectionSetting_EnabledViolationTypes struct {
	EnabledViolationTypes *ViolationSetting `protobuf:"bytes,10,opt,name=enabled_violation_types,json=enabledViolationTypes,proto3,oneof" json:"enabled_violation_types,omitempty"`
}

func (*DetectionSetting_EnableSuppression) isDetectionSetting_FalsePositiveSuppression()         {}
func (*DetectionSetting_DisableSuppression) isDetectionSetting_FalsePositiveSuppression()        {}
func (*DetectionSetting_EnableThreatCampaigns) isDetectionSetting_ThreatCampaignChoice()         {}
func (*DetectionSetting_DisableThreatCampaigns) isDetectionSetting_ThreatCampaignChoice()        {}
func (*DetectionSetting_DefaultViolationSettings) isDetectionSetting_ViolationDetectionSetting() {}
func (*DetectionSetting_EnabledViolationTypes) isDetectionSetting_ViolationDetectionSetting()    {}

func (m *DetectionSetting) GetFalsePositiveSuppression() isDetectionSetting_FalsePositiveSuppression {
	if m != nil {
		return m.FalsePositiveSuppression
	}
	return nil
}
func (m *DetectionSetting) GetThreatCampaignChoice() isDetectionSetting_ThreatCampaignChoice {
	if m != nil {
		return m.ThreatCampaignChoice
	}
	return nil
}
func (m *DetectionSetting) GetViolationDetectionSetting() isDetectionSetting_ViolationDetectionSetting {
	if m != nil {
		return m.ViolationDetectionSetting
	}
	return nil
}

func (m *DetectionSetting) GetSignatureSelectionSetting() *SignatureSelectionSetting {
	if m != nil {
		return m.SignatureSelectionSetting
	}
	return nil
}

func (m *DetectionSetting) GetEnableSuppression() *schema.Empty {
	if x, ok := m.GetFalsePositiveSuppression().(*DetectionSetting_EnableSuppression); ok {
		return x.EnableSuppression
	}
	return nil
}

func (m *DetectionSetting) GetDisableSuppression() *schema.Empty {
	if x, ok := m.GetFalsePositiveSuppression().(*DetectionSetting_DisableSuppression); ok {
		return x.DisableSuppression
	}
	return nil
}

func (m *DetectionSetting) GetEnableThreatCampaigns() *schema.Empty {
	if x, ok := m.GetThreatCampaignChoice().(*DetectionSetting_EnableThreatCampaigns); ok {
		return x.EnableThreatCampaigns
	}
	return nil
}

func (m *DetectionSetting) GetDisableThreatCampaigns() *schema.Empty {
	if x, ok := m.GetThreatCampaignChoice().(*DetectionSetting_DisableThreatCampaigns); ok {
		return x.DisableThreatCampaigns
	}
	return nil
}

func (m *DetectionSetting) GetDefaultViolationSettings() *schema.Empty {
	if x, ok := m.GetViolationDetectionSetting().(*DetectionSetting_DefaultViolationSettings); ok {
		return x.DefaultViolationSettings
	}
	return nil
}

func (m *DetectionSetting) GetEnabledViolationTypes() *ViolationSetting {
	if x, ok := m.GetViolationDetectionSetting().(*DetectionSetting_EnabledViolationTypes); ok {
		return x.EnabledViolationTypes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DetectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DetectionSetting_EnableSuppression)(nil),
		(*DetectionSetting_DisableSuppression)(nil),
		(*DetectionSetting_EnableThreatCampaigns)(nil),
		(*DetectionSetting_DisableThreatCampaigns)(nil),
		(*DetectionSetting_DefaultViolationSettings)(nil),
		(*DetectionSetting_EnabledViolationTypes)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Application Firewall Specification"
type GlobalSpecType struct {
	// Enforcement Mode
	//
	// x-displayName: "Enforcement Mode"
	// x-required
	// Specifies whether WAF needs to run in Blocking or Monitoring mode
	//
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*GlobalSpecType_UseLoadbalancerSetting
	//	*GlobalSpecType_Blocking
	//	*GlobalSpecType_Monitoring
	EnforcementModeChoice isGlobalSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Detection Settings
	//
	// x-displayName: "Detection Settings"
	// x-required
	// Settings used by WAF to detect malicious requests.
	// These settings can be used to tune WAF operation for optimum detection with minimal false positives.
	//
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*GlobalSpecType_DefaultDetectionSettings
	//	*GlobalSpecType_DetectionSettings
	DetectionSettingChoice isGlobalSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{6}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_EnforcementModeChoice interface {
	isGlobalSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DetectionSettingChoice interface {
	isGlobalSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type GlobalSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type GlobalSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type GlobalSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type GlobalSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}

func (*GlobalSpecType_UseLoadbalancerSetting) isGlobalSpecType_EnforcementModeChoice()    {}
func (*GlobalSpecType_Blocking) isGlobalSpecType_EnforcementModeChoice()                  {}
func (*GlobalSpecType_Monitoring) isGlobalSpecType_EnforcementModeChoice()                {}
func (*GlobalSpecType_DefaultDetectionSettings) isGlobalSpecType_DetectionSettingChoice() {}
func (*GlobalSpecType_DetectionSettings) isGlobalSpecType_DetectionSettingChoice()        {}

func (m *GlobalSpecType) GetEnforcementModeChoice() isGlobalSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDetectionSettingChoice() isGlobalSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}

func (m *GlobalSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *GlobalSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *GlobalSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GlobalSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *GlobalSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*GlobalSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_UseLoadbalancerSetting)(nil),
		(*GlobalSpecType_Blocking)(nil),
		(*GlobalSpecType_Monitoring)(nil),
		(*GlobalSpecType_DefaultDetectionSettings)(nil),
		(*GlobalSpecType_DetectionSettings)(nil),
	}
}

// Create Application Firewall
//
// x-displayName: "Create Application Firewall"
// Create Application Firewall
type CreateSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*CreateSpecType_UseLoadbalancerSetting
	//	*CreateSpecType_Blocking
	//	*CreateSpecType_Monitoring
	EnforcementModeChoice isCreateSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*CreateSpecType_DefaultDetectionSettings
	//	*CreateSpecType_DetectionSettings
	DetectionSettingChoice isCreateSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{7}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_EnforcementModeChoice interface {
	isCreateSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DetectionSettingChoice interface {
	isCreateSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type CreateSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type CreateSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type CreateSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type CreateSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}

func (*CreateSpecType_UseLoadbalancerSetting) isCreateSpecType_EnforcementModeChoice()    {}
func (*CreateSpecType_Blocking) isCreateSpecType_EnforcementModeChoice()                  {}
func (*CreateSpecType_Monitoring) isCreateSpecType_EnforcementModeChoice()                {}
func (*CreateSpecType_DefaultDetectionSettings) isCreateSpecType_DetectionSettingChoice() {}
func (*CreateSpecType_DetectionSettings) isCreateSpecType_DetectionSettingChoice()        {}

func (m *CreateSpecType) GetEnforcementModeChoice() isCreateSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *CreateSpecType) GetDetectionSettingChoice() isCreateSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}

func (m *CreateSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *CreateSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *CreateSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*CreateSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *CreateSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *CreateSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*CreateSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_UseLoadbalancerSetting)(nil),
		(*CreateSpecType_Blocking)(nil),
		(*CreateSpecType_Monitoring)(nil),
		(*CreateSpecType_DefaultDetectionSettings)(nil),
		(*CreateSpecType_DetectionSettings)(nil),
	}
}

// Replace Application Firewall
//
// x-displayName: "Replace Application Firewall"
// Replace Application Firewall
type ReplaceSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*ReplaceSpecType_UseLoadbalancerSetting
	//	*ReplaceSpecType_Blocking
	//	*ReplaceSpecType_Monitoring
	EnforcementModeChoice isReplaceSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*ReplaceSpecType_DefaultDetectionSettings
	//	*ReplaceSpecType_DetectionSettings
	DetectionSettingChoice isReplaceSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{8}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_EnforcementModeChoice interface {
	isReplaceSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DetectionSettingChoice interface {
	isReplaceSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type ReplaceSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type ReplaceSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type ReplaceSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type ReplaceSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}

func (*ReplaceSpecType_UseLoadbalancerSetting) isReplaceSpecType_EnforcementModeChoice()    {}
func (*ReplaceSpecType_Blocking) isReplaceSpecType_EnforcementModeChoice()                  {}
func (*ReplaceSpecType_Monitoring) isReplaceSpecType_EnforcementModeChoice()                {}
func (*ReplaceSpecType_DefaultDetectionSettings) isReplaceSpecType_DetectionSettingChoice() {}
func (*ReplaceSpecType_DetectionSettings) isReplaceSpecType_DetectionSettingChoice()        {}

func (m *ReplaceSpecType) GetEnforcementModeChoice() isReplaceSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetDetectionSettingChoice() isReplaceSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *ReplaceSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *ReplaceSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*ReplaceSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*ReplaceSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_UseLoadbalancerSetting)(nil),
		(*ReplaceSpecType_Blocking)(nil),
		(*ReplaceSpecType_Monitoring)(nil),
		(*ReplaceSpecType_DefaultDetectionSettings)(nil),
		(*ReplaceSpecType_DetectionSettings)(nil),
	}
}

// Get Application Firewall
//
// x-displayName: "Get Application Firewall"
// Get Application Firewall
type GetSpecType struct {
	// Types that are valid to be assigned to EnforcementModeChoice:
	//	*GetSpecType_UseLoadbalancerSetting
	//	*GetSpecType_Blocking
	//	*GetSpecType_Monitoring
	EnforcementModeChoice isGetSpecType_EnforcementModeChoice `protobuf_oneof:"enforcement_mode_choice"`
	// Types that are valid to be assigned to DetectionSettingChoice:
	//	*GetSpecType_DefaultDetectionSettings
	//	*GetSpecType_DetectionSettings
	DetectionSettingChoice isGetSpecType_DetectionSettingChoice `protobuf_oneof:"detection_setting_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c53032614c5085, []int{9}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_EnforcementModeChoice interface {
	isGetSpecType_EnforcementModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DetectionSettingChoice interface {
	isGetSpecType_DetectionSettingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_UseLoadbalancerSetting struct {
	UseLoadbalancerSetting *schema.Empty `protobuf:"bytes,2,opt,name=use_loadbalancer_setting,json=useLoadbalancerSetting,proto3,oneof" json:"use_loadbalancer_setting,omitempty"`
}
type GetSpecType_Blocking struct {
	Blocking *schema.Empty `protobuf:"bytes,3,opt,name=blocking,proto3,oneof" json:"blocking,omitempty"`
}
type GetSpecType_Monitoring struct {
	Monitoring *schema.Empty `protobuf:"bytes,4,opt,name=monitoring,proto3,oneof" json:"monitoring,omitempty"`
}
type GetSpecType_DefaultDetectionSettings struct {
	DefaultDetectionSettings *schema.Empty `protobuf:"bytes,6,opt,name=default_detection_settings,json=defaultDetectionSettings,proto3,oneof" json:"default_detection_settings,omitempty"`
}
type GetSpecType_DetectionSettings struct {
	DetectionSettings *DetectionSetting `protobuf:"bytes,7,opt,name=detection_settings,json=detectionSettings,proto3,oneof" json:"detection_settings,omitempty"`
}

func (*GetSpecType_UseLoadbalancerSetting) isGetSpecType_EnforcementModeChoice()    {}
func (*GetSpecType_Blocking) isGetSpecType_EnforcementModeChoice()                  {}
func (*GetSpecType_Monitoring) isGetSpecType_EnforcementModeChoice()                {}
func (*GetSpecType_DefaultDetectionSettings) isGetSpecType_DetectionSettingChoice() {}
func (*GetSpecType_DetectionSettings) isGetSpecType_DetectionSettingChoice()        {}

func (m *GetSpecType) GetEnforcementModeChoice() isGetSpecType_EnforcementModeChoice {
	if m != nil {
		return m.EnforcementModeChoice
	}
	return nil
}
func (m *GetSpecType) GetDetectionSettingChoice() isGetSpecType_DetectionSettingChoice {
	if m != nil {
		return m.DetectionSettingChoice
	}
	return nil
}

func (m *GetSpecType) GetUseLoadbalancerSetting() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_UseLoadbalancerSetting); ok {
		return x.UseLoadbalancerSetting
	}
	return nil
}

func (m *GetSpecType) GetBlocking() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_Blocking); ok {
		return x.Blocking
	}
	return nil
}

func (m *GetSpecType) GetMonitoring() *schema.Empty {
	if x, ok := m.GetEnforcementModeChoice().(*GetSpecType_Monitoring); ok {
		return x.Monitoring
	}
	return nil
}

func (m *GetSpecType) GetDefaultDetectionSettings() *schema.Empty {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_DefaultDetectionSettings); ok {
		return x.DefaultDetectionSettings
	}
	return nil
}

func (m *GetSpecType) GetDetectionSettings() *DetectionSetting {
	if x, ok := m.GetDetectionSettingChoice().(*GetSpecType_DetectionSettings); ok {
		return x.DetectionSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_UseLoadbalancerSetting)(nil),
		(*GetSpecType_Blocking)(nil),
		(*GetSpecType_Monitoring)(nil),
		(*GetSpecType_DefaultDetectionSettings)(nil),
		(*GetSpecType_DetectionSettings)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.app_firewall.EvasionSubViolationType", EvasionSubViolationType_name, EvasionSubViolationType_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.HTTPProtocolSubViolationType", HTTPProtocolSubViolationType_name, HTTPProtocolSubViolationType_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.ViolationType", ViolationType_name, ViolationType_value)
	proto.RegisterEnum("ves.io.schema.app_firewall.AttackType", AttackType_name, AttackType_value)
	proto.RegisterType((*EnabledAttackTypes)(nil), "ves.io.schema.app_firewall.EnabledAttackTypes")
	proto.RegisterType((*SignatureSelectionSetting)(nil), "ves.io.schema.app_firewall.SignatureSelectionSetting")
	proto.RegisterType((*EnabledHTTPProtocolSubViolations)(nil), "ves.io.schema.app_firewall.EnabledHTTPProtocolSubViolations")
	proto.RegisterType((*EnabledEvasionSubViolations)(nil), "ves.io.schema.app_firewall.EnabledEvasionSubViolations")
	proto.RegisterType((*ViolationSetting)(nil), "ves.io.schema.app_firewall.ViolationSetting")
	proto.RegisterType((*DetectionSetting)(nil), "ves.io.schema.app_firewall.DetectionSetting")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_firewall.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_firewall.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_firewall.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_firewall.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/app_firewall/types.proto", fileDescriptor_f3c53032614c5085)
}

var fileDescriptor_f3c53032614c5085 = []byte{
	// 2374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6c, 0xdb, 0xc8,
	0x15, 0x36, 0x65, 0xd9, 0x96, 0x27, 0x9b, 0x84, 0x1e, 0x27, 0x8e, 0xff, 0x22, 0x7b, 0x9d, 0xdd,
	0x6c, 0x92, 0xf5, 0xcf, 0x26, 0xce, 0x26, 0xdd, 0x6d, 0xbb, 0xc0, 0x88, 0x1c, 0x9b, 0xb4, 0x29,
	0x92, 0xcb, 0xa1, 0xfc, 0xb3, 0x40, 0x31, 0xa0, 0x64, 0xda, 0x16, 0x56, 0x36, 0x05, 0x89, 0xb2,
	0xeb, 0x5b, 0xb1, 0x28, 0x50, 0xa0, 0x97, 0x16, 0x3d, 0xf4, 0xd4, 0x7b, 0x7b, 0x2d, 0xd0, 0x5e,
	0xea, 0x4b, 0x8e, 0x45, 0x7b, 0x31, 0x50, 0xa0, 0xd8, 0xe3, 0xae, 0x72, 0x69, 0x7b, 0xda, 0xf3,
	0x9e, 0x8a, 0xa1, 0x48, 0x89, 0xa4, 0x48, 0x39, 0x3d, 0xf5, 0x92, 0x8b, 0x41, 0xcd, 0xbc, 0xf7,
	0xbd, 0x6f, 0xde, 0xfb, 0xde, 0x1b, 0x5a, 0x02, 0x0f, 0xcf, 0xec, 0xe6, 0x6a, 0xd5, 0x59, 0x6b,
	0x56, 0x8e, 0xed, 0x13, 0x6b, 0xcd, 0xaa, 0xd7, 0xe9, 0x61, 0xb5, 0x61, 0x9f, 0x5b, 0xb5, 0xda,
	0x9a, 0x7b, 0x51, 0xb7, 0x9b, 0xab, 0xf5, 0x86, 0xe3, 0x3a, 0x70, 0xb6, 0x63, 0xb7, 0xda, 0xb1,
	0x5b, 0x0d, 0xdb, 0xcd, 0xae, 0x1c, 0x55, 0xdd, 0xe3, 0x56, 0x79, 0xb5, 0xe2, 0x9c, 0xac, 0x1d,
	0x39, 0x47, 0xce, 0x9a, 0xe7, 0x52, 0x6e, 0x1d, 0x7a, 0x9f, 0xbc, 0x0f, 0xde, 0x53, 0x07, 0x6a,
	0xf6, 0x5e, 0x34, 0xe4, 0xa9, 0xed, 0xfa, 0x1b, 0x73, 0xd1, 0x0d, 0xa7, 0xee, 0x56, 0x9d, 0x53,
	0x9f, 0xc0, 0xec, 0x62, 0x74, 0xb3, 0xee, 0xd4, 0xaa, 0x95, 0x8b, 0x30, 0xc5, 0xd9, 0x99, 0xa8,
	0x45, 0x78, 0x6b, 0x3e, 0xba, 0x75, 0x66, 0xd5, 0xaa, 0x07, 0x96, 0x6b, 0x27, 0x43, 0x9f, 0x55,
	0xed, 0x73, 0x1a, 0x09, 0xbe, 0xf4, 0x73, 0x0e, 0x40, 0x7c, 0x6a, 0x95, 0x6b, 0xf6, 0x01, 0x72,
	0x5d, 0xab, 0xf2, 0xa5, 0xc9, 0xc0, 0xe1, 0x29, 0xb8, 0x63, 0x77, 0x56, 0xa9, 0xe5, 0x2d, 0x53,
	0x2f, 0xe8, 0x34, 0xb7, 0x38, 0xfc, 0xe8, 0xd6, 0xb3, 0x87, 0xab, 0xe9, 0x39, 0x5b, 0xed, 0xc1,
	0x14, 0xee, 0xfc, 0xe5, 0xdf, 0xaf, 0x86, 0x47, 0x7e, 0xc3, 0x65, 0xf8, 0xa9, 0xe0, 0x69, 0x9a,
	0x33, 0xa0, 0xdd, 0x17, 0x6f, 0xa9, 0x9d, 0x05, 0x33, 0xa4, 0x7a, 0x74, 0x6a, 0xb9, 0xad, 0x86,
	0x4d, 0xec, 0x9a, 0x5d, 0x61, 0x24, 0x89, 0xed, 0xba, 0xd5, 0xd3, 0x23, 0xb8, 0x0f, 0xee, 0x3b,
	0xa7, 0xb5, 0x0b, 0x7a, 0x5c, 0x3d, 0x3a, 0xa6, 0x56, 0xa5, 0xd2, 0x6a, 0x58, 0x95, 0x0b, 0xda,
	0x0c, 0xec, 0x9b, 0xd3, 0x99, 0x45, 0xee, 0xd1, 0x8d, 0x67, 0x77, 0x62, 0xb4, 0xf0, 0x49, 0xdd,
	0xbd, 0x90, 0x86, 0x8c, 0x59, 0xe6, 0x2c, 0x55, 0x8f, 0x8e, 0x91, 0xef, 0xda, 0x8d, 0xd4, 0x84,
	0x3f, 0x01, 0x0b, 0x1e, 0xea, 0x89, 0x7d, 0x50, 0x6d, 0x9d, 0x24, 0x82, 0x0f, 0x0f, 0x04, 0x9f,
	0x67, 0xee, 0x45, 0xcf, 0x3b, 0x01, 0xfe, 0x00, 0x3c, 0x08, 0xc3, 0xd7, 0x9c, 0xf3, 0xc4, 0x10,
	0xd9, 0x81, 0x21, 0x16, 0x7a, 0x21, 0x14, 0xe7, 0x3c, 0x21, 0xca, 0x2e, 0x98, 0x3f, 0xb0, 0x0f,
	0xad, 0x56, 0xcd, 0x0d, 0x57, 0x8b, 0x36, 0x3b, 0xe9, 0x6b, 0x4e, 0x8f, 0x0e, 0x80, 0xe7, 0x8c,
	0x19, 0xdf, 0xb7, 0x57, 0x0f, 0x3f, 0xef, 0x4d, 0x58, 0x4e, 0x91, 0xc1, 0x98, 0x07, 0xb8, 0x3a,
	0x48, 0x06, 0xfd, 0xa2, 0x92, 0x12, 0x4b, 0x5f, 0x78, 0x0e, 0x16, 0xba, 0x99, 0xa0, 0xcd, 0xa0,
	0xf4, 0xb4, 0x7c, 0xd1, 0xcd, 0x14, 0x9c, 0x78, 0x75, 0xc9, 0x65, 0xae, 0x2e, 0x39, 0xae, 0x7d,
	0xc9, 0x8d, 0x3c, 0x5b, 0x5e, 0x5f, 0x7e, 0x5e, 0x78, 0x08, 0x26, 0x13, 0x8e, 0x0a, 0x6f, 0xbf,
	0xba, 0xe4, 0x46, 0xaf, 0x2e, 0xb9, 0x91, 0xf6, 0x25, 0x37, 0xfc, 0x62, 0xf9, 0xe5, 0x56, 0x36,
	0xc7, 0xf1, 0x99, 0xad, 0x6c, 0x6e, 0x84, 0x1f, 0x5d, 0xfa, 0x13, 0x07, 0x16, 0x7d, 0x5a, 0x92,
	0x69, 0xea, 0x3a, 0x6b, 0x80, 0x8a, 0x53, 0x23, 0xad, 0xf2, 0x4e, 0xd5, 0xa9, 0x59, 0x5e, 0x5b,
	0xc0, 0x5f, 0x71, 0x60, 0xfe, 0xd8, 0x75, 0xeb, 0xb4, 0xee, 0x6f, 0xd3, 0x66, 0xab, 0x4c, 0xcf,
	0xba, 0x06, 0x7e, 0x0b, 0xfc, 0x60, 0xd0, 0xd9, 0xd3, 0xd0, 0x63, 0x4d, 0x31, 0x19, 0x6a, 0x8a,
	0x19, 0x16, 0x33, 0x91, 0xd1, 0xd2, 0xef, 0x39, 0x30, 0xe7, 0xd3, 0xc6, 0x67, 0x56, 0x93, 0xf5,
	0x45, 0x84, 0xf1, 0x2f, 0x38, 0x30, 0x6b, 0x77, 0x36, 0x7a, 0x3c, 0x7b, 0xc5, 0xef, 0xf0, 0x5d,
	0x1f, 0x58, 0xab, 0x7e, 0xd8, 0x18, 0xd5, 0x5c, 0x88, 0xea, 0xb4, 0x1f, 0xac, 0x6b, 0x1b, 0xc8,
	0x65, 0xe9, 0x1f, 0x23, 0x80, 0x8f, 0xaf, 0xc2, 0x73, 0x70, 0x2f, 0xd0, 0x50, 0x8f, 0x5d, 0x78,
	0x9a, 0x3c, 0x1e, 0x44, 0x2d, 0x8d, 0x10, 0x08, 0x11, 0xba, 0xeb, 0xe3, 0x47, 0x6c, 0xd9, 0x0c,
	0x7b, 0x14, 0x74, 0x45, 0xb4, 0xa0, 0x09, 0x49, 0x1a, 0xdc, 0xe3, 0xef, 0xf9, 0x38, 0x52, 0xa8,
	0x46, 0x7d, 0xa7, 0x67, 0x75, 0x58, 0x0c, 0x4e, 0x9a, 0x12, 0x30, 0xe8, 0xf4, 0x1f, 0xbd, 0x41,
	0xe7, 0xa4, 0x4a, 0x54, 0x1a, 0x32, 0xee, 0xfb, 0x71, 0x12, 0x09, 0x35, 0x61, 0x05, 0x2c, 0x05,
	0x27, 0x1f, 0x20, 0x8c, 0xc1, 0x53, 0x61, 0xc1, 0x47, 0xc0, 0x29, 0xc5, 0x86, 0xe7, 0x60, 0x36,
	0x38, 0x6d, 0x5f, 0x90, 0x60, 0x42, 0xbc, 0x7c, 0x83, 0x73, 0x26, 0x69, 0x5a, 0x62, 0x2a, 0x8b,
	0x6c, 0xf7, 0xf6, 0x0a, 0xeb, 0x60, 0xe1, 0x9a, 0x7a, 0x42, 0xfe, 0xd5, 0x25, 0x37, 0x7c, 0x75,
	0xc9, 0x65, 0xda, 0x97, 0x5c, 0x76, 0x7d, 0x79, 0xf1, 0x79, 0x61, 0x05, 0xcc, 0xa4, 0xa6, 0xc2,
	0x33, 0x0f, 0xa6, 0x46, 0xf6, 0xc5, 0xf2, 0x22, 0x1b, 0x1b, 0x19, 0x7e, 0xd8, 0x1f, 0x1b, 0xbf,
	0x1d, 0x05, 0xbc, 0x68, 0xbb, 0xd1, 0x2b, 0xa9, 0x05, 0xe6, 0x92, 0xa6, 0x96, 0x8f, 0x38, 0xcd,
	0x79, 0xc7, 0xff, 0x78, 0xd0, 0xf1, 0x53, 0xaf, 0x3b, 0x63, 0xa6, 0x99, 0x7a, 0x13, 0x62, 0xe0,
	0x8f, 0x50, 0xda, 0x6c, 0xd5, 0xeb, 0x0d, 0xbb, 0xc9, 0x4e, 0x74, 0x8d, 0x7a, 0x27, 0x3a, 0x1e,
	0xa4, 0xe7, 0x00, 0x37, 0xc1, 0xe4, 0x41, 0xb5, 0xd9, 0x87, 0x33, 0xf8, 0x1a, 0x82, 0xbe, 0x4b,
	0x18, 0x48, 0x0d, 0x9a, 0x9b, 0xba, 0xc7, 0x0d, 0xdb, 0x72, 0x69, 0xc5, 0x3a, 0xa9, 0x5b, 0xd5,
	0xa3, 0xd3, 0xeb, 0xe4, 0xe5, 0xf7, 0xac, 0xe9, 0x79, 0x09, 0x81, 0x13, 0xd4, 0xc1, 0x74, 0x40,
	0xac, 0x0f, 0x70, 0x6c, 0x20, 0xe0, 0x94, 0xef, 0x17, 0x47, 0x34, 0xc1, 0x6c, 0xd0, 0x0b, 0x09,
	0x3d, 0x30, 0x3e, 0x00, 0x33, 0x63, 0x4c, 0xfb, 0x9e, 0xfd, 0xe2, 0x3f, 0x4c, 0x1f, 0x6a, 0xc0,
	0x83, 0x5c, 0x7e, 0xa3, 0xa1, 0xe6, 0xe3, 0x49, 0x99, 0x94, 0x19, 0x56, 0x58, 0x01, 0xb3, 0x87,
	0x56, 0xad, 0x69, 0xd3, 0xba, 0xd3, 0xac, 0xba, 0xd5, 0xb3, 0x48, 0xbd, 0xbc, 0xdb, 0x2e, 0x90,
	0xf9, 0x30, 0xbb, 0x15, 0x1f, 0x83, 0xa9, 0x58, 0xda, 0x68, 0xe5, 0xd8, 0xa9, 0x56, 0xec, 0xbe,
	0x8b, 0xb1, 0xb0, 0x06, 0xe6, 0x7a, 0xcc, 0x0f, 0x02, 0x79, 0x47, 0x5a, 0x62, 0xfc, 0xea, 0x92,
	0xcb, 0xb1, 0x96, 0xf8, 0x64, 0xf9, 0xe9, 0x47, 0xe1, 0x96, 0xd8, 0xca, 0xe6, 0x72, 0xfc, 0xf8,
	0xd2, 0x7f, 0x86, 0xc1, 0xad, 0xcd, 0x9a, 0x53, 0xb6, 0x6a, 0xa4, 0x6e, 0x57, 0x18, 0x61, 0x56,
	0xbf, 0x56, 0xd3, 0xa6, 0x35, 0xc7, 0x3a, 0x28, 0x5b, 0x35, 0xeb, 0xb4, 0x62, 0x37, 0xba, 0x3d,
	0x31, 0xf8, 0x25, 0x6d, 0xaa, 0xd5, 0xb4, 0x95, 0x90, 0x5b, 0xa0, 0xf8, 0x67, 0x20, 0x57, 0xae,
	0x39, 0x95, 0x2f, 0x19, 0xc2, 0x60, 0x9d, 0x77, 0xed, 0xe0, 0x0b, 0x00, 0x4e, 0x9c, 0xd3, 0xaa,
	0xeb, 0x34, 0x98, 0xd7, 0x60, 0x55, 0x87, 0x2c, 0xc3, 0x5a, 0xe9, 0xcb, 0xc8, 0x75, 0x82, 0x0e,
	0xb4, 0x12, 0x9f, 0x14, 0xec, 0x15, 0x13, 0x26, 0xa0, 0x8d, 0x5d, 0x2f, 0x93, 0x38, 0x94, 0xc4,
	0x19, 0x13, 0x07, 0x71, 0xf8, 0xc2, 0x32, 0x93, 0xe2, 0xa1, 0xd3, 0xa8, 0xd8, 0x27, 0xf6, 0xa9,
	0x4b, 0x4f, 0x9c, 0x03, 0x3b, 0x28, 0x7a, 0xc2, 0x7b, 0xd3, 0x87, 0x60, 0xba, 0x8f, 0x4c, 0x9a,
	0x46, 0xa2, 0x2f, 0x4f, 0x59, 0x70, 0x4b, 0x60, 0xd2, 0xb2, 0xdf, 0x16, 0xfb, 0xff, 0x56, 0xec,
	0x4f, 0x27, 0xfe, 0xf6, 0x59, 0xac, 0xe5, 0x0a, 0x9b, 0xe9, 0xf5, 0x5f, 0xee, 0xab, 0xff, 0x57,
	0xdf, 0x73, 0x69, 0xd6, 0x85, 0xcd, 0x01, 0xd2, 0xf8, 0x30, 0x26, 0x8d, 0xaf, 0xbe, 0xe7, 0x52,
	0x8d, 0x23, 0xb2, 0xf9, 0x73, 0x16, 0xdc, 0x36, 0xec, 0x7a, 0xcd, 0xaa, 0xbc, 0xd5, 0xcd, 0x5b,
	0xdd, 0xbc, 0xb9, 0x6e, 0xfe, 0x98, 0x05, 0x37, 0x36, 0x6d, 0xf7, 0xad, 0x66, 0xde, 0x6a, 0xe6,
	0x4d, 0x35, 0xf3, 0xe4, 0xef, 0x19, 0x70, 0x2f, 0xe5, 0x5f, 0x59, 0x78, 0x17, 0x4c, 0xec, 0xc8,
	0x9a, 0x42, 0xf1, 0x0e, 0x22, 0xb2, 0xa6, 0x52, 0x55, 0x53, 0x31, 0x3f, 0x04, 0xef, 0x83, 0x99,
	0xc8, 0x72, 0x01, 0x89, 0xb4, 0xa4, 0x62, 0x22, 0x20, 0x1d, 0xf3, 0x1c, 0x5c, 0x02, 0xf9, 0xc8,
	0x36, 0xd2, 0x91, 0x20, 0x61, 0xba, 0x2b, 0xc9, 0x26, 0x26, 0x3a, 0x12, 0x30, 0x9f, 0x81, 0x0f,
	0xc0, 0x42, 0x0c, 0xc2, 0xc0, 0xb4, 0xb0, 0x6f, 0x62, 0x2a, 0x62, 0x41, 0x13, 0x65, 0x75, 0x93,
	0x1f, 0x86, 0x1f, 0x80, 0x07, 0x11, 0x23, 0x59, 0x26, 0xb4, 0xa4, 0xca, 0x82, 0x26, 0x62, 0xca,
	0xfe, 0xe8, 0x9a, 0xac, 0x9a, 0x84, 0xcf, 0xc2, 0x45, 0x30, 0xdf, 0x67, 0x58, 0x40, 0xc2, 0x36,
	0x51, 0x10, 0x91, 0x30, 0xe1, 0x47, 0xe0, 0x1c, 0xb8, 0x17, 0xb1, 0x28, 0xf5, 0xe2, 0x8c, 0xf6,
	0x11, 0x2e, 0x96, 0x14, 0x53, 0xd6, 0x95, 0x10, 0x97, 0x31, 0xf8, 0x3e, 0x78, 0x37, 0x62, 0x23,
	0xca, 0x06, 0x16, 0x4c, 0xcd, 0xd8, 0xa7, 0xa6, 0x81, 0x76, 0xb0, 0x41, 0x90, 0x42, 0xf8, 0xdc,
	0x93, 0x7f, 0xe6, 0xc0, 0xfc, 0xa0, 0x2f, 0x32, 0xba, 0x44, 0x98, 0x11, 0xd5, 0x0d, 0xcd, 0xd4,
	0x04, 0x4d, 0x09, 0x12, 0xbb, 0x0c, 0x1e, 0x25, 0x6c, 0x76, 0xe9, 0x48, 0x1a, 0x31, 0xa9, 0x84,
	0x91, 0x88, 0x0d, 0xc2, 0x73, 0xf0, 0x13, 0xf0, 0x71, 0x82, 0xb5, 0x20, 0x61, 0x61, 0x9b, 0x16,
	0xd1, 0x9e, 0x5c, 0x2c, 0x15, 0xa9, 0x5a, 0x2a, 0x16, 0xb0, 0x41, 0xb5, 0x0d, 0xaa, 0x23, 0x03,
	0x15, 0xb1, 0xc9, 0x5c, 0x33, 0x29, 0x81, 0x58, 0x1d, 0x43, 0x31, 0xe8, 0x0e, 0x52, 0x4a, 0x98,
	0x1f, 0x86, 0x2f, 0xc0, 0xb3, 0xff, 0x21, 0x50, 0x40, 0x30, 0x0b, 0x9f, 0x82, 0x95, 0x04, 0xbf,
	0x92, 0xaa, 0x23, 0x83, 0xa0, 0x82, 0x82, 0xa9, 0x81, 0x3f, 0x2f, 0x61, 0x62, 0x52, 0x41, 0x53,
	0x4d, 0xac, 0x9a, 0xfc, 0x08, 0x7c, 0x09, 0xd6, 0x13, 0x5c, 0x24, 0x79, 0x53, 0xa2, 0x88, 0x08,
	0xb2, 0x4c, 0x05, 0x09, 0x19, 0x48, 0x60, 0xc7, 0xa0, 0xb2, 0xda, 0x8d, 0x35, 0x0a, 0x1f, 0x82,
	0xa5, 0xa4, 0xbc, 0x96, 0x14, 0x85, 0xd9, 0xf9, 0x81, 0xf8, 0xb1, 0xae, 0xa6, 0x12, 0x4e, 0xce,
	0x56, 0x58, 0x25, 0x65, 0x4d, 0xe5, 0x73, 0x10, 0x81, 0x1f, 0x27, 0x1d, 0xba, 0xc3, 0x94, 0x2a,
	0x58, 0xdd, 0x34, 0x25, 0x4a, 0x24, 0xad, 0xa4, 0x88, 0xb4, 0x80, 0x29, 0xa2, 0xba, 0x46, 0x64,
	0x53, 0xde, 0xc1, 0x7e, 0x2a, 0xf8, 0xf1, 0x94, 0xbc, 0x85, 0x33, 0xcc, 0xe0, 0x90, 0xac, 0x12,
	0x2a, 0xeb, 0x14, 0x89, 0xa2, 0x81, 0x09, 0xe1, 0x01, 0xfc, 0x21, 0x78, 0x99, 0x14, 0xda, 0x50,
	0x36, 0xc2, 0xc7, 0x2f, 0xe0, 0x0d, 0xcd, 0xe8, 0xe5, 0x90, 0x98, 0xc8, 0x30, 0xf9, 0x1b, 0x29,
	0xaa, 0x50, 0xb5, 0x48, 0x5c, 0x96, 0x3a, 0xb6, 0xff, 0x94, 0x3e, 0xed, 0xe6, 0xe6, 0x9d, 0x94,
	0xe4, 0xb3, 0xdc, 0x74, 0x24, 0x88, 0x0c, 0x33, 0x24, 0x23, 0xf6, 0x48, 0x58, 0x73, 0xdc, 0x84,
	0x9f, 0x81, 0x4f, 0xaf, 0x75, 0xdc, 0xd0, 0x8c, 0x22, 0x15, 0x91, 0x89, 0xba, 0x8c, 0x03, 0xff,
	0x5b, 0x70, 0x1d, 0xac, 0x25, 0xf9, 0x6b, 0xe2, 0x3e, 0x63, 0xba, 0x89, 0x4d, 0xaa, 0x19, 0x1e,
	0xf5, 0xc0, 0x97, 0xf0, 0xb7, 0xd3, 0x0a, 0x24, 0x95, 0xd4, 0x6d, 0xdc, 0x35, 0xa4, 0xbb, 0xb2,
	0x29, 0xc5, 0xab, 0xd6, 0x49, 0x02, 0xcf, 0xc3, 0x8f, 0xc1, 0xd3, 0x04, 0x08, 0x82, 0x77, 0xb0,
	0x81, 0x94, 0x64, 0x2f, 0xc2, 0x4f, 0xa4, 0x89, 0xb4, 0x93, 0x5a, 0x15, 0x15, 0x71, 0x27, 0x2a,
	0xcb, 0x79, 0xb8, 0x91, 0x60, 0x4a, 0x6d, 0x74, 0x56, 0x98, 0x41, 0x7c, 0x3f, 0xe2, 0x27, 0x9f,
	0xfc, 0x2e, 0x03, 0x6e, 0x46, 0x27, 0xc9, 0x4d, 0x30, 0xee, 0x81, 0xf9, 0xb3, 0x63, 0x02, 0xdc,
	0xf4, 0x3e, 0x6e, 0xc8, 0x0a, 0x36, 0xf7, 0xbd, 0x41, 0x7c, 0x1b, 0xdc, 0xf0, 0x96, 0x8a, 0xd8,
	0x94, 0x34, 0x91, 0xcf, 0xc0, 0x19, 0x70, 0xb7, 0xb3, 0x80, 0x54, 0x11, 0x79, 0xc3, 0xcb, 0x4f,
	0xc5, 0x70, 0x77, 0xa6, 0x7b, 0xd4, 0x0c, 0x4c, 0x74, 0x4d, 0x25, 0x98, 0x89, 0xca, 0x2c, 0xb1,
	0x56, 0x0e, 0xc6, 0x56, 0x40, 0xb3, 0x88, 0xf6, 0x7c, 0x76, 0xfc, 0x08, 0xbc, 0x03, 0xf8, 0x6e,
	0x68, 0x5a, 0xd2, 0x15, 0x0d, 0x89, 0xfc, 0x28, 0x9c, 0x07, 0xd3, 0xf1, 0x55, 0x56, 0x4d, 0x56,
	0x55, 0x7e, 0x0c, 0x4e, 0x01, 0xe8, 0xed, 0xee, 0x15, 0x19, 0x1d, 0x85, 0xa9, 0x03, 0x8b, 0x7c,
	0x0e, 0xde, 0x03, 0x93, 0xde, 0xfa, 0x16, 0x61, 0x83, 0xb8, 0xbb, 0x31, 0xde, 0x85, 0x43, 0xa4,
	0x48, 0x05, 0x4d, 0xdb, 0x96, 0x31, 0x2d, 0x6a, 0xa2, 0xbc, 0x21, 0x63, 0x91, 0x07, 0x4f, 0xbe,
	0x19, 0x05, 0xa0, 0xf7, 0xfd, 0x38, 0x63, 0x84, 0x4c, 0x13, 0x09, 0xdb, 0x94, 0xa5, 0x22, 0x48,
	0xd1, 0x12, 0xc8, 0xc7, 0x56, 0x69, 0xc1, 0xd0, 0x76, 0x09, 0x6b, 0x44, 0x45, 0x66, 0x03, 0x88,
	0x83, 0x8f, 0xc1, 0xfb, 0x61, 0x1b, 0xcd, 0x94, 0xb0, 0x41, 0x91, 0xae, 0x2b, 0xb2, 0x80, 0x4c,
	0xef, 0x36, 0xf3, 0x76, 0xd9, 0x10, 0xfd, 0x00, 0x3c, 0x08, 0x9b, 0x9a, 0x86, 0xb6, 0x85, 0x54,
	0xef, 0xde, 0x11, 0x35, 0xcd, 0xa0, 0x44, 0xdf, 0xdf, 0x45, 0x06, 0x9b, 0x9f, 0xef, 0x82, 0xfb,
	0x61, 0x43, 0x11, 0x9b, 0x58, 0xf0, 0xb0, 0xfc, 0xcb, 0x84, 0xcf, 0xc6, 0xa9, 0xed, 0x94, 0x14,
	0x15, 0x1b, 0xa8, 0x20, 0x2b, 0xb2, 0xb9, 0x4f, 0x89, 0x80, 0x54, 0x7e, 0x84, 0x8d, 0xb8, 0xb0,
	0x0d, 0x2a, 0x94, 0x08, 0x66, 0x03, 0x77, 0xa3, 0xa4, 0x7a, 0x70, 0x88, 0x19, 0xf3, 0xa3, 0xf0,
	0x39, 0xf8, 0x28, 0x62, 0x57, 0x32, 0x25, 0xac, 0x9a, 0x5d, 0xfe, 0x25, 0x53, 0xd2, 0x0c, 0xf9,
	0x8b, 0xe8, 0x69, 0xc6, 0xe0, 0x02, 0x98, 0x0b, 0x7b, 0x15, 0x4a, 0x1b, 0x1b, 0x6c, 0x9e, 0xef,
	0x60, 0x63, 0x43, 0xd1, 0x76, 0xf9, 0x1c, 0x5c, 0x01, 0x8f, 0xc3, 0x06, 0xba, 0x81, 0x45, 0x59,
	0x30, 0xfd, 0x39, 0x4e, 0xb4, 0x92, 0x21, 0x60, 0xaa, 0x68, 0x9d, 0x28, 0xfc, 0x38, 0xbb, 0xe1,
	0xc3, 0xe6, 0xb2, 0xca, 0x2a, 0xd9, 0x09, 0xaa, 0x60, 0xb4, 0x8d, 0x36, 0x31, 0x0f, 0xe2, 0xc7,
	0xee, 0x5d, 0xaa, 0xb2, 0x2a, 0xe2, 0x3d, 0x36, 0x1c, 0x6e, 0xc0, 0x3c, 0x98, 0x8d, 0xc4, 0x45,
	0xa6, 0xd4, 0xbb, 0x73, 0xf9, 0x77, 0xe2, 0xc4, 0xf7, 0x3c, 0x03, 0x59, 0xdd, 0xea, 0xe4, 0x98,
	0xbf, 0x19, 0x07, 0x50, 0x44, 0xa4, 0x87, 0xf6, 0x6f, 0xc1, 0x27, 0xe0, 0x61, 0x78, 0x9f, 0x60,
	0x63, 0x07, 0x1b, 0x94, 0xc8, 0xfe, 0x5b, 0x46, 0xc8, 0xf6, 0x76, 0xbc, 0x94, 0x82, 0x56, 0x64,
	0xbd, 0x44, 0xf1, 0x1e, 0x16, 0x4a, 0x9e, 0x09, 0xcf, 0x3a, 0x29, 0x02, 0xf7, 0xb9, 0x12, 0x42,
	0x98, 0x80, 0xef, 0x81, 0xc5, 0x08, 0x82, 0xa1, 0x11, 0x42, 0x89, 0x6c, 0x62, 0x4a, 0x04, 0x43,
	0xd6, 0x4d, 0x76, 0x68, 0xd8, 0x2f, 0x19, 0x55, 0x46, 0x0a, 0x2b, 0x36, 0x63, 0x27, 0x0b, 0x98,
	0x9f, 0x8c, 0xe7, 0xae, 0x33, 0x53, 0x90, 0xc1, 0xd4, 0xdc, 0x59, 0xe7, 0xef, 0xc4, 0x61, 0x08,
	0x26, 0xde, 0xcb, 0x8b, 0x24, 0x6f, 0x21, 0x61, 0x9b, 0x45, 0xba, 0x1b, 0x57, 0x71, 0xac, 0xff,
	0x75, 0x45, 0x36, 0x3d, 0x4a, 0x53, 0x85, 0x5f, 0x72, 0x57, 0xdf, 0xe6, 0x87, 0xbe, 0xfe, 0x36,
	0x3f, 0xf4, 0xdd, 0xb7, 0x79, 0xee, 0x67, 0xed, 0x3c, 0xf7, 0x87, 0x76, 0x9e, 0xfb, 0x6b, 0x3b,
	0xcf, 0x5d, 0xb5, 0xf3, 0xdc, 0xd7, 0xed, 0x3c, 0xf7, 0x4d, 0x3b, 0xcf, 0xfd, 0xab, 0x9d, 0x1f,
	0xfa, 0xae, 0x9d, 0xe7, 0x7e, 0xfd, 0x3a, 0x3f, 0x74, 0xf5, 0x3a, 0x3f, 0xf4, 0xf5, 0xeb, 0xfc,
	0xd0, 0x17, 0xfa, 0x91, 0x53, 0xff, 0xf2, 0x68, 0xf5, 0xcc, 0xa9, 0xb9, 0x76, 0xa3, 0x61, 0xad,
	0xb6, 0x9a, 0x6b, 0xde, 0xc3, 0xa1, 0xd3, 0x38, 0x59, 0xa9, 0x37, 0x9c, 0xb3, 0xea, 0x81, 0xdd,
	0x58, 0x09, 0xb6, 0xd7, 0xea, 0xe5, 0x23, 0x67, 0xcd, 0xfe, 0xa9, 0xeb, 0xff, 0x00, 0x9b, 0xf0,
	0x5b, 0x74, 0x79, 0xd4, 0xfb, 0x1e, 0x7b, 0xfd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x10,
	0xcb, 0x4b, 0xb0, 0x1e, 0x00, 0x00,
}

func (x EvasionSubViolationType) String() string {
	s, ok := EvasionSubViolationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HTTPProtocolSubViolationType) String() string {
	s, ok := HTTPProtocolSubViolationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ViolationType) String() string {
	s, ok := ViolationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AttackType) String() string {
	s, ok := AttackType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EnabledAttackTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnabledAttackTypes)
	if !ok {
		that2, ok := that.(EnabledAttackTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EnabledAttackTypes) != len(that1.EnabledAttackTypes) {
		return false
	}
	for i := range this.EnabledAttackTypes {
		if this.EnabledAttackTypes[i] != that1.EnabledAttackTypes[i] {
			return false
		}
	}
	return true
}
func (this *SignatureSelectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SignatureSelectionByAccuracy == nil {
		if this.SignatureSelectionByAccuracy != nil {
			return false
		}
	} else if this.SignatureSelectionByAccuracy == nil {
		return false
	} else if !this.SignatureSelectionByAccuracy.Equal(that1.SignatureSelectionByAccuracy) {
		return false
	}
	if that1.AttackTypeSetting == nil {
		if this.AttackTypeSetting != nil {
			return false
		}
	} else if this.AttackTypeSetting == nil {
		return false
	} else if !this.AttackTypeSetting.Equal(that1.AttackTypeSetting) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_OnlyHighAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_OnlyHighAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OnlyHighAccuracySignatures.Equal(that1.OnlyHighAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_HighMediumAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_HighMediumAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HighMediumAccuracySignatures.Equal(that1.HighMediumAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_HighMediumLowAccuracySignatures)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_HighMediumLowAccuracySignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HighMediumLowAccuracySignatures.Equal(that1.HighMediumLowAccuracySignatures) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_DefaultAttackTypeSettings)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_DefaultAttackTypeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultAttackTypeSettings.Equal(that1.DefaultAttackTypeSettings) {
		return false
	}
	return true
}
func (this *SignatureSelectionSetting_EnabledAttackTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignatureSelectionSetting_EnabledAttackTypes)
	if !ok {
		that2, ok := that.(SignatureSelectionSetting_EnabledAttackTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledAttackTypes.Equal(that1.EnabledAttackTypes) {
		return false
	}
	return true
}
func (this *EnabledHTTPProtocolSubViolations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnabledHTTPProtocolSubViolations)
	if !ok {
		that2, ok := that.(EnabledHTTPProtocolSubViolations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpProtocolSubViolations) != len(that1.HttpProtocolSubViolations) {
		return false
	}
	for i := range this.HttpProtocolSubViolations {
		if this.HttpProtocolSubViolations[i] != that1.HttpProtocolSubViolations[i] {
			return false
		}
	}
	return true
}
func (this *EnabledEvasionSubViolations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnabledEvasionSubViolations)
	if !ok {
		that2, ok := that.(EnabledEvasionSubViolations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EvasionViolationSettings) != len(that1.EvasionViolationSettings) {
		return false
	}
	for i := range this.EvasionViolationSettings {
		if this.EvasionViolationSettings[i] != that1.EvasionViolationSettings[i] {
			return false
		}
	}
	return true
}
func (this *ViolationSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSetting)
	if !ok {
		that2, ok := that.(ViolationSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EnabledViolationTypes) != len(that1.EnabledViolationTypes) {
		return false
	}
	for i := range this.EnabledViolationTypes {
		if this.EnabledViolationTypes[i] != that1.EnabledViolationTypes[i] {
			return false
		}
	}
	if that1.HttpProtocolViolationSetting == nil {
		if this.HttpProtocolViolationSetting != nil {
			return false
		}
	} else if this.HttpProtocolViolationSetting == nil {
		return false
	} else if !this.HttpProtocolViolationSetting.Equal(that1.HttpProtocolViolationSetting) {
		return false
	}
	if that1.EvasionViolationSetting == nil {
		if this.EvasionViolationSetting != nil {
			return false
		}
	} else if this.EvasionViolationSetting == nil {
		return false
	} else if !this.EvasionViolationSetting.Equal(that1.EvasionViolationSetting) {
		return false
	}
	return true
}
func (this *ViolationSetting_DefaultHttpProtocolViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSetting_DefaultHttpProtocolViolationSettings)
	if !ok {
		that2, ok := that.(ViolationSetting_DefaultHttpProtocolViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHttpProtocolViolationSettings.Equal(that1.DefaultHttpProtocolViolationSettings) {
		return false
	}
	return true
}
func (this *ViolationSetting_EnabledHttpProtocolViolations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSetting_EnabledHttpProtocolViolations)
	if !ok {
		that2, ok := that.(ViolationSetting_EnabledHttpProtocolViolations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledHttpProtocolViolations.Equal(that1.EnabledHttpProtocolViolations) {
		return false
	}
	return true
}
func (this *ViolationSetting_DefaultEvasionViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSetting_DefaultEvasionViolationSettings)
	if !ok {
		that2, ok := that.(ViolationSetting_DefaultEvasionViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultEvasionViolationSettings.Equal(that1.DefaultEvasionViolationSettings) {
		return false
	}
	return true
}
func (this *ViolationSetting_EnabledEvasionViolations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViolationSetting_EnabledEvasionViolations)
	if !ok {
		that2, ok := that.(ViolationSetting_EnabledEvasionViolations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledEvasionViolations.Equal(that1.EnabledEvasionViolations) {
		return false
	}
	return true
}
func (this *DetectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting)
	if !ok {
		that2, ok := that.(DetectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignatureSelectionSetting.Equal(that1.SignatureSelectionSetting) {
		return false
	}
	if that1.FalsePositiveSuppression == nil {
		if this.FalsePositiveSuppression != nil {
			return false
		}
	} else if this.FalsePositiveSuppression == nil {
		return false
	} else if !this.FalsePositiveSuppression.Equal(that1.FalsePositiveSuppression) {
		return false
	}
	if that1.ThreatCampaignChoice == nil {
		if this.ThreatCampaignChoice != nil {
			return false
		}
	} else if this.ThreatCampaignChoice == nil {
		return false
	} else if !this.ThreatCampaignChoice.Equal(that1.ThreatCampaignChoice) {
		return false
	}
	if that1.ViolationDetectionSetting == nil {
		if this.ViolationDetectionSetting != nil {
			return false
		}
	} else if this.ViolationDetectionSetting == nil {
		return false
	} else if !this.ViolationDetectionSetting.Equal(that1.ViolationDetectionSetting) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnableSuppression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnableSuppression)
	if !ok {
		that2, ok := that.(DetectionSetting_EnableSuppression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSuppression.Equal(that1.EnableSuppression) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableSuppression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableSuppression)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableSuppression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSuppression.Equal(that1.DisableSuppression) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnableThreatCampaigns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnableThreatCampaigns)
	if !ok {
		that2, ok := that.(DetectionSetting_EnableThreatCampaigns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatCampaigns.Equal(that1.EnableThreatCampaigns) {
		return false
	}
	return true
}
func (this *DetectionSetting_DisableThreatCampaigns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DisableThreatCampaigns)
	if !ok {
		that2, ok := that.(DetectionSetting_DisableThreatCampaigns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatCampaigns.Equal(that1.DisableThreatCampaigns) {
		return false
	}
	return true
}
func (this *DetectionSetting_DefaultViolationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_DefaultViolationSettings)
	if !ok {
		that2, ok := that.(DetectionSetting_DefaultViolationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultViolationSettings.Equal(that1.DefaultViolationSettings) {
		return false
	}
	return true
}
func (this *DetectionSetting_EnabledViolationTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DetectionSetting_EnabledViolationTypes)
	if !ok {
		that2, ok := that.(DetectionSetting_EnabledViolationTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledViolationTypes.Equal(that1.EnabledViolationTypes) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Blocking)
	if !ok {
		that2, ok := that.(GlobalSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Monitoring)
	if !ok {
		that2, ok := that.(GlobalSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(GlobalSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(CreateSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Blocking)
	if !ok {
		that2, ok := that.(CreateSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *CreateSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Monitoring)
	if !ok {
		that2, ok := that.(CreateSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *CreateSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(CreateSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Blocking)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Monitoring)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnforcementModeChoice == nil {
		if this.EnforcementModeChoice != nil {
			return false
		}
	} else if this.EnforcementModeChoice == nil {
		return false
	} else if !this.EnforcementModeChoice.Equal(that1.EnforcementModeChoice) {
		return false
	}
	if that1.DetectionSettingChoice == nil {
		if this.DetectionSettingChoice != nil {
			return false
		}
	} else if this.DetectionSettingChoice == nil {
		return false
	} else if !this.DetectionSettingChoice.Equal(that1.DetectionSettingChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_UseLoadbalancerSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseLoadbalancerSetting)
	if !ok {
		that2, ok := that.(GetSpecType_UseLoadbalancerSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseLoadbalancerSetting.Equal(that1.UseLoadbalancerSetting) {
		return false
	}
	return true
}
func (this *GetSpecType_Blocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Blocking)
	if !ok {
		that2, ok := that.(GetSpecType_Blocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Blocking.Equal(that1.Blocking) {
		return false
	}
	return true
}
func (this *GetSpecType_Monitoring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Monitoring)
	if !ok {
		that2, ok := that.(GetSpecType_Monitoring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitoring.Equal(that1.Monitoring) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultDetectionSettings)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultDetectionSettings.Equal(that1.DefaultDetectionSettings) {
		return false
	}
	return true
}
func (this *GetSpecType_DetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DetectionSettings)
	if !ok {
		that2, ok := that.(GetSpecType_DetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DetectionSettings.Equal(that1.DetectionSettings) {
		return false
	}
	return true
}
func (this *EnabledAttackTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.EnabledAttackTypes{")
	s = append(s, "EnabledAttackTypes: "+fmt.Sprintf("%#v", this.EnabledAttackTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignatureSelectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.SignatureSelectionSetting{")
	if this.SignatureSelectionByAccuracy != nil {
		s = append(s, "SignatureSelectionByAccuracy: "+fmt.Sprintf("%#v", this.SignatureSelectionByAccuracy)+",\n")
	}
	if this.AttackTypeSetting != nil {
		s = append(s, "AttackTypeSetting: "+fmt.Sprintf("%#v", this.AttackTypeSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_OnlyHighAccuracySignatures{` +
		`OnlyHighAccuracySignatures:` + fmt.Sprintf("%#v", this.OnlyHighAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_HighMediumAccuracySignatures{` +
		`HighMediumAccuracySignatures:` + fmt.Sprintf("%#v", this.HighMediumAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_HighMediumLowAccuracySignatures{` +
		`HighMediumLowAccuracySignatures:` + fmt.Sprintf("%#v", this.HighMediumLowAccuracySignatures) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_DefaultAttackTypeSettings{` +
		`DefaultAttackTypeSettings:` + fmt.Sprintf("%#v", this.DefaultAttackTypeSettings) + `}`}, ", ")
	return s
}
func (this *SignatureSelectionSetting_EnabledAttackTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.SignatureSelectionSetting_EnabledAttackTypes{` +
		`EnabledAttackTypes:` + fmt.Sprintf("%#v", this.EnabledAttackTypes) + `}`}, ", ")
	return s
}
func (this *EnabledHTTPProtocolSubViolations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.EnabledHTTPProtocolSubViolations{")
	s = append(s, "HttpProtocolSubViolations: "+fmt.Sprintf("%#v", this.HttpProtocolSubViolations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnabledEvasionSubViolations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_firewall.EnabledEvasionSubViolations{")
	s = append(s, "EvasionViolationSettings: "+fmt.Sprintf("%#v", this.EvasionViolationSettings)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ViolationSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.ViolationSetting{")
	s = append(s, "EnabledViolationTypes: "+fmt.Sprintf("%#v", this.EnabledViolationTypes)+",\n")
	if this.HttpProtocolViolationSetting != nil {
		s = append(s, "HttpProtocolViolationSetting: "+fmt.Sprintf("%#v", this.HttpProtocolViolationSetting)+",\n")
	}
	if this.EvasionViolationSetting != nil {
		s = append(s, "EvasionViolationSetting: "+fmt.Sprintf("%#v", this.EvasionViolationSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ViolationSetting_DefaultHttpProtocolViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ViolationSetting_DefaultHttpProtocolViolationSettings{` +
		`DefaultHttpProtocolViolationSettings:` + fmt.Sprintf("%#v", this.DefaultHttpProtocolViolationSettings) + `}`}, ", ")
	return s
}
func (this *ViolationSetting_EnabledHttpProtocolViolations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ViolationSetting_EnabledHttpProtocolViolations{` +
		`EnabledHttpProtocolViolations:` + fmt.Sprintf("%#v", this.EnabledHttpProtocolViolations) + `}`}, ", ")
	return s
}
func (this *ViolationSetting_DefaultEvasionViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ViolationSetting_DefaultEvasionViolationSettings{` +
		`DefaultEvasionViolationSettings:` + fmt.Sprintf("%#v", this.DefaultEvasionViolationSettings) + `}`}, ", ")
	return s
}
func (this *ViolationSetting_EnabledEvasionViolations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ViolationSetting_EnabledEvasionViolations{` +
		`EnabledEvasionViolations:` + fmt.Sprintf("%#v", this.EnabledEvasionViolations) + `}`}, ", ")
	return s
}
func (this *DetectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_firewall.DetectionSetting{")
	if this.SignatureSelectionSetting != nil {
		s = append(s, "SignatureSelectionSetting: "+fmt.Sprintf("%#v", this.SignatureSelectionSetting)+",\n")
	}
	if this.FalsePositiveSuppression != nil {
		s = append(s, "FalsePositiveSuppression: "+fmt.Sprintf("%#v", this.FalsePositiveSuppression)+",\n")
	}
	if this.ThreatCampaignChoice != nil {
		s = append(s, "ThreatCampaignChoice: "+fmt.Sprintf("%#v", this.ThreatCampaignChoice)+",\n")
	}
	if this.ViolationDetectionSetting != nil {
		s = append(s, "ViolationDetectionSetting: "+fmt.Sprintf("%#v", this.ViolationDetectionSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DetectionSetting_EnableSuppression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnableSuppression{` +
		`EnableSuppression:` + fmt.Sprintf("%#v", this.EnableSuppression) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableSuppression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableSuppression{` +
		`DisableSuppression:` + fmt.Sprintf("%#v", this.DisableSuppression) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_EnableThreatCampaigns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnableThreatCampaigns{` +
		`EnableThreatCampaigns:` + fmt.Sprintf("%#v", this.EnableThreatCampaigns) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DisableThreatCampaigns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DisableThreatCampaigns{` +
		`DisableThreatCampaigns:` + fmt.Sprintf("%#v", this.DisableThreatCampaigns) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_DefaultViolationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_DefaultViolationSettings{` +
		`DefaultViolationSettings:` + fmt.Sprintf("%#v", this.DefaultViolationSettings) + `}`}, ", ")
	return s
}
func (this *DetectionSetting_EnabledViolationTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.DetectionSetting_EnabledViolationTypes{` +
		`EnabledViolationTypes:` + fmt.Sprintf("%#v", this.EnabledViolationTypes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.GlobalSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GlobalSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.CreateSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.CreateSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.ReplaceSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.ReplaceSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_firewall.GetSpecType{")
	if this.EnforcementModeChoice != nil {
		s = append(s, "EnforcementModeChoice: "+fmt.Sprintf("%#v", this.EnforcementModeChoice)+",\n")
	}
	if this.DetectionSettingChoice != nil {
		s = append(s, "DetectionSettingChoice: "+fmt.Sprintf("%#v", this.DetectionSettingChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_UseLoadbalancerSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_UseLoadbalancerSetting{` +
		`UseLoadbalancerSetting:` + fmt.Sprintf("%#v", this.UseLoadbalancerSetting) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Blocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_Blocking{` +
		`Blocking:` + fmt.Sprintf("%#v", this.Blocking) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Monitoring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_Monitoring{` +
		`Monitoring:` + fmt.Sprintf("%#v", this.Monitoring) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DefaultDetectionSettings{` +
		`DefaultDetectionSettings:` + fmt.Sprintf("%#v", this.DefaultDetectionSettings) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_firewall.GetSpecType_DetectionSettings{` +
		`DetectionSettings:` + fmt.Sprintf("%#v", this.DetectionSettings) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EnabledAttackTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnabledAttackTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnabledAttackTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnabledAttackTypes) > 0 {
		dAtA2 := make([]byte, len(m.EnabledAttackTypes)*10)
		var j1 int
		for _, num := range m.EnabledAttackTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureSelectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureSelectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttackTypeSetting != nil {
		{
			size := m.AttackTypeSetting.Size()
			i -= size
			if _, err := m.AttackTypeSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignatureSelectionByAccuracy != nil {
		{
			size := m.SignatureSelectionByAccuracy.Size()
			i -= size
			if _, err := m.SignatureSelectionByAccuracy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnlyHighAccuracySignatures != nil {
		{
			size, err := m.OnlyHighAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HighMediumAccuracySignatures != nil {
		{
			size, err := m.HighMediumAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HighMediumLowAccuracySignatures != nil {
		{
			size, err := m.HighMediumLowAccuracySignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultAttackTypeSettings != nil {
		{
			size, err := m.DefaultAttackTypeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SignatureSelectionSetting_EnabledAttackTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureSelectionSetting_EnabledAttackTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledAttackTypes != nil {
		{
			size, err := m.EnabledAttackTypes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *EnabledHTTPProtocolSubViolations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnabledHTTPProtocolSubViolations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnabledHTTPProtocolSubViolations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpProtocolSubViolations) > 0 {
		dAtA9 := make([]byte, len(m.HttpProtocolSubViolations)*10)
		var j8 int
		for _, num := range m.HttpProtocolSubViolations {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTypes(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnabledEvasionSubViolations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnabledEvasionSubViolations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnabledEvasionSubViolations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvasionViolationSettings) > 0 {
		dAtA11 := make([]byte, len(m.EvasionViolationSettings)*10)
		var j10 int
		for _, num := range m.EvasionViolationSettings {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTypes(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViolationSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViolationSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EvasionViolationSetting != nil {
		{
			size := m.EvasionViolationSetting.Size()
			i -= size
			if _, err := m.EvasionViolationSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpProtocolViolationSetting != nil {
		{
			size := m.HttpProtocolViolationSetting.Size()
			i -= size
			if _, err := m.HttpProtocolViolationSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.EnabledViolationTypes) > 0 {
		dAtA13 := make([]byte, len(m.EnabledViolationTypes)*10)
		var j12 int
		for _, num := range m.EnabledViolationTypes {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintTypes(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViolationSetting_DefaultHttpProtocolViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSetting_DefaultHttpProtocolViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHttpProtocolViolationSettings != nil {
		{
			size, err := m.DefaultHttpProtocolViolationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ViolationSetting_EnabledHttpProtocolViolations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSetting_EnabledHttpProtocolViolations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledHttpProtocolViolations != nil {
		{
			size, err := m.EnabledHttpProtocolViolations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ViolationSetting_DefaultEvasionViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSetting_DefaultEvasionViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultEvasionViolationSettings != nil {
		{
			size, err := m.DefaultEvasionViolationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ViolationSetting_EnabledEvasionViolations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationSetting_EnabledEvasionViolations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledEvasionViolations != nil {
		{
			size, err := m.EnabledEvasionViolations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViolationDetectionSetting != nil {
		{
			size := m.ViolationDetectionSetting.Size()
			i -= size
			if _, err := m.ViolationDetectionSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatCampaignChoice != nil {
		{
			size := m.ThreatCampaignChoice.Size()
			i -= size
			if _, err := m.ThreatCampaignChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FalsePositiveSuppression != nil {
		{
			size := m.FalsePositiveSuppression.Size()
			i -= size
			if _, err := m.FalsePositiveSuppression.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignatureSelectionSetting != nil {
		{
			size, err := m.SignatureSelectionSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetectionSetting_EnableSuppression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnableSuppression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableSuppression != nil {
		{
			size, err := m.EnableSuppression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableSuppression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableSuppression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSuppression != nil {
		{
			size, err := m.DisableSuppression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_EnableThreatCampaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnableThreatCampaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatCampaigns != nil {
		{
			size, err := m.EnableThreatCampaigns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DisableThreatCampaigns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DisableThreatCampaigns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatCampaigns != nil {
		{
			size, err := m.DisableThreatCampaigns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_DefaultViolationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_DefaultViolationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultViolationSettings != nil {
		{
			size, err := m.DefaultViolationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DetectionSetting_EnabledViolationTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetectionSetting_EnabledViolationTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledViolationTypes != nil {
		{
			size, err := m.EnabledViolationTypes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionSettingChoice != nil {
		{
			size := m.DetectionSettingChoice.Size()
			i -= size
			if _, err := m.DetectionSettingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EnforcementModeChoice != nil {
		{
			size := m.EnforcementModeChoice.Size()
			i -= size
			if _, err := m.EnforcementModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_UseLoadbalancerSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseLoadbalancerSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseLoadbalancerSetting != nil {
		{
			size, err := m.UseLoadbalancerSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Blocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Blocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Blocking != nil {
		{
			size, err := m.Blocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Monitoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Monitoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitoring != nil {
		{
			size, err := m.Monitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultDetectionSettings != nil {
		{
			size, err := m.DefaultDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DetectionSettings != nil {
		{
			size, err := m.DetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnabledAttackTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnabledAttackTypes) > 0 {
		l = 0
		for _, e := range m.EnabledAttackTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *SignatureSelectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureSelectionByAccuracy != nil {
		n += m.SignatureSelectionByAccuracy.Size()
	}
	if m.AttackTypeSetting != nil {
		n += m.AttackTypeSetting.Size()
	}
	return n
}

func (m *SignatureSelectionSetting_OnlyHighAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnlyHighAccuracySignatures != nil {
		l = m.OnlyHighAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_HighMediumAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighMediumAccuracySignatures != nil {
		l = m.HighMediumAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_HighMediumLowAccuracySignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HighMediumLowAccuracySignatures != nil {
		l = m.HighMediumLowAccuracySignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_DefaultAttackTypeSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAttackTypeSettings != nil {
		l = m.DefaultAttackTypeSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SignatureSelectionSetting_EnabledAttackTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledAttackTypes != nil {
		l = m.EnabledAttackTypes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnabledHTTPProtocolSubViolations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpProtocolSubViolations) > 0 {
		l = 0
		for _, e := range m.HttpProtocolSubViolations {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *EnabledEvasionSubViolations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EvasionViolationSettings) > 0 {
		l = 0
		for _, e := range m.EvasionViolationSettings {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *ViolationSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnabledViolationTypes) > 0 {
		l = 0
		for _, e := range m.EnabledViolationTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.HttpProtocolViolationSetting != nil {
		n += m.HttpProtocolViolationSetting.Size()
	}
	if m.EvasionViolationSetting != nil {
		n += m.EvasionViolationSetting.Size()
	}
	return n
}

func (m *ViolationSetting_DefaultHttpProtocolViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHttpProtocolViolationSettings != nil {
		l = m.DefaultHttpProtocolViolationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ViolationSetting_EnabledHttpProtocolViolations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledHttpProtocolViolations != nil {
		l = m.EnabledHttpProtocolViolations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ViolationSetting_DefaultEvasionViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultEvasionViolationSettings != nil {
		l = m.DefaultEvasionViolationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ViolationSetting_EnabledEvasionViolations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledEvasionViolations != nil {
		l = m.EnabledEvasionViolations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureSelectionSetting != nil {
		l = m.SignatureSelectionSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FalsePositiveSuppression != nil {
		n += m.FalsePositiveSuppression.Size()
	}
	if m.ThreatCampaignChoice != nil {
		n += m.ThreatCampaignChoice.Size()
	}
	if m.ViolationDetectionSetting != nil {
		n += m.ViolationDetectionSetting.Size()
	}
	return n
}

func (m *DetectionSetting_EnableSuppression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSuppression != nil {
		l = m.EnableSuppression.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableSuppression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSuppression != nil {
		l = m.DisableSuppression.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_EnableThreatCampaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatCampaigns != nil {
		l = m.EnableThreatCampaigns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DisableThreatCampaigns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatCampaigns != nil {
		l = m.DisableThreatCampaigns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_DefaultViolationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultViolationSettings != nil {
		l = m.DefaultViolationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DetectionSetting_EnabledViolationTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledViolationTypes != nil {
		l = m.EnabledViolationTypes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	return n
}

func (m *CreateSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementModeChoice != nil {
		n += m.EnforcementModeChoice.Size()
	}
	if m.DetectionSettingChoice != nil {
		n += m.DetectionSettingChoice.Size()
	}
	return n
}

func (m *GetSpecType_UseLoadbalancerSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseLoadbalancerSetting != nil {
		l = m.UseLoadbalancerSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Blocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Blocking != nil {
		l = m.Blocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Monitoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitoring != nil {
		l = m.Monitoring.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDetectionSettings != nil {
		l = m.DefaultDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionSettings != nil {
		l = m.DetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EnabledAttackTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnabledAttackTypes{`,
		`EnabledAttackTypes:` + fmt.Sprintf("%v", this.EnabledAttackTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting{`,
		`SignatureSelectionByAccuracy:` + fmt.Sprintf("%v", this.SignatureSelectionByAccuracy) + `,`,
		`AttackTypeSetting:` + fmt.Sprintf("%v", this.AttackTypeSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_OnlyHighAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_OnlyHighAccuracySignatures{`,
		`OnlyHighAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.OnlyHighAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_HighMediumAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_HighMediumAccuracySignatures{`,
		`HighMediumAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.HighMediumAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_HighMediumLowAccuracySignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_HighMediumLowAccuracySignatures{`,
		`HighMediumLowAccuracySignatures:` + strings.Replace(fmt.Sprintf("%v", this.HighMediumLowAccuracySignatures), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_DefaultAttackTypeSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_DefaultAttackTypeSettings{`,
		`DefaultAttackTypeSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultAttackTypeSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignatureSelectionSetting_EnabledAttackTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignatureSelectionSetting_EnabledAttackTypes{`,
		`EnabledAttackTypes:` + strings.Replace(fmt.Sprintf("%v", this.EnabledAttackTypes), "EnabledAttackTypes", "EnabledAttackTypes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnabledHTTPProtocolSubViolations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnabledHTTPProtocolSubViolations{`,
		`HttpProtocolSubViolations:` + fmt.Sprintf("%v", this.HttpProtocolSubViolations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnabledEvasionSubViolations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnabledEvasionSubViolations{`,
		`EvasionViolationSettings:` + fmt.Sprintf("%v", this.EvasionViolationSettings) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSetting{`,
		`EnabledViolationTypes:` + fmt.Sprintf("%v", this.EnabledViolationTypes) + `,`,
		`HttpProtocolViolationSetting:` + fmt.Sprintf("%v", this.HttpProtocolViolationSetting) + `,`,
		`EvasionViolationSetting:` + fmt.Sprintf("%v", this.EvasionViolationSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSetting_DefaultHttpProtocolViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSetting_DefaultHttpProtocolViolationSettings{`,
		`DefaultHttpProtocolViolationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHttpProtocolViolationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSetting_EnabledHttpProtocolViolations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSetting_EnabledHttpProtocolViolations{`,
		`EnabledHttpProtocolViolations:` + strings.Replace(fmt.Sprintf("%v", this.EnabledHttpProtocolViolations), "EnabledHTTPProtocolSubViolations", "EnabledHTTPProtocolSubViolations", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSetting_DefaultEvasionViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSetting_DefaultEvasionViolationSettings{`,
		`DefaultEvasionViolationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultEvasionViolationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViolationSetting_EnabledEvasionViolations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViolationSetting_EnabledEvasionViolations{`,
		`EnabledEvasionViolations:` + strings.Replace(fmt.Sprintf("%v", this.EnabledEvasionViolations), "EnabledEvasionSubViolations", "EnabledEvasionSubViolations", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting{`,
		`SignatureSelectionSetting:` + strings.Replace(this.SignatureSelectionSetting.String(), "SignatureSelectionSetting", "SignatureSelectionSetting", 1) + `,`,
		`FalsePositiveSuppression:` + fmt.Sprintf("%v", this.FalsePositiveSuppression) + `,`,
		`ThreatCampaignChoice:` + fmt.Sprintf("%v", this.ThreatCampaignChoice) + `,`,
		`ViolationDetectionSetting:` + fmt.Sprintf("%v", this.ViolationDetectionSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnableSuppression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnableSuppression{`,
		`EnableSuppression:` + strings.Replace(fmt.Sprintf("%v", this.EnableSuppression), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableSuppression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableSuppression{`,
		`DisableSuppression:` + strings.Replace(fmt.Sprintf("%v", this.DisableSuppression), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnableThreatCampaigns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnableThreatCampaigns{`,
		`EnableThreatCampaigns:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatCampaigns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DisableThreatCampaigns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DisableThreatCampaigns{`,
		`DisableThreatCampaigns:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatCampaigns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_DefaultViolationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_DefaultViolationSettings{`,
		`DefaultViolationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultViolationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DetectionSetting_EnabledViolationTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DetectionSetting_EnabledViolationTypes{`,
		`EnabledViolationTypes:` + strings.Replace(fmt.Sprintf("%v", this.EnabledViolationTypes), "ViolationSetting", "ViolationSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`EnforcementModeChoice:` + fmt.Sprintf("%v", this.EnforcementModeChoice) + `,`,
		`DetectionSettingChoice:` + fmt.Sprintf("%v", this.DetectionSettingChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseLoadbalancerSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseLoadbalancerSetting{`,
		`UseLoadbalancerSetting:` + strings.Replace(fmt.Sprintf("%v", this.UseLoadbalancerSetting), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Blocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Blocking{`,
		`Blocking:` + strings.Replace(fmt.Sprintf("%v", this.Blocking), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Monitoring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Monitoring{`,
		`Monitoring:` + strings.Replace(fmt.Sprintf("%v", this.Monitoring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultDetectionSettings{`,
		`DefaultDetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultDetectionSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DetectionSettings{`,
		`DetectionSettings:` + strings.Replace(fmt.Sprintf("%v", this.DetectionSettings), "DetectionSetting", "DetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EnabledAttackTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledAttackTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledAttackTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v AttackType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AttackType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledAttackTypes = append(m.EnabledAttackTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnabledAttackTypes) == 0 {
					m.EnabledAttackTypes = make([]AttackType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AttackType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AttackType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledAttackTypes = append(m.EnabledAttackTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledAttackTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureSelectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureSelectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureSelectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyHighAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_OnlyHighAccuracySignatures{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighMediumAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_HighMediumAccuracySignatures{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighMediumLowAccuracySignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureSelectionByAccuracy = &SignatureSelectionSetting_HighMediumLowAccuracySignatures{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAttackTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttackTypeSetting = &SignatureSelectionSetting_DefaultAttackTypeSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledAttackTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnabledAttackTypes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttackTypeSetting = &SignatureSelectionSetting_EnabledAttackTypes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnabledHTTPProtocolSubViolations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledHTTPProtocolSubViolations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledHTTPProtocolSubViolations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v HTTPProtocolSubViolationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= HTTPProtocolSubViolationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HttpProtocolSubViolations = append(m.HttpProtocolSubViolations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.HttpProtocolSubViolations) == 0 {
					m.HttpProtocolSubViolations = make([]HTTPProtocolSubViolationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v HTTPProtocolSubViolationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= HTTPProtocolSubViolationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HttpProtocolSubViolations = append(m.HttpProtocolSubViolations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolSubViolations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnabledEvasionSubViolations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledEvasionSubViolations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledEvasionSubViolations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v EvasionSubViolationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= EvasionSubViolationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EvasionViolationSettings = append(m.EvasionViolationSettings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EvasionViolationSettings) == 0 {
					m.EvasionViolationSettings = make([]EvasionSubViolationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v EvasionSubViolationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= EvasionSubViolationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EvasionViolationSettings = append(m.EvasionViolationSettings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EvasionViolationSettings", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViolationSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViolationSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViolationSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ViolationType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ViolationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledViolationTypes = append(m.EnabledViolationTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnabledViolationTypes) == 0 {
					m.EnabledViolationTypes = make([]ViolationType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ViolationType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ViolationType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledViolationTypes = append(m.EnabledViolationTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledViolationTypes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHttpProtocolViolationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpProtocolViolationSetting = &ViolationSetting_DefaultHttpProtocolViolationSettings{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledHttpProtocolViolations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnabledHTTPProtocolSubViolations{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpProtocolViolationSetting = &ViolationSetting_EnabledHttpProtocolViolations{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultEvasionViolationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EvasionViolationSetting = &ViolationSetting_DefaultEvasionViolationSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledEvasionViolations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnabledEvasionSubViolations{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EvasionViolationSetting = &ViolationSetting_EnabledEvasionViolations{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureSelectionSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureSelectionSetting == nil {
				m.SignatureSelectionSetting = &SignatureSelectionSetting{}
			}
			if err := m.SignatureSelectionSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSuppression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FalsePositiveSuppression = &DetectionSetting_EnableSuppression{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSuppression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FalsePositiveSuppression = &DetectionSetting_DisableSuppression{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatCampaignChoice = &DetectionSetting_EnableThreatCampaigns{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatCampaigns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatCampaignChoice = &DetectionSetting_DisableThreatCampaigns{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultViolationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ViolationDetectionSetting = &DetectionSetting_DefaultViolationSettings{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledViolationTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViolationSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ViolationDetectionSetting = &DetectionSetting_EnabledViolationTypes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GlobalSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GlobalSpecType_DetectionSettings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &CreateSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &CreateSpecType_DetectionSettings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &ReplaceSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &ReplaceSpecType_DetectionSettings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseLoadbalancerSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_UseLoadbalancerSetting{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_Blocking{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnforcementModeChoice = &GetSpecType_Monitoring{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_DefaultDetectionSettings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetectionSettingChoice = &GetSpecType_DetectionSettings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

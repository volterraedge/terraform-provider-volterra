// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_elastic_ip

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ForceDeleteCloudElasticIPRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ForceDeleteCloudElasticIPRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ForceDeleteCloudElasticIPRequest) DeepCopy() *ForceDeleteCloudElasticIPRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ForceDeleteCloudElasticIPRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ForceDeleteCloudElasticIPRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ForceDeleteCloudElasticIPRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ForceDeleteCloudElasticIPRequestValidator().Validate(ctx, m, opts...)
}

type ValidateForceDeleteCloudElasticIPRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateForceDeleteCloudElasticIPRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ForceDeleteCloudElasticIPRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ForceDeleteCloudElasticIPRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultForceDeleteCloudElasticIPRequestValidator = func() *ValidateForceDeleteCloudElasticIPRequest {
	v := &ValidateForceDeleteCloudElasticIPRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ForceDeleteCloudElasticIPRequestValidator() db.Validator {
	return DefaultForceDeleteCloudElasticIPRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ForceDeleteCloudElasticIPResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ForceDeleteCloudElasticIPResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ForceDeleteCloudElasticIPResponse) DeepCopy() *ForceDeleteCloudElasticIPResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ForceDeleteCloudElasticIPResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ForceDeleteCloudElasticIPResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ForceDeleteCloudElasticIPResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ForceDeleteCloudElasticIPResponseValidator().Validate(ctx, m, opts...)
}

type ValidateForceDeleteCloudElasticIPResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateForceDeleteCloudElasticIPResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ForceDeleteCloudElasticIPResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ForceDeleteCloudElasticIPResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultForceDeleteCloudElasticIPResponseValidator = func() *ValidateForceDeleteCloudElasticIPResponse {
	v := &ValidateForceDeleteCloudElasticIPResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ForceDeleteCloudElasticIPResponseValidator() db.Validator {
	return DefaultForceDeleteCloudElasticIPResponseValidator
}

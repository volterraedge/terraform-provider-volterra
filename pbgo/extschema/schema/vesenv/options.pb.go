// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/vesenv/options.proto

package vesenv

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BFSecretInfo is a type used in vesenv package to hold information
// about operator defined secrets in blindfold.
type BFSecretInfo struct {
	// This is the well-known uid for secret_policy.Object in VES environment
	PolicyUid string `protobuf:"bytes,6,opt,name=policy_uid,json=policyUid,proto3" json:"policy_uid,omitempty"`
	// This is the name of the secret_policy.Object
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// This is the unique number for every configured secret policy that is produced in system_metadata.object_index
	PolicyId int32 `protobuf:"varint,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// If not populated, secret will be re-encrypted with ves-io public key. Otherwise(e.g. ves-io-cdn-) it will be
	// be re-encrypted with the public key of the tenant matching prefix
	WellKnownTenantPrefix string `protobuf:"bytes,7,opt,name=well_known_tenant_prefix,json=wellKnownTenantPrefix,proto3" json:"well_known_tenant_prefix,omitempty"`
	// A distinction is made between gc and non-gc services and jobs since the FQDN
	// to use in secret_policy_rule.Object ClientNameMatcher differs based on location.
	// This is the set of GC services that are allowed access for this secret
	// E.g. for container_registry password this would be 'akar', has to be non-empty
	GcServices []string `protobuf:"bytes,3,rep,name=gc_services,json=gcServices,proto3" json:"gc_services,omitempty"`
	// This is the set of non-gc services, if any, that are allowed access for this secret
	// E.g. for container_registry password this would be 'rakar'
	NonGcServices []string `protobuf:"bytes,4,rep,name=non_gc_services,json=nonGcServices,proto3" json:"non_gc_services,omitempty"`
	// This is the set of jobs that run on GC, e.g. terraform jobs for view-like sites
	GcJobs []string `protobuf:"bytes,5,rep,name=gc_jobs,json=gcJobs,proto3" json:"gc_jobs,omitempty"`
}

func (m *BFSecretInfo) Reset()      { *m = BFSecretInfo{} }
func (*BFSecretInfo) ProtoMessage() {}
func (*BFSecretInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{0}
}
func (m *BFSecretInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BFSecretInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BFSecretInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BFSecretInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BFSecretInfo.Merge(m, src)
}
func (m *BFSecretInfo) XXX_Size() int {
	return m.Size()
}
func (m *BFSecretInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BFSecretInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BFSecretInfo proto.InternalMessageInfo

func (m *BFSecretInfo) GetPolicyUid() string {
	if m != nil {
		return m.PolicyUid
	}
	return ""
}

func (m *BFSecretInfo) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *BFSecretInfo) GetPolicyId() int32 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

func (m *BFSecretInfo) GetWellKnownTenantPrefix() string {
	if m != nil {
		return m.WellKnownTenantPrefix
	}
	return ""
}

func (m *BFSecretInfo) GetGcServices() []string {
	if m != nil {
		return m.GcServices
	}
	return nil
}

func (m *BFSecretInfo) GetNonGcServices() []string {
	if m != nil {
		return m.NonGcServices
	}
	return nil
}

func (m *BFSecretInfo) GetGcJobs() []string {
	if m != nil {
		return m.GcJobs
	}
	return nil
}

// BFSecretChoice enumerates all the secrets configured on blindfold by the VES operator
type BFSecretChoice struct {
	// Types that are valid to be assigned to Choice:
	//
	//	*BFSecretChoice_VesContainerRegistryPassword
	//	*BFSecretChoice_VesAlertReceiverSlackUrl
	//	*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey
	//	*BFSecretChoice_VesAlertReceiverOpsgenieApiKey
	//	*BFSecretChoice_VesTerraformJobViewSite
	//	*BFSecretChoice_VesK8SClusterArgocdAdminPassword
	//	*BFSecretChoice_VesNfvServiceBigIpPassword
	//	*BFSecretChoice_VesNfvServicePanFwPanaromaKey
	//	*BFSecretChoice_VesNfvServicePanFwSshPvtKey
	//	*BFSecretChoice_VesNfvServicePanFwUserPasswd
	//	*BFSecretChoice_VesCdnLoadbalancerCertificate
	//	*BFSecretChoice_VesGlobalLogReceiverSecret
	//	*BFSecretChoice_VesAzureExpressRouteAuthorizationKey
	//	*BFSecretChoice_VesBigipApmServiceBigIpPassword
	//	*BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword
	//	*BFSecretChoice_VesAlertReceiverWebhookUrl
	//	*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword
	//	*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken
	//	*BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken
	//	*BFSecretChoice_VesCertificatePrivateKey
	//	*BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword
	//	*BFSecretChoice_VesIoCminstanceAdminPassword
	//	*BFSecretChoice_VesIoCminstanceApiToken
	Choice isBFSecretChoice_Choice `protobuf_oneof:"choice"`
}

func (m *BFSecretChoice) Reset()      { *m = BFSecretChoice{} }
func (*BFSecretChoice) ProtoMessage() {}
func (*BFSecretChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{1}
}
func (m *BFSecretChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BFSecretChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BFSecretChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BFSecretChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BFSecretChoice.Merge(m, src)
}
func (m *BFSecretChoice) XXX_Size() int {
	return m.Size()
}
func (m *BFSecretChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_BFSecretChoice.DiscardUnknown(m)
}

var xxx_messageInfo_BFSecretChoice proto.InternalMessageInfo

type isBFSecretChoice_Choice interface {
	isBFSecretChoice_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BFSecretChoice_VesContainerRegistryPassword struct {
	VesContainerRegistryPassword bool `protobuf:"varint,1,opt,name=ves_container_registry_password,json=vesContainerRegistryPassword,proto3,oneof" json:"ves_container_registry_password,omitempty"`
}
type BFSecretChoice_VesAlertReceiverSlackUrl struct {
	VesAlertReceiverSlackUrl bool `protobuf:"varint,2,opt,name=ves_alert_receiver_slack_url,json=vesAlertReceiverSlackUrl,proto3,oneof" json:"ves_alert_receiver_slack_url,omitempty"`
}
type BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey struct {
	VesAlertReceiverPagerdutyRoutingKey bool `protobuf:"varint,3,opt,name=ves_alert_receiver_pagerduty_routing_key,json=vesAlertReceiverPagerdutyRoutingKey,proto3,oneof" json:"ves_alert_receiver_pagerduty_routing_key,omitempty"`
}
type BFSecretChoice_VesAlertReceiverOpsgenieApiKey struct {
	VesAlertReceiverOpsgenieApiKey bool `protobuf:"varint,4,opt,name=ves_alert_receiver_opsgenie_api_key,json=vesAlertReceiverOpsgenieApiKey,proto3,oneof" json:"ves_alert_receiver_opsgenie_api_key,omitempty"`
}
type BFSecretChoice_VesTerraformJobViewSite struct {
	VesTerraformJobViewSite bool `protobuf:"varint,5,opt,name=ves_terraform_job_view_site,json=vesTerraformJobViewSite,proto3,oneof" json:"ves_terraform_job_view_site,omitempty"`
}
type BFSecretChoice_VesK8SClusterArgocdAdminPassword struct {
	VesK8SClusterArgocdAdminPassword bool `protobuf:"varint,6,opt,name=ves_k8s_cluster_argocd_admin_password,json=vesK8sClusterArgocdAdminPassword,proto3,oneof" json:"ves_k8s_cluster_argocd_admin_password,omitempty"`
}
type BFSecretChoice_VesNfvServiceBigIpPassword struct {
	VesNfvServiceBigIpPassword bool `protobuf:"varint,7,opt,name=ves_nfv_service_big_ip_password,json=vesNfvServiceBigIpPassword,proto3,oneof" json:"ves_nfv_service_big_ip_password,omitempty"`
}
type BFSecretChoice_VesNfvServicePanFwPanaromaKey struct {
	VesNfvServicePanFwPanaromaKey bool `protobuf:"varint,11,opt,name=ves_nfv_service_pan_fw_panaroma_key,json=vesNfvServicePanFwPanaromaKey,proto3,oneof" json:"ves_nfv_service_pan_fw_panaroma_key,omitempty"`
}
type BFSecretChoice_VesNfvServicePanFwSshPvtKey struct {
	VesNfvServicePanFwSshPvtKey bool `protobuf:"varint,12,opt,name=ves_nfv_service_pan_fw_ssh_pvt_key,json=vesNfvServicePanFwSshPvtKey,proto3,oneof" json:"ves_nfv_service_pan_fw_ssh_pvt_key,omitempty"`
}
type BFSecretChoice_VesNfvServicePanFwUserPasswd struct {
	VesNfvServicePanFwUserPasswd bool `protobuf:"varint,13,opt,name=ves_nfv_service_pan_fw_user_passwd,json=vesNfvServicePanFwUserPasswd,proto3,oneof" json:"ves_nfv_service_pan_fw_user_passwd,omitempty"`
}
type BFSecretChoice_VesCdnLoadbalancerCertificate struct {
	VesCdnLoadbalancerCertificate bool `protobuf:"varint,8,opt,name=ves_cdn_loadbalancer_certificate,json=vesCdnLoadbalancerCertificate,proto3,oneof" json:"ves_cdn_loadbalancer_certificate,omitempty"`
}
type BFSecretChoice_VesGlobalLogReceiverSecret struct {
	VesGlobalLogReceiverSecret bool `protobuf:"varint,9,opt,name=ves_global_log_receiver_secret,json=vesGlobalLogReceiverSecret,proto3,oneof" json:"ves_global_log_receiver_secret,omitempty"`
}
type BFSecretChoice_VesAzureExpressRouteAuthorizationKey struct {
	VesAzureExpressRouteAuthorizationKey bool `protobuf:"varint,10,opt,name=ves_azure_express_route_authorization_key,json=vesAzureExpressRouteAuthorizationKey,proto3,oneof" json:"ves_azure_express_route_authorization_key,omitempty"`
}
type BFSecretChoice_VesBigipApmServiceBigIpPassword struct {
	VesBigipApmServiceBigIpPassword bool `protobuf:"varint,14,opt,name=ves_bigip_apm_service_big_ip_password,json=vesBigipApmServiceBigIpPassword,proto3,oneof" json:"ves_bigip_apm_service_big_ip_password,omitempty"`
}
type BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword struct {
	VesIoNfvServiceBigIpBmAdminPassword bool `protobuf:"varint,15,opt,name=ves_io_nfv_service_big_ip_bm_admin_password,json=vesIoNfvServiceBigIpBmAdminPassword,proto3,oneof" json:"ves_io_nfv_service_big_ip_bm_admin_password,omitempty"`
}
type BFSecretChoice_VesAlertReceiverWebhookUrl struct {
	VesAlertReceiverWebhookUrl bool `protobuf:"varint,16,opt,name=ves_alert_receiver_webhook_url,json=vesAlertReceiverWebhookUrl,proto3,oneof" json:"ves_alert_receiver_webhook_url,omitempty"`
}
type BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword struct {
	VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword bool `protobuf:"varint,17,opt,name=ves_alert_receiver_webhook_http_config_auth_choice_basic_auth_password,json=vesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword,proto3,oneof" json:"ves_alert_receiver_webhook_http_config_auth_choice_basic_auth_password,omitempty"`
}
type BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken struct {
	VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken bool `protobuf:"varint,18,opt,name=ves_alert_receiver_webhook_http_config_auth_choice_auth_token_token,json=vesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken,proto3,oneof" json:"ves_alert_receiver_webhook_http_config_auth_choice_auth_token_token,omitempty"`
}
type BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken struct {
	VesCloudLinkAwsByocBgpAuthToken bool `protobuf:"varint,19,opt,name=ves_cloud_link_aws_byoc_bgp_auth_token,json=vesCloudLinkAwsByocBgpAuthToken,proto3,oneof" json:"ves_cloud_link_aws_byoc_bgp_auth_token,omitempty"`
}
type BFSecretChoice_VesCertificatePrivateKey struct {
	VesCertificatePrivateKey bool `protobuf:"varint,20,opt,name=ves_certificate_private_key,json=vesCertificatePrivateKey,proto3,oneof" json:"ves_certificate_private_key,omitempty"`
}
type BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword struct {
	VesIoNfvServiceBigIqLicBmAdminPassword bool `protobuf:"varint,21,opt,name=ves_io_nfv_service_big_iq_lic_bm_admin_password,json=vesIoNfvServiceBigIqLicBmAdminPassword,proto3,oneof" json:"ves_io_nfv_service_big_iq_lic_bm_admin_password,omitempty"`
}
type BFSecretChoice_VesIoCminstanceAdminPassword struct {
	VesIoCminstanceAdminPassword bool `protobuf:"varint,22,opt,name=ves_io_cminstance_admin_password,json=vesIoCminstanceAdminPassword,proto3,oneof" json:"ves_io_cminstance_admin_password,omitempty"`
}
type BFSecretChoice_VesIoCminstanceApiToken struct {
	VesIoCminstanceApiToken bool `protobuf:"varint,23,opt,name=ves_io_cminstance_api_token,json=vesIoCminstanceApiToken,proto3,oneof" json:"ves_io_cminstance_api_token,omitempty"`
}

func (*BFSecretChoice_VesContainerRegistryPassword) isBFSecretChoice_Choice()         {}
func (*BFSecretChoice_VesAlertReceiverSlackUrl) isBFSecretChoice_Choice()             {}
func (*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) isBFSecretChoice_Choice()  {}
func (*BFSecretChoice_VesAlertReceiverOpsgenieApiKey) isBFSecretChoice_Choice()       {}
func (*BFSecretChoice_VesTerraformJobViewSite) isBFSecretChoice_Choice()              {}
func (*BFSecretChoice_VesK8SClusterArgocdAdminPassword) isBFSecretChoice_Choice()     {}
func (*BFSecretChoice_VesNfvServiceBigIpPassword) isBFSecretChoice_Choice()           {}
func (*BFSecretChoice_VesNfvServicePanFwPanaromaKey) isBFSecretChoice_Choice()        {}
func (*BFSecretChoice_VesNfvServicePanFwSshPvtKey) isBFSecretChoice_Choice()          {}
func (*BFSecretChoice_VesNfvServicePanFwUserPasswd) isBFSecretChoice_Choice()         {}
func (*BFSecretChoice_VesCdnLoadbalancerCertificate) isBFSecretChoice_Choice()        {}
func (*BFSecretChoice_VesGlobalLogReceiverSecret) isBFSecretChoice_Choice()           {}
func (*BFSecretChoice_VesAzureExpressRouteAuthorizationKey) isBFSecretChoice_Choice() {}
func (*BFSecretChoice_VesBigipApmServiceBigIpPassword) isBFSecretChoice_Choice()      {}
func (*BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) isBFSecretChoice_Choice()  {}
func (*BFSecretChoice_VesAlertReceiverWebhookUrl) isBFSecretChoice_Choice()           {}
func (*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) isBFSecretChoice_Choice() {
}
func (*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) isBFSecretChoice_Choice() {
}
func (*BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) isBFSecretChoice_Choice()        {}
func (*BFSecretChoice_VesCertificatePrivateKey) isBFSecretChoice_Choice()               {}
func (*BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) isBFSecretChoice_Choice() {}
func (*BFSecretChoice_VesIoCminstanceAdminPassword) isBFSecretChoice_Choice()           {}
func (*BFSecretChoice_VesIoCminstanceApiToken) isBFSecretChoice_Choice()                {}

func (m *BFSecretChoice) GetChoice() isBFSecretChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *BFSecretChoice) GetVesContainerRegistryPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesContainerRegistryPassword); ok {
		return x.VesContainerRegistryPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverSlackUrl() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverSlackUrl); ok {
		return x.VesAlertReceiverSlackUrl
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverPagerdutyRoutingKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey); ok {
		return x.VesAlertReceiverPagerdutyRoutingKey
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverOpsgenieApiKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey); ok {
		return x.VesAlertReceiverOpsgenieApiKey
	}
	return false
}

func (m *BFSecretChoice) GetVesTerraformJobViewSite() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesTerraformJobViewSite); ok {
		return x.VesTerraformJobViewSite
	}
	return false
}

func (m *BFSecretChoice) GetVesK8SClusterArgocdAdminPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesK8SClusterArgocdAdminPassword); ok {
		return x.VesK8SClusterArgocdAdminPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesNfvServiceBigIpPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesNfvServiceBigIpPassword); ok {
		return x.VesNfvServiceBigIpPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesNfvServicePanFwPanaromaKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesNfvServicePanFwPanaromaKey); ok {
		return x.VesNfvServicePanFwPanaromaKey
	}
	return false
}

func (m *BFSecretChoice) GetVesNfvServicePanFwSshPvtKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesNfvServicePanFwSshPvtKey); ok {
		return x.VesNfvServicePanFwSshPvtKey
	}
	return false
}

func (m *BFSecretChoice) GetVesNfvServicePanFwUserPasswd() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesNfvServicePanFwUserPasswd); ok {
		return x.VesNfvServicePanFwUserPasswd
	}
	return false
}

func (m *BFSecretChoice) GetVesCdnLoadbalancerCertificate() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesCdnLoadbalancerCertificate); ok {
		return x.VesCdnLoadbalancerCertificate
	}
	return false
}

func (m *BFSecretChoice) GetVesGlobalLogReceiverSecret() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesGlobalLogReceiverSecret); ok {
		return x.VesGlobalLogReceiverSecret
	}
	return false
}

func (m *BFSecretChoice) GetVesAzureExpressRouteAuthorizationKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAzureExpressRouteAuthorizationKey); ok {
		return x.VesAzureExpressRouteAuthorizationKey
	}
	return false
}

func (m *BFSecretChoice) GetVesBigipApmServiceBigIpPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesBigipApmServiceBigIpPassword); ok {
		return x.VesBigipApmServiceBigIpPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesIoNfvServiceBigIpBmAdminPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword); ok {
		return x.VesIoNfvServiceBigIpBmAdminPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverWebhookUrl() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverWebhookUrl); ok {
		return x.VesAlertReceiverWebhookUrl
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword); ok {
		return x.VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken); ok {
		return x.VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken
	}
	return false
}

func (m *BFSecretChoice) GetVesCloudLinkAwsByocBgpAuthToken() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken); ok {
		return x.VesCloudLinkAwsByocBgpAuthToken
	}
	return false
}

func (m *BFSecretChoice) GetVesCertificatePrivateKey() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesCertificatePrivateKey); ok {
		return x.VesCertificatePrivateKey
	}
	return false
}

func (m *BFSecretChoice) GetVesIoNfvServiceBigIqLicBmAdminPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword); ok {
		return x.VesIoNfvServiceBigIqLicBmAdminPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesIoCminstanceAdminPassword() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesIoCminstanceAdminPassword); ok {
		return x.VesIoCminstanceAdminPassword
	}
	return false
}

func (m *BFSecretChoice) GetVesIoCminstanceApiToken() bool {
	if x, ok := m.GetChoice().(*BFSecretChoice_VesIoCminstanceApiToken); ok {
		return x.VesIoCminstanceApiToken
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BFSecretChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BFSecretChoice_VesContainerRegistryPassword)(nil),
		(*BFSecretChoice_VesAlertReceiverSlackUrl)(nil),
		(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey)(nil),
		(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey)(nil),
		(*BFSecretChoice_VesTerraformJobViewSite)(nil),
		(*BFSecretChoice_VesK8SClusterArgocdAdminPassword)(nil),
		(*BFSecretChoice_VesNfvServiceBigIpPassword)(nil),
		(*BFSecretChoice_VesNfvServicePanFwPanaromaKey)(nil),
		(*BFSecretChoice_VesNfvServicePanFwSshPvtKey)(nil),
		(*BFSecretChoice_VesNfvServicePanFwUserPasswd)(nil),
		(*BFSecretChoice_VesCdnLoadbalancerCertificate)(nil),
		(*BFSecretChoice_VesGlobalLogReceiverSecret)(nil),
		(*BFSecretChoice_VesAzureExpressRouteAuthorizationKey)(nil),
		(*BFSecretChoice_VesBigipApmServiceBigIpPassword)(nil),
		(*BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword)(nil),
		(*BFSecretChoice_VesAlertReceiverWebhookUrl)(nil),
		(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword)(nil),
		(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken)(nil),
		(*BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken)(nil),
		(*BFSecretChoice_VesCertificatePrivateKey)(nil),
		(*BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword)(nil),
		(*BFSecretChoice_VesIoCminstanceAdminPassword)(nil),
		(*BFSecretChoice_VesIoCminstanceApiToken)(nil),
	}
}

type ReEncryptSecretItemType struct {
	FieldPath  string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	PolicyName string `protobuf:"bytes,2,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (m *ReEncryptSecretItemType) Reset()      { *m = ReEncryptSecretItemType{} }
func (*ReEncryptSecretItemType) ProtoMessage() {}
func (*ReEncryptSecretItemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{2}
}
func (m *ReEncryptSecretItemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReEncryptSecretItemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReEncryptSecretItemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReEncryptSecretItemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReEncryptSecretItemType.Merge(m, src)
}
func (m *ReEncryptSecretItemType) XXX_Size() int {
	return m.Size()
}
func (m *ReEncryptSecretItemType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReEncryptSecretItemType.DiscardUnknown(m)
}

var xxx_messageInfo_ReEncryptSecretItemType proto.InternalMessageInfo

func (m *ReEncryptSecretItemType) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

func (m *ReEncryptSecretItemType) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

type ReEncryptSecretsType struct {
	Items []*ReEncryptSecretItemType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ReEncryptSecretsType) Reset()      { *m = ReEncryptSecretsType{} }
func (*ReEncryptSecretsType) ProtoMessage() {}
func (*ReEncryptSecretsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{3}
}
func (m *ReEncryptSecretsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReEncryptSecretsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReEncryptSecretsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReEncryptSecretsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReEncryptSecretsType.Merge(m, src)
}
func (m *ReEncryptSecretsType) XXX_Size() int {
	return m.Size()
}
func (m *ReEncryptSecretsType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReEncryptSecretsType.DiscardUnknown(m)
}

var xxx_messageInfo_ReEncryptSecretsType proto.InternalMessageInfo

func (m *ReEncryptSecretsType) GetItems() []*ReEncryptSecretItemType {
	if m != nil {
		return m.Items
	}
	return nil
}

type ServiceSlugInfo struct {
	// As API gateway is programmed. e.g. config (allows for dashes)
	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Daemon string `protobuf:"bytes,2,opt,name=daemon,proto3" json:"daemon,omitempty"`
	// p0_policy_name is name for the secret policy which allows
	// specific XC service to decrypt a secret, e.g. ves-io-allow-config
	// p0_policy_name shouldn't be renamed once defined
	P0PolName string `protobuf:"bytes,3,opt,name=p0_pol_name,json=p0PolName,proto3" json:"p0_pol_name,omitempty"`
	// service_selector is regex to match specific service to decrypt a secret
	ServiceSelector string `protobuf:"bytes,4,opt,name=service_selector,json=serviceSelector,proto3" json:"service_selector,omitempty"`
}

func (m *ServiceSlugInfo) Reset()      { *m = ServiceSlugInfo{} }
func (*ServiceSlugInfo) ProtoMessage() {}
func (*ServiceSlugInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{4}
}
func (m *ServiceSlugInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSlugInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSlugInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceSlugInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSlugInfo.Merge(m, src)
}
func (m *ServiceSlugInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSlugInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSlugInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSlugInfo proto.InternalMessageInfo

func (m *ServiceSlugInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ServiceSlugInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

func (m *ServiceSlugInfo) GetP0PolName() string {
	if m != nil {
		return m.P0PolName
	}
	return ""
}

func (m *ServiceSlugInfo) GetServiceSelector() string {
	if m != nil {
		return m.ServiceSelector
	}
	return ""
}

// SecretSlugChoice enumerates the slug for every public service on the api-gw
// Note: all services (including internal are defined separately in 'message ServiceChoice')
type ServiceSlugChoice struct {
	// Types that are valid to be assigned to Choice:
	//
	//	*ServiceSlugChoice_Alert
	//	*ServiceSlugChoice_Config
	//	*ServiceSlugChoice_Data
	//	*ServiceSlugChoice_Infraprotect
	//	*ServiceSlugChoice_Kms
	//	*ServiceSlugChoice_Ml
	//	*ServiceSlugChoice_Operate
	//	*ServiceSlugChoice_Register
	//	*ServiceSlugChoice_SecretManagement
	//	*ServiceSlugChoice_Terraform
	//	*ServiceSlugChoice_Tpm
	//	*ServiceSlugChoice_Uam
	//	*ServiceSlugChoice_Web
	//	*ServiceSlugChoice_DeviceId
	//	*ServiceSlugChoice_Safe
	//	*ServiceSlugChoice_ClientSideDefense
	//	*ServiceSlugChoice_BotDefense
	//	*ServiceSlugChoice_ObjectStore
	//	*ServiceSlugChoice_Recognize
	//	*ServiceSlugChoice_Dns
	//	*ServiceSlugChoice_Bfdp
	//	*ServiceSlugChoice_Scim
	//	*ServiceSlugChoice_Cdn
	//	*ServiceSlugChoice_NginxMgmtSuiteConnector
	//	*ServiceSlugChoice_BotDefenseMobileSdk
	//	*ServiceSlugChoice_Nginx
	//	*ServiceSlugChoice_Safeap
	//	*ServiceSlugChoice_Aip
	//	*ServiceSlugChoice_LogReceiver
	//	*ServiceSlugChoice_ObservabilityConnector
	//	*ServiceSlugChoice_Report
	//	*ServiceSlugChoice_Waf
	//	*ServiceSlugChoice_ObservabilitySyntheticMonitor
	//	*ServiceSlugChoice_CloudData
	//	*ServiceSlugChoice_MobileIntegrator
	//	*ServiceSlugChoice_DataIntelligence
	//	*ServiceSlugChoice_Brmalerts
	//	*ServiceSlugChoice_Marketplace
	//	*ServiceSlugChoice_MarketplaceOnboard
	//	*ServiceSlugChoice_NginxOne
	Choice isServiceSlugChoice_Choice `protobuf_oneof:"choice"`
}

func (m *ServiceSlugChoice) Reset()      { *m = ServiceSlugChoice{} }
func (*ServiceSlugChoice) ProtoMessage() {}
func (*ServiceSlugChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{5}
}
func (m *ServiceSlugChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSlugChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSlugChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceSlugChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSlugChoice.Merge(m, src)
}
func (m *ServiceSlugChoice) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSlugChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSlugChoice.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSlugChoice proto.InternalMessageInfo

type isServiceSlugChoice_Choice interface {
	isServiceSlugChoice_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceSlugChoice_Alert struct {
	Alert bool `protobuf:"varint,1,opt,name=alert,proto3,oneof" json:"alert,omitempty"`
}
type ServiceSlugChoice_Config struct {
	Config bool `protobuf:"varint,2,opt,name=config,proto3,oneof" json:"config,omitempty"`
}
type ServiceSlugChoice_Data struct {
	Data bool `protobuf:"varint,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
}
type ServiceSlugChoice_Infraprotect struct {
	Infraprotect bool `protobuf:"varint,4,opt,name=infraprotect,proto3,oneof" json:"infraprotect,omitempty"`
}
type ServiceSlugChoice_Kms struct {
	Kms bool `protobuf:"varint,5,opt,name=kms,proto3,oneof" json:"kms,omitempty"`
}
type ServiceSlugChoice_Ml struct {
	Ml bool `protobuf:"varint,6,opt,name=ml,proto3,oneof" json:"ml,omitempty"`
}
type ServiceSlugChoice_Operate struct {
	Operate bool `protobuf:"varint,7,opt,name=operate,proto3,oneof" json:"operate,omitempty"`
}
type ServiceSlugChoice_Register struct {
	Register bool `protobuf:"varint,8,opt,name=register,proto3,oneof" json:"register,omitempty"`
}
type ServiceSlugChoice_SecretManagement struct {
	SecretManagement bool `protobuf:"varint,9,opt,name=secret_management,json=secretManagement,proto3,oneof" json:"secret_management,omitempty"`
}
type ServiceSlugChoice_Terraform struct {
	Terraform bool `protobuf:"varint,10,opt,name=terraform,proto3,oneof" json:"terraform,omitempty"`
}
type ServiceSlugChoice_Tpm struct {
	Tpm bool `protobuf:"varint,11,opt,name=tpm,proto3,oneof" json:"tpm,omitempty"`
}
type ServiceSlugChoice_Uam struct {
	Uam bool `protobuf:"varint,12,opt,name=uam,proto3,oneof" json:"uam,omitempty"`
}
type ServiceSlugChoice_Web struct {
	Web bool `protobuf:"varint,13,opt,name=web,proto3,oneof" json:"web,omitempty"`
}
type ServiceSlugChoice_DeviceId struct {
	DeviceId bool `protobuf:"varint,14,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
}
type ServiceSlugChoice_Safe struct {
	Safe bool `protobuf:"varint,15,opt,name=safe,proto3,oneof" json:"safe,omitempty"`
}
type ServiceSlugChoice_ClientSideDefense struct {
	ClientSideDefense bool `protobuf:"varint,16,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type ServiceSlugChoice_BotDefense struct {
	BotDefense bool `protobuf:"varint,17,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type ServiceSlugChoice_ObjectStore struct {
	ObjectStore bool `protobuf:"varint,18,opt,name=object_store,json=objectStore,proto3,oneof" json:"object_store,omitempty"`
}
type ServiceSlugChoice_Recognize struct {
	Recognize bool `protobuf:"varint,19,opt,name=recognize,proto3,oneof" json:"recognize,omitempty"`
}
type ServiceSlugChoice_Dns struct {
	Dns bool `protobuf:"varint,20,opt,name=dns,proto3,oneof" json:"dns,omitempty"`
}
type ServiceSlugChoice_Bfdp struct {
	Bfdp bool `protobuf:"varint,21,opt,name=bfdp,proto3,oneof" json:"bfdp,omitempty"`
}
type ServiceSlugChoice_Scim struct {
	Scim bool `protobuf:"varint,23,opt,name=scim,proto3,oneof" json:"scim,omitempty"`
}
type ServiceSlugChoice_Cdn struct {
	Cdn bool `protobuf:"varint,24,opt,name=cdn,proto3,oneof" json:"cdn,omitempty"`
}
type ServiceSlugChoice_NginxMgmtSuiteConnector struct {
	NginxMgmtSuiteConnector bool `protobuf:"varint,25,opt,name=nginx_mgmt_suite_connector,json=nginxMgmtSuiteConnector,proto3,oneof" json:"nginx_mgmt_suite_connector,omitempty"`
}
type ServiceSlugChoice_BotDefenseMobileSdk struct {
	BotDefenseMobileSdk bool `protobuf:"varint,26,opt,name=bot_defense_mobile_sdk,json=botDefenseMobileSdk,proto3,oneof" json:"bot_defense_mobile_sdk,omitempty"`
}
type ServiceSlugChoice_Nginx struct {
	Nginx bool `protobuf:"varint,27,opt,name=nginx,proto3,oneof" json:"nginx,omitempty"`
}
type ServiceSlugChoice_Safeap struct {
	Safeap bool `protobuf:"varint,28,opt,name=safeap,proto3,oneof" json:"safeap,omitempty"`
}
type ServiceSlugChoice_Aip struct {
	Aip bool `protobuf:"varint,29,opt,name=aip,proto3,oneof" json:"aip,omitempty"`
}
type ServiceSlugChoice_LogReceiver struct {
	LogReceiver bool `protobuf:"varint,30,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ServiceSlugChoice_ObservabilityConnector struct {
	ObservabilityConnector bool `protobuf:"varint,31,opt,name=observability_connector,json=observabilityConnector,proto3,oneof" json:"observability_connector,omitempty"`
}
type ServiceSlugChoice_Report struct {
	Report bool `protobuf:"varint,32,opt,name=report,proto3,oneof" json:"report,omitempty"`
}
type ServiceSlugChoice_Waf struct {
	Waf bool `protobuf:"varint,33,opt,name=waf,proto3,oneof" json:"waf,omitempty"`
}
type ServiceSlugChoice_ObservabilitySyntheticMonitor struct {
	ObservabilitySyntheticMonitor bool `protobuf:"varint,34,opt,name=observability_synthetic_monitor,json=observabilitySyntheticMonitor,proto3,oneof" json:"observability_synthetic_monitor,omitempty"`
}
type ServiceSlugChoice_CloudData struct {
	CloudData bool `protobuf:"varint,35,opt,name=cloud_data,json=cloudData,proto3,oneof" json:"cloud_data,omitempty"`
}
type ServiceSlugChoice_MobileIntegrator struct {
	MobileIntegrator bool `protobuf:"varint,36,opt,name=mobile_integrator,json=mobileIntegrator,proto3,oneof" json:"mobile_integrator,omitempty"`
}
type ServiceSlugChoice_DataIntelligence struct {
	DataIntelligence bool `protobuf:"varint,37,opt,name=data_intelligence,json=dataIntelligence,proto3,oneof" json:"data_intelligence,omitempty"`
}
type ServiceSlugChoice_Brmalerts struct {
	Brmalerts bool `protobuf:"varint,38,opt,name=brmalerts,proto3,oneof" json:"brmalerts,omitempty"`
}
type ServiceSlugChoice_Marketplace struct {
	Marketplace bool `protobuf:"varint,39,opt,name=marketplace,proto3,oneof" json:"marketplace,omitempty"`
}
type ServiceSlugChoice_MarketplaceOnboard struct {
	MarketplaceOnboard bool `protobuf:"varint,40,opt,name=marketplace_onboard,json=marketplaceOnboard,proto3,oneof" json:"marketplace_onboard,omitempty"`
}
type ServiceSlugChoice_NginxOne struct {
	NginxOne bool `protobuf:"varint,41,opt,name=nginx_one,json=nginxOne,proto3,oneof" json:"nginx_one,omitempty"`
}

func (*ServiceSlugChoice_Alert) isServiceSlugChoice_Choice()                         {}
func (*ServiceSlugChoice_Config) isServiceSlugChoice_Choice()                        {}
func (*ServiceSlugChoice_Data) isServiceSlugChoice_Choice()                          {}
func (*ServiceSlugChoice_Infraprotect) isServiceSlugChoice_Choice()                  {}
func (*ServiceSlugChoice_Kms) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_Ml) isServiceSlugChoice_Choice()                            {}
func (*ServiceSlugChoice_Operate) isServiceSlugChoice_Choice()                       {}
func (*ServiceSlugChoice_Register) isServiceSlugChoice_Choice()                      {}
func (*ServiceSlugChoice_SecretManagement) isServiceSlugChoice_Choice()              {}
func (*ServiceSlugChoice_Terraform) isServiceSlugChoice_Choice()                     {}
func (*ServiceSlugChoice_Tpm) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_Uam) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_Web) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_DeviceId) isServiceSlugChoice_Choice()                      {}
func (*ServiceSlugChoice_Safe) isServiceSlugChoice_Choice()                          {}
func (*ServiceSlugChoice_ClientSideDefense) isServiceSlugChoice_Choice()             {}
func (*ServiceSlugChoice_BotDefense) isServiceSlugChoice_Choice()                    {}
func (*ServiceSlugChoice_ObjectStore) isServiceSlugChoice_Choice()                   {}
func (*ServiceSlugChoice_Recognize) isServiceSlugChoice_Choice()                     {}
func (*ServiceSlugChoice_Dns) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_Bfdp) isServiceSlugChoice_Choice()                          {}
func (*ServiceSlugChoice_Scim) isServiceSlugChoice_Choice()                          {}
func (*ServiceSlugChoice_Cdn) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_NginxMgmtSuiteConnector) isServiceSlugChoice_Choice()       {}
func (*ServiceSlugChoice_BotDefenseMobileSdk) isServiceSlugChoice_Choice()           {}
func (*ServiceSlugChoice_Nginx) isServiceSlugChoice_Choice()                         {}
func (*ServiceSlugChoice_Safeap) isServiceSlugChoice_Choice()                        {}
func (*ServiceSlugChoice_Aip) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_LogReceiver) isServiceSlugChoice_Choice()                   {}
func (*ServiceSlugChoice_ObservabilityConnector) isServiceSlugChoice_Choice()        {}
func (*ServiceSlugChoice_Report) isServiceSlugChoice_Choice()                        {}
func (*ServiceSlugChoice_Waf) isServiceSlugChoice_Choice()                           {}
func (*ServiceSlugChoice_ObservabilitySyntheticMonitor) isServiceSlugChoice_Choice() {}
func (*ServiceSlugChoice_CloudData) isServiceSlugChoice_Choice()                     {}
func (*ServiceSlugChoice_MobileIntegrator) isServiceSlugChoice_Choice()              {}
func (*ServiceSlugChoice_DataIntelligence) isServiceSlugChoice_Choice()              {}
func (*ServiceSlugChoice_Brmalerts) isServiceSlugChoice_Choice()                     {}
func (*ServiceSlugChoice_Marketplace) isServiceSlugChoice_Choice()                   {}
func (*ServiceSlugChoice_MarketplaceOnboard) isServiceSlugChoice_Choice()            {}
func (*ServiceSlugChoice_NginxOne) isServiceSlugChoice_Choice()                      {}

func (m *ServiceSlugChoice) GetChoice() isServiceSlugChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *ServiceSlugChoice) GetAlert() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Alert); ok {
		return x.Alert
	}
	return false
}

func (m *ServiceSlugChoice) GetConfig() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Config); ok {
		return x.Config
	}
	return false
}

func (m *ServiceSlugChoice) GetData() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Data); ok {
		return x.Data
	}
	return false
}

func (m *ServiceSlugChoice) GetInfraprotect() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Infraprotect); ok {
		return x.Infraprotect
	}
	return false
}

func (m *ServiceSlugChoice) GetKms() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Kms); ok {
		return x.Kms
	}
	return false
}

func (m *ServiceSlugChoice) GetMl() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Ml); ok {
		return x.Ml
	}
	return false
}

func (m *ServiceSlugChoice) GetOperate() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Operate); ok {
		return x.Operate
	}
	return false
}

func (m *ServiceSlugChoice) GetRegister() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Register); ok {
		return x.Register
	}
	return false
}

func (m *ServiceSlugChoice) GetSecretManagement() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_SecretManagement); ok {
		return x.SecretManagement
	}
	return false
}

func (m *ServiceSlugChoice) GetTerraform() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Terraform); ok {
		return x.Terraform
	}
	return false
}

func (m *ServiceSlugChoice) GetTpm() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Tpm); ok {
		return x.Tpm
	}
	return false
}

func (m *ServiceSlugChoice) GetUam() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Uam); ok {
		return x.Uam
	}
	return false
}

func (m *ServiceSlugChoice) GetWeb() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Web); ok {
		return x.Web
	}
	return false
}

func (m *ServiceSlugChoice) GetDeviceId() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_DeviceId); ok {
		return x.DeviceId
	}
	return false
}

func (m *ServiceSlugChoice) GetSafe() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Safe); ok {
		return x.Safe
	}
	return false
}

func (m *ServiceSlugChoice) GetClientSideDefense() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return false
}

func (m *ServiceSlugChoice) GetBotDefense() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_BotDefense); ok {
		return x.BotDefense
	}
	return false
}

func (m *ServiceSlugChoice) GetObjectStore() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_ObjectStore); ok {
		return x.ObjectStore
	}
	return false
}

func (m *ServiceSlugChoice) GetRecognize() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Recognize); ok {
		return x.Recognize
	}
	return false
}

func (m *ServiceSlugChoice) GetDns() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Dns); ok {
		return x.Dns
	}
	return false
}

func (m *ServiceSlugChoice) GetBfdp() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Bfdp); ok {
		return x.Bfdp
	}
	return false
}

func (m *ServiceSlugChoice) GetScim() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Scim); ok {
		return x.Scim
	}
	return false
}

func (m *ServiceSlugChoice) GetCdn() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Cdn); ok {
		return x.Cdn
	}
	return false
}

func (m *ServiceSlugChoice) GetNginxMgmtSuiteConnector() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_NginxMgmtSuiteConnector); ok {
		return x.NginxMgmtSuiteConnector
	}
	return false
}

func (m *ServiceSlugChoice) GetBotDefenseMobileSdk() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_BotDefenseMobileSdk); ok {
		return x.BotDefenseMobileSdk
	}
	return false
}

func (m *ServiceSlugChoice) GetNginx() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Nginx); ok {
		return x.Nginx
	}
	return false
}

func (m *ServiceSlugChoice) GetSafeap() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Safeap); ok {
		return x.Safeap
	}
	return false
}

func (m *ServiceSlugChoice) GetAip() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Aip); ok {
		return x.Aip
	}
	return false
}

func (m *ServiceSlugChoice) GetLogReceiver() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_LogReceiver); ok {
		return x.LogReceiver
	}
	return false
}

func (m *ServiceSlugChoice) GetObservabilityConnector() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_ObservabilityConnector); ok {
		return x.ObservabilityConnector
	}
	return false
}

func (m *ServiceSlugChoice) GetReport() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Report); ok {
		return x.Report
	}
	return false
}

func (m *ServiceSlugChoice) GetWaf() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Waf); ok {
		return x.Waf
	}
	return false
}

func (m *ServiceSlugChoice) GetObservabilitySyntheticMonitor() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_ObservabilitySyntheticMonitor); ok {
		return x.ObservabilitySyntheticMonitor
	}
	return false
}

func (m *ServiceSlugChoice) GetCloudData() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_CloudData); ok {
		return x.CloudData
	}
	return false
}

func (m *ServiceSlugChoice) GetMobileIntegrator() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_MobileIntegrator); ok {
		return x.MobileIntegrator
	}
	return false
}

func (m *ServiceSlugChoice) GetDataIntelligence() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_DataIntelligence); ok {
		return x.DataIntelligence
	}
	return false
}

func (m *ServiceSlugChoice) GetBrmalerts() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Brmalerts); ok {
		return x.Brmalerts
	}
	return false
}

func (m *ServiceSlugChoice) GetMarketplace() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_Marketplace); ok {
		return x.Marketplace
	}
	return false
}

func (m *ServiceSlugChoice) GetMarketplaceOnboard() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_MarketplaceOnboard); ok {
		return x.MarketplaceOnboard
	}
	return false
}

func (m *ServiceSlugChoice) GetNginxOne() bool {
	if x, ok := m.GetChoice().(*ServiceSlugChoice_NginxOne); ok {
		return x.NginxOne
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServiceSlugChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServiceSlugChoice_Alert)(nil),
		(*ServiceSlugChoice_Config)(nil),
		(*ServiceSlugChoice_Data)(nil),
		(*ServiceSlugChoice_Infraprotect)(nil),
		(*ServiceSlugChoice_Kms)(nil),
		(*ServiceSlugChoice_Ml)(nil),
		(*ServiceSlugChoice_Operate)(nil),
		(*ServiceSlugChoice_Register)(nil),
		(*ServiceSlugChoice_SecretManagement)(nil),
		(*ServiceSlugChoice_Terraform)(nil),
		(*ServiceSlugChoice_Tpm)(nil),
		(*ServiceSlugChoice_Uam)(nil),
		(*ServiceSlugChoice_Web)(nil),
		(*ServiceSlugChoice_DeviceId)(nil),
		(*ServiceSlugChoice_Safe)(nil),
		(*ServiceSlugChoice_ClientSideDefense)(nil),
		(*ServiceSlugChoice_BotDefense)(nil),
		(*ServiceSlugChoice_ObjectStore)(nil),
		(*ServiceSlugChoice_Recognize)(nil),
		(*ServiceSlugChoice_Dns)(nil),
		(*ServiceSlugChoice_Bfdp)(nil),
		(*ServiceSlugChoice_Scim)(nil),
		(*ServiceSlugChoice_Cdn)(nil),
		(*ServiceSlugChoice_NginxMgmtSuiteConnector)(nil),
		(*ServiceSlugChoice_BotDefenseMobileSdk)(nil),
		(*ServiceSlugChoice_Nginx)(nil),
		(*ServiceSlugChoice_Safeap)(nil),
		(*ServiceSlugChoice_Aip)(nil),
		(*ServiceSlugChoice_LogReceiver)(nil),
		(*ServiceSlugChoice_ObservabilityConnector)(nil),
		(*ServiceSlugChoice_Report)(nil),
		(*ServiceSlugChoice_Waf)(nil),
		(*ServiceSlugChoice_ObservabilitySyntheticMonitor)(nil),
		(*ServiceSlugChoice_CloudData)(nil),
		(*ServiceSlugChoice_MobileIntegrator)(nil),
		(*ServiceSlugChoice_DataIntelligence)(nil),
		(*ServiceSlugChoice_Brmalerts)(nil),
		(*ServiceSlugChoice_Marketplace)(nil),
		(*ServiceSlugChoice_MarketplaceOnboard)(nil),
		(*ServiceSlugChoice_NginxOne)(nil),
	}
}

// ServiceInfo encapsulates information of a service in VES environment
type ServiceInfo struct {
	// Name of the daemon e.g. akar, nio, vega
	Daemon string `protobuf:"bytes,1,opt,name=daemon,proto3" json:"daemon,omitempty"`
	// Locations where daemon runs in e.g. GC, RE, CE
	Locations []string `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	// description of the service eg "flow collector" for ganges
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ServiceInfo) Reset()      { *m = ServiceInfo{} }
func (*ServiceInfo) ProtoMessage() {}
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{6}
}
func (m *ServiceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInfo.Merge(m, src)
}
func (m *ServiceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServiceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInfo proto.InternalMessageInfo

func (m *ServiceInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

func (m *ServiceInfo) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *ServiceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// NameToUid is used to map well-known-names to their stable UIDs in environment(e.g. api_group.Object)
type NameToUid struct {
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid       string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *NameToUid) Reset()      { *m = NameToUid{} }
func (*NameToUid) ProtoMessage() {}
func (*NameToUid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{7}
}
func (m *NameToUid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameToUid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameToUid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameToUid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameToUid.Merge(m, src)
}
func (m *NameToUid) XXX_Size() int {
	return m.Size()
}
func (m *NameToUid) XXX_DiscardUnknown() {
	xxx_messageInfo_NameToUid.DiscardUnknown(m)
}

var xxx_messageInfo_NameToUid proto.InternalMessageInfo

func (m *NameToUid) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NameToUid) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameToUid) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// QuotaResourceKeyInfo encapsulates information about a key in quota.Object.resources field
type QuotaResourceKeyInfo struct {
	// value is what is used in resource_limits field of quota.Object
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// daemon is the name of the daemon handling this aspect
	Daemon string `protobuf:"bytes,2,opt,name=daemon,proto3" json:"daemon,omitempty"`
}

func (m *QuotaResourceKeyInfo) Reset()      { *m = QuotaResourceKeyInfo{} }
func (*QuotaResourceKeyInfo) ProtoMessage() {}
func (*QuotaResourceKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{8}
}
func (m *QuotaResourceKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuotaResourceKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuotaResourceKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuotaResourceKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaResourceKeyInfo.Merge(m, src)
}
func (m *QuotaResourceKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *QuotaResourceKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaResourceKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaResourceKeyInfo proto.InternalMessageInfo

func (m *QuotaResourceKeyInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QuotaResourceKeyInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

// RouteTargetInfo encapsulates information about a route-target in use in all VES environments
// IP address based route targets look like "target:<ip-address>:<value>"
// ASN based route targets look like "target:<asn>:<value>"
type RouteTargetInfo struct {
	// Generate IP address based route-target using the cluster IP for each site. The default value
	// is false, which means that ASN based route-target is generated. The IP/ASN value is known as
	// the global discriminator.
	IpBased bool `protobuf:"varint,3,opt,name=ip_based,json=ipBased,proto3" json:"ip_based,omitempty"`
	// This is the route-target local discriminator. Must be <= 65535 for IP address based targets.
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// A CSV of object types that use this route-target number
	ForObjectTypes string `protobuf:"bytes,2,opt,name=for_object_types,json=forObjectTypes,proto3" json:"for_object_types,omitempty"`
}

func (m *RouteTargetInfo) Reset()      { *m = RouteTargetInfo{} }
func (*RouteTargetInfo) ProtoMessage() {}
func (*RouteTargetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{9}
}
func (m *RouteTargetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTargetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteTargetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteTargetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTargetInfo.Merge(m, src)
}
func (m *RouteTargetInfo) XXX_Size() int {
	return m.Size()
}
func (m *RouteTargetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTargetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTargetInfo proto.InternalMessageInfo

func (m *RouteTargetInfo) GetIpBased() bool {
	if m != nil {
		return m.IpBased
	}
	return false
}

func (m *RouteTargetInfo) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RouteTargetInfo) GetForObjectTypes() string {
	if m != nil {
		return m.ForObjectTypes
	}
	return ""
}

type APIGroupElementItem struct {
	Method    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	PathRegex string `protobuf:"bytes,2,opt,name=path_regex,json=pathRegex,proto3" json:"path_regex,omitempty"`
}

func (m *APIGroupElementItem) Reset()      { *m = APIGroupElementItem{} }
func (*APIGroupElementItem) ProtoMessage() {}
func (*APIGroupElementItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{10}
}
func (m *APIGroupElementItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroupElementItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIGroupElementItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIGroupElementItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroupElementItem.Merge(m, src)
}
func (m *APIGroupElementItem) XXX_Size() int {
	return m.Size()
}
func (m *APIGroupElementItem) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroupElementItem.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroupElementItem proto.InternalMessageInfo

func (m *APIGroupElementItem) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIGroupElementItem) GetPathRegex() string {
	if m != nil {
		return m.PathRegex
	}
	return ""
}

type APIGroupElementInfo struct {
	// This is name of api_group_element to be created. e.g. ves-io-some-custom-api-group-element-name
	// If 'items' is not empty, then 'name' is only a prefix of api_group_elements to be created. e.g.
	// ves-io-some-api-group-element-name-0, ves-io-some-api-group-element-name-1 etc.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This is the namespace in which api_group_element has to be created. If not specified it will be created in default NS.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// optional method to path-regex mappings, allows for specifying more than one path for same method (e.g. additional_bindings)
	Items []*APIGroupElementItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *APIGroupElementInfo) Reset()      { *m = APIGroupElementInfo{} }
func (*APIGroupElementInfo) ProtoMessage() {}
func (*APIGroupElementInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{11}
}
func (m *APIGroupElementInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroupElementInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIGroupElementInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIGroupElementInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroupElementInfo.Merge(m, src)
}
func (m *APIGroupElementInfo) XXX_Size() int {
	return m.Size()
}
func (m *APIGroupElementInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroupElementInfo.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroupElementInfo proto.InternalMessageInfo

func (m *APIGroupElementInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIGroupElementInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIGroupElementInfo) GetItems() []*APIGroupElementItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddonServiceInfo struct {
	// This is the daemon addon service subscription is served.
	Daemon string `protobuf:"bytes,1,opt,name=daemon,proto3" json:"daemon,omitempty"`
	// Display name for the addon service.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// API Group name prefix. if set, following api group obj names will be derived
	// for addon service's service policy related configuration
	// <prefix>-read, <prefix>-write, <prefix>-admin, <prefix>-subscription-mgmt
	ApiGroupNamePrefix string `protobuf:"bytes,3,opt,name=api_group_name_prefix,json=apiGroupNamePrefix,proto3" json:"api_group_name_prefix,omitempty"`
}

func (m *AddonServiceInfo) Reset()      { *m = AddonServiceInfo{} }
func (*AddonServiceInfo) ProtoMessage() {}
func (*AddonServiceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{12}
}
func (m *AddonServiceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonServiceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddonServiceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddonServiceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonServiceInfo.Merge(m, src)
}
func (m *AddonServiceInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddonServiceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonServiceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddonServiceInfo proto.InternalMessageInfo

func (m *AddonServiceInfo) GetDaemon() string {
	if m != nil {
		return m.Daemon
	}
	return ""
}

func (m *AddonServiceInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AddonServiceInfo) GetApiGroupNamePrefix() string {
	if m != nil {
		return m.ApiGroupNamePrefix
	}
	return ""
}

type APIGroupNameMapItem struct {
	// rpc_name is the name of RPC e.g. Create
	RpcName string `protobuf:"bytes,1,opt,name=rpc_name,json=rpcName,proto3" json:"rpc_name,omitempty"`
	// api_group_names is a csv of api group names e.g. "ves-io-network-write, ves-io-network-monitor"
	ApiGroupNames string `protobuf:"bytes,2,opt,name=api_group_names,json=apiGroupNames,proto3" json:"api_group_names,omitempty"`
}

func (m *APIGroupNameMapItem) Reset()      { *m = APIGroupNameMapItem{} }
func (*APIGroupNameMapItem) ProtoMessage() {}
func (*APIGroupNameMapItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{13}
}
func (m *APIGroupNameMapItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroupNameMapItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIGroupNameMapItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIGroupNameMapItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroupNameMapItem.Merge(m, src)
}
func (m *APIGroupNameMapItem) XXX_Size() int {
	return m.Size()
}
func (m *APIGroupNameMapItem) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroupNameMapItem.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroupNameMapItem proto.InternalMessageInfo

func (m *APIGroupNameMapItem) GetRpcName() string {
	if m != nil {
		return m.RpcName
	}
	return ""
}

func (m *APIGroupNameMapItem) GetApiGroupNames() string {
	if m != nil {
		return m.ApiGroupNames
	}
	return ""
}

type APIGroupNameMap struct {
	RpcMappings []*APIGroupNameMapItem `protobuf:"bytes,1,rep,name=rpc_mappings,json=rpcMappings,proto3" json:"rpc_mappings,omitempty"`
}

func (m *APIGroupNameMap) Reset()      { *m = APIGroupNameMap{} }
func (*APIGroupNameMap) ProtoMessage() {}
func (*APIGroupNameMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6a27edde895262, []int{14}
}
func (m *APIGroupNameMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroupNameMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIGroupNameMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIGroupNameMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroupNameMap.Merge(m, src)
}
func (m *APIGroupNameMap) XXX_Size() int {
	return m.Size()
}
func (m *APIGroupNameMap) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroupNameMap.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroupNameMap proto.InternalMessageInfo

func (m *APIGroupNameMap) GetRpcMappings() []*APIGroupNameMapItem {
	if m != nil {
		return m.RpcMappings
	}
	return nil
}

var E_SvcSlugInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*ServiceSlugInfo)(nil),
	Field:         50100,
	Name:          "ves.io.schema.vesenv.svc_slug_info",
	Tag:           "bytes,50100,opt,name=svc_slug_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_QuotaRkeyInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*QuotaResourceKeyInfo)(nil),
	Field:         50101,
	Name:          "ves.io.schema.vesenv.quota_rkey_info",
	Tag:           "bytes,50101,opt,name=quota_rkey_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_BfSecretInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*BFSecretInfo)(nil),
	Field:         50102,
	Name:          "ves.io.schema.vesenv.bf_secret_info",
	Tag:           "bytes,50102,opt,name=bf_secret_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_SvcInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*ServiceInfo)(nil),
	Field:         50103,
	Name:          "ves.io.schema.vesenv.svc_info",
	Tag:           "bytes,50103,opt,name=svc_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_NameToUid = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*NameToUid)(nil),
	Field:         50104,
	Name:          "ves.io.schema.vesenv.name_to_uid",
	Tag:           "bytes,50104,opt,name=name_to_uid",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_RouteTargetInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*RouteTargetInfo)(nil),
	Field:         50105,
	Name:          "ves.io.schema.vesenv.route_target_info",
	Tag:           "bytes,50105,opt,name=route_target_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_AddonServiceInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*AddonServiceInfo)(nil),
	Field:         50106,
	Name:          "ves.io.schema.vesenv.addon_service_info",
	Tag:           "bytes,50106,opt,name=addon_service_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_AddonFeatureInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*AddonServiceInfo)(nil),
	Field:         50106,
	Name:          "ves.io.schema.vesenv.addon_feature_info",
	Tag:           "bytes,50106,opt,name=addon_feature_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_CrudServiceSlugChoice = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*ServiceSlugChoice)(nil),
	Field:         50200,
	Name:          "ves.io.schema.vesenv.crud_service_slug_choice",
	Tag:           "bytes,50200,opt,name=crud_service_slug_choice",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_CrudApiGroupPrefixes = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50201,
	Name:          "ves.io.schema.vesenv.crud_api_group_prefixes",
	Tag:           "bytes,50201,opt,name=crud_api_group_prefixes",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_CrudApiGroupNames = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*APIGroupNameMap)(nil),
	Field:         50202,
	Name:          "ves.io.schema.vesenv.crud_api_group_names",
	Tag:           "bytes,50202,opt,name=crud_api_group_names",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ReEncryptSecrets = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*ReEncryptSecretsType)(nil),
	Field:         50203,
	Name:          "ves.io.schema.vesenv.re_encrypt_secrets",
	Tag:           "bytes,50203,opt,name=re_encrypt_secrets",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ApiGroupNames = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50300,
	Name:          "ves.io.schema.vesenv.api_group_names",
	Tag:           "bytes,50300,opt,name=api_group_names",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ApiGroupElementInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*APIGroupElementInfo)(nil),
	Field:         50301,
	Name:          "ves.io.schema.vesenv.api_group_element_info",
	Tag:           "bytes,50301,opt,name=api_group_element_info",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

var E_ServiceSlugChoice = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*ServiceSlugChoice)(nil),
	Field:         50400,
	Name:          "ves.io.schema.vesenv.service_slug_choice",
	Tag:           "bytes,50400,opt,name=service_slug_choice",
	Filename:      "ves.io/schema/vesenv/options.proto",
}

func init() {
	proto.RegisterType((*BFSecretInfo)(nil), "ves.io.schema.vesenv.BFSecretInfo")
	proto.RegisterType((*BFSecretChoice)(nil), "ves.io.schema.vesenv.BFSecretChoice")
	proto.RegisterType((*ReEncryptSecretItemType)(nil), "ves.io.schema.vesenv.ReEncryptSecretItemType")
	proto.RegisterType((*ReEncryptSecretsType)(nil), "ves.io.schema.vesenv.ReEncryptSecretsType")
	proto.RegisterType((*ServiceSlugInfo)(nil), "ves.io.schema.vesenv.ServiceSlugInfo")
	proto.RegisterType((*ServiceSlugChoice)(nil), "ves.io.schema.vesenv.ServiceSlugChoice")
	proto.RegisterType((*ServiceInfo)(nil), "ves.io.schema.vesenv.ServiceInfo")
	proto.RegisterType((*NameToUid)(nil), "ves.io.schema.vesenv.NameToUid")
	proto.RegisterType((*QuotaResourceKeyInfo)(nil), "ves.io.schema.vesenv.QuotaResourceKeyInfo")
	proto.RegisterType((*RouteTargetInfo)(nil), "ves.io.schema.vesenv.RouteTargetInfo")
	proto.RegisterType((*APIGroupElementItem)(nil), "ves.io.schema.vesenv.APIGroupElementItem")
	proto.RegisterType((*APIGroupElementInfo)(nil), "ves.io.schema.vesenv.APIGroupElementInfo")
	proto.RegisterType((*AddonServiceInfo)(nil), "ves.io.schema.vesenv.AddonServiceInfo")
	proto.RegisterType((*APIGroupNameMapItem)(nil), "ves.io.schema.vesenv.APIGroupNameMapItem")
	proto.RegisterType((*APIGroupNameMap)(nil), "ves.io.schema.vesenv.APIGroupNameMap")
	proto.RegisterExtension(E_SvcSlugInfo)
	proto.RegisterExtension(E_QuotaRkeyInfo)
	proto.RegisterExtension(E_BfSecretInfo)
	proto.RegisterExtension(E_SvcInfo)
	proto.RegisterExtension(E_NameToUid)
	proto.RegisterExtension(E_RouteTargetInfo)
	proto.RegisterExtension(E_AddonServiceInfo)
	proto.RegisterExtension(E_AddonFeatureInfo)
	proto.RegisterExtension(E_CrudServiceSlugChoice)
	proto.RegisterExtension(E_CrudApiGroupPrefixes)
	proto.RegisterExtension(E_CrudApiGroupNames)
	proto.RegisterExtension(E_ReEncryptSecrets)
	proto.RegisterExtension(E_ApiGroupNames)
	proto.RegisterExtension(E_ApiGroupElementInfo)
	proto.RegisterExtension(E_ServiceSlugChoice)
}

func init() {
	proto.RegisterFile("ves.io/schema/vesenv/options.proto", fileDescriptor_7f6a27edde895262)
}

var fileDescriptor_7f6a27edde895262 = []byte{
	// 4616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x7a, 0xdb, 0x73, 0x1c, 0x57,
	0x5a, 0xf8, 0x8c, 0x25, 0xeb, 0x72, 0x24, 0x5b, 0x72, 0xfb, 0xd6, 0x56, 0x6c, 0xd9, 0x9e, 0x68,
	0x1d, 0xe7, 0x72, 0xa4, 0xe9, 0x9e, 0x9e, 0x99, 0x6e, 0xfd, 0x36, 0xbb, 0x3f, 0x4b, 0x76, 0x22,
	0x27, 0x76, 0xec, 0x8c, 0x9c, 0xec, 0x92, 0x0d, 0x34, 0xa7, 0x4f, 0x9f, 0x6e, 0x1d, 0xab, 0x6f,
	0xee, 0xee, 0x19, 0x59, 0x4e, 0xb1, 0xa4, 0x80, 0x82, 0x40, 0x15, 0x55, 0xcb, 0xa5, 0x0a, 0x08,
	0x50, 0x54, 0xe9, 0x05, 0x78, 0xa0, 0x8a, 0x52, 0xb1, 0xbb, 0x90, 0xe1, 0x05, 0x96, 0x5d, 0xb2,
	0xb0, 0x0b, 0xe1, 0x81, 0x25, 0x8f, 0x1b, 0xe7, 0x85, 0xc7, 0xfd, 0x03, 0xa0, 0x8a, 0x3a, 0xa7,
	0x4f, 0xcf, 0xf4, 0x8c, 0xc7, 0xb7, 0x85, 0x97, 0x99, 0x3e, 0xdf, 0xf7, 0x9d, 0xef, 0x72, 0xce,
	0x77, 0x3b, 0xa7, 0x1b, 0x54, 0x3a, 0x24, 0x59, 0xa6, 0xe1, 0x4a, 0x82, 0xb7, 0x88, 0x8f, 0x56,
	0x3a, 0x24, 0x21, 0x41, 0x67, 0x25, 0x8c, 0x52, 0x1a, 0x06, 0xc9, 0x72, 0x14, 0x87, 0x69, 0x28,
	0x1d, 0xcb, 0x68, 0x96, 0x33, 0x9a, 0xe5, 0x8c, 0x66, 0x01, 0xba, 0x34, 0xdd, 0x6a, 0x5b, 0xcb,
	0x38, 0xf4, 0x57, 0xdc, 0xd0, 0x0d, 0x57, 0x38, 0xb1, 0xd5, 0x76, 0xf8, 0x88, 0x0f, 0xf8, 0x53,
	0xc6, 0x64, 0xe1, 0x9c, 0x1b, 0x86, 0xae, 0x47, 0xfa, 0x54, 0x36, 0x49, 0x70, 0x4c, 0xa3, 0x34,
	0x8c, 0x33, 0x8a, 0xca, 0xaf, 0x1e, 0x00, 0xb3, 0x6b, 0xaf, 0x6c, 0x12, 0x1c, 0x93, 0xf4, 0x6a,
	0xe0, 0x84, 0xd2, 0x19, 0x00, 0xa2, 0xd0, 0xa3, 0x78, 0xd7, 0x6c, 0x53, 0x5b, 0x9e, 0x38, 0x57,
	0xbe, 0x38, 0xdd, 0x9a, 0xce, 0x20, 0x6f, 0x51, 0x5b, 0x3a, 0x0b, 0x66, 0x04, 0x3a, 0x40, 0x3e,
	0x91, 0xcb, 0x1c, 0x2f, 0x66, 0xbc, 0x81, 0x7c, 0x22, 0x3d, 0x03, 0x04, 0xb5, 0x49, 0x6d, 0xf9,
	0xc0, 0xb9, 0xf2, 0xc5, 0x83, 0xad, 0xa9, 0x0c, 0x70, 0xd5, 0x96, 0x9a, 0x40, 0xde, 0x21, 0x9e,
	0x67, 0x6e, 0x07, 0xe1, 0x4e, 0x60, 0xa6, 0x24, 0x40, 0x41, 0x6a, 0x46, 0x31, 0x71, 0xe8, 0x5d,
	0x79, 0x92, 0xb3, 0x3a, 0xce, 0xf0, 0xaf, 0x33, 0xf4, 0x2d, 0x8e, 0xbd, 0xc9, 0x91, 0x4c, 0xac,
	0x8b, 0xcd, 0x84, 0xc4, 0x1d, 0x8a, 0x49, 0x22, 0x8f, 0x9d, 0x1b, 0x63, 0x62, 0x5d, 0xbc, 0x29,
	0x20, 0xd2, 0x05, 0x30, 0x17, 0x84, 0x81, 0x59, 0x24, 0x1a, 0xe7, 0x44, 0x87, 0x82, 0x30, 0x78,
	0xb5, 0x4f, 0x77, 0x12, 0x4c, 0xba, 0xd8, 0xbc, 0x1d, 0x5a, 0x89, 0x7c, 0x90, 0xe3, 0x27, 0x5c,
	0xfc, 0x5a, 0x68, 0x25, 0x95, 0x1f, 0x2c, 0x81, 0xc3, 0xf9, 0x42, 0xac, 0x6f, 0x85, 0x14, 0x13,
	0xe9, 0x9b, 0x65, 0x70, 0xb6, 0x43, 0x12, 0x13, 0x87, 0x41, 0x8a, 0x68, 0x40, 0x62, 0x33, 0x26,
	0x2e, 0x4d, 0xd2, 0x78, 0xd7, 0x8c, 0x50, 0x92, 0xec, 0x84, 0xb1, 0xcd, 0x17, 0x60, 0x6a, 0xcd,
	0xdb, 0xef, 0xca, 0x5b, 0x80, 0x6d, 0x24, 0xa4, 0x21, 0xec, 0xd1, 0xc3, 0x9c, 0x1e, 0x26, 0x11,
	0xc1, 0xd0, 0xc5, 0xd9, 0x7f, 0x3e, 0x79, 0xfe, 0xef, 0x7e, 0xe5, 0xe5, 0x85, 0x71, 0xb4, 0x8d,
	0xe2, 0xca, 0xc1, 0x98, 0xfd, 0xa9, 0x4b, 0x75, 0xbd, 0x51, 0xb3, 0x55, 0xa3, 0x0e, 0x9d, 0x3a,
	0xaa, 0x41, 0xad, 0x81, 0x14, 0xa8, 0xd7, 0xab, 0x4d, 0x58, 0xaf, 0xe1, 0x9a, 0x51, 0x75, 0x9c,
	0xba, 0x65, 0xd4, 0x36, 0x4a, 0xad, 0xd3, 0x1d, 0x92, 0xac, 0xe7, 0x52, 0x5a, 0x42, 0xc8, 0x4d,
	0xc1, 0x96, 0xe9, 0xcd, 0x08, 0x4c, 0xe4, 0x91, 0x38, 0x35, 0x63, 0x82, 0x09, 0xed, 0x90, 0xd8,
	0x4c, 0x3c, 0x84, 0xb7, 0xcd, 0x76, 0xec, 0xf1, 0x6d, 0x99, 0x5a, 0x4b, 0xf6, 0xbb, 0x72, 0x08,
	0xea, 0x42, 0x69, 0x4e, 0x0c, 0x73, 0xe2, 0x41, 0x85, 0xfb, 0x50, 0xc6, 0x02, 0xb6, 0x63, 0x6f,
	0xfe, 0xef, 0x73, 0xd5, 0x17, 0x26, 0x50, 0xba, 0x45, 0x02, 0xa4, 0x2e, 0x11, 0x9d, 0xa8, 0x5a,
	0xdd, 0xb1, 0xa0, 0x6e, 0xd4, 0x1a, 0x50, 0xb3, 0x1d, 0x0c, 0x75, 0x8b, 0xd8, 0xd0, 0xaa, 0x63,
	0x55, 0xc1, 0x0a, 0x6e, 0x36, 0xf4, 0xea, 0x46, 0xa9, 0x25, 0x77, 0x48, 0x72, 0x89, 0x09, 0x6b,
	0x09, 0xae, 0x9b, 0x8c, 0xe9, 0x5b, 0xb1, 0x27, 0x7d, 0x5a, 0x06, 0x17, 0x47, 0xe8, 0x1d, 0x21,
	0x97, 0xc4, 0x76, 0x3b, 0xdd, 0x35, 0xe3, 0xb0, 0x9d, 0xd2, 0xc0, 0x35, 0xb7, 0xc9, 0xae, 0x3c,
	0xc6, 0x6d, 0xf8, 0xc5, 0xfd, 0xae, 0xfc, 0x1e, 0xb8, 0xf4, 0x34, 0x36, 0xf4, 0xd8, 0x41, 0xc1,
	0x0e, 0x6e, 0x93, 0xdd, 0xf9, 0xef, 0x3c, 0x68, 0x0f, 0xb6, 0x1a, 0x0e, 0xa9, 0xd5, 0x35, 0x58,
	0x75, 0x2c, 0x1d, 0x6a, 0x1a, 0xb3, 0x4c, 0x6d, 0xe8, 0xb0, 0x5e, 0xb7, 0x55, 0x52, 0xc3, 0x4d,
	0xd5, 0xb2, 0xed, 0x8d, 0x52, 0xeb, 0xd9, 0x61, 0x7b, 0x6e, 0xe6, 0x02, 0x5a, 0x19, 0xff, 0xd7,
	0xc9, 0xae, 0xf4, 0xfd, 0x32, 0x78, 0x76, 0x84, 0x69, 0x61, 0x94, 0xb8, 0x24, 0xa0, 0xc4, 0x44,
	0x11, 0xe5, 0x56, 0x8d, 0x73, 0xab, 0xee, 0xed, 0x77, 0xe5, 0x0e, 0xf8, 0xe2, 0xd3, 0x58, 0x95,
	0x73, 0x82, 0x28, 0xa2, 0xdc, 0xa0, 0x7f, 0x18, 0xb1, 0x41, 0x8d, 0x26, 0x6e, 0x1a, 0xb6, 0x05,
	0x71, 0x0d, 0x19, 0x50, 0x73, 0x14, 0x05, 0xa2, 0xa6, 0x5a, 0x83, 0x8e, 0xa1, 0x35, 0x6c, 0xc7,
	0xd2, 0x30, 0xaa, 0xb1, 0x0d, 0x5a, 0x1c, 0x36, 0xe8, 0x86, 0xe0, 0x7d, 0x29, 0xa2, 0xcc, 0x96,
	0xef, 0x94, 0xc1, 0x33, 0xcc, 0x96, 0x94, 0xc4, 0x31, 0x72, 0xc2, 0xd8, 0x67, 0xe1, 0x64, 0x76,
	0x28, 0xd9, 0x31, 0x13, 0x9a, 0x12, 0xf9, 0x20, 0xb7, 0xe1, 0x97, 0xca, 0xfb, 0x5d, 0xf9, 0xeb,
	0xa0, 0x26, 0x8c, 0x60, 0x68, 0xc8, 0xd0, 0x83, 0xfa, 0xdb, 0x24, 0xf2, 0xc2, 0x5d, 0x9f, 0x04,
	0x29, 0xc4, 0x5e, 0xd8, 0xb6, 0x21, 0x8e, 0x89, 0x3d, 0xff, 0xdd, 0x5c, 0xf7, 0x17, 0x4e, 0xf6,
	0x84, 0xc0, 0xdb, 0xa1, 0xd5, 0xe7, 0xa2, 0x2e, 0xd5, 0x91, 0x86, 0x6d, 0xc5, 0x51, 0x61, 0xb3,
	0x59, 0xad, 0x43, 0x8d, 0x90, 0x1a, 0xd4, 0x1d, 0x85, 0x40, 0x45, 0xab, 0x5b, 0xb5, 0xaa, 0x5e,
	0x75, 0xaa, 0x86, 0xb2, 0x51, 0x6a, 0x9d, 0xec, 0x90, 0xe4, 0x56, 0xce, 0xe3, 0xb5, 0xd0, 0x7a,
	0x9b, 0x92, 0x9d, 0x4d, 0x9a, 0x12, 0xe9, 0xa3, 0x32, 0xf8, 0x02, 0xb3, 0x62, 0x5b, 0x4f, 0x4c,
	0xec, 0xb5, 0x93, 0x94, 0xc4, 0x26, 0x8a, 0xdd, 0x10, 0xdb, 0x26, 0xb2, 0x7d, 0x1a, 0xf4, 0x43,
	0x7c, 0x82, 0xdb, 0xe3, 0xee, 0x77, 0x65, 0xcc, 0xfd, 0x93, 0x99, 0xb3, 0xad, 0x27, 0x50, 0xcc,
	0x82, 0xd9, 0x2c, 0xc8, 0x67, 0xf5, 0x63, 0xfb, 0x7b, 0xbd, 0xf5, 0x9f, 0xf4, 0x51, 0x3b, 0xa6,
	0x98, 0xa8, 0x4b, 0x4d, 0x42, 0xaa, 0x8e, 0x6a, 0x30, 0x9d, 0xb5, 0x2a, 0xd4, 0xd4, 0xba, 0x01,
	0xad, 0x86, 0xa1, 0x41, 0xa7, 0xa6, 0x35, 0x8c, 0x86, 0x8a, 0x34, 0x43, 0x63, 0x1e, 0x75, 0xae,
	0x43, 0x92, 0xd7, 0xf5, 0x64, 0x3d, 0xe3, 0x7f, 0x89, 0xb3, 0xbf, 0xc4, 0xb8, 0x17, 0x23, 0x9c,
	0x67, 0xa6, 0xc0, 0xe9, 0xe4, 0xf9, 0xce, 0xb4, 0xa8, 0x6b, 0xd2, 0xa8, 0xaf, 0xf6, 0x24, 0x57,
	0x3b, 0xd8, 0xef, 0xca, 0xb7, 0x7b, 0x6a, 0x07, 0x4e, 0x07, 0x0a, 0x7a, 0x68, 0x51, 0x17, 0xd2,
	0x68, 0x58, 0xed, 0x7f, 0xec, 0xa5, 0xa4, 0x89, 0x2d, 0xe2, 0x79, 0x28, 0xa9, 0x4c, 0x04, 0x4e,
	0x27, 0xe9, 0x60, 0x75, 0x49, 0x35, 0x54, 0x55, 0xad, 0x39, 0x18, 0x6a, 0xba, 0x65, 0x43, 0xcd,
	0x68, 0x20, 0x68, 0xe0, 0xaa, 0x02, 0x6d, 0x03, 0x11, 0xd2, 0x70, 0x54, 0xbd, 0xda, 0x64, 0xee,
	0xb3, 0xd0, 0x21, 0xc9, 0x1b, 0x4e, 0x47, 0x64, 0xdc, 0x35, 0xea, 0x5e, 0x8d, 0x7a, 0x7a, 0x7f,
	0x24, 0xc2, 0xa0, 0xa8, 0x77, 0x84, 0x02, 0xd3, 0xd9, 0x61, 0x7f, 0x28, 0x0e, 0x7d, 0xc4, 0xc3,
	0x60, 0xa6, 0x90, 0x55, 0x2f, 0x8c, 0xd0, 0x3d, 0x42, 0x01, 0x74, 0x76, 0xd8, 0x5f, 0x18, 0x23,
	0x1f, 0x71, 0x87, 0xff, 0xe7, 0x87, 0x6b, 0xde, 0xb0, 0x0d, 0x0b, 0x69, 0x9a, 0xc5, 0x16, 0x5a,
	0x87, 0x5a, 0xd5, 0xd1, 0xa0, 0x51, 0x6b, 0xea, 0xd0, 0x42, 0xd8, 0x69, 0xe2, 0xaa, 0x42, 0x9a,
	0x9a, 0xb5, 0x51, 0x6a, 0x9d, 0x19, 0xd0, 0xfc, 0x26, 0x0a, 0x5e, 0xd9, 0xb9, 0x29, 0xb4, 0x62,
	0x7e, 0xff, 0xad, 0x32, 0x2f, 0xdc, 0xa3, 0x94, 0x4f, 0x92, 0x2d, 0x33, 0xea, 0xa4, 0x5c, 0xf7,
	0x59, 0xae, 0xfb, 0xf6, 0x7e, 0x57, 0x76, 0xb9, 0x87, 0x3d, 0x44, 0xf7, 0x24, 0xd9, 0x82, 0x51,
	0x27, 0xe5, 0xaa, 0xff, 0xe0, 0xe1, 0xaa, 0x6b, 0xd5, 0x3a, 0x22, 0x55, 0xa4, 0xc0, 0x9a, 0xaa,
	0x37, 0xa1, 0x66, 0x39, 0x0a, 0x44, 0x0a, 0xb2, 0xa0, 0x4e, 0xb0, 0x8d, 0xf5, 0x66, 0xdd, 0xaa,
	0x3b, 0xf5, 0x8d, 0x52, 0xeb, 0x99, 0x07, 0x55, 0xdf, 0x4c, 0xb6, 0x6e, 0x76, 0x52, 0xa6, 0xf8,
	0xb7, 0x1f, 0xae, 0x78, 0x3b, 0xe1, 0x09, 0x36, 0x49, 0x76, 0x6c, 0xf9, 0xd0, 0x93, 0x29, 0xce,
	0xa6, 0x64, 0xfe, 0x62, 0xcf, 0xff, 0xf0, 0x11, 0x6b, 0x8e, 0x6b, 0x3a, 0xaa, 0xd7, 0xea, 0xb0,
	0x41, 0x1a, 0x4d, 0xa8, 0x91, 0x46, 0x03, 0x5a, 0xb5, 0x06, 0x86, 0x44, 0xab, 0x36, 0x9a, 0x35,
	0x1d, 0x21, 0xbd, 0xe9, 0x88, 0x4a, 0x36, 0xa4, 0xf8, 0x5b, 0x09, 0xcb, 0xa1, 0x8c, 0xbf, 0xf4,
	0x71, 0x19, 0x9c, 0xe3, 0x15, 0xd8, 0x0e, 0x4c, 0x2f, 0x44, 0xb6, 0x85, 0x3c, 0x14, 0x60, 0x12,
	0x9b, 0x98, 0xc4, 0x29, 0x75, 0x28, 0x46, 0x29, 0x91, 0xa7, 0xb8, 0xde, 0xbf, 0xb0, 0xdf, 0x95,
	0x77, 0xc1, 0x72, 0x5e, 0x82, 0xed, 0x00, 0x16, 0x27, 0x40, 0x3b, 0xdc, 0x09, 0x92, 0x34, 0x26,
	0xc8, 0x87, 0x85, 0xb9, 0xf3, 0x1f, 0xf7, 0x0c, 0x00, 0x1e, 0xf5, 0x10, 0x86, 0xc4, 0x76, 0x89,
	0xba, 0xd4, 0xa8, 0x5b, 0x6a, 0x03, 0xeb, 0x06, 0x44, 0xba, 0x56, 0x87, 0x1a, 0x46, 0x0e, 0xd4,
	0xb5, 0x1a, 0x86, 0x16, 0xd6, 0x35, 0xec, 0x54, 0x75, 0xa5, 0x4a, 0xb4, 0xd5, 0x99, 0x82, 0x2c,
	0xe1, 0x3d, 0xeb, 0x76, 0x70, 0xad, 0x20, 0x75, 0xbd, 0x2f, 0x49, 0xfa, 0xe3, 0x32, 0x60, 0x89,
	0xd5, 0x74, 0xbd, 0xd0, 0x42, 0x9e, 0xe9, 0x85, 0x6e, 0xa1, 0x32, 0xf3, 0xae, 0x43, 0x9e, 0xe6,
	0x86, 0x7c, 0x65, 0xbf, 0x2b, 0x6f, 0x82, 0xf3, 0x82, 0x79, 0x46, 0x0e, 0xbd, 0xd0, 0x2d, 0x54,
	0x00, 0x4e, 0x3e, 0xff, 0xfd, 0x5c, 0x77, 0x96, 0x0c, 0x31, 0xb6, 0x74, 0xdb, 0x86, 0xa8, 0x6a,
	0x10, 0xa8, 0xa9, 0x18, 0x41, 0x4b, 0xc7, 0x2a, 0x6c, 0x22, 0xad, 0x4a, 0x88, 0x42, 0x6a, 0x8e,
	0x5a, 0x13, 0xa1, 0xf9, 0x2a, 0x67, 0x78, 0x2d, 0x74, 0x7b, 0xe5, 0x97, 0x73, 0x93, 0x7e, 0x54,
	0x06, 0xcf, 0xf3, 0x0a, 0x75, 0xaf, 0x1d, 0x13, 0x93, 0xdc, 0x8d, 0x62, 0x92, 0x24, 0xbc, 0xe2,
	0x12, 0x13, 0xb5, 0xd3, 0xad, 0x30, 0xa6, 0xf7, 0x10, 0x6b, 0x50, 0xb9, 0x93, 0x03, 0xae, 0xea,
	0x7b, 0xfb, 0x5d, 0x79, 0x07, 0xbc, 0x94, 0xd7, 0x29, 0x36, 0x13, 0x8a, 0x99, 0xbc, 0xb8, 0x12,
	0x38, 0x30, 0x93, 0xfb, 0xfa, 0x3f, 0x3d, 0x41, 0x6e, 0x77, 0x8c, 0xba, 0xde, 0xb0, 0x14, 0x0c,
	0x0d, 0x44, 0x14, 0xa8, 0x29, 0x4a, 0x03, 0x5a, 0x1a, 0x31, 0xa0, 0xcd, 0x92, 0x24, 0xd6, 0x8c,
	0x26, 0xae, 0xb2, 0x78, 0x5d, 0x62, 0x85, 0x8a, 0x09, 0xbd, 0x92, 0xc9, 0x64, 0xf5, 0x96, 0x5c,
	0x2a, 0x4a, 0x64, 0xde, 0xff, 0x3d, 0x91, 0xe8, 0x2d, 0xea, 0xd2, 0xc8, 0x44, 0x91, 0xff, 0xd0,
	0x8c, 0x79, 0x98, 0x1b, 0x95, 0xee, 0x77, 0xe5, 0xa8, 0xe7, 0x48, 0x7c, 0x16, 0x44, 0x91, 0xff,
	0x98, 0xbc, 0xf9, 0x2f, 0x0f, 0x8f, 0x84, 0xa6, 0xd2, 0x50, 0x14, 0xc3, 0x50, 0xa1, 0x46, 0x2c,
	0x05, 0x6a, 0x08, 0xdb, 0xd0, 0x32, 0x6c, 0x15, 0x2a, 0x46, 0xdd, 0xd6, 0x14, 0xd5, 0x71, 0x2c,
	0x8c, 0x36, 0x4a, 0x2d, 0x96, 0xd0, 0xd7, 0x98, 0xb4, 0x4b, 0x91, 0x3f, 0x32, 0x79, 0xfe, 0xb0,
	0x0c, 0x5e, 0x64, 0x86, 0xd0, 0x70, 0x54, 0xde, 0xb7, 0xfc, 0xe1, 0xba, 0x35, 0xc7, 0xcd, 0xb9,
	0xb3, 0xdf, 0x95, 0x7d, 0x3e, 0xf1, 0x21, 0x05, 0xc0, 0xf2, 0x87, 0x6d, 0xf9, 0xd7, 0x87, 0xdb,
	0xa2, 0xd8, 0x8e, 0x5e, 0xb3, 0x94, 0x2a, 0xac, 0x35, 0x15, 0xe6, 0x68, 0xb5, 0x3a, 0xd4, 0x0d,
	0x5c, 0x87, 0xb6, 0xa2, 0x38, 0xba, 0xae, 0xda, 0x4e, 0x55, 0x47, 0xa2, 0x27, 0xba, 0x1a, 0x0e,
	0x55, 0x81, 0x35, 0x7f, 0xb0, 0x88, 0xfd, 0xad, 0x88, 0x88, 0xa1, 0x9e, 0x68, 0x87, 0x58, 0x5b,
	0x61, 0x98, 0x35, 0xaa, 0xf3, 0xdc, 0x84, 0xce, 0x7e, 0x57, 0x8e, 0x41, 0xf3, 0x69, 0xda, 0x21,
	0xc1, 0x84, 0xb7, 0xaa, 0xdf, 0xf8, 0x8b, 0xfb, 0xe3, 0xc3, 0xad, 0x50, 0x8d, 0x58, 0x4a, 0xb5,
	0xa1, 0x23, 0x58, 0x43, 0xa8, 0x0a, 0x15, 0x85, 0x10, 0x68, 0x91, 0x7a, 0x03, 0x56, 0x55, 0x4d,
	0x45, 0x58, 0x51, 0xab, 0xd5, 0xaa, 0x2a, 0x02, 0x66, 0xa0, 0x15, 0xfa, 0x4a, 0xc6, 0x97, 0x75,
	0xab, 0x7f, 0x79, 0x00, 0xbc, 0xf2, 0x08, 0xf5, 0xb7, 0xd2, 0x34, 0x62, 0x27, 0x07, 0x87, 0xba,
	0x3c, 0x7e, 0x4c, 0xcc, 0x0f, 0x15, 0xa6, 0x85, 0x12, 0x8a, 0x33, 0x48, 0x6f, 0xa7, 0x8e, 0x70,
	0x33, 0xff, 0x84, 0x75, 0x4c, 0x1f, 0x96, 0x81, 0xf9, 0xd3, 0x18, 0xca, 0xc4, 0xc1, 0x4c, 0x1c,
	0x0f, 0x3a, 0x98, 0x89, 0x83, 0x5c, 0x5c, 0x06, 0xe9, 0xed, 0xef, 0x6f, 0x8d, 0x58, 0x10, 0xbd,
	0x86, 0xf5, 0x46, 0x4d, 0xaf, 0x3e, 0x66, 0x41, 0xbe, 0xf8, 0x90, 0x05, 0xd9, 0x48, 0xd3, 0x68,
	0x9d, 0x4b, 0x67, 0xf1, 0x97, 0x9d, 0x9f, 0xd6, 0x98, 0x68, 0x36, 0xec, 0xed, 0xf8, 0x9f, 0x1e,
	0x00, 0xeb, 0x3f, 0xc5, 0x92, 0xf1, 0xe7, 0x34, 0xdc, 0x26, 0x41, 0xf6, 0x2b, 0x4b, 0x7c, 0xbd,
	0xfe, 0x88, 0xad, 0xd7, 0xef, 0x95, 0xc1, 0xbb, 0xff, 0x97, 0xeb, 0xc5, 0x9f, 0xb9, 0x94, 0xec,
	0x77, 0xfe, 0xb7, 0x47, 0x2d, 0x96, 0xad, 0x39, 0x86, 0xa1, 0x90, 0xc7, 0x2c, 0x96, 0xf1, 0x14,
	0x8b, 0xc5, 0x9e, 0x6e, 0x31, 0x81, 0xfc, 0x47, 0xfa, 0xb7, 0x32, 0xef, 0x7b, 0x4c, 0xde, 0x14,
	0x9b, 0x1e, 0x0d, 0xb6, 0x4d, 0xb4, 0x93, 0x98, 0xd6, 0x6e, 0x88, 0x4d, 0xcb, 0x8d, 0x0a, 0x4b,
	0x22, 0x1f, 0xe5, 0x8b, 0xf1, 0xf5, 0xfd, 0xae, 0x7c, 0x0f, 0x34, 0xf2, 0x92, 0xc4, 0x7b, 0x69,
	0x36, 0x6d, 0x70, 0x19, 0xd0, 0x4e, 0x02, 0x19, 0x0f, 0x68, 0xb9, 0x51, 0xc1, 0xd4, 0xf9, 0xdf,
	0x29, 0x18, 0xd9, 0x69, 0x7b, 0x11, 0xbd, 0xbb, 0x30, 0xe9, 0xb5, 0x31, 0x8a, 0x69, 0xa8, 0x2e,
	0x59, 0x5a, 0x55, 0x37, 0x88, 0xa6, 0x43, 0xd5, 0xa9, 0x6a, 0x50, 0x6b, 0x60, 0x0d, 0x22, 0x44,
	0x54, 0x88, 0x54, 0xa4, 0x57, 0x6d, 0x5d, 0xa9, 0xeb, 0x86, 0x23, 0xf2, 0xd7, 0x3a, 0x93, 0x7b,
	0x8d, 0x06, 0xdb, 0x97, 0x76, 0x92, 0xb5, 0xdd, 0x10, 0xaf, 0xb9, 0x51, 0xcf, 0x30, 0x16, 0xef,
	0xfc, 0xdc, 0x50, 0xa8, 0xbf, 0x66, 0x14, 0xd3, 0x0e, 0xfb, 0x67, 0x35, 0xe5, 0x58, 0xa1, 0xa6,
	0xe4, 0xc1, 0x5e, 0xa0, 0x1d, 0xb4, 0xa4, 0x88, 0x10, 0x4c, 0x78, 0x79, 0xf9, 0xdd, 0x07, 0xb6,
	0xab, 0x32, 0xd6, 0x21, 0xb1, 0xba, 0x54, 0x55, 0x88, 0x51, 0x47, 0x8d, 0x3a, 0x54, 0x89, 0xd2,
	0x80, 0x9a, 0xae, 0xd9, 0xd0, 0xd2, 0xaa, 0x35, 0x68, 0x20, 0xdd, 0x41, 0x55, 0xa7, 0xde, 0xa8,
	0x1b, 0x75, 0x71, 0x3a, 0x2d, 0x94, 0xed, 0x9b, 0x19, 0x6b, 0x56, 0x47, 0x3e, 0x2d, 0xf3, 0x03,
	0xfe, 0xc8, 0xf4, 0x7b, 0xc7, 0xf4, 0x28, 0x1e, 0x91, 0x82, 0x8f, 0x73, 0x93, 0xda, 0xfb, 0x5d,
	0xf9, 0x4e, 0xef, 0x76, 0xe0, 0x81, 0x14, 0x7c, 0x07, 0x7a, 0x14, 0x8f, 0x48, 0xc3, 0xff, 0xfe,
	0x88, 0x34, 0xac, 0x19, 0x57, 0x0c, 0xad, 0xd6, 0x80, 0x86, 0x62, 0x5c, 0x81, 0x5a, 0xad, 0x6e,
	0x40, 0x63, 0x6d, 0xfd, 0x32, 0x54, 0xaf, 0x5c, 0xbe, 0xb2, 0x76, 0xa5, 0xb1, 0x5e, 0xab, 0x35,
	0x99, 0x31, 0x17, 0x46, 0xa4, 0xe1, 0x3b, 0xd7, 0x28, 0x1e, 0xce, 0xc4, 0x7f, 0x2e, 0xda, 0x2c,
	0x1a, 0x9a, 0xd8, 0xa7, 0x41, 0x92, 0xb2, 0xee, 0x65, 0xd8, 0x96, 0x13, 0xdc, 0x16, 0x73, 0xbf,
	0x2b, 0x7f, 0x8d, 0x53, 0xf3, 0xed, 0xe9, 0x51, 0x0f, 0x2b, 0xff, 0xa3, 0x9e, 0xf2, 0x93, 0x31,
	0x4a, 0xf1, 0x16, 0x49, 0xd5, 0x25, 0xcb, 0xa9, 0x36, 0x6b, 0x46, 0x5d, 0x87, 0x6a, 0xa3, 0x56,
	0x67, 0x07, 0x08, 0x1d, 0x5a, 0x8e, 0x8a, 0x60, 0x55, 0xc1, 0x16, 0x42, 0x8a, 0xdd, 0xac, 0x3a,
	0x8a, 0x68, 0x09, 0xaf, 0x86, 0xeb, 0x3d, 0xd6, 0x83, 0xba, 0x7e, 0x28, 0xbc, 0x68, 0x48, 0xd7,
	0x88, 0x8a, 0x70, 0x38, 0xc9, 0xd5, 0x7c, 0x67, 0xbf, 0x2b, 0xbf, 0xcd, 0x09, 0x87, 0xd5, 0x8c,
	0xa8, 0xf0, 0xf9, 0xff, 0x18, 0xa1, 0x61, 0x95, 0x90, 0x06, 0xae, 0x1a, 0x06, 0x44, 0x0d, 0x5c,
	0x83, 0x9a, 0xad, 0xeb, 0x10, 0x61, 0x45, 0x83, 0x0d, 0x4d, 0x75, 0x88, 0x55, 0x57, 0x2c, 0xbd,
	0xd1, 0x14, 0x87, 0xca, 0x01, 0x0d, 0x23, 0xca, 0x5d, 0x7c, 0x6d, 0x0a, 0x4c, 0x64, 0x79, 0xa4,
	0xf2, 0x33, 0xe0, 0x64, 0x8b, 0x5c, 0x09, 0x70, 0xbc, 0x1b, 0xa5, 0xe2, 0x76, 0x2d, 0x25, 0xfe,
	0xad, 0xdd, 0x88, 0x48, 0x67, 0x00, 0x70, 0x28, 0xf1, 0x6c, 0x33, 0x42, 0xe9, 0x96, 0xb8, 0x41,
	0x9b, 0xe6, 0x90, 0x9b, 0x28, 0xdd, 0x1a, 0xbe, 0x61, 0x3b, 0x30, 0x7c, 0xc3, 0x56, 0xf9, 0x1a,
	0x38, 0x36, 0xc4, 0x3a, 0xe1, 0x7c, 0xd7, 0xc1, 0x41, 0x9a, 0x12, 0x3f, 0x91, 0xcb, 0xe7, 0xc6,
	0x2e, 0xce, 0xa8, 0x70, 0x79, 0xd4, 0x0d, 0xe2, 0xf2, 0x43, 0xb4, 0x6a, 0x65, 0x73, 0x2b, 0xbf,
	0x51, 0x06, 0x73, 0xc2, 0x5b, 0x36, 0xbd, 0xb6, 0xcb, 0xaf, 0x04, 0x8f, 0x81, 0x83, 0x1d, 0xe4,
	0xb5, 0xf3, 0xdb, 0xbe, 0x6c, 0x20, 0x9d, 0x00, 0x13, 0x36, 0x22, 0x7e, 0x18, 0x08, 0x15, 0xc5,
	0x48, 0x5a, 0x04, 0x33, 0x51, 0xd5, 0x8c, 0x42, 0x2f, 0xd3, 0x7f, 0x4c, 0xdc, 0x20, 0x56, 0x6f,
	0x86, 0x1e, 0xbf, 0x20, 0x7c, 0x1e, 0xcc, 0xe7, 0xb1, 0x93, 0x10, 0x8f, 0xe0, 0x34, 0x8c, 0xf9,
	0xb5, 0xc7, 0x74, 0x6b, 0x4e, 0xc0, 0x37, 0x05, 0xb8, 0xf2, 0xdd, 0x63, 0xe0, 0x48, 0x41, 0x19,
	0x71, 0x2d, 0xf7, 0x22, 0x38, 0xc8, 0x53, 0xbd, 0xb8, 0x7b, 0x3b, 0xba, 0xd7, 0x95, 0xe7, 0x04,
	0x48, 0x12, 0x31, 0xbf, 0x51, 0x6a, 0x09, 0xc0, 0x1b, 0x60, 0x22, 0xcb, 0xf2, 0xe2, 0xd2, 0x4b,
	0xdb, 0xeb, 0xca, 0xd5, 0x1c, 0x26, 0x65, 0x89, 0xe2, 0x68, 0xaf, 0x80, 0x78, 0xe1, 0x8e, 0x28,
	0x0a, 0x95, 0x19, 0x86, 0x7a, 0x77, 0xd9, 0xc5, 0xcb, 0x2f, 0xbc, 0xbb, 0x51, 0x6a, 0xe5, 0x33,
	0x2e, 0x80, 0x71, 0x1b, 0xa5, 0x48, 0x5c, 0x3f, 0xcd, 0xef, 0x75, 0xe5, 0xd9, 0x0c, 0x22, 0x8d,
	0x5b, 0xa1, 0x97, 0x6e, 0x94, 0x5a, 0xd9, 0x28, 0x00, 0xb3, 0x34, 0x70, 0x62, 0x14, 0xc5, 0x61,
	0x4a, 0x70, 0x2a, 0x2e, 0x76, 0x36, 0xf6, 0xba, 0xf2, 0xe5, 0x41, 0x8c, 0x34, 0xc5, 0x1f, 0xb6,
	0x53, 0xba, 0x70, 0x6a, 0x40, 0x8f, 0x22, 0x51, 0x65, 0x2e, 0x27, 0xea, 0x6b, 0x34, 0xc8, 0x65,
	0x09, 0x8c, 0x6d, 0xfb, 0x89, 0xb8, 0x7b, 0xc9, 0xd4, 0x62, 0x00, 0xe9, 0xe0, 0x36, 0xd9, 0x8d,
	0xe2, 0x8d, 0x52, 0x8b, 0x8f, 0x2e, 0x82, 0x03, 0xbe, 0x27, 0x2e, 0x34, 0x4e, 0xec, 0x75, 0x65,
	0x09, 0x4c, 0xfa, 0xde, 0x0a, 0x57, 0x78, 0x12, 0x25, 0x29, 0x89, 0xe9, 0xdd, 0x8d, 0x52, 0xeb,
	0x80, 0xef, 0x49, 0xcb, 0x60, 0x32, 0x8c, 0x48, 0xcc, 0xce, 0x57, 0xd9, 0x45, 0x82, 0xb4, 0xd7,
	0x95, 0x0f, 0xf7, 0x80, 0xd2, 0x18, 0x8d, 0xa2, 0x8d, 0x52, 0xab, 0x37, 0xae, 0x83, 0xa9, 0xec,
	0xb2, 0x93, 0xc4, 0xe2, 0x40, 0x76, 0x72, 0xaf, 0x2b, 0x1f, 0xed, 0x43, 0xa5, 0xfc, 0x1a, 0x64,
	0xa3, 0xd4, 0xea, 0x03, 0xdf, 0x04, 0x47, 0xb2, 0xd3, 0x8c, 0xe9, 0xa3, 0x00, 0xb9, 0xc4, 0x27,
	0x41, 0x7e, 0x0e, 0xaa, 0xec, 0x75, 0xe5, 0xc5, 0x11, 0x68, 0x69, 0xda, 0xf2, 0x68, 0x60, 0x3b,
	0xa1, 0x67, 0x6f, 0x94, 0x5a, 0xf3, 0x19, 0xfe, 0x7a, 0x1f, 0xdd, 0x04, 0xd3, 0xbd, 0x83, 0x85,
	0x38, 0xa7, 0x64, 0xaa, 0xf4, 0xc1, 0x92, 0x28, 0x72, 0x1b, 0xa5, 0x56, 0x01, 0xf8, 0x3c, 0x18,
	0x4b, 0x23, 0x5f, 0xdc, 0x3d, 0x1c, 0xdf, 0xeb, 0xca, 0x47, 0x38, 0x40, 0x02, 0x69, 0xe4, 0x67,
	0xe2, 0xf9, 0x3a, 0x32, 0xd0, 0xb3, 0x60, 0xac, 0x8d, 0x7c, 0x71, 0xd4, 0x9f, 0xdb, 0xeb, 0xca,
	0x33, 0x1c, 0x20, 0x8d, 0x93, 0xdd, 0x1d, 0xe6, 0x7c, 0x7c, 0xf0, 0x2c, 0x18, 0xdb, 0x21, 0x96,
	0x38, 0x56, 0x0b, 0xa2, 0x1d, 0x62, 0xf5, 0x89, 0xd8, 0xc0, 0x00, 0xd3, 0x36, 0xe1, 0xc1, 0x40,
	0xf3, 0x03, 0xc8, 0xc2, 0x5e, 0x57, 0x3e, 0x01, 0xa6, 0x93, 0x2d, 0x14, 0x91, 0x15, 0x9b, 0x46,
	0x52, 0x9f, 0x82, 0xad, 0x5d, 0x36, 0xb8, 0x6a, 0x4b, 0x2f, 0x81, 0xf1, 0x04, 0x39, 0x44, 0xf4,
	0xf9, 0xd9, 0x76, 0x82, 0x6c, 0x16, 0x83, 0x4b, 0x1c, 0xcb, 0x1c, 0x92, 0x8f, 0xde, 0x06, 0x47,
	0xb1, 0x47, 0x49, 0x90, 0x9a, 0x09, 0xb5, 0x89, 0x69, 0x13, 0x87, 0x04, 0x09, 0x11, 0x1d, 0xf6,
	0xd2, 0x5e, 0x57, 0x3e, 0x97, 0x8b, 0xc4, 0x89, 0x2d, 0x8d, 0xa2, 0xdd, 0x28, 0xb5, 0x8e, 0x64,
	0xe0, 0x4d, 0x6a, 0x93, 0xcb, 0x19, 0x50, 0x6a, 0x82, 0x19, 0x2b, 0x4c, 0x7b, 0xfc, 0xb2, 0x56,
	0xf6, 0xd8, 0x5e, 0x57, 0x9e, 0xcf, 0xf9, 0x59, 0x61, 0x2a, 0x8d, 0x25, 0x84, 0x29, 0x0f, 0xac,
	0x30, 0xcd, 0x27, 0x7e, 0x09, 0xcc, 0x86, 0xd6, 0x6d, 0x82, 0x53, 0x33, 0x49, 0xc3, 0x98, 0x88,
	0xa6, 0xee, 0xd4, 0x5e, 0x57, 0x3e, 0x3e, 0x88, 0x91, 0x0e, 0xde, 0x0e, 0x13, 0xc2, 0x5a, 0x8c,
	0x99, 0x0c, 0xbc, 0xc9, 0xa1, 0xff, 0x1f, 0x4c, 0xc7, 0x04, 0x87, 0x6e, 0x40, 0xef, 0x11, 0xd1,
	0x04, 0x9d, 0xdb, 0xeb, 0xca, 0xa7, 0xc1, 0x5c, 0x26, 0xb6, 0x87, 0x94, 0xfa, 0x74, 0x6c, 0xc3,
	0xfb, 0xf0, 0xb7, 0xc1, 0x98, 0x1d, 0x24, 0xa2, 0xef, 0x58, 0xdb, 0xeb, 0xca, 0x5f, 0x02, 0x20,
	0x0b, 0xf3, 0x15, 0x3b, 0x48, 0xa4, 0x49, 0x8b, 0x3a, 0x71, 0x98, 0xa4, 0x0b, 0x27, 0x47, 0xe4,
	0x07, 0x68, 0x07, 0x49, 0xe5, 0xb0, 0xa0, 0xe8, 0x07, 0x25, 0x63, 0x28, 0x2d, 0x83, 0x71, 0xcb,
	0xb1, 0x23, 0x51, 0xfd, 0xe5, 0xbd, 0xae, 0x7c, 0x0c, 0xcc, 0x22, 0x6a, 0xb2, 0x38, 0x5b, 0x61,
	0x18, 0x89, 0xe3, 0xd9, 0xd6, 0xf0, 0xd1, 0x05, 0x30, 0x9e, 0x60, 0xea, 0x8b, 0xd2, 0x25, 0x72,
	0x0a, 0x83, 0x48, 0xfc, 0x97, 0x6f, 0x21, 0x1b, 0x2d, 0x83, 0x31, 0x6c, 0x07, 0xb2, 0x5c, 0xf0,
	0x12, 0x06, 0x90, 0xe6, 0xb0, 0x1d, 0xe0, 0x30, 0x08, 0x78, 0xd2, 0x4c, 0x3a, 0x98, 0xe9, 0xc1,
	0xe0, 0xef, 0x82, 0x85, 0xc0, 0xa5, 0xc1, 0x5d, 0xd3, 0x77, 0xfd, 0xd4, 0x4c, 0xda, 0x34, 0x25,
	0x66, 0x8f, 0x4e, 0x3e, 0xc5, 0xd9, 0x9c, 0xd9, 0xeb, 0xca, 0xa7, 0xc0, 0x34, 0xa7, 0x5b, 0x09,
	0xfc, 0x44, 0x9a, 0x0d, 0xfc, 0xa4, 0x47, 0xc4, 0x6a, 0x1d, 0x47, 0x5d, 0x77, 0xfd, 0x74, 0x93,
	0x31, 0x58, 0xcf, 0x51, 0xd2, 0x9b, 0xe0, 0x44, 0x61, 0xe3, 0x4d, 0x3f, 0xb4, 0xa8, 0x47, 0xcc,
	0xc4, 0xde, 0x96, 0x17, 0x0a, 0x0a, 0xce, 0x65, 0xf0, 0x95, 0x84, 0xe0, 0x76, 0x4c, 0xd3, 0xdd,
	0xdc, 0x13, 0x8e, 0xf6, 0x3d, 0xe1, 0x3a, 0xa7, 0xd8, 0xb4, 0xb7, 0x25, 0x05, 0x1c, 0xe4, 0xd2,
	0xe4, 0x67, 0x0a, 0xbe, 0x90, 0x81, 0x1e, 0xd0, 0x4b, 0x80, 0x35, 0x30, 0xc1, 0xdc, 0x1b, 0x45,
	0xf2, 0xe9, 0x82, 0xd4, 0xd9, 0x7e, 0x18, 0xa0, 0x48, 0x12, 0x14, 0x2c, 0x8b, 0x0b, 0xc8, 0x4b,
	0x60, 0x0c, 0xd1, 0x48, 0x3e, 0x53, 0xd8, 0x20, 0x06, 0x90, 0x0e, 0x21, 0x1a, 0x99, 0x45, 0x29,
	0x1c, 0xfa, 0x65, 0x30, 0x5b, 0xbc, 0xae, 0x91, 0x17, 0x8b, 0x92, 0x8a, 0x98, 0x42, 0x5e, 0x99,
	0xf1, 0xfa, 0x37, 0x2c, 0x92, 0x03, 0x4e, 0x86, 0x16, 0x2b, 0x6e, 0xc8, 0xa2, 0x1e, 0x4d, 0x77,
	0x0b, 0xbb, 0x70, 0x96, 0xf3, 0x7a, 0x71, 0xaf, 0x2b, 0x3f, 0x37, 0x44, 0xb4, 0xd2, 0x23, 0x92,
	0x66, 0x3b, 0x14, 0x15, 0xb5, 0x3a, 0x31, 0x40, 0xd8, 0xdf, 0x92, 0x15, 0x30, 0x11, 0x93, 0x28,
	0x8c, 0x53, 0xf9, 0x5c, 0x21, 0x89, 0x09, 0x98, 0x34, 0xe9, 0xd3, 0x80, 0xcd, 0x62, 0xeb, 0x20,
	0x40, 0x17, 0xc1, 0xd8, 0x0e, 0x72, 0xe4, 0xf3, 0x85, 0xa0, 0x65, 0x00, 0x69, 0x1a, 0xb5, 0xd3,
	0xd0, 0x47, 0x29, 0x37, 0x85, 0x43, 0xde, 0x2f, 0x83, 0xb3, 0x83, 0x36, 0x24, 0xbb, 0x41, 0xba,
	0x45, 0x52, 0x8a, 0x4d, 0x3f, 0x0c, 0x28, 0xb3, 0xa5, 0xc2, 0xd9, 0x34, 0xf6, 0xba, 0xb2, 0x3a,
	0x44, 0xbc, 0xf2, 0x00, 0xb1, 0x34, 0xd7, 0xa1, 0x88, 0xb7, 0x6d, 0xa2, 0xe8, 0x6f, 0x94, 0x5a,
	0x67, 0x06, 0xe6, 0x6c, 0xe6, 0x53, 0xae, 0x8b, 0x19, 0xab, 0x00, 0x64, 0xc7, 0x21, 0x5e, 0x80,
	0x9f, 0x2d, 0xb8, 0x48, 0x06, 0x87, 0x59, 0x1d, 0x0b, 0xbd, 0x5d, 0x3f, 0x6a, 0x27, 0x2c, 0xd4,
	0x39, 0xf8, 0x32, 0x83, 0xbe, 0x0e, 0x8e, 0x08, 0x07, 0xa5, 0x41, 0x4a, 0xdc, 0x18, 0x31, 0x7d,
	0x97, 0x38, 0x8b, 0xd3, 0x7b, 0x5d, 0x59, 0xce, 0xd1, 0x2b, 0x7d, 0x74, 0xee, 0xa9, 0xf3, 0x19,
	0xe6, 0x6a, 0x1f, 0xf1, 0x9b, 0x65, 0x70, 0x84, 0xc9, 0xe2, 0xbc, 0x3c, 0x8f, 0xba, 0x24, 0xc0,
	0x44, 0xfe, 0x02, 0xe7, 0xf6, 0x73, 0x7b, 0x5d, 0xf9, 0x9d, 0x0c, 0x0d, 0x8b, 0x68, 0x69, 0xce,
	0x8a, 0x7d, 0x06, 0xb5, 0x89, 0xc7, 0x7c, 0x62, 0x77, 0xe1, 0xf4, 0x40, 0x56, 0x19, 0xc2, 0x56,
	0x4e, 0x0c, 0x01, 0xfa, 0x29, 0x66, 0x9e, 0x81, 0xaf, 0x16, 0x59, 0xbf, 0x0c, 0xa6, 0xad, 0xd8,
	0xe7, 0xfd, 0x4e, 0x22, 0x5f, 0x28, 0x84, 0xb5, 0x08, 0x83, 0x0c, 0x23, 0xf5, 0x89, 0xd8, 0xda,
	0xf4, 0x06, 0xd2, 0xcb, 0x60, 0xc6, 0x47, 0xf1, 0x36, 0x49, 0x23, 0x0f, 0x61, 0x22, 0x3f, 0x57,
	0x58, 0xd8, 0x22, 0x42, 0x9a, 0x48, 0x13, 0xb4, 0x45, 0xb7, 0x99, 0x73, 0x17, 0xc1, 0xb7, 0xc0,
	0xd1, 0xc2, 0xd0, 0x0c, 0x03, 0x2b, 0x44, 0xb1, 0x2d, 0x5f, 0xe4, 0x6c, 0xce, 0xef, 0x75, 0xe5,
	0x33, 0x03, 0x04, 0x2b, 0x82, 0xa0, 0xc0, 0x4e, 0x2a, 0xa0, 0x6f, 0x08, 0xec, 0xff, 0x13, 0x39,
	0xc9, 0x0c, 0x03, 0x22, 0x3f, 0x5f, 0xd8, 0x28, 0x91, 0xaa, 0xc2, 0x80, 0x48, 0x33, 0x81, 0x52,
	0x8c, 0x8a, 0x29, 0x8e, 0xb9, 0x11, 0x90, 0x7e, 0x1b, 0xfe, 0xda, 0xf8, 0xd4, 0x89, 0xf9, 0x93,
	0x15, 0x02, 0x66, 0x44, 0x1b, 0xc9, 0xfb, 0xd9, 0x7e, 0xe7, 0x5a, 0x1e, 0xe8, 0x5c, 0x4f, 0x83,
	0x69, 0x2f, 0xc4, 0xfc, 0xe2, 0x30, 0x91, 0x0f, 0xf0, 0xb7, 0xc3, 0x7d, 0x80, 0x74, 0x0e, 0xcc,
	0xe4, 0x6f, 0xcf, 0x69, 0x18, 0x88, 0xbe, 0xb6, 0x08, 0xaa, 0xdc, 0x00, 0xd3, 0xac, 0xc3, 0xbd,
	0x15, 0xbe, 0x45, 0x6d, 0xc6, 0x8c, 0xf5, 0xbf, 0x49, 0xc4, 0xd6, 0x54, 0x34, 0xc1, 0x3d, 0x80,
	0x24, 0x81, 0xf1, 0xc2, 0xfb, 0x73, 0xfe, 0x2c, 0xcd, 0x83, 0xb1, 0xb6, 0x78, 0x67, 0x3e, 0xdd,
	0x62, 0x8f, 0x95, 0xcb, 0xe0, 0xd8, 0x9b, 0xed, 0x30, 0x45, 0x2d, 0x92, 0x84, 0xed, 0x18, 0xb3,
	0x63, 0xe8, 0xd3, 0x37, 0xe4, 0x15, 0x0f, 0xcc, 0xf1, 0x9b, 0xd1, 0x5b, 0x28, 0x76, 0xc5, 0x4b,
	0xfe, 0x53, 0x60, 0x8a, 0x46, 0xa6, 0x85, 0x12, 0x62, 0x67, 0x9d, 0x6c, 0x6b, 0x92, 0x46, 0x6b,
	0x6c, 0x38, 0xc8, 0xfb, 0x60, 0xce, 0xfb, 0x22, 0x98, 0x77, 0xc2, 0xd8, 0x14, 0x65, 0x39, 0xdd,
	0x8d, 0x48, 0x22, 0xa4, 0x1c, 0x76, 0xc2, 0xf8, 0x06, 0x07, 0xb3, 0x63, 0x44, 0x52, 0xb9, 0x06,
	0x8e, 0x5e, 0xba, 0x79, 0xf5, 0xd5, 0x38, 0x6c, 0x47, 0x57, 0x3c, 0xde, 0x91, 0xb1, 0x23, 0x06,
	0x53, 0xce, 0x27, 0xe9, 0x56, 0x68, 0xe7, 0x6b, 0x9e, 0x8d, 0xf8, 0xe7, 0x06, 0x28, 0xdd, 0x32,
	0x63, 0xe2, 0x92, 0xbb, 0x82, 0xe5, 0x34, 0x83, 0xb4, 0x18, 0xa0, 0xf2, 0x41, 0xf9, 0x41, 0x76,
	0xcc, 0x80, 0x51, 0xeb, 0xf7, 0xe8, 0x15, 0xff, 0x72, 0x7e, 0x3a, 0x3a, 0xc0, 0x4f, 0x47, 0xcf,
	0x8f, 0x3e, 0x1d, 0x8d, 0x50, 0x3d, 0x3f, 0x19, 0xbd, 0x5f, 0x06, 0xf3, 0x97, 0x6c, 0x3b, 0x0c,
	0x9e, 0xc4, 0x95, 0xce, 0x83, 0x59, 0x9b, 0x26, 0x91, 0x87, 0x06, 0x4e, 0x71, 0x33, 0x02, 0xc6,
	0xcf, 0x41, 0x0a, 0x38, 0xce, 0xd2, 0x9f, 0xcb, 0xc4, 0x71, 0xa2, 0xfc, 0x43, 0x88, 0x4c, 0x75,
	0x09, 0x45, 0x94, 0xab, 0xc2, 0x88, 0xb3, 0xaf, 0x20, 0x2a, 0x5f, 0xed, 0x2f, 0x06, 0x83, 0x5e,
	0x47, 0x11, 0x5f, 0xdb, 0x53, 0x60, 0x2a, 0x8e, 0x70, 0xf1, 0x83, 0x8c, 0xc9, 0x38, 0xc2, 0x5c,
	0xc8, 0x05, 0x30, 0x37, 0x28, 0x24, 0xdf, 0xb6, 0x43, 0x45, 0xf6, 0x49, 0xc5, 0x04, 0x73, 0x43,
	0x9c, 0xa5, 0x6b, 0x60, 0x96, 0x71, 0xf5, 0x51, 0x14, 0xd1, 0xc0, 0xcd, 0x4f, 0x95, 0x8f, 0x59,
	0xb7, 0x82, 0x5a, 0xad, 0x99, 0x38, 0xc2, 0xd7, 0xc5, 0xec, 0xd5, 0xdb, 0xe0, 0x50, 0xd2, 0xc1,
	0x66, 0xe2, 0xb5, 0x5d, 0x93, 0xf2, 0xef, 0x4c, 0x96, 0xb3, 0x6f, 0x53, 0x96, 0xf3, 0x6f, 0x53,
	0x96, 0x5f, 0x61, 0x47, 0xe0, 0x1b, 0xd9, 0x47, 0x30, 0xf2, 0x5f, 0xfd, 0x1a, 0x5b, 0x86, 0x19,
	0xf5, 0x0b, 0xa3, 0xe5, 0x0d, 0x1d, 0x51, 0x5b, 0x33, 0x49, 0x07, 0xe7, 0x83, 0xd5, 0x04, 0xcc,
	0xdd, 0x61, 0x61, 0x63, 0xc6, 0xdb, 0x64, 0xf7, 0x89, 0xa4, 0x7d, 0x53, 0x48, 0x7b, 0x61, 0xb4,
	0xb4, 0x51, 0x41, 0xd8, 0x3a, 0xc4, 0x65, 0xb4, 0xb6, 0xb3, 0xe1, 0x2a, 0x05, 0x87, 0x2d, 0x47,
	0xbc, 0xc9, 0x79, 0x22, 0x99, 0xdf, 0x12, 0x32, 0x2b, 0xa3, 0x65, 0x16, 0x3f, 0xca, 0x69, 0xcd,
	0x5a, 0x4e, 0x7f, 0xb4, 0xfa, 0xb3, 0x60, 0x8a, 0xad, 0xe5, 0x93, 0x08, 0xf9, 0xb6, 0x10, 0x72,
	0xfe, 0x91, 0xcb, 0xc8, 0x65, 0x4c, 0x26, 0x1d, 0xcc, 0xd9, 0xff, 0x3c, 0x98, 0xe1, 0xee, 0x98,
	0x86, 0x66, 0x9b, 0xda, 0x8f, 0x93, 0xf0, 0xd7, 0x42, 0xc2, 0xd9, 0xd1, 0x12, 0x7a, 0x09, 0x31,
	0x8b, 0x45, 0xfe, 0xb8, 0x1a, 0x83, 0x23, 0xd9, 0x8b, 0xa5, 0x94, 0xa7, 0xa4, 0x27, 0xb2, 0xe4,
	0x6f, 0x1e, 0xed, 0x10, 0x43, 0x19, 0xae, 0x35, 0x17, 0x0f, 0x02, 0x56, 0xdb, 0x40, 0x42, 0x2c,
	0x7a, 0x7b, 0x17, 0x77, 0x4f, 0x22, 0xf4, 0x23, 0x21, 0xf4, 0xc2, 0x43, 0xbc, 0x7e, 0x28, 0x1d,
	0xb4, 0xe6, 0xd1, 0x10, 0x64, 0x75, 0x37, 0x17, 0xeb, 0x10, 0x94, 0xb6, 0x63, 0x21, 0xf6, 0xfc,
	0x03, 0x62, 0xaf, 0x04, 0x6d, 0xff, 0x6d, 0x96, 0x6a, 0xff, 0x77, 0xa2, 0x5f, 0xc9, 0xa4, 0x70,
	0xd1, 0xbf, 0x5c, 0x06, 0x32, 0x8e, 0xdb, 0x76, 0xcf, 0x62, 0x1e, 0x7c, 0x59, 0x61, 0x94, 0xce,
	0x3e, 0xa0, 0xc1, 0x75, 0x92, 0x24, 0xc8, 0xed, 0xc9, 0xff, 0xfd, 0x0f, 0x32, 0xf9, 0xcf, 0x3d,
	0x36, 0x00, 0xb3, 0x6b, 0x99, 0xd6, 0x71, 0x26, 0xeb, 0x01, 0xf0, 0xea, 0x57, 0xc1, 0x49, 0xae,
	0x44, 0x3f, 0x0d, 0x65, 0x69, 0x8e, 0x24, 0x8f, 0xd7, 0xe1, 0x0f, 0x3e, 0xc8, 0x72, 0xe1, 0x31,
	0xc6, 0xe1, 0x92, 0x48, 0x58, 0x37, 0xc5, 0xf4, 0xd5, 0x5d, 0x70, 0x6c, 0x88, 0x33, 0x4f, 0x70,
	0x8f, 0x67, 0xfb, 0xe1, 0x07, 0x8f, 0x74, 0xa5, 0xa1, 0x5c, 0xd6, 0x3a, 0x52, 0x94, 0xce, 0xd3,
	0xe5, 0xea, 0x7b, 0x40, 0x8a, 0x89, 0x49, 0xb2, 0x8b, 0x34, 0x11, 0xf4, 0x4f, 0x20, 0xf8, 0x0f,
	0x3f, 0x78, 0x64, 0x9a, 0x19, 0x75, 0xab, 0xd7, 0x9a, 0x8f, 0x87, 0xa0, 0xab, 0x1b, 0x0f, 0xe4,
	0x74, 0x69, 0x71, 0x84, 0x64, 0x56, 0x5e, 0x73, 0xc1, 0xff, 0x25, 0x16, 0x72, 0x30, 0xeb, 0xaf,
	0xbe, 0x5f, 0x06, 0x27, 0xfa, 0xac, 0x48, 0x56, 0xf3, 0x32, 0x0f, 0x7d, 0x1c, 0xc7, 0xff, 0x16,
	0xa6, 0x3c, 0x61, 0x1d, 0x65, 0x1e, 0x7a, 0x34, 0x17, 0x5e, 0x00, 0xae, 0xde, 0x03, 0x47, 0x9f,
	0xcc, 0x3d, 0x85, 0x67, 0xe5, 0xf2, 0x7f, 0xfc, 0xeb, 0x4f, 0xe9, 0x9e, 0x47, 0x92, 0x61, 0xd0,
	0xda, 0xfb, 0xe5, 0x4f, 0x3e, 0x5b, 0x2c, 0x7d, 0xfa, 0xd9, 0x62, 0xe9, 0x27, 0x9f, 0x2d, 0x96,
	0xdf, 0xbf, 0xbf, 0x58, 0xfe, 0xb3, 0xfb, 0x8b, 0xe5, 0x8f, 0xef, 0x2f, 0x96, 0x3f, 0xb9, 0xbf,
	0x58, 0xfe, 0xf1, 0xfd, 0xc5, 0xf2, 0x7f, 0xde, 0x5f, 0x2c, 0xfd, 0xe4, 0xfe, 0x62, 0xf9, 0x1b,
	0x9f, 0x2f, 0x96, 0x3e, 0xf9, 0x7c, 0xb1, 0xf4, 0xe9, 0xe7, 0x8b, 0xa5, 0x77, 0x5e, 0x73, 0xc3,
	0x68, 0xdb, 0x5d, 0xee, 0x84, 0x1e, 0xbf, 0x3b, 0x5a, 0x6e, 0x27, 0x2b, 0xfd, 0x37, 0xd9, 0x51,
	0x1c, 0x76, 0xa8, 0x4d, 0x62, 0x98, 0xa3, 0x57, 0x22, 0xcb, 0x0d, 0x57, 0xc8, 0xdd, 0x54, 0x7c,
	0xec, 0x39, 0xf0, 0xcd, 0xa7, 0x35, 0xc1, 0xed, 0xab, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x30, 0x92, 0x39, 0x12, 0x2a, 0x00, 0x00,
}

func (this *BFSecretInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretInfo)
	if !ok {
		that2, ok := that.(BFSecretInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicyUid != that1.PolicyUid {
		return false
	}
	if this.PolicyName != that1.PolicyName {
		return false
	}
	if this.PolicyId != that1.PolicyId {
		return false
	}
	if this.WellKnownTenantPrefix != that1.WellKnownTenantPrefix {
		return false
	}
	if len(this.GcServices) != len(that1.GcServices) {
		return false
	}
	for i := range this.GcServices {
		if this.GcServices[i] != that1.GcServices[i] {
			return false
		}
	}
	if len(this.NonGcServices) != len(that1.NonGcServices) {
		return false
	}
	for i := range this.NonGcServices {
		if this.NonGcServices[i] != that1.NonGcServices[i] {
			return false
		}
	}
	if len(this.GcJobs) != len(that1.GcJobs) {
		return false
	}
	for i := range this.GcJobs {
		if this.GcJobs[i] != that1.GcJobs[i] {
			return false
		}
	}
	return true
}
func (this *BFSecretChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice)
	if !ok {
		that2, ok := that.(BFSecretChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesContainerRegistryPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesContainerRegistryPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesContainerRegistryPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesContainerRegistryPassword != that1.VesContainerRegistryPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverSlackUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverSlackUrl)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverSlackUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverSlackUrl != that1.VesAlertReceiverSlackUrl {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverPagerdutyRoutingKey != that1.VesAlertReceiverPagerdutyRoutingKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverOpsgenieApiKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverOpsgenieApiKey != that1.VesAlertReceiverOpsgenieApiKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesTerraformJobViewSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesTerraformJobViewSite)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesTerraformJobViewSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesTerraformJobViewSite != that1.VesTerraformJobViewSite {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesK8SClusterArgocdAdminPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesK8SClusterArgocdAdminPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesK8SClusterArgocdAdminPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesK8SClusterArgocdAdminPassword != that1.VesK8SClusterArgocdAdminPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesNfvServiceBigIpPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesNfvServiceBigIpPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesNfvServiceBigIpPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesNfvServiceBigIpPassword != that1.VesNfvServiceBigIpPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesNfvServicePanFwPanaromaKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesNfvServicePanFwPanaromaKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesNfvServicePanFwPanaromaKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesNfvServicePanFwPanaromaKey != that1.VesNfvServicePanFwPanaromaKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesNfvServicePanFwSshPvtKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesNfvServicePanFwSshPvtKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesNfvServicePanFwSshPvtKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesNfvServicePanFwSshPvtKey != that1.VesNfvServicePanFwSshPvtKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesNfvServicePanFwUserPasswd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesNfvServicePanFwUserPasswd)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesNfvServicePanFwUserPasswd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesNfvServicePanFwUserPasswd != that1.VesNfvServicePanFwUserPasswd {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesCdnLoadbalancerCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesCdnLoadbalancerCertificate)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesCdnLoadbalancerCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesCdnLoadbalancerCertificate != that1.VesCdnLoadbalancerCertificate {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesGlobalLogReceiverSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesGlobalLogReceiverSecret)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesGlobalLogReceiverSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesGlobalLogReceiverSecret != that1.VesGlobalLogReceiverSecret {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAzureExpressRouteAuthorizationKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAzureExpressRouteAuthorizationKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAzureExpressRouteAuthorizationKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAzureExpressRouteAuthorizationKey != that1.VesAzureExpressRouteAuthorizationKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesBigipApmServiceBigIpPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesBigipApmServiceBigIpPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesBigipApmServiceBigIpPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesBigipApmServiceBigIpPassword != that1.VesBigipApmServiceBigIpPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesIoNfvServiceBigIpBmAdminPassword != that1.VesIoNfvServiceBigIpBmAdminPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverWebhookUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverWebhookUrl)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverWebhookUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverWebhookUrl != that1.VesAlertReceiverWebhookUrl {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword != that1.VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken != that1.VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesCloudLinkAwsByocBgpAuthToken != that1.VesCloudLinkAwsByocBgpAuthToken {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesCertificatePrivateKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesCertificatePrivateKey)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesCertificatePrivateKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesCertificatePrivateKey != that1.VesCertificatePrivateKey {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesIoNfvServiceBigIqLicBmAdminPassword != that1.VesIoNfvServiceBigIqLicBmAdminPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesIoCminstanceAdminPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesIoCminstanceAdminPassword)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesIoCminstanceAdminPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesIoCminstanceAdminPassword != that1.VesIoCminstanceAdminPassword {
		return false
	}
	return true
}
func (this *BFSecretChoice_VesIoCminstanceApiToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BFSecretChoice_VesIoCminstanceApiToken)
	if !ok {
		that2, ok := that.(BFSecretChoice_VesIoCminstanceApiToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesIoCminstanceApiToken != that1.VesIoCminstanceApiToken {
		return false
	}
	return true
}
func (this *ReEncryptSecretItemType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReEncryptSecretItemType)
	if !ok {
		that2, ok := that.(ReEncryptSecretItemType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldPath != that1.FieldPath {
		return false
	}
	if this.PolicyName != that1.PolicyName {
		return false
	}
	return true
}
func (this *ReEncryptSecretsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReEncryptSecretsType)
	if !ok {
		that2, ok := that.(ReEncryptSecretsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceSlugInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugInfo)
	if !ok {
		that2, ok := that.(ServiceSlugInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	if this.P0PolName != that1.P0PolName {
		return false
	}
	if this.ServiceSelector != that1.ServiceSelector {
		return false
	}
	return true
}
func (this *ServiceSlugChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice)
	if !ok {
		that2, ok := that.(ServiceSlugChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Alert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Alert)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Alert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Alert != that1.Alert {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Config)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Config != that1.Config {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Data)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Infraprotect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Infraprotect)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Infraprotect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Infraprotect != that1.Infraprotect {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Kms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Kms)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Kms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kms != that1.Kms {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Ml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Ml)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Ml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ml != that1.Ml {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Operate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Operate)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Operate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operate != that1.Operate {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Register) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Register)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Register)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Register != that1.Register {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_SecretManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_SecretManagement)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_SecretManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SecretManagement != that1.SecretManagement {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Terraform) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Terraform)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Terraform)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Terraform != that1.Terraform {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Tpm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Tpm)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Tpm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tpm != that1.Tpm {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Uam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Uam)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Uam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uam != that1.Uam {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Web) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Web)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Web)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Web != that1.Web {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_DeviceId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_DeviceId)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_DeviceId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Safe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Safe)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Safe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Safe != that1.Safe {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_ClientSideDefense)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientSideDefense != that1.ClientSideDefense {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_BotDefense)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BotDefense != that1.BotDefense {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_ObjectStore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_ObjectStore)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_ObjectStore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectStore != that1.ObjectStore {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Recognize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Recognize)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Recognize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Recognize != that1.Recognize {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Dns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Dns)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Dns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dns != that1.Dns {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Bfdp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Bfdp)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Bfdp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bfdp != that1.Bfdp {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Scim) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Scim)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Scim)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scim != that1.Scim {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Cdn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Cdn)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Cdn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cdn != that1.Cdn {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_NginxMgmtSuiteConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_NginxMgmtSuiteConnector)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_NginxMgmtSuiteConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NginxMgmtSuiteConnector != that1.NginxMgmtSuiteConnector {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_BotDefenseMobileSdk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_BotDefenseMobileSdk)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_BotDefenseMobileSdk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BotDefenseMobileSdk != that1.BotDefenseMobileSdk {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Nginx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Nginx)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Nginx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nginx != that1.Nginx {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Safeap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Safeap)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Safeap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Safeap != that1.Safeap {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Aip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Aip)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Aip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Aip != that1.Aip {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_LogReceiver)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LogReceiver != that1.LogReceiver {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_ObservabilityConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_ObservabilityConnector)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_ObservabilityConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservabilityConnector != that1.ObservabilityConnector {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Report) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Report)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Report)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Report != that1.Report {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Waf)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Waf != that1.Waf {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_ObservabilitySyntheticMonitor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_ObservabilitySyntheticMonitor)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_ObservabilitySyntheticMonitor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObservabilitySyntheticMonitor != that1.ObservabilitySyntheticMonitor {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_CloudData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_CloudData)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_CloudData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CloudData != that1.CloudData {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_MobileIntegrator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_MobileIntegrator)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_MobileIntegrator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MobileIntegrator != that1.MobileIntegrator {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_DataIntelligence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_DataIntelligence)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_DataIntelligence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataIntelligence != that1.DataIntelligence {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Brmalerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Brmalerts)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Brmalerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Brmalerts != that1.Brmalerts {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_Marketplace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_Marketplace)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_Marketplace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Marketplace != that1.Marketplace {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_MarketplaceOnboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_MarketplaceOnboard)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_MarketplaceOnboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarketplaceOnboard != that1.MarketplaceOnboard {
		return false
	}
	return true
}
func (this *ServiceSlugChoice_NginxOne) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceSlugChoice_NginxOne)
	if !ok {
		that2, ok := that.(ServiceSlugChoice_NginxOne)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NginxOne != that1.NginxOne {
		return false
	}
	return true
}
func (this *ServiceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceInfo)
	if !ok {
		that2, ok := that.(ServiceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if this.Locations[i] != that1.Locations[i] {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *NameToUid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameToUid)
	if !ok {
		that2, ok := that.(NameToUid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *QuotaResourceKeyInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuotaResourceKeyInfo)
	if !ok {
		that2, ok := that.(QuotaResourceKeyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	return true
}
func (this *RouteTargetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTargetInfo)
	if !ok {
		that2, ok := that.(RouteTargetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpBased != that1.IpBased {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ForObjectTypes != that1.ForObjectTypes {
		return false
	}
	return true
}
func (this *APIGroupElementItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupElementItem)
	if !ok {
		that2, ok := that.(APIGroupElementItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.PathRegex != that1.PathRegex {
		return false
	}
	return true
}
func (this *APIGroupElementInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupElementInfo)
	if !ok {
		that2, ok := that.(APIGroupElementInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *AddonServiceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceInfo)
	if !ok {
		that2, ok := that.(AddonServiceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Daemon != that1.Daemon {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.ApiGroupNamePrefix != that1.ApiGroupNamePrefix {
		return false
	}
	return true
}
func (this *APIGroupNameMapItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupNameMapItem)
	if !ok {
		that2, ok := that.(APIGroupNameMapItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RpcName != that1.RpcName {
		return false
	}
	if this.ApiGroupNames != that1.ApiGroupNames {
		return false
	}
	return true
}
func (this *APIGroupNameMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupNameMap)
	if !ok {
		that2, ok := that.(APIGroupNameMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RpcMappings) != len(that1.RpcMappings) {
		return false
	}
	for i := range this.RpcMappings {
		if !this.RpcMappings[i].Equal(that1.RpcMappings[i]) {
			return false
		}
	}
	return true
}
func (this *BFSecretInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&vesenv.BFSecretInfo{")
	s = append(s, "PolicyUid: "+fmt.Sprintf("%#v", this.PolicyUid)+",\n")
	s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	s = append(s, "PolicyId: "+fmt.Sprintf("%#v", this.PolicyId)+",\n")
	s = append(s, "WellKnownTenantPrefix: "+fmt.Sprintf("%#v", this.WellKnownTenantPrefix)+",\n")
	s = append(s, "GcServices: "+fmt.Sprintf("%#v", this.GcServices)+",\n")
	s = append(s, "NonGcServices: "+fmt.Sprintf("%#v", this.NonGcServices)+",\n")
	s = append(s, "GcJobs: "+fmt.Sprintf("%#v", this.GcJobs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BFSecretChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 27)
	s = append(s, "&vesenv.BFSecretChoice{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BFSecretChoice_VesContainerRegistryPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesContainerRegistryPassword{` +
		`VesContainerRegistryPassword:` + fmt.Sprintf("%#v", this.VesContainerRegistryPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverSlackUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverSlackUrl{` +
		`VesAlertReceiverSlackUrl:` + fmt.Sprintf("%#v", this.VesAlertReceiverSlackUrl) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{` +
		`VesAlertReceiverPagerdutyRoutingKey:` + fmt.Sprintf("%#v", this.VesAlertReceiverPagerdutyRoutingKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverOpsgenieApiKey{` +
		`VesAlertReceiverOpsgenieApiKey:` + fmt.Sprintf("%#v", this.VesAlertReceiverOpsgenieApiKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesTerraformJobViewSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesTerraformJobViewSite{` +
		`VesTerraformJobViewSite:` + fmt.Sprintf("%#v", this.VesTerraformJobViewSite) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesK8SClusterArgocdAdminPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesK8SClusterArgocdAdminPassword{` +
		`VesK8SClusterArgocdAdminPassword:` + fmt.Sprintf("%#v", this.VesK8SClusterArgocdAdminPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesNfvServiceBigIpPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesNfvServiceBigIpPassword{` +
		`VesNfvServiceBigIpPassword:` + fmt.Sprintf("%#v", this.VesNfvServiceBigIpPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesNfvServicePanFwPanaromaKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesNfvServicePanFwPanaromaKey{` +
		`VesNfvServicePanFwPanaromaKey:` + fmt.Sprintf("%#v", this.VesNfvServicePanFwPanaromaKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesNfvServicePanFwSshPvtKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesNfvServicePanFwSshPvtKey{` +
		`VesNfvServicePanFwSshPvtKey:` + fmt.Sprintf("%#v", this.VesNfvServicePanFwSshPvtKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesNfvServicePanFwUserPasswd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesNfvServicePanFwUserPasswd{` +
		`VesNfvServicePanFwUserPasswd:` + fmt.Sprintf("%#v", this.VesNfvServicePanFwUserPasswd) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesCdnLoadbalancerCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesCdnLoadbalancerCertificate{` +
		`VesCdnLoadbalancerCertificate:` + fmt.Sprintf("%#v", this.VesCdnLoadbalancerCertificate) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesGlobalLogReceiverSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesGlobalLogReceiverSecret{` +
		`VesGlobalLogReceiverSecret:` + fmt.Sprintf("%#v", this.VesGlobalLogReceiverSecret) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAzureExpressRouteAuthorizationKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAzureExpressRouteAuthorizationKey{` +
		`VesAzureExpressRouteAuthorizationKey:` + fmt.Sprintf("%#v", this.VesAzureExpressRouteAuthorizationKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesBigipApmServiceBigIpPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesBigipApmServiceBigIpPassword{` +
		`VesBigipApmServiceBigIpPassword:` + fmt.Sprintf("%#v", this.VesBigipApmServiceBigIpPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword{` +
		`VesIoNfvServiceBigIpBmAdminPassword:` + fmt.Sprintf("%#v", this.VesIoNfvServiceBigIpBmAdminPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverWebhookUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverWebhookUrl{` +
		`VesAlertReceiverWebhookUrl:` + fmt.Sprintf("%#v", this.VesAlertReceiverWebhookUrl) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword{` +
		`VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword:` + fmt.Sprintf("%#v", this.VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken{` +
		`VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken:` + fmt.Sprintf("%#v", this.VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken{` +
		`VesCloudLinkAwsByocBgpAuthToken:` + fmt.Sprintf("%#v", this.VesCloudLinkAwsByocBgpAuthToken) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesCertificatePrivateKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesCertificatePrivateKey{` +
		`VesCertificatePrivateKey:` + fmt.Sprintf("%#v", this.VesCertificatePrivateKey) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword{` +
		`VesIoNfvServiceBigIqLicBmAdminPassword:` + fmt.Sprintf("%#v", this.VesIoNfvServiceBigIqLicBmAdminPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesIoCminstanceAdminPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesIoCminstanceAdminPassword{` +
		`VesIoCminstanceAdminPassword:` + fmt.Sprintf("%#v", this.VesIoCminstanceAdminPassword) + `}`}, ", ")
	return s
}
func (this *BFSecretChoice_VesIoCminstanceApiToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.BFSecretChoice_VesIoCminstanceApiToken{` +
		`VesIoCminstanceApiToken:` + fmt.Sprintf("%#v", this.VesIoCminstanceApiToken) + `}`}, ", ")
	return s
}
func (this *ReEncryptSecretItemType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.ReEncryptSecretItemType{")
	s = append(s, "FieldPath: "+fmt.Sprintf("%#v", this.FieldPath)+",\n")
	s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReEncryptSecretsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vesenv.ReEncryptSecretsType{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceSlugInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&vesenv.ServiceSlugInfo{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "P0PolName: "+fmt.Sprintf("%#v", this.P0PolName)+",\n")
	s = append(s, "ServiceSelector: "+fmt.Sprintf("%#v", this.ServiceSelector)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceSlugChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 44)
	s = append(s, "&vesenv.ServiceSlugChoice{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceSlugChoice_Alert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Alert{` +
		`Alert:` + fmt.Sprintf("%#v", this.Alert) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Config{` +
		`Config:` + fmt.Sprintf("%#v", this.Config) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Infraprotect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Infraprotect{` +
		`Infraprotect:` + fmt.Sprintf("%#v", this.Infraprotect) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Kms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Kms{` +
		`Kms:` + fmt.Sprintf("%#v", this.Kms) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Ml) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Ml{` +
		`Ml:` + fmt.Sprintf("%#v", this.Ml) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Operate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Operate{` +
		`Operate:` + fmt.Sprintf("%#v", this.Operate) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Register) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Register{` +
		`Register:` + fmt.Sprintf("%#v", this.Register) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_SecretManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_SecretManagement{` +
		`SecretManagement:` + fmt.Sprintf("%#v", this.SecretManagement) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Terraform) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Terraform{` +
		`Terraform:` + fmt.Sprintf("%#v", this.Terraform) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Tpm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Tpm{` +
		`Tpm:` + fmt.Sprintf("%#v", this.Tpm) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Uam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Uam{` +
		`Uam:` + fmt.Sprintf("%#v", this.Uam) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Web) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Web{` +
		`Web:` + fmt.Sprintf("%#v", this.Web) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_DeviceId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_DeviceId{` +
		`DeviceId:` + fmt.Sprintf("%#v", this.DeviceId) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Safe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Safe{` +
		`Safe:` + fmt.Sprintf("%#v", this.Safe) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_ObjectStore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_ObjectStore{` +
		`ObjectStore:` + fmt.Sprintf("%#v", this.ObjectStore) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Recognize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Recognize{` +
		`Recognize:` + fmt.Sprintf("%#v", this.Recognize) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Dns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Dns{` +
		`Dns:` + fmt.Sprintf("%#v", this.Dns) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Bfdp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Bfdp{` +
		`Bfdp:` + fmt.Sprintf("%#v", this.Bfdp) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Scim) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Scim{` +
		`Scim:` + fmt.Sprintf("%#v", this.Scim) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Cdn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Cdn{` +
		`Cdn:` + fmt.Sprintf("%#v", this.Cdn) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_NginxMgmtSuiteConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_NginxMgmtSuiteConnector{` +
		`NginxMgmtSuiteConnector:` + fmt.Sprintf("%#v", this.NginxMgmtSuiteConnector) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_BotDefenseMobileSdk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_BotDefenseMobileSdk{` +
		`BotDefenseMobileSdk:` + fmt.Sprintf("%#v", this.BotDefenseMobileSdk) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Nginx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Nginx{` +
		`Nginx:` + fmt.Sprintf("%#v", this.Nginx) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Safeap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Safeap{` +
		`Safeap:` + fmt.Sprintf("%#v", this.Safeap) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Aip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Aip{` +
		`Aip:` + fmt.Sprintf("%#v", this.Aip) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_ObservabilityConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_ObservabilityConnector{` +
		`ObservabilityConnector:` + fmt.Sprintf("%#v", this.ObservabilityConnector) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Report) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Report{` +
		`Report:` + fmt.Sprintf("%#v", this.Report) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_ObservabilitySyntheticMonitor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_ObservabilitySyntheticMonitor{` +
		`ObservabilitySyntheticMonitor:` + fmt.Sprintf("%#v", this.ObservabilitySyntheticMonitor) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_CloudData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_CloudData{` +
		`CloudData:` + fmt.Sprintf("%#v", this.CloudData) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_MobileIntegrator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_MobileIntegrator{` +
		`MobileIntegrator:` + fmt.Sprintf("%#v", this.MobileIntegrator) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_DataIntelligence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_DataIntelligence{` +
		`DataIntelligence:` + fmt.Sprintf("%#v", this.DataIntelligence) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Brmalerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Brmalerts{` +
		`Brmalerts:` + fmt.Sprintf("%#v", this.Brmalerts) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_Marketplace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_Marketplace{` +
		`Marketplace:` + fmt.Sprintf("%#v", this.Marketplace) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_MarketplaceOnboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_MarketplaceOnboard{` +
		`MarketplaceOnboard:` + fmt.Sprintf("%#v", this.MarketplaceOnboard) + `}`}, ", ")
	return s
}
func (this *ServiceSlugChoice_NginxOne) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.ServiceSlugChoice_NginxOne{` +
		`NginxOne:` + fmt.Sprintf("%#v", this.NginxOne) + `}`}, ", ")
	return s
}
func (this *ServiceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vesenv.ServiceInfo{")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NameToUid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vesenv.NameToUid{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuotaResourceKeyInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.QuotaResourceKeyInfo{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTargetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vesenv.RouteTargetInfo{")
	s = append(s, "IpBased: "+fmt.Sprintf("%#v", this.IpBased)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ForObjectTypes: "+fmt.Sprintf("%#v", this.ForObjectTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupElementItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.APIGroupElementItem{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "PathRegex: "+fmt.Sprintf("%#v", this.PathRegex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupElementInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vesenv.APIGroupElementInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddonServiceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vesenv.AddonServiceInfo{")
	s = append(s, "Daemon: "+fmt.Sprintf("%#v", this.Daemon)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "ApiGroupNamePrefix: "+fmt.Sprintf("%#v", this.ApiGroupNamePrefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupNameMapItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vesenv.APIGroupNameMapItem{")
	s = append(s, "RpcName: "+fmt.Sprintf("%#v", this.RpcName)+",\n")
	s = append(s, "ApiGroupNames: "+fmt.Sprintf("%#v", this.ApiGroupNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupNameMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vesenv.APIGroupNameMap{")
	if this.RpcMappings != nil {
		s = append(s, "RpcMappings: "+fmt.Sprintf("%#v", this.RpcMappings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BFSecretInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BFSecretInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WellKnownTenantPrefix) > 0 {
		i -= len(m.WellKnownTenantPrefix)
		copy(dAtA[i:], m.WellKnownTenantPrefix)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.WellKnownTenantPrefix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PolicyUid) > 0 {
		i -= len(m.PolicyUid)
		copy(dAtA[i:], m.PolicyUid)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PolicyUid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GcJobs) > 0 {
		for iNdEx := len(m.GcJobs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GcJobs[iNdEx])
			copy(dAtA[i:], m.GcJobs[iNdEx])
			i = encodeVarintOptions(dAtA, i, uint64(len(m.GcJobs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NonGcServices) > 0 {
		for iNdEx := len(m.NonGcServices) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NonGcServices[iNdEx])
			copy(dAtA[i:], m.NonGcServices[iNdEx])
			i = encodeVarintOptions(dAtA, i, uint64(len(m.NonGcServices[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GcServices) > 0 {
		for iNdEx := len(m.GcServices) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GcServices[iNdEx])
			copy(dAtA[i:], m.GcServices[iNdEx])
			i = encodeVarintOptions(dAtA, i, uint64(len(m.GcServices[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PolicyId != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.PolicyId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PolicyName) > 0 {
		i -= len(m.PolicyName)
		copy(dAtA[i:], m.PolicyName)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PolicyName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BFSecretChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BFSecretChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BFSecretChoice_VesContainerRegistryPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesContainerRegistryPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesContainerRegistryPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAlertReceiverSlackUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAlertReceiverSlackUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAlertReceiverSlackUrl {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAlertReceiverPagerdutyRoutingKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAlertReceiverOpsgenieApiKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesTerraformJobViewSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesTerraformJobViewSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesTerraformJobViewSite {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesK8SClusterArgocdAdminPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesK8SClusterArgocdAdminPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesK8SClusterArgocdAdminPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesNfvServiceBigIpPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesNfvServiceBigIpPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesNfvServiceBigIpPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesCdnLoadbalancerCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesCdnLoadbalancerCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesCdnLoadbalancerCertificate {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesGlobalLogReceiverSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesGlobalLogReceiverSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesGlobalLogReceiverSecret {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAzureExpressRouteAuthorizationKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAzureExpressRouteAuthorizationKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAzureExpressRouteAuthorizationKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesNfvServicePanFwPanaromaKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesNfvServicePanFwPanaromaKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesNfvServicePanFwPanaromaKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesNfvServicePanFwSshPvtKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesNfvServicePanFwSshPvtKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesNfvServicePanFwSshPvtKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesNfvServicePanFwUserPasswd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesNfvServicePanFwUserPasswd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesNfvServicePanFwUserPasswd {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesBigipApmServiceBigIpPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesBigipApmServiceBigIpPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesBigipApmServiceBigIpPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesIoNfvServiceBigIpBmAdminPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAlertReceiverWebhookUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAlertReceiverWebhookUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAlertReceiverWebhookUrl {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesCloudLinkAwsByocBgpAuthToken {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesCertificatePrivateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesCertificatePrivateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesCertificatePrivateKey {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesIoNfvServiceBigIqLicBmAdminPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesIoCminstanceAdminPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesIoCminstanceAdminPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesIoCminstanceAdminPassword {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	return len(dAtA) - i, nil
}
func (m *BFSecretChoice_VesIoCminstanceApiToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BFSecretChoice_VesIoCminstanceApiToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesIoCminstanceApiToken {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	return len(dAtA) - i, nil
}
func (m *ReEncryptSecretItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReEncryptSecretItemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReEncryptSecretItemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyName) > 0 {
		i -= len(m.PolicyName)
		copy(dAtA[i:], m.PolicyName)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PolicyName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FieldPath) > 0 {
		i -= len(m.FieldPath)
		copy(dAtA[i:], m.FieldPath)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.FieldPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReEncryptSecretsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReEncryptSecretsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReEncryptSecretsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceSlugInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSlugInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceSelector) > 0 {
		i -= len(m.ServiceSelector)
		copy(dAtA[i:], m.ServiceSelector)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.ServiceSelector)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.P0PolName) > 0 {
		i -= len(m.P0PolName)
		copy(dAtA[i:], m.P0PolName)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.P0PolName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Daemon) > 0 {
		i -= len(m.Daemon)
		copy(dAtA[i:], m.Daemon)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceSlugChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSlugChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceSlugChoice_Alert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Alert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Alert {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Config {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Data {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Infraprotect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Infraprotect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Infraprotect {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Kms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Kms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Kms {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Ml) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Ml) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ml {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Operate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Operate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Operate {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Register) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Register) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Register {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_SecretManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_SecretManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.SecretManagement {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Terraform) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Terraform) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Terraform {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Tpm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Tpm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Tpm {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Uam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Uam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Uam {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Web) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Web) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Web {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_DeviceId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_DeviceId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.DeviceId {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Safe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Safe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Safe {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ClientSideDefense {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BotDefense {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_ObjectStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_ObjectStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ObjectStore {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Recognize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Recognize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Recognize {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Dns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Dns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Dns {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Bfdp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Bfdp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Bfdp {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Scim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Scim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Scim {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Cdn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Cdn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Cdn {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_NginxMgmtSuiteConnector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_NginxMgmtSuiteConnector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.NginxMgmtSuiteConnector {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_BotDefenseMobileSdk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_BotDefenseMobileSdk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BotDefenseMobileSdk {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Nginx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Nginx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Nginx {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Safeap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Safeap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Safeap {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Aip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Aip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Aip {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.LogReceiver {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_ObservabilityConnector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_ObservabilityConnector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ObservabilityConnector {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Report) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Report) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Report {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Waf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Waf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Waf {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x88
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_ObservabilitySyntheticMonitor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_ObservabilitySyntheticMonitor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ObservabilitySyntheticMonitor {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_CloudData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_CloudData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.CloudData {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x98
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_MobileIntegrator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_MobileIntegrator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.MobileIntegrator {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_DataIntelligence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_DataIntelligence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.DataIntelligence {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Brmalerts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Brmalerts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Brmalerts {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_Marketplace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_Marketplace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Marketplace {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb8
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_MarketplaceOnboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_MarketplaceOnboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.MarketplaceOnboard {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc0
	return len(dAtA) - i, nil
}
func (m *ServiceSlugChoice_NginxOne) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSlugChoice_NginxOne) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.NginxOne {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc8
	return len(dAtA) - i, nil
}
func (m *ServiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locations[iNdEx])
			copy(dAtA[i:], m.Locations[iNdEx])
			i = encodeVarintOptions(dAtA, i, uint64(len(m.Locations[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Daemon) > 0 {
		i -= len(m.Daemon)
		copy(dAtA[i:], m.Daemon)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameToUid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameToUid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameToUid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuotaResourceKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotaResourceKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuotaResourceKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Daemon) > 0 {
		i -= len(m.Daemon)
		copy(dAtA[i:], m.Daemon)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTargetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTargetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTargetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpBased {
		i--
		if m.IpBased {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForObjectTypes) > 0 {
		i -= len(m.ForObjectTypes)
		copy(dAtA[i:], m.ForObjectTypes)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.ForObjectTypes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Value != 0 {
		i = encodeVarintOptions(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *APIGroupElementItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupElementItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupElementItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PathRegex) > 0 {
		i -= len(m.PathRegex)
		copy(dAtA[i:], m.PathRegex)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.PathRegex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIGroupElementInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupElementInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupElementInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddonServiceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonServiceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroupNamePrefix) > 0 {
		i -= len(m.ApiGroupNamePrefix)
		copy(dAtA[i:], m.ApiGroupNamePrefix)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.ApiGroupNamePrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Daemon) > 0 {
		i -= len(m.Daemon)
		copy(dAtA[i:], m.Daemon)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.Daemon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIGroupNameMapItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupNameMapItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupNameMapItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroupNames) > 0 {
		i -= len(m.ApiGroupNames)
		copy(dAtA[i:], m.ApiGroupNames)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.ApiGroupNames)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RpcName) > 0 {
		i -= len(m.RpcName)
		copy(dAtA[i:], m.RpcName)
		i = encodeVarintOptions(dAtA, i, uint64(len(m.RpcName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIGroupNameMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupNameMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupNameMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RpcMappings) > 0 {
		for iNdEx := len(m.RpcMappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RpcMappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOptions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOptions(dAtA []byte, offset int, v uint64) int {
	offset -= sovOptions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BFSecretInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.PolicyId != 0 {
		n += 1 + sovOptions(uint64(m.PolicyId))
	}
	if len(m.GcServices) > 0 {
		for _, s := range m.GcServices {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if len(m.NonGcServices) > 0 {
		for _, s := range m.NonGcServices {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	if len(m.GcJobs) > 0 {
		for _, s := range m.GcJobs {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	l = len(m.PolicyUid)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.WellKnownTenantPrefix)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *BFSecretChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *BFSecretChoice_VesContainerRegistryPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverSlackUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesTerraformJobViewSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesK8SClusterArgocdAdminPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesNfvServiceBigIpPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesCdnLoadbalancerCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesGlobalLogReceiverSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAzureExpressRouteAuthorizationKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesNfvServicePanFwPanaromaKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesNfvServicePanFwSshPvtKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesNfvServicePanFwUserPasswd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesBigipApmServiceBigIpPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BFSecretChoice_VesAlertReceiverWebhookUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesCertificatePrivateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesIoCminstanceAdminPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BFSecretChoice_VesIoCminstanceApiToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ReEncryptSecretItemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldPath)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *ReEncryptSecretsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func (m *ServiceSlugInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.P0PolName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.ServiceSelector)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *ServiceSlugChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *ServiceSlugChoice_Alert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Infraprotect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Kms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Ml) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Operate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_SecretManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Terraform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Tpm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Uam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Web) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_DeviceId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_Safe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ServiceSlugChoice_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_ObjectStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Recognize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Dns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Bfdp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Scim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Cdn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_NginxMgmtSuiteConnector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_BotDefenseMobileSdk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Nginx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Safeap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Aip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_ObservabilityConnector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Report) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Waf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_ObservabilitySyntheticMonitor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_CloudData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_MobileIntegrator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_DataIntelligence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Brmalerts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_Marketplace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_MarketplaceOnboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceSlugChoice_NginxOne) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *ServiceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			l = len(s)
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *NameToUid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *QuotaResourceKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *RouteTargetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovOptions(uint64(m.Value))
	}
	l = len(m.ForObjectTypes)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if m.IpBased {
		n += 2
	}
	return n
}

func (m *APIGroupElementItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.PathRegex)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *APIGroupElementInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *AddonServiceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Daemon)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.ApiGroupNamePrefix)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *APIGroupNameMapItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RpcName)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	l = len(m.ApiGroupNames)
	if l > 0 {
		n += 1 + l + sovOptions(uint64(l))
	}
	return n
}

func (m *APIGroupNameMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RpcMappings) > 0 {
		for _, e := range m.RpcMappings {
			l = e.Size()
			n += 1 + l + sovOptions(uint64(l))
		}
	}
	return n
}

func sovOptions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptions(x uint64) (n int) {
	return sovOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BFSecretInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretInfo{`,
		`PolicyName:` + fmt.Sprintf("%v", this.PolicyName) + `,`,
		`PolicyId:` + fmt.Sprintf("%v", this.PolicyId) + `,`,
		`GcServices:` + fmt.Sprintf("%v", this.GcServices) + `,`,
		`NonGcServices:` + fmt.Sprintf("%v", this.NonGcServices) + `,`,
		`GcJobs:` + fmt.Sprintf("%v", this.GcJobs) + `,`,
		`PolicyUid:` + fmt.Sprintf("%v", this.PolicyUid) + `,`,
		`WellKnownTenantPrefix:` + fmt.Sprintf("%v", this.WellKnownTenantPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesContainerRegistryPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesContainerRegistryPassword{`,
		`VesContainerRegistryPassword:` + fmt.Sprintf("%v", this.VesContainerRegistryPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverSlackUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverSlackUrl{`,
		`VesAlertReceiverSlackUrl:` + fmt.Sprintf("%v", this.VesAlertReceiverSlackUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{`,
		`VesAlertReceiverPagerdutyRoutingKey:` + fmt.Sprintf("%v", this.VesAlertReceiverPagerdutyRoutingKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverOpsgenieApiKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverOpsgenieApiKey{`,
		`VesAlertReceiverOpsgenieApiKey:` + fmt.Sprintf("%v", this.VesAlertReceiverOpsgenieApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesTerraformJobViewSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesTerraformJobViewSite{`,
		`VesTerraformJobViewSite:` + fmt.Sprintf("%v", this.VesTerraformJobViewSite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesK8SClusterArgocdAdminPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesK8SClusterArgocdAdminPassword{`,
		`VesK8SClusterArgocdAdminPassword:` + fmt.Sprintf("%v", this.VesK8SClusterArgocdAdminPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesNfvServiceBigIpPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesNfvServiceBigIpPassword{`,
		`VesNfvServiceBigIpPassword:` + fmt.Sprintf("%v", this.VesNfvServiceBigIpPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesCdnLoadbalancerCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesCdnLoadbalancerCertificate{`,
		`VesCdnLoadbalancerCertificate:` + fmt.Sprintf("%v", this.VesCdnLoadbalancerCertificate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesGlobalLogReceiverSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesGlobalLogReceiverSecret{`,
		`VesGlobalLogReceiverSecret:` + fmt.Sprintf("%v", this.VesGlobalLogReceiverSecret) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAzureExpressRouteAuthorizationKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAzureExpressRouteAuthorizationKey{`,
		`VesAzureExpressRouteAuthorizationKey:` + fmt.Sprintf("%v", this.VesAzureExpressRouteAuthorizationKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesNfvServicePanFwPanaromaKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesNfvServicePanFwPanaromaKey{`,
		`VesNfvServicePanFwPanaromaKey:` + fmt.Sprintf("%v", this.VesNfvServicePanFwPanaromaKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesNfvServicePanFwSshPvtKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesNfvServicePanFwSshPvtKey{`,
		`VesNfvServicePanFwSshPvtKey:` + fmt.Sprintf("%v", this.VesNfvServicePanFwSshPvtKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesNfvServicePanFwUserPasswd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesNfvServicePanFwUserPasswd{`,
		`VesNfvServicePanFwUserPasswd:` + fmt.Sprintf("%v", this.VesNfvServicePanFwUserPasswd) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesBigipApmServiceBigIpPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesBigipApmServiceBigIpPassword{`,
		`VesBigipApmServiceBigIpPassword:` + fmt.Sprintf("%v", this.VesBigipApmServiceBigIpPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword{`,
		`VesIoNfvServiceBigIpBmAdminPassword:` + fmt.Sprintf("%v", this.VesIoNfvServiceBigIpBmAdminPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverWebhookUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverWebhookUrl{`,
		`VesAlertReceiverWebhookUrl:` + fmt.Sprintf("%v", this.VesAlertReceiverWebhookUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword{`,
		`VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword:` + fmt.Sprintf("%v", this.VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken{`,
		`VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken:` + fmt.Sprintf("%v", this.VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken{`,
		`VesCloudLinkAwsByocBgpAuthToken:` + fmt.Sprintf("%v", this.VesCloudLinkAwsByocBgpAuthToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesCertificatePrivateKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesCertificatePrivateKey{`,
		`VesCertificatePrivateKey:` + fmt.Sprintf("%v", this.VesCertificatePrivateKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword{`,
		`VesIoNfvServiceBigIqLicBmAdminPassword:` + fmt.Sprintf("%v", this.VesIoNfvServiceBigIqLicBmAdminPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesIoCminstanceAdminPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesIoCminstanceAdminPassword{`,
		`VesIoCminstanceAdminPassword:` + fmt.Sprintf("%v", this.VesIoCminstanceAdminPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BFSecretChoice_VesIoCminstanceApiToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BFSecretChoice_VesIoCminstanceApiToken{`,
		`VesIoCminstanceApiToken:` + fmt.Sprintf("%v", this.VesIoCminstanceApiToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReEncryptSecretItemType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReEncryptSecretItemType{`,
		`FieldPath:` + fmt.Sprintf("%v", this.FieldPath) + `,`,
		`PolicyName:` + fmt.Sprintf("%v", this.PolicyName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReEncryptSecretsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ReEncryptSecretItemType{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ReEncryptSecretItemType", "ReEncryptSecretItemType", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ReEncryptSecretsType{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`P0PolName:` + fmt.Sprintf("%v", this.P0PolName) + `,`,
		`ServiceSelector:` + fmt.Sprintf("%v", this.ServiceSelector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Alert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Alert{`,
		`Alert:` + fmt.Sprintf("%v", this.Alert) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Config{`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Data{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Infraprotect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Infraprotect{`,
		`Infraprotect:` + fmt.Sprintf("%v", this.Infraprotect) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Kms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Kms{`,
		`Kms:` + fmt.Sprintf("%v", this.Kms) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Ml) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Ml{`,
		`Ml:` + fmt.Sprintf("%v", this.Ml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Operate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Operate{`,
		`Operate:` + fmt.Sprintf("%v", this.Operate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Register) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Register{`,
		`Register:` + fmt.Sprintf("%v", this.Register) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_SecretManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_SecretManagement{`,
		`SecretManagement:` + fmt.Sprintf("%v", this.SecretManagement) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Terraform) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Terraform{`,
		`Terraform:` + fmt.Sprintf("%v", this.Terraform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Tpm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Tpm{`,
		`Tpm:` + fmt.Sprintf("%v", this.Tpm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Uam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Uam{`,
		`Uam:` + fmt.Sprintf("%v", this.Uam) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Web) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Web{`,
		`Web:` + fmt.Sprintf("%v", this.Web) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_DeviceId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_DeviceId{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Safe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Safe{`,
		`Safe:` + fmt.Sprintf("%v", this.Safe) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_ClientSideDefense{`,
		`ClientSideDefense:` + fmt.Sprintf("%v", this.ClientSideDefense) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_BotDefense{`,
		`BotDefense:` + fmt.Sprintf("%v", this.BotDefense) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_ObjectStore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_ObjectStore{`,
		`ObjectStore:` + fmt.Sprintf("%v", this.ObjectStore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Recognize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Recognize{`,
		`Recognize:` + fmt.Sprintf("%v", this.Recognize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Dns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Dns{`,
		`Dns:` + fmt.Sprintf("%v", this.Dns) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Bfdp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Bfdp{`,
		`Bfdp:` + fmt.Sprintf("%v", this.Bfdp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Scim) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Scim{`,
		`Scim:` + fmt.Sprintf("%v", this.Scim) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Cdn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Cdn{`,
		`Cdn:` + fmt.Sprintf("%v", this.Cdn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_NginxMgmtSuiteConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_NginxMgmtSuiteConnector{`,
		`NginxMgmtSuiteConnector:` + fmt.Sprintf("%v", this.NginxMgmtSuiteConnector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_BotDefenseMobileSdk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_BotDefenseMobileSdk{`,
		`BotDefenseMobileSdk:` + fmt.Sprintf("%v", this.BotDefenseMobileSdk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Nginx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Nginx{`,
		`Nginx:` + fmt.Sprintf("%v", this.Nginx) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Safeap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Safeap{`,
		`Safeap:` + fmt.Sprintf("%v", this.Safeap) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Aip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Aip{`,
		`Aip:` + fmt.Sprintf("%v", this.Aip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_LogReceiver{`,
		`LogReceiver:` + fmt.Sprintf("%v", this.LogReceiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_ObservabilityConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_ObservabilityConnector{`,
		`ObservabilityConnector:` + fmt.Sprintf("%v", this.ObservabilityConnector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Report) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Report{`,
		`Report:` + fmt.Sprintf("%v", this.Report) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Waf{`,
		`Waf:` + fmt.Sprintf("%v", this.Waf) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_ObservabilitySyntheticMonitor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_ObservabilitySyntheticMonitor{`,
		`ObservabilitySyntheticMonitor:` + fmt.Sprintf("%v", this.ObservabilitySyntheticMonitor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_CloudData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_CloudData{`,
		`CloudData:` + fmt.Sprintf("%v", this.CloudData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_MobileIntegrator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_MobileIntegrator{`,
		`MobileIntegrator:` + fmt.Sprintf("%v", this.MobileIntegrator) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_DataIntelligence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_DataIntelligence{`,
		`DataIntelligence:` + fmt.Sprintf("%v", this.DataIntelligence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Brmalerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Brmalerts{`,
		`Brmalerts:` + fmt.Sprintf("%v", this.Brmalerts) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_Marketplace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_Marketplace{`,
		`Marketplace:` + fmt.Sprintf("%v", this.Marketplace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_MarketplaceOnboard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_MarketplaceOnboard{`,
		`MarketplaceOnboard:` + fmt.Sprintf("%v", this.MarketplaceOnboard) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceSlugChoice_NginxOne) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceSlugChoice_NginxOne{`,
		`NginxOne:` + fmt.Sprintf("%v", this.NginxOne) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInfo{`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`Locations:` + fmt.Sprintf("%v", this.Locations) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameToUid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameToUid{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuotaResourceKeyInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuotaResourceKeyInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTargetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTargetInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ForObjectTypes:` + fmt.Sprintf("%v", this.ForObjectTypes) + `,`,
		`IpBased:` + fmt.Sprintf("%v", this.IpBased) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupElementItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupElementItem{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`PathRegex:` + fmt.Sprintf("%v", this.PathRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupElementInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*APIGroupElementItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "APIGroupElementItem", "APIGroupElementItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&APIGroupElementInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonServiceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceInfo{`,
		`Daemon:` + fmt.Sprintf("%v", this.Daemon) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`ApiGroupNamePrefix:` + fmt.Sprintf("%v", this.ApiGroupNamePrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupNameMapItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupNameMapItem{`,
		`RpcName:` + fmt.Sprintf("%v", this.RpcName) + `,`,
		`ApiGroupNames:` + fmt.Sprintf("%v", this.ApiGroupNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupNameMap) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRpcMappings := "[]*APIGroupNameMapItem{"
	for _, f := range this.RpcMappings {
		repeatedStringForRpcMappings += strings.Replace(f.String(), "APIGroupNameMapItem", "APIGroupNameMapItem", 1) + ","
	}
	repeatedStringForRpcMappings += "}"
	s := strings.Join([]string{`&APIGroupNameMap{`,
		`RpcMappings:` + repeatedStringForRpcMappings + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BFSecretInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BFSecretInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BFSecretInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			m.PolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcServices = append(m.GcServices, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonGcServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonGcServices = append(m.NonGcServices, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcJobs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcJobs = append(m.GcJobs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WellKnownTenantPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WellKnownTenantPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BFSecretChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BFSecretChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BFSecretChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesContainerRegistryPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesContainerRegistryPassword{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverSlackUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverSlackUrl{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverPagerdutyRoutingKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey{b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverOpsgenieApiKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverOpsgenieApiKey{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesTerraformJobViewSite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesTerraformJobViewSite{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesK8SClusterArgocdAdminPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesK8SClusterArgocdAdminPassword{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesNfvServiceBigIpPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesNfvServiceBigIpPassword{b}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesCdnLoadbalancerCertificate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesCdnLoadbalancerCertificate{b}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesGlobalLogReceiverSecret", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesGlobalLogReceiverSecret{b}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAzureExpressRouteAuthorizationKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAzureExpressRouteAuthorizationKey{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesNfvServicePanFwPanaromaKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesNfvServicePanFwPanaromaKey{b}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesNfvServicePanFwSshPvtKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesNfvServicePanFwSshPvtKey{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesNfvServicePanFwUserPasswd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesNfvServicePanFwUserPasswd{b}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesBigipApmServiceBigIpPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesBigipApmServiceBigIpPassword{b}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesIoNfvServiceBigIpBmAdminPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword{b}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverWebhookUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverWebhookUrl{b}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword{b}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken{b}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesCloudLinkAwsByocBgpAuthToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken{b}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesCertificatePrivateKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesCertificatePrivateKey{b}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesIoNfvServiceBigIqLicBmAdminPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword{b}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesIoCminstanceAdminPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesIoCminstanceAdminPassword{b}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesIoCminstanceApiToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &BFSecretChoice_VesIoCminstanceApiToken{b}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReEncryptSecretItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReEncryptSecretItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReEncryptSecretItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReEncryptSecretsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReEncryptSecretsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReEncryptSecretsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ReEncryptSecretItemType{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSlugInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSlugInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSlugInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P0PolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P0PolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSlugChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSlugChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSlugChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Alert{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Config{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Data{b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infraprotect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Infraprotect{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Kms{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ml", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Ml{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Operate{b}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Register{b}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretManagement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_SecretManagement{b}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terraform", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Terraform{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tpm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Tpm{b}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Uam{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Web{b}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_DeviceId{b}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Safe{b}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_ClientSideDefense{b}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_BotDefense{b}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectStore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_ObjectStore{b}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recognize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Recognize{b}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Dns{b}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bfdp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Bfdp{b}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scim", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Scim{b}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Cdn{b}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxMgmtSuiteConnector", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_NginxMgmtSuiteConnector{b}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseMobileSdk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_BotDefenseMobileSdk{b}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nginx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Nginx{b}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safeap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Safeap{b}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Aip{b}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_LogReceiver{b}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservabilityConnector", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_ObservabilityConnector{b}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Report{b}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Waf{b}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservabilitySyntheticMonitor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_ObservabilitySyntheticMonitor{b}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_CloudData{b}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileIntegrator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_MobileIntegrator{b}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIntelligence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_DataIntelligence{b}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brmalerts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Brmalerts{b}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketplace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_Marketplace{b}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceOnboard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_MarketplaceOnboard{b}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &ServiceSlugChoice_NginxOne{b}
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameToUid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameToUid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameToUid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotaResourceKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotaResourceKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotaResourceKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTargetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTargetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTargetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForObjectTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForObjectTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpBased", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpBased = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupElementItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupElementItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupElementItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathRegex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupElementInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupElementInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupElementInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &APIGroupElementItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddonServiceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonServiceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonServiceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daemon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Daemon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupNamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroupNamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupNameMapItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupNameMapItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupNameMapItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroupNames = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupNameMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupNameMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupNameMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOptions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpcMappings = append(m.RpcMappings, &APIGroupNameMapItem{})
			if err := m.RpcMappings[len(m.RpcMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOptions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOptions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOptions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOptions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOptions = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package vesenv

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIGroupElementInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIGroupElementInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIGroupElementInfo) DeepCopy() *APIGroupElementInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIGroupElementInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIGroupElementInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIGroupElementInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIGroupElementInfoValidator().Validate(ctx, m, opts...)
}

type ValidateAPIGroupElementInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIGroupElementInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIGroupElementInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIGroupElementInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIGroupElementInfoValidator = func() *ValidateAPIGroupElementInfo {
	v := &ValidateAPIGroupElementInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIGroupElementInfoValidator() db.Validator {
	return DefaultAPIGroupElementInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *APIGroupElementItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIGroupElementItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIGroupElementItem) DeepCopy() *APIGroupElementItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIGroupElementItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIGroupElementItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIGroupElementItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIGroupElementItemValidator().Validate(ctx, m, opts...)
}

type ValidateAPIGroupElementItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIGroupElementItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIGroupElementItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIGroupElementItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path_regex"]; exists {

		vOpts := append(opts, db.WithValidateField("path_regex"))
		if err := fv(ctx, m.GetPathRegex(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIGroupElementItemValidator = func() *ValidateAPIGroupElementItem {
	v := &ValidateAPIGroupElementItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIGroupElementItemValidator() db.Validator {
	return DefaultAPIGroupElementItemValidator
}

// augmented methods on protoc/std generated struct

func (m *APIGroupNameMap) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIGroupNameMap) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIGroupNameMap) DeepCopy() *APIGroupNameMap {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIGroupNameMap{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIGroupNameMap) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIGroupNameMap) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIGroupNameMapValidator().Validate(ctx, m, opts...)
}

type ValidateAPIGroupNameMap struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIGroupNameMap) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIGroupNameMap)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIGroupNameMap got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rpc_mappings"]; exists {

		vOpts := append(opts, db.WithValidateField("rpc_mappings"))
		for idx, item := range m.GetRpcMappings() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIGroupNameMapValidator = func() *ValidateAPIGroupNameMap {
	v := &ValidateAPIGroupNameMap{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIGroupNameMapValidator() db.Validator {
	return DefaultAPIGroupNameMapValidator
}

// augmented methods on protoc/std generated struct

func (m *APIGroupNameMapItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIGroupNameMapItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIGroupNameMapItem) DeepCopy() *APIGroupNameMapItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIGroupNameMapItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIGroupNameMapItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIGroupNameMapItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIGroupNameMapItemValidator().Validate(ctx, m, opts...)
}

type ValidateAPIGroupNameMapItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIGroupNameMapItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIGroupNameMapItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIGroupNameMapItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_group_names"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_names"))
		if err := fv(ctx, m.GetApiGroupNames(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rpc_name"]; exists {

		vOpts := append(opts, db.WithValidateField("rpc_name"))
		if err := fv(ctx, m.GetRpcName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIGroupNameMapItemValidator = func() *ValidateAPIGroupNameMapItem {
	v := &ValidateAPIGroupNameMapItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIGroupNameMapItemValidator() db.Validator {
	return DefaultAPIGroupNameMapItemValidator
}

// augmented methods on protoc/std generated struct

func (m *AddonServiceInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AddonServiceInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AddonServiceInfo) DeepCopy() *AddonServiceInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AddonServiceInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AddonServiceInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AddonServiceInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AddonServiceInfoValidator().Validate(ctx, m, opts...)
}

type ValidateAddonServiceInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAddonServiceInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AddonServiceInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AddonServiceInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_group_name_prefix"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_name_prefix"))
		if err := fv(ctx, m.GetApiGroupNamePrefix(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["daemon"]; exists {

		vOpts := append(opts, db.WithValidateField("daemon"))
		if err := fv(ctx, m.GetDaemon(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["display_name"]; exists {

		vOpts := append(opts, db.WithValidateField("display_name"))
		if err := fv(ctx, m.GetDisplayName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAddonServiceInfoValidator = func() *ValidateAddonServiceInfo {
	v := &ValidateAddonServiceInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AddonServiceInfoValidator() db.Validator {
	return DefaultAddonServiceInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *BFSecretChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BFSecretChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BFSecretChoice) DeepCopy() *BFSecretChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BFSecretChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BFSecretChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BFSecretChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BFSecretChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateBFSecretChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBFSecretChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BFSecretChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BFSecretChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetChoice().(type) {
	case *BFSecretChoice_VesContainerRegistryPassword:
		if fv, exists := v.FldValidators["choice.ves_container_registry_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesContainerRegistryPassword).VesContainerRegistryPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_container_registry_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAlertReceiverSlackUrl:
		if fv, exists := v.FldValidators["choice.ves_alert_receiver_slack_url"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAlertReceiverSlackUrl).VesAlertReceiverSlackUrl
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_alert_receiver_slack_url"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey:
		if fv, exists := v.FldValidators["choice.ves_alert_receiver_pagerduty_routing_key"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAlertReceiverPagerdutyRoutingKey).VesAlertReceiverPagerdutyRoutingKey
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_alert_receiver_pagerduty_routing_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAlertReceiverOpsgenieApiKey:
		if fv, exists := v.FldValidators["choice.ves_alert_receiver_opsgenie_api_key"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAlertReceiverOpsgenieApiKey).VesAlertReceiverOpsgenieApiKey
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_alert_receiver_opsgenie_api_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesTerraformJobViewSite:
		if fv, exists := v.FldValidators["choice.ves_terraform_job_view_site"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesTerraformJobViewSite).VesTerraformJobViewSite
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_terraform_job_view_site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesK8SClusterArgocdAdminPassword:
		if fv, exists := v.FldValidators["choice.ves_k8s_cluster_argocd_admin_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesK8SClusterArgocdAdminPassword).VesK8SClusterArgocdAdminPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_k8s_cluster_argocd_admin_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesNfvServiceBigIpPassword:
		if fv, exists := v.FldValidators["choice.ves_nfv_service_big_ip_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesNfvServiceBigIpPassword).VesNfvServiceBigIpPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_nfv_service_big_ip_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesCdnLoadbalancerCertificate:
		if fv, exists := v.FldValidators["choice.ves_cdn_loadbalancer_certificate"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesCdnLoadbalancerCertificate).VesCdnLoadbalancerCertificate
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_cdn_loadbalancer_certificate"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesGlobalLogReceiverSecret:
		if fv, exists := v.FldValidators["choice.ves_global_log_receiver_secret"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesGlobalLogReceiverSecret).VesGlobalLogReceiverSecret
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_global_log_receiver_secret"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAzureExpressRouteAuthorizationKey:
		if fv, exists := v.FldValidators["choice.ves_azure_express_route_authorization_key"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAzureExpressRouteAuthorizationKey).VesAzureExpressRouteAuthorizationKey
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_azure_express_route_authorization_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesNfvServicePanFwPanaromaKey:
		if fv, exists := v.FldValidators["choice.ves_nfv_service_pan_fw_panaroma_key"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesNfvServicePanFwPanaromaKey).VesNfvServicePanFwPanaromaKey
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_nfv_service_pan_fw_panaroma_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesNfvServicePanFwSshPvtKey:
		if fv, exists := v.FldValidators["choice.ves_nfv_service_pan_fw_ssh_pvt_key"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesNfvServicePanFwSshPvtKey).VesNfvServicePanFwSshPvtKey
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_nfv_service_pan_fw_ssh_pvt_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesNfvServicePanFwUserPasswd:
		if fv, exists := v.FldValidators["choice.ves_nfv_service_pan_fw_user_passwd"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesNfvServicePanFwUserPasswd).VesNfvServicePanFwUserPasswd
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_nfv_service_pan_fw_user_passwd"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesBigipApmServiceBigIpPassword:
		if fv, exists := v.FldValidators["choice.ves_bigip_apm_service_big_ip_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesBigipApmServiceBigIpPassword).VesBigipApmServiceBigIpPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_bigip_apm_service_big_ip_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword:
		if fv, exists := v.FldValidators["choice.ves_io_nfv_service_big_ip_bm_admin_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesIoNfvServiceBigIpBmAdminPassword).VesIoNfvServiceBigIpBmAdminPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_io_nfv_service_big_ip_bm_admin_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAlertReceiverWebhookUrl:
		if fv, exists := v.FldValidators["choice.ves_alert_receiver_webhook_url"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAlertReceiverWebhookUrl).VesAlertReceiverWebhookUrl
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_alert_receiver_webhook_url"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword:
		if fv, exists := v.FldValidators["choice.ves_alert_receiver_webhook_http_config_auth_choice_basic_auth_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword).VesAlertReceiverWebhookHttpConfigAuthChoiceBasicAuthPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_alert_receiver_webhook_http_config_auth_choice_basic_auth_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken:
		if fv, exists := v.FldValidators["choice.ves_alert_receiver_webhook_http_config_auth_choice_auth_token_token"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken).VesAlertReceiverWebhookHttpConfigAuthChoiceAuthTokenToken
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_alert_receiver_webhook_http_config_auth_choice_auth_token_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken:
		if fv, exists := v.FldValidators["choice.ves_cloud_link_aws_byoc_bgp_auth_token"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesCloudLinkAwsByocBgpAuthToken).VesCloudLinkAwsByocBgpAuthToken
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_cloud_link_aws_byoc_bgp_auth_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesCertificatePrivateKey:
		if fv, exists := v.FldValidators["choice.ves_certificate_private_key"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesCertificatePrivateKey).VesCertificatePrivateKey
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_certificate_private_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword:
		if fv, exists := v.FldValidators["choice.ves_io_nfv_service_big_iq_lic_bm_admin_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesIoNfvServiceBigIqLicBmAdminPassword).VesIoNfvServiceBigIqLicBmAdminPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_io_nfv_service_big_iq_lic_bm_admin_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesIoCminstanceAdminPassword:
		if fv, exists := v.FldValidators["choice.ves_io_cminstance_admin_password"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesIoCminstanceAdminPassword).VesIoCminstanceAdminPassword
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_io_cminstance_admin_password"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BFSecretChoice_VesIoCminstanceApiToken:
		if fv, exists := v.FldValidators["choice.ves_io_cminstance_api_token"]; exists {
			val := m.GetChoice().(*BFSecretChoice_VesIoCminstanceApiToken).VesIoCminstanceApiToken
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_io_cminstance_api_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBFSecretChoiceValidator = func() *ValidateBFSecretChoice {
	v := &ValidateBFSecretChoice{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func BFSecretChoiceValidator() db.Validator {
	return DefaultBFSecretChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *BFSecretInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BFSecretInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BFSecretInfo) DeepCopy() *BFSecretInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BFSecretInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BFSecretInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BFSecretInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BFSecretInfoValidator().Validate(ctx, m, opts...)
}

type ValidateBFSecretInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBFSecretInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BFSecretInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BFSecretInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["gc_jobs"]; exists {

		vOpts := append(opts, db.WithValidateField("gc_jobs"))
		for idx, item := range m.GetGcJobs() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gc_services"]; exists {

		vOpts := append(opts, db.WithValidateField("gc_services"))
		for idx, item := range m.GetGcServices() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["non_gc_services"]; exists {

		vOpts := append(opts, db.WithValidateField("non_gc_services"))
		for idx, item := range m.GetNonGcServices() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["policy_id"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_id"))
		if err := fv(ctx, m.GetPolicyId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_name"))
		if err := fv(ctx, m.GetPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_uid"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_uid"))
		if err := fv(ctx, m.GetPolicyUid(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["well_known_tenant_prefix"]; exists {

		vOpts := append(opts, db.WithValidateField("well_known_tenant_prefix"))
		if err := fv(ctx, m.GetWellKnownTenantPrefix(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBFSecretInfoValidator = func() *ValidateBFSecretInfo {
	v := &ValidateBFSecretInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func BFSecretInfoValidator() db.Validator {
	return DefaultBFSecretInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *NameToUid) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NameToUid) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NameToUid) DeepCopy() *NameToUid {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NameToUid{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NameToUid) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NameToUid) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NameToUidValidator().Validate(ctx, m, opts...)
}

type ValidateNameToUid struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNameToUid) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NameToUid)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NameToUid got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uid"]; exists {

		vOpts := append(opts, db.WithValidateField("uid"))
		if err := fv(ctx, m.GetUid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNameToUidValidator = func() *ValidateNameToUid {
	v := &ValidateNameToUid{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NameToUidValidator() db.Validator {
	return DefaultNameToUidValidator
}

// augmented methods on protoc/std generated struct

func (m *QuotaResourceKeyInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *QuotaResourceKeyInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *QuotaResourceKeyInfo) DeepCopy() *QuotaResourceKeyInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &QuotaResourceKeyInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *QuotaResourceKeyInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *QuotaResourceKeyInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return QuotaResourceKeyInfoValidator().Validate(ctx, m, opts...)
}

type ValidateQuotaResourceKeyInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateQuotaResourceKeyInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*QuotaResourceKeyInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *QuotaResourceKeyInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["daemon"]; exists {

		vOpts := append(opts, db.WithValidateField("daemon"))
		if err := fv(ctx, m.GetDaemon(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultQuotaResourceKeyInfoValidator = func() *ValidateQuotaResourceKeyInfo {
	v := &ValidateQuotaResourceKeyInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func QuotaResourceKeyInfoValidator() db.Validator {
	return DefaultQuotaResourceKeyInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *ReEncryptSecretItemType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReEncryptSecretItemType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReEncryptSecretItemType) DeepCopy() *ReEncryptSecretItemType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReEncryptSecretItemType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReEncryptSecretItemType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReEncryptSecretItemType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReEncryptSecretItemTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReEncryptSecretItemType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReEncryptSecretItemType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReEncryptSecretItemType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReEncryptSecretItemType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field_path"]; exists {

		vOpts := append(opts, db.WithValidateField("field_path"))
		if err := fv(ctx, m.GetFieldPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_name"))
		if err := fv(ctx, m.GetPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReEncryptSecretItemTypeValidator = func() *ValidateReEncryptSecretItemType {
	v := &ValidateReEncryptSecretItemType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ReEncryptSecretItemTypeValidator() db.Validator {
	return DefaultReEncryptSecretItemTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReEncryptSecretsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReEncryptSecretsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReEncryptSecretsType) DeepCopy() *ReEncryptSecretsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReEncryptSecretsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReEncryptSecretsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReEncryptSecretsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReEncryptSecretsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReEncryptSecretsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReEncryptSecretsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReEncryptSecretsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReEncryptSecretsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReEncryptSecretsTypeValidator = func() *ValidateReEncryptSecretsType {
	v := &ValidateReEncryptSecretsType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ReEncryptSecretsTypeValidator() db.Validator {
	return DefaultReEncryptSecretsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTargetInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTargetInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTargetInfo) DeepCopy() *RouteTargetInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTargetInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTargetInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTargetInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTargetInfoValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTargetInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTargetInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTargetInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTargetInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["for_object_types"]; exists {

		vOpts := append(opts, db.WithValidateField("for_object_types"))
		if err := fv(ctx, m.GetForObjectTypes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_based"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_based"))
		if err := fv(ctx, m.GetIpBased(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTargetInfoValidator = func() *ValidateRouteTargetInfo {
	v := &ValidateRouteTargetInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RouteTargetInfoValidator() db.Validator {
	return DefaultRouteTargetInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *ServiceInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServiceInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServiceInfo) DeepCopy() *ServiceInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServiceInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServiceInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServiceInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServiceInfoValidator().Validate(ctx, m, opts...)
}

type ValidateServiceInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServiceInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServiceInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServiceInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["daemon"]; exists {

		vOpts := append(opts, db.WithValidateField("daemon"))
		if err := fv(ctx, m.GetDaemon(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["locations"]; exists {

		vOpts := append(opts, db.WithValidateField("locations"))
		for idx, item := range m.GetLocations() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServiceInfoValidator = func() *ValidateServiceInfo {
	v := &ValidateServiceInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ServiceInfoValidator() db.Validator {
	return DefaultServiceInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *ServiceSlugChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServiceSlugChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServiceSlugChoice) DeepCopy() *ServiceSlugChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServiceSlugChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServiceSlugChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServiceSlugChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServiceSlugChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateServiceSlugChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServiceSlugChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServiceSlugChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServiceSlugChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetChoice().(type) {
	case *ServiceSlugChoice_Alert:
		if fv, exists := v.FldValidators["choice.alert"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Alert).Alert
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("alert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Config:
		if fv, exists := v.FldValidators["choice.config"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Config).Config
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Data:
		if fv, exists := v.FldValidators["choice.data"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Data).Data
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("data"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Infraprotect:
		if fv, exists := v.FldValidators["choice.infraprotect"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Infraprotect).Infraprotect
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("infraprotect"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Kms:
		if fv, exists := v.FldValidators["choice.kms"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Kms).Kms
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("kms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Ml:
		if fv, exists := v.FldValidators["choice.ml"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Ml).Ml
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ml"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Operate:
		if fv, exists := v.FldValidators["choice.operate"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Operate).Operate
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("operate"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Register:
		if fv, exists := v.FldValidators["choice.register"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Register).Register
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("register"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_SecretManagement:
		if fv, exists := v.FldValidators["choice.secret_management"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_SecretManagement).SecretManagement
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("secret_management"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Terraform:
		if fv, exists := v.FldValidators["choice.terraform"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Terraform).Terraform
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("terraform"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Tpm:
		if fv, exists := v.FldValidators["choice.tpm"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Tpm).Tpm
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("tpm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Uam:
		if fv, exists := v.FldValidators["choice.uam"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Uam).Uam
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("uam"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Web:
		if fv, exists := v.FldValidators["choice.web"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Web).Web
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("web"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_DeviceId:
		if fv, exists := v.FldValidators["choice.device_id"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_DeviceId).DeviceId
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("device_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Safe:
		if fv, exists := v.FldValidators["choice.safe"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Safe).Safe
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("safe"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_ClientSideDefense:
		if fv, exists := v.FldValidators["choice.client_side_defense"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_BotDefense:
		if fv, exists := v.FldValidators["choice.bot_defense"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_ObjectStore:
		if fv, exists := v.FldValidators["choice.object_store"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_ObjectStore).ObjectStore
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("object_store"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Recognize:
		if fv, exists := v.FldValidators["choice.recognize"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Recognize).Recognize
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("recognize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Dns:
		if fv, exists := v.FldValidators["choice.dns"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Dns).Dns
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("dns"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Bfdp:
		if fv, exists := v.FldValidators["choice.bfdp"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Bfdp).Bfdp
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("bfdp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Scim:
		if fv, exists := v.FldValidators["choice.scim"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Scim).Scim
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("scim"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Cdn:
		if fv, exists := v.FldValidators["choice.cdn"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Cdn).Cdn
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("cdn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_NginxMgmtSuiteConnector:
		if fv, exists := v.FldValidators["choice.nginx_mgmt_suite_connector"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_NginxMgmtSuiteConnector).NginxMgmtSuiteConnector
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("nginx_mgmt_suite_connector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_BotDefenseMobileSdk:
		if fv, exists := v.FldValidators["choice.bot_defense_mobile_sdk"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_BotDefenseMobileSdk).BotDefenseMobileSdk
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("bot_defense_mobile_sdk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Nginx:
		if fv, exists := v.FldValidators["choice.nginx"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Nginx).Nginx
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("nginx"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Safeap:
		if fv, exists := v.FldValidators["choice.safeap"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Safeap).Safeap
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("safeap"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Aip:
		if fv, exists := v.FldValidators["choice.aip"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Aip).Aip
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("aip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_LogReceiver:
		if fv, exists := v.FldValidators["choice.log_receiver"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_ObservabilityConnector:
		if fv, exists := v.FldValidators["choice.observability_connector"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_ObservabilityConnector).ObservabilityConnector
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("observability_connector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Report:
		if fv, exists := v.FldValidators["choice.report"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Report).Report
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("report"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Waf:
		if fv, exists := v.FldValidators["choice.waf"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Waf).Waf
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_ObservabilitySyntheticMonitor:
		if fv, exists := v.FldValidators["choice.observability_synthetic_monitor"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_ObservabilitySyntheticMonitor).ObservabilitySyntheticMonitor
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("observability_synthetic_monitor"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_CloudData:
		if fv, exists := v.FldValidators["choice.cloud_data"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_CloudData).CloudData
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("cloud_data"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_MobileIntegrator:
		if fv, exists := v.FldValidators["choice.mobile_integrator"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_MobileIntegrator).MobileIntegrator
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("mobile_integrator"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_DataIntelligence:
		if fv, exists := v.FldValidators["choice.data_intelligence"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_DataIntelligence).DataIntelligence
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("data_intelligence"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Brmalerts:
		if fv, exists := v.FldValidators["choice.brmalerts"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Brmalerts).Brmalerts
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("brmalerts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_Marketplace:
		if fv, exists := v.FldValidators["choice.marketplace"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_Marketplace).Marketplace
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("marketplace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_MarketplaceOnboard:
		if fv, exists := v.FldValidators["choice.marketplace_onboard"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_MarketplaceOnboard).MarketplaceOnboard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("marketplace_onboard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_NginxOne:
		if fv, exists := v.FldValidators["choice.nginx_one"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_NginxOne).NginxOne
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("nginx_one"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceSlugChoice_CvProxy:
		if fv, exists := v.FldValidators["choice.cv_proxy"]; exists {
			val := m.GetChoice().(*ServiceSlugChoice_CvProxy).CvProxy
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("cv_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServiceSlugChoiceValidator = func() *ValidateServiceSlugChoice {
	v := &ValidateServiceSlugChoice{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ServiceSlugChoiceValidator() db.Validator {
	return DefaultServiceSlugChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *ServiceSlugInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServiceSlugInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServiceSlugInfo) DeepCopy() *ServiceSlugInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServiceSlugInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServiceSlugInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServiceSlugInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServiceSlugInfoValidator().Validate(ctx, m, opts...)
}

type ValidateServiceSlugInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServiceSlugInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServiceSlugInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServiceSlugInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["daemon"]; exists {

		vOpts := append(opts, db.WithValidateField("daemon"))
		if err := fv(ctx, m.GetDaemon(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["p0_pol_name"]; exists {

		vOpts := append(opts, db.WithValidateField("p0_pol_name"))
		if err := fv(ctx, m.GetP0PolName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("service_selector"))
		if err := fv(ctx, m.GetServiceSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServiceSlugInfoValidator = func() *ValidateServiceSlugInfo {
	v := &ValidateServiceSlugInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ServiceSlugInfoValidator() db.Validator {
	return DefaultServiceSlugInfoValidator
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package vesenv

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AddonServiceChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AddonServiceChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AddonServiceChoice) DeepCopy() *AddonServiceChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AddonServiceChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AddonServiceChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AddonServiceChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AddonServiceChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateAddonServiceChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAddonServiceChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AddonServiceChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AddonServiceChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetChoice().(type) {
	case *AddonServiceChoice_F5XcBase:
		if fv, exists := v.FldValidators["choice.f5xc_base"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBase).F5XcBase
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_base"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcSupportManagementStandard:
		if fv, exists := v.FldValidators["choice.f5xc_support_management_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcSupportManagementStandard).F5XcSupportManagementStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_support_management_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcConsoleBasic:
		if fv, exists := v.FldValidators["choice.f5xc_console_basic"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcConsoleBasic).F5XcConsoleBasic
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_console_basic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcConsoleStandard:
		if fv, exists := v.FldValidators["choice.f5xc_console_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcConsoleStandard).F5XcConsoleStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_console_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcConsoleAdvanced:
		if fv, exists := v.FldValidators["choice.f5xc_console_advanced"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcConsoleAdvanced).F5XcConsoleAdvanced
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_console_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_VesIoVolterraDefault:
		if fv, exists := v.FldValidators["choice.ves_io_volterra_default"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_VesIoVolterraDefault).VesIoVolterraDefault
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_io_volterra_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcDelegatedAccessStandard:
		if fv, exists := v.FldValidators["choice.f5xc_delegated_access_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcDelegatedAccessStandard).F5XcDelegatedAccessStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_delegated_access_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_ShapeBot:
		if fv, exists := v.FldValidators["choice.shape_bot"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_ShapeBot).ShapeBot
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("shape_bot"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_ShapeRecognize:
		if fv, exists := v.FldValidators["choice.shape_recognize"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_ShapeRecognize).ShapeRecognize
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("shape_recognize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_AidataBfdp:
		if fv, exists := v.FldValidators["choice.aidata_bfdp"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_AidataBfdp).AidataBfdp
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("aidata_bfdp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_NginxMgmtSuite:
		if fv, exists := v.FldValidators["choice.nginx_mgmt_suite"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_NginxMgmtSuite).NginxMgmtSuite
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("nginx_mgmt_suite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_Safeap:
		if fv, exists := v.FldValidators["choice.safeap"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_Safeap).Safeap
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("safeap"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_ClientSideDefense:
		if fv, exists := v.FldValidators["choice.client_side_defense"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBotDefenseAdvanced:
		if fv, exists := v.FldValidators["choice.f5xc_bot_defense_advanced"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBotDefenseAdvanced).F5XcBotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBotDefensePremium:
		if fv, exists := v.FldValidators["choice.f5xc_bot_defense_premium"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBotDefensePremium).F5XcBotDefensePremium
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_bot_defense_premium"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBotDefenseBasic:
		if fv, exists := v.FldValidators["choice.f5xc_bot_defense_basic"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBotDefenseBasic).F5XcBotDefenseBasic
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_bot_defense_basic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBigIpApm:
		if fv, exists := v.FldValidators["choice.f5xc_big_ip_apm"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBigIpApm).F5XcBigIpApm
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_big_ip_apm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcMobileIntegrator:
		if fv, exists := v.FldValidators["choice.f5xc_mobile_integrator"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcMobileIntegrator).F5XcMobileIntegrator
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_mobile_integrator"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcFlowCollection:
		if fv, exists := v.FldValidators["choice.f5xc_flow_collection"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcFlowCollection).F5XcFlowCollection
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_flow_collection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcRoutedDdosBasic:
		if fv, exists := v.FldValidators["choice.f5xc_routed_ddos_basic"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcRoutedDdosBasic).F5XcRoutedDdosBasic
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_routed_ddos_basic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcWaapAdvanced:
		if fv, exists := v.FldValidators["choice.f5xc_waap_advanced"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcWaapAdvanced).F5XcWaapAdvanced
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_waap_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcSecuremeshAdvanced:
		if fv, exists := v.FldValidators["choice.f5xc_securemesh_advanced"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcSecuremeshAdvanced).F5XcSecuremeshAdvanced
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_securemesh_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_NginxOne:
		if fv, exists := v.FldValidators["choice.nginx_one"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_NginxOne).NginxOne
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("nginx_one"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcApplicationTrafficInsightBasic:
		if fv, exists := v.FldValidators["choice.f5xc_application_traffic_insight_basic"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcApplicationTrafficInsightBasic).F5XcApplicationTrafficInsightBasic
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_application_traffic_insight_basic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcSecuremeshStandard:
		if fv, exists := v.FldValidators["choice.f5xc_securemesh_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcSecuremeshStandard).F5XcSecuremeshStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_securemesh_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcWaapStandard:
		if fv, exists := v.FldValidators["choice.f5xc_waap_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcWaapStandard).F5XcWaapStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_waap_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcAppstackStandard:
		if fv, exists := v.FldValidators["choice.f5xc_appstack_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcAppstackStandard).F5XcAppstackStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_appstack_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcSiteManagementStandard:
		if fv, exists := v.FldValidators["choice.f5xc_site_management_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcSiteManagementStandard).F5XcSiteManagementStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_site_management_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcRoutedDdosStandard:
		if fv, exists := v.FldValidators["choice.f5xc_routed_ddos_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcRoutedDdosStandard).F5XcRoutedDdosStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_routed_ddos_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcDnsStandard:
		if fv, exists := v.FldValidators["choice.f5xc_dns_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcDnsStandard).F5XcDnsStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_dns_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcApplicationTrafficInsightStandard:
		if fv, exists := v.FldValidators["choice.f5xc_application_traffic_insight_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcApplicationTrafficInsightStandard).F5XcApplicationTrafficInsightStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_application_traffic_insight_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBotDefenseStandard:
		if fv, exists := v.FldValidators["choice.f5xc_bot_defense_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBotDefenseStandard).F5XcBotDefenseStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_bot_defense_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcWebAppScanningStandard:
		if fv, exists := v.FldValidators["choice.f5xc_web_app_scanning_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcWebAppScanningStandard).F5XcWebAppScanningStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_web_app_scanning_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcAiAssistantStandard:
		if fv, exists := v.FldValidators["choice.f5xc_ai_assistant_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcAiAssistantStandard).F5XcAiAssistantStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_ai_assistant_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcFlowAnomalyDetectionStandard:
		if fv, exists := v.FldValidators["choice.f5xc_flow_anomaly_detection_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcFlowAnomalyDetectionStandard).F5XcFlowAnomalyDetectionStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_flow_anomaly_detection_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcUniversalZtnaStandard:
		if fv, exists := v.FldValidators["choice.f5xc_universal_ztna_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcUniversalZtnaStandard).F5XcUniversalZtnaStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_universal_ztna_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcIpv6Standard:
		if fv, exists := v.FldValidators["choice.f5xc_ipv6_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcIpv6Standard).F5XcIpv6Standard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_ipv6_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBotDefenseAdvancedSelfservice:
		if fv, exists := v.FldValidators["choice.f5xc_bot_defense_advanced_selfservice"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBotDefenseAdvancedSelfservice).F5XcBotDefenseAdvancedSelfservice
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_bot_defense_advanced_selfservice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcScim:
		if fv, exists := v.FldValidators["choice.f5xc_scim"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcScim).F5XcScim
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_scim"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcChildManagementStandard:
		if fv, exists := v.FldValidators["choice.f5xc_child_management_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcChildManagementStandard).F5XcChildManagementStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_child_management_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcSupportOperations:
		if fv, exists := v.FldValidators["choice.f5xc_support_operations"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcSupportOperations).F5XcSupportOperations
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_support_operations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcDataIntelligenceStandard:
		if fv, exists := v.FldValidators["choice.f5xc_data_intelligence_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcDataIntelligenceStandard).F5XcDataIntelligenceStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_data_intelligence_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcClearview:
		if fv, exists := v.FldValidators["choice.f5xc_clearview"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcClearview).F5XcClearview
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_clearview"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcContentDeliveryNetworkStandard:
		if fv, exists := v.FldValidators["choice.f5xc_content_delivery_network_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcContentDeliveryNetworkStandard).F5XcContentDeliveryNetworkStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_content_delivery_network_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcBigipUtilitiesStandard:
		if fv, exists := v.FldValidators["choice.f5xc_bigip_utilities_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcBigipUtilitiesStandard).F5XcBigipUtilitiesStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_bigip_utilities_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcSyntheticMonitoringStandard:
		if fv, exists := v.FldValidators["choice.f5xc_synthetic_monitoring_standard"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcSyntheticMonitoringStandard).F5XcSyntheticMonitoringStandard
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_synthetic_monitoring_standard"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_F5XcNone:
		if fv, exists := v.FldValidators["choice.f5xc_none"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_F5XcNone).F5XcNone
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("f5xc_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAddonServiceChoiceValidator = func() *ValidateAddonServiceChoice {
	v := &ValidateAddonServiceChoice{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AddonServiceChoiceValidator() db.Validator {
	return DefaultAddonServiceChoiceValidator
}

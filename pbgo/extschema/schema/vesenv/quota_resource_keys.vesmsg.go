// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package vesenv

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *QuotaResourceKeyChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *QuotaResourceKeyChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *QuotaResourceKeyChoice) DeepCopy() *QuotaResourceKeyChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &QuotaResourceKeyChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *QuotaResourceKeyChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *QuotaResourceKeyChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return QuotaResourceKeyChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateQuotaResourceKeyChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateQuotaResourceKeyChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*QuotaResourceKeyChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *QuotaResourceKeyChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetChoice().(type) {
	case *QuotaResourceKeyChoice_ApiCredentialService:
		if fv, exists := v.FldValidators["choice.api_credential_service"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ApiCredentialService).ApiCredentialService
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("api_credential_service"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_CpuLimitsPerVk8SPerRegionalEdge:
		if fv, exists := v.FldValidators["choice.cpu_limits_per_vk8s_per_regional_edge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_CpuLimitsPerVk8SPerRegionalEdge).CpuLimitsPerVk8SPerRegionalEdge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("cpu_limits_per_vk8s_per_regional_edge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_CpuRequestsPerVk8SPerRegionalEdge:
		if fv, exists := v.FldValidators["choice.cpu_requests_per_vk8s_per_regional_edge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_CpuRequestsPerVk8SPerRegionalEdge).CpuRequestsPerVk8SPerRegionalEdge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("cpu_requests_per_vk8s_per_regional_edge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_MemoryLimitsPerVk8SPerRegionalEdge:
		if fv, exists := v.FldValidators["choice.memory_limits_per_vk8s_per_regional_edge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_MemoryLimitsPerVk8SPerRegionalEdge).MemoryLimitsPerVk8SPerRegionalEdge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("memory_limits_per_vk8s_per_regional_edge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_MemoryRequestsPerVk8SPerRegionalEdge:
		if fv, exists := v.FldValidators["choice.memory_requests_per_vk8s_per_regional_edge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_MemoryRequestsPerVk8SPerRegionalEdge).MemoryRequestsPerVk8SPerRegionalEdge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("memory_requests_per_vk8s_per_regional_edge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavorSmall:
		if fv, exists := v.FldValidators["choice.node_flavor_small"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavorSmall).NodeFlavorSmall
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_small"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavorMedium:
		if fv, exists := v.FldValidators["choice.node_flavor_medium"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavorMedium).NodeFlavorMedium
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_medium"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavorLarge:
		if fv, exists := v.FldValidators["choice.node_flavor_large"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavorLarge).NodeFlavorLarge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_large"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_StorageRequestsPerVk8SPerRegionalEdge:
		if fv, exists := v.FldValidators["choice.storage_requests_per_vk8s_per_regional_edge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_StorageRequestsPerVk8SPerRegionalEdge).StorageRequestsPerVk8SPerRegionalEdge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("storage_requests_per_vk8s_per_regional_edge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwAwsByol:
		if fv, exists := v.FldValidators["choice.chw_aws_byol"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwAwsByol).ChwAwsByol
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_aws_byol"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwAzureByol:
		if fv, exists := v.FldValidators["choice.chw_azure_byol"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwAzureByol).ChwAzureByol
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_azure_byol"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwGcpByol:
		if fv, exists := v.FldValidators["choice.chw_gcp_byol"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwGcpByol).ChwGcpByol
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_gcp_byol"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwAzureFree:
		if fv, exists := v.FldValidators["choice.chw_azure_free"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwAzureFree).ChwAzureFree
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_azure_free"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwAwsFree:
		if fv, exists := v.FldValidators["choice.chw_aws_free"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwAwsFree).ChwAwsFree
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_aws_free"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwGcpFree:
		if fv, exists := v.FldValidators["choice.chw_gcp_free"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwGcpFree).ChwGcpFree
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_gcp_free"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwGeneric:
		if fv, exists := v.FldValidators["choice.chw_generic"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwGeneric).ChwGeneric
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_generic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwIgw:
		if fv, exists := v.FldValidators["choice.chw_igw"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwIgw).ChwIgw
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_igw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwIsv:
		if fv, exists := v.FldValidators["choice.chw_isv"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwIsv).ChwIsv
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_isv"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwKvm:
		if fv, exists := v.FldValidators["choice.chw_kvm"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwKvm).ChwKvm
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_kvm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwK8S:
		if fv, exists := v.FldValidators["choice.chw_k8s"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwK8S).ChwK8S
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_k8s"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwVmware:
		if fv, exists := v.FldValidators["choice.chw_vmware"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwVmware).ChwVmware
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_vmware"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ChwTiny:
		if fv, exists := v.FldValidators["choice.chw_tiny"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ChwTiny).ChwTiny
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("chw_tiny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_VirtualHostPublic:
		if fv, exists := v.FldValidators["choice.virtual_host_public"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_VirtualHostPublic).VirtualHostPublic
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("virtual_host_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_HealthcheckMinimumInterval:
		if fv, exists := v.FldValidators["choice.healthcheck_minimum_interval"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_HealthcheckMinimumInterval).HealthcheckMinimumInterval
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("healthcheck_minimum_interval"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavorXlarge:
		if fv, exists := v.FldValidators["choice.node_flavor_xlarge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavorXlarge).NodeFlavorXlarge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_xlarge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavor_2Xlarge:
		if fv, exists := v.FldValidators["choice.node_flavor_2xlarge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavor_2Xlarge).NodeFlavor_2Xlarge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_2xlarge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavor_3Xlarge:
		if fv, exists := v.FldValidators["choice.node_flavor_3xlarge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavor_3Xlarge).NodeFlavor_3Xlarge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_3xlarge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavor_4Xlarge:
		if fv, exists := v.FldValidators["choice.node_flavor_4xlarge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavor_4Xlarge).NodeFlavor_4Xlarge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_4xlarge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_NodeFlavor_5Xlarge:
		if fv, exists := v.FldValidators["choice.node_flavor_5xlarge"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_NodeFlavor_5Xlarge).NodeFlavor_5Xlarge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("node_flavor_5xlarge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_DnsZoneRecordSets:
		if fv, exists := v.FldValidators["choice.dns_zone_record_sets"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_DnsZoneRecordSets).DnsZoneRecordSets
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("dns_zone_record_sets"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_HttpLoadbalancerLargeIdleTimeout:
		if fv, exists := v.FldValidators["choice.http_loadbalancer_large_idle_timeout"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_HttpLoadbalancerLargeIdleTimeout).HttpLoadbalancerLargeIdleTimeout
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("http_loadbalancer_large_idle_timeout"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_HttpLoadbalancerOasValidation:
		if fv, exists := v.FldValidators["choice.http_loadbalancer_oas_validation"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_HttpLoadbalancerOasValidation).HttpLoadbalancerOasValidation
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("http_loadbalancer_oas_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_FastAclSourceIps:
		if fv, exists := v.FldValidators["choice.fast_acl_source_ips"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_FastAclSourceIps).FastAclSourceIps
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("fast_acl_source_ips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_LbSipPersistence:
		if fv, exists := v.FldValidators["choice.lb_sip_persistence"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_LbSipPersistence).LbSipPersistence
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("lb_sip_persistence"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_ActiveCustomerSupportTickets:
		if fv, exists := v.FldValidators["choice.active_customer_support_tickets"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_ActiveCustomerSupportTickets).ActiveCustomerSupportTickets
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("active_customer_support_tickets"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_VirtualHostLargeDirectResponseSize:
		if fv, exists := v.FldValidators["choice.virtual_host_large_direct_response_size"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_VirtualHostLargeDirectResponseSize).VirtualHostLargeDirectResponseSize
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("virtual_host_large_direct_response_size"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_UserNamespaceRoles:
		if fv, exists := v.FldValidators["choice.user_namespace_roles"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_UserNamespaceRoles).UserNamespaceRoles
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("user_namespace_roles"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QuotaResourceKeyChoice_CdnLoadbalancerOasValidation:
		if fv, exists := v.FldValidators["choice.cdn_loadbalancer_oas_validation"]; exists {
			val := m.GetChoice().(*QuotaResourceKeyChoice_CdnLoadbalancerOasValidation).CdnLoadbalancerOasValidation
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("cdn_loadbalancer_oas_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultQuotaResourceKeyChoiceValidator = func() *ValidateQuotaResourceKeyChoice {
	v := &ValidateQuotaResourceKeyChoice{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func QuotaResourceKeyChoiceValidator() db.Validator {
	return DefaultQuotaResourceKeyChoiceValidator
}

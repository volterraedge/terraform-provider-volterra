// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_link

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSStatusType) DeepCopy() *AWSStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_link_state"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_link_state"))
		if err := fv(ctx, m.GetCloudLinkState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_status"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_status"))
		for idx, item := range m.GetConnectionStatus() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["deployment_status"]; exists {

		vOpts := append(opts, db.WithValidateField("deployment_status"))
		if err := fv(ctx, m.GetDeploymentStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_description"]; exists {

		vOpts := append(opts, db.WithValidateField("error_description"))
		if err := fv(ctx, m.GetErrorDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["suggested_action"]; exists {

		vOpts := append(opts, db.WithValidateField("suggested_action"))
		if err := fv(ctx, m.GetSuggestedAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSStatusTypeValidator = func() *ValidateAWSStatusType {
	v := &ValidateAWSStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["connection_status"] = DirectConnectConnectionStatusTypeValidator().Validate

	return v
}()

func AWSStatusTypeValidator() db.Validator {
	return DefaultAWSStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureStatusType) DeepCopy() *AzureStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureStatusTypeValidator = func() *ValidateAzureStatusType {
	v := &ValidateAzureStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureStatusTypeValidator() db.Validator {
	return DefaultAzureStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BGPPeerType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BGPPeerType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BGPPeerType) DeepCopy() *BGPPeerType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BGPPeerType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BGPPeerType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BGPPeerType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BGPPeerTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBGPPeerType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBGPPeerType) AddressFamilyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_family")
	}

	return validatorFn, nil
}

func (v *ValidateBGPPeerType) BgpPeerStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_state")
	}

	return validatorFn, nil
}

func (v *ValidateBGPPeerType) BgpStatusValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_status")
	}

	return validatorFn, nil
}

func (v *ValidateBGPPeerType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BGPPeerType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BGPPeerType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address_family"]; exists {

		vOpts := append(opts, db.WithValidateField("address_family"))
		if err := fv(ctx, m.GetAddressFamily(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_id"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_id"))
		if err := fv(ctx, m.GetBgpPeerId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_state"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_state"))
		if err := fv(ctx, m.GetBgpPeerState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_status"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_status"))
		if err := fv(ctx, m.GetBgpStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cloud_provider_address"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_provider_address"))
		if err := fv(ctx, m.GetCloudProviderAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["customer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("customer_address"))
		if err := fv(ctx, m.GetCustomerAddress(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBGPPeerTypeValidator = func() *ValidateBGPPeerType {
	v := &ValidateBGPPeerType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAddressFamily := v.AddressFamilyValidationRuleHandler
	rulesAddressFamily := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ipv4\",\"ipv6\"]",
	}
	vFn, err = vrhAddressFamily(rulesAddressFamily)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BGPPeerType.address_family: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address_family"] = vFn

	vrhBgpPeerState := v.BgpPeerStateValidationRuleHandler
	rulesBgpPeerState := map[string]string{
		"ves.io.schema.rules.string.in": "[\"verifying\",\"pending\",\"available\",\"deleting\",\"deleted\"]",
	}
	vFn, err = vrhBgpPeerState(rulesBgpPeerState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BGPPeerType.bgp_peer_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_state"] = vFn

	vrhBgpStatus := v.BgpStatusValidationRuleHandler
	rulesBgpStatus := map[string]string{
		"ves.io.schema.rules.string.in": "[\"up\",\"down\",\"unknown\"]",
	}
	vFn, err = vrhBgpStatus(rulesBgpStatus)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BGPPeerType.bgp_status: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_status"] = vFn

	return v
}()

func BGPPeerTypeValidator() db.Validator {
	return DefaultBGPPeerTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DirectConnectConnectionStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DirectConnectConnectionStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DirectConnectConnectionStatusType) DeepCopy() *DirectConnectConnectionStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DirectConnectConnectionStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DirectConnectConnectionStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DirectConnectConnectionStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DirectConnectConnectionStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDirectConnectConnectionStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDirectConnectConnectionStatusType) ConnectionStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_state")
	}

	return validatorFn, nil
}

func (v *ValidateDirectConnectConnectionStatusType) HasLogicalRedundancyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for has_logical_redundancy")
	}

	return validatorFn, nil
}

func (v *ValidateDirectConnectConnectionStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DirectConnectConnectionStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DirectConnectConnectionStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_path"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_path"))
		if err := fv(ctx, m.GetAwsPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bandwidth"]; exists {

		vOpts := append(opts, db.WithValidateField("bandwidth"))
		if err := fv(ctx, m.GetBandwidth(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_id"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_id"))
		if err := fv(ctx, m.GetConnectionId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_name"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_name"))
		if err := fv(ctx, m.GetConnectionName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_state"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_state"))
		if err := fv(ctx, m.GetConnectionState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateway_status"]; exists {

		vOpts := append(opts, db.WithValidateField("gateway_status"))
		if err := fv(ctx, m.GetGatewayStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["has_logical_redundancy"]; exists {

		vOpts := append(opts, db.WithValidateField("has_logical_redundancy"))
		if err := fv(ctx, m.GetHasLogicalRedundancy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jumbo_frame_capable"]; exists {

		vOpts := append(opts, db.WithValidateField("jumbo_frame_capable"))
		if err := fv(ctx, m.GetJumboFrameCapable(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["location"]; exists {

		vOpts := append(opts, db.WithValidateField("location"))
		if err := fv(ctx, m.GetLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["owner_account"]; exists {

		vOpts := append(opts, db.WithValidateField("owner_account"))
		if err := fv(ctx, m.GetOwnerAccount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["partner_name"]; exists {

		vOpts := append(opts, db.WithValidateField("partner_name"))
		if err := fv(ctx, m.GetPartnerName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider_name"]; exists {

		vOpts := append(opts, db.WithValidateField("provider_name"))
		if err := fv(ctx, m.GetProviderName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {

		vOpts := append(opts, db.WithValidateField("tags"))
		for key, value := range m.GetTags() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vif_status"]; exists {

		vOpts := append(opts, db.WithValidateField("vif_status"))
		if err := fv(ctx, m.GetVifStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vlan"]; exists {

		vOpts := append(opts, db.WithValidateField("vlan"))
		if err := fv(ctx, m.GetVlan(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDirectConnectConnectionStatusTypeValidator = func() *ValidateDirectConnectConnectionStatusType {
	v := &ValidateDirectConnectConnectionStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionState := v.ConnectionStateValidationRuleHandler
	rulesConnectionState := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ordering\",\"requested\",\"pending\",\"available\",\"down\",\"deleting\",\"deleted\",\"rejected\",\"unknown\"]",
	}
	vFn, err = vrhConnectionState(rulesConnectionState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DirectConnectConnectionStatusType.connection_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_state"] = vFn

	vrhHasLogicalRedundancy := v.HasLogicalRedundancyValidationRuleHandler
	rulesHasLogicalRedundancy := map[string]string{
		"ves.io.schema.rules.string.in": "[\"unknown\",\"yes\",\"no\"]",
	}
	vFn, err = vrhHasLogicalRedundancy(rulesHasLogicalRedundancy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DirectConnectConnectionStatusType.has_logical_redundancy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["has_logical_redundancy"] = vFn

	v.FldValidators["vif_status"] = VirtualInterfaceStatusTypeValidator().Validate

	v.FldValidators["gateway_status"] = DirectConnectGatewayStatusTypeValidator().Validate

	return v
}()

func DirectConnectConnectionStatusTypeValidator() db.Validator {
	return DefaultDirectConnectConnectionStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DirectConnectGatewayStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DirectConnectGatewayStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DirectConnectGatewayStatusType) DeepCopy() *DirectConnectGatewayStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DirectConnectGatewayStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DirectConnectGatewayStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DirectConnectGatewayStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DirectConnectGatewayStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDirectConnectGatewayStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDirectConnectGatewayStatusType) DirectConnectGatewayStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_gateway_state")
	}

	return validatorFn, nil
}

func (v *ValidateDirectConnectGatewayStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DirectConnectGatewayStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DirectConnectGatewayStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["amazon_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("amazon_asn"))
		if err := fv(ctx, m.GetAmazonAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_path"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_path"))
		if err := fv(ctx, m.GetAwsPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_gateway_id"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_gateway_id"))
		if err := fv(ctx, m.GetDirectConnectGatewayId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_gateway_name"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_gateway_name"))
		if err := fv(ctx, m.GetDirectConnectGatewayName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_gateway_state"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_gateway_state"))
		if err := fv(ctx, m.GetDirectConnectGatewayState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["owner_account"]; exists {

		vOpts := append(opts, db.WithValidateField("owner_account"))
		if err := fv(ctx, m.GetOwnerAccount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["state_change_error"]; exists {

		vOpts := append(opts, db.WithValidateField("state_change_error"))
		if err := fv(ctx, m.GetStateChangeError(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDirectConnectGatewayStatusTypeValidator = func() *ValidateDirectConnectGatewayStatusType {
	v := &ValidateDirectConnectGatewayStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDirectConnectGatewayState := v.DirectConnectGatewayStateValidationRuleHandler
	rulesDirectConnectGatewayState := map[string]string{
		"ves.io.schema.rules.string.in": "[\"pending\",\"available\",\"deleting\",\"deleted\"]",
	}
	vFn, err = vrhDirectConnectGatewayState(rulesDirectConnectGatewayState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DirectConnectGatewayStatusType.direct_connect_gateway_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_gateway_state"] = vFn

	return v
}()

func DirectConnectGatewayStatusTypeValidator() db.Validator {
	return DefaultDirectConnectGatewayStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPCloudInterconnectAttachmentStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPCloudInterconnectAttachmentStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPCloudInterconnectAttachmentStatusType) DeepCopy() *GCPCloudInterconnectAttachmentStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPCloudInterconnectAttachmentStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPCloudInterconnectAttachmentStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPCloudInterconnectAttachmentStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPCloudInterconnectAttachmentStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPCloudInterconnectAttachmentStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPCloudInterconnectAttachmentStatusType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGCPCloudInterconnectAttachmentStatusType) EncryptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for encryption")
	}

	return validatorFn, nil
}

func (v *ValidateGCPCloudInterconnectAttachmentStatusType) VlanValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vlan")
	}

	return validatorFn, nil
}

func (v *ValidateGCPCloudInterconnectAttachmentStatusType) MtuValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtu")
	}

	return validatorFn, nil
}

func (v *ValidateGCPCloudInterconnectAttachmentStatusType) AttachmentStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for attachment_state")
	}

	return validatorFn, nil
}

func (v *ValidateGCPCloudInterconnectAttachmentStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPCloudInterconnectAttachmentStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPCloudInterconnectAttachmentStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["admin_enabled"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_enabled"))
		if err := fv(ctx, m.GetAdminEnabled(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["attachment_state"]; exists {

		vOpts := append(opts, db.WithValidateField("attachment_state"))
		if err := fv(ctx, m.GetAttachmentState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["availability_domain"]; exists {

		vOpts := append(opts, db.WithValidateField("availability_domain"))
		if err := fv(ctx, m.GetAvailabilityDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bandwidth"]; exists {

		vOpts := append(opts, db.WithValidateField("bandwidth"))
		if err := fv(ctx, m.GetBandwidth(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		for idx, item := range m.GetBgpPeers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud_router_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_router_ip"))
		if err := fv(ctx, m.GetCloudRouterIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["customer_router_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("customer_router_ip"))
		if err := fv(ctx, m.GetCustomerRouterIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dataplane_version"]; exists {

		vOpts := append(opts, db.WithValidateField("dataplane_version"))
		if err := fv(ctx, m.GetDataplaneVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["encryption"]; exists {

		vOpts := append(opts, db.WithValidateField("encryption"))
		if err := fv(ctx, m.GetEncryption(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_path"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_path"))
		if err := fv(ctx, m.GetGcpPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interconnect"]; exists {

		vOpts := append(opts, db.WithValidateField("interconnect"))
		if err := fv(ctx, m.GetInterconnect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("mtu"))
		if err := fv(ctx, m.GetMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operational_status"]; exists {

		vOpts := append(opts, db.WithValidateField("operational_status"))
		if err := fv(ctx, m.GetOperationalStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["partner_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("partner_asn"))
		if err := fv(ctx, m.GetPartnerAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["partner_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("partner_metadata"))
		if err := fv(ctx, m.GetPartnerMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["project"]; exists {

		vOpts := append(opts, db.WithValidateField("project"))
		if err := fv(ctx, m.GetProject(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["router"]; exists {

		vOpts := append(opts, db.WithValidateField("router"))
		if err := fv(ctx, m.GetRouter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["stack_type"]; exists {

		vOpts := append(opts, db.WithValidateField("stack_type"))
		if err := fv(ctx, m.GetStackType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vlan"]; exists {

		vOpts := append(opts, db.WithValidateField("vlan"))
		if err := fv(ctx, m.GetVlan(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_network"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_network"))
		if err := fv(ctx, m.GetVpcNetwork(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPCloudInterconnectAttachmentStatusTypeValidator = func() *ValidateGCPCloudInterconnectAttachmentStatusType {
	v := &ValidateGCPCloudInterconnectAttachmentStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"DEDICATED\",\"PARTNER\",\"PARTNER_PROVIDER\"]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPCloudInterconnectAttachmentStatusType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhEncryption := v.EncryptionValidationRuleHandler
	rulesEncryption := map[string]string{
		"ves.io.schema.rules.string.in": "[\"NONE\",\"IPSEC\"]",
	}
	vFn, err = vrhEncryption(rulesEncryption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPCloudInterconnectAttachmentStatusType.encryption: %s", err)
		panic(errMsg)
	}
	v.FldValidators["encryption"] = vFn

	vrhVlan := v.VlanValidationRuleHandler
	rulesVlan := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "4094",
	}
	vFn, err = vrhVlan(rulesVlan)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPCloudInterconnectAttachmentStatusType.vlan: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vlan"] = vFn

	vrhMtu := v.MtuValidationRuleHandler
	rulesMtu := map[string]string{
		"ves.io.schema.rules.uint32.ranges": "1440,1500",
	}
	vFn, err = vrhMtu(rulesMtu)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPCloudInterconnectAttachmentStatusType.mtu: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtu"] = vFn

	vrhAttachmentState := v.AttachmentStateValidationRuleHandler
	rulesAttachmentState := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ACTIVE\",\"UNPROVISIONED\",\"PENDING_PARTNER\",\"PARTNER_REQUEST_RECEIVED\",\"PENDING_CUSTOMER\",\"DEFUNCT\"]",
	}
	vFn, err = vrhAttachmentState(rulesAttachmentState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPCloudInterconnectAttachmentStatusType.attachment_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["attachment_state"] = vFn

	v.FldValidators["bgp_peers"] = BGPPeerTypeValidator().Validate

	return v
}()

func GCPCloudInterconnectAttachmentStatusTypeValidator() db.Validator {
	return DefaultGCPCloudInterconnectAttachmentStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPStatusType) DeepCopy() *GCPStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_link_state"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_link_state"))
		if err := fv(ctx, m.GetCloudLinkState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_status"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_status"))
		for idx, item := range m.GetConnectionStatus() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPStatusTypeValidator = func() *ValidateGCPStatusType {
	v := &ValidateGCPStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["connection_status"] = GCPCloudInterconnectAttachmentStatusTypeValidator().Validate

	return v
}()

func GCPStatusTypeValidator() db.Validator {
	return DefaultGCPStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGcSpec().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SpecType.gc_spec")
	}

	return nil
}

func (m *SpecType) DeepCopy() *SpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *SpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGcSpecDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SpecType) GetGcSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGcSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGcSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGcSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gc_spec." + dri.DRField
	}
	return drInfos, err

}

type ValidateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["gc_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("gc_spec"))
		if err := fv(ctx, m.GetGcSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSpecTypeValidator = func() *ValidateSpecType {
	v := &ValidateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["gc_spec"] = GlobalSpecTypeValidator().Validate

	return v
}()

func SpecTypeValidator() db.Validator {
	return DefaultSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualInterfaceStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualInterfaceStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualInterfaceStatusType) DeepCopy() *VirtualInterfaceStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualInterfaceStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualInterfaceStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualInterfaceStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualInterfaceStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVirtualInterfaceStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualInterfaceStatusType) AddressFamilyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_family")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualInterfaceStatusType) VirtualInterfaceStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for virtual_interface_state")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualInterfaceStatusType) VirtualInterfaceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for virtual_interface_type")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualInterfaceStatusType) DirectConnectAttachmentStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_attachment_state")
	}

	return validatorFn, nil
}

func (v *ValidateVirtualInterfaceStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualInterfaceStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualInterfaceStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address_family"]; exists {

		vOpts := append(opts, db.WithValidateField("address_family"))
		if err := fv(ctx, m.GetAddressFamily(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["amazon_address"]; exists {

		vOpts := append(opts, db.WithValidateField("amazon_address"))
		if err := fv(ctx, m.GetAmazonAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["amazon_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("amazon_asn"))
		if err := fv(ctx, m.GetAmazonAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["attachment_state_change_error"]; exists {

		vOpts := append(opts, db.WithValidateField("attachment_state_change_error"))
		if err := fv(ctx, m.GetAttachmentStateChangeError(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_path"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_path"))
		if err := fv(ctx, m.GetAwsPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_asn"))
		if err := fv(ctx, m.GetBgpAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		for idx, item := range m.GetBgpPeers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["connection_id"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_id"))
		if err := fv(ctx, m.GetConnectionId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_attachment_state"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_attachment_state"))
		if err := fv(ctx, m.GetDirectConnectAttachmentState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_gateway_id"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_gateway_id"))
		if err := fv(ctx, m.GetDirectConnectGatewayId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_gateway_name"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_gateway_name"))
		if err := fv(ctx, m.GetDirectConnectGatewayName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jumbo_frame_capable"]; exists {

		vOpts := append(opts, db.WithValidateField("jumbo_frame_capable"))
		if err := fv(ctx, m.GetJumboFrameCapable(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["location"]; exists {

		vOpts := append(opts, db.WithValidateField("location"))
		if err := fv(ctx, m.GetLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("mtu"))
		if err := fv(ctx, m.GetMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["owner_account"]; exists {

		vOpts := append(opts, db.WithValidateField("owner_account"))
		if err := fv(ctx, m.GetOwnerAccount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {

		vOpts := append(opts, db.WithValidateField("tags"))
		for key, value := range m.GetTags() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["virtual_interface_id"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_interface_id"))
		if err := fv(ctx, m.GetVirtualInterfaceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_interface_name"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_interface_name"))
		if err := fv(ctx, m.GetVirtualInterfaceName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_interface_state"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_interface_state"))
		if err := fv(ctx, m.GetVirtualInterfaceState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_interface_type"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_interface_type"))
		if err := fv(ctx, m.GetVirtualInterfaceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vlan"]; exists {

		vOpts := append(opts, db.WithValidateField("vlan"))
		if err := fv(ctx, m.GetVlan(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualInterfaceStatusTypeValidator = func() *ValidateVirtualInterfaceStatusType {
	v := &ValidateVirtualInterfaceStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAddressFamily := v.AddressFamilyValidationRuleHandler
	rulesAddressFamily := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ipv4\",\"ipv6\"]",
	}
	vFn, err = vrhAddressFamily(rulesAddressFamily)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualInterfaceStatusType.address_family: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address_family"] = vFn

	vrhVirtualInterfaceState := v.VirtualInterfaceStateValidationRuleHandler
	rulesVirtualInterfaceState := map[string]string{
		"ves.io.schema.rules.string.in": "[\"confirming\",\"verifying\",\"pending\",\"available\",\"down\",\"deleting\",\"deleted\",\"rejected\",\"unknown\"]",
	}
	vFn, err = vrhVirtualInterfaceState(rulesVirtualInterfaceState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualInterfaceStatusType.virtual_interface_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_interface_state"] = vFn

	vrhVirtualInterfaceType := v.VirtualInterfaceTypeValidationRuleHandler
	rulesVirtualInterfaceType := map[string]string{
		"ves.io.schema.rules.string.in": "[\"private\",\"public\",\"transit\"]",
	}
	vFn, err = vrhVirtualInterfaceType(rulesVirtualInterfaceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualInterfaceStatusType.virtual_interface_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_interface_type"] = vFn

	vrhDirectConnectAttachmentState := v.DirectConnectAttachmentStateValidationRuleHandler
	rulesDirectConnectAttachmentState := map[string]string{
		"ves.io.schema.rules.string.in": "[\"attaching\",\"attached\",\"detaching\",\"detached\"]",
	}
	vFn, err = vrhDirectConnectAttachmentState(rulesDirectConnectAttachmentState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VirtualInterfaceStatusType.direct_connect_attachment_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_attachment_state"] = vFn

	v.FldValidators["bgp_peers"] = BGPPeerTypeValidator().Validate

	return v
}()

func VirtualInterfaceStatusTypeValidator() db.Validator {
	return DefaultVirtualInterfaceStatusTypeValidator
}

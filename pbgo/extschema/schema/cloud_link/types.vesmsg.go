// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_link

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSBYOCListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSBYOCListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSBYOCListType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetConnections() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting AWSBYOCListType.connections idx %v", idx)
		}
	}

	return nil
}

func (m *AWSBYOCListType) DeepCopy() *AWSBYOCListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSBYOCListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSBYOCListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSBYOCListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSBYOCListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSBYOCListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSBYOCListType) ConnectionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for connections")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AWSBYOCType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AWSBYOCTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for connections")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AWSBYOCType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AWSBYOCType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated connections")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items connections")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSBYOCListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSBYOCListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connections"]; exists {
		vOpts := append(opts, db.WithValidateField("connections"))
		if err := fv(ctx, m.GetConnections(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSBYOCListTypeValidator = func() *ValidateAWSBYOCListType {
	v := &ValidateAWSBYOCListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnections := v.ConnectionsValidationRuleHandler
	rulesConnections := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "10",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhConnections(rulesConnections)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCListType.connections: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connections"] = vFn

	return v
}()

func AWSBYOCListTypeValidator() db.Validator {
	return DefaultAWSBYOCListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSBYOCType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSBYOCType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSBYOCType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAuthKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSBYOCType.auth_key")
	}

	return nil
}

func (m *AWSBYOCType) DeepCopy() *AWSBYOCType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSBYOCType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSBYOCType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSBYOCType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSBYOCTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSBYOCType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSBYOCType) IpTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_type")
	}
	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) ResourceNameChoiceUserAssignedNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_UserAssignedName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_assigned_name")
	}
	return oValidatorFn_UserAssignedName, nil
}

func (v *ValidateAWSBYOCType) ConnectionIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_id")
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) VlanValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vlan")
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) BgpAsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_asn")
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) AuthKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for auth_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) RegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region")
	}

	return validatorFn, nil
}

func (v *ValidateAWSBYOCType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSBYOCType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSBYOCType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_key"]; exists {

		vOpts := append(opts, db.WithValidateField("auth_key"))
		if err := fv(ctx, m.GetAuthKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_asn"))
		if err := fv(ctx, m.GetBgpAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_id"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_id"))
		if err := fv(ctx, m.GetConnectionId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["enable_sitelink"]; exists {

		vOpts := append(opts, db.WithValidateField("enable_sitelink"))
		if err := fv(ctx, m.GetEnableSitelink(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_type"]; exists {
		val := m.GetIpType()
		vOpts := append(opts,
			db.WithValidateField("ip_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpType().(type) {
	case *AWSBYOCType_Ipv4:
		if fv, exists := v.FldValidators["ip_type.ipv4"]; exists {
			val := m.GetIpType().(*AWSBYOCType_Ipv4).Ipv4
			vOpts := append(opts,
				db.WithValidateField("ip_type"),
				db.WithValidateField("ipv4"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSBYOCType_Ipv6:
		if fv, exists := v.FldValidators["ip_type.ipv6"]; exists {
			val := m.GetIpType().(*AWSBYOCType_Ipv6).Ipv6
			vOpts := append(opts,
				db.WithValidateField("ip_type"),
				db.WithValidateField("ipv6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jumbo_mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("jumbo_mtu"))
		if err := fv(ctx, m.GetJumboMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetResourceNameChoice().(type) {
	case *AWSBYOCType_SystemGeneratedName:
		if fv, exists := v.FldValidators["resource_name_choice.system_generated_name"]; exists {
			val := m.GetResourceNameChoice().(*AWSBYOCType_SystemGeneratedName).SystemGeneratedName
			vOpts := append(opts,
				db.WithValidateField("resource_name_choice"),
				db.WithValidateField("system_generated_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSBYOCType_UserAssignedName:
		if fv, exists := v.FldValidators["resource_name_choice.user_assigned_name"]; exists {
			val := m.GetResourceNameChoice().(*AWSBYOCType_UserAssignedName).UserAssignedName
			vOpts := append(opts,
				db.WithValidateField("resource_name_choice"),
				db.WithValidateField("user_assigned_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_interface_type"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_interface_type"))
		if err := fv(ctx, m.GetVirtualInterfaceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vlan"]; exists {

		vOpts := append(opts, db.WithValidateField("vlan"))
		if err := fv(ctx, m.GetVlan(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSBYOCTypeValidator = func() *ValidateAWSBYOCType {
	v := &ValidateAWSBYOCType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpType := v.IpTypeValidationRuleHandler
	rulesIpType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpType(rulesIpType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.ip_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_type"] = vFn

	vrhResourceNameChoiceUserAssignedName := v.ResourceNameChoiceUserAssignedNameValidationRuleHandler
	rulesResourceNameChoiceUserAssignedName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["resource_name_choice.user_assigned_name"], err = vrhResourceNameChoiceUserAssignedName(rulesResourceNameChoiceUserAssignedName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AWSBYOCType.resource_name_choice_user_assigned_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["resource_name_choice.user_assigned_name"] = vFnMap["resource_name_choice.user_assigned_name"]

	vrhConnectionId := v.ConnectionIdValidationRuleHandler
	rulesConnectionId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.pattern":   "^(dxcon-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFn, err = vrhConnectionId(rulesConnectionId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.connection_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_id"] = vFn

	vrhVlan := v.VlanValidationRuleHandler
	rulesVlan := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "4094",
	}
	vFn, err = vrhVlan(rulesVlan)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.vlan: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vlan"] = vFn

	vrhBgpAsn := v.BgpAsnValidationRuleHandler
	rulesBgpAsn := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "2147483647",
	}
	vFn, err = vrhBgpAsn(rulesBgpAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.bgp_asn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_asn"] = vFn

	vrhAuthKey := v.AuthKeyValidationRuleHandler
	rulesAuthKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_bytes": "80",
		"ves.io.schema.rules.string.min_bytes": "6",
	}
	vFn, err = vrhAuthKey(rulesAuthKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.auth_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_key"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "128",
		"ves.io.schema.rules.map.keys.string.min_len":   "1",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "256",
		"ves.io.schema.rules.map.values.string.min_len": "1",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhRegion := v.RegionValidationRuleHandler
	rulesRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"ap-northeast-1\",\"ap-southeast-1\",\"eu-central-1\",\"eu-west-1\",\"eu-west-3\",\"sa-east-1\",\"us-east-1\",\"us-east-2\",\"us-west-2\",\"ca-central-1\",\"af-south-1\",\"ap-east-1\",\"ap-south-1\",\"ap-northeast-2\",\"ap-southeast-2\",\"eu-south-1\",\"eu-north-1\",\"eu-west-2\",\"me-south-1\",\"us-west-1\",\"ap-southeast-3\"]",
	}
	vFn, err = vrhRegion(rulesRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSBYOCType.region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region"] = vFn

	v.FldValidators["ip_type.ipv4"] = Ipv4TypeValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	return v
}()

func AWSBYOCTypeValidator() db.Validator {
	return DefaultAWSBYOCTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSF5XCManagedType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSF5XCManagedType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSF5XCManagedType) DeepCopy() *AWSF5XCManagedType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSF5XCManagedType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSF5XCManagedType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSF5XCManagedType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSF5XCManagedTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSF5XCManagedType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSF5XCManagedType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSF5XCManagedType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSF5XCManagedType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSF5XCManagedTypeValidator = func() *ValidateAWSF5XCManagedType {
	v := &ValidateAWSF5XCManagedType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AWSF5XCManagedTypeValidator() db.Validator {
	return DefaultAWSF5XCManagedTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetByoc().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSType.byoc")
	}

	return nil
}

func (m *AWSType) DeepCopy() *AWSType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSTypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAwsCredDRefInfo()

}

func (m *AWSType) GetAwsCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "aws_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAwsCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSType) GetAwsCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAWSType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSType) CloudLinkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_link_type")
	}
	return validatorFn, nil
}

func (v *ValidateAWSType) DirectConnectGatewayAsnChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for direct_connect_gateway_asn_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSType) DirectConnectGatewayAsnChoiceCustomAsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_CustomAsn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_asn")
	}
	return oValidatorFn_CustomAsn, nil
}

func (v *ValidateAWSType) AwsCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for aws_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_cred"))
		if err := fv(ctx, m.GetAwsCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cloud_link_type"]; exists {
		val := m.GetCloudLinkType()
		vOpts := append(opts,
			db.WithValidateField("cloud_link_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudLinkType().(type) {
	case *AWSType_Byoc:
		if fv, exists := v.FldValidators["cloud_link_type.byoc"]; exists {
			val := m.GetCloudLinkType().(*AWSType_Byoc).Byoc
			vOpts := append(opts,
				db.WithValidateField("cloud_link_type"),
				db.WithValidateField("byoc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSType_F5XcManaged:
		if fv, exists := v.FldValidators["cloud_link_type.f5xc_managed"]; exists {
			val := m.GetCloudLinkType().(*AWSType_F5XcManaged).F5XcManaged
			vOpts := append(opts,
				db.WithValidateField("cloud_link_type"),
				db.WithValidateField("f5xc_managed"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["direct_connect_gateway_asn_choice"]; exists {
		val := m.GetDirectConnectGatewayAsnChoice()
		vOpts := append(opts,
			db.WithValidateField("direct_connect_gateway_asn_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDirectConnectGatewayAsnChoice().(type) {
	case *AWSType_Auto:
		if fv, exists := v.FldValidators["direct_connect_gateway_asn_choice.auto"]; exists {
			val := m.GetDirectConnectGatewayAsnChoice().(*AWSType_Auto).Auto
			vOpts := append(opts,
				db.WithValidateField("direct_connect_gateway_asn_choice"),
				db.WithValidateField("auto"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSType_CustomAsn:
		if fv, exists := v.FldValidators["direct_connect_gateway_asn_choice.custom_asn"]; exists {
			val := m.GetDirectConnectGatewayAsnChoice().(*AWSType_CustomAsn).CustomAsn
			vOpts := append(opts,
				db.WithValidateField("direct_connect_gateway_asn_choice"),
				db.WithValidateField("custom_asn"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSTypeValidator = func() *ValidateAWSType {
	v := &ValidateAWSType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudLinkType := v.CloudLinkTypeValidationRuleHandler
	rulesCloudLinkType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudLinkType(rulesCloudLinkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSType.cloud_link_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_link_type"] = vFn

	vrhDirectConnectGatewayAsnChoice := v.DirectConnectGatewayAsnChoiceValidationRuleHandler
	rulesDirectConnectGatewayAsnChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDirectConnectGatewayAsnChoice(rulesDirectConnectGatewayAsnChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSType.direct_connect_gateway_asn_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["direct_connect_gateway_asn_choice"] = vFn

	vrhDirectConnectGatewayAsnChoiceCustomAsn := v.DirectConnectGatewayAsnChoiceCustomAsnValidationRuleHandler
	rulesDirectConnectGatewayAsnChoiceCustomAsn := map[string]string{
		"ves.io.schema.rules.uint32.ranges": "64512-65534, 4200000000-4294967294",
	}
	vFnMap["direct_connect_gateway_asn_choice.custom_asn"], err = vrhDirectConnectGatewayAsnChoiceCustomAsn(rulesDirectConnectGatewayAsnChoiceCustomAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AWSType.direct_connect_gateway_asn_choice_custom_asn: %s", err)
		panic(errMsg)
	}

	v.FldValidators["direct_connect_gateway_asn_choice.custom_asn"] = vFnMap["direct_connect_gateway_asn_choice.custom_asn"]

	vrhAwsCred := v.AwsCredValidationRuleHandler
	rulesAwsCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsCred(rulesAwsCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSType.aws_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_cred"] = vFn

	v.FldValidators["cloud_link_type.byoc"] = AWSBYOCListTypeValidator().Validate

	return v
}()

func AWSTypeValidator() db.Validator {
	return DefaultAWSTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureType) DeepCopy() *AzureType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureTypeValidator = func() *ValidateAzureType {
	v := &ValidateAzureType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureTypeValidator() db.Validator {
	return DefaultAzureTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAws().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.aws")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudProviderDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCloudProviderDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudProvider() == nil {
		return nil, nil
	}
	switch m.GetCloudProvider().(type) {
	case *CreateSpecType_Aws:
		drInfos, err := m.GetAws().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAws().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_Azure:

		return nil, nil

	case *CreateSpecType_Gcp:
		drInfos, err := m.GetGcp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) CloudProviderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_provider")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) EnableConnectionToReChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_connection_to_re_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_provider"]; exists {
		val := m.GetCloudProvider()
		vOpts := append(opts,
			db.WithValidateField("cloud_provider"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudProvider().(type) {
	case *CreateSpecType_Aws:
		if fv, exists := v.FldValidators["cloud_provider.aws"]; exists {
			val := m.GetCloudProvider().(*CreateSpecType_Aws).Aws
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("aws"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Azure:
		if fv, exists := v.FldValidators["cloud_provider.azure"]; exists {
			val := m.GetCloudProvider().(*CreateSpecType_Azure).Azure
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("azure"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Gcp:
		if fv, exists := v.FldValidators["cloud_provider.gcp"]; exists {
			val := m.GetCloudProvider().(*CreateSpecType_Gcp).Gcp
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("gcp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["enable_connection_to_re_choice"]; exists {
		val := m.GetEnableConnectionToReChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_connection_to_re_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableConnectionToReChoice().(type) {
	case *CreateSpecType_Disabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.disabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*CreateSpecType_Disabled).Disabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Enabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.enabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*CreateSpecType_Enabled).Enabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudProvider := v.CloudProviderValidationRuleHandler
	rulesCloudProvider := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudProvider(rulesCloudProvider)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cloud_provider: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_provider"] = vFn

	vrhEnableConnectionToReChoice := v.EnableConnectionToReChoiceValidationRuleHandler
	rulesEnableConnectionToReChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableConnectionToReChoice(rulesEnableConnectionToReChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.enable_connection_to_re_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_connection_to_re_choice"] = vFn

	v.FldValidators["cloud_provider.aws"] = AWSTypeValidator().Validate
	v.FldValidators["cloud_provider.gcp"] = GCPTypeValidator().Validate

	v.FldValidators["enable_connection_to_re_choice.enabled"] = ves_io_schema_views.CloudLinkADNTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPBYOCListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPBYOCListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPBYOCListType) DeepCopy() *GCPBYOCListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPBYOCListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPBYOCListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPBYOCListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPBYOCListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPBYOCListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPBYOCListType) ConnectionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for connections")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*GCPBYOCType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := GCPBYOCTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for connections")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*GCPBYOCType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*GCPBYOCType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated connections")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items connections")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPBYOCListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPBYOCListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPBYOCListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connections"]; exists {
		vOpts := append(opts, db.WithValidateField("connections"))
		if err := fv(ctx, m.GetConnections(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPBYOCListTypeValidator = func() *ValidateGCPBYOCListType {
	v := &ValidateGCPBYOCListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnections := v.ConnectionsValidationRuleHandler
	rulesConnections := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "10",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhConnections(rulesConnections)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBYOCListType.connections: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connections"] = vFn

	return v
}()

func GCPBYOCListTypeValidator() db.Validator {
	return DefaultGCPBYOCListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPBYOCType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPBYOCType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPBYOCType) DeepCopy() *GCPBYOCType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPBYOCType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPBYOCType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPBYOCType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPBYOCTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPBYOCType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPBYOCType) ProjectChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for project_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGCPBYOCType) ProjectChoiceProjectValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Project, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for project")
	}
	return oValidatorFn_Project, nil
}

func (v *ValidateGCPBYOCType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPBYOCType) RegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region")
	}

	return validatorFn, nil
}

func (v *ValidateGCPBYOCType) InterconnectAttachmentNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interconnect_attachment_name")
	}

	return validatorFn, nil
}

func (v *ValidateGCPBYOCType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPBYOCType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPBYOCType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interconnect_attachment_name"]; exists {

		vOpts := append(opts, db.WithValidateField("interconnect_attachment_name"))
		if err := fv(ctx, m.GetInterconnectAttachmentName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["project_choice"]; exists {
		val := m.GetProjectChoice()
		vOpts := append(opts,
			db.WithValidateField("project_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProjectChoice().(type) {
	case *GCPBYOCType_SameAsCredential:
		if fv, exists := v.FldValidators["project_choice.same_as_credential"]; exists {
			val := m.GetProjectChoice().(*GCPBYOCType_SameAsCredential).SameAsCredential
			vOpts := append(opts,
				db.WithValidateField("project_choice"),
				db.WithValidateField("same_as_credential"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GCPBYOCType_Project:
		if fv, exists := v.FldValidators["project_choice.project"]; exists {
			val := m.GetProjectChoice().(*GCPBYOCType_Project).Project
			vOpts := append(opts,
				db.WithValidateField("project_choice"),
				db.WithValidateField("project"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPBYOCTypeValidator = func() *ValidateGCPBYOCType {
	v := &ValidateGCPBYOCType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProjectChoice := v.ProjectChoiceValidationRuleHandler
	rulesProjectChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProjectChoice(rulesProjectChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBYOCType.project_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["project_choice"] = vFn

	vrhProjectChoiceProject := v.ProjectChoiceProjectValidationRuleHandler
	rulesProjectChoiceProject := map[string]string{
		"ves.io.schema.rules.string.max_len": "30",
		"ves.io.schema.rules.string.min_len": "4",
	}
	vFnMap["project_choice.project"], err = vrhProjectChoiceProject(rulesProjectChoiceProject)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GCPBYOCType.project_choice_project: %s", err)
		panic(errMsg)
	}

	v.FldValidators["project_choice.project"] = vFnMap["project_choice.project"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBYOCType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhRegion := v.RegionValidationRuleHandler
	rulesRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"asia-east1\",\"asia-east2\",\"asia-northeast1\",\"asia-northeast2\",\"asia-northeast3\",\"asia-southeast1\",\"asia-southeast2\",\"europe-central2\",\"europe-north1\",\"europe-west1\",\"europe-west2\",\"europe-west3\",\"europe-west4\",\"europe-west6\",\"europe-west8\",\"europe-west9\",\"europe-west10\",\"europe-west12\",\"europe-southwest1\",\"me-west1\",\"me-central1\",\"me-central2\",\"northamerica-northeast1\",\"northamerica-northeast2\",\"us-central1\",\"us-east1\",\"us-east4\",\"us-east5\",\"us-south1\",\"us-west1\",\"us-west2\",\"us-west3\",\"us-west4\",\"southamerica-east1\",\"southamerica-west1\",\"australia-southeast1\",\"australia-southeast2\",\"asia-south1\",\"asia-south2\"]",
	}
	vFn, err = vrhRegion(rulesRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBYOCType.region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region"] = vFn

	vrhInterconnectAttachmentName := v.InterconnectAttachmentNameValidationRuleHandler
	rulesInterconnectAttachmentName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "63",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhInterconnectAttachmentName(rulesInterconnectAttachmentName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBYOCType.interconnect_attachment_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interconnect_attachment_name"] = vFn

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	return v
}()

func GCPBYOCTypeValidator() db.Validator {
	return DefaultGCPBYOCTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPPartnerMetadata) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPPartnerMetadata) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPPartnerMetadata) DeepCopy() *GCPPartnerMetadata {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPPartnerMetadata{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPPartnerMetadata) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPPartnerMetadata) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPPartnerMetadataValidator().Validate(ctx, m, opts...)
}

type ValidateGCPPartnerMetadata struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPPartnerMetadata) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPPartnerMetadata)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPPartnerMetadata got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interconnect"]; exists {

		vOpts := append(opts, db.WithValidateField("interconnect"))
		if err := fv(ctx, m.GetInterconnect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["portal_url"]; exists {

		vOpts := append(opts, db.WithValidateField("portal_url"))
		if err := fv(ctx, m.GetPortalUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPPartnerMetadataValidator = func() *ValidateGCPPartnerMetadata {
	v := &ValidateGCPPartnerMetadata{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GCPPartnerMetadataValidator() db.Validator {
	return DefaultGCPPartnerMetadataValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPType) DeepCopy() *GCPType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPTypeValidator().Validate(ctx, m, opts...)
}

func (m *GCPType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGcpCredDRefInfo()

}

func (m *GCPType) GetGcpCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetGcpCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "gcp_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetGcpCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPType) GetGcpCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetGcpCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGCPType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPType) CloudLinkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_link_type")
	}
	return validatorFn, nil
}

func (v *ValidateGCPType) GcpCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gcp_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_link_type"]; exists {
		val := m.GetCloudLinkType()
		vOpts := append(opts,
			db.WithValidateField("cloud_link_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudLinkType().(type) {
	case *GCPType_Byoc:
		if fv, exists := v.FldValidators["cloud_link_type.byoc"]; exists {
			val := m.GetCloudLinkType().(*GCPType_Byoc).Byoc
			vOpts := append(opts,
				db.WithValidateField("cloud_link_type"),
				db.WithValidateField("byoc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["gcp_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_cred"))
		if err := fv(ctx, m.GetGcpCred(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPTypeValidator = func() *ValidateGCPType {
	v := &ValidateGCPType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudLinkType := v.CloudLinkTypeValidationRuleHandler
	rulesCloudLinkType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudLinkType(rulesCloudLinkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPType.cloud_link_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_link_type"] = vFn

	vrhGcpCred := v.GcpCredValidationRuleHandler
	rulesGcpCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGcpCred(rulesGcpCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPType.gcp_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_cred"] = vFn

	v.FldValidators["cloud_link_type.byoc"] = GCPBYOCListTypeValidator().Validate

	return v
}()

func GCPTypeValidator() db.Validator {
	return DefaultGCPTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAws().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.aws")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudProviderDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCloudProviderDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudProvider() == nil {
		return nil, nil
	}
	switch m.GetCloudProvider().(type) {
	case *GetSpecType_Aws:
		drInfos, err := m.GetAws().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAws().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_Azure:

		return nil, nil

	case *GetSpecType_Gcp:
		drInfos, err := m.GetGcp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) CloudProviderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_provider")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) EnableConnectionToReChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_connection_to_re_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SitesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewInt32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sites")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_link_state"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_link_state"))
		if err := fv(ctx, m.GetCloudLinkState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cloud_provider"]; exists {
		val := m.GetCloudProvider()
		vOpts := append(opts,
			db.WithValidateField("cloud_provider"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudProvider().(type) {
	case *GetSpecType_Aws:
		if fv, exists := v.FldValidators["cloud_provider.aws"]; exists {
			val := m.GetCloudProvider().(*GetSpecType_Aws).Aws
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("aws"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Azure:
		if fv, exists := v.FldValidators["cloud_provider.azure"]; exists {
			val := m.GetCloudProvider().(*GetSpecType_Azure).Azure
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("azure"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Gcp:
		if fv, exists := v.FldValidators["cloud_provider.gcp"]; exists {
			val := m.GetCloudProvider().(*GetSpecType_Gcp).Gcp
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("gcp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["enable_connection_to_re_choice"]; exists {
		val := m.GetEnableConnectionToReChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_connection_to_re_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableConnectionToReChoice().(type) {
	case *GetSpecType_Disabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.disabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*GetSpecType_Disabled).Disabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Enabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.enabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*GetSpecType_Enabled).Enabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sites"]; exists {

		vOpts := append(opts, db.WithValidateField("sites"))
		if err := fv(ctx, m.GetSites(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudProvider := v.CloudProviderValidationRuleHandler
	rulesCloudProvider := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudProvider(rulesCloudProvider)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cloud_provider: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_provider"] = vFn

	vrhEnableConnectionToReChoice := v.EnableConnectionToReChoiceValidationRuleHandler
	rulesEnableConnectionToReChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableConnectionToReChoice(rulesEnableConnectionToReChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.enable_connection_to_re_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_connection_to_re_choice"] = vFn

	vrhSites := v.SitesValidationRuleHandler
	rulesSites := map[string]string{
		"ves.io.schema.rules.int32.lte": "20",
	}
	vFn, err = vrhSites(rulesSites)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.sites: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sites"] = vFn

	v.FldValidators["cloud_provider.aws"] = AWSTypeValidator().Validate
	v.FldValidators["cloud_provider.gcp"] = GCPTypeValidator().Validate

	v.FldValidators["enable_connection_to_re_choice.enabled"] = ves_io_schema_views.CloudLinkADNTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAws().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.aws")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudProviderDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCloudProviderDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudProvider() == nil {
		return nil, nil
	}
	switch m.GetCloudProvider().(type) {
	case *GlobalSpecType_Aws:
		drInfos, err := m.GetAws().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAws().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_Azure:

		return nil, nil

	case *GlobalSpecType_Gcp:
		drInfos, err := m.GetGcp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) CloudProviderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_provider")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) EnableConnectionToReChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_connection_to_re_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SitesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewInt32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sites")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_link_state"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_link_state"))
		if err := fv(ctx, m.GetCloudLinkState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cloud_provider"]; exists {
		val := m.GetCloudProvider()
		vOpts := append(opts,
			db.WithValidateField("cloud_provider"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudProvider().(type) {
	case *GlobalSpecType_Aws:
		if fv, exists := v.FldValidators["cloud_provider.aws"]; exists {
			val := m.GetCloudProvider().(*GlobalSpecType_Aws).Aws
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("aws"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Azure:
		if fv, exists := v.FldValidators["cloud_provider.azure"]; exists {
			val := m.GetCloudProvider().(*GlobalSpecType_Azure).Azure
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("azure"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Gcp:
		if fv, exists := v.FldValidators["cloud_provider.gcp"]; exists {
			val := m.GetCloudProvider().(*GlobalSpecType_Gcp).Gcp
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("gcp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["enable_connection_to_re_choice"]; exists {
		val := m.GetEnableConnectionToReChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_connection_to_re_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableConnectionToReChoice().(type) {
	case *GlobalSpecType_Disabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.disabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*GlobalSpecType_Disabled).Disabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Enabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.enabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*GlobalSpecType_Enabled).Enabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sites"]; exists {

		vOpts := append(opts, db.WithValidateField("sites"))
		if err := fv(ctx, m.GetSites(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudProvider := v.CloudProviderValidationRuleHandler
	rulesCloudProvider := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudProvider(rulesCloudProvider)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cloud_provider: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_provider"] = vFn

	vrhEnableConnectionToReChoice := v.EnableConnectionToReChoiceValidationRuleHandler
	rulesEnableConnectionToReChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableConnectionToReChoice(rulesEnableConnectionToReChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.enable_connection_to_re_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_connection_to_re_choice"] = vFn

	vrhSites := v.SitesValidationRuleHandler
	rulesSites := map[string]string{
		"ves.io.schema.rules.int32.lte": "20",
	}
	vFn, err = vrhSites(rulesSites)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.sites: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sites"] = vFn

	v.FldValidators["cloud_provider.aws"] = AWSTypeValidator().Validate
	v.FldValidators["cloud_provider.gcp"] = GCPTypeValidator().Validate

	v.FldValidators["enable_connection_to_re_choice.enabled"] = ves_io_schema_views.CloudLinkADNTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Ipv4Type) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Ipv4Type) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Ipv4Type) DeepCopy() *Ipv4Type {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Ipv4Type{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Ipv4Type) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Ipv4Type) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return Ipv4TypeValidator().Validate(ctx, m, opts...)
}

type ValidateIpv4Type struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIpv4Type) RouterPeerAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for router_peer_address")
	}

	return validatorFn, nil
}

func (v *ValidateIpv4Type) AwsRouterPeerAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_router_peer_address")
	}

	return validatorFn, nil
}

func (v *ValidateIpv4Type) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Ipv4Type)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Ipv4Type got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_router_peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_router_peer_address"))
		if err := fv(ctx, m.GetAwsRouterPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["router_peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("router_peer_address"))
		if err := fv(ctx, m.GetRouterPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIpv4TypeValidator = func() *ValidateIpv4Type {
	v := &ValidateIpv4Type{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRouterPeerAddress := v.RouterPeerAddressValidationRuleHandler
	rulesRouterPeerAddress := map[string]string{
		"ves.io.schema.rules.message.required":            "true",
		"ves.io.schema.rules.string.ipv4_prefix":          "true",
		"ves.io.schema.rules.string.max_ip_prefix_length": "32",
		"ves.io.schema.rules.string.min_ip_prefix_length": "1",
	}
	vFn, err = vrhRouterPeerAddress(rulesRouterPeerAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Ipv4Type.router_peer_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["router_peer_address"] = vFn

	vrhAwsRouterPeerAddress := v.AwsRouterPeerAddressValidationRuleHandler
	rulesAwsRouterPeerAddress := map[string]string{
		"ves.io.schema.rules.message.required":            "true",
		"ves.io.schema.rules.string.ipv4_prefix":          "true",
		"ves.io.schema.rules.string.max_ip_prefix_length": "32",
		"ves.io.schema.rules.string.min_ip_prefix_length": "1",
	}
	vFn, err = vrhAwsRouterPeerAddress(rulesAwsRouterPeerAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Ipv4Type.aws_router_peer_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_router_peer_address"] = vFn

	return v
}()

func Ipv4TypeValidator() db.Validator {
	return DefaultIpv4TypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Ipv6Type) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Ipv6Type) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Ipv6Type) DeepCopy() *Ipv6Type {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Ipv6Type{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Ipv6Type) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Ipv6Type) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return Ipv6TypeValidator().Validate(ctx, m, opts...)
}

type ValidateIpv6Type struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIpv6Type) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Ipv6Type)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Ipv6Type got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIpv6TypeValidator = func() *ValidateIpv6Type {
	v := &ValidateIpv6Type{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func Ipv6TypeValidator() db.Validator {
	return DefaultIpv6TypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAws().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.aws")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudProviderDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetCloudProviderDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudProvider() == nil {
		return nil, nil
	}
	switch m.GetCloudProvider().(type) {
	case *ReplaceSpecType_Aws:
		drInfos, err := m.GetAws().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAws().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_Azure:

		return nil, nil

	case *ReplaceSpecType_Gcp:
		drInfos, err := m.GetGcp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) CloudProviderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_provider")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) EnableConnectionToReChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_connection_to_re_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_provider"]; exists {
		val := m.GetCloudProvider()
		vOpts := append(opts,
			db.WithValidateField("cloud_provider"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudProvider().(type) {
	case *ReplaceSpecType_Aws:
		if fv, exists := v.FldValidators["cloud_provider.aws"]; exists {
			val := m.GetCloudProvider().(*ReplaceSpecType_Aws).Aws
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("aws"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Azure:
		if fv, exists := v.FldValidators["cloud_provider.azure"]; exists {
			val := m.GetCloudProvider().(*ReplaceSpecType_Azure).Azure
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("azure"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Gcp:
		if fv, exists := v.FldValidators["cloud_provider.gcp"]; exists {
			val := m.GetCloudProvider().(*ReplaceSpecType_Gcp).Gcp
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("gcp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["enable_connection_to_re_choice"]; exists {
		val := m.GetEnableConnectionToReChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_connection_to_re_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableConnectionToReChoice().(type) {
	case *ReplaceSpecType_Disabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.disabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*ReplaceSpecType_Disabled).Disabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Enabled:
		if fv, exists := v.FldValidators["enable_connection_to_re_choice.enabled"]; exists {
			val := m.GetEnableConnectionToReChoice().(*ReplaceSpecType_Enabled).Enabled
			vOpts := append(opts,
				db.WithValidateField("enable_connection_to_re_choice"),
				db.WithValidateField("enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudProvider := v.CloudProviderValidationRuleHandler
	rulesCloudProvider := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudProvider(rulesCloudProvider)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cloud_provider: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_provider"] = vFn

	vrhEnableConnectionToReChoice := v.EnableConnectionToReChoiceValidationRuleHandler
	rulesEnableConnectionToReChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableConnectionToReChoice(rulesEnableConnectionToReChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.enable_connection_to_re_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_connection_to_re_choice"] = vFn

	v.FldValidators["cloud_provider.aws"] = AWSTypeValidator().Validate
	v.FldValidators["cloud_provider.gcp"] = GCPTypeValidator().Validate

	v.FldValidators["enable_connection_to_re_choice.enabled"] = ves_io_schema_views.CloudLinkADNTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetCloudProviderToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.CloudProvider.(type) {
	case nil:
		o.CloudProvider = nil

	case *CreateSpecType_Aws:
		o.CloudProvider = &GlobalSpecType_Aws{Aws: of.Aws}

	case *CreateSpecType_Azure:
		o.CloudProvider = &GlobalSpecType_Azure{Azure: of.Azure}

	case *CreateSpecType_Gcp:
		o.CloudProvider = &GlobalSpecType_Gcp{Gcp: of.Gcp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetCloudProviderFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.CloudProvider.(type) {
	case nil:
		r.CloudProvider = nil

	case *GlobalSpecType_Aws:
		r.CloudProvider = &CreateSpecType_Aws{Aws: of.Aws}

	case *GlobalSpecType_Azure:
		r.CloudProvider = &CreateSpecType_Azure{Azure: of.Azure}

	case *GlobalSpecType_Gcp:
		r.CloudProvider = &CreateSpecType_Gcp{Gcp: of.Gcp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetEnableConnectionToReChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EnableConnectionToReChoice.(type) {
	case nil:
		o.EnableConnectionToReChoice = nil

	case *CreateSpecType_Disabled:
		o.EnableConnectionToReChoice = &GlobalSpecType_Disabled{Disabled: of.Disabled}

	case *CreateSpecType_Enabled:
		o.EnableConnectionToReChoice = &GlobalSpecType_Enabled{Enabled: of.Enabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetEnableConnectionToReChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EnableConnectionToReChoice.(type) {
	case nil:
		r.EnableConnectionToReChoice = nil

	case *GlobalSpecType_Disabled:
		r.EnableConnectionToReChoice = &CreateSpecType_Disabled{Disabled: of.Disabled}

	case *GlobalSpecType_Enabled:
		r.EnableConnectionToReChoice = &CreateSpecType_Enabled{Enabled: of.Enabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetCloudProviderFromGlobalSpecType(f)
	m.GetEnableConnectionToReChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetCloudProviderToGlobalSpecType(f)
	m1.SetEnableConnectionToReChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetCloudProviderToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.CloudProvider.(type) {
	case nil:
		o.CloudProvider = nil

	case *GetSpecType_Aws:
		o.CloudProvider = &GlobalSpecType_Aws{Aws: of.Aws}

	case *GetSpecType_Azure:
		o.CloudProvider = &GlobalSpecType_Azure{Azure: of.Azure}

	case *GetSpecType_Gcp:
		o.CloudProvider = &GlobalSpecType_Gcp{Gcp: of.Gcp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetCloudProviderFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.CloudProvider.(type) {
	case nil:
		r.CloudProvider = nil

	case *GlobalSpecType_Aws:
		r.CloudProvider = &GetSpecType_Aws{Aws: of.Aws}

	case *GlobalSpecType_Azure:
		r.CloudProvider = &GetSpecType_Azure{Azure: of.Azure}

	case *GlobalSpecType_Gcp:
		r.CloudProvider = &GetSpecType_Gcp{Gcp: of.Gcp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetEnableConnectionToReChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EnableConnectionToReChoice.(type) {
	case nil:
		o.EnableConnectionToReChoice = nil

	case *GetSpecType_Disabled:
		o.EnableConnectionToReChoice = &GlobalSpecType_Disabled{Disabled: of.Disabled}

	case *GetSpecType_Enabled:
		o.EnableConnectionToReChoice = &GlobalSpecType_Enabled{Enabled: of.Enabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetEnableConnectionToReChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EnableConnectionToReChoice.(type) {
	case nil:
		r.EnableConnectionToReChoice = nil

	case *GlobalSpecType_Disabled:
		r.EnableConnectionToReChoice = &GetSpecType_Disabled{Disabled: of.Disabled}

	case *GlobalSpecType_Enabled:
		r.EnableConnectionToReChoice = &GetSpecType_Enabled{Enabled: of.Enabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CloudLinkState = f.GetCloudLinkState()
	m.GetCloudProviderFromGlobalSpecType(f)
	m.GetEnableConnectionToReChoiceFromGlobalSpecType(f)
	m.Sites = f.GetSites()
	m.Status = f.GetStatus()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CloudLinkState = m1.CloudLinkState
	m1.SetCloudProviderToGlobalSpecType(f)
	m1.SetEnableConnectionToReChoiceToGlobalSpecType(f)
	f.Sites = m1.Sites
	f.Status = m1.Status
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetCloudProviderToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.CloudProvider.(type) {
	case nil:
		o.CloudProvider = nil

	case *ReplaceSpecType_Aws:
		o.CloudProvider = &GlobalSpecType_Aws{Aws: of.Aws}

	case *ReplaceSpecType_Azure:
		o.CloudProvider = &GlobalSpecType_Azure{Azure: of.Azure}

	case *ReplaceSpecType_Gcp:
		o.CloudProvider = &GlobalSpecType_Gcp{Gcp: of.Gcp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetCloudProviderFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.CloudProvider.(type) {
	case nil:
		r.CloudProvider = nil

	case *GlobalSpecType_Aws:
		r.CloudProvider = &ReplaceSpecType_Aws{Aws: of.Aws}

	case *GlobalSpecType_Azure:
		r.CloudProvider = &ReplaceSpecType_Azure{Azure: of.Azure}

	case *GlobalSpecType_Gcp:
		r.CloudProvider = &ReplaceSpecType_Gcp{Gcp: of.Gcp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetEnableConnectionToReChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EnableConnectionToReChoice.(type) {
	case nil:
		o.EnableConnectionToReChoice = nil

	case *ReplaceSpecType_Disabled:
		o.EnableConnectionToReChoice = &GlobalSpecType_Disabled{Disabled: of.Disabled}

	case *ReplaceSpecType_Enabled:
		o.EnableConnectionToReChoice = &GlobalSpecType_Enabled{Enabled: of.Enabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetEnableConnectionToReChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EnableConnectionToReChoice.(type) {
	case nil:
		r.EnableConnectionToReChoice = nil

	case *GlobalSpecType_Disabled:
		r.EnableConnectionToReChoice = &ReplaceSpecType_Disabled{Disabled: of.Disabled}

	case *GlobalSpecType_Enabled:
		r.EnableConnectionToReChoice = &ReplaceSpecType_Enabled{Enabled: of.Enabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetCloudProviderFromGlobalSpecType(f)
	m.GetEnableConnectionToReChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetCloudProviderToGlobalSpecType(f)
	m1.SetEnableConnectionToReChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

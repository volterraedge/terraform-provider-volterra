// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/k8s_pod_security_admission/types.proto

package k8s_pod_security_admission

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PodSecurityAdmissionSpec
//
// x-displayName: "Pod Security Admission Spec"
// Pod Security Admission Spec is combination of policy type and admission mode
type PodSecurityAdmissionSpec struct {
	// Policy Type
	//
	// x-displayName: "Policy Type"
	// x-required
	// Security Policies defined by Pod Security Standard
	//
	// Types that are valid to be assigned to PolicyTypeChoice:
	//	*PodSecurityAdmissionSpec_Privileged
	//	*PodSecurityAdmissionSpec_Baseline
	//	*PodSecurityAdmissionSpec_Restricted
	PolicyTypeChoice isPodSecurityAdmissionSpec_PolicyTypeChoice `protobuf_oneof:"policy_type_choice"`
	// Admission Mode
	//
	// x-displayName: "Admission Mode"
	// x-required
	// Admission modes defines what action the control plane takes if a potential violation is detected.
	//
	// Types that are valid to be assigned to AdmissionModeChoice:
	//	*PodSecurityAdmissionSpec_Enforce
	//	*PodSecurityAdmissionSpec_Audit
	//	*PodSecurityAdmissionSpec_Warn
	AdmissionModeChoice isPodSecurityAdmissionSpec_AdmissionModeChoice `protobuf_oneof:"admission_mode_choice"`
}

func (m *PodSecurityAdmissionSpec) Reset()      { *m = PodSecurityAdmissionSpec{} }
func (*PodSecurityAdmissionSpec) ProtoMessage() {}
func (*PodSecurityAdmissionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e5d1d70b07f80a, []int{0}
}
func (m *PodSecurityAdmissionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodSecurityAdmissionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PodSecurityAdmissionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSecurityAdmissionSpec.Merge(m, src)
}
func (m *PodSecurityAdmissionSpec) XXX_Size() int {
	return m.Size()
}
func (m *PodSecurityAdmissionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSecurityAdmissionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PodSecurityAdmissionSpec proto.InternalMessageInfo

type isPodSecurityAdmissionSpec_PolicyTypeChoice interface {
	isPodSecurityAdmissionSpec_PolicyTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPodSecurityAdmissionSpec_AdmissionModeChoice interface {
	isPodSecurityAdmissionSpec_AdmissionModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PodSecurityAdmissionSpec_Privileged struct {
	Privileged *schema.Empty `protobuf:"bytes,2,opt,name=privileged,proto3,oneof" json:"privileged,omitempty"`
}
type PodSecurityAdmissionSpec_Baseline struct {
	Baseline *schema.Empty `protobuf:"bytes,3,opt,name=baseline,proto3,oneof" json:"baseline,omitempty"`
}
type PodSecurityAdmissionSpec_Restricted struct {
	Restricted *schema.Empty `protobuf:"bytes,4,opt,name=restricted,proto3,oneof" json:"restricted,omitempty"`
}
type PodSecurityAdmissionSpec_Enforce struct {
	Enforce *schema.Empty `protobuf:"bytes,6,opt,name=enforce,proto3,oneof" json:"enforce,omitempty"`
}
type PodSecurityAdmissionSpec_Audit struct {
	Audit *schema.Empty `protobuf:"bytes,7,opt,name=audit,proto3,oneof" json:"audit,omitempty"`
}
type PodSecurityAdmissionSpec_Warn struct {
	Warn *schema.Empty `protobuf:"bytes,8,opt,name=warn,proto3,oneof" json:"warn,omitempty"`
}

func (*PodSecurityAdmissionSpec_Privileged) isPodSecurityAdmissionSpec_PolicyTypeChoice() {}
func (*PodSecurityAdmissionSpec_Baseline) isPodSecurityAdmissionSpec_PolicyTypeChoice()   {}
func (*PodSecurityAdmissionSpec_Restricted) isPodSecurityAdmissionSpec_PolicyTypeChoice() {}
func (*PodSecurityAdmissionSpec_Enforce) isPodSecurityAdmissionSpec_AdmissionModeChoice() {}
func (*PodSecurityAdmissionSpec_Audit) isPodSecurityAdmissionSpec_AdmissionModeChoice()   {}
func (*PodSecurityAdmissionSpec_Warn) isPodSecurityAdmissionSpec_AdmissionModeChoice()    {}

func (m *PodSecurityAdmissionSpec) GetPolicyTypeChoice() isPodSecurityAdmissionSpec_PolicyTypeChoice {
	if m != nil {
		return m.PolicyTypeChoice
	}
	return nil
}
func (m *PodSecurityAdmissionSpec) GetAdmissionModeChoice() isPodSecurityAdmissionSpec_AdmissionModeChoice {
	if m != nil {
		return m.AdmissionModeChoice
	}
	return nil
}

func (m *PodSecurityAdmissionSpec) GetPrivileged() *schema.Empty {
	if x, ok := m.GetPolicyTypeChoice().(*PodSecurityAdmissionSpec_Privileged); ok {
		return x.Privileged
	}
	return nil
}

func (m *PodSecurityAdmissionSpec) GetBaseline() *schema.Empty {
	if x, ok := m.GetPolicyTypeChoice().(*PodSecurityAdmissionSpec_Baseline); ok {
		return x.Baseline
	}
	return nil
}

func (m *PodSecurityAdmissionSpec) GetRestricted() *schema.Empty {
	if x, ok := m.GetPolicyTypeChoice().(*PodSecurityAdmissionSpec_Restricted); ok {
		return x.Restricted
	}
	return nil
}

func (m *PodSecurityAdmissionSpec) GetEnforce() *schema.Empty {
	if x, ok := m.GetAdmissionModeChoice().(*PodSecurityAdmissionSpec_Enforce); ok {
		return x.Enforce
	}
	return nil
}

func (m *PodSecurityAdmissionSpec) GetAudit() *schema.Empty {
	if x, ok := m.GetAdmissionModeChoice().(*PodSecurityAdmissionSpec_Audit); ok {
		return x.Audit
	}
	return nil
}

func (m *PodSecurityAdmissionSpec) GetWarn() *schema.Empty {
	if x, ok := m.GetAdmissionModeChoice().(*PodSecurityAdmissionSpec_Warn); ok {
		return x.Warn
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PodSecurityAdmissionSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PodSecurityAdmissionSpec_Privileged)(nil),
		(*PodSecurityAdmissionSpec_Baseline)(nil),
		(*PodSecurityAdmissionSpec_Restricted)(nil),
		(*PodSecurityAdmissionSpec_Enforce)(nil),
		(*PodSecurityAdmissionSpec_Audit)(nil),
		(*PodSecurityAdmissionSpec_Warn)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Specifications for Pod Security Admission
type GlobalSpecType struct {
	// K8s Pod Security Admission
	//
	// x-displayName: "K8s Pod Security Admission"
	// x-required
	PodSecurityAdmissionSpecs []*PodSecurityAdmissionSpec `protobuf:"bytes,1,rep,name=pod_security_admission_specs,json=podSecurityAdmissionSpecs,proto3" json:"pod_security_admission_specs,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e5d1d70b07f80a, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetPodSecurityAdmissionSpecs() []*PodSecurityAdmissionSpec {
	if m != nil {
		return m.PodSecurityAdmissionSpecs
	}
	return nil
}

// Create k8s_pod_security_admission
//
// x-displayName: "Create Configuration Specification"
// Create k8s_pod_security_admission will create the object in the storage backend
type CreateSpecType struct {
	PodSecurityAdmissionSpecs []*PodSecurityAdmissionSpec `protobuf:"bytes,1,rep,name=pod_security_admission_specs,json=podSecurityAdmissionSpecs,proto3" json:"pod_security_admission_specs,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e5d1d70b07f80a, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetPodSecurityAdmissionSpecs() []*PodSecurityAdmissionSpec {
	if m != nil {
		return m.PodSecurityAdmissionSpecs
	}
	return nil
}

// Replace k8s_pod_security_admission
//
// x-displayName: "Replace Configuration Specification"
// Replacing an k8s_pod_security_admission object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	PodSecurityAdmissionSpecs []*PodSecurityAdmissionSpec `protobuf:"bytes,1,rep,name=pod_security_admission_specs,json=podSecurityAdmissionSpecs,proto3" json:"pod_security_admission_specs,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e5d1d70b07f80a, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetPodSecurityAdmissionSpecs() []*PodSecurityAdmissionSpec {
	if m != nil {
		return m.PodSecurityAdmissionSpecs
	}
	return nil
}

// Get k8s_pod_security_admission
//
// x-displayName: "Get Configuration Specification"
// Get k8s_pod_security_admission will get the object from the storage backend
type GetSpecType struct {
	PodSecurityAdmissionSpecs []*PodSecurityAdmissionSpec `protobuf:"bytes,1,rep,name=pod_security_admission_specs,json=podSecurityAdmissionSpecs,proto3" json:"pod_security_admission_specs,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_63e5d1d70b07f80a, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetPodSecurityAdmissionSpecs() []*PodSecurityAdmissionSpec {
	if m != nil {
		return m.PodSecurityAdmissionSpecs
	}
	return nil
}

func init() {
	proto.RegisterType((*PodSecurityAdmissionSpec)(nil), "ves.io.schema.k8s_pod_security_admission.PodSecurityAdmissionSpec")
	golang_proto.RegisterType((*PodSecurityAdmissionSpec)(nil), "ves.io.schema.k8s_pod_security_admission.PodSecurityAdmissionSpec")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_pod_security_admission.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/k8s_pod_security_admission/types.proto", fileDescriptor_63e5d1d70b07f80a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/k8s_pod_security_admission/types.proto", fileDescriptor_63e5d1d70b07f80a)
}

var fileDescriptor_63e5d1d70b07f80a = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x41, 0x6b, 0x13, 0x5d,
	0x14, 0xcd, 0x4d, 0x93, 0x34, 0xdf, 0xcd, 0x47, 0x6c, 0x87, 0x0a, 0xd3, 0x58, 0x9e, 0x21, 0x1b,
	0x4b, 0x48, 0x67, 0x64, 0x5a, 0x6a, 0xe9, 0x42, 0x68, 0xa4, 0x56, 0x8a, 0x42, 0x49, 0x05, 0x41,
	0xc1, 0x61, 0x32, 0xf3, 0x9a, 0x3e, 0x3a, 0xc9, 0x7b, 0xcc, 0x4c, 0x52, 0xb3, 0x13, 0xfc, 0x03,
	0xe2, 0xda, 0x9d, 0x28, 0xda, 0x1f, 0xe0, 0xc2, 0x6c, 0xba, 0x94, 0xae, 0xb2, 0xcc, 0xd2, 0x4e,
	0x36, 0xba, 0xeb, 0x4f, 0x90, 0x4c, 0x92, 0x69, 0x52, 0x6d, 0x74, 0x25, 0xba, 0xca, 0x79, 0xdc,
	0x73, 0xef, 0x3d, 0xf7, 0xe4, 0xbe, 0x37, 0xb8, 0xd2, 0xa0, 0xae, 0xc2, 0xb8, 0xea, 0x9a, 0xfb,
	0xb4, 0x6a, 0xa8, 0x07, 0x6b, 0xae, 0x2e, 0xb8, 0xa5, 0xbb, 0xd4, 0xac, 0x3b, 0xcc, 0x6b, 0xea,
	0x86, 0x55, 0x65, 0xae, 0xcb, 0x78, 0x4d, 0xf5, 0x9a, 0x82, 0xba, 0x8a, 0x70, 0xb8, 0xc7, 0xa5,
	0xc5, 0x7e, 0x96, 0xd2, 0xcf, 0x52, 0x2e, 0xcf, 0xca, 0x2c, 0x55, 0x98, 0xb7, 0x5f, 0x2f, 0x2b,
	0x26, 0xaf, 0xaa, 0x15, 0x5e, 0xe1, 0x6a, 0x50, 0xa0, 0x5c, 0xdf, 0x0b, 0x4e, 0xc1, 0x21, 0x40,
	0xfd, 0xc2, 0x99, 0x6b, 0xe3, 0x72, 0xb8, 0xf0, 0x18, 0xaf, 0x0d, 0xba, 0x66, 0xe6, 0xc7, 0x83,
	0x23, 0x82, 0x32, 0x0b, 0xe3, 0xa1, 0x86, 0x61, 0x33, 0xcb, 0xf0, 0xe8, 0x20, 0x9a, 0xbd, 0x10,
	0x65, 0xf4, 0x50, 0x1f, 0x2f, 0x7d, 0xfd, 0x47, 0x86, 0x3b, 0xda, 0x20, 0xd7, 0x89, 0xa1, 0xbc,
	0xc3, 0xad, 0xdd, 0xc1, 0x84, 0x1b, 0xc3, 0x01, 0x77, 0x05, 0x35, 0xa5, 0x55, 0x44, 0xe1, 0xb0,
	0x06, 0xb3, 0x69, 0x85, 0x5a, 0x72, 0x34, 0x0b, 0x8b, 0x29, 0x6d, 0x4e, 0x19, 0xf7, 0x68, 0xb3,
	0x2a, 0xbc, 0xe6, 0xbd, 0x48, 0x69, 0x84, 0x29, 0x69, 0x98, 0x2c, 0x1b, 0x2e, 0xb5, 0x59, 0x8d,
	0xca, 0x53, 0x13, 0xb3, 0x42, 0x5e, 0xaf, 0x97, 0x43, 0x5d, 0xcf, 0x61, 0xa6, 0x47, 0x2d, 0x39,
	0x36, 0xb9, 0xd7, 0x39, 0x53, 0xba, 0x89, 0xd3, 0xb4, 0xb6, 0xc7, 0x1d, 0x93, 0xca, 0x89, 0x09,
	0x49, 0x50, 0x1a, 0xd2, 0xa4, 0x02, 0xc6, 0x8d, 0xba, 0xc5, 0x3c, 0x79, 0x7a, 0x22, 0xbf, 0x4f,
	0x92, 0xf2, 0x18, 0x3b, 0x34, 0x9c, 0x9a, 0x9c, 0x9c, 0x48, 0x0e, 0x38, 0xeb, 0x47, 0x70, 0xd2,
	0x82, 0xb7, 0x80, 0x4f, 0x30, 0xb5, 0xc3, 0x6d, 0x66, 0x36, 0xb3, 0x0f, 0x9b, 0x82, 0xe6, 0xef,
	0xe3, 0x36, 0xca, 0xa3, 0x56, 0x6a, 0xb8, 0x13, 0x62, 0x9c, 0x3b, 0x37, 0x4b, 0x4b, 0x16, 0x07,
	0xa8, 0xc7, 0x3f, 0x1f, 0x52, 0xc3, 0x52, 0x88, 0xf1, 0x2e, 0xa6, 0xc3, 0x7f, 0x29, 0xfb, 0x80,
	0x5b, 0x34, 0xbf, 0x82, 0x1a, 0x4a, 0xa1, 0x0d, 0xda, 0xf4, 0x66, 0x1f, 0x60, 0x7a, 0x30, 0xa8,
	0x16, 0xdf, 0xe8, 0xfd, 0xe0, 0xff, 0xfd, 0x51, 0xb4, 0xd8, 0x23, 0xc3, 0xa9, 0x15, 0x6f, 0xa0,
	0x24, 0x02, 0x91, 0x7a, 0x6f, 0x1f, 0x74, 0x73, 0x9f, 0x33, 0x93, 0x4a, 0xb3, 0xc7, 0x2d, 0x88,
	0xb6, 0x5b, 0x00, 0x7e, 0x0b, 0xe2, 0x5a, 0x61, 0xb9, 0xb0, 0x52, 0xcc, 0xe3, 0xd5, 0x70, 0xef,
	0xf5, 0x2a, 0xb7, 0xc6, 0xb8, 0x89, 0x76, 0x0b, 0xe2, 0x3d, 0xee, 0x6a, 0xe1, 0x56, 0x61, 0x6d,
	0x3b, 0x96, 0x84, 0x99, 0xe8, 0x76, 0x2c, 0x19, 0x9f, 0x49, 0xe4, 0x3e, 0x02, 0xa6, 0xb7, 0x6c,
	0x5e, 0x36, 0xec, 0xde, 0x32, 0xf5, 0x9c, 0x90, 0xde, 0x00, 0x2e, 0xfc, 0xfc, 0x42, 0xe9, 0xae,
	0xa0, 0xa6, 0x2b, 0x43, 0x76, 0x6a, 0x31, 0xa5, 0x15, 0x95, 0xdf, 0xbd, 0x87, 0xca, 0x65, 0xbb,
	0x5b, 0x24, 0x9f, 0xbe, 0x1d, 0x4f, 0xc5, 0x5f, 0x41, 0x74, 0xe6, 0xbf, 0x21, 0x4a, 0xc2, 0x10,
	0xc9, 0x50, 0x9a, 0x17, 0x97, 0x64, 0xba, 0xb9, 0x0f, 0x80, 0xe9, 0x3b, 0x0e, 0x35, 0x3c, 0x1a,
	0x0a, 0x7f, 0xf1, 0xc7, 0x84, 0x4f, 0x10, 0xb6, 0x3e, 0x7b, 0x72, 0xfb, 0x82, 0xa3, 0xb9, 0x23,
	0xc0, 0x2b, 0x25, 0x2a, 0x6c, 0xc3, 0xfc, 0x07, 0xc4, 0xbe, 0x03, 0x4c, 0x6d, 0x51, 0xef, 0xaf,
	0x17, 0x5a, 0x7c, 0x0d, 0xed, 0x53, 0x12, 0xe9, 0x9c, 0x92, 0xc8, 0xd9, 0x29, 0x81, 0xe7, 0x3e,
	0x81, 0xf7, 0x3e, 0x81, 0xcf, 0x3e, 0x81, 0xb6, 0x4f, 0xa0, 0xe3, 0x13, 0xf8, 0xe2, 0x13, 0xf8,
	0xea, 0x93, 0xc8, 0x99, 0x4f, 0xe0, 0x65, 0x97, 0x44, 0x8e, 0xbb, 0x04, 0xda, 0x5d, 0x12, 0xe9,
	0x74, 0x49, 0xe4, 0xf1, 0xd3, 0x0a, 0x17, 0x07, 0x15, 0xa5, 0xc1, 0x6d, 0x8f, 0x3a, 0x8e, 0xa1,
	0xd4, 0x5d, 0x35, 0x00, 0x7b, 0xdc, 0xa9, 0x2e, 0x09, 0x87, 0x37, 0x98, 0x45, 0x9d, 0xa5, 0x61,
	0x58, 0x15, 0xe5, 0x0a, 0x57, 0xe9, 0x33, 0x6f, 0xf0, 0x48, 0xff, 0xf2, 0x93, 0x55, 0x4e, 0x04,
	0x6f, 0xf7, 0xf2, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x0b, 0x7e, 0x4a, 0xe5, 0x06, 0x00,
	0x00,
}

func (this *PodSecurityAdmissionSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PolicyTypeChoice == nil {
		if this.PolicyTypeChoice != nil {
			return false
		}
	} else if this.PolicyTypeChoice == nil {
		return false
	} else if !this.PolicyTypeChoice.Equal(that1.PolicyTypeChoice) {
		return false
	}
	if that1.AdmissionModeChoice == nil {
		if this.AdmissionModeChoice != nil {
			return false
		}
	} else if this.AdmissionModeChoice == nil {
		return false
	} else if !this.AdmissionModeChoice.Equal(that1.AdmissionModeChoice) {
		return false
	}
	return true
}
func (this *PodSecurityAdmissionSpec_Privileged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec_Privileged)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec_Privileged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Privileged.Equal(that1.Privileged) {
		return false
	}
	return true
}
func (this *PodSecurityAdmissionSpec_Baseline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec_Baseline)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec_Baseline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Baseline.Equal(that1.Baseline) {
		return false
	}
	return true
}
func (this *PodSecurityAdmissionSpec_Restricted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec_Restricted)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec_Restricted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Restricted.Equal(that1.Restricted) {
		return false
	}
	return true
}
func (this *PodSecurityAdmissionSpec_Enforce) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec_Enforce)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec_Enforce)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enforce.Equal(that1.Enforce) {
		return false
	}
	return true
}
func (this *PodSecurityAdmissionSpec_Audit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec_Audit)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec_Audit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Audit.Equal(that1.Audit) {
		return false
	}
	return true
}
func (this *PodSecurityAdmissionSpec_Warn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodSecurityAdmissionSpec_Warn)
	if !ok {
		that2, ok := that.(PodSecurityAdmissionSpec_Warn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Warn.Equal(that1.Warn) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PodSecurityAdmissionSpecs) != len(that1.PodSecurityAdmissionSpecs) {
		return false
	}
	for i := range this.PodSecurityAdmissionSpecs {
		if !this.PodSecurityAdmissionSpecs[i].Equal(that1.PodSecurityAdmissionSpecs[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PodSecurityAdmissionSpecs) != len(that1.PodSecurityAdmissionSpecs) {
		return false
	}
	for i := range this.PodSecurityAdmissionSpecs {
		if !this.PodSecurityAdmissionSpecs[i].Equal(that1.PodSecurityAdmissionSpecs[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PodSecurityAdmissionSpecs) != len(that1.PodSecurityAdmissionSpecs) {
		return false
	}
	for i := range this.PodSecurityAdmissionSpecs {
		if !this.PodSecurityAdmissionSpecs[i].Equal(that1.PodSecurityAdmissionSpecs[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PodSecurityAdmissionSpecs) != len(that1.PodSecurityAdmissionSpecs) {
		return false
	}
	for i := range this.PodSecurityAdmissionSpecs {
		if !this.PodSecurityAdmissionSpecs[i].Equal(that1.PodSecurityAdmissionSpecs[i]) {
			return false
		}
	}
	return true
}
func (this *PodSecurityAdmissionSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&k8s_pod_security_admission.PodSecurityAdmissionSpec{")
	if this.PolicyTypeChoice != nil {
		s = append(s, "PolicyTypeChoice: "+fmt.Sprintf("%#v", this.PolicyTypeChoice)+",\n")
	}
	if this.AdmissionModeChoice != nil {
		s = append(s, "AdmissionModeChoice: "+fmt.Sprintf("%#v", this.AdmissionModeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodSecurityAdmissionSpec_Privileged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_pod_security_admission.PodSecurityAdmissionSpec_Privileged{` +
		`Privileged:` + fmt.Sprintf("%#v", this.Privileged) + `}`}, ", ")
	return s
}
func (this *PodSecurityAdmissionSpec_Baseline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_pod_security_admission.PodSecurityAdmissionSpec_Baseline{` +
		`Baseline:` + fmt.Sprintf("%#v", this.Baseline) + `}`}, ", ")
	return s
}
func (this *PodSecurityAdmissionSpec_Restricted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_pod_security_admission.PodSecurityAdmissionSpec_Restricted{` +
		`Restricted:` + fmt.Sprintf("%#v", this.Restricted) + `}`}, ", ")
	return s
}
func (this *PodSecurityAdmissionSpec_Enforce) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_pod_security_admission.PodSecurityAdmissionSpec_Enforce{` +
		`Enforce:` + fmt.Sprintf("%#v", this.Enforce) + `}`}, ", ")
	return s
}
func (this *PodSecurityAdmissionSpec_Audit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_pod_security_admission.PodSecurityAdmissionSpec_Audit{` +
		`Audit:` + fmt.Sprintf("%#v", this.Audit) + `}`}, ", ")
	return s
}
func (this *PodSecurityAdmissionSpec_Warn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_pod_security_admission.PodSecurityAdmissionSpec_Warn{` +
		`Warn:` + fmt.Sprintf("%#v", this.Warn) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&k8s_pod_security_admission.GlobalSpecType{")
	if this.PodSecurityAdmissionSpecs != nil {
		s = append(s, "PodSecurityAdmissionSpecs: "+fmt.Sprintf("%#v", this.PodSecurityAdmissionSpecs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&k8s_pod_security_admission.CreateSpecType{")
	if this.PodSecurityAdmissionSpecs != nil {
		s = append(s, "PodSecurityAdmissionSpecs: "+fmt.Sprintf("%#v", this.PodSecurityAdmissionSpecs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&k8s_pod_security_admission.ReplaceSpecType{")
	if this.PodSecurityAdmissionSpecs != nil {
		s = append(s, "PodSecurityAdmissionSpecs: "+fmt.Sprintf("%#v", this.PodSecurityAdmissionSpecs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&k8s_pod_security_admission.GetSpecType{")
	if this.PodSecurityAdmissionSpecs != nil {
		s = append(s, "PodSecurityAdmissionSpecs: "+fmt.Sprintf("%#v", this.PodSecurityAdmissionSpecs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PodSecurityAdmissionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodSecurityAdmissionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdmissionModeChoice != nil {
		{
			size := m.AdmissionModeChoice.Size()
			i -= size
			if _, err := m.AdmissionModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PolicyTypeChoice != nil {
		{
			size := m.PolicyTypeChoice.Size()
			i -= size
			if _, err := m.PolicyTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodSecurityAdmissionSpec_Privileged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec_Privileged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Privileged != nil {
		{
			size, err := m.Privileged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PodSecurityAdmissionSpec_Baseline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec_Baseline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Baseline != nil {
		{
			size, err := m.Baseline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PodSecurityAdmissionSpec_Restricted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec_Restricted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Restricted != nil {
		{
			size, err := m.Restricted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PodSecurityAdmissionSpec_Enforce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec_Enforce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enforce != nil {
		{
			size, err := m.Enforce.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PodSecurityAdmissionSpec_Audit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec_Audit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Audit != nil {
		{
			size, err := m.Audit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PodSecurityAdmissionSpec_Warn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodSecurityAdmissionSpec_Warn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Warn != nil {
		{
			size, err := m.Warn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for iNdEx := len(m.PodSecurityAdmissionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodSecurityAdmissionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for iNdEx := len(m.PodSecurityAdmissionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodSecurityAdmissionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for iNdEx := len(m.PodSecurityAdmissionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodSecurityAdmissionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for iNdEx := len(m.PodSecurityAdmissionSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PodSecurityAdmissionSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PodSecurityAdmissionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyTypeChoice != nil {
		n += m.PolicyTypeChoice.Size()
	}
	if m.AdmissionModeChoice != nil {
		n += m.AdmissionModeChoice.Size()
	}
	return n
}

func (m *PodSecurityAdmissionSpec_Privileged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Privileged != nil {
		l = m.Privileged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PodSecurityAdmissionSpec_Baseline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Baseline != nil {
		l = m.Baseline.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PodSecurityAdmissionSpec_Restricted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Restricted != nil {
		l = m.Restricted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PodSecurityAdmissionSpec_Enforce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enforce != nil {
		l = m.Enforce.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PodSecurityAdmissionSpec_Audit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Audit != nil {
		l = m.Audit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PodSecurityAdmissionSpec_Warn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Warn != nil {
		l = m.Warn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for _, e := range m.PodSecurityAdmissionSpecs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for _, e := range m.PodSecurityAdmissionSpecs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for _, e := range m.PodSecurityAdmissionSpecs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PodSecurityAdmissionSpecs) > 0 {
		for _, e := range m.PodSecurityAdmissionSpecs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PodSecurityAdmissionSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec{`,
		`PolicyTypeChoice:` + fmt.Sprintf("%v", this.PolicyTypeChoice) + `,`,
		`AdmissionModeChoice:` + fmt.Sprintf("%v", this.AdmissionModeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityAdmissionSpec_Privileged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec_Privileged{`,
		`Privileged:` + strings.Replace(fmt.Sprintf("%v", this.Privileged), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityAdmissionSpec_Baseline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec_Baseline{`,
		`Baseline:` + strings.Replace(fmt.Sprintf("%v", this.Baseline), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityAdmissionSpec_Restricted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec_Restricted{`,
		`Restricted:` + strings.Replace(fmt.Sprintf("%v", this.Restricted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityAdmissionSpec_Enforce) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec_Enforce{`,
		`Enforce:` + strings.Replace(fmt.Sprintf("%v", this.Enforce), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityAdmissionSpec_Audit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec_Audit{`,
		`Audit:` + strings.Replace(fmt.Sprintf("%v", this.Audit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodSecurityAdmissionSpec_Warn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodSecurityAdmissionSpec_Warn{`,
		`Warn:` + strings.Replace(fmt.Sprintf("%v", this.Warn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPodSecurityAdmissionSpecs := "[]*PodSecurityAdmissionSpec{"
	for _, f := range this.PodSecurityAdmissionSpecs {
		repeatedStringForPodSecurityAdmissionSpecs += strings.Replace(f.String(), "PodSecurityAdmissionSpec", "PodSecurityAdmissionSpec", 1) + ","
	}
	repeatedStringForPodSecurityAdmissionSpecs += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`PodSecurityAdmissionSpecs:` + repeatedStringForPodSecurityAdmissionSpecs + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPodSecurityAdmissionSpecs := "[]*PodSecurityAdmissionSpec{"
	for _, f := range this.PodSecurityAdmissionSpecs {
		repeatedStringForPodSecurityAdmissionSpecs += strings.Replace(f.String(), "PodSecurityAdmissionSpec", "PodSecurityAdmissionSpec", 1) + ","
	}
	repeatedStringForPodSecurityAdmissionSpecs += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`PodSecurityAdmissionSpecs:` + repeatedStringForPodSecurityAdmissionSpecs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPodSecurityAdmissionSpecs := "[]*PodSecurityAdmissionSpec{"
	for _, f := range this.PodSecurityAdmissionSpecs {
		repeatedStringForPodSecurityAdmissionSpecs += strings.Replace(f.String(), "PodSecurityAdmissionSpec", "PodSecurityAdmissionSpec", 1) + ","
	}
	repeatedStringForPodSecurityAdmissionSpecs += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`PodSecurityAdmissionSpecs:` + repeatedStringForPodSecurityAdmissionSpecs + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPodSecurityAdmissionSpecs := "[]*PodSecurityAdmissionSpec{"
	for _, f := range this.PodSecurityAdmissionSpecs {
		repeatedStringForPodSecurityAdmissionSpecs += strings.Replace(f.String(), "PodSecurityAdmissionSpec", "PodSecurityAdmissionSpec", 1) + ","
	}
	repeatedStringForPodSecurityAdmissionSpecs += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`PodSecurityAdmissionSpecs:` + repeatedStringForPodSecurityAdmissionSpecs + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PodSecurityAdmissionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodSecurityAdmissionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodSecurityAdmissionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyTypeChoice = &PodSecurityAdmissionSpec_Privileged{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baseline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyTypeChoice = &PodSecurityAdmissionSpec_Baseline{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyTypeChoice = &PodSecurityAdmissionSpec_Restricted{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enforce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdmissionModeChoice = &PodSecurityAdmissionSpec_Enforce{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdmissionModeChoice = &PodSecurityAdmissionSpec_Audit{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdmissionModeChoice = &PodSecurityAdmissionSpec_Warn{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSecurityAdmissionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodSecurityAdmissionSpecs = append(m.PodSecurityAdmissionSpecs, &PodSecurityAdmissionSpec{})
			if err := m.PodSecurityAdmissionSpecs[len(m.PodSecurityAdmissionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSecurityAdmissionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodSecurityAdmissionSpecs = append(m.PodSecurityAdmissionSpecs, &PodSecurityAdmissionSpec{})
			if err := m.PodSecurityAdmissionSpecs[len(m.PodSecurityAdmissionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSecurityAdmissionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodSecurityAdmissionSpecs = append(m.PodSecurityAdmissionSpecs, &PodSecurityAdmissionSpec{})
			if err := m.PodSecurityAdmissionSpecs[len(m.PodSecurityAdmissionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSecurityAdmissionSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodSecurityAdmissionSpecs = append(m.PodSecurityAdmissionSpecs, &PodSecurityAdmissionSpec{})
			if err := m.PodSecurityAdmissionSpecs[len(m.PodSecurityAdmissionSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

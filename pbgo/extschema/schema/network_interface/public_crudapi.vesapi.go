//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package network_interface

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/flags"
	"gopkg.volterra.us/stdlib/log"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.network_interface.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.network_interface.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.network_interface.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.network_interface.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.network_interface.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.network_interface.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.network_interface.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.network_interface.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.network_interface.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.network_interface.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/network_interfaces", c.baseURL, req.Metadata.GetNamespace())
	jsn, err := req.ToJSON()
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Create")
	}

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, req, rspo)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var rReq *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		rReq = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, rReq); err != nil {
				return err
			}
		}
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.ReplaceJSONReq != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry, WithRequestProto() or WithReplaceJSONRequest() should be specified")
	}
	if e == nil && cco.RequestProto == nil && cco.ReplaceJSONReq == "" {
		return fmt.Errorf("Neither entry nor WithRequestProto() nor WithReplaceJSONRequest() specified")
	}

	var jsn, namespace, name string
	var err error
	_ = namespace
	if e != nil || cco.RequestProto != nil {
		rReq.ResourceVersion = cco.ResourceVersion
		jsn, err = rReq.ToJSON()
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		namespace = rReq.GetMetadata().GetNamespace()
		name = rReq.GetMetadata().GetName()
	} else {
		jsn = cco.ReplaceJSONReq
		reqMap := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
			return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
		}
		md, ok := reqMap["metadata"].(map[string]interface{})
		if !ok {
			return fmt.Errorf("ReplaceJSONReq does not have 'metadata'")
		}
		if val, ok := md["namespace"].(string); ok {
			namespace = val
		}
		if val, ok := md["name"].(string); ok {
			name = val
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/network_interfaces/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	if _, err := ioutil.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, rReq, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/network_interfaces/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/network_interfaces", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/network_interfaces/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	_, err = ioutil.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	crcl := &crudAPIRestClient{baseURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	crudCl *crudAPIInprocClient
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	crudCl := newCRUDAPIInprocClient(svc)
	return &APIInprocClient{crudCl}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	svc svcfw.Service
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := oah.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := oah.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := oah.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.network_interface")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := oah.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	crcl := &crudAPIInprocClient{svc: svc}
	return crcl
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.network_interface.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.network_interface.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.network_interface.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.network_interface.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.network_interface.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.network_interface.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.network_interface.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.network_interface.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.network_interface.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.network_interface.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.network_interface.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.network_interface.API.DeleteRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	default:
		noDBForm, _ := flags.GetEnvGetRspNoDBForm()
		if !noDBForm {
			rsp.Object = o.Object
			sf.Logger().Alert(svcfw.GetResponseInDBForm,
				log.MinorAlert,
				zap.String("user", server.UserFromContext(ctx)),
				zap.String("useragent", server.UseragentStrFromContext(ctx)),
				zap.String("operation", "Get"),
			)
			buildReadForm()

		} else {
			buildReadForm()

		}
		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			noDBForm, _ := flags.GetEnvGetRspNoDBForm()
			if !noDBForm {
				item.Object = o.Object
				sf.Logger().Alert(svcfw.GetResponseInDBForm,
					log.MinorAlert,
					zap.String("user", server.UserFromContext(ctx)),
					zap.String("useragent", server.UseragentStrFromContext(ctx)),
					zap.String("operation", "List"),
				)
			}

			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object != nil && o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.network_interface.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Network Interface",
        "description": "Network Interface object represents the configuration of a network device in a fleet of\nVolterra Customer Edge sites. The following properties can be configured in this object:\n\n   IP address allocation scheme of the network interface (dhcp or static). Virtual Network of this network interface, Whether to run a DHCP server on this interface\n\n      Subnet to use for allocation\n\n      Default gateway\n\n      DNS server\n\n Interfaces belonging to site local inside and site local outside networks have to be configured as part of\n bootstrap configuration. This configuration can be done in two ways:\n\n     during site registration and is bundled as part of certified hardware image.\n\n     configured locally on the CE via Sia application\n\n Interfaces corresponding to these local interfaces can be configured in the global configuration. Label\n assignments for the local interfaces can be done in the global network interface configuration. Also, DHCP\n can be still be configured on site local inside network interface configuration, so that dynamic address is\n obtained and used.\n \n When DHCP address assignment (server) is enabled in the Network interface, external clients can get their addresses\n assigned from the configured subnet. The local interface can also get a dynamic address from the same pool if DHCP\n client is enabled in the network interface. Gateway and DNS servers for such clients can be external addresses or\n addresses internally allocated from the same subnet or may be disabled.\n\n Note that DHCP client and server configuration are independent. A Network interface may have DHCP client configured\n and DHCP server disabled, if an external DHCP server is used.\n\n Currently, DHCP client should always be enabled, setting static address on a network interface is not supported.\n\n If this Network interface is for primary network device (site local), then it has to be configured only as\n DHCP assigned address. This interface will be used to reach volterra cloud for registration. Virtual network\n of this interface has to be site local network. If there are multiple interfaces and multiple virtual\n networks, then site local interface has to be in the outside network.\n\n If network has Network interface with DHCP address assignment configured, then default gateway and DNS server\n for this network will be taken from DHCP response. Having multiple interfaces in a network giving default route\n can cause bad routing decisions. In case of site local network, DNS and default gateway response from primary\n interface will be used.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{metadata.namespace}/network_interfaces": {
            "post": {
                "summary": "Create network interface",
                "description": "Network interface represents configuration of a network device.\nIt is created by users in system namespace.",
                "operationId": "ves.io.schema.network_interface.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/network_interfaceCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/network_interfaceCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-network_interface-API-Create"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.API.Create"
            },
            "x-displayname": "Network Interface",
            "x-ves-proto-service": "ves.io.schema.network_interface.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{metadata.namespace}/network_interfaces/{metadata.name}": {
            "put": {
                "summary": "Replace network interface",
                "description": "Network interface represents configuration of a network device.\nReplace network interface will replace the contents of given network interface object.",
                "operationId": "ves.io.schema.network_interface.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/network_interfaceReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/network_interfaceReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-network_interface-API-Replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.API.Replace"
            },
            "x-displayname": "Network Interface",
            "x-ves-proto-service": "ves.io.schema.network_interface.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/network_interfaces": {
            "get": {
                "summary": "List",
                "description": "List the set of network_interface in a namespace",
                "operationId": "ves.io.schema.network_interface.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/network_interfaceListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of network_interface",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-network_interface-API-List"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.API.List"
            },
            "x-displayname": "Network Interface",
            "x-ves-proto-service": "ves.io.schema.network_interface.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/network_interfaces/{name}": {
            "get": {
                "summary": "Get network interface",
                "description": "Get network interface from system namespace",
                "operationId": "ves.io.schema.network_interface.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/network_interfaceGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in CreateRequest format\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_CREATE",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Referring Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-network_interface-API-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.API.Get"
            },
            "delete": {
                "summary": "Delete",
                "description": "Delete the specified network_interface",
                "operationId": "ves.io.schema.network_interface.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nName of the configuration object",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/network_interfaceDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-network_interface-API-Delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.API.Delete"
            },
            "x-displayname": "Network Interface",
            "x-ves-proto-service": "ves.io.schema.network_interface.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "network_interfaceCreateRequest": {
            "type": "object",
            "description": "This is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of network_interface",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.network_interface.CreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the certified_hardware",
                    "title": "spec",
                    "$ref": "#/definitions/network_interfaceCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "network_interfaceCreateResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.CreateResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the certified_hardware",
                    "title": "spec",
                    "$ref": "#/definitions/network_interfaceGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "network_interfaceCreateSpecType": {
            "type": "object",
            "description": "Network interface represents configuration of a network device.\nIt is created by users in system namespace.",
            "title": "Create network interface",
            "x-displayname": "Create Network Interface",
            "x-ves-oneof-field-interface_choice": "[\"dedicated_interface\",\"dedicated_management_interface\",\"ethernet_interface\",\"legacy_interface\",\"tunnel_interface\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.CreateSpecType",
            "properties": {
                "dedicated_interface": {
                    "description": "Exclusive with [dedicated_management_interface ethernet_interface legacy_interface tunnel_interface]\nx-displayName: \"Dedicated Interface\"\nConfiguration can be used to set labels, MTU and priority for dedicated interfaces.\nNetworking configuration for dedicated interface is configured locally on site e.g. (outside/inside)Ethernet, WLAN, or LTE/4G.",
                    "title": "Bootstrap Local Interface",
                    "$ref": "#/definitions/network_interfaceDedicatedInterfaceType"
                },
                "dedicated_management_interface": {
                    "description": "Exclusive with [dedicated_interface ethernet_interface legacy_interface tunnel_interface]\nx-displayName: \"Dedicated Management Interface\"\nIn dc cluster sites fallback management interfaces can be made into dedicated management interface",
                    "title": "Dedicated Management Interface",
                    "$ref": "#/definitions/network_interfaceDedicatedManagementInterfaceType"
                },
                "ethernet_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface legacy_interface tunnel_interface]\nx-displayName: \"Ethernet Interface\"\nEthernet interface configuration.",
                    "title": "Ethernet Interface",
                    "$ref": "#/definitions/network_interfaceEthernetInterfaceType"
                },
                "legacy_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface tunnel_interface]\nx-displayName: \"Legacy Interface\"\nOld method of interface configuration",
                    "title": "Legacy Interface",
                    "$ref": "#/definitions/network_interfaceLegacyInterfaceType"
                },
                "tunnel_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface legacy_interface]\nx-displayName: \"Tunnel Interface\"\nTunnel interface, Ipsec tunnels to other networking devices.",
                    "title": "Tunnel Interface Template",
                    "$ref": "#/definitions/network_interfaceTunnelInterfaceType"
                }
            }
        },
        "network_interfaceDHCPInterfaceIPType": {
            "type": "object",
            "description": "Map of Interface IP assignments per node",
            "title": "Interface IP Assignments",
            "x-displayname": "Interface IP Assignments",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPInterfaceIPType",
            "properties": {
                "interface_ip_map": {
                    "type": "object",
                    "description": " Map of Site:Node to IP address.",
                    "title": "Site:Node to IP mapping",
                    "x-displayname": "Site:Node to IP Mapping"
                }
            }
        },
        "network_interfaceDHCPNetworkType": {
            "type": "object",
            "description": "DHCP network configuration",
            "title": "DHCP Network",
            "x-displayname": "DHCP Network",
            "x-ves-displayorder": "1,12,4,5,9",
            "x-ves-oneof-field-dns_choice": "[\"dns_address\",\"same_as_dgw\"]",
            "x-ves-oneof-field-gateway_choice": "[\"dgw_address\",\"first_address\",\"last_address\"]",
            "x-ves-oneof-field-network_prefix_choice": "[\"network_prefix\",\"network_prefix_allocator\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPNetworkType",
            "properties": {
                "dgw_address": {
                    "type": "string",
                    "description": "Exclusive with [first_address last_address]\nx-displayName: \"Configured Address\"\nx-example: \"10.1.1.10\"\nConfigured address from the network prefix is chosen as default gateway.",
                    "title": "Configured Address"
                },
                "dns_address": {
                    "type": "string",
                    "description": "Exclusive with [same_as_dgw]\nx-displayName: \"Configured Address\"\nx-example: \"10.1.1.11\"\nConfigured address is chosen as DNS server address in DHCP response.",
                    "title": "Configured Address"
                },
                "first_address": {
                    "description": "Exclusive with [dgw_address last_address]\nx-displayName: \"First Address of Network\"\nFirst usable address from the network prefix is chosen as default gateway",
                    "title": "First Address",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "last_address": {
                    "description": "Exclusive with [dgw_address first_address]\nx-displayName: \"Last Address of Network\"\nLast usable address from the network prefix is chosen as default gateway",
                    "title": "Last Address",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "network_prefix": {
                    "type": "string",
                    "description": "Exclusive with [network_prefix_allocator]\nx-displayName: \"Network Prefix\"\nx-example: \"10.1.1.0/24\"\nNetwork Prefix for a single site.",
                    "title": "Network Prefix"
                },
                "network_prefix_allocator": {
                    "description": "Exclusive with [network_prefix]\nx-displayName: \"Prefix Allocator a Fleet\"\nNetwork Prefix for a Fleet is derived from address allocator rules. \nPrefix length from address allocator scheme is used to calculate offsets",
                    "title": "Network Prefix for a Fleet",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "pool_settings": {
                    "description": " Controls how DHCP pools are handled\nRequired: YES",
                    "title": "DHCP Pool Settings",
                    "$ref": "#/definitions/network_interfaceDHCPPoolSettingType",
                    "x-displayname": "DHCP Pool Settings",
                    "x-ves-required": "true"
                },
                "pools": {
                    "type": "array",
                    "description": " List of non overlapping ip address ranges.",
                    "title": "DHCP pools",
                    "items": {
                        "$ref": "#/definitions/network_interfaceDHCPPoolType"
                    },
                    "x-displayname": "DHCP Pools"
                },
                "same_as_dgw": {
                    "description": "Exclusive with [dns_address]\nx-displayName: \"Default Gateway Address\"\nDNS server address is same as default gateway address",
                    "title": "Default Gateway Address",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "network_interfaceDHCPPoolSettingType": {
            "type": "string",
            "description": "Identifies the how to pick the network for Interface.\n\nAddress ranges in DHCP pool list are allocation list\nAddress ranges in DHCP pool list are exclude list",
            "title": "DHCP POOL SETTING",
            "enum": [
                "INCLUDE_IP_ADDRESSES_FROM_DHCP_POOLS",
                "EXCLUDE_IP_ADDRESSES_FROM_DHCP_POOLS"
            ],
            "default": "INCLUDE_IP_ADDRESSES_FROM_DHCP_POOLS",
            "x-displayname": "Interface Network Type",
            "x-ves-proto-enum": "ves.io.schema.network_interface.DHCPPoolSettingType"
        },
        "network_interfaceDHCPPoolType": {
            "type": "object",
            "description": "DHCP pool is a range of IP addresses (start ip and end ip).",
            "title": "DHCP IP Range",
            "x-displayname": "DHCP IP Range",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPPoolType",
            "properties": {
                "end_ip": {
                    "type": "string",
                    "description": " Ending IP of the pool range.\n In case of address allocator, offset is derived based on network prefix.\n 10.1.1.200 with prefix length of 24, end offset is 0.0.0.200\n\nExample: - \"10.1.1.200\"-",
                    "title": "End IP",
                    "x-displayname": "Ending IP",
                    "x-ves-example": "10.1.1.200"
                },
                "exclude": {
                    "type": "boolean",
                    "description": " If exclude is true, IP addresses are not assigned from this range.",
                    "title": "Exclude",
                    "format": "boolean",
                    "x-displayname": "Exclude"
                },
                "start_ip": {
                    "type": "string",
                    "description": " Starting IP of the pool range. \n In case of address allocator, offset is derived based on network prefix.\n 10.1.1.5 with prefix length of 24, start offset is 0.0.0.5\n\nExample: - \"10.1.1.5\"-",
                    "title": "Start IP",
                    "x-displayname": "Starting IP",
                    "x-ves-example": "10.1.1.5"
                }
            }
        },
        "network_interfaceDHCPServerParametersType": {
            "type": "object",
            "x-ves-oneof-field-interfaces_addressing_choice": "[\"automatic_from_end\",\"automatic_from_start\",\"interface_ip_map\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPServerParametersType",
            "properties": {
                "automatic_from_end": {
                    "description": "Exclusive with [automatic_from_start interface_ip_map]\nx-displayName: \"Automatic End\"\nAssign automatically from End of the first network in the list",
                    "title": "Automatic End",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "automatic_from_start": {
                    "description": "Exclusive with [automatic_from_end interface_ip_map]\nx-displayName: \"Automatic Start\"\nAssign automatically from start of the first network in the list",
                    "title": "Automatic Start",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "dhcp_networks": {
                    "type": "array",
                    "description": " List of networks from which DHCP server can allocate ip addresses\nRequired: YES",
                    "title": "DHCP Networks",
                    "items": {
                        "$ref": "#/definitions/network_interfaceDHCPNetworkType"
                    },
                    "x-displayname": "DHCP Networks",
                    "x-ves-required": "true"
                },
                "dhcp_option82_tag": {
                    "type": "string",
                    "description": " Optional tag that can be given to this configuration\n\nExample: - \"network_red\"-",
                    "title": "Option 82 Tag",
                    "x-displayname": "Option 82 Tag",
                    "x-ves-example": "network_red"
                },
                "fixed_ip_map": {
                    "type": "object",
                    "description": " Fixed MAC address to ip assignments, Key: Mac address, Value: IP Address",
                    "title": "Fixed IP Assignments",
                    "x-displayname": "Fixed MAC address to IP Assignments"
                },
                "interface_ip_map": {
                    "description": "Exclusive with [automatic_from_end automatic_from_start]\nx-displayName: \"Configured\"\nConfigured address for every node",
                    "title": "Configured Address",
                    "$ref": "#/definitions/network_interfaceDHCPInterfaceIPType"
                }
            }
        },
        "network_interfaceDedicatedInterfaceType": {
            "type": "object",
            "description": "Dedicated Interface Configuration",
            "title": "Dedicated Interface",
            "x-displayname": "Dedicated Interface",
            "x-ves-oneof-field-monitoring_choice": "[\"monitor\",\"monitor_disabled\"]",
            "x-ves-oneof-field-node_choice": "[\"cluster\",\"node\"]",
            "x-ves-oneof-field-primary_choice": "[\"is_primary\",\"not_primary\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DedicatedInterfaceType",
            "properties": {
                "cluster": {
                    "description": "Exclusive with [node]\nx-displayName: \"Cluster, All Node of the site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Cluster",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": " Name of the device for which interface is configured. Use wwan0 for 4G/LTE.\n\nExample: - \"eth0\"-\nRequired: YES",
                    "title": "Device",
                    "x-displayname": "Interface Device",
                    "x-ves-example": "eth0",
                    "x-ves-required": "true"
                },
                "is_primary": {
                    "description": "Exclusive with [not_primary]\nx-displayName: \"Interface is Primary\"\nThis interface is primary",
                    "title": "Interface is Primary",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "monitor": {
                    "description": "Exclusive with [monitor_disabled]\nx-displayName: \"Enabled\"\nLink Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig"
                },
                "monitor_disabled": {
                    "description": "Exclusive with [monitor]\nx-displayName: \"Disabled\"\nLink quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum packet size (Maximum Transfer Unit) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"1450\"-",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64",
                    "x-displayname": "Maximum Packet Size (MTU)",
                    "x-ves-example": "1450"
                },
                "node": {
                    "type": "string",
                    "description": "Exclusive with [cluster]\nx-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node of the site.",
                    "title": "Node"
                },
                "not_primary": {
                    "description": "Exclusive with [is_primary]\nx-displayName: \"Interface is Not Primary\"\nThis interface is not primary",
                    "title": "Interface is Not Primary",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the network interface when multiple network interfaces are present in outside network\n Greater the value, higher the priority\n\nExample: - \"42\"-",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "42"
                }
            }
        },
        "network_interfaceDedicatedManagementInterfaceType": {
            "type": "object",
            "description": "Dedicated Interface Configuration",
            "title": "Dedicated Management Interface",
            "x-displayname": "Dedicated Management Interface",
            "x-ves-oneof-field-node_choice": "[\"cluster\",\"node\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DedicatedManagementInterfaceType",
            "properties": {
                "cluster": {
                    "description": "Exclusive with [node]\nx-displayName: \"Cluster, All Node of the site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Cluster",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": " Name of the device for which interface is configured \n\nExample: - \"eth0\"-\nRequired: YES",
                    "title": "Device",
                    "x-displayname": "Interface Device",
                    "x-ves-example": "eth0",
                    "x-ves-required": "true"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum packet size (Maximum Transfer Unit) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"1450\"-",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64",
                    "x-displayname": "Maximum Packet Size (MTU)",
                    "x-ves-example": "1450"
                },
                "node": {
                    "type": "string",
                    "description": "Exclusive with [cluster]\nx-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node of the site.",
                    "title": "Node"
                }
            }
        },
        "network_interfaceDeleteRequest": {
            "type": "object",
            "description": "This is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a network_interface",
            "x-displayname": "Delete Request",
            "x-ves-proto-message": "ves.io.schema.network_interface.DeleteRequest",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": " Fail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean",
                    "x-displayname": "Fail-If-Referred"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the configuration object\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the configuration object is present\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "network_interfaceEthernetInterfaceType": {
            "type": "object",
            "description": "Ethernet Interface Configuration",
            "title": "Ethernet Interface",
            "x-displayname": "Ethernet Interface",
            "x-ves-oneof-field-address_choice": "[\"dhcp_client\",\"dhcp_server\",\"static_ip\"]",
            "x-ves-oneof-field-ipv6_address_choice": "[\"no_ipv6_address\",\"static_ipv6_address\"]",
            "x-ves-oneof-field-monitoring_choice": "[\"monitor\",\"monitor_disabled\"]",
            "x-ves-oneof-field-network_choice": "[\"inside_network\",\"site_local_inside_network\",\"site_local_network\",\"srv6_network\",\"storage_network\"]",
            "x-ves-oneof-field-node_choice": "[\"cluster\",\"node\"]",
            "x-ves-oneof-field-primary_choice": "[\"is_primary\",\"not_primary\"]",
            "x-ves-oneof-field-vlan_choice": "[\"untagged\",\"vlan_id\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.EthernetInterfaceType",
            "properties": {
                "cluster": {
                    "description": "Exclusive with [node]\nx-displayName: \"Cluster, All Nodes of the Site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Node Independent",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": " Interface configuration for the ethernet device \n\nExample: - \"eth0\"-\nRequired: YES",
                    "title": "Device",
                    "x-displayname": "Ethernet Device",
                    "x-ves-example": "eth0",
                    "x-ves-required": "true"
                },
                "dhcp_client": {
                    "description": "Exclusive with [dhcp_server static_ip]\nx-displayName: \"DHCP Client\"\nInterface gets it IP address from external DHCP server",
                    "title": "DHCP Client",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "dhcp_server": {
                    "description": "Exclusive with [dhcp_client static_ip]\nx-displayName: \"DHCP server\"\nDHCP Server is configured for this interface, Interface IP from DHCP server configuration.",
                    "title": "DHCP Server",
                    "$ref": "#/definitions/network_interfaceDHCPServerParametersType"
                },
                "inside_network": {
                    "description": "Exclusive with [site_local_inside_network site_local_network srv6_network storage_network]\nx-displayName: \"Inside Network\"\nInterface belongs to user configured inside network",
                    "title": "Inside Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "is_primary": {
                    "description": "Exclusive with [not_primary]\nx-displayName: \"Interface is Primary\"\nThis interface is primary",
                    "title": "Interface is Primary",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "monitor": {
                    "description": "Exclusive with [monitor_disabled]\nx-displayName: \"Enabled\"\nLink Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig"
                },
                "monitor_disabled": {
                    "description": "Exclusive with [monitor]\nx-displayName: \"Disabled\"\nLink quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum packet size (Maximum Transfer Unit) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"1450\"-",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64",
                    "x-displayname": "Maximum Packet Size (MTU)",
                    "x-ves-example": "1450"
                },
                "no_ipv6_address": {
                    "description": "Exclusive with [static_ipv6_address]\nx-displayName: \"No IPv6 Address\"\nInterface does not have an IPv6 Address.",
                    "title": "no_ipv6_address",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "node": {
                    "type": "string",
                    "description": "Exclusive with [cluster]\nx-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node.",
                    "title": "Node"
                },
                "not_primary": {
                    "description": "Exclusive with [is_primary]\nx-displayName: \"Interface is Not Primary\"\nThis interface is not primary",
                    "title": "Interface is Not Primary",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the network interface when multiple network interfaces are present in outside network\n Greater the value, higher the priority\n\nExample: - \"42\"-",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "42"
                },
                "site_local_inside_network": {
                    "description": "Exclusive with [inside_network site_local_network srv6_network storage_network]\nx-displayName: \"Site Local Network Inside\"\nInterface belongs to site local network inside",
                    "title": "Site Local Network Inside",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "site_local_network": {
                    "description": "Exclusive with [inside_network site_local_inside_network srv6_network storage_network]\nx-displayName: \"Site Local Network (Outside)\"\nInterface belongs to site local network (outside)",
                    "title": "Site Local Network",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "srv6_network": {
                    "description": "Exclusive with [inside_network site_local_inside_network site_local_network storage_network]\nx-displayName: \"Per Site Srv6 Network\"\nInterface belongs to per site srv6 network",
                    "title": "Per Site Srv6 Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "static_ip": {
                    "description": "Exclusive with [dhcp_client dhcp_server]\nx-displayName: \"Static IP\"\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                },
                "static_ipv6_address": {
                    "description": "Exclusive with [no_ipv6_address]\nx-displayName: \"Static IP\"\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                },
                "storage_network": {
                    "description": "Exclusive with [inside_network site_local_inside_network site_local_network srv6_network]\nx-displayName: \"Storage Network\"\nInterface belongs to site local network inside",
                    "title": "Storage Network",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "untagged": {
                    "description": "Exclusive with [vlan_id]\nx-displayName: \"Untagged\"\nConfigure a untagged ethernet interface",
                    "title": "Untagged",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "vlan_id": {
                    "type": "integer",
                    "description": "Exclusive with [untagged]\nx-displayName: \"VLAN Id\"\nConfigure a VLAN tagged ethernet interface",
                    "title": "VLAN Id",
                    "format": "int64"
                }
            }
        },
        "network_interfaceGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read network_interface",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.network_interface.GetResponse",
            "properties": {
                "create_form": {
                    "description": "Format used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/network_interfaceCreateRequest",
                    "x-displayname": "CreateRequest Format"
                },
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "object": {
                    "title": "object",
                    "$ref": "#/definitions/network_interfaceObject",
                    "x-displayname": "Object"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/network_interfaceReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "resource_version": {
                    "type": "string",
                    "description": "Version of the object\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the certified_hardware",
                    "title": "spec",
                    "$ref": "#/definitions/network_interfaceGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/network_interfaceStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "network_interfaceGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "network_interfaceGetSpecType": {
            "type": "object",
            "description": "Get network interface from system namespace",
            "title": "Get network interface",
            "x-displayname": "Get Network Interface",
            "x-ves-oneof-field-interface_choice": "[\"dedicated_interface\",\"dedicated_management_interface\",\"ethernet_interface\",\"legacy_interface\",\"tunnel_interface\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.GetSpecType",
            "properties": {
                "dedicated_interface": {
                    "description": "Exclusive with [dedicated_management_interface ethernet_interface legacy_interface tunnel_interface]\nx-displayName: \"Dedicated Interface\"\nConfiguration can be used to set labels, MTU and priority for dedicated interfaces.\nNetworking configuration for dedicated interface is configured locally on site e.g. (outside/inside)Ethernet, WLAN, or LTE/4G.",
                    "title": "Bootstrap Local Interface",
                    "$ref": "#/definitions/network_interfaceDedicatedInterfaceType"
                },
                "dedicated_management_interface": {
                    "description": "Exclusive with [dedicated_interface ethernet_interface legacy_interface tunnel_interface]\nx-displayName: \"Dedicated Management Interface\"\nIn dc cluster sites fallback management interfaces can be made into dedicated management interface",
                    "title": "Dedicated Management Interface",
                    "$ref": "#/definitions/network_interfaceDedicatedManagementInterfaceType"
                },
                "ethernet_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface legacy_interface tunnel_interface]\nx-displayName: \"Ethernet Interface\"\nEthernet interface configuration.",
                    "title": "Ethernet Interface",
                    "$ref": "#/definitions/network_interfaceEthernetInterfaceType"
                },
                "legacy_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface tunnel_interface]\nx-displayName: \"Legacy Interface\"\nOld method of interface configuration",
                    "title": "Legacy Interface",
                    "$ref": "#/definitions/network_interfaceLegacyInterfaceType"
                },
                "tunnel_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface legacy_interface]\nx-displayName: \"Tunnel Interface\"\nTunnel interface, Ipsec tunnels to other networking devices.",
                    "title": "Tunnel Interface Template",
                    "$ref": "#/definitions/network_interfaceTunnelInterfaceType"
                }
            }
        },
        "network_interfaceGlobalSpecType": {
            "type": "object",
            "description": "Network Interface specification",
            "title": "Global Specification",
            "x-displayname": "Global Specification",
            "x-ves-oneof-field-interface_choice": "[\"dedicated_interface\",\"dedicated_management_interface\",\"ethernet_interface\",\"legacy\",\"tunnel_interface\"]",
            "x-ves-oneof-field-monitoring_choice": "[\"monitor\",\"monitor_disabled\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.GlobalSpecType",
            "properties": {
                "DHCP_server": {
                    "description": " Behave as DHCP server for subnet configured in static addresses.\nRequired: YES",
                    "title": "DHCP Server",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDHCPServer",
                    "x-displayname": "Enable DHCP Server",
                    "x-ves-required": "true"
                },
                "DNS_server": {
                    "description": " Configures how DNS server is derived for the subnet in static addresses",
                    "title": "DNS Server",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDNS",
                    "x-displayname": "DNS Server"
                },
                "address_allocator": {
                    "type": "array",
                    "description": " Reference to an address allocator for the network interface. When set, the allocator is used to\n allocate a subnet for the interface and an address from the subnet is set on the interface.",
                    "title": "Address Allocator",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Address Allocator"
                },
                "dedicated_interface": {
                    "description": "Exclusive with [dedicated_management_interface ethernet_interface legacy tunnel_interface]\nx-displayName: \"Internal\"\nInternal helps in conversion",
                    "title": "Internal",
                    "$ref": "#/definitions/network_interfaceDedicatedInterfaceType"
                },
                "dedicated_management_interface": {
                    "description": "Exclusive with [dedicated_interface ethernet_interface legacy tunnel_interface]\nx-displayName: \"Internal\"\nInternal helps in conversion",
                    "title": "Internal",
                    "$ref": "#/definitions/network_interfaceDedicatedManagementInterfaceType"
                },
                "default_gateway": {
                    "description": " Configures how default gateway is derived for the subnet static addresses",
                    "title": "Default Gateway",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDFGW",
                    "x-displayname": "Default Gateway"
                },
                "device_name": {
                    "type": "string",
                    "description": " Name of the physical network interface device  which this network interface represents.\n\nExample: - \"value\"-\nRequired: YES",
                    "title": "Device Name",
                    "x-displayname": "Device Name",
                    "x-ves-example": "value",
                    "x-ves-required": "true"
                },
                "dhcp_address": {
                    "description": " Enable DHCP based address assignment for this interface.\nRequired: YES",
                    "title": "DHCP Client",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDHCP",
                    "x-displayname": "Enable DHCP Client",
                    "x-ves-required": "true"
                },
                "dhcp_server_params": {
                    "description": " DHCP server parameters",
                    "title": "DHCP server parameters",
                    "$ref": "#/definitions/network_interfaceDHCPServerParametersType",
                    "x-displayname": "DHCP server parameters"
                },
                "ethernet_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface legacy tunnel_interface]\nx-displayName: \"Internal\"\nInternal helps in conversion",
                    "title": "Internal",
                    "$ref": "#/definitions/network_interfaceEthernetInterfaceType"
                },
                "interface_ip_map": {
                    "type": "object",
                    "description": " Map of Site:Node to IP address offset. Key:Node, Value:Map\n Value of 10.1.1.5 with network prefix 24, offset is 0.0.0.5",
                    "title": "Site:Node to IP mapping",
                    "x-displayname": "Site:Node to IP Mapping"
                },
                "ipv6_static_addresses": {
                    "description": " Configure IPv6 subnet to be used.",
                    "title": "Ipv6 Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType",
                    "x-displayname": "IPv6 Static IP"
                },
                "is_primary": {
                    "type": "boolean",
                    "description": " This interface is primary interface",
                    "title": "Primary Interface",
                    "format": "boolean",
                    "x-displayname": "Primary Interface"
                },
                "legacy": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface tunnel_interface]\nx-displayName: \"Internal\"\nInternal helps in conversion",
                    "title": "Internal",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "monitor": {
                    "description": "Exclusive with [monitor_disabled]\nx-displayName: \"Enabled\"\nLink Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig"
                },
                "monitor_disabled": {
                    "description": "Exclusive with [monitor]\nx-displayName: \"Disabled\"\nLink quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum Transfer Unit (Max packet length) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"0\"-",
                    "title": "Mtu",
                    "format": "int64",
                    "x-displayname": "MTU",
                    "x-ves-example": "0"
                },
                "network_config": {
                    "description": " Configuration to pick network from interface or fleet",
                    "title": "Network Config Method",
                    "$ref": "#/definitions/network_interfaceInterfaceNetworkType",
                    "x-displayname": "Network Config Method"
                },
                "parent_network_interface": {
                    "type": "array",
                    "description": " When interface is created as VLAN tagged sub-interface or LACP (interface type),\n then reference to parent network interface is specified here. Valid only for subinterfaces",
                    "title": "Parent Network Interface",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Parent Interface"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the network interface when multiple network interfaces are present in the fleet object\n Greater the value, higher the priority\n\nExample: - \"42\"-",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "42"
                },
                "static_addresses": {
                    "type": "array",
                    "description": " If DHCP server is enabled, configures the subnet to be used for IP allocation.",
                    "title": "Static IP",
                    "items": {
                        "$ref": "#/definitions/schemaIpv4SubnetType"
                    },
                    "x-displayname": "Static IP"
                },
                "tunnel": {
                    "description": " When interface is created as TUNNEL type, then reference to tunnel is specified here",
                    "title": "Tunnel",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceTunnel",
                    "x-displayname": "Tunnel"
                },
                "tunnel_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface legacy]\nx-displayName: \"Internal\"\nInternal helps in conversion",
                    "title": "Internal",
                    "$ref": "#/definitions/network_interfaceTunnelInterfaceType"
                },
                "type": {
                    "description": " Specifies the type of interface (ethernet, vlan, lacp etc)\nRequired: YES",
                    "title": "Interface Type",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceType",
                    "x-displayname": "Type",
                    "x-ves-required": "true"
                },
                "virtual_network": {
                    "type": "array",
                    "description": " Virtual-network for the interface\n This is optional and can contain at most one entry",
                    "title": "Virtual Network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Virtual Network"
                },
                "vlan_tag": {
                    "type": "integer",
                    "description": " Vlan tag of the interface, valid only if VLAN tagging is enabled\n when vlan_tagging is enabled, value must be between 1 - 4094\n\nExample: - \"0\"-",
                    "title": "Vlan Tag",
                    "format": "int64",
                    "x-displayname": "VLAN Tag",
                    "x-ves-example": "0"
                },
                "vlan_tagging": {
                    "description": " Enable/Disable VLAN tagging on this interface.\n Must be enabled for VLAN interfaces\n\nExample: - \"NETWORK_INTERFACE_VLAN_TAGGING_DISABLE\"-",
                    "title": "Vlan Tagging",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceVLANTagging",
                    "x-displayname": "Enable VLAN Tagging",
                    "x-ves-example": "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE"
                }
            }
        },
        "network_interfaceInterfaceNetworkType": {
            "type": "string",
            "description": "Identifies the how to pick the network for Interface.\n\nBackward compatibility to existing config or per site network\nTake site local from from fleet\nTake site local inside from from fleet\nNetwork interface is used to connect to storage network\nNetwork interface is used to connect to storage network",
            "title": "Interface Network Type",
            "enum": [
                "NETWORK_INTERFACE_NETWORK_REF",
                "NETWORK_INTERFACE_SITE_LOCAL",
                "NETWORK_INTERFACE_SITE_LOCAL_INSIDE",
                "NETWORK_INTERFACE_STORAGE",
                "NETWORK_INTERFACE_MANAGEMENT"
            ],
            "default": "NETWORK_INTERFACE_NETWORK_REF",
            "x-displayname": "Interface Network Type",
            "x-ves-proto-enum": "ves.io.schema.network_interface.InterfaceNetworkType"
        },
        "network_interfaceLegacyInterfaceType": {
            "type": "object",
            "description": "Legacy Interface Configuration",
            "title": "Legacy Configuration",
            "x-displayname": "Legacy Configuration",
            "x-ves-oneof-field-monitoring_choice": "[\"monitor\",\"monitor_disabled\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.LegacyInterfaceType",
            "properties": {
                "DHCP_server": {
                    "description": " Behave as DHCP server for subnet configured in static addresses.\nRequired: YES",
                    "title": "DHCP Server",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDHCPServer",
                    "x-displayname": "Enable DHCP Server",
                    "x-ves-required": "true"
                },
                "DNS_server": {
                    "description": " Configures how DNS server is derived for the subnet in static addresses",
                    "title": "DNS Server",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDNS",
                    "x-displayname": "DNS Server"
                },
                "address_allocator": {
                    "type": "array",
                    "description": " Reference to an address allocator for the network interface. When set, the allocator is used to\n allocate a subnet for the interface and an address from the subnet is set on the interface.",
                    "title": "Address Allocator",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Address Allocator"
                },
                "default_gateway": {
                    "description": " Configures how default gateway is derived for the subnet static addresses",
                    "title": "Default Gateway",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDFGW",
                    "x-displayname": "Default Gateway"
                },
                "device_name": {
                    "type": "string",
                    "description": " Name of the physical network interface device  which this network interface represents.\n\nExample: - \"value\"-\nRequired: YES",
                    "title": "Device Name",
                    "x-displayname": "Device Name",
                    "x-ves-example": "value",
                    "x-ves-required": "true"
                },
                "dhcp_address": {
                    "description": " Enable DHCP based address assignment for this interface.\nRequired: YES",
                    "title": "DHCP Client",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDHCP",
                    "x-displayname": "Enable DHCP Client",
                    "x-ves-required": "true"
                },
                "monitor": {
                    "description": "Exclusive with [monitor_disabled]\nx-displayName: \"Enabled\"\nLink Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig"
                },
                "monitor_disabled": {
                    "description": "Exclusive with [monitor]\nx-displayName: \"Disabled\"\nLink quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum Transfer Unit (Max packet length) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"0\"-",
                    "title": "Mtu",
                    "format": "int64",
                    "x-displayname": "MTU",
                    "x-ves-example": "0"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the network interface when multiple network interfaces are present in the fleet object\n Greater the value, higher the priority\n\nExample: - \"42\"-",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "42"
                },
                "static_addresses": {
                    "type": "array",
                    "description": " If DHCP server is enabled, configures the subnet to be used for IP allocation.",
                    "title": "Static IP",
                    "items": {
                        "$ref": "#/definitions/schemaIpv4SubnetType"
                    },
                    "x-displayname": "Static IP"
                },
                "tunnel": {
                    "description": " When interface is created as TUNNEL type, then reference to tunnel is specified here",
                    "title": "Tunnel",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceTunnel",
                    "x-displayname": "Tunnel"
                },
                "type": {
                    "description": " Specifies the type of interface (ethernet, vlan, lacp etc)\nRequired: YES",
                    "title": "Interface Type",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceType",
                    "x-displayname": "Type",
                    "x-ves-required": "true"
                },
                "virtual_network": {
                    "type": "array",
                    "description": " Virtual-network for the interface\n This is optional and can contain at most one entry",
                    "title": "Virtual Network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Virtual Network"
                },
                "vlan_tag": {
                    "type": "integer",
                    "description": " Vlan tag of the interface, valid only if VLAN tagging is enabled\n when vlan_tagging is enabled, value must be between 1 - 4094\n\nExample: - \"0\"-",
                    "title": "Vlan Tag",
                    "format": "int64",
                    "x-displayname": "VLAN Tag",
                    "x-ves-example": "0"
                },
                "vlan_tagging": {
                    "description": " Enable/Disable VLAN tagging on this interface.\n Must be enabled for VLAN interfaces\n\nExample: - \"NETWORK_INTERFACE_VLAN_TAGGING_DISABLE\"-",
                    "title": "Vlan Tagging",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceVLANTagging",
                    "x-displayname": "Enable VLAN Tagging",
                    "x-ves-example": "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE"
                }
            }
        },
        "network_interfaceLinkQualityMonitorConfig": {
            "type": "object",
            "description": "Link Quality Monitoring configuration for a network interface.",
            "title": "Link Quality Monitoring Configuration",
            "x-displayname": "Link Quality Monitoring Configuration",
            "x-ves-proto-message": "ves.io.schema.network_interface.LinkQualityMonitorConfig"
        },
        "network_interfaceListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of network_interface",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.network_interface.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/network_interfaceListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "network_interfaceListResponseItem": {
            "type": "object",
            "description": "By default a summary of network_interface is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of network_interface",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.network_interface.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this network_interface",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this network_interface",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates network_interface is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/network_interfaceGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this network_interface",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this network_interface\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "object": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object\n DEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/network_interfaceObject",
                    "x-displayname": "Object"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/network_interfaceStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this network_interface\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "network_interfaceNetworkInterfaceDFGW": {
            "type": "object",
            "description": "Controls how the Default Gateway of the Network interface is derived",
            "title": "Network Interface Default Gateway",
            "x-displayname": "Default Gateway",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceDFGW",
            "properties": {
                "default_gateway_address": {
                    "description": " Address of default gateway when mode is \"use-configured\"",
                    "title": "Default Gateway",
                    "$ref": "#/definitions/schemaIpv4AddressType",
                    "x-displayname": "Default Gateway"
                },
                "default_gateway_mode": {
                    "description": " Mode of obtaining default gateway\nRequired: YES",
                    "title": "Default Gateway Mode",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceGatewayMode",
                    "x-displayname": "Default Gateway Mode",
                    "x-ves-required": "true"
                }
            }
        },
        "network_interfaceNetworkInterfaceDHCP": {
            "type": "string",
            "description": "Controls whether or not DHCP client is enabled on the interface\n\nDHCP client is disabled\nDHCP client is enabled",
            "title": "Network Interface DHCP Client",
            "enum": [
                "NETWORK_INTERFACE_DHCP_DISABLE",
                "NETWORK_INTERFACE_DHCP_ENABLE"
            ],
            "default": "NETWORK_INTERFACE_DHCP_DISABLE",
            "x-displayname": "DHCP Client",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceDHCP"
        },
        "network_interfaceNetworkInterfaceDHCPServer": {
            "type": "string",
            "description": "Controls whether or not DHCP server runs on the interface\n\nDHCP server is disabled\nDHCP server is enabled\nEnhanced DHCP server is enabled",
            "title": "Network Interface DHCP Server",
            "enum": [
                "NETWORK_INTERFACE_DHCP_SERVER_DISABLE",
                "NETWORK_INTERFACE_DHCP_SERVER_ENABLE",
                "NETWORK_INTERFACE_ENHANCED_DHCP_SERVER_ENABLE"
            ],
            "default": "NETWORK_INTERFACE_DHCP_SERVER_DISABLE",
            "x-displayname": "DHCP Server",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceDHCPServer"
        },
        "network_interfaceNetworkInterfaceDNS": {
            "type": "object",
            "description": "Controls how the DNS Server of the Network interface is derived",
            "title": "Network Interface DNS server",
            "x-displayname": "DNS Server",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceDNS",
            "properties": {
                "dns_mode": {
                    "description": " Mode of obtaining DNS server\nRequired: YES",
                    "title": "DNS Server Mode",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDNSMode",
                    "x-displayname": "DNS Server Mode",
                    "x-ves-required": "true"
                },
                "dns_server": {
                    "type": "array",
                    "description": " Address of DNS server when mode is \"use-configured\"",
                    "title": "DNS Server",
                    "items": {
                        "$ref": "#/definitions/schemaIpv4AddressType"
                    },
                    "x-displayname": "DNS Server"
                }
            }
        },
        "network_interfaceNetworkInterfaceDNSMode": {
            "type": "string",
            "description": "Controls the mode of obtaining DNS address for the interface\n\nDNS is disabled\nDNS is allocated by the system\nUse the specified DNS",
            "title": "Network Interface DNS Mode",
            "enum": [
                "NETWORK_INTERFACE_DNS_DISABLE",
                "NETWORK_INTERFACE_DNS_AUTO_ALLOCATE",
                "NETWORK_INTERFACE_DNS_USE_CONFIGURED"
            ],
            "default": "NETWORK_INTERFACE_DNS_DISABLE",
            "x-displayname": "DNS Mode",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceDNSMode"
        },
        "network_interfaceNetworkInterfaceGatewayMode": {
            "type": "string",
            "description": "Controls the mode of obtaining gateway address for the interface\n\nGateway is disabled\nGateway is allocated by the system\nUse the specified gateway",
            "title": "Network Interface Gateway Mode",
            "enum": [
                "NETWORK_INTERFACE_GATEWAY_DISABLE",
                "NETWORK_INTERFACE_GATEWAY_AUTO_ALLOCATE",
                "NETWORK_INTERFACE_GATEWAY_USE_CONFIGURED"
            ],
            "default": "NETWORK_INTERFACE_GATEWAY_DISABLE",
            "x-displayname": "Gateway Mode",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceGatewayMode"
        },
        "network_interfaceNetworkInterfaceStatus": {
            "type": "object",
            "description": "Current Status of the Network interface",
            "title": "Network Interface Status",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceStatus",
            "properties": {
                "up_down": {
                    "description": " Current state of the interface",
                    "title": "Interface State",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceUpDown",
                    "x-displayname": "Interface State"
                }
            }
        },
        "network_interfaceNetworkInterfaceTunnel": {
            "type": "object",
            "description": "Tunnel attached to this interface, enables encapsulation on interface",
            "title": "Network Interface Tunnel",
            "x-displayname": "Tunnel",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceTunnel",
            "properties": {
                "tunnel": {
                    "type": "array",
                    "description": " Tunnel which is attached to this interface",
                    "title": "Tunnel",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Tunnel"
                }
            }
        },
        "network_interfaceNetworkInterfaceType": {
            "type": "string",
            "description": "Identifies the type of the interface.\n\nNetwork interface is an Ethernet interface\nNetwork interface is a VLAN interface\nNetwork interface is a bond interface running LACP\nNetwork interface is a tunnel interface",
            "title": "Network Interface Type",
            "enum": [
                "NETWORK_INTERFACE_ETHERNET",
                "NETWORK_INTERFACE_VLAN_INTERFACE",
                "NETWORK_INTERFACE_LACP_INTERFACE",
                "NETWORK_INTERFACE_TUNNEL_INTERFACE"
            ],
            "default": "NETWORK_INTERFACE_ETHERNET",
            "x-displayname": "Network Interface Type",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceType"
        },
        "network_interfaceNetworkInterfaceUpDown": {
            "type": "string",
            "description": "Shows the interface link state\n\nInterface is admistratively down\nInterface is operationally down\nInterface is operationally up",
            "title": "Interface State",
            "enum": [
                "NETWORK_INTERFACE_ADMINISTRATIVELY_DOWN",
                "NETWORK_INTERFACE_OPERATIONALY_DOWN",
                "NETWORK_INTERFACE_OPERATIONALY_UP"
            ],
            "default": "NETWORK_INTERFACE_ADMINISTRATIVELY_DOWN",
            "x-displayname": "Interface State",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceUpDown"
        },
        "network_interfaceNetworkInterfaceVLANTagging": {
            "type": "string",
            "description": "Controls whether or not VLAN tagging is enabled on the interface\n\nVlan tagging is disabled\nVlan tagging is enabled",
            "title": "Network Interface VLAN Tagging",
            "enum": [
                "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE",
                "NETWORK_INTERFACE_VLAN_TAGGING_ENABLE"
            ],
            "default": "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE",
            "x-displayname": "Vlan Tagging",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceVLANTagging"
        },
        "network_interfaceObject": {
            "type": "object",
            "description": "Network Interface object",
            "title": "Network Interface",
            "x-displayname": "Object",
            "x-ves-proto-message": "ves.io.schema.network_interface.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the certified_hardware",
                    "title": "spec",
                    "$ref": "#/definitions/network_interfaceSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "network_interfaceReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a network_interface",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.network_interface.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "resource_version": {
                    "type": "string",
                    "description": "If provided, do the replace operation if the configuration object is still at 'resource_version'\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the certified_hardware",
                    "title": "spec",
                    "$ref": "#/definitions/network_interfaceReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "network_interfaceReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.ReplaceResponse"
        },
        "network_interfaceReplaceSpecType": {
            "type": "object",
            "description": "Network interface represents configuration of a network device.\nReplace network interface will replace the contents of given network interface object.",
            "title": "Replace network interface",
            "x-displayname": "Replace Network Interface",
            "x-ves-oneof-field-interface_choice": "[\"dedicated_interface\",\"dedicated_management_interface\",\"ethernet_interface\",\"legacy_interface\",\"tunnel_interface\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.ReplaceSpecType",
            "properties": {
                "dedicated_interface": {
                    "description": "Exclusive with [dedicated_management_interface ethernet_interface legacy_interface tunnel_interface]\nx-displayName: \"Dedicated Interface\"\nConfiguration can be used to set labels, MTU and priority for dedicated interfaces.\nNetworking configuration for dedicated interface is configured locally on site e.g. (outside/inside)Ethernet, WLAN, or LTE/4G.",
                    "title": "Bootstrap Local Interface",
                    "$ref": "#/definitions/network_interfaceDedicatedInterfaceType"
                },
                "dedicated_management_interface": {
                    "description": "Exclusive with [dedicated_interface ethernet_interface legacy_interface tunnel_interface]\nx-displayName: \"Dedicated Management Interface\"\nIn dc cluster sites fallback management interfaces can be made into dedicated management interface",
                    "title": "Dedicated Management Interface",
                    "$ref": "#/definitions/network_interfaceDedicatedManagementInterfaceType"
                },
                "ethernet_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface legacy_interface tunnel_interface]\nx-displayName: \"Ethernet Interface\"\nEthernet interface configuration.",
                    "title": "Ethernet Interface",
                    "$ref": "#/definitions/network_interfaceEthernetInterfaceType"
                },
                "legacy_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface tunnel_interface]\nx-displayName: \"Legacy Interface\"\nOld method of interface configuration",
                    "title": "Legacy Interface",
                    "$ref": "#/definitions/network_interfaceLegacyInterfaceType"
                },
                "tunnel_interface": {
                    "description": "Exclusive with [dedicated_interface dedicated_management_interface ethernet_interface legacy_interface]\nx-displayName: \"Tunnel Interface\"\nTunnel interface, Ipsec tunnels to other networking devices.",
                    "title": "Tunnel Interface Template",
                    "$ref": "#/definitions/network_interfaceTunnelInterfaceType"
                }
            }
        },
        "network_interfaceSpecType": {
            "type": "object",
            "description": "Shape of the network_interface specification",
            "title": "Network Interface Specification",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.network_interface.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/network_interfaceGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "network_interfaceStaticIPParametersType": {
            "type": "object",
            "description": "Configure Static IP parameters",
            "title": "Static IP Parameters",
            "x-displayname": "Static IP Parameters",
            "x-ves-oneof-field-network_prefix_choice": "[\"cluster_static_ip\",\"fleet_static_ip\",\"node_static_ip\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.StaticIPParametersType",
            "properties": {
                "cluster_static_ip": {
                    "description": "Exclusive with [fleet_static_ip node_static_ip]\nx-displayName: \"Cluster, All Nodes of the  Site\"\nStatic IP configuration for a specific node",
                    "title": "Node Specific",
                    "$ref": "#/definitions/network_interfaceStaticIpParametersClusterType"
                },
                "fleet_static_ip": {
                    "description": "Exclusive with [cluster_static_ip node_static_ip]\nx-displayName: \"Fleet, All Nodes of All Sites in Fleet\"\nStatic IP configuration for the fleet",
                    "title": "Fleet",
                    "$ref": "#/definitions/network_interfaceStaticIpParametersFleetType"
                },
                "node_static_ip": {
                    "description": "Exclusive with [cluster_static_ip fleet_static_ip]\nx-displayName: \"Specific Node\"\nStatic IP configuration for the Node",
                    "title": "Node",
                    "$ref": "#/definitions/network_interfaceStaticIpParametersNodeType"
                }
            }
        },
        "network_interfaceStaticIpParametersClusterType": {
            "type": "object",
            "description": "Configure Static IP parameters  for cluster",
            "title": "Static IP Parameters",
            "x-displayname": "Cluster: Static IP Parameters",
            "x-ves-proto-message": "ves.io.schema.network_interface.StaticIpParametersClusterType",
            "properties": {
                "interface_ip_map": {
                    "type": "object",
                    "description": " Map of Node to Static ip configuration value, Key:Node, Value:IP Address",
                    "title": "Site:Node to IP mapping",
                    "x-displayname": "Node to IP Mapping"
                }
            }
        },
        "network_interfaceStaticIpParametersFleetType": {
            "type": "object",
            "description": "Configure Static IP parameters",
            "title": "Static IP Parameters",
            "x-displayname": "Fleet: Static IP Parameters",
            "x-ves-proto-message": "ves.io.schema.network_interface.StaticIpParametersFleetType",
            "properties": {
                "default_gw": {
                    "type": "string",
                    "description": " IP address offset of the default gateway, prefix len is used to calculate offset\n\nExample: - \"192.168.20.1\"-",
                    "title": "Default Gateway",
                    "x-displayname": "Default Gateway",
                    "x-ves-example": "192.168.20.1"
                },
                "dns_server": {
                    "type": "string",
                    "description": " IP address offset of the DNS server, prefix len is used to calculate offset\n\nExample: - \"192.168.20.1\"-",
                    "title": "DNS Server",
                    "x-displayname": "DNS Server",
                    "x-ves-example": "192.168.20.1"
                },
                "network_prefix_allocator": {
                    "description": " Static IP configuration for the fleet",
                    "title": "Fleet",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Fleet address allocator"
                }
            }
        },
        "network_interfaceStaticIpParametersNodeType": {
            "type": "object",
            "description": "Configure Static IP parameters for a node",
            "title": "Static IP Parameters",
            "x-displayname": "Node: Static IP Parameters",
            "x-ves-proto-message": "ves.io.schema.network_interface.StaticIpParametersNodeType",
            "properties": {
                "default_gw": {
                    "type": "string",
                    "description": " IP address of the default gateway.\n\nExample: - \"192.168.20.1\"-",
                    "title": "Default Gateway",
                    "x-displayname": "Default Gateway",
                    "x-ves-example": "192.168.20.1"
                },
                "dns_server": {
                    "type": "string",
                    "description": " IP address of the DNS server\n\nExample: - \"192.168.20.1\"-",
                    "title": "DNS Server",
                    "x-displayname": "DNS Server",
                    "x-ves-example": "192.168.20.1"
                },
                "ip_address": {
                    "type": "string",
                    "description": " IP address of the interface and prefix length\n\nExample: - \"192.168.20.1/24\"-\nRequired: YES",
                    "title": "Default Gateway",
                    "x-displayname": "IP address/Prefix Length",
                    "x-ves-example": "192.168.20.1/24",
                    "x-ves-required": "true"
                }
            }
        },
        "network_interfaceStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "Network Interface Status",
            "x-displayname": "Status Object",
            "x-ves-proto-message": "ves.io.schema.network_interface.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions reported by various components of the system",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Reference to object for current status",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "status": {
                    "description": " Current status of the network interface",
                    "title": "status",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceStatus",
                    "x-displayname": "Status"
                }
            }
        },
        "network_interfaceTunnelInterfaceType": {
            "type": "object",
            "description": "Tunnel Interface Configuration",
            "title": "Tunnel Interface",
            "x-displayname": "Tunnel Interface",
            "x-ves-oneof-field-network_choice": "[\"inside_network\",\"site_local_inside_network\",\"site_local_network\"]",
            "x-ves-oneof-field-node_choice": "[\"cluster\",\"node\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.TunnelInterfaceType",
            "properties": {
                "cluster": {
                    "description": "Exclusive with [node]\nx-displayName: \"Cluster, All Nodes of the Site\"\nConfiguration will apply to given device on all nodes of the site",
                    "title": "Node Independent",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "inside_network": {
                    "description": "Exclusive with [site_local_inside_network site_local_network]\nx-displayName: \"Inside Network\"\nInterface belongs to user configured inside network",
                    "title": "Inside Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum packet size (Maximum Transfer Unit) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"1450\"-",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64",
                    "x-displayname": "Maximum Packet Size (MTU)",
                    "x-ves-example": "1450"
                },
                "node": {
                    "type": "string",
                    "description": "Exclusive with [cluster]\nx-displayName: \"Specific Node\"\nConfiguration will apply to a given device on the given node.",
                    "title": "Node"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the network interface when multiple network interfaces are present in outside network\n Greater the value, higher the priority\n\nExample: - \"42\"-",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "42"
                },
                "site_local_inside_network": {
                    "description": "Exclusive with [inside_network site_local_network]\nx-displayName: \"Site Local Network Inside\"\nInterface belongs to site local network inside",
                    "title": "Site Local Network Inside",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "site_local_network": {
                    "description": "Exclusive with [inside_network site_local_inside_network]\nx-displayName: \"Site Local Network (Outside)\"\nInterface belongs to site local network (outside)",
                    "title": "Site Local Network",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "static_ip": {
                    "description": " Interface IP is configured statically\nRequired: YES",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType",
                    "x-displayname": "Static IP",
                    "x-ves-required": "true"
                },
                "tunnel": {
                    "description": " Tunnel Configuration for this Interface\nRequired: YES",
                    "title": "Tunnel",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Tunnel",
                    "x-ves-required": "true"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed. \n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaIpv4AddressType": {
            "type": "object",
            "description": "IPv4 Address in dot-decimal notation",
            "title": "IPv4 Address",
            "x-displayname": "IPv4 Address",
            "x-ves-proto-message": "ves.io.schema.Ipv4AddressType",
            "properties": {
                "addr": {
                    "type": "string",
                    "description": " IPv4 Address in string form with dot-decimal notation\n\nExample: - \"192.168.1.1\"-",
                    "title": "IPv4 Address",
                    "x-displayname": "IPv4 Address",
                    "x-ves-example": "192.168.1.1"
                }
            }
        },
        "schemaIpv4SubnetType": {
            "type": "object",
            "description": "IPv4 subnets specified as prefix and prefix-length. Prefix length must be \u003c= 32",
            "title": "IPv4 Subnet",
            "x-displayname": "IPv4 Subnet",
            "x-ves-proto-message": "ves.io.schema.Ipv4SubnetType",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": " Prefix-length of the IPv4 subnet. Must be \u003c= 32\n\nExample: - 24-",
                    "title": "Prefix Length",
                    "format": "int64",
                    "x-displayname": "Prefix Length"
                },
                "prefix": {
                    "type": "string",
                    "description": " Prefix part of the IPv4 subnet in string form with dot-decimal notation\n\nExample: - \"192.168.1.0\"-",
                    "title": "Prefix",
                    "x-displayname": "Prefix",
                    "x-ves-example": "192.168.1.0"
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if \n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                }
            }
        }
    },
    "x-displayname": "Network Interface",
    "x-ves-proto-file": "ves.io/schema/network_interface/public_crudapi.proto"
}`

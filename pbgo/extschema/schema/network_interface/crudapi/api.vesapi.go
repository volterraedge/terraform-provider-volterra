// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package crudapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	object "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// augment methods on Object<Oper>Req from api.pb.go

// EntryConverter
func (r *ObjectCreateReq) FromEntry(e db.Entry) {
	r.FromObject(e)
}

func (r *ObjectCreateReq) ToEntry(e db.Entry) {
	r.ToObject(e)
}

// db.Redactor
func (r *ObjectCreateReq) Redact(ctx context.Context) error {
	spec := r.GetSpec()
	if r, ok := interface{}(spec).(db.Redactor); ok {
		return r.Redact(ctx)
	}
	return nil
}

// create setters in object from request for oneof fields

// EntryConverter
func (r *ObjectReplaceReq) FromEntry(e db.Entry) {
	r.FromObject(e)
}

func (r *ObjectReplaceReq) ToEntry(e db.Entry) {
	r.ToObject(e)
}

// db.Redactor
func (r *ObjectReplaceReq) Redact(ctx context.Context) error {
	spec := r.GetSpec()
	if r, ok := interface{}(spec).(db.Redactor); ok {
		return r.Redact(ctx)
	}
	return nil
}

// create setters in object from request for oneof fields

// create setters in response from object for oneof fields

// create setters in response from object for oneof fields

// create setters in response from object for oneof fields

// CLIENT side

func NewObjectCreateReq(e db.Entry) (*ObjectCreateReq, error) {
	r := &ObjectCreateReq{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewObjectReplaceReq(e db.Entry) (*ObjectReplaceReq, error) {
	r := &ObjectReplaceReq{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	uid, err := e.Key()
	if err != nil {
		// See if uid can be got from Metadata.Uid
		obj := e.(*object.DBObject)
		uid = obj.GetMetadata().GetUid()

	}
	r.ObjectUid = uid
	return r, nil
}

func NewObjectGetReq(uid string, opts ...server.CRUDCallOpt) *ObjectGetReq {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	req := &ObjectGetReq{ObjectUid: uid, AllBackrefs: ccOpts.AllBR, BackrefTypes: ccOpts.TypesBR}
	req.IncludeReferredId = ccOpts.IncludeReferredID
	return req
}

func newObjectListReqFrom(cco *server.CrudCallOpts) (*ObjectListReq, error) {
	r := &ObjectListReq{
		TenantFilter:      cco.TenantFilter,
		NamespaceFilter:   cco.NamespaceFilter,
		ReportFields:      cco.ReportFields,
		IncludeReferredId: cco.IncludeReferredID,
	}
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		r.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	if cco.OutResourceVersion != nil {
		r.ResourceVersion = true
	}
	if cco.PageStart != "" {
		r.PageStart = cco.PageStart
	}
	if cco.PageLimit != 0 {
		r.PageLimit = cco.PageLimit
	}
	return r, nil
}

func NewObjectDeleteReq(uid string) *ObjectDeleteReq {
	return &ObjectDeleteReq{ObjectUid: uid}
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	req, err := NewObjectCreateReq(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if rsp != nil {
		if cco.OutCallResponse != nil {
			cco.OutCallResponse.ProtoMsg = rsp
		}
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	req, err := NewObjectReplaceReq(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*ObjectGetRsp, error) {
	req := NewObjectGetReq(key, opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Getting from grpcClient")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	rsp, err := c.GetRaw(ctx, key, opts...)
	if rsp != nil {
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	var merr *multierror.Error
	gRsp, err := c.GetRaw(ctx, key, opts...)
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	if gRsp == nil {
		return nil, errors.ErrOrNil(merr)
	}
	respDetail := server.GetResponse{}
	respDetail.Entry = object.NewDBObject(nil)
	gRsp.ToObject(respDetail.Entry)
	respDetail.BackRefs, err = gRsp.GetBackrefs(nef)
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	return &respDetail, errors.ErrOrNil(merr)

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ObjectListRsp, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := newObjectListReqFrom(cco)
	if err != nil {
		return nil, err
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.GetMetadata().GetResourceVersion()
	}
	if cco.OutNextPage != nil {
		*cco.OutNextPage = rsp.GetNextPage()
	}
	return rsp, err
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := newObjectListReqFrom(cco)
	if err != nil {
		return nil, err
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	stream, err := c.grpcClient.ListStream(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Listing with grpc client")
	}
	lc := &crudAPIGrpcListStreamClient{stream}
	return lc, nil

}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req := NewObjectDeleteReq(key)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

type crudAPIGrpcListStreamClient struct {
	stream API_ListStreamClient
}

func (lc *crudAPIGrpcListStreamClient) RecvIDs() ([]string, error) {
	idSet := []string{}
	rsp, err := lc.stream.Recv()
	if rsp == nil {
		return idSet, err
	}
	for _, li := range rsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err
}

func (lc *crudAPIGrpcListStreamClient) RecvItems() ([]server.ListItem, error) {
	sliSet := []server.ListItem{}
	rsp, err := lc.stream.Recv()
	if rsp == nil {
		return sliSet, err
	}
	for _, li := range rsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if e != nil && cco.RequestJSON != "" {
		return nil, fmt.Errorf("Both entry and WithRequestJSON() specified")
	}
	if e == nil && cco.RequestJSON == "" {
		return nil, fmt.Errorf("Neither entry nor WithRequestJSON() specified")
	}

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.network_interface.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Objects", c.baseURL, t)

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		req, err := NewObjectCreateReq(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		j, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "RestClient Create")
		}
		jsn = j
	}

	hReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &ObjectCreateRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	o := object.NewDBObject(nil)
	rspo.ToObject(o)
	return o, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if e != nil && cco.RequestJSON != "" {
		return fmt.Errorf("Both entry and WithRequestJSON() specified")
	}
	if e == nil && cco.RequestJSON == "" {
		return fmt.Errorf("Neither entry nor WithRequestJSON() specified")
	}

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		rReq, err := NewObjectReplaceReq(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq.ResourceVersion = cco.ResourceVersion
		j, err := codec.ToJSON(rReq, codec.ToWithUseProtoFieldName())
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		jsn = j
	}

	var objUID string
	reqMap := make(map[string]interface{})
	if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
		return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
	}
	md, ok := reqMap["metadata"].(map[string]interface{})
	if !ok {
		return fmt.Errorf("Request %s does not have 'metadata'", jsn)
	}
	if val, ok := md["uid"].(string); ok {
		objUID = val
	} else {
		return fmt.Errorf("Request %s does not have 'metadata.uid'", jsn)
	}

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.network_interface.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Object/%s", c.baseURL, t, objUID)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	rspo := &ObjectReplaceRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*ObjectGetRsp, error) {
	req := NewObjectGetReq(key, opts...)

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.network_interface.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Object/%s", c.baseURL, t, req.ObjectUid)

	hReq, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &ObjectGetRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		o := object.NewDBObject(nil)
		gRsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	var merr *multierror.Error
	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	if gRsp != nil {
		respDetail.Entry = object.NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		respDetail.BackRefs, err = gRsp.GetBackrefs(nef)
		if err != nil {
			merr = multierror.Append(merr, err)
		}
		return &respDetail, errors.ErrOrNil(merr)
	}

	return nil, errors.ErrOrNil(merr)

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ObjectListRsp, error) {
	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.network_interface.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Objects", c.baseURL, t)

	hReq, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	for _, fVal := range cco.TenantFilter {
		q.Add("tenant_filter", fVal)
	}
	for _, fVal := range cco.NamespaceFilter {
		q.Add("namespace_filter", fVal)
	}
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}

	if cco.IncludeReferredID {
		q.Add("include_referred_id", "true")
	}

	if cco.OutResourceVersion != nil {
		q.Add("resource_version", "true")
	}
	if cco.PageStart != "" {
		q.Add("page_start", cco.PageStart)
	}
	if cco.PageLimit != 0 {
		q.Add("page_limit", fmt.Sprintf("%d", cco.PageLimit))
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ObjectListRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.GetMetadata().GetResourceVersion()
	}
	if cco.OutNextPage != nil {
		*cco.OutNextPage = rspo.GetNextPage()
	}
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq := NewObjectDeleteReq(key)

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.network_interface.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Object/%s", c.baseURL, t, dReq.ObjectUid)

	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}

	rspo := &ObjectDeleteRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	var bURL string
	if strings.HasSuffix(baseURL, "/") {
		bURL = baseURL[:len(baseURL)-1]
	} else {
		bURL = baseURL
	}
	crcl := &crudAPIRestClient{bURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	svc svcfw.Service
}

func (c *APIInprocClient) Create(ctx context.Context, req *ObjectCreateReq, opts ...grpc.CallOption) (*ObjectCreateRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.network_interface.crudapi.API.Create")
	return oah.Create(ctx, req)
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ObjectReplaceReq, opts ...grpc.CallOption) (*ObjectReplaceRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.network_interface.crudapi.API.Replace")
	return oah.Replace(ctx, req)
}

func (c *APIInprocClient) Get(ctx context.Context, req *ObjectGetReq, opts ...grpc.CallOption) (*ObjectGetRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.network_interface.crudapi.API.Get")
	return oah.Get(ctx, req)
}

func (c *APIInprocClient) List(ctx context.Context, req *ObjectListReq, opts ...grpc.CallOption) (*ObjectListRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.network_interface.crudapi.API.List")
	return oah.List(ctx, req)
}

func (c *APIInprocClient) ListStream(ctx context.Context, req *ObjectListReq, opts ...grpc.CallOption) (API_ListStreamClient, error) {
	return nil, fmt.Errorf("ListStream Not implemented")
}

func (c *APIInprocClient) Delete(ctx context.Context, req *ObjectDeleteReq, opts ...grpc.CallOption) (*ObjectDeleteRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.network_interface.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.network_interface.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.network_interface.crudapi.API.Delete")
	return oah.Delete(ctx, req)
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	return &APIInprocClient{svc: svc}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	cl APIClient
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewObjectCreateReq(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}

	rsp, err := c.cl.Create(ctx, req)
	if rsp != nil {
		if cco.OutCallResponse != nil {
			cco.OutCallResponse.ProtoMsg = rsp
		}
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	req, err := NewObjectReplaceReq(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.cl.Replace(ctx, req)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*ObjectGetRsp, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req := NewObjectGetReq(key, opts...)
	rsp, err := c.cl.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	rsp, err := c.GetRaw(ctx, key, opts...)
	if rsp != nil {
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	var merr *multierror.Error
	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	if gRsp != nil {
		respDetail.Entry = object.NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		respDetail.BackRefs, err = gRsp.GetBackrefs(nef)
		if err != nil {
			merr = multierror.Append(merr, err)
		}
		return &respDetail, errors.ErrOrNil(merr)
	}

	return nil, errors.ErrOrNil(merr)

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ObjectListRsp, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := newObjectListReqFrom(cco)
	if err != nil {
		return nil, err
	}
	rsp, err := c.cl.List(ctx, req)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.GetMetadata().GetResourceVersion()
	}
	if cco.OutNextPage != nil {
		*cco.OutNextPage = rsp.GetNextPage()
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewObjectDeleteReq(key)
	rsp, err := c.cl.Delete(ctx, req)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	return &crudAPIInprocClient{cl: NewAPIInprocClient(svc)}
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.network_interface.crudapi.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.network_interface.crudapi.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *ObjectCreateReq) (*ObjectCreateRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		return nil, errors.Wrapf(err, "Filling oneof default choice")
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.crudapi.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					return nil, errors.Wrap(err, "Validating private create request")
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.network_interface.crudapi.API.Create"), zap.Error(err))
			}
		}
	}
	obj := object.NewDBObject(nil)
	req.ToObject(obj)
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}

	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Create")).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		return nil, status.Error(codes.ResourceExhausted, errors.Wrap(err, "Create with NewObjectCreateRsp").Error())
	}
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ObjectReplaceReq) (*ObjectReplaceRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		return nil, fmt.Errorf("Nil spec in Replace Request")
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		return nil, errors.Wrapf(err, "Filling oneof default choice")
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.crudapi.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					return nil, errors.Wrap(err, "Validating private replace request")
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.network_interface.crudapi.API.Replace"), zap.Error(err))
			}
		}
	}
	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Replace")).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		return nil, status.Error(codes.ResourceExhausted, errors.Wrap(err, "Replace with NewObjectReplaceRsp").Error())
	}
	return rsp, nil

}

func (s *APISrv) Get(ctx context.Context, req *ObjectGetReq) (*ObjectGetRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.crudapi.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				return nil, errors.Wrap(err, "Validating private get request")
			}
		}
	}
	key := req.ToUid()
	rsrcReq := &server.ResourceGetRequest{IsPublic: false, UID: key, AllBackRefs: req.AllBackrefs, BackRefTypes: req.BackrefTypes}
	rsrcReq.OmitReferredID = !req.IncludeReferredId
	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Get")).Err()
	}
	rsp, err := NewObjectGetRsp(req, rsrcRsp)
	if err != nil {
		return nil, status.Error(codes.ResourceExhausted, errors.Wrap(err, "Get with NewObjectGetRsp").Error())
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ObjectListReq) (*ObjectListRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.crudapi.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				return nil, errors.Wrap(err, "Validating private list request")
			}
		}
	}
	var merr error
	rsrcReq := &server.ResourceListRequest{
		TenantFilter:       req.TenantFilter,
		NamespaceFilter:    req.NamespaceFilter,
		LabelFilter:        req.LabelFilter,
		RspStreamed:        false,
		GetResourceVersion: req.ResourceVersion,
		OmitReferredID:     !req.IncludeReferredId,
		PageStart:          req.PageStart,
		PageLimit:          req.PageLimit,
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "List"))
	}
	rsp, err := NewObjectListRsp(req, rsrcRsp.Items)
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	rsp.Metadata.ResourceVersion = rsrcRsp.ResourceVersion
	rsp.NextPage = rsrcRsp.NextPage
	return rsp, merr
}

func (s *APISrv) ListStream(req *ObjectListReq, stream API_ListStreamServer) error {
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		TenantFilter:    req.TenantFilter,
		NamespaceFilter: req.NamespaceFilter,
		LabelFilter:     req.LabelFilter,
		RspStreamed:     true,
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(stream.Context(), rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListStream"))
	}
	streamSvr := &crudAPIListStreamServer{stream}
	for item := range rsrcRsp.ItemsCh {
		if err := streamSvr.SendResource(req, item); err != nil {
			merr = multierror.Append(merr, errors.Wrap(err, "Stream-Send"))
			continue
		}
	}
	return errors.ErrOrNil(merr)
}

func (s *APISrv) Delete(ctx context.Context, req *ObjectDeleteReq) (*ObjectDeleteRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.network_interface.crudapi.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					return nil, errors.Wrap(err, "Validating private delete request")
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.network_interface.crudapi.API.Delete"), zap.Error(err))
			}
		}
	}
	key := req.ToUid()
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Delete")).Err()
	}
	return &ObjectDeleteRsp{}, nil
}

// Assert that APISrv implements both the generated gRPC APIServer interface and the
// stdlib CRUDServer interface
var (
	_ APIServer = &APISrv{}
)

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.crudapi.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.crudapi.API", strings.Join(sl[:len(sl)-1], "."))
}

// implements both stdlib.server.ListStreamServer and API_ListStreamServer
type crudAPIListStreamServer struct {
	stream API_ListStreamServer
}

func (lc *crudAPIListStreamServer) Context() context.Context {
	return lc.stream.Context()
}

func (lc *crudAPIListStreamServer) SendResource(r *ObjectListReq, item *server.ResourceListResponseItem) error {
	lRsp, err := NewObjectListRsp(r, []*server.ResourceListResponseItem{item})
	if err != nil {
		return errors.Wrap(err, "SendResource with NewObjectListRsp")
	}
	if err := lc.Send(lRsp); err != nil {
		return errors.Wrap(err, "ListStreamServer.SendResource()")
	}
	return nil
}

func (lc *crudAPIListStreamServer) Send(o *ObjectListRsp) error {
	if err := lc.stream.Send(o); err != nil {
		return errors.Wrap(err, "ListStreamServer.Send()")
	}
	return nil
}

// Implement GetReq interface
func (r *ObjectGetReq) ToUid() string {
	return r.ObjectUid
}

func (r *ObjectGetReq) GetBackrefParam() (bool, []string) {
	return r.AllBackrefs, r.BackrefTypes
}

// Implement DeleteReq interface
func (r *ObjectDeleteReq) ToUid() string {
	return r.ObjectUid
}

func (r *ObjectCreateRsp) Key() string {
	return r.ObjectUid
}

func (r *ObjectGetRsp) GetBackrefs(ef db.NewEntryFunc) ([]db.Entry, error) {
	brEnts := []db.Entry{}
	bRefs := r.GetEntBackrefs()
	for _, br := range bRefs {
		// convert schema.ves.io/ves.io.examplesvc.objectone.Object to ves.io.examplesvc.objectone.Object
		sl := strings.Split(br.TypeUrl, "/")
		ot := sl[len(sl)-1]
		ent, err := ef(ot, db.OpWithSerializedBytes(br.Value))
		if err != nil {
			return nil, errors.Wrap(err, "NewEntry")
		}
		brEnts = append(brEnts, ent)
	}

	return brEnts, nil
}

// Implement server.ListItem interface on ObjectListRspItem
func (l *ObjectListRspItem) GetObjUid() string {
	return l.ObjectUid
}

// Implement server.SROListItem interface on ObjectListRspItem
func (l *ObjectListRspItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ObjectListRspItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ObjectListRspItem) GetObjName() string {
	return l.Name
}

func (l *ObjectListRspItem) GetObjLabels() map[string]string {
	return l.Labels
}

// New<oper>Rsp, New<oper>RspFromJSON
func NewObjectCreateRsp(e db.Entry) (*ObjectCreateRsp, error) {
	rspo := &ObjectCreateRsp{}
	switch e.(type) {
	case nil:
		return rspo, nil
	}
	o, ok := e.(*object.DBObject)
	if !ok {
		return nil, fmt.Errorf("Entry not of type *object.DBObject in NewObjectCreateRsp")
	}
	key, err := e.Key()
	if err != nil {
		return nil, errors.Wrap(err, "CreateRsp getting Key()")
	}
	rspo.ObjectUid = key
	rspo.FromObject(o)
	return rspo, nil
}

func NewObjectReplaceRsp(e db.Entry) (*ObjectReplaceRsp, error) {
	rspo := &ObjectReplaceRsp{}
	switch e.(type) {
	case nil:
		return rspo, nil
	}
	o, ok := e.(*object.DBObject)
	if !ok {
		return nil, fmt.Errorf("Entry not of type *object.DBObject in NewObjectReplaceRsp")
	}
	rspo.FromObject(o)
	return rspo, nil
}

func NewObjectGetRsp(r *ObjectGetReq, rsrcRsp *server.ResourceGetResponse) (*ObjectGetRsp, error) {
	rspo := &ObjectGetRsp{}
	e := rsrcRsp.Entry
	brEntries := rsrcRsp.BackRefs
	if e == nil {
		return rspo, nil
	}
	o, ok := e.(*object.DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *object.DBObject in NewObjectGetRsp")
	}
	rspo.ResourceVersion = rsrcRsp.ResourceVersion
	rspo.FromObject(o)
	// Backref
	getBackrefsFunc := func() ([]*google_protobuf.Any, error) {
		var merr *multierror.Error
		var entBackrefs []*google_protobuf.Any
		for _, brEnt := range brEntries {
			brSer, err := brEnt.MarshalBytes()
			if err != nil {
				merr = multierror.Append(merr, err)
				continue
			}
			entBackrefs = append(entBackrefs, &google_protobuf.Any{TypeUrl: "schema.ves.io/" + brEnt.Type(), Value: brSer})
		}
		return entBackrefs, errors.ErrOrNil(merr)
	}
	entBackrefs, err := getBackrefsFunc()
	if err != nil {
		return nil, err
	}
	rspo.EntBackrefs = entBackrefs
	d, err := o.GetDB()
	if err != nil {
		return nil, errors.Wrap(err, "GetRsp")
	}
	statusObjs, err := object.FindObjectStatus(context.Background(), d, o.GetObjUid())
	if err != nil {
		return nil, errors.Wrap(err, "GetRsp")
	}
	rspo.Status = statusObjs
	return rspo, nil
}

func NewObjectListRsp(req *ObjectListReq, rsrcRspItems []*server.ResourceListResponseItem) (*ObjectListRsp, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ObjectListReq")
	}
	var errs error
	o := &ObjectListRsp{}
	o.Metadata = &ves_io_schema.ListMetaType{}
	o.Uids = []string{}
	o.Items = []*ObjectListRspItem{}
	for _, rsrcItem := range rsrcRspItems {
		if rsrcItem == nil {
			errs = multierror.Append(errs, fmt.Errorf("ResourceListResponseItem is nil"))
			continue
		}
		e := rsrcItem.Entry
		dbObj, ok := e.(*object.DBObject)
		if !ok {
			errs = multierror.Append(errs, fmt.Errorf("Expected %T, got %T: %v", &object.DBObject{}, e, e))
			continue
		}
		key, err := dbObj.Key()
		if err != nil {
			errs = multierror.Append(errs, errors.WithMessagef(err, "Key() %v FAILED", dbObj))
			continue
		}

		tenant := dbObj.GetSystemMetadata().GetTenant()
		namespace := dbObj.GetMetadata().GetNamespace()
		name := dbObj.GetMetadata().GetName()
		labels := dbObj.GetMetadata().GetLabels()

		// TODO: DEPRECATE setting to o.Uids
		o.Uids = append(o.Uids, key)

		item := &ObjectListRspItem{
			ObjectUid: key,
			Tenant:    tenant,
			Namespace: namespace,
			Name:      name,
			Labels:    labels,
		}
		if len(req.ReportFields) > 0 {
			item.FromObject(e)
		}
		o.Items = append(o.Items, item)
	}
	return o, errs
}

func NewObjectDeleteRsp(ec ErrorCode) (*ObjectDeleteRsp, error) {
	return &ObjectDeleteRsp{Err: ec}, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "ves.io/schema/network_interface/crudapi/api.proto",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/ves.io.schema.network_interface/Object/{object_uid}": {
            "get": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectGetRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "all_backrefs",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "backref_types",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Get"
            },
            "delete": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectDeleteRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Delete"
            },
            "put": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Replace"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.network_interface/Objects": {
            "get": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectListRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenant_filter",
                        "description": "Filters executed on server-side - all types of filters ANDed\nTenants to scope the listing of objects - if empty all tenants considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "namespace_filter",
                        "description": "Namespaces to scope the listing of objects - if empty all namespaces considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "label_filter",
                        "description": "k8s style label selector expression.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_fields",
                        "description": "TODO: currently even if one specified implementation will return all fields.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resource_version",
                        "description": "Get the resource_version associated with the list.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "page_start",
                        "description": "The value for PageStart indicating from very first entry. This will be ignored unless page_limit\nis also defined.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_limit",
                        "description": "The maximum number of items to return in a single page. If this is greater than 0, and page_start is unset,\nthe first page will be returned.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.List"
            },
            "post": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Create"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.network_interface/Objects/stream": {
            "get": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.ListStream",
                "responses": {
                    "200": {
                        "description": "A successful response.(streaming responses)",
                        "schema": {
                            "$ref": "#/x-stream-definitions/crudapiObjectListRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenant_filter",
                        "description": "Filters executed on server-side - all types of filters ANDed\nTenants to scope the listing of objects - if empty all tenants considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "namespace_filter",
                        "description": "Namespaces to scope the listing of objects - if empty all namespaces considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "label_filter",
                        "description": "k8s style label selector expression.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_fields",
                        "description": "TODO: currently even if one specified implementation will return all fields.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resource_version",
                        "description": "Get the resource_version associated with the list.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "page_start",
                        "description": "The value for PageStart indicating from very first entry. This will be ignored unless page_limit\nis also defined.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_limit",
                        "description": "The maximum number of items to return in a single page. If this is greater than 0, and page_start is unset,\nthe first page will be returned.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-liststream"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.ListStream"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.network_interface/introspect/read/Object/{object_uid}": {
            "get": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectGetRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "all_backrefs",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "backref_types",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Get"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.network_interface/introspect/read/Objects": {
            "get": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectListRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenant_filter",
                        "description": "Filters executed on server-side - all types of filters ANDed\nTenants to scope the listing of objects - if empty all tenants considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "namespace_filter",
                        "description": "Namespaces to scope the listing of objects - if empty all namespaces considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "label_filter",
                        "description": "k8s style label selector expression.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_fields",
                        "description": "TODO: currently even if one specified implementation will return all fields.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resource_version",
                        "description": "Get the resource_version associated with the list.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "page_start",
                        "description": "The value for PageStart indicating from very first entry. This will be ignored unless page_limit\nis also defined.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_limit",
                        "description": "The maximum number of items to return in a single page. If this is greater than 0, and page_start is unset,\nthe first page will be returned.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.List"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.network_interface/introspect/write/Object/{object_uid}": {
            "delete": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectDeleteRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Delete"
            },
            "put": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Replace"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.network_interface/introspect/write/Objects": {
            "post": {
                "operationId": "ves.io.schema.network_interface.crudapi.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-network_interface-crudapi-api-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.network_interface.crudapi.API.Create"
            },
            "x-displayname": "",
            "x-ves-object-kind": "network_interface",
            "x-ves-object-type": "ves.io.schema.network_interface.Object",
            "x-ves-proto-service": "ves.io.schema.network_interface.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        }
    },
    "definitions": {
        "crudapiObjectCreateReq": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectCreateReq",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "spec": {
                    "$ref": "#/definitions/network_interfaceSpecType"
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "crudapiObjectCreateRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectCreateRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/network_interfacecrudapiErrorCode"
                },
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "object_uid": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/network_interfaceSpecType"
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "crudapiObjectDeleteRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectDeleteRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/network_interfacecrudapiErrorCode"
                }
            }
        },
        "crudapiObjectGetRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectGetRsp",
            "properties": {
                "ent_backrefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "err": {
                    "$ref": "#/definitions/network_interfacecrudapiErrorCode"
                },
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "resource_version": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/network_interfaceSpecType"
                },
                "status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network_interfaceStatusObject"
                    }
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "crudapiObjectListRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectListRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/network_interfacecrudapiErrorCode"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/crudapiObjectListRspItem"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/schemaListMetaType"
                },
                "next_page": {
                    "type": "string",
                    "title": "Will only be set if request included a page_limit and there are more pages beyond the current page"
                },
                "uids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "crudapiObjectListRspItem": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectListRspItem",
            "properties": {
                "labels": {
                    "type": "object"
                },
                "metadata": {
                    "title": "If ObjectListReq has any specified report_fields, it will appear in below fields",
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "object_uid": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/network_interfaceSpecType"
                },
                "status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network_interfaceStatusObject"
                    }
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                },
                "tenant": {
                    "type": "string"
                }
            }
        },
        "crudapiObjectReplaceReq": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectReplaceReq",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "object_uid": {
                    "type": "string"
                },
                "resource_version": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/network_interfaceSpecType"
                }
            }
        },
        "crudapiObjectReplaceRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.network_interface.crudapi.ObjectReplaceRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/network_interfacecrudapiErrorCode"
                },
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "spec": {
                    "$ref": "#/definitions/network_interfaceSpecType"
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "network_interfaceDHCPIPV6NetworkType": {
            "type": "object",
            "description": "DHCP IPV6 network type configuration",
            "title": "DHCPIPV6NetworkType",
            "x-displayname": "DHCPIPV6NetworkType",
            "x-ves-displayorder": "1,5,4",
            "x-ves-oneof-field-network_prefix_choice": "[\"network_prefix\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPIPV6NetworkType",
            "properties": {
                "network_prefix": {
                    "type": "string",
                    "description": "Exclusive with []\n Network Prefix to be used for IPV6 address auto configuration\n\nExample: - \"2001::0/64\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6_prefix: true\n",
                    "title": "Network Prefix",
                    "x-displayname": "Network Prefix",
                    "x-ves-example": "2001::0/64",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6_prefix": "true"
                    }
                },
                "pool_settings": {
                    "description": " Controls how DHCPV6 pools are handled\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DHCP Pool Settings",
                    "$ref": "#/definitions/network_interfaceDHCPPoolSettingType",
                    "x-displayname": "DHCP Pool Settings",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "pools": {
                    "type": "array",
                    "description": " List of non overlapping ip address ranges.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "DHCP pools",
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/network_interfaceDHCPIPV6PoolType"
                    },
                    "x-displayname": "DHCP Pools",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "network_interfaceDHCPIPV6PoolType": {
            "type": "object",
            "description": "DHCP IPV6 pool is a range of IP addresses (start ip and end ip).",
            "title": "DHCP IPV6 Range",
            "x-displayname": "DHCP IPV6 Range",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPIPV6PoolType",
            "properties": {
                "end_ip": {
                    "type": "string",
                    "description": " Ending IPV6 address of the pool range.\n In case of address allocator, offset is derived based on network prefix.\n\nExample: - \"2001::200\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "End IP",
                    "x-displayname": "Ending IPV6",
                    "x-ves-example": "2001::200",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "start_ip": {
                    "type": "string",
                    "description": " Starting IPV6 address of the pool range.\n In case of address allocator, offset is derived based on network prefix.\n 2001::1 with prefix length of 64, start offset is 5\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "Start IPV6",
                    "x-displayname": "Starting IPV6",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                }
            }
        },
        "network_interfaceDHCPIPV6StatefulServer": {
            "type": "object",
            "title": "DHCPIPV6StatefulServer",
            "x-displayname": "DHCPIPV6 Stateful Server",
            "x-ves-oneof-field-interfaces_addressing_choice": "[\"automatic_from_end\",\"automatic_from_start\",\"interface_ip_map\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPIPV6StatefulServer",
            "properties": {
                "automatic_from_end": {
                    "description": "Exclusive with [automatic_from_start interface_ip_map]\n Assign automatically from End of the first network in the list",
                    "title": "Automatic End",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Automatic End"
                },
                "automatic_from_start": {
                    "description": "Exclusive with [automatic_from_end interface_ip_map]\n Assign automatically from start of the first network in the list",
                    "title": "Automatic Start",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Automatic Start"
                },
                "dhcp_networks": {
                    "type": "array",
                    "description": " List of networks from which DHCP server can allocate ip addresses\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 1\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "DHCP IPV6 Networks",
                    "minItems": 1,
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/network_interfaceDHCPIPV6NetworkType"
                    },
                    "x-displayname": "DHCP IPV6 Networks",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "1",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "fixed_ip_map": {
                    "type": "object",
                    "description": " Fixed MAC address to ipv6 assignments, Key: Mac address, Value: IPV6 Address\n Assign fixed IPv6 addresses based on the MAC Address of the DHCP Client.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.mac: true\n  ves.io.schema.rules.map.max_pairs: 128\n  ves.io.schema.rules.map.unique_values: true\n  ves.io.schema.rules.map.values.string.ipv6: true\n",
                    "title": "Fixed IPV6 Assignments",
                    "x-displayname": "Fixed MAC Address to IPV6 Assignments",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.mac": "true",
                        "ves.io.schema.rules.map.max_pairs": "128",
                        "ves.io.schema.rules.map.unique_values": "true",
                        "ves.io.schema.rules.map.values.string.ipv6": "true"
                    }
                },
                "interface_ip_map": {
                    "description": "Exclusive with [automatic_from_end automatic_from_start]\n Configured address for every node",
                    "title": "Configured Address",
                    "$ref": "#/definitions/network_interfaceDHCPInterfaceIPV6Type",
                    "x-displayname": "Configured"
                }
            }
        },
        "network_interfaceDHCPInterfaceIPType": {
            "type": "object",
            "description": "Specify static IPv4 addresses per node.",
            "title": "Interface IPv4 Assignments",
            "x-displayname": "Interface IPv4 Assignments",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPInterfaceIPType",
            "properties": {
                "interface_ip_map": {
                    "type": "object",
                    "description": " Specify static IPv4 addresses per site:node.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 128\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.max_pairs: 64\n  ves.io.schema.rules.map.values.string.ipv4: true\n",
                    "title": "Site:Node to IP mapping",
                    "x-displayname": "Site:Node to IPv4 Address Mapping",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "128",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.max_pairs": "64",
                        "ves.io.schema.rules.map.values.string.ipv4": "true"
                    }
                }
            }
        },
        "network_interfaceDHCPInterfaceIPV6Type": {
            "type": "object",
            "description": "Map of Interface IPV6 assignments per node",
            "title": "Interface IPV6 Assignments",
            "x-displayname": "Interface IPV6 Assignments",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPInterfaceIPV6Type",
            "properties": {
                "interface_ip_map": {
                    "type": "object",
                    "description": " Map of Site:Node to IPV6 address.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 128\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.max_pairs: 64\n  ves.io.schema.rules.map.values.string.ipv6: true\n",
                    "title": "Site:Node to IPV6 mapping",
                    "x-displayname": "Site:Node to IPV6 Mapping",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "128",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.max_pairs": "64",
                        "ves.io.schema.rules.map.values.string.ipv6": "true"
                    }
                }
            }
        },
        "network_interfaceDHCPNetworkType": {
            "type": "object",
            "description": "DHCP network configuration",
            "title": "DHCP Network",
            "x-displayname": "DHCP Network",
            "x-ves-displayorder": "1,12,4,5,9",
            "x-ves-oneof-field-dns_choice": "[\"dns_address\",\"same_as_dgw\"]",
            "x-ves-oneof-field-gateway_choice": "[\"dgw_address\",\"first_address\",\"last_address\"]",
            "x-ves-oneof-field-network_prefix_choice": "[\"network_prefix\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPNetworkType",
            "properties": {
                "dgw_address": {
                    "type": "string",
                    "description": "Exclusive with [first_address last_address]\n Enter a IPv4 address from the network prefix to be used as the default gateway.\n\nExample: - \"10.1.1.10\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Configured Address",
                    "x-displayname": "Static IPv4 Configuration",
                    "x-ves-example": "10.1.1.10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "dns_address": {
                    "type": "string",
                    "description": "Exclusive with [same_as_dgw]\n Enter a IPv4 address from the network prefix to be used as the DNS server.\n\nExample: - \"10.1.1.11\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Configured Address",
                    "x-displayname": "Static IPv4 Configuration",
                    "x-ves-example": "10.1.1.11",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "first_address": {
                    "description": "Exclusive with [dgw_address last_address]\n First usable address from the network prefix is chosen as default gateway",
                    "title": "First Address",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "First Address of Network"
                },
                "last_address": {
                    "description": "Exclusive with [dgw_address first_address]\n Last usable address from the network prefix is chosen as default gateway",
                    "title": "Last Address",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Last Address of Network"
                },
                "network_prefix": {
                    "type": "string",
                    "description": "Exclusive with []\n Set the network prefix for the site. ex: 10.1.1.0/24\n\nExample: - \"10.1.1.0/24\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4_prefix: true\n",
                    "title": "Network Prefix",
                    "x-displayname": "Network Prefix",
                    "x-ves-example": "10.1.1.0/24",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4_prefix": "true"
                    }
                },
                "pool_settings": {
                    "description": " Controls how DHCP pools are handled\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DHCP Pool Settings",
                    "$ref": "#/definitions/network_interfaceDHCPPoolSettingType",
                    "x-displayname": "DHCP Pool Settings",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "pools": {
                    "type": "array",
                    "description": " List of non overlapping ip address ranges.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "DHCP pools",
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/network_interfaceDHCPPoolType"
                    },
                    "x-displayname": "DHCP Pools",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "same_as_dgw": {
                    "description": "Exclusive with [dns_address]\n DNS server address is same as default gateway address",
                    "title": "Default Gateway Address",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Default Gateway Address"
                }
            }
        },
        "network_interfaceDHCPPoolSettingType": {
            "type": "string",
            "description": "Identifies the how to pick the network for Interface.\n\nAddress ranges in DHCP pool list are used for IP Address allocation\nAddress ranges in DHCP pool list are excluded from IP Address allocation",
            "title": "DHCP POOL SETTING",
            "enum": [
                "INCLUDE_IP_ADDRESSES_FROM_DHCP_POOLS",
                "EXCLUDE_IP_ADDRESSES_FROM_DHCP_POOLS"
            ],
            "default": "INCLUDE_IP_ADDRESSES_FROM_DHCP_POOLS",
            "x-displayname": "Interface Network Type",
            "x-ves-proto-enum": "ves.io.schema.network_interface.DHCPPoolSettingType"
        },
        "network_interfaceDHCPPoolType": {
            "type": "object",
            "description": "DHCP pool is a range of IP addresses (start ip and end ip).",
            "title": "DHCP IP Range",
            "x-displayname": "DHCP IP Range",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPPoolType",
            "properties": {
                "end_ip": {
                    "type": "string",
                    "description": " Ending IP of the pool range.\n In case of address allocator, offset is derived based on network prefix.\n 10.1.1.200 with prefix length of 24, end offset is 0.0.0.200\n\nExample: - \"10.1.1.200\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "End IP",
                    "x-displayname": "Ending IP",
                    "x-ves-example": "10.1.1.200",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "start_ip": {
                    "type": "string",
                    "description": " Starting IP of the pool range.\n In case of address allocator, offset is derived based on network prefix.\n 10.1.1.5 with prefix length of 24, start offset is 0.0.0.5\n\nExample: - \"10.1.1.5\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Start IP",
                    "x-displayname": "Starting IP",
                    "x-ves-example": "10.1.1.5",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                }
            }
        },
        "network_interfaceDHCPServerParametersType": {
            "type": "object",
            "title": "DHCPServerParametersType",
            "x-displayname": "DHCPServerParametersType",
            "x-ves-oneof-field-interfaces_addressing_choice": "[\"automatic_from_end\",\"automatic_from_start\",\"interface_ip_map\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.DHCPServerParametersType",
            "properties": {
                "automatic_from_end": {
                    "description": "Exclusive with [automatic_from_start interface_ip_map]\n Assign automatically from end of the first network in the DHCP Network list",
                    "title": "Automatic End",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Automatic End"
                },
                "automatic_from_start": {
                    "description": "Exclusive with [automatic_from_end interface_ip_map]\n Assign automatically from start of the first network in the DHCP Network list",
                    "title": "Automatic Start",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Automatic Start"
                },
                "dhcp_networks": {
                    "type": "array",
                    "description": " List of networks from which DHCP Server can allocate IPv4 Addresses\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 1\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "DHCP Networks",
                    "minItems": 1,
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/network_interfaceDHCPNetworkType"
                    },
                    "x-displayname": "DHCP Networks",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "1",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "fixed_ip_map": {
                    "type": "object",
                    "description": " Assign fixed IPv4 addresses based on the MAC Address of the DHCP Client.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.mac: true\n  ves.io.schema.rules.map.max_pairs: 128\n  ves.io.schema.rules.map.unique_values: true\n  ves.io.schema.rules.map.values.string.ipv4: true\n",
                    "title": "Fixed IP Assignments",
                    "x-displayname": "Fixed MAC Address to IPv4 Assignments",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.mac": "true",
                        "ves.io.schema.rules.map.max_pairs": "128",
                        "ves.io.schema.rules.map.unique_values": "true",
                        "ves.io.schema.rules.map.values.string.ipv4": "true"
                    }
                },
                "interface_ip_map": {
                    "description": "Exclusive with [automatic_from_end automatic_from_start]\n Statically configure a IPv4 address for every node",
                    "title": "Static IPv4 Configuration",
                    "$ref": "#/definitions/network_interfaceDHCPInterfaceIPType",
                    "x-displayname": "Static IPv4 Configuration"
                }
            }
        },
        "network_interfaceDedicatedInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Dedicated Interface\"\nDedicated Interface Configuration",
            "title": "Dedicated Interface",
            "properties": {
                "cluster": {
                    "description": "x-displayName: \"Cluster, All Node of the site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Cluster",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": "x-displayName: \"Interface Device\"\nx-example: \"eth0\"\nx-required\nName of the device for which interface is configured. Use wwan0 for 4G/LTE.",
                    "title": "Device"
                },
                "is_primary": {
                    "description": "x-displayName: \"Interface is Primary\"\nThis interface is primary",
                    "title": "Interface is Primary",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "monitor": {
                    "description": "x-displayName: \"Enabled\"\nLink Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig"
                },
                "monitor_disabled": {
                    "description": "x-displayName: \"Disabled\"\nLink quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": "x-displayName: \"Maximum Packet Size (MTU)\"\nx-example: \"1450\"\nMaximum packet size (Maximum Transfer Unit) of the interface\nWhen configured, mtu must be between 512 and 16384",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64"
                },
                "node": {
                    "type": "string",
                    "description": "x-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node of the site.",
                    "title": "Node"
                },
                "not_primary": {
                    "description": "x-displayName: \"Interface is Not Primary\"\nThis interface is not primary",
                    "title": "Interface is Not Primary",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "priority": {
                    "type": "integer",
                    "description": "x-displayName: \"Priority\"\nx-example: \"42\"\nPriority of the network interface when multiple network interfaces are present in outside network\nGreater the value, higher the priority",
                    "title": "Priority",
                    "format": "int64"
                }
            }
        },
        "network_interfaceDedicatedManagementInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Dedicated Management Interface\"\nDedicated Interface Configuration",
            "title": "Dedicated Management Interface",
            "properties": {
                "cluster": {
                    "description": "x-displayName: \"Cluster, All Node of the site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Cluster",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": "x-displayName: \"Interface Device\"\nx-example: \"eth0\"\nx-required\nName of the device for which interface is configured",
                    "title": "Device"
                },
                "mtu": {
                    "type": "integer",
                    "description": "x-displayName: \"Maximum Packet Size (MTU)\"\nx-example: \"1450\"\nMaximum packet size (Maximum Transfer Unit) of the interface\nWhen configured, mtu must be between 512 and 16384",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64"
                },
                "node": {
                    "type": "string",
                    "description": "x-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node of the site.",
                    "title": "Node"
                }
            }
        },
        "network_interfaceEthernetInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Ethernet Interface\"\nEthernet Interface Configuration",
            "title": "Ethernet Interface",
            "properties": {
                "cluster": {
                    "description": "x-displayName: \"Cluster, All Nodes of the Site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Node Independent",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": "x-displayName: \"Ethernet Device\"\nx-example: \"eth0\"\nx-required\nInterface configuration for the ethernet device",
                    "title": "Device"
                },
                "dhcp_client": {
                    "description": "x-displayName: \"DHCP Client\"\nInterface gets it's IP address from external DHCP server",
                    "title": "DHCP Client",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "dhcp_server": {
                    "description": "x-displayName: \"DHCP Server\"\nDHCP Server is configured for this interface. IP for this Interface will be derived from the DHCP Server configuration.",
                    "title": "DHCP Server",
                    "$ref": "#/definitions/network_interfaceDHCPServerParametersType"
                },
                "inside_network": {
                    "description": "x-displayName: \"Inside Network\"\nInterface belongs to user configured inside network",
                    "title": "Inside Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "ip_fabric_network": {
                    "description": "x-displayName: \"IP Fabric Network\"\nInterface belongs to IP Fabric network",
                    "title": "IP Fabric Network",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "ipv6_auto_config": {
                    "description": "x-displayName: \"IPV6 AutoConfiguration\"\nConfiguration corresponding to IPV6 auto configuration",
                    "title": "IPV6 Auto configuration",
                    "$ref": "#/definitions/network_interfaceIPV6AutoConfigType"
                },
                "is_primary": {
                    "description": "x-displayName: \"Interface is Primary\"\nThis interface is primary",
                    "title": "Interface is Primary",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "monitor": {
                    "description": "x-displayName: \"Enabled\"\nLink Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig"
                },
                "monitor_disabled": {
                    "description": "x-displayName: \"Disabled\"\nLink quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": "x-displayName: \"Maximum Packet Size (MTU)\"\nx-example: \"1450\"\nMaximum packet size (Maximum Transfer Unit) of the interface\nWhen configured, mtu must be between 512 and 16384",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64"
                },
                "no_ipv6_address": {
                    "description": "x-displayName: \"No IPv6 Address\"\nInterface does not have an IPv6 Address.",
                    "title": "no_ipv6_address",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "node": {
                    "type": "string",
                    "description": "x-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node.",
                    "title": "Node"
                },
                "not_primary": {
                    "description": "x-displayName: \"Interface is Not Primary\"\nThis interface is not primary",
                    "title": "Interface is Not Primary",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "priority": {
                    "type": "integer",
                    "description": "x-displayName: \"Priority\"\nx-example: \"42\"\nPriority of the network interface when multiple network interfaces are present in outside network\nGreater the value, higher the priority",
                    "title": "Priority",
                    "format": "int64"
                },
                "segment_network": {
                    "description": "x-displayName: \"Segment\"",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "site_local_inside_network": {
                    "description": "x-displayName: \"Site Local Network Inside\"\nInterface belongs to site local network inside",
                    "title": "Site Local Network Inside",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "site_local_network": {
                    "description": "x-displayName: \"Site Local Network (Outside)\"\nInterface belongs to site local network (outside)",
                    "title": "Site Local Network",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "srv6_network": {
                    "description": "x-displayName: \"Per Site Srv6 Network\"\nInterface belongs to per site srv6 network",
                    "title": "Per Site Srv6 Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "static_ip": {
                    "description": "x-displayName: \"Static IP\"\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                },
                "static_ipv6_address": {
                    "description": "x-displayName: \"Static IP\"\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                },
                "storage_network": {
                    "description": "x-displayName: \"Storage Network\"\nInterface belongs to site local network inside",
                    "title": "Storage Network",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "untagged": {
                    "description": "x-displayName: \"Untagged\"\nConfigure a untagged ethernet interface",
                    "title": "Untagged",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "vlan_id": {
                    "type": "integer",
                    "description": "x-displayName: \"VLAN Id\"\nConfigure a VLAN tagged ethernet interface",
                    "title": "VLAN Id",
                    "format": "int64"
                }
            }
        },
        "network_interfaceGlobalSpecType": {
            "type": "object",
            "description": "Network Interface specification",
            "title": "Global Specification",
            "x-displayname": "Global Specification",
            "x-ves-oneof-field-interface_choice": "[]",
            "x-ves-oneof-field-monitoring_choice": "[\"monitor\",\"monitor_disabled\"]",
            "x-ves-oneof-field-segment_multiplexing": "[]",
            "x-ves-proto-message": "ves.io.schema.network_interface.GlobalSpecType",
            "properties": {
                "DHCP_server": {
                    "description": " Behave as DHCP server for subnet configured in static addresses.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DHCP Server",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDHCPServer",
                    "x-displayname": "Enable DHCP Server",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "DNS_server": {
                    "description": " Configures how DNS server is derived for the subnet in static addresses",
                    "title": "DNS Server",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDNS",
                    "x-displayname": "DNS Server"
                },
                "address_allocator": {
                    "type": "array",
                    "description": " Reference to an address allocator for the network interface. When set, the allocator is used to\n allocate a subnet for the interface and an address from the subnet is set on the interface.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "Address Allocator",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Address Allocator",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "default_gateway": {
                    "description": " Configures how default gateway is derived for the subnet static addresses",
                    "title": "Default Gateway",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDFGW",
                    "x-displayname": "Default Gateway"
                },
                "device_name": {
                    "type": "string",
                    "description": " Name of the physical network interface device  which this network interface represents.\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Device Name",
                    "x-displayname": "Device Name",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "dhcp_address": {
                    "description": " Enable DHCP based address assignment for this interface.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DHCP Client",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDHCP",
                    "x-displayname": "Enable DHCP Client",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "dhcp_server_params": {
                    "description": " DHCP Server parameters",
                    "title": "DHCP Server parameters",
                    "$ref": "#/definitions/network_interfaceDHCPServerParametersType",
                    "x-displayname": "DHCP Server parameters"
                },
                "interface_ip_map": {
                    "type": "object",
                    "description": " Map of Site:Node to IP address offset. Key:Node, Value:Map\n Value of 10.1.1.5 with network prefix 24, offset is 0.0.0.5\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 128\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.max_pairs: 64\n  ves.io.schema.rules.map.values.string.ipv4: true\n",
                    "title": "Site:Node to IP mapping",
                    "x-displayname": "Site:Node to IP Mapping",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "128",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.max_pairs": "64",
                        "ves.io.schema.rules.map.values.string.ipv4": "true"
                    }
                },
                "ipv6_auto_config": {
                    "description": " IPV6 Addrss Auto configuration parameters",
                    "title": "IPV6 Address Auto Configuration",
                    "$ref": "#/definitions/network_interfaceIPV6AutoConfigType",
                    "x-displayname": "IPV6 Auto Configuration"
                },
                "is_primary": {
                    "type": "boolean",
                    "description": " This interface is primary interface",
                    "title": "Primary Interface",
                    "format": "boolean",
                    "x-displayname": "Primary Interface"
                },
                "monitor": {
                    "description": "Exclusive with [monitor_disabled]\n Link Quality Monitoring parameters. Choosing the option will enable link quality monitoring.",
                    "title": "Monitoring enabled",
                    "$ref": "#/definitions/network_interfaceLinkQualityMonitorConfig",
                    "x-displayname": "Enabled"
                },
                "monitor_disabled": {
                    "description": "Exclusive with [monitor]\n Link quality monitoring disabled on the interface.",
                    "title": "Monitoring disabled",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disabled"
                },
                "mtu": {
                    "type": "integer",
                    "description": " Maximum Transfer Unit (Max packet length) of the interface\n When configured, mtu must be between 512 and 16384\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.ranges: 0,512-16384\n",
                    "title": "Mtu",
                    "format": "int64",
                    "x-displayname": "MTU",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.ranges": "0,512-16384"
                    }
                },
                "network_config": {
                    "description": " Configuration to pick network from interface or fleet",
                    "title": "Network Config Method",
                    "$ref": "#/definitions/network_interfaceInterfaceNetworkType",
                    "x-displayname": "Network Config Method"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of the network interface when multiple network interfaces are present in the fleet object\n Greater the value, higher the priority\n\nExample: - \"42\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 255\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "42",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "255"
                    }
                },
                "static_addresses": {
                    "type": "array",
                    "description": " If DHCP server is enabled, configures the subnet to be used for IP allocation.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Static IP",
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/schemaIpv4SubnetType"
                    },
                    "x-displayname": "Static IP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "tunnel": {
                    "description": " When interface is created as TUNNEL type, then reference to tunnel is specified here",
                    "title": "Tunnel",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceTunnel",
                    "x-displayname": "Tunnel"
                },
                "type": {
                    "description": " Specifies the type of interface (ethernet, vlan, lacp etc)\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Interface Type",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceType",
                    "x-displayname": "Type",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_network": {
                    "type": "array",
                    "description": " Virtual-network for the interface\n This is optional and can contain at most one entry\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "Virtual Network",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Virtual Network",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "vlan_tag": {
                    "type": "integer",
                    "description": " Vlan tag of the interface, valid only if VLAN tagging is enabled\n when vlan_tagging is enabled, value must be between 1 - 4094\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 0\n  ves.io.schema.rules.uint32.lte: 4094\n",
                    "title": "Vlan Tag",
                    "format": "int64",
                    "x-displayname": "VLAN Tag",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "0",
                        "ves.io.schema.rules.uint32.lte": "4094"
                    }
                },
                "vlan_tagging": {
                    "description": " Enable/Disable VLAN tagging on this interface.\n Must be enabled for VLAN interfaces\n\nExample: - \"NETWORK_INTERFACE_VLAN_TAGGING_DISABLE\"-",
                    "title": "Vlan Tagging",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceVLANTagging",
                    "x-displayname": "Enable VLAN Tagging",
                    "x-ves-example": "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE"
                }
            }
        },
        "network_interfaceIPV6AutoConfigRouterType": {
            "type": "object",
            "title": "IPV6AutoConfigRouterType",
            "x-displayname": "IPV6AutoConfigRouterType",
            "x-ves-oneof-field-address_choice": "[\"network_prefix\",\"stateful\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.IPV6AutoConfigRouterType",
            "properties": {
                "dns_config": {
                    "description": " Dns information that needs to added in the RouterAdvetisement",
                    "title": "Dns Information",
                    "$ref": "#/definitions/network_interfaceIPV6DnsConfig",
                    "x-displayname": "DNS Information"
                },
                "network_prefix": {
                    "type": "string",
                    "description": "Exclusive with [stateful]\n Nework prefix that is used as Prefix information\n Allowed only /64 prefix length as per RFC 4862\n\nExample: - \"2001::0/64\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6_prefix: true\n  ves.io.schema.rules.string.pattern: .*::/64$\n",
                    "title": "Prefix Info",
                    "x-displayname": "Network Prefix",
                    "x-ves-example": "2001::0/64",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6_prefix": "true",
                        "ves.io.schema.rules.string.pattern": ".*::/64$"
                    }
                },
                "stateful": {
                    "description": "Exclusive with [network_prefix]\n Use stateful dhcp server which provides the IPV6 address to clients\n works along with Router Advertisement' Managed flag",
                    "title": "Stateful DHCP IPV6 server",
                    "$ref": "#/definitions/network_interfaceDHCPIPV6StatefulServer",
                    "x-displayname": "StateFul DHCPIPV6 server"
                }
            }
        },
        "network_interfaceIPV6AutoConfigType": {
            "type": "object",
            "title": "IPV6AutoConfigType",
            "x-displayname": "IPV6AutoConfigType",
            "x-ves-oneof-field-autoconfig_choice": "[\"host\",\"router\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.IPV6AutoConfigType",
            "properties": {
                "host": {
                    "description": "Exclusive with [router]\n System behaves like auto config host and receives the auto configuration parameters from other\n auto configuration routers. This is similar to a DHCP Client.",
                    "title": "host",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Auto Config Host"
                },
                "router": {
                    "description": "Exclusive with [host]\n System behaves like auto config Router and provides auto config parameters. This is similar to a DHCP Server.",
                    "title": "router",
                    "$ref": "#/definitions/network_interfaceIPV6AutoConfigRouterType",
                    "x-displayname": "Auto Config Router"
                }
            }
        },
        "network_interfaceIPV6DnsConfig": {
            "type": "object",
            "title": "IPV6DnsConfig",
            "x-displayname": "IPV6DnsConfig",
            "x-ves-oneof-field-dns_choice": "[\"configured_list\",\"local_dns\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.IPV6DnsConfig",
            "properties": {
                "configured_list": {
                    "description": "Exclusive with [local_dns]\n Configured address outside network range - external dns server",
                    "title": "Configured Address List",
                    "$ref": "#/definitions/network_interfaceIPV6DnsList",
                    "x-displayname": "Configured Address List"
                },
                "local_dns": {
                    "description": "Exclusive with [configured_list]\n Choose the address from the network prefix range as dns server",
                    "title": "Local Dns Address",
                    "$ref": "#/definitions/network_interfaceIPV6LocalDnsAddress",
                    "x-displayname": "Local DNS Address"
                }
            }
        },
        "network_interfaceIPV6DnsList": {
            "type": "object",
            "title": "IPV6DnsList",
            "x-displayname": "IPV6DnsList",
            "x-ves-proto-message": "ves.io.schema.network_interface.IPV6DnsList",
            "properties": {
                "dns_list": {
                    "type": "array",
                    "description": " List of IPV6 Addresses acting as Dns servers\n\nExample: - \"2001::11\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 4\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "Dns List",
                    "minItems": 1,
                    "maxItems": 4,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Dns List",
                    "x-ves-example": "2001::11",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "4",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true",
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                }
            }
        },
        "network_interfaceIPV6LocalDnsAddress": {
            "type": "object",
            "title": "IPV6LocalDnsAddress",
            "x-displayname": "IPV6LocalDnsAddress",
            "x-ves-oneof-field-local_dns_choice": "[\"configured_address\",\"first_address\",\"last_address\"]",
            "x-ves-proto-message": "ves.io.schema.network_interface.IPV6LocalDnsAddress",
            "properties": {
                "configured_address": {
                    "type": "string",
                    "description": "Exclusive with [first_address last_address]\n Configured address from the network prefix is chosen as dns server\n\nExample: - \"2001::10\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "Configured Address",
                    "x-displayname": "Configured Address",
                    "x-ves-example": "2001::10",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "first_address": {
                    "description": "Exclusive with [configured_address last_address]\n First usable address from the network prefix is chosen as dns server",
                    "title": "First Address",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "First Address of Network"
                },
                "last_address": {
                    "description": "Exclusive with [configured_address first_address]\n Last usable address from the network prefix is chosen as dns server",
                    "title": "Last Address",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Last Address of Network"
                }
            }
        },
        "network_interfaceInterfaceNetworkType": {
            "type": "string",
            "description": "Identifies the how to pick the network for Interface.\n\nBackward compatibility to existing config or per site network\nTake site local from from fleet\nTake site local inside from from fleet\nNetwork interface is used to connect to storage network\nNetwork interface is used to connect to storage network\nNetwork interface is used to connect to IP Fabric network\nNetwork interface is used to connect to segment network",
            "title": "Interface Network Type",
            "enum": [
                "NETWORK_INTERFACE_NETWORK_REF",
                "NETWORK_INTERFACE_SITE_LOCAL",
                "NETWORK_INTERFACE_SITE_LOCAL_INSIDE",
                "NETWORK_INTERFACE_STORAGE",
                "NETWORK_INTERFACE_MANAGEMENT",
                "NETWORK_INTERFACE_IPFABRIC",
                "NETWORK_INTERFACE_SEGMENT"
            ],
            "default": "NETWORK_INTERFACE_NETWORK_REF",
            "x-displayname": "Interface Network Type",
            "x-ves-proto-enum": "ves.io.schema.network_interface.InterfaceNetworkType"
        },
        "network_interfaceLayer2InterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Layer2 Interface\"\nLayer2 Interface Configuration",
            "title": "Layer2 interface",
            "properties": {
                "l2sriov_interface": {
                    "description": "x-displayName: \"SR-IOV interface\"\nLayer2 SR-IOV interface",
                    "title": "SR-IOV interface",
                    "$ref": "#/definitions/network_interfaceLayer2SriovInterfaceType"
                },
                "l2vlan_interface": {
                    "description": "x-displayName: \"VLAN Interface\"\nLayer2 interface of type VLAN",
                    "title": "VLAN Interface",
                    "$ref": "#/definitions/network_interfaceLayer2VlanInterfaceType"
                },
                "l2vlan_slo_interface": {
                    "description": "x-displayName: \"VLAN on Site Local Outside Interface\"\nVLAN on site local outside interface",
                    "title": "SLO VLAN interface",
                    "$ref": "#/definitions/network_interfaceLayer2SloVlanInterfaceType"
                }
            }
        },
        "network_interfaceLayer2SloVlanInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"VLAN on Site Local Outside Interface\"\nLayer2 Site Local Outside VLAN Interface Configuration",
            "title": "VLAN on Site Local Outside Interface",
            "properties": {
                "vlan_id": {
                    "type": "integer",
                    "description": "x-displayName: \"VLAN Id\"\nx-example: \"10\"\nx-required\nVLAN Id",
                    "title": "VLAN Id",
                    "format": "int64"
                }
            }
        },
        "network_interfaceLayer2SriovInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Layer2 SR-IOV Interface\"\nLayer2 SR-IOV Interface Configuration",
            "title": "Layer2 SR-IOV interface",
            "properties": {
                "device": {
                    "type": "string",
                    "description": "x-displayName: \"Ethernet Device\"\nx-example: \"eth0\"\nx-required\nPhysical ethernet interface",
                    "title": "Device"
                },
                "untagged": {
                    "description": "x-displayName: \"Untagged\"\nConfigure a untagged interface",
                    "title": "Untagged",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "vlan_id": {
                    "type": "integer",
                    "description": "x-displayName: \"VLAN Id\"\nx-example: \"10\"\nConfigure a VLAN tagged interface",
                    "title": "VLAN Id",
                    "format": "int64"
                }
            }
        },
        "network_interfaceLayer2VlanInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Layer2 VLAN Interface\"\nLayer2 VLAN Interface Configuration",
            "title": "Layer2 VLAN interface",
            "properties": {
                "device": {
                    "type": "string",
                    "description": "x-displayName: \"Ethernet Device\"\nx-example: \"eth0\"\nx-required\nPhysical ethernet interface",
                    "title": "Device"
                },
                "vlan_id": {
                    "type": "integer",
                    "description": "x-displayName: \"VLAN Id\"\nx-example: \"10\"\nx-required\nVLAN Id",
                    "title": "VLAN Id",
                    "format": "int64"
                }
            }
        },
        "network_interfaceLinkQualityMonitorConfig": {
            "type": "object",
            "description": "Link Quality Monitoring configuration for a network interface.",
            "title": "Link Quality Monitoring Configuration",
            "x-displayname": "Link Quality Monitoring Configuration",
            "x-ves-proto-message": "ves.io.schema.network_interface.LinkQualityMonitorConfig"
        },
        "network_interfaceLoopbackInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Loopback Device\"\nLoopback Device Configuration",
            "title": "Loopback Device",
            "properties": {
                "cluster": {
                    "description": "x-displayName: \"Cluster, All Nodes of the Site\"\nConfiguration will apply to given device on all nodes of the site.",
                    "title": "Node Independent",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "device": {
                    "type": "string",
                    "description": "x-displayName: \"Loopback Ethernet Device\"\nx-example: \"eth0\"\nx-required\nInterface configuration for the Loopback Ethernet device",
                    "title": "Device"
                },
                "dhcp_client": {
                    "description": "x-displayName: \"DHCP Client\"\nInterface gets it IP address from external DHCP server",
                    "title": "DHCP Client",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "dhcp_server": {
                    "description": "x-displayName: \"DHCP Server\"\nDHCP Server is configured for this interface. IP for this Interface will be derived from the DHCP Server configuration.",
                    "title": "DHCP Server",
                    "$ref": "#/definitions/network_interfaceDHCPServerParametersType"
                },
                "ip_fabric_network": {
                    "description": "x-displayName: \"IP Fabric Network\"\nInterface belongs to IP Fabric network",
                    "title": "IP Fabric Network",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "mtu": {
                    "type": "integer",
                    "description": "x-displayName: \"Maximum Packet Size (MTU)\"\nx-example: \"1450\"\nMaximum packet size (Maximum Transfer Unit) of the interface\nWhen configured, mtu must be between 512 and 16384",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64"
                },
                "no_ipv6_address": {
                    "description": "x-displayName: \"No IPv6 Address\"\nInterface does not have an IPv6 Address.",
                    "title": "no_ipv6_address",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "node": {
                    "type": "string",
                    "description": "x-displayName: \"Specific Node\"\nConfiguration will apply to a device on the given node.",
                    "title": "Node"
                },
                "site_local_inside_network": {
                    "description": "x-displayName: \"Site Local Network Inside\"\nInterface belongs to site local network inside",
                    "title": "Site Local Network Inside",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "site_local_network": {
                    "description": "x-displayName: \"Site Local Network (Outside)\"\nInterface belongs to site local network (outside)",
                    "title": "Site Local Network",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "static_ip": {
                    "description": "x-displayName: \"Static IP\"\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                },
                "static_ipv6_address": {
                    "description": "x-displayName: \"Static IP\"\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                }
            }
        },
        "network_interfaceNetworkInterfaceDFGW": {
            "type": "object",
            "description": "Controls how the Default Gateway of the Network interface is derived",
            "title": "Network Interface Default Gateway",
            "x-displayname": "Default Gateway",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceDFGW",
            "properties": {
                "default_gateway_address": {
                    "description": " Address of default gateway when mode is \"use-configured\"",
                    "title": "Default Gateway",
                    "$ref": "#/definitions/schemaIpv4AddressType",
                    "x-displayname": "Default Gateway"
                },
                "default_gateway_mode": {
                    "description": " Mode of obtaining default gateway\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Default Gateway Mode",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceGatewayMode",
                    "x-displayname": "Default Gateway Mode",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "network_interfaceNetworkInterfaceDHCP": {
            "type": "string",
            "description": "Controls whether or not DHCP client is enabled on the interface\n\nDHCP client is disabled\nDHCP client is enabled",
            "title": "Network Interface DHCP Client",
            "enum": [
                "NETWORK_INTERFACE_DHCP_DISABLE",
                "NETWORK_INTERFACE_DHCP_ENABLE"
            ],
            "default": "NETWORK_INTERFACE_DHCP_DISABLE",
            "x-displayname": "DHCP Client",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceDHCP"
        },
        "network_interfaceNetworkInterfaceDHCPServer": {
            "type": "string",
            "description": "Controls whether or not DHCP server runs on the interface\n\nDHCP server is disabled\nDHCP server is enabled\nEnhanced DHCP server is enabled",
            "title": "Network Interface DHCP Server",
            "enum": [
                "NETWORK_INTERFACE_DHCP_SERVER_DISABLE",
                "NETWORK_INTERFACE_DHCP_SERVER_ENABLE",
                "NETWORK_INTERFACE_ENHANCED_DHCP_SERVER_ENABLE"
            ],
            "default": "NETWORK_INTERFACE_DHCP_SERVER_DISABLE",
            "x-displayname": "DHCP Server",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceDHCPServer"
        },
        "network_interfaceNetworkInterfaceDNS": {
            "type": "object",
            "description": "Controls how the DNS Server of the Network interface is derived",
            "title": "Network Interface DNS server",
            "x-displayname": "DNS Server",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceDNS",
            "properties": {
                "dns_mode": {
                    "description": " Mode of obtaining DNS server\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "DNS Server Mode",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceDNSMode",
                    "x-displayname": "DNS Server Mode",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "dns_server": {
                    "type": "array",
                    "description": " Address of DNS server when mode is \"use-configured\"",
                    "title": "DNS Server",
                    "items": {
                        "$ref": "#/definitions/schemaIpv4AddressType"
                    },
                    "x-displayname": "DNS Server"
                }
            }
        },
        "network_interfaceNetworkInterfaceDNSMode": {
            "type": "string",
            "description": "Controls the mode of obtaining DNS address for the interface\n\nDNS is disabled\nDNS is allocated by the system\nUse the specified DNS",
            "title": "Network Interface DNS Mode",
            "enum": [
                "NETWORK_INTERFACE_DNS_DISABLE",
                "NETWORK_INTERFACE_DNS_AUTO_ALLOCATE",
                "NETWORK_INTERFACE_DNS_USE_CONFIGURED"
            ],
            "default": "NETWORK_INTERFACE_DNS_DISABLE",
            "x-displayname": "DNS Mode",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceDNSMode"
        },
        "network_interfaceNetworkInterfaceGatewayMode": {
            "type": "string",
            "description": "Controls the mode of obtaining gateway address for the interface\n\nGateway is disabled\nGateway is allocated by the system\nUse the specified gateway",
            "title": "Network Interface Gateway Mode",
            "enum": [
                "NETWORK_INTERFACE_GATEWAY_DISABLE",
                "NETWORK_INTERFACE_GATEWAY_AUTO_ALLOCATE",
                "NETWORK_INTERFACE_GATEWAY_USE_CONFIGURED"
            ],
            "default": "NETWORK_INTERFACE_GATEWAY_DISABLE",
            "x-displayname": "Gateway Mode",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceGatewayMode"
        },
        "network_interfaceNetworkInterfaceStatus": {
            "type": "object",
            "description": "Current Status of the Network interface",
            "title": "Network Interface Status",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceStatus",
            "properties": {
                "up_down": {
                    "description": " Current state of the interface",
                    "title": "Interface State",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceUpDown",
                    "x-displayname": "Interface State"
                }
            }
        },
        "network_interfaceNetworkInterfaceTunnel": {
            "type": "object",
            "description": "Tunnel attached to this interface, enables encapsulation on interface",
            "title": "Network Interface Tunnel",
            "x-displayname": "Tunnel",
            "x-ves-proto-message": "ves.io.schema.network_interface.NetworkInterfaceTunnel",
            "properties": {
                "tunnel": {
                    "type": "array",
                    "description": " Tunnel which is attached to this interface\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "Tunnel",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Tunnel",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                }
            }
        },
        "network_interfaceNetworkInterfaceType": {
            "type": "string",
            "description": "Identifies the type of the interface.\n\nNetwork interface is an Ethernet interface\nNetwork interface is a VLAN interface\nNetwork interface is a bond interface running LACP\nNetwork interface is a tunnel interface\nNetwork interface is a loopback device\nNetwork interface is a layer2 interface",
            "title": "Network Interface Type",
            "enum": [
                "NETWORK_INTERFACE_ETHERNET",
                "NETWORK_INTERFACE_VLAN_INTERFACE",
                "NETWORK_INTERFACE_LACP_INTERFACE",
                "NETWORK_INTERFACE_TUNNEL_INTERFACE",
                "NETWORK_INTERFACE_LOOPBACK_INTERFACE",
                "NETWORK_INTERFACE_LAYER2_INTERFACE"
            ],
            "default": "NETWORK_INTERFACE_ETHERNET",
            "x-displayname": "Network Interface Type",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceType"
        },
        "network_interfaceNetworkInterfaceUpDown": {
            "type": "string",
            "description": "Shows the interface link state\n\nInterface is admistratively down\nInterface is operationally down\nInterface is operationally up",
            "title": "Interface State",
            "enum": [
                "NETWORK_INTERFACE_ADMINISTRATIVELY_DOWN",
                "NETWORK_INTERFACE_OPERATIONALY_DOWN",
                "NETWORK_INTERFACE_OPERATIONALY_UP"
            ],
            "default": "NETWORK_INTERFACE_ADMINISTRATIVELY_DOWN",
            "x-displayname": "Interface State",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceUpDown"
        },
        "network_interfaceNetworkInterfaceVLANTagging": {
            "type": "string",
            "description": "Controls whether or not VLAN tagging is enabled on the interface\n\nVlan tagging is disabled\nVlan tagging is enabled",
            "title": "Network Interface VLAN Tagging",
            "enum": [
                "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE",
                "NETWORK_INTERFACE_VLAN_TAGGING_ENABLE"
            ],
            "default": "NETWORK_INTERFACE_VLAN_TAGGING_DISABLE",
            "x-displayname": "Vlan Tagging",
            "x-ves-proto-enum": "ves.io.schema.network_interface.NetworkInterfaceVLANTagging"
        },
        "network_interfaceSpecType": {
            "type": "object",
            "description": "Shape of the network_interface specification",
            "title": "Network Interface Specification",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.network_interface.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/network_interfaceGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "network_interfaceStaticIPParametersType": {
            "type": "object",
            "description": "x-displayName: \"Static IP Parameters\"\nConfigure Static IP parameters",
            "title": "Static IP Parameters",
            "properties": {
                "cluster_static_ip": {
                    "description": "x-displayName: \"Cluster, All Nodes of the Site\"\nStatic IP configuration for a specific node",
                    "title": "Node Specific",
                    "$ref": "#/definitions/network_interfaceStaticIpParametersClusterType"
                },
                "fleet_static_ip": {
                    "description": "x-displayName: \"Fleet, All Nodes of All Sites in Fleet\"\nStatic IP configuration for the fleet",
                    "title": "Fleet",
                    "$ref": "#/definitions/network_interfaceStaticIpParametersFleetType"
                },
                "node_static_ip": {
                    "description": "x-displayName: \"Specific Node\"\nStatic IP configuration for the Node",
                    "title": "Node",
                    "$ref": "#/definitions/network_interfaceStaticIpParametersNodeType"
                }
            }
        },
        "network_interfaceStaticIpParametersClusterType": {
            "type": "object",
            "description": "x-displayName: \"Cluster: Static IP Parameters\"\nConfigure Static IP parameters  for cluster",
            "title": "Static IP Parameters",
            "properties": {
                "interface_ip_map": {
                    "type": "object",
                    "description": "x-displayName: \"Node to IP Mapping\"\nMap of Node to Static ip configuration value, Key:Node, Value:IP Address",
                    "title": "Site:Node to IP mapping"
                }
            }
        },
        "network_interfaceStaticIpParametersFleetType": {
            "type": "object",
            "description": "x-displayName: \"Fleet: Static IP Parameters\"\nConfigure Static IP parameters",
            "title": "Static IP Parameters",
            "properties": {
                "default_gw": {
                    "type": "string",
                    "description": "x-displayName: \"Default Gateway\"\nx-example: \"192.168.20.1\"\nIP address offset of the default gateway, prefix len is used to calculate offset",
                    "title": "Default Gateway"
                },
                "dns_server": {
                    "type": "string",
                    "description": "x-displayName: \"DNS Server\"\nx-example: \"192.168.20.1\"\nIP address offset of the DNS server, prefix len is used to calculate offset",
                    "title": "DNS Server"
                },
                "network_prefix_allocator": {
                    "description": "x-displayName: \"Fleet address allocator\"\nStatic IP configuration for the fleet",
                    "title": "Fleet",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                }
            }
        },
        "network_interfaceStaticIpParametersNodeType": {
            "type": "object",
            "description": "x-displayName: \"Node: Static IP Parameters\"\nConfigure Static IP parameters for a node",
            "title": "Static IP Parameters",
            "properties": {
                "default_gw": {
                    "type": "string",
                    "description": "x-displayName: \"Default Gateway\"\nx-example: \"192.168.20.1\"\nIP address of the default gateway.",
                    "title": "Default Gateway"
                },
                "dns_server": {
                    "type": "string",
                    "description": "x-displayName: \"DNS Server\"\nx-example: \"192.168.20.1\"\nIP address of the DNS server",
                    "title": "DNS Server"
                },
                "ip_address": {
                    "type": "string",
                    "description": "x-displayName: \"IP address/Prefix Length\"\nx-example: \"192.168.20.1/24\"\nx-required\nIP address of the interface and prefix length",
                    "title": "Default Gateway"
                }
            }
        },
        "network_interfaceStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "Network Interface Status",
            "x-displayname": "Status Object",
            "x-ves-proto-message": "ves.io.schema.network_interface.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions reported by various components of the system",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Reference to object for current status",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "status": {
                    "description": " Current status of the network interface",
                    "title": "status",
                    "$ref": "#/definitions/network_interfaceNetworkInterfaceStatus",
                    "x-displayname": "Status"
                }
            }
        },
        "network_interfaceTunnelInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Tunnel Interface\"\nTunnel Interface Configuration",
            "title": "Tunnel Interface",
            "properties": {
                "cloud_connect": {
                    "type": "array",
                    "description": "x-displayName: \"Cloud Connect\"\nThe clould connect this network interface is connecting to incase of Cloud Sites",
                    "title": "CloudConnect",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                },
                "cluster": {
                    "description": "x-displayName: \"Cluster, All Nodes of the Site\"\nConfiguration will apply to given device on all nodes of the site",
                    "title": "Node Independent",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "inside_network": {
                    "description": "x-displayName: \"Inside Network\"\nInterface belongs to user configured inside network",
                    "title": "Inside Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "mtu": {
                    "type": "integer",
                    "description": "x-displayName: \"Maximum Packet Size (MTU)\"\nx-example: \"1450\"\nMaximum packet size (Maximum Transfer Unit) of the interface\nWhen configured, mtu must be between 512 and 16384",
                    "title": "Maximum Packet Size (MTU)",
                    "format": "int64"
                },
                "node": {
                    "type": "string",
                    "description": "x-displayName: \"Specific Node\"\nConfiguration will apply to a given device on the given node.",
                    "title": "Node"
                },
                "priority": {
                    "type": "integer",
                    "description": "x-displayName: \"Priority\"\nx-example: \"42\"\nPriority of the network interface when multiple network interfaces are present in outside network\nGreater the value, higher the priority",
                    "title": "Priority",
                    "format": "int64"
                },
                "site_local_inside_network": {
                    "description": "x-displayName: \"Site Local Network Inside\"\nInterface belongs to site local network inside",
                    "title": "Site Local Network Inside",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "site_local_network": {
                    "description": "x-displayName: \"Site Local Network (Outside)\"\nInterface belongs to site local network (outside)",
                    "title": "Site Local Network",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "static_ip": {
                    "description": "x-displayName: \"Static IP\"\nx-required\nInterface IP is configured statically",
                    "title": "Static IP",
                    "$ref": "#/definitions/network_interfaceStaticIPParametersType"
                },
                "tunnel": {
                    "description": "x-displayName: \"Tunnel\"\nx-required\nTunnel Configuration for this Interface",
                    "title": "Tunnel",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                }
            }
        },
        "network_interfaceVhostInterfaceType": {
            "type": "object",
            "description": "x-displayName: \"Host Interface\"\nHost Interface configuration corresponding to a Network Interface",
            "title": "Host Interface",
            "properties": {
                "no_host": {
                    "description": "x-displayName: \"No Host Interface\"\nHost Interface is not created for the Network Interface\nSome options like DHCP will not be valid on the Network Interface",
                    "title": "No Host Interface",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "vhost": {
                    "description": "x-displayName: \"Create Host Interface\"\nCreate Vhost Interface for the Network Interface. An interface will be\ncreated in host-os for it",
                    "title": "Create Host Interface",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "virtual": {
                    "description": "x-displayName: \"Create Virtual Host Interface\"\nCreate a virtual interface for Network Interface. The virtual interface\nis not seen in host-os. This interface will be internal to VER\nSome options like DHCP will not be valid on the Network Interface",
                    "title": "Create Virtual Interface",
                    "$ref": "#/definitions/schemaEmpty"
                }
            }
        },
        "network_interfacecrudapiErrorCode": {
            "type": "string",
            "enum": [
                "EOK",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN"
            ],
            "default": "EOK",
            "x-displayname": "",
            "x-ves-proto-enum": "ves.io.schema.network_interface.crudapi.ErrorCode"
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "runtimeStreamError": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "grpc_code": {
                    "type": "integer",
                    "format": "int32"
                },
                "http_code": {
                    "type": "integer",
                    "format": "int32"
                },
                "http_status": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed.\n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]\n",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]"
                    }
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Validation\\\",\\\"Operational\\\"]\n",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Validation\\\",\\\"Operational\\\"]"
                    }
                }
            }
        },
        "schemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaIpv4AddressType": {
            "type": "object",
            "description": "IPv4 Address in dot-decimal notation",
            "title": "IPv4 Address",
            "x-displayname": "IPv4 Address",
            "x-ves-proto-message": "ves.io.schema.Ipv4AddressType",
            "properties": {
                "addr": {
                    "type": "string",
                    "description": " IPv4 Address in string form with dot-decimal notation\n\nExample: - \"192.168.1.1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IPv4 Address",
                    "x-displayname": "IPv4 Address",
                    "x-ves-example": "192.168.1.1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                }
            }
        },
        "schemaIpv4SubnetType": {
            "type": "object",
            "description": "IPv4 subnets specified as prefix and prefix-length. Prefix length must be \u003c= 32",
            "title": "IPv4 Subnet",
            "x-displayname": "IPv4 Subnet",
            "x-ves-proto-message": "ves.io.schema.Ipv4SubnetType",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": " Prefix-length of the IPv4 subnet. Must be \u003c= 32\n\nExample: - \"24\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 32\n",
                    "title": "Prefix Length",
                    "format": "int64",
                    "x-displayname": "Prefix Length",
                    "x-ves-example": "24",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "32"
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": " Prefix part of the IPv4 subnet in string form with dot-decimal notation\n\nExample: - \"192.168.1.0\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Prefix",
                    "x-displayname": "Prefix",
                    "x-ves-example": "192.168.1.0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                }
            }
        },
        "schemaIpv6SubnetType": {
            "type": "object",
            "description": "x-displayName: \"IPv6 Subnet\"\nIPv6 subnets specified as prefix and prefix-length. prefix-legnth must be \u003c= 128",
            "title": "IPv6 Subnet",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": "x-example: \"38\"\nx-displayName: \"Prefix Length\"\nPrefix length of the IPv6 subnet. Must be \u003c= 128",
                    "title": "Prefix length",
                    "format": "int64"
                },
                "prefix": {
                    "type": "string",
                    "description": "x-displayName: \"Prefix\"\nx-example: \"2001:db8:0:0:0:0:2:0\"\nPrefix part of the IPv6 subnet given in form of string.\nIPv6 address must be specified as hexadecimal numbers separated by ':'\ne.g. \"2001:db8:0:0:0:2:0:0\"\nThe address can be compacted by suppressing zeros\ne.g. \"2001:db8::2::\"",
                    "title": "Prefix"
                }
            }
        },
        "schemaListMetaType": {
            "type": "object",
            "description": "ListMetaType is metadata that all lists must have.",
            "title": "ListMetaType",
            "x-displayname": "List Metadata",
            "x-ves-proto-message": "ves.io.schema.ListMetaType"
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if\n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status\n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Origin of this status exchanged by VTRP.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do Not Publish\n\nDo not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Publish\n\nPropagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Status Publish Type",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "direct_ref_hash": {
                    "type": "string",
                    "description": " A hash of the UIDs of  direct references on this object. This can be used to determine if \n this object hash has had references become resolved/unresolved",
                    "title": "direct_ref_hash",
                    "x-displayname": "Direct Reference Hash"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "namespace",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "x-displayName: \"Object reference\"\nThis type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"contacts-route\"\nx-required\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen name will hold the referred object's(e.g. route's) name.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen namespace will hold the referred object's(e.g. route's) namespace.",
                    "title": "namespace"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen tenant will hold the referred object's(e.g. route's) tenant.",
                    "title": "tenant"
                }
            }
        }
    },
    "x-displayname": "",
    "x-stream-definitions": {
        "crudapiObjectListRsp": {
            "properties": {
                "error": {
                    "$ref": "#/definitions/runtimeStreamError"
                },
                "result": {
                    "$ref": "#/definitions/crudapiObjectListRsp"
                }
            },
            "title": "Stream result of crudapiObjectListRsp",
            "type": "object"
        }
    },
    "x-ves-proto-file": "ves.io/schema/network_interface/crudapi/api.proto"
}`

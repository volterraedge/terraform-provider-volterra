// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package network_interface

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.network_interface.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.network_interface.Object"] = ObjectValidator()
	vr["ves.io.schema.network_interface.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.network_interface.CreateRequest"] = CreateRequestValidator()
	vr["ves.io.schema.network_interface.CreateResponse"] = CreateResponseValidator()
	vr["ves.io.schema.network_interface.DeleteRequest"] = DeleteRequestValidator()
	vr["ves.io.schema.network_interface.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.network_interface.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.network_interface.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.network_interface.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.network_interface.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.network_interface.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.network_interface.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.network_interface.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.network_interface.DHCPIPV6NetworkType"] = DHCPIPV6NetworkTypeValidator()
	vr["ves.io.schema.network_interface.DHCPIPV6PoolType"] = DHCPIPV6PoolTypeValidator()
	vr["ves.io.schema.network_interface.DHCPIPV6StatefulServer"] = DHCPIPV6StatefulServerValidator()
	vr["ves.io.schema.network_interface.DHCPInterfaceIPType"] = DHCPInterfaceIPTypeValidator()
	vr["ves.io.schema.network_interface.DHCPInterfaceIPV6Type"] = DHCPInterfaceIPV6TypeValidator()
	vr["ves.io.schema.network_interface.DHCPNetworkType"] = DHCPNetworkTypeValidator()
	vr["ves.io.schema.network_interface.DHCPPoolType"] = DHCPPoolTypeValidator()
	vr["ves.io.schema.network_interface.DHCPServerParametersType"] = DHCPServerParametersTypeValidator()
	vr["ves.io.schema.network_interface.DedicatedInterfaceType"] = DedicatedInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.DedicatedManagementInterfaceType"] = DedicatedManagementInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.EthernetInterfaceType"] = EthernetInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.network_interface.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.network_interface.IPV6AutoConfigRouterType"] = IPV6AutoConfigRouterTypeValidator()
	vr["ves.io.schema.network_interface.IPV6AutoConfigType"] = IPV6AutoConfigTypeValidator()
	vr["ves.io.schema.network_interface.IPV6DnsConfig"] = IPV6DnsConfigValidator()
	vr["ves.io.schema.network_interface.IPV6DnsList"] = IPV6DnsListValidator()
	vr["ves.io.schema.network_interface.IPV6LocalDnsAddress"] = IPV6LocalDnsAddressValidator()
	vr["ves.io.schema.network_interface.Layer2InterfaceType"] = Layer2InterfaceTypeValidator()
	vr["ves.io.schema.network_interface.Layer2SloVlanInterfaceType"] = Layer2SloVlanInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.Layer2SriovInterfaceType"] = Layer2SriovInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.Layer2VlanInterfaceType"] = Layer2VlanInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.LegacyInterfaceType"] = LegacyInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.LinkQualityMonitorConfig"] = LinkQualityMonitorConfigValidator()
	vr["ves.io.schema.network_interface.LoopbackInterfaceType"] = LoopbackInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.NetworkInterfaceDFGW"] = NetworkInterfaceDFGWValidator()
	vr["ves.io.schema.network_interface.NetworkInterfaceDNS"] = NetworkInterfaceDNSValidator()
	vr["ves.io.schema.network_interface.NetworkInterfaceStatus"] = NetworkInterfaceStatusValidator()
	vr["ves.io.schema.network_interface.NetworkInterfaceTunnel"] = NetworkInterfaceTunnelValidator()
	vr["ves.io.schema.network_interface.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.network_interface.StaticIPParametersType"] = StaticIPParametersTypeValidator()
	vr["ves.io.schema.network_interface.StaticIpParametersClusterType"] = StaticIpParametersClusterTypeValidator()
	vr["ves.io.schema.network_interface.StaticIpParametersFleetType"] = StaticIpParametersFleetTypeValidator()
	vr["ves.io.schema.network_interface.StaticIpParametersNodeType"] = StaticIpParametersNodeTypeValidator()
	vr["ves.io.schema.network_interface.TunnelInterfaceType"] = TunnelInterfaceTypeValidator()
	vr["ves.io.schema.network_interface.VhostInterfaceType"] = VhostInterfaceTypeValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.network_interface.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.network_interface.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.network_interface.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.network_interface.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.network_interface.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.network_interface.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.network_interface.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.network_interface.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCSubscriptionFieldsRegistry["ves.io.schema.network_interface.API.Create"] = []svcfw.SubscriptionField{
		{
			FieldPath:     "ves.io.schema.network_interface.CreateRequest.spec.interface_choice.ethernet_interface.ipv6_address_choice.ipv6_auto_config",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.network_interface.CreateRequest.spec.interface_choice.ethernet_interface.ipv6_address_choice.static_ipv6_address",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.network_interface.API.Create"] = []string{
		"spec.ethernet_interface.dhcp_server.dhcp_networks.#.network_prefix_allocator",
		"spec.ethernet_interface.dhcp_server.dhcp_networks.#.pools.#.exclude",
		"spec.ethernet_interface.dhcp_server.dhcp_option82_tag",
		"spec.ethernet_interface.inside_network",
		"spec.ethernet_interface.ip_fabric_network",
		"spec.ethernet_interface.ipv6_auto_config.router.stateful.dhcp_networks.#.network_prefix_allocator",
		"spec.ethernet_interface.ipv6_auto_config.router.stateful.dhcp_networks.#.pools.#.exclude",
		"spec.ethernet_interface.srv6_network",
		"spec.ethernet_interface.static_ip.fleet_static_ip",
		"spec.ethernet_interface.static_ipv6_address.fleet_static_ip",
		"spec.legacy_interface",
		"spec.tunnel_interface.cloud_connect.#",
		"spec.tunnel_interface.inside_network",
		"spec.tunnel_interface.static_ip.fleet_static_ip",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.network_interface.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.network_interface.API.Create"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.network_interface.API.Get"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "create_form.spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "replace_form.spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
		{
			FieldPath:           "spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

	mdr.RPCAvailableInResFieldRegistry["ves.io.schema.network_interface.API.List"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "items.#.get_spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

	mdr.RPCSubscriptionFieldsRegistry["ves.io.schema.network_interface.API.Replace"] = []svcfw.SubscriptionField{
		{
			FieldPath:     "ves.io.schema.network_interface.ReplaceRequest.spec.interface_choice.ethernet_interface.ipv6_address_choice.ipv6_auto_config",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
		{
			FieldPath:     "ves.io.schema.network_interface.ReplaceRequest.spec.interface_choice.ethernet_interface.ipv6_address_choice.static_ipv6_address",
			AddonServices: []string{"f5xc-ipv6-standard"},
		},
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.network_interface.API.Replace"] = []string{
		"spec.ethernet_interface.dhcp_server.dhcp_networks.#.network_prefix_allocator",
		"spec.ethernet_interface.dhcp_server.dhcp_networks.#.pools.#.exclude",
		"spec.ethernet_interface.dhcp_server.dhcp_option82_tag",
		"spec.ethernet_interface.inside_network",
		"spec.ethernet_interface.ip_fabric_network",
		"spec.ethernet_interface.ipv6_auto_config.router.stateful.dhcp_networks.#.network_prefix_allocator",
		"spec.ethernet_interface.ipv6_auto_config.router.stateful.dhcp_networks.#.pools.#.exclude",
		"spec.ethernet_interface.srv6_network",
		"spec.ethernet_interface.static_ip.fleet_static_ip",
		"spec.ethernet_interface.static_ipv6_address.fleet_static_ip",
		"spec.tunnel_interface.cloud_connect.#",
		"spec.tunnel_interface.inside_network",
		"spec.tunnel_interface.static_ip.fleet_static_ip",
	}

	mdr.RPCAvailableInReqFieldRegistry["ves.io.schema.network_interface.API.Replace"] = []svcfw.EnvironmentField{
		{
			FieldPath:           "spec.ethernet_interface.ipv6_address_choice",
			AllowedEnvironments: []string{"crt", "demo1", "prod", "softbank_mec", "staging", "test"},
		},
	}

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.network_interface.API"] = "config"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.network_interface.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.network_interface.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.network_interface.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.network_interface.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.network_interface.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.network_interface.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.network_interface.Object"] = NewCRUDAPIServer

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

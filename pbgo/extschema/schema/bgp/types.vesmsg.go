// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package bgp

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *BgpParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpParameters) DeepCopy() *BgpParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpParametersValidator().Validate(ctx, m, opts...)
}

type ValidateBgpParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpParameters) RouterIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for router_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateBgpParameters) RouterIdChoiceIpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpAddress, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}
	return oValidatorFn_IpAddress, nil
}

func (v *ValidateBgpParameters) AsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn")
	}

	return validatorFn, nil
}

func (v *ValidateBgpParameters) BgpRouterIdKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_router_id_key")
	}

	return validatorFn, nil
}

func (v *ValidateBgpParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id"))
		if err := fv(ctx, m.GetBgpRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id_key"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id_key"))
		if err := fv(ctx, m.GetBgpRouterIdKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id_type"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id_type"))
		if err := fv(ctx, m.GetBgpRouterIdType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["router_id_choice"]; exists {
		val := m.GetRouterIdChoice()
		vOpts := append(opts,
			db.WithValidateField("router_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRouterIdChoice().(type) {
	case *BgpParameters_LocalAddress:
		if fv, exists := v.FldValidators["router_id_choice.local_address"]; exists {
			val := m.GetRouterIdChoice().(*BgpParameters_LocalAddress).LocalAddress
			vOpts := append(opts,
				db.WithValidateField("router_id_choice"),
				db.WithValidateField("local_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BgpParameters_FromSite:
		if fv, exists := v.FldValidators["router_id_choice.from_site"]; exists {
			val := m.GetRouterIdChoice().(*BgpParameters_FromSite).FromSite
			vOpts := append(opts,
				db.WithValidateField("router_id_choice"),
				db.WithValidateField("from_site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BgpParameters_IpAddress:
		if fv, exists := v.FldValidators["router_id_choice.ip_address"]; exists {
			val := m.GetRouterIdChoice().(*BgpParameters_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("router_id_choice"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpParametersValidator = func() *ValidateBgpParameters {
	v := &ValidateBgpParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRouterIdChoice := v.RouterIdChoiceValidationRuleHandler
	rulesRouterIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRouterIdChoice(rulesRouterIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpParameters.router_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["router_id_choice"] = vFn

	vrhRouterIdChoiceIpAddress := v.RouterIdChoiceIpAddressValidationRuleHandler
	rulesRouterIdChoiceIpAddress := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFnMap["router_id_choice.ip_address"], err = vrhRouterIdChoiceIpAddress(rulesRouterIdChoiceIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field BgpParameters.router_id_choice_ip_address: %s", err)
		panic(errMsg)
	}

	v.FldValidators["router_id_choice.ip_address"] = vFnMap["router_id_choice.ip_address"]

	vrhAsn := v.AsnValidationRuleHandler
	rulesAsn := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhAsn(rulesAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpParameters.asn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn"] = vFn

	vrhBgpRouterIdKey := v.BgpRouterIdKeyValidationRuleHandler
	rulesBgpRouterIdKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhBgpRouterIdKey(rulesBgpRouterIdKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpParameters.bgp_router_id_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_router_id_key"] = vFn

	v.FldValidators["bgp_router_id"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func BgpParametersValidator() db.Validator {
	return DefaultBgpParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *BgpPeer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpPeer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpPeer) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *BgpPeer) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *BgpPeer) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	switch x := m.AuthChoice.(type) {

	case *BgpPeer_Md5AuthKey:
		x.Md5AuthKey = ""

	}

	return nil
}

func (m *BgpPeer) DeepCopy() *BgpPeer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpPeer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpPeer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpPeer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpPeerValidator().Validate(ctx, m, opts...)
}

func (m *BgpPeer) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceRefsDRefInfo()

}

func (m *BgpPeer) GetInterfaceRefsDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetInterfaceRefs()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("BgpPeer.interface_refs[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "interface_refs",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetInterfaceRefsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *BgpPeer) GetInterfaceRefsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetInterfaceRefs() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateBgpPeer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpPeer) AsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) BgpPeerAddressKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address_key")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) BgpPeerSubnetOffsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_subnet_offset")
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) FamiliesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for families")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*PeerFamilyParameters, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := PeerFamilyParametersValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for families")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*PeerFamilyParameters)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*PeerFamilyParameters, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated families")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items families")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) InterfaceRefsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interface_refs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interface_refs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interface_refs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interface_refs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBgpPeer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpPeer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpPeer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["all_inside_interfaces"]; exists {

		vOpts := append(opts, db.WithValidateField("all_inside_interfaces"))
		if err := fv(ctx, m.GetAllInsideInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["all_outside_interfaces"]; exists {

		vOpts := append(opts, db.WithValidateField("all_outside_interfaces"))
		if err := fv(ctx, m.GetAllOutsideInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetAuthChoice().(type) {
	case *BgpPeer_NoAuthentication:
		if fv, exists := v.FldValidators["auth_choice.no_authentication"]; exists {
			val := m.GetAuthChoice().(*BgpPeer_NoAuthentication).NoAuthentication
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("no_authentication"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BgpPeer_Md5AuthKey:
		if fv, exists := v.FldValidators["auth_choice.md5_auth_key"]; exists {
			val := m.GetAuthChoice().(*BgpPeer_Md5AuthKey).Md5AuthKey
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("md5_auth_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address"))
		if err := fv(ctx, m.GetBgpPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address_key"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address_key"))
		if err := fv(ctx, m.GetBgpPeerAddressKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address_type"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address_type"))
		if err := fv(ctx, m.GetBgpPeerAddressType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_subnet_offset"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_subnet_offset"))
		if err := fv(ctx, m.GetBgpPeerSubnetOffset(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["families"]; exists {
		vOpts := append(opts, db.WithValidateField("families"))
		if err := fv(ctx, m.GetFamilies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_refs"]; exists {
		vOpts := append(opts, db.WithValidateField("interface_refs"))
		if err := fv(ctx, m.GetInterfaceRefs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["passive"]; exists {

		vOpts := append(opts, db.WithValidateField("passive"))
		if err := fv(ctx, m.GetPassive(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpPeerValidator = func() *ValidateBgpPeer {
	v := &ValidateBgpPeer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAsn := v.AsnValidationRuleHandler
	rulesAsn := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
	}
	vFn, err = vrhAsn(rulesAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.asn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn"] = vFn

	vrhBgpPeerAddressKey := v.BgpPeerAddressKeyValidationRuleHandler
	rulesBgpPeerAddressKey := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhBgpPeerAddressKey(rulesBgpPeerAddressKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.bgp_peer_address_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address_key"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhBgpPeerSubnetOffset := v.BgpPeerSubnetOffsetValidationRuleHandler
	rulesBgpPeerSubnetOffset := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "32",
	}
	vFn, err = vrhBgpPeerSubnetOffset(rulesBgpPeerSubnetOffset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.bgp_peer_subnet_offset: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_subnet_offset"] = vFn

	vrhFamilies := v.FamiliesValidationRuleHandler
	rulesFamilies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
	}
	vFn, err = vrhFamilies(rulesFamilies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.families: %s", err)
		panic(errMsg)
	}
	v.FldValidators["families"] = vFn

	vrhInterfaceRefs := v.InterfaceRefsValidationRuleHandler
	rulesInterfaceRefs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
	}
	vFn, err = vrhInterfaceRefs(rulesInterfaceRefs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BgpPeer.interface_refs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_refs"] = vFn

	v.FldValidators["bgp_peer_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func BgpPeerValidator() db.Validator {
	return DefaultBgpPeerValidator
}

// augmented methods on protoc/std generated struct

func (m *BgpPeerStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpPeerStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpPeerStatusType) DeepCopy() *BgpPeerStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpPeerStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpPeerStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpPeerStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpPeerStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBgpPeerStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpPeerStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpPeerStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpPeerStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advertised_prefix_count"]; exists {

		vOpts := append(opts, db.WithValidateField("advertised_prefix_count"))
		if err := fv(ctx, m.GetAdvertisedPrefixCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_flap_count"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_flap_count"))
		if err := fv(ctx, m.GetConnectionFlapCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_name"]; exists {

		vOpts := append(opts, db.WithValidateField("interface_name"))
		if err := fv(ctx, m.GetInterfaceName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_address"]; exists {

		vOpts := append(opts, db.WithValidateField("local_address"))
		if err := fv(ctx, m.GetLocalAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_address"))
		if err := fv(ctx, m.GetPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_asn"))
		if err := fv(ctx, m.GetPeerAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_port"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_port"))
		if err := fv(ctx, m.GetPeerPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_router_id"))
		if err := fv(ctx, m.GetPeerRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["received_prefix_count"]; exists {

		vOpts := append(opts, db.WithValidateField("received_prefix_count"))
		if err := fv(ctx, m.GetReceivedPrefixCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["up_down"]; exists {

		vOpts := append(opts, db.WithValidateField("up_down"))
		if err := fv(ctx, m.GetUpDown(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["up_down_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("up_down_timestamp"))
		if err := fv(ctx, m.GetUpDownTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpPeerStatusTypeValidator = func() *ValidateBgpPeerStatusType {
	v := &ValidateBgpPeerStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["peer_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func BgpPeerStatusTypeValidator() db.Validator {
	return DefaultBgpPeerStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BgpStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BgpStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BgpStatusType) DeepCopy() *BgpStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BgpStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BgpStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BgpStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BgpStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBgpStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBgpStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BgpStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BgpStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_asn"]; exists {

		vOpts := append(opts, db.WithValidateField("local_asn"))
		if err := fv(ctx, m.GetLocalAsn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("local_router_id"))
		if err := fv(ctx, m.GetLocalRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peer_status_list"]; exists {

		vOpts := append(opts, db.WithValidateField("peer_status_list"))
		for idx, item := range m.GetPeerStatusList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBgpStatusTypeValidator = func() *ValidateBgpStatusType {
	v := &ValidateBgpStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["peer_status_list"] = BgpPeerStatusTypeValidator().Validate

	return v
}()

func BgpStatusTypeValidator() db.Validator {
	return DefaultBgpStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetPeers() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting CreateSpecType.peers idx %v", idx)
		}
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetPeersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPeersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWhereDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetPeersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPeers() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetPeers() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPeers() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("peers[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SiteVirtualSiteRefSelectorValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for peers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Peer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := PeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Peer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Peer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peers"]; exists {
		vOpts := append(opts, db.WithValidateField("peers"))
		if err := fv(ctx, m.GetPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhPeers := v.PeersValidationRuleHandler
	rulesPeers := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "8",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhPeers(rulesPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["peers"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *FamilyInet) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyInet) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyInet) DeepCopy() *FamilyInet {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyInet{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyInet) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyInet) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyInetValidator().Validate(ctx, m, opts...)
}

type ValidateFamilyInet struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyInet) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyInet) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyInet)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyInet got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *FamilyInet_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*FamilyInet_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyInet_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*FamilyInet_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyInetValidator = func() *ValidateFamilyInet {
	v := &ValidateFamilyInet{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyInet.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	return v
}()

func FamilyInetValidator() db.Validator {
	return DefaultFamilyInetValidator
}

// augmented methods on protoc/std generated struct

func (m *FamilyInet6) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyInet6) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyInet6) DeepCopy() *FamilyInet6 {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyInet6{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyInet6) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyInet6) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyInet6Validator().Validate(ctx, m, opts...)
}

type ValidateFamilyInet6 struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyInet6) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyInet6) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyInet6)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyInet6 got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *FamilyInet6_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*FamilyInet6_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyInet6_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*FamilyInet6_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyInet6Validator = func() *ValidateFamilyInet6 {
	v := &ValidateFamilyInet6{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyInet6.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	return v
}()

func FamilyInet6Validator() db.Validator {
	return DefaultFamilyInet6Validator
}

// augmented methods on protoc/std generated struct

func (m *FamilyInet6Vpn) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyInet6Vpn) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyInet6Vpn) DeepCopy() *FamilyInet6Vpn {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyInet6Vpn{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyInet6Vpn) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyInet6Vpn) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyInet6VpnValidator().Validate(ctx, m, opts...)
}

type ValidateFamilyInet6Vpn struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyInet6Vpn) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyInet6Vpn) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyInet6Vpn)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyInet6Vpn got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *FamilyInet6Vpn_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*FamilyInet6Vpn_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyInet6Vpn_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*FamilyInet6Vpn_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyInet6VpnValidator = func() *ValidateFamilyInet6Vpn {
	v := &ValidateFamilyInet6Vpn{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyInet6Vpn.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	return v
}()

func FamilyInet6VpnValidator() db.Validator {
	return DefaultFamilyInet6VpnValidator
}

// augmented methods on protoc/std generated struct

func (m *FamilyInetvpn) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyInetvpn) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyInetvpn) DeepCopy() *FamilyInetvpn {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyInetvpn{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyInetvpn) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyInetvpn) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyInetvpnValidator().Validate(ctx, m, opts...)
}

type ValidateFamilyInetvpn struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyInetvpn) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyInetvpn) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyInetvpn)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyInetvpn got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *FamilyInetvpn_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*FamilyInetvpn_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyInetvpn_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*FamilyInetvpn_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyInetvpnValidator = func() *ValidateFamilyInetvpn {
	v := &ValidateFamilyInetvpn{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyInetvpn.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	v.FldValidators["enable_choice.enable"] = FamilyInetvpnParametersValidator().Validate

	return v
}()

func FamilyInetvpnValidator() db.Validator {
	return DefaultFamilyInetvpnValidator
}

// augmented methods on protoc/std generated struct

func (m *FamilyInetvpnParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyInetvpnParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyInetvpnParameters) DeepCopy() *FamilyInetvpnParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyInetvpnParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyInetvpnParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyInetvpnParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyInetvpnParametersValidator().Validate(ctx, m, opts...)
}

type ValidateFamilyInetvpnParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyInetvpnParameters) SrChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sr_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyInetvpnParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyInetvpnParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyInetvpnParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["sr_choice"]; exists {
		val := m.GetSrChoice()
		vOpts := append(opts,
			db.WithValidateField("sr_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSrChoice().(type) {
	case *FamilyInetvpnParameters_Enable:
		if fv, exists := v.FldValidators["sr_choice.enable"]; exists {
			val := m.GetSrChoice().(*FamilyInetvpnParameters_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("sr_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyInetvpnParameters_Disable:
		if fv, exists := v.FldValidators["sr_choice.disable"]; exists {
			val := m.GetSrChoice().(*FamilyInetvpnParameters_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("sr_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyInetvpnParametersValidator = func() *ValidateFamilyInetvpnParameters {
	v := &ValidateFamilyInetvpnParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSrChoice := v.SrChoiceValidationRuleHandler
	rulesSrChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSrChoice(rulesSrChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyInetvpnParameters.sr_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sr_choice"] = vFn

	return v
}()

func FamilyInetvpnParametersValidator() db.Validator {
	return DefaultFamilyInetvpnParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *FamilyRtarget) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyRtarget) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyRtarget) DeepCopy() *FamilyRtarget {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyRtarget{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyRtarget) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyRtarget) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyRtargetValidator().Validate(ctx, m, opts...)
}

type ValidateFamilyRtarget struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyRtarget) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyRtarget) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyRtarget)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyRtarget got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *FamilyRtarget_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*FamilyRtarget_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyRtarget_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*FamilyRtarget_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyRtargetValidator = func() *ValidateFamilyRtarget {
	v := &ValidateFamilyRtarget{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyRtarget.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	return v
}()

func FamilyRtargetValidator() db.Validator {
	return DefaultFamilyRtargetValidator
}

// augmented methods on protoc/std generated struct

func (m *FamilyUuidvpn) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FamilyUuidvpn) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FamilyUuidvpn) DeepCopy() *FamilyUuidvpn {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FamilyUuidvpn{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FamilyUuidvpn) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FamilyUuidvpn) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FamilyUuidvpnValidator().Validate(ctx, m, opts...)
}

type ValidateFamilyUuidvpn struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFamilyUuidvpn) EnableChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enable_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFamilyUuidvpn) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FamilyUuidvpn)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FamilyUuidvpn got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_choice"]; exists {
		val := m.GetEnableChoice()
		vOpts := append(opts,
			db.WithValidateField("enable_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnableChoice().(type) {
	case *FamilyUuidvpn_Enable:
		if fv, exists := v.FldValidators["enable_choice.enable"]; exists {
			val := m.GetEnableChoice().(*FamilyUuidvpn_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FamilyUuidvpn_Disable:
		if fv, exists := v.FldValidators["enable_choice.disable"]; exists {
			val := m.GetEnableChoice().(*FamilyUuidvpn_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("enable_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFamilyUuidvpnValidator = func() *ValidateFamilyUuidvpn {
	v := &ValidateFamilyUuidvpn{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnableChoice := v.EnableChoiceValidationRuleHandler
	rulesEnableChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnableChoice(rulesEnableChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FamilyUuidvpn.enable_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enable_choice"] = vFn

	return v
}()

func FamilyUuidvpnValidator() db.Validator {
	return DefaultFamilyUuidvpnValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetPeers() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GetSpecType.peers idx %v", idx)
		}
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetPeersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPeersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWhereDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetPeersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPeers() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetPeers() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPeers() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("peers[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SiteVirtualSiteRefSelectorValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) PeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for peers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Peer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := PeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Peer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Peer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peers"]; exists {
		vOpts := append(opts, db.WithValidateField("peers"))
		if err := fv(ctx, m.GetPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhPeers := v.PeersValidationRuleHandler
	rulesPeers := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "8",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhPeers(rulesPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["peers"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetBgpPeers() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalSpecType.bgp_peers idx %v", idx)
		}
	}

	for idx, e := range m.GetPeers() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalSpecType.peers idx %v", idx)
		}
	}

	for idx, e := range m.GetBgpPeersV6() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalSpecType.bgp_peers_v6 idx %v", idx)
		}
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetBgpPeersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBgpPeersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBgpPeersV6DRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBgpPeersV6DRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkInterfaceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkInterfaceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPeersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPeersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWhereDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetBgpPeersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBgpPeers() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetBgpPeers() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBgpPeers() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("bgp_peers[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetBgpPeersV6DRefInfo() ([]db.DRefInfo, error) {
	if m.GetBgpPeersV6() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetBgpPeersV6() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBgpPeersV6() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("bgp_peers_v6[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

func (m *GlobalSpecType) GetNetworkInterfaceDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetNetworkInterface()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.network_interface[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "network_interface",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetNetworkInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetNetworkInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetNetworkInterface() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetPeersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPeers() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetPeers() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPeers() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("peers[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SiteVirtualSiteRefSelectorValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BgpPeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for bgp_peers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*BgpPeer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := BgpPeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bgp_peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BgpPeer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BgpPeer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bgp_peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bgp_peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for network_interface")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_interface")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_interface")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_interface")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for peers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Peer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := PeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Peer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Peer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BgpPeersV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for bgp_peers_v6")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*BgpPeer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := BgpPeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bgp_peers_v6")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*BgpPeer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*BgpPeer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bgp_peers_v6")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bgp_peers_v6")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers"]; exists {
		vOpts := append(opts, db.WithValidateField("bgp_peers"))
		if err := fv(ctx, m.GetBgpPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peers_v6"]; exists {
		vOpts := append(opts, db.WithValidateField("bgp_peers_v6"))
		if err := fv(ctx, m.GetBgpPeersV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_interface"]; exists {
		vOpts := append(opts, db.WithValidateField("network_interface"))
		if err := fv(ctx, m.GetNetworkInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peers"]; exists {
		vOpts := append(opts, db.WithValidateField("peers"))
		if err := fv(ctx, m.GetPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["target_service"]; exists {

		vOpts := append(opts, db.WithValidateField("target_service"))
		if err := fv(ctx, m.GetTargetService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_version"]; exists {

		vOpts := append(opts, db.WithValidateField("view_version"))
		if err := fv(ctx, m.GetViewVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhBgpPeers := v.BgpPeersValidationRuleHandler
	rulesBgpPeers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhBgpPeers(rulesBgpPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bgp_peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peers"] = vFn

	vrhNetworkInterface := v.NetworkInterfaceValidationRuleHandler
	rulesNetworkInterface := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNetworkInterface(rulesNetworkInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_interface"] = vFn

	vrhPeers := v.PeersValidationRuleHandler
	rulesPeers := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "8",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhPeers(rulesPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["peers"] = vFn

	vrhBgpPeersV6 := v.BgpPeersV6ValidationRuleHandler
	rulesBgpPeersV6 := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhBgpPeersV6(rulesBgpPeersV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bgp_peers_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peers_v6"] = vFn

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *InterfaceList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InterfaceList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InterfaceList) DeepCopy() *InterfaceList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InterfaceList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InterfaceList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InterfaceList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceListValidator().Validate(ctx, m, opts...)
}

func (m *InterfaceList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfacesDRefInfo()

}

func (m *InterfaceList) GetInterfacesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetInterfaces()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("InterfaceList.interfaces[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interfaces",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetInterfacesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *InterfaceList) GetInterfacesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for i, vref := range m.GetInterfaces() {
		if vref == nil {
			return nil, fmt.Errorf("InterfaceList.interfaces[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateInterfaceList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterfaceList) InterfacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interfaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interfaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interfaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interfaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterfaceList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InterfaceList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InterfaceList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interfaces"]; exists {
		vOpts := append(opts, db.WithValidateField("interfaces"))
		if err := fv(ctx, m.GetInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceListValidator = func() *ValidateInterfaceList {
	v := &ValidateInterfaceList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInterfaces := v.InterfacesValidationRuleHandler
	rulesInterfaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaces(rulesInterfaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InterfaceList.interfaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interfaces"] = vFn

	return v
}()

func InterfaceListValidator() db.Validator {
	return DefaultInterfaceListValidator
}

// augmented methods on protoc/std generated struct

func (m *Peer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Peer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *Peer) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetExternal().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Peer.external")
	}

	return nil
}

func (m *Peer) DeepCopy() *Peer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Peer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Peer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Peer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PeerValidator().Validate(ctx, m, opts...)
}

func (m *Peer) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTypeChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Peer) GetTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetTypeChoice().(type) {
	case *Peer_External:

		drInfos, err := m.GetExternal().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetExternal().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "external." + dri.DRField
		}
		return drInfos, err

	case *Peer_Internal:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidatePeer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePeer) PassiveChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for passive_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePeer) TypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePeer) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePeer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Peer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Peer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["passive_choice"]; exists {
		val := m.GetPassiveChoice()
		vOpts := append(opts,
			db.WithValidateField("passive_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPassiveChoice().(type) {
	case *Peer_PassiveModeDisabled:
		if fv, exists := v.FldValidators["passive_choice.passive_mode_disabled"]; exists {
			val := m.GetPassiveChoice().(*Peer_PassiveModeDisabled).PassiveModeDisabled
			vOpts := append(opts,
				db.WithValidateField("passive_choice"),
				db.WithValidateField("passive_mode_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Peer_PassiveModeEnabled:
		if fv, exists := v.FldValidators["passive_choice.passive_mode_enabled"]; exists {
			val := m.GetPassiveChoice().(*Peer_PassiveModeEnabled).PassiveModeEnabled
			vOpts := append(opts,
				db.WithValidateField("passive_choice"),
				db.WithValidateField("passive_mode_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["target_service"]; exists {

		vOpts := append(opts, db.WithValidateField("target_service"))
		if err := fv(ctx, m.GetTargetService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type_choice"]; exists {
		val := m.GetTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTypeChoice().(type) {
	case *Peer_External:
		if fv, exists := v.FldValidators["type_choice.external"]; exists {
			val := m.GetTypeChoice().(*Peer_External).External
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("external"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Peer_Internal:
		if fv, exists := v.FldValidators["type_choice.internal"]; exists {
			val := m.GetTypeChoice().(*Peer_Internal).Internal
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("internal"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPeerValidator = func() *ValidatePeer {
	v := &ValidatePeer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPassiveChoice := v.PassiveChoiceValidationRuleHandler
	rulesPassiveChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPassiveChoice(rulesPassiveChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Peer.passive_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["passive_choice"] = vFn

	vrhTypeChoice := v.TypeChoiceValidationRuleHandler
	rulesTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTypeChoice(rulesTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Peer.type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Peer.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["type_choice.external"] = PeerExternalValidator().Validate
	v.FldValidators["type_choice.internal"] = PeerInternalValidator().Validate

	return v
}()

func PeerValidator() db.Validator {
	return DefaultPeerValidator
}

// augmented methods on protoc/std generated struct

func (m *PeerExternal) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PeerExternal) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PeerExternal) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *PeerExternal) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *PeerExternal) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	switch x := m.AuthChoice.(type) {

	case *PeerExternal_Md5AuthKey:
		x.Md5AuthKey = ""

	}

	return nil
}

func (m *PeerExternal) DeepCopy() *PeerExternal {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PeerExternal{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PeerExternal) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PeerExternal) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PeerExternalValidator().Validate(ctx, m, opts...)
}

func (m *PeerExternal) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *PeerExternal) GetInterfaceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceChoice() == nil {
		return nil, nil
	}
	switch m.GetInterfaceChoice().(type) {
	case *PeerExternal_Interface:

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		dri := db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interface",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *PeerExternal_InterfaceList:

		drInfos, err := m.GetInterfaceList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaceList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "interface_list." + dri.DRField
		}
		return drInfos, err

	case *PeerExternal_InsideInterfaces:

		return nil, nil

	case *PeerExternal_OutsideInterfaces:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidatePeerExternal struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePeerExternal) AddressChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePeerExternal) AddressChoiceAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Address, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}
	return oValidatorFn_Address, nil
}
func (v *ValidatePeerExternal) AddressChoiceSubnetBeginOffsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SubnetBeginOffset, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for subnet_begin_offset")
	}
	return oValidatorFn_SubnetBeginOffset, nil
}
func (v *ValidatePeerExternal) AddressChoiceSubnetEndOffsetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SubnetEndOffset, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for subnet_end_offset")
	}
	return oValidatorFn_SubnetEndOffset, nil
}

func (v *ValidatePeerExternal) AddressChoiceV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_choice_v6")
	}
	return validatorFn, nil
}

func (v *ValidatePeerExternal) AddressChoiceV6AddressIpv6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AddressIpv6, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_ipv6")
	}
	return oValidatorFn_AddressIpv6, nil
}
func (v *ValidatePeerExternal) AddressChoiceV6SubnetBeginOffsetV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SubnetBeginOffsetV6, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for subnet_begin_offset_v6")
	}
	return oValidatorFn_SubnetBeginOffsetV6, nil
}
func (v *ValidatePeerExternal) AddressChoiceV6SubnetEndOffsetV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SubnetEndOffsetV6, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for subnet_end_offset_v6")
	}
	return oValidatorFn_SubnetEndOffsetV6, nil
}

func (v *ValidatePeerExternal) InterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePeerExternal) AsnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for asn")
	}

	return validatorFn, nil
}

func (v *ValidatePeerExternal) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidatePeerExternal) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PeerExternal)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PeerExternal got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address_choice"]; exists {
		val := m.GetAddressChoice()
		vOpts := append(opts,
			db.WithValidateField("address_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAddressChoice().(type) {
	case *PeerExternal_Address:
		if fv, exists := v.FldValidators["address_choice.address"]; exists {
			val := m.GetAddressChoice().(*PeerExternal_Address).Address
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_SubnetBeginOffset:
		if fv, exists := v.FldValidators["address_choice.subnet_begin_offset"]; exists {
			val := m.GetAddressChoice().(*PeerExternal_SubnetBeginOffset).SubnetBeginOffset
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("subnet_begin_offset"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_SubnetEndOffset:
		if fv, exists := v.FldValidators["address_choice.subnet_end_offset"]; exists {
			val := m.GetAddressChoice().(*PeerExternal_SubnetEndOffset).SubnetEndOffset
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("subnet_end_offset"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_FromSite:
		if fv, exists := v.FldValidators["address_choice.from_site"]; exists {
			val := m.GetAddressChoice().(*PeerExternal_FromSite).FromSite
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("from_site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_DefaultGateway:
		if fv, exists := v.FldValidators["address_choice.default_gateway"]; exists {
			val := m.GetAddressChoice().(*PeerExternal_DefaultGateway).DefaultGateway
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("default_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_Disable:
		if fv, exists := v.FldValidators["address_choice.disable"]; exists {
			val := m.GetAddressChoice().(*PeerExternal_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["address_choice_v6"]; exists {
		val := m.GetAddressChoiceV6()
		vOpts := append(opts,
			db.WithValidateField("address_choice_v6"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAddressChoiceV6().(type) {
	case *PeerExternal_AddressIpv6:
		if fv, exists := v.FldValidators["address_choice_v6.address_ipv6"]; exists {
			val := m.GetAddressChoiceV6().(*PeerExternal_AddressIpv6).AddressIpv6
			vOpts := append(opts,
				db.WithValidateField("address_choice_v6"),
				db.WithValidateField("address_ipv6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_SubnetBeginOffsetV6:
		if fv, exists := v.FldValidators["address_choice_v6.subnet_begin_offset_v6"]; exists {
			val := m.GetAddressChoiceV6().(*PeerExternal_SubnetBeginOffsetV6).SubnetBeginOffsetV6
			vOpts := append(opts,
				db.WithValidateField("address_choice_v6"),
				db.WithValidateField("subnet_begin_offset_v6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_SubnetEndOffsetV6:
		if fv, exists := v.FldValidators["address_choice_v6.subnet_end_offset_v6"]; exists {
			val := m.GetAddressChoiceV6().(*PeerExternal_SubnetEndOffsetV6).SubnetEndOffsetV6
			vOpts := append(opts,
				db.WithValidateField("address_choice_v6"),
				db.WithValidateField("subnet_end_offset_v6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_FromSiteV6:
		if fv, exists := v.FldValidators["address_choice_v6.from_site_v6"]; exists {
			val := m.GetAddressChoiceV6().(*PeerExternal_FromSiteV6).FromSiteV6
			vOpts := append(opts,
				db.WithValidateField("address_choice_v6"),
				db.WithValidateField("from_site_v6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_DefaultGatewayV6:
		if fv, exists := v.FldValidators["address_choice_v6.default_gateway_v6"]; exists {
			val := m.GetAddressChoiceV6().(*PeerExternal_DefaultGatewayV6).DefaultGatewayV6
			vOpts := append(opts,
				db.WithValidateField("address_choice_v6"),
				db.WithValidateField("default_gateway_v6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_DisableV6:
		if fv, exists := v.FldValidators["address_choice_v6.disable_v6"]; exists {
			val := m.GetAddressChoiceV6().(*PeerExternal_DisableV6).DisableV6
			vOpts := append(opts,
				db.WithValidateField("address_choice_v6"),
				db.WithValidateField("disable_v6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["asn"]; exists {

		vOpts := append(opts, db.WithValidateField("asn"))
		if err := fv(ctx, m.GetAsn(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetAuthChoice().(type) {
	case *PeerExternal_NoAuthentication:
		if fv, exists := v.FldValidators["auth_choice.no_authentication"]; exists {
			val := m.GetAuthChoice().(*PeerExternal_NoAuthentication).NoAuthentication
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("no_authentication"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_Md5AuthKey:
		if fv, exists := v.FldValidators["auth_choice.md5_auth_key"]; exists {
			val := m.GetAuthChoice().(*PeerExternal_Md5AuthKey).Md5AuthKey
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("md5_auth_key"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["family_inet"]; exists {

		vOpts := append(opts, db.WithValidateField("family_inet"))
		if err := fv(ctx, m.GetFamilyInet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["family_inet_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("family_inet_v6"))
		if err := fv(ctx, m.GetFamilyInetV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_choice"]; exists {
		val := m.GetInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInterfaceChoice().(type) {
	case *PeerExternal_Interface:
		if fv, exists := v.FldValidators["interface_choice.interface"]; exists {
			val := m.GetInterfaceChoice().(*PeerExternal_Interface).Interface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_InterfaceList:
		if fv, exists := v.FldValidators["interface_choice.interface_list"]; exists {
			val := m.GetInterfaceChoice().(*PeerExternal_InterfaceList).InterfaceList
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("interface_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_InsideInterfaces:
		if fv, exists := v.FldValidators["interface_choice.inside_interfaces"]; exists {
			val := m.GetInterfaceChoice().(*PeerExternal_InsideInterfaces).InsideInterfaces
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("inside_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerExternal_OutsideInterfaces:
		if fv, exists := v.FldValidators["interface_choice.outside_interfaces"]; exists {
			val := m.GetInterfaceChoice().(*PeerExternal_OutsideInterfaces).OutsideInterfaces
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("outside_interfaces"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPeerExternalValidator = func() *ValidatePeerExternal {
	v := &ValidatePeerExternal{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAddressChoice := v.AddressChoiceValidationRuleHandler
	rulesAddressChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAddressChoice(rulesAddressChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerExternal.address_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address_choice"] = vFn

	vrhAddressChoiceAddress := v.AddressChoiceAddressValidationRuleHandler
	rulesAddressChoiceAddress := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFnMap["address_choice.address"], err = vrhAddressChoiceAddress(rulesAddressChoiceAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerExternal.address_choice_address: %s", err)
		panic(errMsg)
	}
	vrhAddressChoiceSubnetBeginOffset := v.AddressChoiceSubnetBeginOffsetValidationRuleHandler
	rulesAddressChoiceSubnetBeginOffset := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "32",
	}
	vFnMap["address_choice.subnet_begin_offset"], err = vrhAddressChoiceSubnetBeginOffset(rulesAddressChoiceSubnetBeginOffset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerExternal.address_choice_subnet_begin_offset: %s", err)
		panic(errMsg)
	}
	vrhAddressChoiceSubnetEndOffset := v.AddressChoiceSubnetEndOffsetValidationRuleHandler
	rulesAddressChoiceSubnetEndOffset := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "32",
	}
	vFnMap["address_choice.subnet_end_offset"], err = vrhAddressChoiceSubnetEndOffset(rulesAddressChoiceSubnetEndOffset)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerExternal.address_choice_subnet_end_offset: %s", err)
		panic(errMsg)
	}

	v.FldValidators["address_choice.address"] = vFnMap["address_choice.address"]
	v.FldValidators["address_choice.subnet_begin_offset"] = vFnMap["address_choice.subnet_begin_offset"]
	v.FldValidators["address_choice.subnet_end_offset"] = vFnMap["address_choice.subnet_end_offset"]

	vrhAddressChoiceV6 := v.AddressChoiceV6ValidationRuleHandler
	rulesAddressChoiceV6 := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAddressChoiceV6(rulesAddressChoiceV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerExternal.address_choice_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address_choice_v6"] = vFn

	vrhAddressChoiceV6AddressIpv6 := v.AddressChoiceV6AddressIpv6ValidationRuleHandler
	rulesAddressChoiceV6AddressIpv6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFnMap["address_choice_v6.address_ipv6"], err = vrhAddressChoiceV6AddressIpv6(rulesAddressChoiceV6AddressIpv6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerExternal.address_choice_v6_address_ipv6: %s", err)
		panic(errMsg)
	}
	vrhAddressChoiceV6SubnetBeginOffsetV6 := v.AddressChoiceV6SubnetBeginOffsetV6ValidationRuleHandler
	rulesAddressChoiceV6SubnetBeginOffsetV6 := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "32",
	}
	vFnMap["address_choice_v6.subnet_begin_offset_v6"], err = vrhAddressChoiceV6SubnetBeginOffsetV6(rulesAddressChoiceV6SubnetBeginOffsetV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerExternal.address_choice_v6_subnet_begin_offset_v6: %s", err)
		panic(errMsg)
	}
	vrhAddressChoiceV6SubnetEndOffsetV6 := v.AddressChoiceV6SubnetEndOffsetV6ValidationRuleHandler
	rulesAddressChoiceV6SubnetEndOffsetV6 := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "32",
	}
	vFnMap["address_choice_v6.subnet_end_offset_v6"], err = vrhAddressChoiceV6SubnetEndOffsetV6(rulesAddressChoiceV6SubnetEndOffsetV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerExternal.address_choice_v6_subnet_end_offset_v6: %s", err)
		panic(errMsg)
	}

	v.FldValidators["address_choice_v6.address_ipv6"] = vFnMap["address_choice_v6.address_ipv6"]
	v.FldValidators["address_choice_v6.subnet_begin_offset_v6"] = vFnMap["address_choice_v6.subnet_begin_offset_v6"]
	v.FldValidators["address_choice_v6.subnet_end_offset_v6"] = vFnMap["address_choice_v6.subnet_end_offset_v6"]

	vrhInterfaceChoice := v.InterfaceChoiceValidationRuleHandler
	rulesInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInterfaceChoice(rulesInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerExternal.interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_choice"] = vFn

	vrhAsn := v.AsnValidationRuleHandler
	rulesAsn := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhAsn(rulesAsn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerExternal.asn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerExternal.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	v.FldValidators["interface_choice.interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["interface_choice.interface_list"] = InterfaceListValidator().Validate

	v.FldValidators["family_inet"] = FamilyInetValidator().Validate

	v.FldValidators["family_inet_v6"] = FamilyInet6Validator().Validate

	return v
}()

func PeerExternalValidator() db.Validator {
	return DefaultPeerExternalValidator
}

// augmented methods on protoc/std generated struct

func (m *PeerFamilyParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PeerFamilyParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PeerFamilyParameters) DeepCopy() *PeerFamilyParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PeerFamilyParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PeerFamilyParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PeerFamilyParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PeerFamilyParametersValidator().Validate(ctx, m, opts...)
}

type ValidatePeerFamilyParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePeerFamilyParameters) FamilyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for family")
	}

	return validatorFn, nil
}

func (v *ValidatePeerFamilyParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PeerFamilyParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PeerFamilyParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enable_srv6"]; exists {

		vOpts := append(opts, db.WithValidateField("enable_srv6"))
		if err := fv(ctx, m.GetEnableSrv6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["family"]; exists {

		vOpts := append(opts, db.WithValidateField("family"))
		if err := fv(ctx, m.GetFamily(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPeerFamilyParametersValidator = func() *ValidatePeerFamilyParameters {
	v := &ValidatePeerFamilyParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFamily := v.FamilyValidationRuleHandler
	rulesFamily := map[string]string{
		"ves.io.schema.rules.string.max_len": "16",
	}
	vFn, err = vrhFamily(rulesFamily)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerFamilyParameters.family: %s", err)
		panic(errMsg)
	}
	v.FldValidators["family"] = vFn

	return v
}()

func PeerFamilyParametersValidator() db.Validator {
	return DefaultPeerFamilyParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *PeerInternal) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PeerInternal) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PeerInternal) DeepCopy() *PeerInternal {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PeerInternal{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PeerInternal) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PeerInternal) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PeerInternalValidator().Validate(ctx, m, opts...)
}

type ValidatePeerInternal struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePeerInternal) AddressChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePeerInternal) AddressChoiceAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Address, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}
	return oValidatorFn_Address, nil
}
func (v *ValidatePeerInternal) AddressChoiceDnsNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_DnsName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_name")
	}
	return oValidatorFn_DnsName, nil
}

func (v *ValidatePeerInternal) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidatePeerInternal) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PeerInternal)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PeerInternal got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address_choice"]; exists {
		val := m.GetAddressChoice()
		vOpts := append(opts,
			db.WithValidateField("address_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAddressChoice().(type) {
	case *PeerInternal_Address:
		if fv, exists := v.FldValidators["address_choice.address"]; exists {
			val := m.GetAddressChoice().(*PeerInternal_Address).Address
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerInternal_FromSite:
		if fv, exists := v.FldValidators["address_choice.from_site"]; exists {
			val := m.GetAddressChoice().(*PeerInternal_FromSite).FromSite
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("from_site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerInternal_DnsName:
		if fv, exists := v.FldValidators["address_choice.dns_name"]; exists {
			val := m.GetAddressChoice().(*PeerInternal_DnsName).DnsName
			vOpts := append(opts,
				db.WithValidateField("address_choice"),
				db.WithValidateField("dns_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["family_inet6vpn"]; exists {

		vOpts := append(opts, db.WithValidateField("family_inet6vpn"))
		if err := fv(ctx, m.GetFamilyInet6Vpn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["family_inetvpn"]; exists {

		vOpts := append(opts, db.WithValidateField("family_inetvpn"))
		if err := fv(ctx, m.GetFamilyInetvpn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["family_rtarget"]; exists {

		vOpts := append(opts, db.WithValidateField("family_rtarget"))
		if err := fv(ctx, m.GetFamilyRtarget(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["family_uuidvpn"]; exists {

		vOpts := append(opts, db.WithValidateField("family_uuidvpn"))
		if err := fv(ctx, m.GetFamilyUuidvpn(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMtlsChoice().(type) {
	case *PeerInternal_DisableMtls:
		if fv, exists := v.FldValidators["mtls_choice.disable_mtls"]; exists {
			val := m.GetMtlsChoice().(*PeerInternal_DisableMtls).DisableMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("disable_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PeerInternal_EnableMtls:
		if fv, exists := v.FldValidators["mtls_choice.enable_mtls"]; exists {
			val := m.GetMtlsChoice().(*PeerInternal_EnableMtls).EnableMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("enable_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPeerInternalValidator = func() *ValidatePeerInternal {
	v := &ValidatePeerInternal{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAddressChoice := v.AddressChoiceValidationRuleHandler
	rulesAddressChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAddressChoice(rulesAddressChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerInternal.address_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address_choice"] = vFn

	vrhAddressChoiceAddress := v.AddressChoiceAddressValidationRuleHandler
	rulesAddressChoiceAddress := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFnMap["address_choice.address"], err = vrhAddressChoiceAddress(rulesAddressChoiceAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerInternal.address_choice_address: %s", err)
		panic(errMsg)
	}
	vrhAddressChoiceDnsName := v.AddressChoiceDnsNameValidationRuleHandler
	rulesAddressChoiceDnsName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["address_choice.dns_name"], err = vrhAddressChoiceDnsName(rulesAddressChoiceDnsName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PeerInternal.address_choice_dns_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["address_choice.address"] = vFnMap["address_choice.address"]
	v.FldValidators["address_choice.dns_name"] = vFnMap["address_choice.dns_name"]

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PeerInternal.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	v.FldValidators["family_inetvpn"] = FamilyInetvpnValidator().Validate

	v.FldValidators["family_rtarget"] = FamilyRtargetValidator().Validate

	v.FldValidators["family_inet6vpn"] = FamilyInet6VpnValidator().Validate

	v.FldValidators["family_uuidvpn"] = FamilyUuidvpnValidator().Validate

	return v
}()

func PeerInternalValidator() db.Validator {
	return DefaultPeerInternalValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetPeers() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting ReplaceSpecType.peers idx %v", idx)
		}
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetPeersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPeersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWhereDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetPeersDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPeers() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetPeers() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPeers() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("peers[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) WhereValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for where")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SiteVirtualSiteRefSelectorValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BgpParametersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for bgp_parameters")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BgpParametersValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PeersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for peers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Peer, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := PeerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for peers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Peer)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Peer, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated peers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items peers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_parameters"))
		if err := fv(ctx, m.GetBgpParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["peers"]; exists {
		vOpts := append(opts, db.WithValidateField("peers"))
		if err := fv(ctx, m.GetPeers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhWhere := v.WhereValidationRuleHandler
	rulesWhere := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhWhere(rulesWhere)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.where: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where"] = vFn

	vrhBgpParameters := v.BgpParametersValidationRuleHandler
	rulesBgpParameters := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBgpParameters(rulesBgpParameters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.bgp_parameters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_parameters"] = vFn

	vrhPeers := v.PeersValidationRuleHandler
	rulesPeers := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "8",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhPeers(rulesPeers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.peers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["peers"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BgpParameters = f.GetBgpParameters()
	m.Peers = f.GetPeers()
	m.Where = f.GetWhere()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BgpParameters = m1.BgpParameters
	f.Peers = m1.Peers
	f.Where = m1.Where
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BgpParameters = f.GetBgpParameters()
	m.Peers = f.GetPeers()
	m.Where = f.GetWhere()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BgpParameters = m1.BgpParameters
	f.Peers = m1.Peers
	f.Where = m1.Where
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BgpParameters = f.GetBgpParameters()
	m.Peers = f.GetPeers()
	m.Where = f.GetWhere()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BgpParameters = m1.BgpParameters
	f.Peers = m1.Peers
	f.Where = m1.Where
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package bgp

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetStatusRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetStatusRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetStatusRequest) DeepCopy() *GetStatusRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetStatusRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetStatusRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetStatusRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetStatusRequestValidator().Validate(ctx, m, opts...)
}

type ValidateGetStatusRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetStatusRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetStatusRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetStatusRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_kind"]; exists {

		vOpts := append(opts, db.WithValidateField("view_kind"))
		if err := fv(ctx, m.GetViewKind(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_name"]; exists {

		vOpts := append(opts, db.WithValidateField("view_name"))
		if err := fv(ctx, m.GetViewName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetStatusRequestValidator = func() *ValidateGetStatusRequest {
	v := &ValidateGetStatusRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetStatusRequestValidator() db.Validator {
	return DefaultGetStatusRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *GetStatusResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetStatusResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetStatusResponse) DeepCopy() *GetStatusResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetStatusResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetStatusResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetStatusResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetStatusResponseValidator().Validate(ctx, m, opts...)
}

func (m *GetStatusResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return nil, nil

}

type ValidateGetStatusResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetStatusResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetStatusResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetStatusResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		for idx, item := range m.GetStatus() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetStatusResponseValidator = func() *ValidateGetStatusResponse {
	v := &ValidateGetStatusResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["status"] = StatusObjectValidator().Validate

	return v
}()

func GetStatusResponseValidator() db.Validator {
	return DefaultGetStatusResponseValidator
}

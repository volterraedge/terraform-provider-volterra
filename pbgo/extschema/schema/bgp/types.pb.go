// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/bgp/types.proto

package bgp

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BGP Router ID
//
// x-displayName: "BGP Router ID"
// Dictates how BGP router id is derived
type BgpRouterIdType int32

const (
	// x-displayName: "From Interface"
	// Use IP address of interface on which BGP is configured as BGP router ID
	BGP_ROUTER_ID_FROM_INTERFACE BgpRouterIdType = 0
	// x-displayName: "From IP Address"
	// Use BGP Router ID from BGP Parameters as BGP router ID
	BGP_ROUTER_ID_FROM_IP_ADDRESS BgpRouterIdType = 1
	// x-displayName: "From Site"
	// Use BGP Router ID from corresponding site object as BGP router ID
	BGP_ROUTER_ID_FROM_SITE_OBJECT BgpRouterIdType = 2
	// x-displayName: "From Site Template"
	// Use BGP Router ID Key from corresponding site's Site Template Parameters as BGP router ID.
	// This is not currently supported.
	BGP_ROUTER_ID_FROM_SITE_TEMPLATE_PARAMETERS BgpRouterIdType = 3
)

var BgpRouterIdType_name = map[int32]string{
	0: "BGP_ROUTER_ID_FROM_INTERFACE",
	1: "BGP_ROUTER_ID_FROM_IP_ADDRESS",
	2: "BGP_ROUTER_ID_FROM_SITE_OBJECT",
	3: "BGP_ROUTER_ID_FROM_SITE_TEMPLATE_PARAMETERS",
}

var BgpRouterIdType_value = map[string]int32{
	"BGP_ROUTER_ID_FROM_INTERFACE":                0,
	"BGP_ROUTER_ID_FROM_IP_ADDRESS":               1,
	"BGP_ROUTER_ID_FROM_SITE_OBJECT":              2,
	"BGP_ROUTER_ID_FROM_SITE_TEMPLATE_PARAMETERS": 3,
}

func (BgpRouterIdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{0}
}

// BGP Peer Address
//
// x-displayName: "BGP Peer Address"
// Dictates how BGP peer address is derived
type BgpPeerAddressType int32

const (
	// x-displayName: "From Default GW"
	// Use default gateway IP address of interface on which the BGP is configured as BGP peer address
	BGP_PEER_ADDRESS_FROM_DEFAULT_GW BgpPeerAddressType = 0
	// x-displayName: "From IP Address"
	// Use BGP Peer Address from BGP Peer as BGP peer address
	BGP_PEER_ADDRESS_FROM_IP_ADDRESS BgpPeerAddressType = 1
	// x-displayName: "From Site"
	// Use BGP Peer Address from corresponding site object as BGP peer address
	BGP_PEER_ADDRESS_FROM_SITE_OBJECT BgpPeerAddressType = 2
	// x-displayName: "From Site Template"
	// Use BGP Peer Key from corresponding site's Site Template Parameters as BGP peer address.
	// This is not currently supported.
	BGP_PEER_ADDRESS_FROM_SITE_TEMPLATE_PARAMETERS BgpPeerAddressType = 3
	// x-displayName: "Offset from beginning of Subnet"
	// Derive BGP Peer Address from subnet of interface on which the BGP is configured. If the interface
	// has Address Allocator configured, the offset is used to derive BGP Peer Address from the subnet
	// assigned by the address allocator for the interface. When Address Allocator is not configured, the
	// subnet of the interface is used to derive BGP Peer Address.
	//
	// Nth address in the subnet, N being the Peer Subnet Offset of the BGP Peer, is used as peer address.
	// For example, if the subnet is 1.2.3.0/24, Peer Subnet Offset is set to 5 and Peer Address Type
	// is set to "Offset from beginning of Subnet", peer address of 1.2.3.5 is used.
	BGP_PEER_ADDRESS_OFFSET_FROM_SUBNET_BEGIN BgpPeerAddressType = 4
	// x-displayName: "Offset from end of Subnet"
	// Derive BGP Peer Address from subnet of interface on which the BGP is configured. If the interface
	// has Address Allocator configured, the offset is used to derive BGP Peer Address from the subnet
	// assigned by the address allocator for the interface. When Address Allocator is not configured, the
	// subnet of the interface is used to derive BGP Peer Address.
	//
	// Nth last address in the subnet, N being the Peer Subnet Offset of the BGP Peer, is used as peer address.
	// For example, if the subnet is 1.2.3.0/24, Peer Subnet Offset is set to 5 and Peer Address Type
	// is set to "Offset from end of Subnet", peer address of 1.2.3.250 is used.
	BGP_PEER_ADDRESS_OFFSET_FROM_SUBNET_END BgpPeerAddressType = 5
)

var BgpPeerAddressType_name = map[int32]string{
	0: "BGP_PEER_ADDRESS_FROM_DEFAULT_GW",
	1: "BGP_PEER_ADDRESS_FROM_IP_ADDRESS",
	2: "BGP_PEER_ADDRESS_FROM_SITE_OBJECT",
	3: "BGP_PEER_ADDRESS_FROM_SITE_TEMPLATE_PARAMETERS",
	4: "BGP_PEER_ADDRESS_OFFSET_FROM_SUBNET_BEGIN",
	5: "BGP_PEER_ADDRESS_OFFSET_FROM_SUBNET_END",
}

var BgpPeerAddressType_value = map[string]int32{
	"BGP_PEER_ADDRESS_FROM_DEFAULT_GW":               0,
	"BGP_PEER_ADDRESS_FROM_IP_ADDRESS":               1,
	"BGP_PEER_ADDRESS_FROM_SITE_OBJECT":              2,
	"BGP_PEER_ADDRESS_FROM_SITE_TEMPLATE_PARAMETERS": 3,
	"BGP_PEER_ADDRESS_OFFSET_FROM_SUBNET_BEGIN":      4,
	"BGP_PEER_ADDRESS_OFFSET_FROM_SUBNET_END":        5,
}

func (BgpPeerAddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{1}
}

// BGP Peer States
//
// x-displayName: "BGP Peer States"
// Indicates the state of BGP Peering session
type BgpPeerUpDownType int32

const (
	// x-displayName: "Down"
	// Peering session is Down (not in Established state)
	BGP_PEER_DOWN BgpPeerUpDownType = 0
	// x-displayName: "Up"
	// Peering session is Up (in Established state)
	BGP_PEER_UP BgpPeerUpDownType = 1
)

var BgpPeerUpDownType_name = map[int32]string{
	0: "BGP_PEER_DOWN",
	1: "BGP_PEER_UP",
}

var BgpPeerUpDownType_value = map[string]int32{
	"BGP_PEER_DOWN": 0,
	"BGP_PEER_UP":   1,
}

func (BgpPeerUpDownType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{2}
}

// BGP Parameters
//
// x-displayName: "BGP Parameters"
// BGP parameters for the local site
type BgpParameters struct {
	// ASN
	//
	// x-displayName: "ASN"
	// x-example: 64512
	// x-required
	// Autonomous System Number
	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// router_id_choice
	//
	// x-displayName: "Router ID"
	// x-required
	// Select the Router ID.
	//
	// Types that are valid to be assigned to RouterIdChoice:
	//	*BgpParameters_LocalAddress
	//	*BgpParameters_FromSite
	//	*BgpParameters_IpAddress
	RouterIdChoice isBgpParameters_RouterIdChoice `protobuf_oneof:"router_id_choice"`
	// Router ID Type
	//
	// x-displayName: "Router ID Type"
	// Decides how BGP router id is derived
	BgpRouterIdType BgpRouterIdType `protobuf:"varint,2,opt,name=bgp_router_id_type,json=bgpRouterIdType,proto3,enum=ves.io.schema.bgp.BgpRouterIdType" json:"bgp_router_id_type,omitempty"`
	// Router ID
	//
	// x-displayName: "Router ID"
	// If Router ID Type is set to "From IP Address", this is used as Router ID. Else, this is ignored.
	BgpRouterId *schema.IpAddressType `protobuf:"bytes,3,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	// Router ID Key
	//
	// x-displayName: "Router ID Key"
	// If Router ID Type is set to "From Site Template", this is used to lookup BGP router ID
	// from site template parameters map in site object. Else, this is ignored.
	BgpRouterIdKey string `protobuf:"bytes,4,opt,name=bgp_router_id_key,json=bgpRouterIdKey,proto3" json:"bgp_router_id_key,omitempty"`
}

func (m *BgpParameters) Reset()      { *m = BgpParameters{} }
func (*BgpParameters) ProtoMessage() {}
func (*BgpParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{0}
}
func (m *BgpParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpParameters.Merge(m, src)
}
func (m *BgpParameters) XXX_Size() int {
	return m.Size()
}
func (m *BgpParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpParameters.DiscardUnknown(m)
}

var xxx_messageInfo_BgpParameters proto.InternalMessageInfo

type isBgpParameters_RouterIdChoice interface {
	isBgpParameters_RouterIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BgpParameters_LocalAddress struct {
	LocalAddress *schema.Empty `protobuf:"bytes,6,opt,name=local_address,json=localAddress,proto3,oneof" json:"local_address,omitempty"`
}
type BgpParameters_FromSite struct {
	FromSite *schema.Empty `protobuf:"bytes,7,opt,name=from_site,json=fromSite,proto3,oneof" json:"from_site,omitempty"`
}
type BgpParameters_IpAddress struct {
	IpAddress string `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3,oneof" json:"ip_address,omitempty"`
}

func (*BgpParameters_LocalAddress) isBgpParameters_RouterIdChoice() {}
func (*BgpParameters_FromSite) isBgpParameters_RouterIdChoice()     {}
func (*BgpParameters_IpAddress) isBgpParameters_RouterIdChoice()    {}

func (m *BgpParameters) GetRouterIdChoice() isBgpParameters_RouterIdChoice {
	if m != nil {
		return m.RouterIdChoice
	}
	return nil
}

func (m *BgpParameters) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *BgpParameters) GetLocalAddress() *schema.Empty {
	if x, ok := m.GetRouterIdChoice().(*BgpParameters_LocalAddress); ok {
		return x.LocalAddress
	}
	return nil
}

func (m *BgpParameters) GetFromSite() *schema.Empty {
	if x, ok := m.GetRouterIdChoice().(*BgpParameters_FromSite); ok {
		return x.FromSite
	}
	return nil
}

func (m *BgpParameters) GetIpAddress() string {
	if x, ok := m.GetRouterIdChoice().(*BgpParameters_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

func (m *BgpParameters) GetBgpRouterIdType() BgpRouterIdType {
	if m != nil {
		return m.BgpRouterIdType
	}
	return BGP_ROUTER_ID_FROM_INTERFACE
}

func (m *BgpParameters) GetBgpRouterId() *schema.IpAddressType {
	if m != nil {
		return m.BgpRouterId
	}
	return nil
}

func (m *BgpParameters) GetBgpRouterIdKey() string {
	if m != nil {
		return m.BgpRouterIdKey
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BgpParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BgpParameters_LocalAddress)(nil),
		(*BgpParameters_FromSite)(nil),
		(*BgpParameters_IpAddress)(nil),
	}
}

// Legacy BGP Peer
//
// x-displayName: "Legacy BGP Peer"
// Legacy BGP Peer parameters
type BgpPeer struct {
	// ASN
	//
	// x-displayName: "ASN"
	// Autonomous System Number for BGP peer
	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// Peer Address Type
	//
	// x-displayName: "Peer Address Type"
	// Decides how bgp peer address is derived for this peer
	BgpPeerAddressType BgpPeerAddressType `protobuf:"varint,2,opt,name=bgp_peer_address_type,json=bgpPeerAddressType,proto3,enum=ves.io.schema.bgp.BgpPeerAddressType" json:"bgp_peer_address_type,omitempty"`
	// Peer Address
	//
	// x-displayName: "Peer Address"
	// If Peer Address Type is set to "From IP Address", this is used as Peer Address. Else, this is ignored.
	BgpPeerAddress *schema.IpAddressType `protobuf:"bytes,3,opt,name=bgp_peer_address,json=bgpPeerAddress,proto3" json:"bgp_peer_address,omitempty"`
	// Peer Address Key
	//
	// x-displayName: "Peer Address Key"
	// If Peer Address Type is set to "From Site Template", this is used to lookup BGP peer address
	// from site template parameters map in site object. Else, this is ignored.
	BgpPeerAddressKey string `protobuf:"bytes,4,opt,name=bgp_peer_address_key,json=bgpPeerAddressKey,proto3" json:"bgp_peer_address_key,omitempty"`
	// Peer Port
	//
	// x-displayName: "Peer Port"
	// x-example: 179
	// Peer's port number, defaults to port 179 when not set
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Peer Subnet Offset
	//
	// x-displayName: "Peer Subnet Offset"
	// x-example: 1
	// This is used to derive BGP Peer Address from subnet of the interface on which BGP is configured. If
	// the interface has Address Allocator configured, BGP Peer Address is derived from the subnet assigned
	// by the address allocator for the interface. When Address Allocator is not configured, the subnet of
	// the interface is used to derive BGP Peer Address.
	//
	// If Peer Address Type is set to "Offset from beginning of Subnet", this offset value is added to the subnet
	// and used as the peer address. For example, if the subnet is 1.2.3.0/24 and offset is set to 5 with
	// Peer Address Type set to "Offset from beginning of Subnet", peer address of 1.2.3.5 is used.
	//
	// If Peer Address Type is set to "Offset from end of Subnet", this offset value is subtracted from the
	// end of subnet and used as the peer address. For example, if the subnet is 1.2.3.0/24 and offset is
	// set to 5 with Peer Address Type set to "Offset from end of Subnet", peer address of 1.2.3.250 is used.
	BgpPeerSubnetOffset uint32 `protobuf:"varint,6,opt,name=bgp_peer_subnet_offset,json=bgpPeerSubnetOffset,proto3" json:"bgp_peer_subnet_offset,omitempty"`
	// families
	//
	// x-displayName: "Address Families"
	// List of address families for processing in vega code.
	Families []*PeerFamilyParameters `protobuf:"bytes,20,rep,name=families,proto3" json:"families,omitempty"`
	// interface_refs
	//
	// x-displayName: "Interface Refs"
	// List of interface refs for processing in vega code.
	InterfaceRefs []*schema.ObjectRefType `protobuf:"bytes,21,rep,name=interface_refs,json=interfaceRefs,proto3" json:"interface_refs,omitempty"`
	// all_inside_interfaces
	//
	// x-displayName: "All Inside Interfaces"
	// Tell vega to create this peer on each inside interface.
	AllInsideInterfaces bool `protobuf:"varint,22,opt,name=all_inside_interfaces,json=allInsideInterfaces,proto3" json:"all_inside_interfaces,omitempty"`
	// interface_refs
	//
	// x-displayName: "All Outside Interfaces"
	// Tell vega to create this peer on each outside interface.
	AllOutsideInterfaces bool `protobuf:"varint,23,opt,name=all_outside_interfaces,json=allOutsideInterfaces,proto3" json:"all_outside_interfaces,omitempty"`
}

func (m *BgpPeer) Reset()      { *m = BgpPeer{} }
func (*BgpPeer) ProtoMessage() {}
func (*BgpPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{1}
}
func (m *BgpPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPeer.Merge(m, src)
}
func (m *BgpPeer) XXX_Size() int {
	return m.Size()
}
func (m *BgpPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPeer.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPeer proto.InternalMessageInfo

func (m *BgpPeer) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *BgpPeer) GetBgpPeerAddressType() BgpPeerAddressType {
	if m != nil {
		return m.BgpPeerAddressType
	}
	return BGP_PEER_ADDRESS_FROM_DEFAULT_GW
}

func (m *BgpPeer) GetBgpPeerAddress() *schema.IpAddressType {
	if m != nil {
		return m.BgpPeerAddress
	}
	return nil
}

func (m *BgpPeer) GetBgpPeerAddressKey() string {
	if m != nil {
		return m.BgpPeerAddressKey
	}
	return ""
}

func (m *BgpPeer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *BgpPeer) GetBgpPeerSubnetOffset() uint32 {
	if m != nil {
		return m.BgpPeerSubnetOffset
	}
	return 0
}

func (m *BgpPeer) GetFamilies() []*PeerFamilyParameters {
	if m != nil {
		return m.Families
	}
	return nil
}

func (m *BgpPeer) GetInterfaceRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.InterfaceRefs
	}
	return nil
}

func (m *BgpPeer) GetAllInsideInterfaces() bool {
	if m != nil {
		return m.AllInsideInterfaces
	}
	return false
}

func (m *BgpPeer) GetAllOutsideInterfaces() bool {
	if m != nil {
		return m.AllOutsideInterfaces
	}
	return false
}

// InterfaceList
//
// x-displayName: "Interface List"
// List of network interfaces.
type InterfaceList struct {
	// interface_list
	//
	// x-displayName: "Interface List"
	// x-required
	// List of network interfaces.
	Interfaces []*views.ObjectRefType `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *InterfaceList) Reset()      { *m = InterfaceList{} }
func (*InterfaceList) ProtoMessage() {}
func (*InterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{2}
}
func (m *InterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceList.Merge(m, src)
}
func (m *InterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceList proto.InternalMessageInfo

func (m *InterfaceList) GetInterfaces() []*views.ObjectRefType {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// FamilyInet
//
// x-displayName: "BGP Family Inet"
// Parameters for inet family.
type FamilyInet struct {
	// enable_choice
	//
	// x-displayName: "Enable or Disable IPv4 Unicast"
	// x-required
	// Enable or disable the IPv4 Unicast family i.e. AFI 1 and SAFI 1.
	//
	// Types that are valid to be assigned to EnableChoice:
	//	*FamilyInet_Enable
	//	*FamilyInet_Disable
	EnableChoice isFamilyInet_EnableChoice `protobuf_oneof:"enable_choice"`
}

func (m *FamilyInet) Reset()      { *m = FamilyInet{} }
func (*FamilyInet) ProtoMessage() {}
func (*FamilyInet) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{3}
}
func (m *FamilyInet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FamilyInet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FamilyInet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FamilyInet.Merge(m, src)
}
func (m *FamilyInet) XXX_Size() int {
	return m.Size()
}
func (m *FamilyInet) XXX_DiscardUnknown() {
	xxx_messageInfo_FamilyInet.DiscardUnknown(m)
}

var xxx_messageInfo_FamilyInet proto.InternalMessageInfo

type isFamilyInet_EnableChoice interface {
	isFamilyInet_EnableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FamilyInet_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type FamilyInet_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}

func (*FamilyInet_Enable) isFamilyInet_EnableChoice()  {}
func (*FamilyInet_Disable) isFamilyInet_EnableChoice() {}

func (m *FamilyInet) GetEnableChoice() isFamilyInet_EnableChoice {
	if m != nil {
		return m.EnableChoice
	}
	return nil
}

func (m *FamilyInet) GetEnable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyInet_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *FamilyInet) GetDisable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyInet_Disable); ok {
		return x.Disable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FamilyInet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FamilyInet_Enable)(nil),
		(*FamilyInet_Disable)(nil),
	}
}

// FamilyInetvpnParameters
//
// x-displayName: "BGP Family Inetvpn"
// Parameters for inetvpn family.
type FamilyInetvpnParameters struct {
	// sr_choice
	//
	// x-displayName: "Enable Segment Routing with IPv6"
	// x-required
	// Enable or disable extensions for Segment Routing with IPv6.
	//
	// Types that are valid to be assigned to SrChoice:
	//	*FamilyInetvpnParameters_Enable
	//	*FamilyInetvpnParameters_Disable
	SrChoice isFamilyInetvpnParameters_SrChoice `protobuf_oneof:"sr_choice"`
}

func (m *FamilyInetvpnParameters) Reset()      { *m = FamilyInetvpnParameters{} }
func (*FamilyInetvpnParameters) ProtoMessage() {}
func (*FamilyInetvpnParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{4}
}
func (m *FamilyInetvpnParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FamilyInetvpnParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FamilyInetvpnParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FamilyInetvpnParameters.Merge(m, src)
}
func (m *FamilyInetvpnParameters) XXX_Size() int {
	return m.Size()
}
func (m *FamilyInetvpnParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_FamilyInetvpnParameters.DiscardUnknown(m)
}

var xxx_messageInfo_FamilyInetvpnParameters proto.InternalMessageInfo

type isFamilyInetvpnParameters_SrChoice interface {
	isFamilyInetvpnParameters_SrChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FamilyInetvpnParameters_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type FamilyInetvpnParameters_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}

func (*FamilyInetvpnParameters_Enable) isFamilyInetvpnParameters_SrChoice()  {}
func (*FamilyInetvpnParameters_Disable) isFamilyInetvpnParameters_SrChoice() {}

func (m *FamilyInetvpnParameters) GetSrChoice() isFamilyInetvpnParameters_SrChoice {
	if m != nil {
		return m.SrChoice
	}
	return nil
}

func (m *FamilyInetvpnParameters) GetEnable() *schema.Empty {
	if x, ok := m.GetSrChoice().(*FamilyInetvpnParameters_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *FamilyInetvpnParameters) GetDisable() *schema.Empty {
	if x, ok := m.GetSrChoice().(*FamilyInetvpnParameters_Disable); ok {
		return x.Disable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FamilyInetvpnParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FamilyInetvpnParameters_Enable)(nil),
		(*FamilyInetvpnParameters_Disable)(nil),
	}
}

// FamilyInetvpn
//
// x-displayName: "BGP Family Inetvpn"
// Parameters for inetvpn family.
type FamilyInetvpn struct {
	// enable_choice
	//
	// x-displayName: "Enable or Disable IPv4 VPN Unicast"
	// x-required
	// Enable or disable the IPv4 Unicast family i.e. AFI 1 and SAFI 128.
	//
	// Types that are valid to be assigned to EnableChoice:
	//	*FamilyInetvpn_Enable
	//	*FamilyInetvpn_Disable
	EnableChoice isFamilyInetvpn_EnableChoice `protobuf_oneof:"enable_choice"`
}

func (m *FamilyInetvpn) Reset()      { *m = FamilyInetvpn{} }
func (*FamilyInetvpn) ProtoMessage() {}
func (*FamilyInetvpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{5}
}
func (m *FamilyInetvpn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FamilyInetvpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FamilyInetvpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FamilyInetvpn.Merge(m, src)
}
func (m *FamilyInetvpn) XXX_Size() int {
	return m.Size()
}
func (m *FamilyInetvpn) XXX_DiscardUnknown() {
	xxx_messageInfo_FamilyInetvpn.DiscardUnknown(m)
}

var xxx_messageInfo_FamilyInetvpn proto.InternalMessageInfo

type isFamilyInetvpn_EnableChoice interface {
	isFamilyInetvpn_EnableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FamilyInetvpn_Enable struct {
	Enable *FamilyInetvpnParameters `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type FamilyInetvpn_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}

func (*FamilyInetvpn_Enable) isFamilyInetvpn_EnableChoice()  {}
func (*FamilyInetvpn_Disable) isFamilyInetvpn_EnableChoice() {}

func (m *FamilyInetvpn) GetEnableChoice() isFamilyInetvpn_EnableChoice {
	if m != nil {
		return m.EnableChoice
	}
	return nil
}

func (m *FamilyInetvpn) GetEnable() *FamilyInetvpnParameters {
	if x, ok := m.GetEnableChoice().(*FamilyInetvpn_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *FamilyInetvpn) GetDisable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyInetvpn_Disable); ok {
		return x.Disable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FamilyInetvpn) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FamilyInetvpn_Enable)(nil),
		(*FamilyInetvpn_Disable)(nil),
	}
}

// FamilyInet6vpn
//
// x-displayName: "BGP Family Inet6vpn"
// Parameters for inet6vpn family.
type FamilyInet6Vpn struct {
	// enable_choice
	//
	// x-displayName: "Enable or Disable IPv6 VPN Unicast"
	// x-required
	// Enable or disable the IPv6 Unicast family i.e. AFI 2 and SAFI 128.
	//
	// Types that are valid to be assigned to EnableChoice:
	//	*FamilyInet6Vpn_Enable
	//	*FamilyInet6Vpn_Disable
	EnableChoice isFamilyInet6Vpn_EnableChoice `protobuf_oneof:"enable_choice"`
}

func (m *FamilyInet6Vpn) Reset()      { *m = FamilyInet6Vpn{} }
func (*FamilyInet6Vpn) ProtoMessage() {}
func (*FamilyInet6Vpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{6}
}
func (m *FamilyInet6Vpn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FamilyInet6Vpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FamilyInet6Vpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FamilyInet6Vpn.Merge(m, src)
}
func (m *FamilyInet6Vpn) XXX_Size() int {
	return m.Size()
}
func (m *FamilyInet6Vpn) XXX_DiscardUnknown() {
	xxx_messageInfo_FamilyInet6Vpn.DiscardUnknown(m)
}

var xxx_messageInfo_FamilyInet6Vpn proto.InternalMessageInfo

type isFamilyInet6Vpn_EnableChoice interface {
	isFamilyInet6Vpn_EnableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FamilyInet6Vpn_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type FamilyInet6Vpn_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}

func (*FamilyInet6Vpn_Enable) isFamilyInet6Vpn_EnableChoice()  {}
func (*FamilyInet6Vpn_Disable) isFamilyInet6Vpn_EnableChoice() {}

func (m *FamilyInet6Vpn) GetEnableChoice() isFamilyInet6Vpn_EnableChoice {
	if m != nil {
		return m.EnableChoice
	}
	return nil
}

func (m *FamilyInet6Vpn) GetEnable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyInet6Vpn_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *FamilyInet6Vpn) GetDisable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyInet6Vpn_Disable); ok {
		return x.Disable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FamilyInet6Vpn) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FamilyInet6Vpn_Enable)(nil),
		(*FamilyInet6Vpn_Disable)(nil),
	}
}

// FamilyRtarget
//
// x-displayName: "BGP Family Route Target"
// Parameters for rtarget family.
type FamilyRtarget struct {
	// enable_choice
	//
	// x-displayName: "Enable or Disable Route Target"
	// x-required
	// Enable or disable the Route Target family i.e. AFI 1 and SAFI 132.
	//
	// Types that are valid to be assigned to EnableChoice:
	//	*FamilyRtarget_Enable
	//	*FamilyRtarget_Disable
	EnableChoice isFamilyRtarget_EnableChoice `protobuf_oneof:"enable_choice"`
}

func (m *FamilyRtarget) Reset()      { *m = FamilyRtarget{} }
func (*FamilyRtarget) ProtoMessage() {}
func (*FamilyRtarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{7}
}
func (m *FamilyRtarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FamilyRtarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FamilyRtarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FamilyRtarget.Merge(m, src)
}
func (m *FamilyRtarget) XXX_Size() int {
	return m.Size()
}
func (m *FamilyRtarget) XXX_DiscardUnknown() {
	xxx_messageInfo_FamilyRtarget.DiscardUnknown(m)
}

var xxx_messageInfo_FamilyRtarget proto.InternalMessageInfo

type isFamilyRtarget_EnableChoice interface {
	isFamilyRtarget_EnableChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FamilyRtarget_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type FamilyRtarget_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,3,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}

func (*FamilyRtarget_Enable) isFamilyRtarget_EnableChoice()  {}
func (*FamilyRtarget_Disable) isFamilyRtarget_EnableChoice() {}

func (m *FamilyRtarget) GetEnableChoice() isFamilyRtarget_EnableChoice {
	if m != nil {
		return m.EnableChoice
	}
	return nil
}

func (m *FamilyRtarget) GetEnable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyRtarget_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *FamilyRtarget) GetDisable() *schema.Empty {
	if x, ok := m.GetEnableChoice().(*FamilyRtarget_Disable); ok {
		return x.Disable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FamilyRtarget) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FamilyRtarget_Enable)(nil),
		(*FamilyRtarget_Disable)(nil),
	}
}

// PeerFamilyParameters
//
// x-displayName: "BGP Peer Family"
// Peer Family parameters - for internal use only.
type PeerFamilyParameters struct {
	// family
	//
	// x-displayName: "Family"
	// x-example: "inetvpn"
	// Name of the address family.
	Family string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	// enable_srv6
	//
	// x-displayName: "Enable SRv6"
	// Enable extensions for SRv6.
	EnableSrv6 bool `protobuf:"varint,2,opt,name=enable_srv6,json=enableSrv6,proto3" json:"enable_srv6,omitempty"`
}

func (m *PeerFamilyParameters) Reset()      { *m = PeerFamilyParameters{} }
func (*PeerFamilyParameters) ProtoMessage() {}
func (*PeerFamilyParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{8}
}
func (m *PeerFamilyParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerFamilyParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PeerFamilyParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerFamilyParameters.Merge(m, src)
}
func (m *PeerFamilyParameters) XXX_Size() int {
	return m.Size()
}
func (m *PeerFamilyParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerFamilyParameters.DiscardUnknown(m)
}

var xxx_messageInfo_PeerFamilyParameters proto.InternalMessageInfo

func (m *PeerFamilyParameters) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *PeerFamilyParameters) GetEnableSrv6() bool {
	if m != nil {
		return m.EnableSrv6
	}
	return false
}

// PeerExternal
//
// x-displayName: "External BGP Peer"
// External BGP Peer parameters.
type PeerExternal struct {
	// ASN
	//
	// x-displayName: "ASN"
	// x-example: 64512
	// x-required
	// Autonomous System Number for BGP peer
	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// address_choice
	//
	// x-displayName: "Peer Address"
	// x-required
	// Peer address configuration.
	//
	// Types that are valid to be assigned to AddressChoice:
	//	*PeerExternal_Address
	//	*PeerExternal_SubnetBeginOffset
	//	*PeerExternal_SubnetEndOffset
	//	*PeerExternal_FromSite
	//	*PeerExternal_DefaultGateway
	AddressChoice isPeerExternal_AddressChoice `protobuf_oneof:"address_choice"`
	// Peer Port
	//
	// x-displayName: "Peer Port"
	// x-example: 179
	// Peer TCP port number.
	Port uint32 `protobuf:"varint,10,opt,name=port,proto3" json:"port,omitempty"`
	// family_inet
	//
	// x-displayName: "Family IPv4 Unicast"
	// Parameters for IPv4 Unicast family.
	FamilyInet *FamilyInet `protobuf:"bytes,11,opt,name=family_inet,json=familyInet,proto3" json:"family_inet,omitempty"`
	// interface_choice
	//
	// x-displayName: "Peer Interface(s)"
	// x-required
	// Peer interface configuration.
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*PeerExternal_Interface
	//	*PeerExternal_InterfaceList
	//	*PeerExternal_InsideInterfaces
	//	*PeerExternal_OutsideInterfaces
	InterfaceChoice isPeerExternal_InterfaceChoice `protobuf_oneof:"interface_choice"`
}

func (m *PeerExternal) Reset()      { *m = PeerExternal{} }
func (*PeerExternal) ProtoMessage() {}
func (*PeerExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{9}
}
func (m *PeerExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PeerExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerExternal.Merge(m, src)
}
func (m *PeerExternal) XXX_Size() int {
	return m.Size()
}
func (m *PeerExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerExternal.DiscardUnknown(m)
}

var xxx_messageInfo_PeerExternal proto.InternalMessageInfo

type isPeerExternal_AddressChoice interface {
	isPeerExternal_AddressChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPeerExternal_InterfaceChoice interface {
	isPeerExternal_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PeerExternal_Address struct {
	Address string `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
}
type PeerExternal_SubnetBeginOffset struct {
	SubnetBeginOffset uint32 `protobuf:"varint,4,opt,name=subnet_begin_offset,json=subnetBeginOffset,proto3,oneof" json:"subnet_begin_offset,omitempty"`
}
type PeerExternal_SubnetEndOffset struct {
	SubnetEndOffset uint32 `protobuf:"varint,5,opt,name=subnet_end_offset,json=subnetEndOffset,proto3,oneof" json:"subnet_end_offset,omitempty"`
}
type PeerExternal_FromSite struct {
	FromSite *schema.Empty `protobuf:"bytes,6,opt,name=from_site,json=fromSite,proto3,oneof" json:"from_site,omitempty"`
}
type PeerExternal_DefaultGateway struct {
	DefaultGateway *schema.Empty `protobuf:"bytes,7,opt,name=default_gateway,json=defaultGateway,proto3,oneof" json:"default_gateway,omitempty"`
}
type PeerExternal_Interface struct {
	Interface *views.ObjectRefType `protobuf:"bytes,21,opt,name=interface,proto3,oneof" json:"interface,omitempty"`
}
type PeerExternal_InterfaceList struct {
	InterfaceList *InterfaceList `protobuf:"bytes,22,opt,name=interface_list,json=interfaceList,proto3,oneof" json:"interface_list,omitempty"`
}
type PeerExternal_InsideInterfaces struct {
	InsideInterfaces *schema.Empty `protobuf:"bytes,23,opt,name=inside_interfaces,json=insideInterfaces,proto3,oneof" json:"inside_interfaces,omitempty"`
}
type PeerExternal_OutsideInterfaces struct {
	OutsideInterfaces *schema.Empty `protobuf:"bytes,24,opt,name=outside_interfaces,json=outsideInterfaces,proto3,oneof" json:"outside_interfaces,omitempty"`
}

func (*PeerExternal_Address) isPeerExternal_AddressChoice()             {}
func (*PeerExternal_SubnetBeginOffset) isPeerExternal_AddressChoice()   {}
func (*PeerExternal_SubnetEndOffset) isPeerExternal_AddressChoice()     {}
func (*PeerExternal_FromSite) isPeerExternal_AddressChoice()            {}
func (*PeerExternal_DefaultGateway) isPeerExternal_AddressChoice()      {}
func (*PeerExternal_Interface) isPeerExternal_InterfaceChoice()         {}
func (*PeerExternal_InterfaceList) isPeerExternal_InterfaceChoice()     {}
func (*PeerExternal_InsideInterfaces) isPeerExternal_InterfaceChoice()  {}
func (*PeerExternal_OutsideInterfaces) isPeerExternal_InterfaceChoice() {}

func (m *PeerExternal) GetAddressChoice() isPeerExternal_AddressChoice {
	if m != nil {
		return m.AddressChoice
	}
	return nil
}
func (m *PeerExternal) GetInterfaceChoice() isPeerExternal_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}

func (m *PeerExternal) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *PeerExternal) GetAddress() string {
	if x, ok := m.GetAddressChoice().(*PeerExternal_Address); ok {
		return x.Address
	}
	return ""
}

func (m *PeerExternal) GetSubnetBeginOffset() uint32 {
	if x, ok := m.GetAddressChoice().(*PeerExternal_SubnetBeginOffset); ok {
		return x.SubnetBeginOffset
	}
	return 0
}

func (m *PeerExternal) GetSubnetEndOffset() uint32 {
	if x, ok := m.GetAddressChoice().(*PeerExternal_SubnetEndOffset); ok {
		return x.SubnetEndOffset
	}
	return 0
}

func (m *PeerExternal) GetFromSite() *schema.Empty {
	if x, ok := m.GetAddressChoice().(*PeerExternal_FromSite); ok {
		return x.FromSite
	}
	return nil
}

func (m *PeerExternal) GetDefaultGateway() *schema.Empty {
	if x, ok := m.GetAddressChoice().(*PeerExternal_DefaultGateway); ok {
		return x.DefaultGateway
	}
	return nil
}

func (m *PeerExternal) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PeerExternal) GetFamilyInet() *FamilyInet {
	if m != nil {
		return m.FamilyInet
	}
	return nil
}

func (m *PeerExternal) GetInterface() *views.ObjectRefType {
	if x, ok := m.GetInterfaceChoice().(*PeerExternal_Interface); ok {
		return x.Interface
	}
	return nil
}

func (m *PeerExternal) GetInterfaceList() *InterfaceList {
	if x, ok := m.GetInterfaceChoice().(*PeerExternal_InterfaceList); ok {
		return x.InterfaceList
	}
	return nil
}

func (m *PeerExternal) GetInsideInterfaces() *schema.Empty {
	if x, ok := m.GetInterfaceChoice().(*PeerExternal_InsideInterfaces); ok {
		return x.InsideInterfaces
	}
	return nil
}

func (m *PeerExternal) GetOutsideInterfaces() *schema.Empty {
	if x, ok := m.GetInterfaceChoice().(*PeerExternal_OutsideInterfaces); ok {
		return x.OutsideInterfaces
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PeerExternal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PeerExternal_Address)(nil),
		(*PeerExternal_SubnetBeginOffset)(nil),
		(*PeerExternal_SubnetEndOffset)(nil),
		(*PeerExternal_FromSite)(nil),
		(*PeerExternal_DefaultGateway)(nil),
		(*PeerExternal_Interface)(nil),
		(*PeerExternal_InterfaceList)(nil),
		(*PeerExternal_InsideInterfaces)(nil),
		(*PeerExternal_OutsideInterfaces)(nil),
	}
}

// PeerInternal
//
// x-displayName: "Internal BGP Peer"
// Internal BGP Peer parameters.
type PeerInternal struct {
	// address_choice
	//
	// x-displayName: "Peer Address"
	// x-required
	// Peer address configuration.
	//
	// Types that are valid to be assigned to AddressChoice:
	//	*PeerInternal_Address
	//	*PeerInternal_FromSite
	//	*PeerInternal_DnsName
	AddressChoice isPeerInternal_AddressChoice `protobuf_oneof:"address_choice"`
	// port
	//
	// x-displayName: "Peer Port"
	// x-example: 179
	// Peer TCP port number.
	Port uint32 `protobuf:"varint,10,opt,name=port,proto3" json:"port,omitempty"`
	// family_inetvpn
	//
	// x-displayName: "Family IPv4 VPN Unicast"
	// Parameters for IPv4 VPN Unicast family.
	FamilyInetvpn *FamilyInetvpn `protobuf:"bytes,11,opt,name=family_inetvpn,json=familyInetvpn,proto3" json:"family_inetvpn,omitempty"`
	// family_inet6vpn
	//
	// x-displayName: "Family IPv6 VPN Unicast"
	// Parameters for IPv6 VPN Unicast family.
	FamilyInet6Vpn *FamilyInet6Vpn `protobuf:"bytes,16,opt,name=family_inet6vpn,json=familyInet6vpn,proto3" json:"family_inet6vpn,omitempty"`
	// family_rtarget
	//
	// x-displayName: "Family Route Target"
	// Parameters for Route Target family.
	FamilyRtarget *FamilyRtarget `protobuf:"bytes,12,opt,name=family_rtarget,json=familyRtarget,proto3" json:"family_rtarget,omitempty"`
	// mtls_choice
	//
	// x-displayName: "MTLS Configuration"
	// MTLS configuration.
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*PeerInternal_DisableMtls
	//	*PeerInternal_EnableMtls
	MtlsChoice isPeerInternal_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *PeerInternal) Reset()      { *m = PeerInternal{} }
func (*PeerInternal) ProtoMessage() {}
func (*PeerInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{10}
}
func (m *PeerInternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PeerInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInternal.Merge(m, src)
}
func (m *PeerInternal) XXX_Size() int {
	return m.Size()
}
func (m *PeerInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInternal.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInternal proto.InternalMessageInfo

type isPeerInternal_AddressChoice interface {
	isPeerInternal_AddressChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPeerInternal_MtlsChoice interface {
	isPeerInternal_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PeerInternal_Address struct {
	Address string `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
}
type PeerInternal_FromSite struct {
	FromSite *schema.Empty `protobuf:"bytes,4,opt,name=from_site,json=fromSite,proto3,oneof" json:"from_site,omitempty"`
}
type PeerInternal_DnsName struct {
	DnsName string `protobuf:"bytes,5,opt,name=dns_name,json=dnsName,proto3,oneof" json:"dns_name,omitempty"`
}
type PeerInternal_DisableMtls struct {
	DisableMtls *schema.Empty `protobuf:"bytes,14,opt,name=disable_mtls,json=disableMtls,proto3,oneof" json:"disable_mtls,omitempty"`
}
type PeerInternal_EnableMtls struct {
	EnableMtls *schema.Empty `protobuf:"bytes,15,opt,name=enable_mtls,json=enableMtls,proto3,oneof" json:"enable_mtls,omitempty"`
}

func (*PeerInternal_Address) isPeerInternal_AddressChoice()  {}
func (*PeerInternal_FromSite) isPeerInternal_AddressChoice() {}
func (*PeerInternal_DnsName) isPeerInternal_AddressChoice()  {}
func (*PeerInternal_DisableMtls) isPeerInternal_MtlsChoice() {}
func (*PeerInternal_EnableMtls) isPeerInternal_MtlsChoice()  {}

func (m *PeerInternal) GetAddressChoice() isPeerInternal_AddressChoice {
	if m != nil {
		return m.AddressChoice
	}
	return nil
}
func (m *PeerInternal) GetMtlsChoice() isPeerInternal_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *PeerInternal) GetAddress() string {
	if x, ok := m.GetAddressChoice().(*PeerInternal_Address); ok {
		return x.Address
	}
	return ""
}

func (m *PeerInternal) GetFromSite() *schema.Empty {
	if x, ok := m.GetAddressChoice().(*PeerInternal_FromSite); ok {
		return x.FromSite
	}
	return nil
}

func (m *PeerInternal) GetDnsName() string {
	if x, ok := m.GetAddressChoice().(*PeerInternal_DnsName); ok {
		return x.DnsName
	}
	return ""
}

func (m *PeerInternal) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PeerInternal) GetFamilyInetvpn() *FamilyInetvpn {
	if m != nil {
		return m.FamilyInetvpn
	}
	return nil
}

func (m *PeerInternal) GetFamilyInet6Vpn() *FamilyInet6Vpn {
	if m != nil {
		return m.FamilyInet6Vpn
	}
	return nil
}

func (m *PeerInternal) GetFamilyRtarget() *FamilyRtarget {
	if m != nil {
		return m.FamilyRtarget
	}
	return nil
}

func (m *PeerInternal) GetDisableMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*PeerInternal_DisableMtls); ok {
		return x.DisableMtls
	}
	return nil
}

func (m *PeerInternal) GetEnableMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*PeerInternal_EnableMtls); ok {
		return x.EnableMtls
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PeerInternal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PeerInternal_Address)(nil),
		(*PeerInternal_FromSite)(nil),
		(*PeerInternal_DnsName)(nil),
		(*PeerInternal_DisableMtls)(nil),
		(*PeerInternal_EnableMtls)(nil),
	}
}

// Peer
//
// x-displayName: "BGP Peer"
// BGP Peer parameters
type Peer struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the peer including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// type_choice
	//
	// x-displayName: "Peer Type"
	// x-required
	// Select the type of peer.
	//
	// Types that are valid to be assigned to TypeChoice:
	//	*Peer_External
	//	*Peer_Internal
	TypeChoice isPeer_TypeChoice `protobuf_oneof:"type_choice"`
	// target_service
	//
	// x-displayName: "Target Service"
	// Specify whether this peer should be configured in "phobos" or "frr".
	TargetService string `protobuf:"bytes,1000,opt,name=target_service,json=targetService,proto3" json:"target_service,omitempty"`
}

func (m *Peer) Reset()      { *m = Peer{} }
func (*Peer) ProtoMessage() {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{11}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

type isPeer_TypeChoice interface {
	isPeer_TypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Peer_External struct {
	External *PeerExternal `protobuf:"bytes,3,opt,name=external,proto3,oneof" json:"external,omitempty"`
}
type Peer_Internal struct {
	Internal *PeerInternal `protobuf:"bytes,4,opt,name=internal,proto3,oneof" json:"internal,omitempty"`
}

func (*Peer_External) isPeer_TypeChoice() {}
func (*Peer_Internal) isPeer_TypeChoice() {}

func (m *Peer) GetTypeChoice() isPeer_TypeChoice {
	if m != nil {
		return m.TypeChoice
	}
	return nil
}

func (m *Peer) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Peer) GetExternal() *PeerExternal {
	if x, ok := m.GetTypeChoice().(*Peer_External); ok {
		return x.External
	}
	return nil
}

func (m *Peer) GetInternal() *PeerInternal {
	if x, ok := m.GetTypeChoice().(*Peer_Internal); ok {
		return x.Internal
	}
	return nil
}

func (m *Peer) GetTargetService() string {
	if m != nil {
		return m.TargetService
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Peer) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Peer_External)(nil),
		(*Peer_Internal)(nil),
	}
}

// Global Specification
//
// x-displayName: "Global Specification"
// BGP specification.
type GlobalSpecType struct {
	// Where
	//
	// x-displayName: "Where"
	// x-required
	// Site or virtual site where this BGP configuration should be applied.
	Where *schema.SiteVirtualSiteRefSelector `protobuf:"bytes,1,opt,name=where,proto3" json:"where,omitempty"`
	// BGP Parameters
	//
	// x-displayName: "Parameters"
	// x-required
	// BGP parameters for local site
	BgpParameters *BgpParameters `protobuf:"bytes,2,opt,name=bgp_parameters,json=bgpParameters,proto3" json:"bgp_parameters,omitempty"`
	// BGP Peers
	//
	// x-displayName: "Peers"
	// BGP parameters for peer
	BgpPeers []*BgpPeer `protobuf:"bytes,3,rep,name=bgp_peers,json=bgpPeers,proto3" json:"bgp_peers,omitempty"`
	// Interfaces
	//
	// x-displayName: "Interfaces"
	// List of interfaces to which the BGP configuration is applied
	NetworkInterface []*schema.ObjectRefType `protobuf:"bytes,4,rep,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
	// BGP Peers
	//
	// x-displayName: "Peers"
	// x-required
	// BGP parameters for peer
	Peers []*Peer `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// view_version
	//
	// x-displayName: "View Version"
	// Version number for view. This will be set to 1 for objects that are read from the database,
	// converted to (Create|Replace)SpecType, processed and stored again after view handling. This
	// field can continue to be used in a similar way when multiple versions need to be handled in
	// the future.
	ViewVersion uint32 `protobuf:"varint,1001,opt,name=view_version,json=viewVersion,proto3" json:"view_version,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{12}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetWhere() *schema.SiteVirtualSiteRefSelector {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *GlobalSpecType) GetBgpParameters() *BgpParameters {
	if m != nil {
		return m.BgpParameters
	}
	return nil
}

func (m *GlobalSpecType) GetBgpPeers() []*BgpPeer {
	if m != nil {
		return m.BgpPeers
	}
	return nil
}

func (m *GlobalSpecType) GetNetworkInterface() []*schema.ObjectRefType {
	if m != nil {
		return m.NetworkInterface
	}
	return nil
}

func (m *GlobalSpecType) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetViewVersion() uint32 {
	if m != nil {
		return m.ViewVersion
	}
	return 0
}

// Create bgp
//
// x-displayName: "Create BGP"
// BGP object is the configuration for peering with external BGP servers.
// It is created by users in system namespace.
type CreateSpecType struct {
	Where         *schema.SiteVirtualSiteRefSelector `protobuf:"bytes,1,opt,name=where,proto3" json:"where,omitempty"`
	BgpParameters *BgpParameters                     `protobuf:"bytes,2,opt,name=bgp_parameters,json=bgpParameters,proto3" json:"bgp_parameters,omitempty"`
	Peers         []*Peer                            `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{13}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetWhere() *schema.SiteVirtualSiteRefSelector {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *CreateSpecType) GetBgpParameters() *BgpParameters {
	if m != nil {
		return m.BgpParameters
	}
	return nil
}

func (m *CreateSpecType) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// Replace bgp
//
// x-displayName: "Replace BGP"
// BGP object is the configuration for peering with external BGP servers.
// Replace bgp will replace the contents of given BGP object.
type ReplaceSpecType struct {
	Where         *schema.SiteVirtualSiteRefSelector `protobuf:"bytes,1,opt,name=where,proto3" json:"where,omitempty"`
	BgpParameters *BgpParameters                     `protobuf:"bytes,2,opt,name=bgp_parameters,json=bgpParameters,proto3" json:"bgp_parameters,omitempty"`
	Peers         []*Peer                            `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{14}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetWhere() *schema.SiteVirtualSiteRefSelector {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *ReplaceSpecType) GetBgpParameters() *BgpParameters {
	if m != nil {
		return m.BgpParameters
	}
	return nil
}

func (m *ReplaceSpecType) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// Get bgp
//
// x-displayName: "Get BGP"
// BGP object is the configuration for peering with external BGP servers.
// Get bgp reads from system namespace.
type GetSpecType struct {
	Where         *schema.SiteVirtualSiteRefSelector `protobuf:"bytes,1,opt,name=where,proto3" json:"where,omitempty"`
	BgpParameters *BgpParameters                     `protobuf:"bytes,2,opt,name=bgp_parameters,json=bgpParameters,proto3" json:"bgp_parameters,omitempty"`
	Peers         []*Peer                            `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{15}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetWhere() *schema.SiteVirtualSiteRefSelector {
	if m != nil {
		return m.Where
	}
	return nil
}

func (m *GetSpecType) GetBgpParameters() *BgpParameters {
	if m != nil {
		return m.BgpParameters
	}
	return nil
}

func (m *GetSpecType) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// BGP Peer Status
//
// x-displayName: "BGP Peer Status"
// Most recently observed status of the BGP Peering session
type BgpPeerStatusType struct {
	// Peer Address
	//
	// x-displayName: "Peer Address"
	// Address of the Peer
	PeerAddress *schema.IpAddressType `protobuf:"bytes,3,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	// Peer Port
	//
	// x-displayName: "Peer Port"
	// Port used by the Peer
	PeerPort uint32 `protobuf:"varint,4,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`
	// State
	//
	// x-displayName: "State"
	// Current state of the BGP Peering session
	UpDown BgpPeerUpDownType `protobuf:"varint,1,opt,name=up_down,json=upDown,proto3,enum=ves.io.schema.bgp.BgpPeerUpDownType" json:"up_down,omitempty"`
	// Peer Router ID
	//
	// x-displayName: "Peer Router ID"
	// Router ID of the peer
	PeerRouterId string `protobuf:"bytes,5,opt,name=peer_router_id,json=peerRouterId,proto3" json:"peer_router_id,omitempty"`
	// Peer ASN
	//
	// x-displayName: "Peer ASN"
	// Autonomous System Number (ASN) of the Peer
	PeerAsn uint32 `protobuf:"varint,6,opt,name=peer_asn,json=peerAsn,proto3" json:"peer_asn,omitempty"`
	// State Change Timestamp
	//
	// x-displayName: "State Change Timestamp"
	// Timestamp at which last state change to Established state or to not Established state happened
	UpDownTimestamp *types.Timestamp `protobuf:"bytes,7,opt,name=up_down_timestamp,json=upDownTimestamp,proto3" json:"up_down_timestamp,omitempty"`
	// Connection Flap Count
	//
	// x-displayName: "BGP Connection Flap Count"
	// Number of times the connection moved from Established state to a non Established state
	ConnectionFlapCount uint32 `protobuf:"varint,8,opt,name=connection_flap_count,json=connectionFlapCount,proto3" json:"connection_flap_count,omitempty"`
	// Advertised Prefix Count
	//
	// x-displayName: "Advertised Prefix Count"
	// Number of prefixes advertised to the peer
	AdvertisedPrefixCount uint32 `protobuf:"varint,9,opt,name=advertised_prefix_count,json=advertisedPrefixCount,proto3" json:"advertised_prefix_count,omitempty"`
	// Received Prefix Count
	//
	// x-displayName: "Received Prefix Count"
	// Number of prefixes received from the peer
	ReceivedPrefixCount uint32 `protobuf:"varint,10,opt,name=received_prefix_count,json=receivedPrefixCount,proto3" json:"received_prefix_count,omitempty"`
	// Interface Name
	//
	// x-displayName: "Interface Name"
	// Name of the interface through which peering is being done
	InterfaceName string `protobuf:"bytes,11,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Local Address
	//
	// x-displayName: "Local Address"
	// Local address used by the VER to connect to the peer
	LocalAddress string `protobuf:"bytes,12,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
}

func (m *BgpPeerStatusType) Reset()      { *m = BgpPeerStatusType{} }
func (*BgpPeerStatusType) ProtoMessage() {}
func (*BgpPeerStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{16}
}
func (m *BgpPeerStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpPeerStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpPeerStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPeerStatusType.Merge(m, src)
}
func (m *BgpPeerStatusType) XXX_Size() int {
	return m.Size()
}
func (m *BgpPeerStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPeerStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPeerStatusType proto.InternalMessageInfo

func (m *BgpPeerStatusType) GetPeerAddress() *schema.IpAddressType {
	if m != nil {
		return m.PeerAddress
	}
	return nil
}

func (m *BgpPeerStatusType) GetPeerPort() uint32 {
	if m != nil {
		return m.PeerPort
	}
	return 0
}

func (m *BgpPeerStatusType) GetUpDown() BgpPeerUpDownType {
	if m != nil {
		return m.UpDown
	}
	return BGP_PEER_DOWN
}

func (m *BgpPeerStatusType) GetPeerRouterId() string {
	if m != nil {
		return m.PeerRouterId
	}
	return ""
}

func (m *BgpPeerStatusType) GetPeerAsn() uint32 {
	if m != nil {
		return m.PeerAsn
	}
	return 0
}

func (m *BgpPeerStatusType) GetUpDownTimestamp() *types.Timestamp {
	if m != nil {
		return m.UpDownTimestamp
	}
	return nil
}

func (m *BgpPeerStatusType) GetConnectionFlapCount() uint32 {
	if m != nil {
		return m.ConnectionFlapCount
	}
	return 0
}

func (m *BgpPeerStatusType) GetAdvertisedPrefixCount() uint32 {
	if m != nil {
		return m.AdvertisedPrefixCount
	}
	return 0
}

func (m *BgpPeerStatusType) GetReceivedPrefixCount() uint32 {
	if m != nil {
		return m.ReceivedPrefixCount
	}
	return 0
}

func (m *BgpPeerStatusType) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *BgpPeerStatusType) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

// BGP Status
//
// x-displayName: "BGP Status"
// Status of all BGP peering sessions
type BgpStatusType struct {
	// Local Router ID
	//
	// x-displayName: "Local Router ID"
	// Router ID of the VER
	LocalRouterId string `protobuf:"bytes,1,opt,name=local_router_id,json=localRouterId,proto3" json:"local_router_id,omitempty"`
	// Local ASN
	//
	// x-displayName: "Local ASN"
	// Autonomous System Number (ASN) of the VER
	LocalAsn uint32 `protobuf:"varint,2,opt,name=local_asn,json=localAsn,proto3" json:"local_asn,omitempty"`
	// BGP Peer Status
	//
	// x-displayName: "BGP Peer Status"
	// Status of the BGP Peer
	PeerStatusList []*BgpPeerStatusType `protobuf:"bytes,3,rep,name=peer_status_list,json=peerStatusList,proto3" json:"peer_status_list,omitempty"`
}

func (m *BgpStatusType) Reset()      { *m = BgpStatusType{} }
func (*BgpStatusType) ProtoMessage() {}
func (*BgpStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad0df24d7dab112, []int{17}
}
func (m *BgpStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BgpStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BgpStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpStatusType.Merge(m, src)
}
func (m *BgpStatusType) XXX_Size() int {
	return m.Size()
}
func (m *BgpStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_BgpStatusType proto.InternalMessageInfo

func (m *BgpStatusType) GetLocalRouterId() string {
	if m != nil {
		return m.LocalRouterId
	}
	return ""
}

func (m *BgpStatusType) GetLocalAsn() uint32 {
	if m != nil {
		return m.LocalAsn
	}
	return 0
}

func (m *BgpStatusType) GetPeerStatusList() []*BgpPeerStatusType {
	if m != nil {
		return m.PeerStatusList
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.bgp.BgpRouterIdType", BgpRouterIdType_name, BgpRouterIdType_value)
	golang_proto.RegisterEnum("ves.io.schema.bgp.BgpRouterIdType", BgpRouterIdType_name, BgpRouterIdType_value)
	proto.RegisterEnum("ves.io.schema.bgp.BgpPeerAddressType", BgpPeerAddressType_name, BgpPeerAddressType_value)
	golang_proto.RegisterEnum("ves.io.schema.bgp.BgpPeerAddressType", BgpPeerAddressType_name, BgpPeerAddressType_value)
	proto.RegisterEnum("ves.io.schema.bgp.BgpPeerUpDownType", BgpPeerUpDownType_name, BgpPeerUpDownType_value)
	golang_proto.RegisterEnum("ves.io.schema.bgp.BgpPeerUpDownType", BgpPeerUpDownType_name, BgpPeerUpDownType_value)
	proto.RegisterType((*BgpParameters)(nil), "ves.io.schema.bgp.BgpParameters")
	golang_proto.RegisterType((*BgpParameters)(nil), "ves.io.schema.bgp.BgpParameters")
	proto.RegisterType((*BgpPeer)(nil), "ves.io.schema.bgp.BgpPeer")
	golang_proto.RegisterType((*BgpPeer)(nil), "ves.io.schema.bgp.BgpPeer")
	proto.RegisterType((*InterfaceList)(nil), "ves.io.schema.bgp.InterfaceList")
	golang_proto.RegisterType((*InterfaceList)(nil), "ves.io.schema.bgp.InterfaceList")
	proto.RegisterType((*FamilyInet)(nil), "ves.io.schema.bgp.FamilyInet")
	golang_proto.RegisterType((*FamilyInet)(nil), "ves.io.schema.bgp.FamilyInet")
	proto.RegisterType((*FamilyInetvpnParameters)(nil), "ves.io.schema.bgp.FamilyInetvpnParameters")
	golang_proto.RegisterType((*FamilyInetvpnParameters)(nil), "ves.io.schema.bgp.FamilyInetvpnParameters")
	proto.RegisterType((*FamilyInetvpn)(nil), "ves.io.schema.bgp.FamilyInetvpn")
	golang_proto.RegisterType((*FamilyInetvpn)(nil), "ves.io.schema.bgp.FamilyInetvpn")
	proto.RegisterType((*FamilyInet6Vpn)(nil), "ves.io.schema.bgp.FamilyInet6vpn")
	golang_proto.RegisterType((*FamilyInet6Vpn)(nil), "ves.io.schema.bgp.FamilyInet6vpn")
	proto.RegisterType((*FamilyRtarget)(nil), "ves.io.schema.bgp.FamilyRtarget")
	golang_proto.RegisterType((*FamilyRtarget)(nil), "ves.io.schema.bgp.FamilyRtarget")
	proto.RegisterType((*PeerFamilyParameters)(nil), "ves.io.schema.bgp.PeerFamilyParameters")
	golang_proto.RegisterType((*PeerFamilyParameters)(nil), "ves.io.schema.bgp.PeerFamilyParameters")
	proto.RegisterType((*PeerExternal)(nil), "ves.io.schema.bgp.PeerExternal")
	golang_proto.RegisterType((*PeerExternal)(nil), "ves.io.schema.bgp.PeerExternal")
	proto.RegisterType((*PeerInternal)(nil), "ves.io.schema.bgp.PeerInternal")
	golang_proto.RegisterType((*PeerInternal)(nil), "ves.io.schema.bgp.PeerInternal")
	proto.RegisterType((*Peer)(nil), "ves.io.schema.bgp.Peer")
	golang_proto.RegisterType((*Peer)(nil), "ves.io.schema.bgp.Peer")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.bgp.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.bgp.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.bgp.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.bgp.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.bgp.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.bgp.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.bgp.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.bgp.GetSpecType")
	proto.RegisterType((*BgpPeerStatusType)(nil), "ves.io.schema.bgp.BgpPeerStatusType")
	golang_proto.RegisterType((*BgpPeerStatusType)(nil), "ves.io.schema.bgp.BgpPeerStatusType")
	proto.RegisterType((*BgpStatusType)(nil), "ves.io.schema.bgp.BgpStatusType")
	golang_proto.RegisterType((*BgpStatusType)(nil), "ves.io.schema.bgp.BgpStatusType")
}

func init() { proto.RegisterFile("ves.io/schema/bgp/types.proto", fileDescriptor_cad0df24d7dab112) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/bgp/types.proto", fileDescriptor_cad0df24d7dab112)
}

var fileDescriptor_cad0df24d7dab112 = []byte{
	// 2452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4d, 0x6c, 0x1b, 0xc7,
	0xf5, 0xe7, 0xf0, 0x9b, 0x8f, 0x22, 0xb9, 0x1c, 0x4b, 0xd6, 0x46, 0x4e, 0x68, 0x9a, 0xb1, 0xfe,
	0x51, 0x64, 0x9a, 0xb2, 0xe8, 0xaf, 0x44, 0x46, 0x9c, 0xbf, 0x68, 0x51, 0xb2, 0x1c, 0x5b, 0x12,
	0x96, 0x74, 0x12, 0xe4, 0xb2, 0x58, 0x92, 0x43, 0x7a, 0x93, 0xe5, 0xee, 0x62, 0x77, 0x49, 0x5b,
	0x05, 0x02, 0xf4, 0x52, 0xf4, 0x5a, 0xf4, 0xd6, 0x43, 0x0e, 0x05, 0xda, 0x22, 0x08, 0xd0, 0x43,
	0x2f, 0x3d, 0x94, 0x17, 0xa1, 0xa7, 0xa2, 0x27, 0x1d, 0xdd, 0xa2, 0x05, 0x6a, 0x1a, 0x28, 0x9c,
	0x5b, 0x90, 0x63, 0x81, 0x22, 0xc5, 0xce, 0x7e, 0x92, 0x14, 0x65, 0x26, 0x28, 0x82, 0x22, 0xb7,
	0xe5, 0xbc, 0x8f, 0xf9, 0xbd, 0x37, 0x6f, 0xde, 0xc7, 0x10, 0x5e, 0xeb, 0x13, 0xbd, 0x24, 0x2a,
	0x6b, 0x7a, 0xf3, 0x11, 0xe9, 0x0a, 0x6b, 0x8d, 0x8e, 0xba, 0x66, 0x1c, 0xaa, 0x44, 0x2f, 0xa9,
	0x9a, 0x62, 0x28, 0x38, 0x6b, 0x91, 0x4b, 0x16, 0xb9, 0xd4, 0xe8, 0xa8, 0x4b, 0x97, 0x3b, 0xa2,
	0xf1, 0xa8, 0xd7, 0x28, 0x35, 0x95, 0xee, 0x5a, 0x47, 0xe9, 0x28, 0x6b, 0x94, 0xb3, 0xd1, 0x6b,
	0xd3, 0x5f, 0xf4, 0x07, 0xfd, 0xb2, 0x34, 0x2c, 0x9d, 0xef, 0x28, 0x4a, 0x47, 0x22, 0x1e, 0x97,
	0x21, 0x76, 0x89, 0x6e, 0x08, 0x5d, 0xd5, 0x66, 0x58, 0x1c, 0x45, 0x20, 0x13, 0xc3, 0x26, 0x9c,
	0x1b, 0x25, 0x28, 0xaa, 0x21, 0x2a, 0xb2, 0x0d, 0x6c, 0x69, 0x0c, 0xb7, 0xda, 0x37, 0x78, 0x1f,
	0xee, 0xa5, 0x57, 0x46, 0xc9, 0x7e, 0xd2, 0xab, 0xa3, 0xa4, 0xbe, 0x20, 0x89, 0x2d, 0xc1, 0x20,
	0x36, 0x35, 0x3f, 0x46, 0x15, 0xc9, 0x63, 0x7e, 0x74, 0xe7, 0xf3, 0x93, 0x1c, 0xba, 0x7f, 0x83,
	0xc2, 0xb3, 0x10, 0xa4, 0x2a, 0x1d, 0xf5, 0x40, 0xd0, 0x84, 0x2e, 0x31, 0x88, 0xa6, 0xe3, 0x73,
	0x10, 0x12, 0x74, 0x99, 0x45, 0x79, 0xb4, 0x92, 0xaa, 0x24, 0xfe, 0xf0, 0xe5, 0x51, 0x28, 0xbc,
	0x1a, 0x5c, 0x41, 0x9c, 0xb9, 0x8a, 0x6f, 0x41, 0x4a, 0x52, 0x9a, 0x82, 0xc4, 0x0b, 0xad, 0x96,
	0x46, 0x74, 0x9d, 0x8d, 0xe6, 0xd1, 0x4a, 0xb2, 0x3c, 0x5f, 0x1a, 0x75, 0x7d, 0xb5, 0xab, 0x1a,
	0x87, 0x77, 0x03, 0xdc, 0x1c, 0x65, 0xde, 0xb4, 0x78, 0xf1, 0x55, 0x48, 0xb4, 0x35, 0xa5, 0xcb,
	0xeb, 0xa2, 0x41, 0xd8, 0xd8, 0xa9, 0x82, 0x71, 0x93, 0xb1, 0x26, 0x1a, 0x04, 0xaf, 0x02, 0x88,
	0xaa, 0xbb, 0x5d, 0x3c, 0x8f, 0x56, 0x12, 0x36, 0x2a, 0x2d, 0xf8, 0x04, 0xdd, 0x0d, 0x70, 0x09,
	0x51, 0x75, 0x36, 0xf8, 0x10, 0x70, 0xa3, 0xa3, 0xf2, 0x9a, 0xd2, 0x33, 0x88, 0xc6, 0x8b, 0x2d,
	0xea, 0x65, 0x36, 0x98, 0x47, 0x2b, 0xe9, 0x72, 0xa1, 0x34, 0x11, 0x1d, 0xa5, 0x4a, 0x47, 0xe5,
	0x28, 0xef, 0x6e, 0xab, 0x7e, 0xa8, 0x92, 0x4a, 0xec, 0xe9, 0xa7, 0xe8, 0xc5, 0x00, 0x21, 0x2e,
	0xd3, 0x18, 0xa5, 0xe0, 0x5d, 0x48, 0x8d, 0x68, 0x66, 0x43, 0x14, 0xfe, 0xab, 0x63, 0x4a, 0x77,
	0x1d, 0x28, 0xa3, 0xea, 0x92, 0x3e, 0x75, 0xf8, 0x16, 0x64, 0x47, 0x41, 0x7e, 0x42, 0x0e, 0xd9,
	0x30, 0xb5, 0x8b, 0xb1, 0x05, 0x6c, 0xf3, 0xd8, 0xff, 0xe7, 0xd2, 0x3e, 0xc9, 0xf7, 0xc8, 0xe1,
	0x46, 0xf4, 0xeb, 0xdb, 0xa1, 0xf5, 0xe2, 0xf5, 0xca, 0x32, 0x30, 0x9e, 0x82, 0xe6, 0x23, 0x45,
	0x6c, 0x12, 0x9c, 0x3d, 0x1a, 0xa0, 0xe8, 0xf1, 0x00, 0x45, 0x86, 0x03, 0x14, 0xb9, 0x51, 0xbc,
	0x59, 0x7c, 0xeb, 0x5e, 0x38, 0x1e, 0x61, 0xa2, 0x85, 0xdf, 0x46, 0x20, 0x66, 0x9e, 0x31, 0x21,
	0xda, 0xe9, 0xa7, 0xfb, 0x21, 0x2c, 0x98, 0xd0, 0x54, 0x42, 0x34, 0xc7, 0xe3, 0x7e, 0x17, 0x2e,
	0x9f, 0xec, 0x42, 0x53, 0xaf, 0xcf, 0x6c, 0xce, 0x3c, 0x83, 0xb1, 0x35, 0xbc, 0x0d, 0xcc, 0xb8,
	0xe6, 0x59, 0x5c, 0x48, 0xed, 0xf7, 0xe9, 0xc2, 0x1b, 0x30, 0x3f, 0x81, 0xd0, 0xf3, 0x5f, 0xc2,
	0x73, 0x5c, 0x76, 0x54, 0xf0, 0x3d, 0x72, 0x88, 0x5f, 0x87, 0xb0, 0xaa, 0x68, 0x06, 0x1b, 0xa1,
	0xb6, 0x67, 0x8e, 0x6c, 0x47, 0x47, 0x57, 0xc3, 0xec, 0x37, 0xdf, 0x84, 0x38, 0x4a, 0xc4, 0x15,
	0x38, 0xeb, 0x6e, 0xa0, 0xf7, 0x1a, 0x32, 0x31, 0x78, 0xa5, 0xdd, 0xd6, 0x89, 0x41, 0x23, 0x3d,
	0x55, 0x49, 0x39, 0x62, 0xe1, 0xd5, 0x20, 0x9b, 0xe7, 0xce, 0xd8, 0xdb, 0xd4, 0x28, 0xeb, 0x3e,
	0xe5, 0xc4, 0xef, 0x43, 0xbc, 0x2d, 0x74, 0x45, 0x49, 0x24, 0x3a, 0x3b, 0x9f, 0x0f, 0xad, 0x24,
	0xcb, 0x6f, 0x9c, 0xe0, 0x39, 0x53, 0x6c, 0xdb, 0x64, 0x3b, 0xf4, 0x2e, 0x5f, 0x25, 0xeb, 0x8b,
	0x80, 0xc8, 0xcf, 0x51, 0x90, 0x09, 0x73, 0xae, 0x2e, 0xfc, 0x31, 0xa4, 0x45, 0xd9, 0x20, 0x5a,
	0x5b, 0x68, 0x12, 0x5e, 0x23, 0x6d, 0x9d, 0x5d, 0xa0, 0xda, 0xc7, 0x5d, 0xb8, 0xdf, 0xf8, 0x98,
	0x34, 0x0d, 0x8e, 0xb4, 0x69, 0x14, 0x2e, 0x7f, 0xf1, 0x69, 0x56, 0x26, 0xc6, 0x63, 0x45, 0xfb,
	0x84, 0x77, 0xc5, 0xc7, 0xb7, 0x89, 0x73, 0x29, 0x97, 0xc6, 0x91, 0xb6, 0x8e, 0x6f, 0xc1, 0x82,
	0x20, 0x49, 0xbc, 0x28, 0xeb, 0x62, 0x8b, 0x78, 0x72, 0x3a, 0x7b, 0x36, 0x8f, 0x56, 0xe2, 0x5e,
	0x68, 0x9f, 0x11, 0x24, 0x69, 0x97, 0x32, 0xed, 0xba, 0x3c, 0xf8, 0x1d, 0x38, 0x6b, 0x0a, 0x2b,
	0x3d, 0x63, 0x5c, 0x7a, 0x71, 0x54, 0x7a, 0x5e, 0x90, 0xa4, 0x7d, 0x8b, 0xcb, 0x13, 0x2f, 0xfc,
	0x14, 0x41, 0xca, 0xfd, 0x79, 0x5f, 0xd4, 0x0d, 0xdc, 0x07, 0xf0, 0x29, 0x41, 0xd4, 0xea, 0xf1,
	0x0b, 0x4d, 0x73, 0xdb, 0x98, 0xed, 0xe5, 0x93, 0x6c, 0xf7, 0x8c, 0x76, 0xbe, 0xe2, 0xae, 0x23,
	0x58, 0xc4, 0xf9, 0x76, 0x2a, 0x7c, 0x86, 0x00, 0xac, 0x33, 0xda, 0x95, 0x89, 0x81, 0x4b, 0x10,
	0x25, 0xb2, 0xd0, 0x90, 0xac, 0x0b, 0x31, 0x3d, 0x7b, 0xd9, 0x5c, 0xf8, 0x6d, 0x88, 0xb5, 0x44,
	0x9d, 0x0a, 0x84, 0xa6, 0x0b, 0xb8, 0xee, 0xb8, 0x1b, 0xe0, 0x1c, 0xfe, 0x4a, 0x0e, 0x52, 0x96,
	0x12, 0xe7, 0x76, 0x9b, 0x81, 0x17, 0x3c, 0x1e, 0x20, 0x34, 0x1c, 0x20, 0x54, 0xbe, 0x17, 0x8e,
	0x23, 0x26, 0x58, 0xf8, 0x0d, 0x82, 0x45, 0x0f, 0x5f, 0x5f, 0x95, 0x7d, 0x79, 0xfc, 0x7b, 0x04,
	0xbb, 0x04, 0x09, 0x5d, 0x3b, 0x15, 0xe8, 0xef, 0x11, 0xa4, 0x46, 0x80, 0xe2, 0xad, 0x31, 0x78,
	0xab, 0x27, 0x5c, 0x91, 0x29, 0xa6, 0x7d, 0x9f, 0x1e, 0xfe, 0x25, 0x82, 0xb4, 0x07, 0xe3, 0x86,
	0x89, 0xfc, 0x7f, 0x2e, 0x0a, 0x7e, 0xe1, 0x3a, 0x97, 0x33, 0x04, 0xad, 0xf3, 0x1d, 0x02, 0xf5,
	0xca, 0x4c, 0x10, 0xfd, 0xc8, 0xf2, 0xe3, 0xc8, 0x32, 0x3e, 0x64, 0xa1, 0x72, 0xf1, 0xaa, 0x8d,
	0xed, 0x23, 0x98, 0x3f, 0x29, 0xd1, 0xe1, 0x0b, 0x10, 0xa5, 0x79, 0xed, 0x90, 0x96, 0x22, 0x5f,
	0xea, 0x66, 0x38, 0x9b, 0x80, 0xcf, 0x43, 0xd2, 0xde, 0x42, 0xd7, 0xfa, 0x37, 0xa8, 0x25, 0x71,
	0x0e, 0xac, 0xa5, 0x9a, 0xd6, 0xbf, 0x51, 0xf8, 0x67, 0x14, 0xe6, 0x4c, 0xe5, 0xd5, 0x27, 0x06,
	0xd1, 0x64, 0x41, 0x3a, 0xbd, 0xb8, 0x2d, 0x43, 0xcc, 0x5f, 0x79, 0xc6, 0xba, 0x08, 0x87, 0x86,
	0x6f, 0xc1, 0x19, 0x3b, 0xef, 0x37, 0x48, 0x47, 0x94, 0x9d, 0xec, 0x1f, 0x1e, 0xd1, 0xc9, 0xe6,
	0xef, 0x06, 0xb8, 0xac, 0xc5, 0x57, 0x31, 0xd9, 0xec, 0xcc, 0x7f, 0x13, 0xec, 0x45, 0x9e, 0xc8,
	0x2d, 0x47, 0x34, 0x32, 0x29, 0x9a, 0xb1, 0xb8, 0xaa, 0x72, 0xcb, 0x16, 0x1c, 0x69, 0x8d, 0xa2,
	0x33, 0xb6, 0x46, 0xef, 0x42, 0xa6, 0x45, 0xda, 0x42, 0x4f, 0x32, 0xf8, 0x8e, 0x60, 0x90, 0xc7,
	0xc2, 0xe1, 0x4b, 0xba, 0xaa, 0xb4, 0xcd, 0xbe, 0x63, 0x71, 0xe3, 0xa2, 0x5d, 0x11, 0x81, 0x22,
	0x64, 0xcd, 0xd2, 0xf6, 0xd7, 0x01, 0x0a, 0xad, 0xdf, 0x7c, 0xdb, 0x04, 0x1b, 0x5f, 0x8d, 0x9a,
	0x85, 0x71, 0x05, 0xd9, 0xa5, 0x71, 0x07, 0x92, 0xd6, 0xc9, 0xf0, 0xa2, 0x4c, 0x0c, 0x36, 0x49,
	0xb7, 0x7a, 0xed, 0xd4, 0x6b, 0xeb, 0x65, 0x7a, 0x68, 0x7b, 0x69, 0xf4, 0x43, 0x48, 0xb8, 0x39,
	0x96, 0x5d, 0xa0, 0x6a, 0x66, 0x49, 0xe6, 0xf3, 0x27, 0x25, 0xf3, 0xbb, 0x88, 0xf3, 0x94, 0xe1,
	0x5d, 0x7f, 0x85, 0x94, 0x44, 0xdd, 0xa0, 0xe5, 0x2a, 0x59, 0xce, 0x9f, 0x80, 0x72, 0xa4, 0xc2,
	0xdc, 0x45, 0xbe, 0x02, 0x48, 0x4b, 0xce, 0x7d, 0xc8, 0x4e, 0x16, 0xbf, 0xc5, 0x59, 0xee, 0x2f,
	0xe2, 0x18, 0x71, 0xbc, 0x22, 0xee, 0x01, 0x3e, 0xa1, 0x1a, 0xb2, 0xb3, 0xa9, 0xcb, 0x2a, 0xe3,
	0x25, 0x72, 0x63, 0xee, 0xeb, 0xdb, 0x89, 0xf5, 0x62, 0xb9, 0xb8, 0x7e, 0xa5, 0xb8, 0xbe, 0x5e,
	0x59, 0x86, 0xb4, 0xd3, 0x0c, 0xd9, 0xb7, 0xf1, 0xcc, 0xd1, 0x00, 0x85, 0x8e, 0x07, 0x28, 0x38,
	0x1c, 0xa0, 0xd8, 0xd5, 0xe2, 0xb5, 0xe2, 0xf5, 0xe2, 0x8d, 0xca, 0x25, 0x60, 0x3c, 0xef, 0xd8,
	0x8c, 0x8b, 0x47, 0x03, 0xb4, 0x70, 0x3c, 0x40, 0xf3, 0xc3, 0x01, 0x4a, 0x96, 0xd7, 0x8b, 0xe5,
	0x72, 0xb1, 0x7c, 0xb5, 0x58, 0xbe, 0x76, 0x2f, 0x1c, 0x0f, 0x32, 0xa1, 0x7b, 0xe1, 0xf8, 0x3c,
	0xb3, 0x50, 0xf8, 0x57, 0xd8, 0xba, 0x68, 0x14, 0x80, 0x79, 0xd1, 0x66, 0xbc, 0x4b, 0x23, 0x51,
	0x1d, 0x9e, 0x31, 0xaa, 0x2f, 0x43, 0xbc, 0x25, 0xeb, 0xbc, 0x2c, 0x74, 0x09, 0xbd, 0x3a, 0x13,
	0x6d, 0xf1, 0x23, 0x2b, 0x45, 0xca, 0xfa, 0x9e, 0xd0, 0x25, 0xdf, 0x3a, 0x86, 0xd3, 0xbe, 0x18,
	0xee, 0xab, 0xb2, 0x1d, 0xc6, 0xf9, 0x97, 0x55, 0x1f, 0x2e, 0xd5, 0x1e, 0x29, 0x5f, 0xf7, 0x20,
	0xe3, 0x53, 0x64, 0xd6, 0x05, 0x96, 0xa1, 0x9a, 0x2e, 0x9c, 0xaa, 0xc9, 0x64, 0xe4, 0xd2, 0xed,
	0xd1, 0x82, 0xe2, 0x81, 0xd2, 0xac, 0xfc, 0xcd, 0xce, 0xbd, 0x04, 0x94, 0x9d, 0xe7, 0x1d, 0x50,
	0x4e, 0xda, 0x7f, 0x1b, 0xe6, 0xec, 0xfc, 0xcc, 0x77, 0x0d, 0x49, 0x67, 0xd3, 0xa7, 0xb8, 0x1c,
	0x71, 0x49, 0x9b, 0xf7, 0x81, 0x21, 0xe9, 0xf8, 0xa6, 0x9b, 0x6c, 0xa9, 0x64, 0xe6, 0x54, 0x49,
	0x3b, 0x09, 0x9b, 0x82, 0x1b, 0xf0, 0xf5, 0xed, 0x98, 0x13, 0x87, 0x17, 0x26, 0xe2, 0x30, 0xe3,
	0x8b, 0xc3, 0xd0, 0xd5, 0xe2, 0xb5, 0xca, 0x45, 0x48, 0x9a, 0x1b, 0x38, 0xf4, 0x85, 0xa3, 0x01,
	0x4a, 0x1f, 0x0f, 0x50, 0xca, 0x9c, 0x59, 0xd6, 0xaf, 0x15, 0xd7, 0xaf, 0x7f, 0x35, 0x40, 0xc8,
	0x0d, 0xbe, 0x14, 0x93, 0x2e, 0x7c, 0x1e, 0x84, 0x30, 0x1d, 0x5d, 0x36, 0x20, 0xde, 0x25, 0x86,
	0xd0, 0x12, 0x0c, 0x81, 0xa6, 0xf8, 0x64, 0x39, 0x37, 0x86, 0xef, 0x01, 0xd1, 0x75, 0xa1, 0x43,
	0x1e, 0x10, 0x43, 0xa0, 0xd3, 0x83, 0xcb, 0x8f, 0xdf, 0x81, 0x38, 0xb1, 0xab, 0x84, 0x5d, 0xe1,
	0xce, 0x4f, 0x69, 0xc9, 0x9d, 0x62, 0x62, 0xc6, 0xa4, 0x23, 0x82, 0xb7, 0x21, 0x2e, 0xda, 0xb1,
	0x6f, 0xc7, 0xf1, 0x34, 0x71, 0xe7, 0x8a, 0xf8, 0xcb, 0xb9, 0x2b, 0x8b, 0xd7, 0x20, 0x6d, 0x1d,
	0x15, 0xaf, 0x13, 0xad, 0x2f, 0x36, 0x09, 0xfb, 0x22, 0x46, 0x43, 0xdc, 0xcd, 0x93, 0x29, 0x8b,
	0x5e, 0xb3, 0xc8, 0xf6, 0xbc, 0x57, 0xae, 0xe4, 0x20, 0x69, 0x0e, 0x62, 0xd3, 0xdc, 0x6a, 0x39,
	0xac, 0xf0, 0xef, 0x30, 0xa4, 0x77, 0x24, 0xa5, 0x21, 0x48, 0x35, 0x95, 0x34, 0xe9, 0xe0, 0x55,
	0x85, 0xc8, 0xe3, 0x47, 0x44, 0x23, 0xb6, 0xc7, 0xde, 0x1c, 0x83, 0x6d, 0xde, 0xb8, 0xf7, 0x45,
	0xcd, 0xe8, 0x09, 0x92, 0xf9, 0xc9, 0x91, 0x76, 0x8d, 0x48, 0xa4, 0x69, 0x28, 0x5a, 0x25, 0x6c,
	0x9e, 0x04, 0x67, 0x49, 0x9b, 0x21, 0x4a, 0xc7, 0x22, 0xb7, 0x80, 0xdb, 0x8d, 0x45, 0x7e, 0xca,
	0x48, 0xe8, 0xf2, 0x71, 0xe6, 0xdc, 0xec, 0xab, 0xfb, 0x75, 0x48, 0x38, 0xf3, 0x95, 0x99, 0x3b,
	0xcc, 0x46, 0x7e, 0x69, 0xfa, 0x58, 0x59, 0x39, 0x37, 0x31, 0xa8, 0xf8, 0x3a, 0xf5, 0xb8, 0x3d,
	0x7c, 0xe9, 0xf8, 0x47, 0x30, 0x59, 0x19, 0xd8, 0xf0, 0x0c, 0xc3, 0xd1, 0xda, 0x4c, 0xc3, 0x91,
	0x6f, 0x4f, 0xc6, 0xe6, 0x76, 0x73, 0x31, 0xbe, 0x03, 0x11, 0xcb, 0x9a, 0x08, 0xdd, 0x6f, 0x71,
	0x4a, 0x60, 0x54, 0xe6, 0x27, 0xf5, 0x5d, 0x41, 0x9c, 0x25, 0x8b, 0x05, 0x48, 0xd1, 0xd7, 0x1b,
	0x37, 0xca, 0x5e, 0xc4, 0x66, 0xae, 0x8b, 0x8b, 0x5f, 0x7c, 0x3a, 0x2a, 0xec, 0xc4, 0xd2, 0x9c,
	0xb9, 0xea, 0xe6, 0xec, 0x4b, 0x40, 0x7f, 0xf3, 0x7d, 0xa2, 0xe9, 0xa2, 0x22, 0xb3, 0x5f, 0xc6,
	0x68, 0xc6, 0xf4, 0x1e, 0x29, 0x4c, 0xea, 0xfb, 0x16, 0x71, 0xe3, 0xda, 0x1f, 0x07, 0xe8, 0x0a,
	0x9c, 0x85, 0xec, 0x1d, 0xa5, 0xdb, 0x55, 0xe4, 0xbc, 0xef, 0x04, 0x51, 0x19, 0x00, 0x22, 0x96,
	0xdf, 0xd1, 0x75, 0xf3, 0xfb, 0x03, 0x1a, 0x22, 0x68, 0xbd, 0xf0, 0x37, 0x04, 0xe9, 0x3b, 0x1a,
	0x11, 0x0c, 0xe2, 0xc6, 0xdf, 0xbb, 0xdf, 0x35, 0xfe, 0xfe, 0xeb, 0x91, 0x77, 0x79, 0xb6, 0x73,
	0xb2, 0x4f, 0x64, 0x23, 0xfb, 0xe7, 0xdb, 0x63, 0x77, 0xa9, 0xf0, 0x77, 0x04, 0x19, 0x8e, 0xa8,
	0x92, 0xd0, 0xfc, 0x61, 0xda, 0xf7, 0x17, 0x04, 0xc9, 0x1d, 0x62, 0xfc, 0x20, 0x6d, 0xfb, 0x75,
	0x18, 0xb2, 0x76, 0x52, 0xa9, 0x19, 0x82, 0xd1, 0xd3, 0x6d, 0x0b, 0xe7, 0xbe, 0xf5, 0x93, 0x54,
	0x52, 0xf5, 0xbd, 0x47, 0x9d, 0x83, 0x04, 0x55, 0x40, 0x5b, 0x10, 0x3a, 0x23, 0x70, 0x71, 0x73,
	0xe1, 0xc0, 0x6c, 0x36, 0xde, 0x81, 0x58, 0x4f, 0xe5, 0x5b, 0xca, 0x63, 0x6b, 0x24, 0x49, 0x97,
	0x2f, 0x4e, 0xcf, 0x74, 0x0f, 0xd5, 0x2d, 0xe5, 0xb1, 0x4c, 0x37, 0x88, 0xf6, 0xe8, 0x37, 0xbe,
	0x08, 0x69, 0xaa, 0xdb, 0x7b, 0x74, 0xa4, 0xed, 0x10, 0x47, 0x21, 0xbb, 0xcf, 0x89, 0xaf, 0x40,
	0xdc, 0x32, 0x41, 0x97, 0xad, 0x27, 0x2a, 0x2e, 0x46, 0x01, 0xea, 0x32, 0xde, 0x86, 0xac, 0xbd,
	0x3f, 0xef, 0xbe, 0x63, 0xdb, 0x13, 0xc2, 0x52, 0xc9, 0x7a, 0xe9, 0x2e, 0x39, 0x2f, 0xdd, 0xa5,
	0xba, 0xc3, 0xc1, 0x65, 0xac, 0xfd, 0xdd, 0x05, 0x5c, 0x86, 0x85, 0xa6, 0x22, 0xcb, 0xa4, 0x69,
	0x88, 0x8a, 0xcc, 0xb7, 0x25, 0x41, 0xe5, 0x9b, 0x4a, 0x4f, 0x36, 0xe8, 0x6b, 0x6c, 0x8a, 0x3b,
	0xe3, 0x11, 0xb7, 0x25, 0x41, 0xbd, 0x63, 0x92, 0xf0, 0x0d, 0x58, 0x14, 0x5a, 0x7d, 0xa2, 0x19,
	0xa2, 0x4e, 0x5a, 0xbc, 0xaa, 0x91, 0xb6, 0xf8, 0xc4, 0x96, 0x4a, 0x50, 0xa9, 0x05, 0x8f, 0x7c,
	0x40, 0xa9, 0x96, 0x5c, 0x19, 0x16, 0x34, 0xd2, 0x24, 0x62, 0x7f, 0x5c, 0x0a, 0xac, 0xbd, 0x1c,
	0xa2, 0x5f, 0x66, 0xd9, 0xdf, 0xf5, 0xd3, 0xbe, 0x31, 0x49, 0x1d, 0xe5, 0x75, 0xf4, 0xb4, 0x53,
	0x7c, 0x7d, 0xfc, 0xed, 0x7a, 0xce, 0x72, 0xa7, 0xff, 0x8d, 0xba, 0xf0, 0x2b, 0x44, 0xdf, 0xc3,
	0x7d, 0x31, 0xf2, 0x7f, 0x90, 0xb1, 0xc4, 0xbc, 0x73, 0x40, 0x96, 0x7a, 0xba, 0xec, 0x1e, 0xc4,
	0x39, 0x48, 0xd8, 0xea, 0x75, 0x99, 0xc6, 0x79, 0x8a, 0x8b, 0x5b, 0xaa, 0x75, 0x19, 0xef, 0x01,
	0x63, 0x3d, 0x29, 0x52, 0xbd, 0xd6, 0x68, 0x62, 0x55, 0xbf, 0x53, 0x62, 0xc2, 0x03, 0xc1, 0xd1,
	0x48, 0xb0, 0x7e, 0x9b, 0xd3, 0xc9, 0xea, 0xef, 0x10, 0x64, 0xc6, 0x5e, 0xaf, 0x71, 0x1e, 0x5e,
	0xad, 0xec, 0x1c, 0xf0, 0xdc, 0xfe, 0xc3, 0x7a, 0x95, 0xe3, 0x77, 0xb7, 0xf8, 0x6d, 0x6e, 0xff,
	0x01, 0xbf, 0xbb, 0x57, 0xaf, 0x72, 0xdb, 0x9b, 0x77, 0xaa, 0x4c, 0x00, 0x5f, 0x80, 0xd7, 0x4e,
	0xe2, 0x38, 0xe0, 0x37, 0xb7, 0xb6, 0xb8, 0x6a, 0xad, 0xc6, 0x20, 0x5c, 0x80, 0xdc, 0x09, 0x2c,
	0xb5, 0xdd, 0x7a, 0x95, 0xdf, 0xaf, 0xdc, 0xab, 0xde, 0xa9, 0x33, 0x41, 0x7c, 0x1d, 0x2e, 0x4d,
	0xe3, 0xa9, 0x57, 0x1f, 0x1c, 0xdc, 0xdf, 0xac, 0x57, 0xf9, 0x83, 0x4d, 0x6e, 0xf3, 0x41, 0xb5,
	0x5e, 0xe5, 0x6a, 0x4c, 0x68, 0x29, 0x6c, 0x76, 0xe5, 0xab, 0x9f, 0x05, 0x01, 0x4f, 0x3e, 0x17,
	0xe3, 0x8b, 0x90, 0x37, 0xb5, 0x1d, 0x54, 0xab, 0x9c, 0x83, 0xc3, 0x52, 0xb8, 0x55, 0xdd, 0xde,
	0x7c, 0x78, 0xbf, 0xce, 0xef, 0x7c, 0xc0, 0x04, 0xa6, 0x73, 0x8d, 0xa0, 0x5f, 0x86, 0x0b, 0x27,
	0x73, 0x8d, 0x1a, 0xf0, 0x16, 0x94, 0x4e, 0x61, 0x3b, 0xc5, 0x06, 0x7c, 0x19, 0xde, 0x9c, 0x90,
	0xdc, 0xdf, 0xde, 0xae, 0x55, 0xeb, 0xb6, 0x82, 0x87, 0x95, 0xbd, 0x6a, 0x9d, 0xaf, 0x54, 0x77,
	0x76, 0xf7, 0x98, 0x30, 0xbe, 0x04, 0x6f, 0xcc, 0xc2, 0x5e, 0xdd, 0xdb, 0x62, 0x22, 0xab, 0x37,
	0xdd, 0x0c, 0xe5, 0x25, 0x03, 0x9c, 0x85, 0x94, 0xab, 0x61, 0x6b, 0xff, 0x83, 0x3d, 0x26, 0x80,
	0x33, 0x90, 0x74, 0x97, 0x1e, 0x1e, 0x30, 0xa8, 0xf2, 0x13, 0x74, 0xfc, 0x2c, 0x17, 0x78, 0xfa,
	0x2c, 0x17, 0xf8, 0xea, 0x59, 0x0e, 0xfd, 0x78, 0x98, 0x43, 0x9f, 0x0f, 0x73, 0xe8, 0x4f, 0xc3,
	0x1c, 0x3a, 0x1e, 0xe6, 0xd0, 0xd3, 0x61, 0x0e, 0xfd, 0x63, 0x98, 0x43, 0x2f, 0x86, 0xb9, 0xc0,
	0x57, 0xc3, 0x1c, 0xfa, 0xd9, 0xf3, 0x5c, 0xe0, 0xe8, 0x79, 0x0e, 0x1d, 0x3f, 0xcf, 0x05, 0x9e,
	0x3e, 0xcf, 0x05, 0x3e, 0xda, 0xe9, 0x28, 0xea, 0x27, 0x9d, 0x52, 0x5f, 0x91, 0x0c, 0xa2, 0x69,
	0x42, 0xa9, 0xa7, 0xaf, 0xd1, 0x8f, 0xb6, 0xa2, 0x75, 0x2f, 0xab, 0x9a, 0xd2, 0x17, 0x5b, 0x44,
	0xbb, 0xec, 0x90, 0xd7, 0xd4, 0x46, 0x47, 0x59, 0x23, 0x4f, 0x0c, 0xfb, 0x2f, 0x25, 0xef, 0xbf,
	0xb8, 0x46, 0x94, 0x26, 0x93, 0xab, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x55, 0xea, 0x3a,
	0xa7, 0x1b, 0x00, 0x00,
}

func (x BgpRouterIdType) String() string {
	s, ok := BgpRouterIdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BgpPeerAddressType) String() string {
	s, ok := BgpPeerAddressType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BgpPeerUpDownType) String() string {
	s, ok := BgpPeerUpDownType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BgpParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpParameters)
	if !ok {
		that2, ok := that.(BgpParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asn != that1.Asn {
		return false
	}
	if that1.RouterIdChoice == nil {
		if this.RouterIdChoice != nil {
			return false
		}
	} else if this.RouterIdChoice == nil {
		return false
	} else if !this.RouterIdChoice.Equal(that1.RouterIdChoice) {
		return false
	}
	if this.BgpRouterIdType != that1.BgpRouterIdType {
		return false
	}
	if !this.BgpRouterId.Equal(that1.BgpRouterId) {
		return false
	}
	if this.BgpRouterIdKey != that1.BgpRouterIdKey {
		return false
	}
	return true
}
func (this *BgpParameters_LocalAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpParameters_LocalAddress)
	if !ok {
		that2, ok := that.(BgpParameters_LocalAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocalAddress.Equal(that1.LocalAddress) {
		return false
	}
	return true
}
func (this *BgpParameters_FromSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpParameters_FromSite)
	if !ok {
		that2, ok := that.(BgpParameters_FromSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FromSite.Equal(that1.FromSite) {
		return false
	}
	return true
}
func (this *BgpParameters_IpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpParameters_IpAddress)
	if !ok {
		that2, ok := that.(BgpParameters_IpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	return true
}
func (this *BgpPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPeer)
	if !ok {
		that2, ok := that.(BgpPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asn != that1.Asn {
		return false
	}
	if this.BgpPeerAddressType != that1.BgpPeerAddressType {
		return false
	}
	if !this.BgpPeerAddress.Equal(that1.BgpPeerAddress) {
		return false
	}
	if this.BgpPeerAddressKey != that1.BgpPeerAddressKey {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.BgpPeerSubnetOffset != that1.BgpPeerSubnetOffset {
		return false
	}
	if len(this.Families) != len(that1.Families) {
		return false
	}
	for i := range this.Families {
		if !this.Families[i].Equal(that1.Families[i]) {
			return false
		}
	}
	if len(this.InterfaceRefs) != len(that1.InterfaceRefs) {
		return false
	}
	for i := range this.InterfaceRefs {
		if !this.InterfaceRefs[i].Equal(that1.InterfaceRefs[i]) {
			return false
		}
	}
	if this.AllInsideInterfaces != that1.AllInsideInterfaces {
		return false
	}
	if this.AllOutsideInterfaces != that1.AllOutsideInterfaces {
		return false
	}
	return true
}
func (this *InterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceList)
	if !ok {
		that2, ok := that.(InterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *FamilyInet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInet)
	if !ok {
		that2, ok := that.(FamilyInet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnableChoice == nil {
		if this.EnableChoice != nil {
			return false
		}
	} else if this.EnableChoice == nil {
		return false
	} else if !this.EnableChoice.Equal(that1.EnableChoice) {
		return false
	}
	return true
}
func (this *FamilyInet_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInet_Enable)
	if !ok {
		that2, ok := that.(FamilyInet_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *FamilyInet_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInet_Disable)
	if !ok {
		that2, ok := that.(FamilyInet_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *FamilyInetvpnParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInetvpnParameters)
	if !ok {
		that2, ok := that.(FamilyInetvpnParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SrChoice == nil {
		if this.SrChoice != nil {
			return false
		}
	} else if this.SrChoice == nil {
		return false
	} else if !this.SrChoice.Equal(that1.SrChoice) {
		return false
	}
	return true
}
func (this *FamilyInetvpnParameters_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInetvpnParameters_Enable)
	if !ok {
		that2, ok := that.(FamilyInetvpnParameters_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *FamilyInetvpnParameters_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInetvpnParameters_Disable)
	if !ok {
		that2, ok := that.(FamilyInetvpnParameters_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *FamilyInetvpn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInetvpn)
	if !ok {
		that2, ok := that.(FamilyInetvpn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnableChoice == nil {
		if this.EnableChoice != nil {
			return false
		}
	} else if this.EnableChoice == nil {
		return false
	} else if !this.EnableChoice.Equal(that1.EnableChoice) {
		return false
	}
	return true
}
func (this *FamilyInetvpn_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInetvpn_Enable)
	if !ok {
		that2, ok := that.(FamilyInetvpn_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *FamilyInetvpn_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInetvpn_Disable)
	if !ok {
		that2, ok := that.(FamilyInetvpn_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *FamilyInet6Vpn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInet6Vpn)
	if !ok {
		that2, ok := that.(FamilyInet6Vpn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnableChoice == nil {
		if this.EnableChoice != nil {
			return false
		}
	} else if this.EnableChoice == nil {
		return false
	} else if !this.EnableChoice.Equal(that1.EnableChoice) {
		return false
	}
	return true
}
func (this *FamilyInet6Vpn_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInet6Vpn_Enable)
	if !ok {
		that2, ok := that.(FamilyInet6Vpn_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *FamilyInet6Vpn_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyInet6Vpn_Disable)
	if !ok {
		that2, ok := that.(FamilyInet6Vpn_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *FamilyRtarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyRtarget)
	if !ok {
		that2, ok := that.(FamilyRtarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnableChoice == nil {
		if this.EnableChoice != nil {
			return false
		}
	} else if this.EnableChoice == nil {
		return false
	} else if !this.EnableChoice.Equal(that1.EnableChoice) {
		return false
	}
	return true
}
func (this *FamilyRtarget_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyRtarget_Enable)
	if !ok {
		that2, ok := that.(FamilyRtarget_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *FamilyRtarget_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FamilyRtarget_Disable)
	if !ok {
		that2, ok := that.(FamilyRtarget_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *PeerFamilyParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerFamilyParameters)
	if !ok {
		that2, ok := that.(PeerFamilyParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Family != that1.Family {
		return false
	}
	if this.EnableSrv6 != that1.EnableSrv6 {
		return false
	}
	return true
}
func (this *PeerExternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal)
	if !ok {
		that2, ok := that.(PeerExternal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asn != that1.Asn {
		return false
	}
	if that1.AddressChoice == nil {
		if this.AddressChoice != nil {
			return false
		}
	} else if this.AddressChoice == nil {
		return false
	} else if !this.AddressChoice.Equal(that1.AddressChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.FamilyInet.Equal(that1.FamilyInet) {
		return false
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	return true
}
func (this *PeerExternal_Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_Address)
	if !ok {
		that2, ok := that.(PeerExternal_Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *PeerExternal_SubnetBeginOffset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_SubnetBeginOffset)
	if !ok {
		that2, ok := that.(PeerExternal_SubnetBeginOffset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubnetBeginOffset != that1.SubnetBeginOffset {
		return false
	}
	return true
}
func (this *PeerExternal_SubnetEndOffset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_SubnetEndOffset)
	if !ok {
		that2, ok := that.(PeerExternal_SubnetEndOffset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubnetEndOffset != that1.SubnetEndOffset {
		return false
	}
	return true
}
func (this *PeerExternal_FromSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_FromSite)
	if !ok {
		that2, ok := that.(PeerExternal_FromSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FromSite.Equal(that1.FromSite) {
		return false
	}
	return true
}
func (this *PeerExternal_DefaultGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_DefaultGateway)
	if !ok {
		that2, ok := that.(PeerExternal_DefaultGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultGateway.Equal(that1.DefaultGateway) {
		return false
	}
	return true
}
func (this *PeerExternal_Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_Interface)
	if !ok {
		that2, ok := that.(PeerExternal_Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	return true
}
func (this *PeerExternal_InterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_InterfaceList)
	if !ok {
		that2, ok := that.(PeerExternal_InterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceList.Equal(that1.InterfaceList) {
		return false
	}
	return true
}
func (this *PeerExternal_InsideInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_InsideInterfaces)
	if !ok {
		that2, ok := that.(PeerExternal_InsideInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideInterfaces.Equal(that1.InsideInterfaces) {
		return false
	}
	return true
}
func (this *PeerExternal_OutsideInterfaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerExternal_OutsideInterfaces)
	if !ok {
		that2, ok := that.(PeerExternal_OutsideInterfaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideInterfaces.Equal(that1.OutsideInterfaces) {
		return false
	}
	return true
}
func (this *PeerInternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInternal)
	if !ok {
		that2, ok := that.(PeerInternal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AddressChoice == nil {
		if this.AddressChoice != nil {
			return false
		}
	} else if this.AddressChoice == nil {
		return false
	} else if !this.AddressChoice.Equal(that1.AddressChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.FamilyInetvpn.Equal(that1.FamilyInetvpn) {
		return false
	}
	if !this.FamilyInet6Vpn.Equal(that1.FamilyInet6Vpn) {
		return false
	}
	if !this.FamilyRtarget.Equal(that1.FamilyRtarget) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *PeerInternal_Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInternal_Address)
	if !ok {
		that2, ok := that.(PeerInternal_Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *PeerInternal_FromSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInternal_FromSite)
	if !ok {
		that2, ok := that.(PeerInternal_FromSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FromSite.Equal(that1.FromSite) {
		return false
	}
	return true
}
func (this *PeerInternal_DnsName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInternal_DnsName)
	if !ok {
		that2, ok := that.(PeerInternal_DnsName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsName != that1.DnsName {
		return false
	}
	return true
}
func (this *PeerInternal_DisableMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInternal_DisableMtls)
	if !ok {
		that2, ok := that.(PeerInternal_DisableMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMtls.Equal(that1.DisableMtls) {
		return false
	}
	return true
}
func (this *PeerInternal_EnableMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInternal_EnableMtls)
	if !ok {
		that2, ok := that.(PeerInternal_EnableMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMtls.Equal(that1.EnableMtls) {
		return false
	}
	return true
}
func (this *Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Peer)
	if !ok {
		that2, ok := that.(Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.TypeChoice == nil {
		if this.TypeChoice != nil {
			return false
		}
	} else if this.TypeChoice == nil {
		return false
	} else if !this.TypeChoice.Equal(that1.TypeChoice) {
		return false
	}
	if this.TargetService != that1.TargetService {
		return false
	}
	return true
}
func (this *Peer_External) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Peer_External)
	if !ok {
		that2, ok := that.(Peer_External)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.External.Equal(that1.External) {
		return false
	}
	return true
}
func (this *Peer_Internal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Peer_Internal)
	if !ok {
		that2, ok := that.(Peer_Internal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Internal.Equal(that1.Internal) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Where.Equal(that1.Where) {
		return false
	}
	if !this.BgpParameters.Equal(that1.BgpParameters) {
		return false
	}
	if len(this.BgpPeers) != len(that1.BgpPeers) {
		return false
	}
	for i := range this.BgpPeers {
		if !this.BgpPeers[i].Equal(that1.BgpPeers[i]) {
			return false
		}
	}
	if len(this.NetworkInterface) != len(that1.NetworkInterface) {
		return false
	}
	for i := range this.NetworkInterface {
		if !this.NetworkInterface[i].Equal(that1.NetworkInterface[i]) {
			return false
		}
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.ViewVersion != that1.ViewVersion {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Where.Equal(that1.Where) {
		return false
	}
	if !this.BgpParameters.Equal(that1.BgpParameters) {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Where.Equal(that1.Where) {
		return false
	}
	if !this.BgpParameters.Equal(that1.BgpParameters) {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Where.Equal(that1.Where) {
		return false
	}
	if !this.BgpParameters.Equal(that1.BgpParameters) {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *BgpPeerStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpPeerStatusType)
	if !ok {
		that2, ok := that.(BgpPeerStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PeerAddress.Equal(that1.PeerAddress) {
		return false
	}
	if this.PeerPort != that1.PeerPort {
		return false
	}
	if this.UpDown != that1.UpDown {
		return false
	}
	if this.PeerRouterId != that1.PeerRouterId {
		return false
	}
	if this.PeerAsn != that1.PeerAsn {
		return false
	}
	if !this.UpDownTimestamp.Equal(that1.UpDownTimestamp) {
		return false
	}
	if this.ConnectionFlapCount != that1.ConnectionFlapCount {
		return false
	}
	if this.AdvertisedPrefixCount != that1.AdvertisedPrefixCount {
		return false
	}
	if this.ReceivedPrefixCount != that1.ReceivedPrefixCount {
		return false
	}
	if this.InterfaceName != that1.InterfaceName {
		return false
	}
	if this.LocalAddress != that1.LocalAddress {
		return false
	}
	return true
}
func (this *BgpStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BgpStatusType)
	if !ok {
		that2, ok := that.(BgpStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LocalRouterId != that1.LocalRouterId {
		return false
	}
	if this.LocalAsn != that1.LocalAsn {
		return false
	}
	if len(this.PeerStatusList) != len(that1.PeerStatusList) {
		return false
	}
	for i := range this.PeerStatusList {
		if !this.PeerStatusList[i].Equal(that1.PeerStatusList[i]) {
			return false
		}
	}
	return true
}
func (this *BgpParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&bgp.BgpParameters{")
	s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	if this.RouterIdChoice != nil {
		s = append(s, "RouterIdChoice: "+fmt.Sprintf("%#v", this.RouterIdChoice)+",\n")
	}
	s = append(s, "BgpRouterIdType: "+fmt.Sprintf("%#v", this.BgpRouterIdType)+",\n")
	if this.BgpRouterId != nil {
		s = append(s, "BgpRouterId: "+fmt.Sprintf("%#v", this.BgpRouterId)+",\n")
	}
	s = append(s, "BgpRouterIdKey: "+fmt.Sprintf("%#v", this.BgpRouterIdKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpParameters_LocalAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.BgpParameters_LocalAddress{` +
		`LocalAddress:` + fmt.Sprintf("%#v", this.LocalAddress) + `}`}, ", ")
	return s
}
func (this *BgpParameters_FromSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.BgpParameters_FromSite{` +
		`FromSite:` + fmt.Sprintf("%#v", this.FromSite) + `}`}, ", ")
	return s
}
func (this *BgpParameters_IpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.BgpParameters_IpAddress{` +
		`IpAddress:` + fmt.Sprintf("%#v", this.IpAddress) + `}`}, ", ")
	return s
}
func (this *BgpPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&bgp.BgpPeer{")
	s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	s = append(s, "BgpPeerAddressType: "+fmt.Sprintf("%#v", this.BgpPeerAddressType)+",\n")
	if this.BgpPeerAddress != nil {
		s = append(s, "BgpPeerAddress: "+fmt.Sprintf("%#v", this.BgpPeerAddress)+",\n")
	}
	s = append(s, "BgpPeerAddressKey: "+fmt.Sprintf("%#v", this.BgpPeerAddressKey)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "BgpPeerSubnetOffset: "+fmt.Sprintf("%#v", this.BgpPeerSubnetOffset)+",\n")
	if this.Families != nil {
		s = append(s, "Families: "+fmt.Sprintf("%#v", this.Families)+",\n")
	}
	if this.InterfaceRefs != nil {
		s = append(s, "InterfaceRefs: "+fmt.Sprintf("%#v", this.InterfaceRefs)+",\n")
	}
	s = append(s, "AllInsideInterfaces: "+fmt.Sprintf("%#v", this.AllInsideInterfaces)+",\n")
	s = append(s, "AllOutsideInterfaces: "+fmt.Sprintf("%#v", this.AllOutsideInterfaces)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bgp.InterfaceList{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FamilyInet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp.FamilyInet{")
	if this.EnableChoice != nil {
		s = append(s, "EnableChoice: "+fmt.Sprintf("%#v", this.EnableChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FamilyInet_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInet_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *FamilyInet_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInet_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *FamilyInetvpnParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp.FamilyInetvpnParameters{")
	if this.SrChoice != nil {
		s = append(s, "SrChoice: "+fmt.Sprintf("%#v", this.SrChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FamilyInetvpnParameters_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInetvpnParameters_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *FamilyInetvpnParameters_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInetvpnParameters_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *FamilyInetvpn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp.FamilyInetvpn{")
	if this.EnableChoice != nil {
		s = append(s, "EnableChoice: "+fmt.Sprintf("%#v", this.EnableChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FamilyInetvpn_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInetvpn_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *FamilyInetvpn_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInetvpn_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *FamilyInet6Vpn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp.FamilyInet6Vpn{")
	if this.EnableChoice != nil {
		s = append(s, "EnableChoice: "+fmt.Sprintf("%#v", this.EnableChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FamilyInet6Vpn_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInet6Vpn_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *FamilyInet6Vpn_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyInet6Vpn_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *FamilyRtarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp.FamilyRtarget{")
	if this.EnableChoice != nil {
		s = append(s, "EnableChoice: "+fmt.Sprintf("%#v", this.EnableChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FamilyRtarget_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyRtarget_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *FamilyRtarget_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.FamilyRtarget_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *PeerFamilyParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bgp.PeerFamilyParameters{")
	s = append(s, "Family: "+fmt.Sprintf("%#v", this.Family)+",\n")
	s = append(s, "EnableSrv6: "+fmt.Sprintf("%#v", this.EnableSrv6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerExternal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&bgp.PeerExternal{")
	s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	if this.AddressChoice != nil {
		s = append(s, "AddressChoice: "+fmt.Sprintf("%#v", this.AddressChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.FamilyInet != nil {
		s = append(s, "FamilyInet: "+fmt.Sprintf("%#v", this.FamilyInet)+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerExternal_Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_Address{` +
		`Address:` + fmt.Sprintf("%#v", this.Address) + `}`}, ", ")
	return s
}
func (this *PeerExternal_SubnetBeginOffset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_SubnetBeginOffset{` +
		`SubnetBeginOffset:` + fmt.Sprintf("%#v", this.SubnetBeginOffset) + `}`}, ", ")
	return s
}
func (this *PeerExternal_SubnetEndOffset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_SubnetEndOffset{` +
		`SubnetEndOffset:` + fmt.Sprintf("%#v", this.SubnetEndOffset) + `}`}, ", ")
	return s
}
func (this *PeerExternal_FromSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_FromSite{` +
		`FromSite:` + fmt.Sprintf("%#v", this.FromSite) + `}`}, ", ")
	return s
}
func (this *PeerExternal_DefaultGateway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_DefaultGateway{` +
		`DefaultGateway:` + fmt.Sprintf("%#v", this.DefaultGateway) + `}`}, ", ")
	return s
}
func (this *PeerExternal_Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_Interface{` +
		`Interface:` + fmt.Sprintf("%#v", this.Interface) + `}`}, ", ")
	return s
}
func (this *PeerExternal_InterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_InterfaceList{` +
		`InterfaceList:` + fmt.Sprintf("%#v", this.InterfaceList) + `}`}, ", ")
	return s
}
func (this *PeerExternal_InsideInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_InsideInterfaces{` +
		`InsideInterfaces:` + fmt.Sprintf("%#v", this.InsideInterfaces) + `}`}, ", ")
	return s
}
func (this *PeerExternal_OutsideInterfaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerExternal_OutsideInterfaces{` +
		`OutsideInterfaces:` + fmt.Sprintf("%#v", this.OutsideInterfaces) + `}`}, ", ")
	return s
}
func (this *PeerInternal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&bgp.PeerInternal{")
	if this.AddressChoice != nil {
		s = append(s, "AddressChoice: "+fmt.Sprintf("%#v", this.AddressChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.FamilyInetvpn != nil {
		s = append(s, "FamilyInetvpn: "+fmt.Sprintf("%#v", this.FamilyInetvpn)+",\n")
	}
	if this.FamilyInet6Vpn != nil {
		s = append(s, "FamilyInet6Vpn: "+fmt.Sprintf("%#v", this.FamilyInet6Vpn)+",\n")
	}
	if this.FamilyRtarget != nil {
		s = append(s, "FamilyRtarget: "+fmt.Sprintf("%#v", this.FamilyRtarget)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerInternal_Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerInternal_Address{` +
		`Address:` + fmt.Sprintf("%#v", this.Address) + `}`}, ", ")
	return s
}
func (this *PeerInternal_FromSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerInternal_FromSite{` +
		`FromSite:` + fmt.Sprintf("%#v", this.FromSite) + `}`}, ", ")
	return s
}
func (this *PeerInternal_DnsName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerInternal_DnsName{` +
		`DnsName:` + fmt.Sprintf("%#v", this.DnsName) + `}`}, ", ")
	return s
}
func (this *PeerInternal_DisableMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerInternal_DisableMtls{` +
		`DisableMtls:` + fmt.Sprintf("%#v", this.DisableMtls) + `}`}, ", ")
	return s
}
func (this *PeerInternal_EnableMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.PeerInternal_EnableMtls{` +
		`EnableMtls:` + fmt.Sprintf("%#v", this.EnableMtls) + `}`}, ", ")
	return s
}
func (this *Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bgp.Peer{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.TypeChoice != nil {
		s = append(s, "TypeChoice: "+fmt.Sprintf("%#v", this.TypeChoice)+",\n")
	}
	s = append(s, "TargetService: "+fmt.Sprintf("%#v", this.TargetService)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Peer_External) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.Peer_External{` +
		`External:` + fmt.Sprintf("%#v", this.External) + `}`}, ", ")
	return s
}
func (this *Peer_Internal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bgp.Peer_Internal{` +
		`Internal:` + fmt.Sprintf("%#v", this.Internal) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&bgp.GlobalSpecType{")
	if this.Where != nil {
		s = append(s, "Where: "+fmt.Sprintf("%#v", this.Where)+",\n")
	}
	if this.BgpParameters != nil {
		s = append(s, "BgpParameters: "+fmt.Sprintf("%#v", this.BgpParameters)+",\n")
	}
	if this.BgpPeers != nil {
		s = append(s, "BgpPeers: "+fmt.Sprintf("%#v", this.BgpPeers)+",\n")
	}
	if this.NetworkInterface != nil {
		s = append(s, "NetworkInterface: "+fmt.Sprintf("%#v", this.NetworkInterface)+",\n")
	}
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "ViewVersion: "+fmt.Sprintf("%#v", this.ViewVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bgp.CreateSpecType{")
	if this.Where != nil {
		s = append(s, "Where: "+fmt.Sprintf("%#v", this.Where)+",\n")
	}
	if this.BgpParameters != nil {
		s = append(s, "BgpParameters: "+fmt.Sprintf("%#v", this.BgpParameters)+",\n")
	}
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bgp.ReplaceSpecType{")
	if this.Where != nil {
		s = append(s, "Where: "+fmt.Sprintf("%#v", this.Where)+",\n")
	}
	if this.BgpParameters != nil {
		s = append(s, "BgpParameters: "+fmt.Sprintf("%#v", this.BgpParameters)+",\n")
	}
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bgp.GetSpecType{")
	if this.Where != nil {
		s = append(s, "Where: "+fmt.Sprintf("%#v", this.Where)+",\n")
	}
	if this.BgpParameters != nil {
		s = append(s, "BgpParameters: "+fmt.Sprintf("%#v", this.BgpParameters)+",\n")
	}
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpPeerStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&bgp.BgpPeerStatusType{")
	if this.PeerAddress != nil {
		s = append(s, "PeerAddress: "+fmt.Sprintf("%#v", this.PeerAddress)+",\n")
	}
	s = append(s, "PeerPort: "+fmt.Sprintf("%#v", this.PeerPort)+",\n")
	s = append(s, "UpDown: "+fmt.Sprintf("%#v", this.UpDown)+",\n")
	s = append(s, "PeerRouterId: "+fmt.Sprintf("%#v", this.PeerRouterId)+",\n")
	s = append(s, "PeerAsn: "+fmt.Sprintf("%#v", this.PeerAsn)+",\n")
	if this.UpDownTimestamp != nil {
		s = append(s, "UpDownTimestamp: "+fmt.Sprintf("%#v", this.UpDownTimestamp)+",\n")
	}
	s = append(s, "ConnectionFlapCount: "+fmt.Sprintf("%#v", this.ConnectionFlapCount)+",\n")
	s = append(s, "AdvertisedPrefixCount: "+fmt.Sprintf("%#v", this.AdvertisedPrefixCount)+",\n")
	s = append(s, "ReceivedPrefixCount: "+fmt.Sprintf("%#v", this.ReceivedPrefixCount)+",\n")
	s = append(s, "InterfaceName: "+fmt.Sprintf("%#v", this.InterfaceName)+",\n")
	s = append(s, "LocalAddress: "+fmt.Sprintf("%#v", this.LocalAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BgpStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bgp.BgpStatusType{")
	s = append(s, "LocalRouterId: "+fmt.Sprintf("%#v", this.LocalRouterId)+",\n")
	s = append(s, "LocalAsn: "+fmt.Sprintf("%#v", this.LocalAsn)+",\n")
	if this.PeerStatusList != nil {
		s = append(s, "PeerStatusList: "+fmt.Sprintf("%#v", this.PeerStatusList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BgpParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouterIdChoice != nil {
		{
			size := m.RouterIdChoice.Size()
			i -= size
			if _, err := m.RouterIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.BgpRouterIdKey) > 0 {
		i -= len(m.BgpRouterIdKey)
		copy(dAtA[i:], m.BgpRouterIdKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpRouterIdKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.BgpRouterId != nil {
		{
			size, err := m.BgpRouterId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BgpRouterIdType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BgpRouterIdType))
		i--
		dAtA[i] = 0x10
	}
	if m.Asn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Asn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BgpParameters_LocalAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpParameters_LocalAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocalAddress != nil {
		{
			size, err := m.LocalAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BgpParameters_FromSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpParameters_FromSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FromSite != nil {
		{
			size, err := m.FromSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BgpParameters_IpAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpParameters_IpAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IpAddress)
	copy(dAtA[i:], m.IpAddress)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *BgpPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllOutsideInterfaces {
		i--
		if m.AllOutsideInterfaces {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.AllInsideInterfaces {
		i--
		if m.AllInsideInterfaces {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.InterfaceRefs) > 0 {
		for iNdEx := len(m.InterfaceRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterfaceRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Families) > 0 {
		for iNdEx := len(m.Families) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Families[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.BgpPeerSubnetOffset != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BgpPeerSubnetOffset))
		i--
		dAtA[i] = 0x30
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BgpPeerAddressKey) > 0 {
		i -= len(m.BgpPeerAddressKey)
		copy(dAtA[i:], m.BgpPeerAddressKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpPeerAddressKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.BgpPeerAddress != nil {
		{
			size, err := m.BgpPeerAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BgpPeerAddressType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BgpPeerAddressType))
		i--
		dAtA[i] = 0x10
	}
	if m.Asn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Asn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FamilyInet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FamilyInet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableChoice != nil {
		{
			size := m.EnableChoice.Size()
			i -= size
			if _, err := m.EnableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FamilyInet_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInet_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInet_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInet_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInetvpnParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FamilyInetvpnParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInetvpnParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SrChoice != nil {
		{
			size := m.SrChoice.Size()
			i -= size
			if _, err := m.SrChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FamilyInetvpnParameters_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInetvpnParameters_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInetvpnParameters_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInetvpnParameters_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInetvpn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FamilyInetvpn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInetvpn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableChoice != nil {
		{
			size := m.EnableChoice.Size()
			i -= size
			if _, err := m.EnableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FamilyInetvpn_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInetvpn_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInetvpn_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInetvpn_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInet6Vpn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FamilyInet6Vpn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInet6Vpn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableChoice != nil {
		{
			size := m.EnableChoice.Size()
			i -= size
			if _, err := m.EnableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FamilyInet6Vpn_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInet6Vpn_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FamilyInet6Vpn_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyInet6Vpn_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FamilyRtarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FamilyRtarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyRtarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableChoice != nil {
		{
			size := m.EnableChoice.Size()
			i -= size
			if _, err := m.EnableChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FamilyRtarget_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyRtarget_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FamilyRtarget_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FamilyRtarget_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PeerFamilyParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerFamilyParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerFamilyParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableSrv6 {
		i--
		if m.EnableSrv6 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Family) > 0 {
		i -= len(m.Family)
		copy(dAtA[i:], m.Family)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Family)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InterfaceChoice != nil {
		{
			size := m.InterfaceChoice.Size()
			i -= size
			if _, err := m.InterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FamilyInet != nil {
		{
			size, err := m.FamilyInet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x50
	}
	if m.AddressChoice != nil {
		{
			size := m.AddressChoice.Size()
			i -= size
			if _, err := m.AddressChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Asn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Asn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerExternal_Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *PeerExternal_SubnetBeginOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_SubnetBeginOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.SubnetBeginOffset))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *PeerExternal_SubnetEndOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_SubnetEndOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.SubnetEndOffset))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *PeerExternal_FromSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_FromSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FromSite != nil {
		{
			size, err := m.FromSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PeerExternal_DefaultGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_DefaultGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultGateway != nil {
		{
			size, err := m.DefaultGateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PeerExternal_Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *PeerExternal_InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_InterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfaceList != nil {
		{
			size, err := m.InterfaceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *PeerExternal_InsideInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_InsideInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideInterfaces != nil {
		{
			size, err := m.InsideInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *PeerExternal_OutsideInterfaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerExternal_OutsideInterfaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideInterfaces != nil {
		{
			size, err := m.OutsideInterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *PeerInternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FamilyInet6Vpn != nil {
		{
			size, err := m.FamilyInet6Vpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FamilyRtarget != nil {
		{
			size, err := m.FamilyRtarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.FamilyInetvpn != nil {
		{
			size, err := m.FamilyInetvpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x50
	}
	if m.AddressChoice != nil {
		{
			size := m.AddressChoice.Size()
			i -= size
			if _, err := m.AddressChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PeerInternal_Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInternal_Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *PeerInternal_FromSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInternal_FromSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FromSite != nil {
		{
			size, err := m.FromSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PeerInternal_DnsName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInternal_DnsName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DnsName)
	copy(dAtA[i:], m.DnsName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DnsName)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *PeerInternal_DisableMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInternal_DisableMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMtls != nil {
		{
			size, err := m.DisableMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *PeerInternal_EnableMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInternal_EnableMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMtls != nil {
		{
			size, err := m.EnableMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetService) > 0 {
		i -= len(m.TargetService)
		copy(dAtA[i:], m.TargetService)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TargetService)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.TypeChoice != nil {
		{
			size := m.TypeChoice.Size()
			i -= size
			if _, err := m.TypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Peer_External) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer_External) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.External != nil {
		{
			size, err := m.External.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Peer_Internal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer_Internal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Internal != nil {
		{
			size, err := m.Internal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ViewVersion))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc8
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NetworkInterface) > 0 {
		for iNdEx := len(m.NetworkInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BgpPeers) > 0 {
		for iNdEx := len(m.BgpPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BgpPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BgpParameters != nil {
		{
			size, err := m.BgpParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Where != nil {
		{
			size, err := m.Where.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BgpParameters != nil {
		{
			size, err := m.BgpParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Where != nil {
		{
			size, err := m.Where.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BgpParameters != nil {
		{
			size, err := m.BgpParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Where != nil {
		{
			size, err := m.Where.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BgpParameters != nil {
		{
			size, err := m.BgpParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Where != nil {
		{
			size, err := m.Where.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BgpPeerStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpPeerStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpPeerStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalAddress) > 0 {
		i -= len(m.LocalAddress)
		copy(dAtA[i:], m.LocalAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LocalAddress)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.InterfaceName) > 0 {
		i -= len(m.InterfaceName)
		copy(dAtA[i:], m.InterfaceName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InterfaceName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ReceivedPrefixCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ReceivedPrefixCount))
		i--
		dAtA[i] = 0x50
	}
	if m.AdvertisedPrefixCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AdvertisedPrefixCount))
		i--
		dAtA[i] = 0x48
	}
	if m.ConnectionFlapCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionFlapCount))
		i--
		dAtA[i] = 0x40
	}
	if m.UpDownTimestamp != nil {
		{
			size, err := m.UpDownTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PeerAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PeerAsn))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PeerRouterId) > 0 {
		i -= len(m.PeerRouterId)
		copy(dAtA[i:], m.PeerRouterId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PeerRouterId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PeerPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PeerPort))
		i--
		dAtA[i] = 0x20
	}
	if m.PeerAddress != nil {
		{
			size, err := m.PeerAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpDown != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UpDown))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BgpStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BgpStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerStatusList) > 0 {
		for iNdEx := len(m.PeerStatusList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeerStatusList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LocalAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LocalAsn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LocalRouterId) > 0 {
		i -= len(m.LocalRouterId)
		copy(dAtA[i:], m.LocalRouterId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LocalRouterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BgpParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != 0 {
		n += 1 + sovTypes(uint64(m.Asn))
	}
	if m.BgpRouterIdType != 0 {
		n += 1 + sovTypes(uint64(m.BgpRouterIdType))
	}
	if m.BgpRouterId != nil {
		l = m.BgpRouterId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpRouterIdKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RouterIdChoice != nil {
		n += m.RouterIdChoice.Size()
	}
	return n
}

func (m *BgpParameters_LocalAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalAddress != nil {
		l = m.LocalAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpParameters_FromSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromSite != nil {
		l = m.FromSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BgpParameters_IpAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *BgpPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != 0 {
		n += 1 + sovTypes(uint64(m.Asn))
	}
	if m.BgpPeerAddressType != 0 {
		n += 1 + sovTypes(uint64(m.BgpPeerAddressType))
	}
	if m.BgpPeerAddress != nil {
		l = m.BgpPeerAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpPeerAddressKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.BgpPeerSubnetOffset != 0 {
		n += 1 + sovTypes(uint64(m.BgpPeerSubnetOffset))
	}
	if len(m.Families) > 0 {
		for _, e := range m.Families {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InterfaceRefs) > 0 {
		for _, e := range m.InterfaceRefs {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AllInsideInterfaces {
		n += 3
	}
	if m.AllOutsideInterfaces {
		n += 3
	}
	return n
}

func (m *InterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *FamilyInet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChoice != nil {
		n += m.EnableChoice.Size()
	}
	return n
}

func (m *FamilyInet_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInet_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInetvpnParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrChoice != nil {
		n += m.SrChoice.Size()
	}
	return n
}

func (m *FamilyInetvpnParameters_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInetvpnParameters_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInetvpn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChoice != nil {
		n += m.EnableChoice.Size()
	}
	return n
}

func (m *FamilyInetvpn_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInetvpn_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInet6Vpn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChoice != nil {
		n += m.EnableChoice.Size()
	}
	return n
}

func (m *FamilyInet6Vpn_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyInet6Vpn_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyRtarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChoice != nil {
		n += m.EnableChoice.Size()
	}
	return n
}

func (m *FamilyRtarget_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FamilyRtarget_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerFamilyParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnableSrv6 {
		n += 2
	}
	return n
}

func (m *PeerExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != 0 {
		n += 1 + sovTypes(uint64(m.Asn))
	}
	if m.AddressChoice != nil {
		n += m.AddressChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.FamilyInet != nil {
		l = m.FamilyInet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	return n
}

func (m *PeerExternal_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *PeerExternal_SubnetBeginOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SubnetBeginOffset))
	return n
}
func (m *PeerExternal_SubnetEndOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SubnetEndOffset))
	return n
}
func (m *PeerExternal_FromSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromSite != nil {
		l = m.FromSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerExternal_DefaultGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultGateway != nil {
		l = m.DefaultGateway.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerExternal_Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerExternal_InterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceList != nil {
		l = m.InterfaceList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerExternal_InsideInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideInterfaces != nil {
		l = m.InsideInterfaces.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerExternal_OutsideInterfaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideInterfaces != nil {
		l = m.OutsideInterfaces.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerInternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressChoice != nil {
		n += m.AddressChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.FamilyInetvpn != nil {
		l = m.FamilyInetvpn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FamilyRtarget != nil {
		l = m.FamilyRtarget.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	if m.FamilyInet6Vpn != nil {
		l = m.FamilyInet6Vpn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PeerInternal_Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *PeerInternal_FromSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromSite != nil {
		l = m.FromSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerInternal_DnsName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DnsName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *PeerInternal_DisableMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMtls != nil {
		l = m.DisableMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PeerInternal_EnableMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMtls != nil {
		l = m.EnableMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TypeChoice != nil {
		n += m.TypeChoice.Size()
	}
	l = len(m.TargetService)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Peer_External) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.External != nil {
		l = m.External.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Peer_Internal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Internal != nil {
		l = m.Internal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Where != nil {
		l = m.Where.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BgpParameters != nil {
		l = m.BgpParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.BgpPeers) > 0 {
		for _, e := range m.BgpPeers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NetworkInterface) > 0 {
		for _, e := range m.NetworkInterface {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewVersion != 0 {
		n += 2 + sovTypes(uint64(m.ViewVersion))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Where != nil {
		l = m.Where.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BgpParameters != nil {
		l = m.BgpParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Where != nil {
		l = m.Where.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BgpParameters != nil {
		l = m.BgpParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Where != nil {
		l = m.Where.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BgpParameters != nil {
		l = m.BgpParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *BgpPeerStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpDown != 0 {
		n += 1 + sovTypes(uint64(m.UpDown))
	}
	if m.PeerAddress != nil {
		l = m.PeerAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PeerPort != 0 {
		n += 1 + sovTypes(uint64(m.PeerPort))
	}
	l = len(m.PeerRouterId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PeerAsn != 0 {
		n += 1 + sovTypes(uint64(m.PeerAsn))
	}
	if m.UpDownTimestamp != nil {
		l = m.UpDownTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConnectionFlapCount != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionFlapCount))
	}
	if m.AdvertisedPrefixCount != 0 {
		n += 1 + sovTypes(uint64(m.AdvertisedPrefixCount))
	}
	if m.ReceivedPrefixCount != 0 {
		n += 1 + sovTypes(uint64(m.ReceivedPrefixCount))
	}
	l = len(m.InterfaceName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LocalAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BgpStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalRouterId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LocalAsn != 0 {
		n += 1 + sovTypes(uint64(m.LocalAsn))
	}
	if len(m.PeerStatusList) > 0 {
		for _, e := range m.PeerStatusList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BgpParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpParameters{`,
		`Asn:` + fmt.Sprintf("%v", this.Asn) + `,`,
		`BgpRouterIdType:` + fmt.Sprintf("%v", this.BgpRouterIdType) + `,`,
		`BgpRouterId:` + strings.Replace(fmt.Sprintf("%v", this.BgpRouterId), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`BgpRouterIdKey:` + fmt.Sprintf("%v", this.BgpRouterIdKey) + `,`,
		`RouterIdChoice:` + fmt.Sprintf("%v", this.RouterIdChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpParameters_LocalAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpParameters_LocalAddress{`,
		`LocalAddress:` + strings.Replace(fmt.Sprintf("%v", this.LocalAddress), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpParameters_FromSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpParameters_FromSite{`,
		`FromSite:` + strings.Replace(fmt.Sprintf("%v", this.FromSite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpParameters_IpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpParameters_IpAddress{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPeer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFamilies := "[]*PeerFamilyParameters{"
	for _, f := range this.Families {
		repeatedStringForFamilies += strings.Replace(f.String(), "PeerFamilyParameters", "PeerFamilyParameters", 1) + ","
	}
	repeatedStringForFamilies += "}"
	repeatedStringForInterfaceRefs := "[]*ObjectRefType{"
	for _, f := range this.InterfaceRefs {
		repeatedStringForInterfaceRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForInterfaceRefs += "}"
	s := strings.Join([]string{`&BgpPeer{`,
		`Asn:` + fmt.Sprintf("%v", this.Asn) + `,`,
		`BgpPeerAddressType:` + fmt.Sprintf("%v", this.BgpPeerAddressType) + `,`,
		`BgpPeerAddress:` + strings.Replace(fmt.Sprintf("%v", this.BgpPeerAddress), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`BgpPeerAddressKey:` + fmt.Sprintf("%v", this.BgpPeerAddressKey) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`BgpPeerSubnetOffset:` + fmt.Sprintf("%v", this.BgpPeerSubnetOffset) + `,`,
		`Families:` + repeatedStringForFamilies + `,`,
		`InterfaceRefs:` + repeatedStringForInterfaceRefs + `,`,
		`AllInsideInterfaces:` + fmt.Sprintf("%v", this.AllInsideInterfaces) + `,`,
		`AllOutsideInterfaces:` + fmt.Sprintf("%v", this.AllOutsideInterfaces) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaces := "[]*ObjectRefType{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&InterfaceList{`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInet{`,
		`EnableChoice:` + fmt.Sprintf("%v", this.EnableChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInet_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInet_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInet_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInet_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInetvpnParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInetvpnParameters{`,
		`SrChoice:` + fmt.Sprintf("%v", this.SrChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInetvpnParameters_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInetvpnParameters_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInetvpnParameters_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInetvpnParameters_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInetvpn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInetvpn{`,
		`EnableChoice:` + fmt.Sprintf("%v", this.EnableChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInetvpn_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInetvpn_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "FamilyInetvpnParameters", "FamilyInetvpnParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInetvpn_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInetvpn_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInet6Vpn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInet6Vpn{`,
		`EnableChoice:` + fmt.Sprintf("%v", this.EnableChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInet6Vpn_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInet6Vpn_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyInet6Vpn_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyInet6Vpn_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyRtarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyRtarget{`,
		`EnableChoice:` + fmt.Sprintf("%v", this.EnableChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyRtarget_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyRtarget_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FamilyRtarget_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FamilyRtarget_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerFamilyParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerFamilyParameters{`,
		`Family:` + fmt.Sprintf("%v", this.Family) + `,`,
		`EnableSrv6:` + fmt.Sprintf("%v", this.EnableSrv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal{`,
		`Asn:` + fmt.Sprintf("%v", this.Asn) + `,`,
		`AddressChoice:` + fmt.Sprintf("%v", this.AddressChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`FamilyInet:` + strings.Replace(this.FamilyInet.String(), "FamilyInet", "FamilyInet", 1) + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_Address{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_SubnetBeginOffset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_SubnetBeginOffset{`,
		`SubnetBeginOffset:` + fmt.Sprintf("%v", this.SubnetBeginOffset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_SubnetEndOffset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_SubnetEndOffset{`,
		`SubnetEndOffset:` + fmt.Sprintf("%v", this.SubnetEndOffset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_FromSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_FromSite{`,
		`FromSite:` + strings.Replace(fmt.Sprintf("%v", this.FromSite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_DefaultGateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_DefaultGateway{`,
		`DefaultGateway:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGateway), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_Interface{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_InterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_InterfaceList{`,
		`InterfaceList:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceList), "InterfaceList", "InterfaceList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_InsideInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_InsideInterfaces{`,
		`InsideInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.InsideInterfaces), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerExternal_OutsideInterfaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerExternal_OutsideInterfaces{`,
		`OutsideInterfaces:` + strings.Replace(fmt.Sprintf("%v", this.OutsideInterfaces), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerInternal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerInternal{`,
		`AddressChoice:` + fmt.Sprintf("%v", this.AddressChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`FamilyInetvpn:` + strings.Replace(this.FamilyInetvpn.String(), "FamilyInetvpn", "FamilyInetvpn", 1) + `,`,
		`FamilyRtarget:` + strings.Replace(this.FamilyRtarget.String(), "FamilyRtarget", "FamilyRtarget", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`FamilyInet6Vpn:` + strings.Replace(fmt.Sprintf("%v", this.FamilyInet6Vpn), "FamilyInet6Vpn", "FamilyInet6Vpn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerInternal_Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerInternal_Address{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerInternal_FromSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerInternal_FromSite{`,
		`FromSite:` + strings.Replace(fmt.Sprintf("%v", this.FromSite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerInternal_DnsName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerInternal_DnsName{`,
		`DnsName:` + fmt.Sprintf("%v", this.DnsName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerInternal_DisableMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerInternal_DisableMtls{`,
		`DisableMtls:` + strings.Replace(fmt.Sprintf("%v", this.DisableMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerInternal_EnableMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerInternal_EnableMtls{`,
		`EnableMtls:` + strings.Replace(fmt.Sprintf("%v", this.EnableMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Peer{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`TypeChoice:` + fmt.Sprintf("%v", this.TypeChoice) + `,`,
		`TargetService:` + fmt.Sprintf("%v", this.TargetService) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Peer_External) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Peer_External{`,
		`External:` + strings.Replace(fmt.Sprintf("%v", this.External), "PeerExternal", "PeerExternal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Peer_Internal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Peer_Internal{`,
		`Internal:` + strings.Replace(fmt.Sprintf("%v", this.Internal), "PeerInternal", "PeerInternal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBgpPeers := "[]*BgpPeer{"
	for _, f := range this.BgpPeers {
		repeatedStringForBgpPeers += strings.Replace(f.String(), "BgpPeer", "BgpPeer", 1) + ","
	}
	repeatedStringForBgpPeers += "}"
	repeatedStringForNetworkInterface := "[]*ObjectRefType{"
	for _, f := range this.NetworkInterface {
		repeatedStringForNetworkInterface += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkInterface += "}"
	repeatedStringForPeers := "[]*Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(f.String(), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Where:` + strings.Replace(fmt.Sprintf("%v", this.Where), "SiteVirtualSiteRefSelector", "schema.SiteVirtualSiteRefSelector", 1) + `,`,
		`BgpParameters:` + strings.Replace(this.BgpParameters.String(), "BgpParameters", "BgpParameters", 1) + `,`,
		`BgpPeers:` + repeatedStringForBgpPeers + `,`,
		`NetworkInterface:` + repeatedStringForNetworkInterface + `,`,
		`Peers:` + repeatedStringForPeers + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ViewVersion:` + fmt.Sprintf("%v", this.ViewVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(f.String(), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Where:` + strings.Replace(fmt.Sprintf("%v", this.Where), "SiteVirtualSiteRefSelector", "schema.SiteVirtualSiteRefSelector", 1) + `,`,
		`BgpParameters:` + strings.Replace(this.BgpParameters.String(), "BgpParameters", "BgpParameters", 1) + `,`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(f.String(), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Where:` + strings.Replace(fmt.Sprintf("%v", this.Where), "SiteVirtualSiteRefSelector", "schema.SiteVirtualSiteRefSelector", 1) + `,`,
		`BgpParameters:` + strings.Replace(this.BgpParameters.String(), "BgpParameters", "BgpParameters", 1) + `,`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(f.String(), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Where:` + strings.Replace(fmt.Sprintf("%v", this.Where), "SiteVirtualSiteRefSelector", "schema.SiteVirtualSiteRefSelector", 1) + `,`,
		`BgpParameters:` + strings.Replace(this.BgpParameters.String(), "BgpParameters", "BgpParameters", 1) + `,`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPeerStatusType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpPeerStatusType{`,
		`UpDown:` + fmt.Sprintf("%v", this.UpDown) + `,`,
		`PeerAddress:` + strings.Replace(fmt.Sprintf("%v", this.PeerAddress), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`PeerPort:` + fmt.Sprintf("%v", this.PeerPort) + `,`,
		`PeerRouterId:` + fmt.Sprintf("%v", this.PeerRouterId) + `,`,
		`PeerAsn:` + fmt.Sprintf("%v", this.PeerAsn) + `,`,
		`UpDownTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UpDownTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`ConnectionFlapCount:` + fmt.Sprintf("%v", this.ConnectionFlapCount) + `,`,
		`AdvertisedPrefixCount:` + fmt.Sprintf("%v", this.AdvertisedPrefixCount) + `,`,
		`ReceivedPrefixCount:` + fmt.Sprintf("%v", this.ReceivedPrefixCount) + `,`,
		`InterfaceName:` + fmt.Sprintf("%v", this.InterfaceName) + `,`,
		`LocalAddress:` + fmt.Sprintf("%v", this.LocalAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpStatusType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeerStatusList := "[]*BgpPeerStatusType{"
	for _, f := range this.PeerStatusList {
		repeatedStringForPeerStatusList += strings.Replace(f.String(), "BgpPeerStatusType", "BgpPeerStatusType", 1) + ","
	}
	repeatedStringForPeerStatusList += "}"
	s := strings.Join([]string{`&BgpStatusType{`,
		`LocalRouterId:` + fmt.Sprintf("%v", this.LocalRouterId) + `,`,
		`LocalAsn:` + fmt.Sprintf("%v", this.LocalAsn) + `,`,
		`PeerStatusList:` + repeatedStringForPeerStatusList + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BgpParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			m.Asn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpRouterIdType", wireType)
			}
			m.BgpRouterIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgpRouterIdType |= BgpRouterIdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpRouterId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgpRouterId == nil {
				m.BgpRouterId = &schema.IpAddressType{}
			}
			if err := m.BgpRouterId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpRouterIdKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpRouterIdKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouterIdChoice = &BgpParameters_LocalAddress{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouterIdChoice = &BgpParameters_FromSite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterIdChoice = &BgpParameters_IpAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			m.Asn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddressType", wireType)
			}
			m.BgpPeerAddressType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgpPeerAddressType |= BgpPeerAddressType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgpPeerAddress == nil {
				m.BgpPeerAddress = &schema.IpAddressType{}
			}
			if err := m.BgpPeerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddressKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpPeerAddressKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerSubnetOffset", wireType)
			}
			m.BgpPeerSubnetOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgpPeerSubnetOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Families", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Families = append(m.Families, &PeerFamilyParameters{})
			if err := m.Families[len(m.Families)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceRefs = append(m.InterfaceRefs, &schema.ObjectRefType{})
			if err := m.InterfaceRefs[len(m.InterfaceRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllInsideInterfaces", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllInsideInterfaces = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllOutsideInterfaces", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllOutsideInterfaces = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &views.ObjectRefType{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FamilyInet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FamilyInet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FamilyInet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyInet_Enable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyInet_Disable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FamilyInetvpnParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FamilyInetvpnParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FamilyInetvpnParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SrChoice = &FamilyInetvpnParameters_Enable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SrChoice = &FamilyInetvpnParameters_Disable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FamilyInetvpn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FamilyInetvpn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FamilyInetvpn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FamilyInetvpnParameters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyInetvpn_Enable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyInetvpn_Disable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FamilyInet6Vpn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FamilyInet6vpn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FamilyInet6vpn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyInet6Vpn_Enable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyInet6Vpn_Disable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FamilyRtarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FamilyRtarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FamilyRtarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyRtarget_Enable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableChoice = &FamilyRtarget_Disable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerFamilyParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerFamilyParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerFamilyParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSrv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSrv6 = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			m.Asn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressChoice = &PeerExternal_Address{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetBeginOffset", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddressChoice = &PeerExternal_SubnetBeginOffset{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetEndOffset", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddressChoice = &PeerExternal_SubnetEndOffset{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &PeerExternal_FromSite{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &PeerExternal_DefaultGateway{v}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyInet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FamilyInet == nil {
				m.FamilyInet = &FamilyInet{}
			}
			if err := m.FamilyInet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &PeerExternal_Interface{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfaceList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &PeerExternal_InterfaceList{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &PeerExternal_InsideInterfaces{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &PeerExternal_OutsideInterfaces{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressChoice = &PeerInternal_Address{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &PeerInternal_FromSite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressChoice = &PeerInternal_DnsName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyInetvpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FamilyInetvpn == nil {
				m.FamilyInetvpn = &FamilyInetvpn{}
			}
			if err := m.FamilyInetvpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyRtarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FamilyRtarget == nil {
				m.FamilyRtarget = &FamilyRtarget{}
			}
			if err := m.FamilyRtarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &PeerInternal_DisableMtls{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &PeerInternal_EnableMtls{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyInet6Vpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FamilyInet6Vpn == nil {
				m.FamilyInet6Vpn = &FamilyInet6Vpn{}
			}
			if err := m.FamilyInet6Vpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field External", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeerExternal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeChoice = &Peer_External{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeerInternal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeChoice = &Peer_Internal{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Where == nil {
				m.Where = &schema.SiteVirtualSiteRefSelector{}
			}
			if err := m.Where.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgpParameters == nil {
				m.BgpParameters = &BgpParameters{}
			}
			if err := m.BgpParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpPeers = append(m.BgpPeers, &BgpPeer{})
			if err := m.BgpPeers[len(m.BgpPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterface = append(m.NetworkInterface, &schema.ObjectRefType{})
			if err := m.NetworkInterface[len(m.NetworkInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewVersion", wireType)
			}
			m.ViewVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Where == nil {
				m.Where = &schema.SiteVirtualSiteRefSelector{}
			}
			if err := m.Where.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgpParameters == nil {
				m.BgpParameters = &BgpParameters{}
			}
			if err := m.BgpParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Where == nil {
				m.Where = &schema.SiteVirtualSiteRefSelector{}
			}
			if err := m.Where.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgpParameters == nil {
				m.BgpParameters = &BgpParameters{}
			}
			if err := m.BgpParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Where == nil {
				m.Where = &schema.SiteVirtualSiteRefSelector{}
			}
			if err := m.Where.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgpParameters == nil {
				m.BgpParameters = &BgpParameters{}
			}
			if err := m.BgpParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpPeerStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpPeerStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpPeerStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpDown", wireType)
			}
			m.UpDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpDown |= BgpPeerUpDownType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerAddress == nil {
				m.PeerAddress = &schema.IpAddressType{}
			}
			if err := m.PeerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerPort", wireType)
			}
			m.PeerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerRouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerRouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerAsn", wireType)
			}
			m.PeerAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpDownTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpDownTimestamp == nil {
				m.UpDownTimestamp = &types.Timestamp{}
			}
			if err := m.UpDownTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionFlapCount", wireType)
			}
			m.ConnectionFlapCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionFlapCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisedPrefixCount", wireType)
			}
			m.AdvertisedPrefixCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdvertisedPrefixCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedPrefixCount", wireType)
			}
			m.ReceivedPrefixCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedPrefixCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalRouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAsn", wireType)
			}
			m.LocalAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerStatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerStatusList = append(m.PeerStatusList, &BgpPeerStatusType{})
			if err := m.PeerStatusList[len(m.PeerStatusList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_healthcheck

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.http_health_check")
	}

	if err := m.GetHttpsHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.https_health_check")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) IntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interval")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *CreateSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interval"]; exists {

		vOpts := append(opts, db.WithValidateField("interval"))
		if err := fv(ctx, m.GetInterval(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	vrhInterval := v.IntervalValidationRuleHandler
	rulesInterval := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhInterval(rulesInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interval"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpsHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.http_health_check")
	}

	if err := m.GetHttpsHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.https_health_check")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) IntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interval")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *GetSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interval"]; exists {

		vOpts := append(opts, db.WithValidateField("interval"))
		if err := fv(ctx, m.GetInterval(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	vrhInterval := v.IntervalValidationRuleHandler
	rulesInterval := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhInterval(rulesInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interval"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpsHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpsHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.https_health_check")
	}

	if err := m.GetHttpHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.http_health_check")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interval")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *GlobalSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interval"]; exists {

		vOpts := append(opts, db.WithValidateField("interval"))
		if err := fv(ctx, m.GetInterval(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	vrhInterval := v.IntervalValidationRuleHandler
	rulesInterval := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhInterval(rulesInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interval"] = vFn

	v.FldValidators["health_check.https_health_check"] = HttpsHealthCheckValidator().Validate
	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Header) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Header) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Header) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *Header) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *Header) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	m.Password = nil

	return nil
}

func (m *Header) DeepCopy() *Header {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Header{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Header) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Header) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HeaderValidator().Validate(ctx, m, opts...)
}

type ValidateHeader struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHeader) HostHeaderChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_header_choice")
	}
	return validatorFn, nil
}

func (v *ValidateHeader) HostHeaderChoiceHostHeaderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostHeader, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_header")
	}
	return oValidatorFn_HostHeader, nil
}

func (v *ValidateHeader) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path")
	}

	return validatorFn, nil
}

func (v *ValidateHeader) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for headers")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHeader) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHeader) ExpectedStatusCodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for expected_status_codes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for expected_status_codes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated expected_status_codes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items expected_status_codes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHeader) UserNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_name")
	}

	return validatorFn, nil
}

func (v *ValidateHeader) PasswordValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for password")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHeader) SendPayloadValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for send_payload")
	}

	return validatorFn, nil
}

func (v *ValidateHeader) ExpectedResponseValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expected_response")
	}

	return validatorFn, nil
}

func (v *ValidateHeader) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Header)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Header got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expected_response"]; exists {

		vOpts := append(opts, db.WithValidateField("expected_response"))
		if err := fv(ctx, m.GetExpectedResponse(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expected_status_codes"]; exists {
		vOpts := append(opts, db.WithValidateField("expected_status_codes"))
		if err := fv(ctx, m.GetExpectedStatusCodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["host_header_choice"]; exists {
		val := m.GetHostHeaderChoice()
		vOpts := append(opts,
			db.WithValidateField("host_header_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostHeaderChoice().(type) {
	case *Header_HostHeader:
		if fv, exists := v.FldValidators["host_header_choice.host_header"]; exists {
			val := m.GetHostHeaderChoice().(*Header_HostHeader).HostHeader
			vOpts := append(opts,
				db.WithValidateField("host_header_choice"),
				db.WithValidateField("host_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Header_UseOriginServerName:
		if fv, exists := v.FldValidators["host_header_choice.use_origin_server_name"]; exists {
			val := m.GetHostHeaderChoice().(*Header_UseOriginServerName).UseOriginServerName
			vOpts := append(opts,
				db.WithValidateField("host_header_choice"),
				db.WithValidateField("use_origin_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["password"]; exists {

		vOpts := append(opts, db.WithValidateField("password"))
		if err := fv(ctx, m.GetPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["send_payload"]; exists {

		vOpts := append(opts, db.WithValidateField("send_payload"))
		if err := fv(ctx, m.GetSendPayload(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_name"]; exists {

		vOpts := append(opts, db.WithValidateField("user_name"))
		if err := fv(ctx, m.GetUserName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHeaderValidator = func() *ValidateHeader {
	v := &ValidateHeader{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostHeaderChoice := v.HostHeaderChoiceValidationRuleHandler
	rulesHostHeaderChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostHeaderChoice(rulesHostHeaderChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.host_header_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_header_choice"] = vFn

	vrhHostHeaderChoiceHostHeader := v.HostHeaderChoiceHostHeaderValidationRuleHandler
	rulesHostHeaderChoiceHostHeader := map[string]string{
		"ves.io.schema.rules.string.hostport": "true",
		"ves.io.schema.rules.string.max_len":  "262",
	}
	vFnMap["host_header_choice.host_header"], err = vrhHostHeaderChoiceHostHeader(rulesHostHeaderChoiceHostHeader)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Header.host_header_choice_host_header: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_header_choice.host_header"] = vFnMap["host_header_choice.host_header"]

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "2048",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "256",
		"ves.io.schema.rules.map.keys.string.min_len":   "1",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "2048",
		"ves.io.schema.rules.map.values.string.min_len": "1",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len": "256",
		"ves.io.schema.rules.repeated.max_items":            "16",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhExpectedStatusCodes := v.ExpectedStatusCodesValidationRuleHandler
	rulesExpectedStatusCodes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.http_status_range": "true",
		"ves.io.schema.rules.repeated.items.string.max_len":           "10",
		"ves.io.schema.rules.repeated.items.string.min_len":           "3",
		"ves.io.schema.rules.repeated.max_items":                      "16",
		"ves.io.schema.rules.repeated.unique":                         "true",
	}
	vFn, err = vrhExpectedStatusCodes(rulesExpectedStatusCodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.expected_status_codes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expected_status_codes"] = vFn

	vrhUserName := v.UserNameValidationRuleHandler
	rulesUserName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUserName(rulesUserName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.user_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_name"] = vFn

	vrhPassword := v.PasswordValidationRuleHandler
	rulesPassword := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPassword(rulesPassword)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.password: %s", err)
		panic(errMsg)
	}
	v.FldValidators["password"] = vFn

	vrhSendPayload := v.SendPayloadValidationRuleHandler
	rulesSendPayload := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "2048",
	}
	vFn, err = vrhSendPayload(rulesSendPayload)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.send_payload: %s", err)
		panic(errMsg)
	}
	v.FldValidators["send_payload"] = vFn

	vrhExpectedResponse := v.ExpectedResponseValidationRuleHandler
	rulesExpectedResponse := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "2048",
		"ves.io.schema.rules.string.regex":     "true",
	}
	vFn, err = vrhExpectedResponse(rulesExpectedResponse)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Header.expected_response: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expected_response"] = vFn

	return v
}()

func HeaderValidator() db.Validator {
	return DefaultHeaderValidator
}

// augmented methods on protoc/std generated struct

func (m *HttpHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HttpHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HttpHealthCheck) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHostHeader().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HttpHealthCheck.host_header")
	}

	return nil
}

func (m *HttpHealthCheck) DeepCopy() *HttpHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HttpHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HttpHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HttpHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HttpHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateHttpHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHttpHealthCheck) HostHeaderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for host_header")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := HeaderValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHttpHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HttpHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HttpHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["host_header"]; exists {

		vOpts := append(opts, db.WithValidateField("host_header"))
		if err := fv(ctx, m.GetHostHeader(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHttpHealthCheckValidator = func() *ValidateHttpHealthCheck {
	v := &ValidateHttpHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostHeader := v.HostHeaderValidationRuleHandler
	rulesHostHeader := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHostHeader(rulesHostHeader)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpHealthCheck.host_header: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_header"] = vFn

	return v
}()

func HttpHealthCheckValidator() db.Validator {
	return DefaultHttpHealthCheckValidator
}

// augmented methods on protoc/std generated struct

func (m *HttpsHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HttpsHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HttpsHealthCheck) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHostHeader().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HttpsHealthCheck.host_header")
	}

	return nil
}

func (m *HttpsHealthCheck) DeepCopy() *HttpsHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HttpsHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HttpsHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HttpsHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HttpsHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateHttpsHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHttpsHealthCheck) HostHeaderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for host_header")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := HeaderValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHttpsHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HttpsHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HttpsHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["host_header"]; exists {

		vOpts := append(opts, db.WithValidateField("host_header"))
		if err := fv(ctx, m.GetHostHeader(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHttpsHealthCheckValidator = func() *ValidateHttpsHealthCheck {
	v := &ValidateHttpsHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostHeader := v.HostHeaderValidationRuleHandler
	rulesHostHeader := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHostHeader(rulesHostHeader)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpsHealthCheck.host_header: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_header"] = vFn

	return v
}()

func HttpsHealthCheckValidator() db.Validator {
	return DefaultHttpsHealthCheckValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.http_health_check")
	}

	if err := m.GetHttpsHealthCheck().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.https_health_check")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) IntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interval")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *ReplaceSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interval"]; exists {

		vOpts := append(opts, db.WithValidateField("interval"))
		if err := fv(ctx, m.GetInterval(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	vrhInterval := v.IntervalValidationRuleHandler
	rulesInterval := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "600",
	}
	vFn, err = vrhInterval(rulesInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interval"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpsHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TcpHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TcpHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TcpHealthCheck) DeepCopy() *TcpHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TcpHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TcpHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TcpHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TcpHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateTcpHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTcpHealthCheck) SendPayloadValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for send_payload")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHealthCheck) ExpectedResponseValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expected_response")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TcpHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TcpHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expected_response"]; exists {

		vOpts := append(opts, db.WithValidateField("expected_response"))
		if err := fv(ctx, m.GetExpectedResponse(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["send_payload"]; exists {

		vOpts := append(opts, db.WithValidateField("send_payload"))
		if err := fv(ctx, m.GetSendPayload(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTcpHealthCheckValidator = func() *ValidateTcpHealthCheck {
	v := &ValidateTcpHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSendPayload := v.SendPayloadValidationRuleHandler
	rulesSendPayload := map[string]string{
		"ves.io.schema.rules.string.max_len": "2048",
	}
	vFn, err = vrhSendPayload(rulesSendPayload)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHealthCheck.send_payload: %s", err)
		panic(errMsg)
	}
	v.FldValidators["send_payload"] = vFn

	vrhExpectedResponse := v.ExpectedResponseValidationRuleHandler
	rulesExpectedResponse := map[string]string{
		"ves.io.schema.rules.string.max_len": "2048",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFn, err = vrhExpectedResponse(rulesExpectedResponse)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHealthCheck.expected_response: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expected_response"] = vFn

	return v
}()

func TcpHealthCheckValidator() db.Validator {
	return DefaultTcpHealthCheckValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHealthCheckToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HealthCheck.(type) {
	case nil:
		o.HealthCheck = nil

	case *CreateSpecType_HttpHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *CreateSpecType_HttpsHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *CreateSpecType_IcmpHealthCheck:
		o.HealthCheck = &GlobalSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *CreateSpecType_TcpHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHealthCheckFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HealthCheck.(type) {
	case nil:
		r.HealthCheck = nil

	case *GlobalSpecType_HttpHealthCheck:
		r.HealthCheck = &CreateSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GlobalSpecType_HttpsHealthCheck:
		r.HealthCheck = &CreateSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GlobalSpecType_IcmpHealthCheck:
		r.HealthCheck = &CreateSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GlobalSpecType_TcpHealthCheck:
		r.HealthCheck = &CreateSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHealthCheckFromGlobalSpecType(f)
	m.Interval = f.GetInterval()
	m.Timeout = f.GetTimeout()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHealthCheckToGlobalSpecType(f)
	f.Interval = m1.Interval
	f.Timeout = m1.Timeout
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHealthCheckToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HealthCheck.(type) {
	case nil:
		o.HealthCheck = nil

	case *GetSpecType_HttpHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GetSpecType_HttpsHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GetSpecType_IcmpHealthCheck:
		o.HealthCheck = &GlobalSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GetSpecType_TcpHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHealthCheckFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HealthCheck.(type) {
	case nil:
		r.HealthCheck = nil

	case *GlobalSpecType_HttpHealthCheck:
		r.HealthCheck = &GetSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GlobalSpecType_HttpsHealthCheck:
		r.HealthCheck = &GetSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GlobalSpecType_IcmpHealthCheck:
		r.HealthCheck = &GetSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GlobalSpecType_TcpHealthCheck:
		r.HealthCheck = &GetSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHealthCheckFromGlobalSpecType(f)
	m.Interval = f.GetInterval()
	m.Timeout = f.GetTimeout()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHealthCheckToGlobalSpecType(f)
	f.Interval = m1.Interval
	f.Timeout = m1.Timeout
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHealthCheckToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HealthCheck.(type) {
	case nil:
		o.HealthCheck = nil

	case *ReplaceSpecType_HttpHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *ReplaceSpecType_HttpsHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *ReplaceSpecType_IcmpHealthCheck:
		o.HealthCheck = &GlobalSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *ReplaceSpecType_TcpHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHealthCheckFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HealthCheck.(type) {
	case nil:
		r.HealthCheck = nil

	case *GlobalSpecType_HttpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GlobalSpecType_HttpsHealthCheck:
		r.HealthCheck = &ReplaceSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GlobalSpecType_IcmpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GlobalSpecType_TcpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHealthCheckFromGlobalSpecType(f)
	m.Interval = f.GetInterval()
	m.Timeout = f.GetTimeout()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHealthCheckToGlobalSpecType(f)
	f.Interval = m1.Interval
	f.Timeout = m1.Timeout
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

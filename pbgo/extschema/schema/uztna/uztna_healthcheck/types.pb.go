// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_healthcheck/types.proto

package uztna_healthcheck

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Host Header
//
// x-displayName: "Host Header"
//
// Specify the value of host header in HTTPS/HTTP health check request
type Header struct {
	// host header choice
	//
	// x-displayName: "Specify Host Header"
	// x-required
	// Specify the value of host header in the HTTPS/HTTP health check request.
	//
	// Types that are valid to be assigned to HostHeaderChoice:
	//	*Header_UseOriginServerName
	//	*Header_HostHeader
	HostHeaderChoice isHeader_HostHeaderChoice `protobuf_oneof:"host_header_choice"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/healthcheck"
	// Specifies the HTTPS path that will be requested during health checking.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Headers to add in health check request
	//
	// x-displayName: "Request Headers to Add"
	// x-example: "value"
	// Specifies a list of HTTP headers that should be added to each request that is sent to the
	// health checked cluster. This is a list of key-value pairs.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Headers to be removed from health check request
	//
	// x-displayName: "Request Headers to Remove"
	// x-example: "user-agent"
	// Specifies a list of HTTP headers that should be removed from each request that is sent to the
	// health checked cluster. This is a list of keys of headers.
	RequestHeadersToRemove []string `protobuf:"bytes,4,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Expected Status Codes
	//
	// x-displayName: "Expected Status Codes"
	// x-example: "200-250"
	// Specifies a list of HTTP response status codes considered healthy. To treat default HTTP expected
	// status code 200 as healthy, user has to configure it explicitly. This is a list of strings, each
	// of which is single HTTP status code or a range with start and end values separated by "-".
	ExpectedStatusCodes []string `protobuf:"bytes,8,rep,name=expected_status_codes,json=expectedStatusCodes,proto3" json:"expected_status_codes,omitempty"`
	// UserName
	//
	// x-required
	// x-displayName: "User Name"
	// User Name
	UserName string `protobuf:"bytes,10,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Password
	//
	// x-required
	// x-displayName: "Password"
	// x-example: "value"
	Password *schema.SecretType `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	// Send String
	//
	// x-required
	// x-displayName: "Send String"
	// x-example: "HEAD / HTTP/1.0"
	// HTTP payload to send to the target
	SendPayload string `protobuf:"bytes,12,opt,name=send_payload,json=sendPayload,proto3" json:"send_payload,omitempty"`
	// Receive String
	//
	// x-required
	// x-displayName: "Receive String"
	// x-example: "HTTP/1"
	// Regular expression used to match against the response to the health check's request. Mark node up upon receipt of a successful regular expression match. Uses re2 regular expression syntax.
	ExpectedResponse string `protobuf:"bytes,13,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *Header) Reset()      { *m = Header{} }
func (*Header) ProtoMessage() {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

type isHeader_HostHeaderChoice interface {
	isHeader_HostHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Header_UseOriginServerName struct {
	UseOriginServerName *schema.Empty `protobuf:"bytes,7,opt,name=use_origin_server_name,json=useOriginServerName,proto3,oneof" json:"use_origin_server_name,omitempty"`
}
type Header_HostHeader struct {
	HostHeader string `protobuf:"bytes,1,opt,name=host_header,json=hostHeader,proto3,oneof" json:"host_header,omitempty"`
}

func (*Header_UseOriginServerName) isHeader_HostHeaderChoice() {}
func (*Header_HostHeader) isHeader_HostHeaderChoice()          {}

func (m *Header) GetHostHeaderChoice() isHeader_HostHeaderChoice {
	if m != nil {
		return m.HostHeaderChoice
	}
	return nil
}

func (m *Header) GetUseOriginServerName() *schema.Empty {
	if x, ok := m.GetHostHeaderChoice().(*Header_UseOriginServerName); ok {
		return x.UseOriginServerName
	}
	return nil
}

func (m *Header) GetHostHeader() string {
	if x, ok := m.GetHostHeaderChoice().(*Header_HostHeader); ok {
		return x.HostHeader
	}
	return ""
}

func (m *Header) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Header) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Header) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *Header) GetExpectedStatusCodes() []string {
	if m != nil {
		return m.ExpectedStatusCodes
	}
	return nil
}

func (m *Header) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Header) GetPassword() *schema.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *Header) GetSendPayload() string {
	if m != nil {
		return m.SendPayload
	}
	return ""
}

func (m *Header) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Header) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Header_UseOriginServerName)(nil),
		(*Header_HostHeader)(nil),
	}
}

// HttpsHealthCheck
//
// x-displayName: "HTTPS Health Check"
// Healthy if "get" method on URL "https://<host>/<path>" with optional "<header>" returns success.
// "host" is not used for DNS resolution. It is used as HTTPS Header in the request.
type HttpsHealthCheck struct {
	// Host Header
	//
	// x-required
	// x-displayName: "Host Header"
	// Host Header for HTTPS Header
	HostHeader *Header `protobuf:"bytes,1,opt,name=host_header,json=hostHeader,proto3" json:"host_header,omitempty"`
}

func (m *HttpsHealthCheck) Reset()      { *m = HttpsHealthCheck{} }
func (*HttpsHealthCheck) ProtoMessage() {}
func (*HttpsHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{1}
}
func (m *HttpsHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpsHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpsHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpsHealthCheck.Merge(m, src)
}
func (m *HttpsHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *HttpsHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpsHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HttpsHealthCheck proto.InternalMessageInfo

func (m *HttpsHealthCheck) GetHostHeader() *Header {
	if m != nil {
		return m.HostHeader
	}
	return nil
}

// HttpHealthCheck
//
// x-displayName: "HTTP Health Check"
// Healthy if "get" method on URL "http://<host>/<path>" with optional "<header>" returns success.
// "host" is not used for DNS resolution. It is used as HTTP Header in the request.
type HttpHealthCheck struct {
	// Host Header
	//
	// x-required
	// x-displayName: "Host Header"
	// Host Header
	HostHeader *Header `protobuf:"bytes,1,opt,name=host_header,json=hostHeader,proto3" json:"host_header,omitempty"`
}

func (m *HttpHealthCheck) Reset()      { *m = HttpHealthCheck{} }
func (*HttpHealthCheck) ProtoMessage() {}
func (*HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{2}
}
func (m *HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHealthCheck.Merge(m, src)
}
func (m *HttpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHealthCheck proto.InternalMessageInfo

func (m *HttpHealthCheck) GetHostHeader() *Header {
	if m != nil {
		return m.HostHeader
	}
	return nil
}

// TcpHealthCheck
//
// x-displayName: "TCP Health Check"
// Monitor reports healthy status if TCP connection is successful and response payload matches expected response pattern
type TcpHealthCheck struct {
	// send string
	//
	// x-displayName: "Send payload"
	// x-example: ""
	// Text string sent in the request
	SendPayload string `protobuf:"bytes,1,opt,name=send_payload,json=sendPayload,proto3" json:"send_payload,omitempty"`
	// received response
	//
	// x-displayName: "Receive Response"
	// x-example: ".*"
	// Specifies a regular expression pattern which will be matched against response payload
	ExpectedResponse string `protobuf:"bytes,2,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *TcpHealthCheck) Reset()      { *m = TcpHealthCheck{} }
func (*TcpHealthCheck) ProtoMessage() {}
func (*TcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{3}
}
func (m *TcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpHealthCheck.Merge(m, src)
}
func (m *TcpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *TcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_TcpHealthCheck proto.InternalMessageInfo

func (m *TcpHealthCheck) GetSendPayload() string {
	if m != nil {
		return m.SendPayload
	}
	return ""
}

func (m *TcpHealthCheck) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for HealthCheck
type GlobalSpecType struct {
	// health_check
	//
	// x-required
	// x-displayName: "Health Check"
	// Specifies whether to perform HTTP Health Check or TCP Health check
	//
	// Types that are valid to be assigned to HealthCheck:
	//	*GlobalSpecType_HttpsHealthCheck
	//	*GlobalSpecType_HttpHealthCheck
	//	*GlobalSpecType_TcpHealthCheck
	//	*GlobalSpecType_IcmpHealthCheck
	HealthCheck isGlobalSpecType_HealthCheck `protobuf_oneof:"health_check"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-required
	// x-example: "1"
	// Timeout in seconds to wait for successful response. In other words, it is
	// the time to wait for a health check response. If the timeout is reached the
	// health check attempt will be considered a failure.
	Timeout uint32 `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// interval
	//
	// x-displayName: "Interval"
	// x-required
	// x-example: "10"
	// Time interval in seconds between two healthcheck requests.
	Interval uint32 `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_HealthCheck interface {
	isGlobalSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpsHealthCheck `protobuf:"bytes,1,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}
type GlobalSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,2,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type GlobalSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,3,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type GlobalSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,5,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}

func (*GlobalSpecType_HttpsHealthCheck) isGlobalSpecType_HealthCheck() {}
func (*GlobalSpecType_HttpHealthCheck) isGlobalSpecType_HealthCheck()  {}
func (*GlobalSpecType_TcpHealthCheck) isGlobalSpecType_HealthCheck()   {}
func (*GlobalSpecType_IcmpHealthCheck) isGlobalSpecType_HealthCheck()  {}

func (m *GlobalSpecType) GetHealthCheck() isGlobalSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsHealthCheck() *HttpsHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GlobalSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_HttpsHealthCheck)(nil),
		(*GlobalSpecType_HttpHealthCheck)(nil),
		(*GlobalSpecType_TcpHealthCheck)(nil),
		(*GlobalSpecType_IcmpHealthCheck)(nil),
	}
}

// Create healthcheck
//
// x-displayName: "Create Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type CreateSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*CreateSpecType_HttpHealthCheck
	//	*CreateSpecType_HttpsHealthCheck
	//	*CreateSpecType_TcpHealthCheck
	//	*CreateSpecType_IcmpHealthCheck
	HealthCheck isCreateSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout     uint32                       `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval    uint32                       `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_HealthCheck interface {
	isCreateSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type CreateSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpsHealthCheck `protobuf:"bytes,2,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}
type CreateSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,3,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type CreateSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,5,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}

func (*CreateSpecType_HttpHealthCheck) isCreateSpecType_HealthCheck()  {}
func (*CreateSpecType_HttpsHealthCheck) isCreateSpecType_HealthCheck() {}
func (*CreateSpecType_TcpHealthCheck) isCreateSpecType_HealthCheck()   {}
func (*CreateSpecType_IcmpHealthCheck) isCreateSpecType_HealthCheck()  {}

func (m *CreateSpecType) GetHealthCheck() isCreateSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetHttpsHealthCheck() *HttpsHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CreateSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_HttpHealthCheck)(nil),
		(*CreateSpecType_HttpsHealthCheck)(nil),
		(*CreateSpecType_TcpHealthCheck)(nil),
		(*CreateSpecType_IcmpHealthCheck)(nil),
	}
}

// replace healthcheck
//
// x-displayName: "Replace Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*ReplaceSpecType_HttpHealthCheck
	//	*ReplaceSpecType_HttpsHealthCheck
	//	*ReplaceSpecType_TcpHealthCheck
	//	*ReplaceSpecType_IcmpHealthCheck
	HealthCheck isReplaceSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout     uint32                        `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval    uint32                        `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_HealthCheck interface {
	isReplaceSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type ReplaceSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpsHealthCheck `protobuf:"bytes,2,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}
type ReplaceSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,3,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type ReplaceSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,5,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}

func (*ReplaceSpecType_HttpHealthCheck) isReplaceSpecType_HealthCheck()  {}
func (*ReplaceSpecType_HttpsHealthCheck) isReplaceSpecType_HealthCheck() {}
func (*ReplaceSpecType_TcpHealthCheck) isReplaceSpecType_HealthCheck()   {}
func (*ReplaceSpecType_IcmpHealthCheck) isReplaceSpecType_HealthCheck()  {}

func (m *ReplaceSpecType) GetHealthCheck() isReplaceSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsHealthCheck() *HttpsHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplaceSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_HttpHealthCheck)(nil),
		(*ReplaceSpecType_HttpsHealthCheck)(nil),
		(*ReplaceSpecType_TcpHealthCheck)(nil),
		(*ReplaceSpecType_IcmpHealthCheck)(nil),
	}
}

// Get healthcheck
//
// x-displayName: "Get Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type GetSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*GetSpecType_HttpHealthCheck
	//	*GetSpecType_HttpsHealthCheck
	//	*GetSpecType_TcpHealthCheck
	//	*GetSpecType_IcmpHealthCheck
	HealthCheck isGetSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout     uint32                    `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval    uint32                    `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21d09718e2ef8ac, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_HealthCheck interface {
	isGetSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type GetSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpsHealthCheck `protobuf:"bytes,2,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}
type GetSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,3,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type GetSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,5,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}

func (*GetSpecType_HttpHealthCheck) isGetSpecType_HealthCheck()  {}
func (*GetSpecType_HttpsHealthCheck) isGetSpecType_HealthCheck() {}
func (*GetSpecType_TcpHealthCheck) isGetSpecType_HealthCheck()   {}
func (*GetSpecType_IcmpHealthCheck) isGetSpecType_HealthCheck()  {}

func (m *GetSpecType) GetHealthCheck() isGetSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GetSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetHttpsHealthCheck() *HttpsHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*GetSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GetSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_HttpHealthCheck)(nil),
		(*GetSpecType_HttpsHealthCheck)(nil),
		(*GetSpecType_TcpHealthCheck)(nil),
		(*GetSpecType_IcmpHealthCheck)(nil),
	}
}

func init() {
	proto.RegisterType((*Header)(nil), "ves.io.schema.uztna.uztna_healthcheck.Header")
	golang_proto.RegisterType((*Header)(nil), "ves.io.schema.uztna.uztna_healthcheck.Header")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.uztna.uztna_healthcheck.Header.HeadersEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.uztna.uztna_healthcheck.Header.HeadersEntry")
	proto.RegisterType((*HttpsHealthCheck)(nil), "ves.io.schema.uztna.uztna_healthcheck.HttpsHealthCheck")
	golang_proto.RegisterType((*HttpsHealthCheck)(nil), "ves.io.schema.uztna.uztna_healthcheck.HttpsHealthCheck")
	proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.uztna.uztna_healthcheck.HttpHealthCheck")
	golang_proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.uztna.uztna_healthcheck.HttpHealthCheck")
	proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.uztna.uztna_healthcheck.TcpHealthCheck")
	golang_proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.uztna.uztna_healthcheck.TcpHealthCheck")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_healthcheck.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_healthcheck/types.proto", fileDescriptor_c21d09718e2ef8ac)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/uztna/uztna_healthcheck/types.proto", fileDescriptor_c21d09718e2ef8ac)
}

var fileDescriptor_c21d09718e2ef8ac = []byte{
	// 1421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6b, 0x1b, 0x47,
	0x14, 0xd6, 0xd3, 0xca, 0xfa, 0x31, 0x72, 0xec, 0xf5, 0xda, 0x49, 0xd6, 0x72, 0x58, 0x36, 0x4a,
	0x42, 0x4d, 0x90, 0x25, 0xcb, 0x8e, 0x13, 0x57, 0x85, 0x40, 0x65, 0x42, 0x4c, 0x02, 0x89, 0x59,
	0x9b, 0x52, 0xda, 0x82, 0x58, 0xaf, 0x26, 0xd2, 0xc6, 0x92, 0x76, 0x3b, 0x3b, 0x52, 0x22, 0x43,
	0xc1, 0xf4, 0x50, 0x8a, 0x0f, 0x25, 0xe4, 0xd6, 0xfc, 0x05, 0xfd, 0x03, 0x7a, 0xea, 0xfa, 0x60,
	0x02, 0x85, 0xd0, 0x93, 0x8f, 0x6e, 0x2e, 0x4d, 0x64, 0x0a, 0x69, 0x4e, 0xa1, 0x14, 0x1a, 0x7a,
	0x2a, 0x33, 0xbb, 0x52, 0x24, 0x45, 0xa4, 0x0e, 0x69, 0x4e, 0xc9, 0x25, 0x99, 0xd9, 0xf7, 0xe3,
	0x7b, 0xfb, 0xbe, 0xef, 0xbd, 0x45, 0x46, 0xd9, 0x06, 0x76, 0xd2, 0xa6, 0x95, 0x71, 0x8c, 0x32,
	0xae, 0xea, 0x99, 0xfa, 0x26, 0xad, 0xf9, 0xff, 0x16, 0xca, 0x58, 0xaf, 0xd0, 0xb2, 0x51, 0xc6,
	0xc6, 0x46, 0x86, 0x36, 0x6d, 0xec, 0xa4, 0x6d, 0x62, 0x51, 0x4b, 0x3a, 0xe3, 0x85, 0xa4, 0xbd,
	0x90, 0x34, 0x77, 0x4e, 0xbf, 0x14, 0x92, 0x98, 0x29, 0x99, 0xb4, 0x5c, 0x5f, 0x4f, 0x1b, 0x56,
	0x35, 0x53, 0xb2, 0x4a, 0x56, 0x86, 0x47, 0xaf, 0xd7, 0x6f, 0xf0, 0x1b, 0xbf, 0xf0, 0x93, 0x97,
	0x35, 0x71, 0xbc, 0xb7, 0x90, 0x1a, 0xa6, 0xbe, 0x61, 0xaa, 0xd7, 0x60, 0xd9, 0xd4, 0xb4, 0x6a,
	0x7e, 0x2d, 0x89, 0xc9, 0x5e, 0x63, 0x57, 0x99, 0x89, 0x13, 0xbd, 0xa6, 0x86, 0x5e, 0x31, 0x8b,
	0x3a, 0xc5, 0xbe, 0x55, 0xed, 0xb3, 0x9a, 0xf8, 0x56, 0xa1, 0x27, 0x75, 0xf2, 0xd7, 0x18, 0x0a,
	0x2f, 0x63, 0xbd, 0x88, 0x89, 0x74, 0x15, 0x1d, 0xab, 0x3b, 0xb8, 0x60, 0x11, 0xb3, 0x64, 0xd6,
	0x0a, 0x0e, 0x26, 0x0d, 0x4c, 0x0a, 0x35, 0xbd, 0x8a, 0xe5, 0x88, 0x0a, 0xd3, 0xf1, 0xb9, 0x89,
	0x74, 0x6f, 0x4b, 0x2e, 0x55, 0x6d, 0xda, 0x5c, 0x0e, 0x68, 0xe3, 0x75, 0x07, 0x5f, 0xe7, 0x41,
	0xab, 0x3c, 0xe6, 0x9a, 0x5e, 0xc5, 0xd2, 0x47, 0x28, 0x5e, 0xb6, 0x1c, 0xca, 0x7a, 0x55, 0xc4,
	0x44, 0x06, 0x15, 0xa6, 0x63, 0x79, 0xf9, 0xb9, 0x0b, 0x81, 0x9f, 0xfe, 0xd8, 0x15, 0x86, 0x88,
	0x20, 0x7f, 0x13, 0xf4, 0x4f, 0x8f, 0x00, 0x96, 0x03, 0x1a, 0x62, 0xee, 0x7e, 0x25, 0x06, 0x0a,
	0xd9, 0x3a, 0x2d, 0xcb, 0x41, 0x1e, 0x75, 0xfd, 0xa1, 0x0b, 0x90, 0x69, 0xb9, 0xb0, 0x80, 0x20,
	0x83, 0x22, 0x19, 0xaf, 0xfd, 0x68, 0x38, 0xd3, 0xc5, 0x03, 0x8a, 0xfa, 0xb7, 0x4d, 0x14, 0xce,
	0x54, 0xcc, 0x06, 0xde, 0x44, 0x91, 0x0c, 0xc1, 0x7a, 0xb1, 0xb9, 0xd9, 0xc6, 0x8c, 0x92, 0xb0,
	0xbc, 0x25, 0x3e, 0x09, 0x82, 0xc6, 0x93, 0x4b, 0xbf, 0x07, 0x51, 0xc4, 0xab, 0xce, 0x91, 0x05,
	0x55, 0x98, 0x8e, 0xcf, 0xe5, 0xd2, 0x87, 0xe2, 0x3c, 0xed, 0x55, 0xe9, 0xff, 0xe7, 0x5c, 0xaa,
	0x51, 0xd2, 0xcc, 0x7f, 0x17, 0xdc, 0x75, 0x01, 0x18, 0xce, 0xf0, 0x3d, 0x88, 0x25, 0x23, 0x64,
	0x48, 0x04, 0x79, 0xcb, 0x7b, 0xc5, 0x7b, 0x10, 0x14, 0xc5, 0xb6, 0xe9, 0xac, 0x6f, 0x12, 0x5b,
	0x8f, 0x7e, 0x16, 0xd4, 0xed, 0x1d, 0x38, 0x21, 0x25, 0x9e, 0xba, 0x70, 0x6c, 0x79, 0x6d, 0x6d,
	0x45, 0xf5, 0xea, 0x51, 0x37, 0x70, 0x53, 0x75, 0x28, 0x31, 0x6b, 0x25, 0xe6, 0x34, 0xb9, 0xbd,
	0x03, 0x47, 0xa5, 0xf1, 0x96, 0x0b, 0xa3, 0xdc, 0xc9, 0xc3, 0x55, 0xaf, 0xe2, 0x26, 0xb3, 0xa2,
	0xed, 0x1d, 0x08, 0x4b, 0xa1, 0x07, 0x2e, 0x04, 0xd8, 0x35, 0xbc, 0xbd, 0x03, 0xc1, 0x28, 0xb0,
	0xe3, 0xc5, 0xed, 0x1d, 0xc8, 0x25, 0x16, 0x9f, 0xba, 0x70, 0x6e, 0x95, 0x27, 0x53, 0xad, 0x1b,
	0xaa, 0x61, 0x55, 0xab, 0xba, 0xea, 0x60, 0x5b, 0x27, 0x3a, 0xc5, 0x45, 0xb5, 0x62, 0x3a, 0x94,
	0x3d, 0xef, 0x86, 0x6f, 0xe8, 0x95, 0x3a, 0x76, 0x58, 0x8a, 0xa9, 0xed, 0x1d, 0x38, 0x9e, 0x38,
	0xda, 0x72, 0x61, 0xac, 0x1b, 0xfa, 0x13, 0xe6, 0xd0, 0x01, 0x4f, 0x30, 0x70, 0xa1, 0xeb, 0xca,
	0x3a, 0xa1, 0xb5, 0x7b, 0x2b, 0x7d, 0x81, 0x26, 0x09, 0xfe, 0xb2, 0x8e, 0x3b, 0x62, 0x70, 0x0a,
	0xd4, 0x2a, 0x10, 0x5c, 0xb5, 0x1a, 0x58, 0x0e, 0xa9, 0xc2, 0x74, 0x2c, 0x7f, 0x92, 0x45, 0xb4,
	0x79, 0x42, 0x77, 0x21, 0x92, 0x64, 0x02, 0xf1, 0xbb, 0x77, 0x97, 0x75, 0x4f, 0x3b, 0xe6, 0xe7,
	0xf0, 0x9b, 0xbe, 0x66, 0x69, 0x3c, 0x81, 0xd4, 0x40, 0x47, 0xf1, 0x6d, 0x1b, 0x1b, 0x14, 0x17,
	0x0b, 0x0e, 0xd5, 0x69, 0xdd, 0x29, 0x18, 0x56, 0x11, 0x3b, 0x72, 0x94, 0x67, 0xce, 0xb3, 0xcc,
	0x0f, 0x5d, 0x10, 0xe6, 0x66, 0x67, 0xdb, 0x00, 0xf1, 0xbb, 0x10, 0x4d, 0x86, 0x49, 0x48, 0x14,
	0x64, 0xd4, 0x0d, 0x78, 0x27, 0x04, 0x2f, 0x00, 0xdb, 0x27, 0x19, 0xb4, 0xf1, 0x36, 0xc0, 0x2a,
	0xcf, 0xbf, 0xc4, 0xd2, 0x4b, 0x53, 0x28, 0x56, 0x77, 0xda, 0xf3, 0x81, 0x98, 0x4e, 0xb5, 0x28,
	0x7b, 0xc0, 0xc5, 0x9f, 0x43, 0x51, 0x5b, 0x77, 0x9c, 0x5b, 0x16, 0x29, 0xca, 0x71, 0x3e, 0x3b,
	0x93, 0x7d, 0xd2, 0x5a, 0xc5, 0x06, 0xc1, 0x74, 0xad, 0x69, 0xe3, 0xbc, 0xf0, 0xe0, 0x2b, 0xd0,
	0x3a, 0xfe, 0x52, 0x16, 0x0d, 0x3b, 0xb8, 0x56, 0x2c, 0xd8, 0x7a, 0xb3, 0x62, 0xe9, 0x45, 0x79,
	0x98, 0xcf, 0xc0, 0xc8, 0x73, 0x17, 0x84, 0xf6, 0xe4, 0x6c, 0x89, 0x5a, 0x9c, 0xf9, 0xac, 0x78,
	0x2e, 0xd2, 0xc7, 0x68, 0xac, 0xd3, 0x03, 0x82, 0x1d, 0xdb, 0xaa, 0x39, 0x58, 0x3e, 0xc2, 0xe3,
	0x26, 0x5e, 0xc4, 0xf8, 0xa7, 0x5d, 0x00, 0x4d, 0x6c, 0xbb, 0x6b, 0xbe, 0x77, 0x22, 0x87, 0x86,
	0xbb, 0xe5, 0x2c, 0x89, 0x48, 0xd8, 0xc0, 0x4d, 0x6f, 0x6c, 0x35, 0x76, 0x94, 0x26, 0xd0, 0x10,
	0xd7, 0x85, 0x37, 0x94, 0x9a, 0x77, 0xc9, 0x05, 0x17, 0x21, 0x77, 0xf3, 0xcf, 0x8b, 0xf1, 0xf3,
	0xa9, 0xb9, 0xd4, 0x42, 0x6a, 0x3e, 0x75, 0x2e, 0xb5, 0x78, 0xdf, 0x85, 0x4f, 0x51, 0x16, 0x9d,
	0x5e, 0xe6, 0x13, 0xa3, 0x2e, 0xb1, 0x91, 0xf1, 0xe4, 0xa5, 0x79, 0x14, 0xaa, 0x2b, 0x3a, 0xd1,
	0xab, 0x98, 0x32, 0x71, 0xc4, 0x58, 0x20, 0x0f, 0x43, 0xa7, 0xd0, 0xc4, 0x2a, 0x36, 0xd8, 0x6e,
	0xe2, 0x32, 0x63, 0x7a, 0x5d, 0xc6, 0x04, 0x4b, 0xf1, 0xec, 0x6c, 0x2a, 0x9b, 0x4d, 0x65, 0xe7,
	0x52, 0xd9, 0xf9, 0xfc, 0x19, 0x24, 0x75, 0xad, 0x95, 0x82, 0x51, 0xb6, 0x4c, 0x03, 0x4b, 0xa3,
	0xbb, 0x2e, 0x44, 0xf6, 0x5c, 0x08, 0xb7, 0x5c, 0x10, 0x2e, 0xa4, 0xb2, 0x57, 0x42, 0xd1, 0xb0,
	0x18, 0x49, 0xae, 0x23, 0x71, 0x99, 0x52, 0xdb, 0xf1, 0x2a, 0xe1, 0x85, 0x48, 0xd7, 0x5e, 0xde,
	0x4b, 0xf1, 0xb9, 0x99, 0xd7, 0x1a, 0xfc, 0xee, 0x55, 0x95, 0xd4, 0xd1, 0x28, 0xc3, 0x78, 0x9b,
	0x10, 0x3f, 0x02, 0x1a, 0x59, 0x33, 0x7a, 0x20, 0xfa, 0x45, 0x02, 0xff, 0x2d, 0x92, 0x4b, 0x83,
	0x44, 0x12, 0xec, 0xac, 0x65, 0xe1, 0x70, 0x42, 0xc9, 0x4d, 0xdf, 0x77, 0xe1, 0x34, 0x4a, 0xa2,
	0xa9, 0x1e, 0x7a, 0xd7, 0x96, 0x56, 0xba, 0x59, 0x15, 0xb2, 0xa9, 0xb9, 0xe4, 0x6f, 0x21, 0x34,
	0x72, 0xb9, 0x62, 0xad, 0xeb, 0x95, 0x55, 0x1b, 0x1b, 0x4c, 0xea, 0x52, 0x15, 0x49, 0x65, 0x46,
	0x88, 0xff, 0xc6, 0x05, 0xfe, 0xca, 0x7e, 0x83, 0x2e, 0x1c, 0xb6, 0x41, 0x7d, 0x8c, 0xe6, 0x43,
	0x7b, 0x2e, 0xff, 0x80, 0x88, 0xe5, 0x7e, 0xae, 0x6f, 0xa2, 0x31, 0xf6, 0xac, 0x17, 0x2d, 0xc8,
	0xd1, 0xce, 0xbf, 0x06, 0xda, 0x20, 0xb0, 0xd1, 0x72, 0x1f, 0xe9, 0x25, 0x24, 0x52, 0xa3, 0x0f,
	0x4a, 0xe0, 0x50, 0x0b, 0x87, 0x84, 0xea, 0xa5, 0xb8, 0x83, 0x34, 0x42, 0x7b, 0xa9, 0xcf, 0xa3,
	0x31, 0xd3, 0xa8, 0xf6, 0x21, 0x0d, 0xbd, 0xf2, 0x03, 0x3d, 0xca, 0x02, 0xba, 0x73, 0xcc, 0xa3,
	0x08, 0x35, 0xab, 0xd8, 0xaa, 0x53, 0x39, 0xa6, 0xc2, 0xf4, 0x91, 0xfc, 0x24, 0xfb, 0xc4, 0xce,
	0xb3, 0x05, 0xf9, 0xed, 0x8e, 0xf7, 0x15, 0x8b, 0x9c, 0x1d, 0x92, 0xf7, 0x43, 0xd3, 0xa0, 0xb5,
	0x3d, 0xa5, 0xf3, 0x28, 0x6a, 0xd6, 0x28, 0x26, 0x0d, 0xbd, 0xc2, 0x17, 0xde, 0x91, 0x7c, 0xe2,
	0xa1, 0x0b, 0xc1, 0xec, 0xc2, 0xc0, 0xb0, 0x8e, 0x6f, 0xee, 0x83, 0xfb, 0x2e, 0x9c, 0x42, 0x27,
	0xd1, 0xf1, 0x1e, 0xc5, 0x74, 0xa9, 0x25, 0xbc, 0x98, 0xfa, 0x30, 0x95, 0x9d, 0xcd, 0x9f, 0x42,
	0xc3, 0xdd, 0x2f, 0x25, 0x8d, 0xb3, 0xdd, 0xbd, 0xe7, 0x42, 0xb4, 0xe5, 0x42, 0x24, 0xcb, 0xf7,
	0xc4, 0xc2, 0x95, 0x50, 0x34, 0x2a, 0xc6, 0xae, 0x84, 0xa2, 0x21, 0x71, 0x28, 0xf9, 0xb7, 0x80,
	0x46, 0x96, 0x08, 0xd6, 0x29, 0xee, 0x28, 0xac, 0x38, 0x88, 0x72, 0x78, 0x13, 0xca, 0x07, 0x93,
	0x3d, 0x48, 0xc7, 0xc1, 0x37, 0xd2, 0xf1, 0x40, 0x05, 0xeb, 0xff, 0xb3, 0xaa, 0xde, 0x92, 0x9e,
	0xe4, 0x3e, 0x3d, 0xbd, 0x10, 0x4d, 0xa2, 0x5f, 0x34, 0x5d, 0xc2, 0x18, 0xfb, 0xe5, 0x62, 0xdf,
	0x82, 0xc8, 0xab, 0x7d, 0x12, 0x10, 0xbf, 0xfe, 0x07, 0x7a, 0x9e, 0xf8, 0xcc, 0x3f, 0x17, 0xd0,
	0xa8, 0x86, 0xed, 0x8a, 0x6e, 0xbc, 0xa7, 0xfe, 0x1d, 0xa3, 0xfe, 0x2f, 0x01, 0xc5, 0x2f, 0x63,
	0xfa, 0x9e, 0xf6, 0x77, 0x8a, 0xf6, 0xfc, 0xf7, 0xb0, 0xf7, 0x58, 0x09, 0xec, 0x3f, 0x56, 0x02,
	0xcf, 0x1e, 0x2b, 0xb0, 0xd5, 0x52, 0xe0, 0x87, 0x96, 0x02, 0x0f, 0x5a, 0x0a, 0xec, 0xb5, 0x14,
	0xd8, 0x6f, 0x29, 0xf0, 0xa8, 0xa5, 0xc0, 0x93, 0x96, 0x12, 0x78, 0xd6, 0x52, 0xe0, 0xce, 0x81,
	0x12, 0xd8, 0x3d, 0x50, 0x60, 0xef, 0x40, 0x09, 0xec, 0x1f, 0x28, 0x81, 0xcf, 0x3e, 0x2f, 0x59,
	0xf6, 0x46, 0x29, 0xdd, 0xb0, 0x2a, 0x14, 0x13, 0xa2, 0xa7, 0xeb, 0x4e, 0x86, 0x1f, 0x6e, 0x58,
	0xa4, 0x3a, 0x63, 0x13, 0xab, 0x61, 0x16, 0x31, 0x99, 0x69, 0x9b, 0x33, 0xf6, 0x7a, 0xc9, 0xca,
	0xe0, 0xdb, 0xd4, 0xff, 0xdd, 0xfc, 0xea, 0x3f, 0x1b, 0xac, 0x87, 0xf9, 0x4f, 0xe9, 0xf9, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x7b, 0x0b, 0xcb, 0x66, 0x10, 0x00, 0x00,
}

func (this *Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HostHeaderChoice == nil {
		if this.HostHeaderChoice != nil {
			return false
		}
	} else if this.HostHeaderChoice == nil {
		return false
	} else if !this.HostHeaderChoice.Equal(that1.HostHeaderChoice) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ExpectedStatusCodes) != len(that1.ExpectedStatusCodes) {
		return false
	}
	for i := range this.ExpectedStatusCodes {
		if this.ExpectedStatusCodes[i] != that1.ExpectedStatusCodes[i] {
			return false
		}
	}
	if this.UserName != that1.UserName {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	if this.SendPayload != that1.SendPayload {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *Header_UseOriginServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header_UseOriginServerName)
	if !ok {
		that2, ok := that.(Header_UseOriginServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseOriginServerName.Equal(that1.UseOriginServerName) {
		return false
	}
	return true
}
func (this *Header_HostHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header_HostHeader)
	if !ok {
		that2, ok := that.(Header_HostHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostHeader != that1.HostHeader {
		return false
	}
	return true
}
func (this *HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpsHealthCheck)
	if !ok {
		that2, ok := that.(HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HostHeader.Equal(that1.HostHeader) {
		return false
	}
	return true
}
func (this *HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck)
	if !ok {
		that2, ok := that.(HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HostHeader.Equal(that1.HostHeader) {
		return false
	}
	return true
}
func (this *TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpHealthCheck)
	if !ok {
		that2, ok := that.(TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendPayload != that1.SendPayload {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *GetSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *Header) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&uztna_healthcheck.Header{")
	if this.HostHeaderChoice != nil {
		s = append(s, "HostHeaderChoice: "+fmt.Sprintf("%#v", this.HostHeaderChoice)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ExpectedStatusCodes: "+fmt.Sprintf("%#v", this.ExpectedStatusCodes)+",\n")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "SendPayload: "+fmt.Sprintf("%#v", this.SendPayload)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Header_UseOriginServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.Header_UseOriginServerName{` +
		`UseOriginServerName:` + fmt.Sprintf("%#v", this.UseOriginServerName) + `}`}, ", ")
	return s
}
func (this *Header_HostHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.Header_HostHeader{` +
		`HostHeader:` + fmt.Sprintf("%#v", this.HostHeader) + `}`}, ", ")
	return s
}
func (this *HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_healthcheck.HttpsHealthCheck{")
	if this.HostHeader != nil {
		s = append(s, "HostHeader: "+fmt.Sprintf("%#v", this.HostHeader)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_healthcheck.HttpHealthCheck{")
	if this.HostHeader != nil {
		s = append(s, "HostHeader: "+fmt.Sprintf("%#v", this.HostHeader)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_healthcheck.TcpHealthCheck{")
	s = append(s, "SendPayload: "+fmt.Sprintf("%#v", this.SendPayload)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_healthcheck.GlobalSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GlobalSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GlobalSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GlobalSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GlobalSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_healthcheck.CreateSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.CreateSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.CreateSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.CreateSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.CreateSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_healthcheck.ReplaceSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.ReplaceSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.ReplaceSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.ReplaceSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.ReplaceSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_healthcheck.GetSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GetSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GetSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GetSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_healthcheck.GetSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SendPayload) > 0 {
		i -= len(m.SendPayload)
		copy(dAtA[i:], m.SendPayload)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SendPayload)))
		i--
		dAtA[i] = 0x62
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExpectedStatusCodes) > 0 {
		for iNdEx := len(m.ExpectedStatusCodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExpectedStatusCodes[iNdEx])
			copy(dAtA[i:], m.ExpectedStatusCodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedStatusCodes[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.HostHeaderChoice != nil {
		{
			size := m.HostHeaderChoice.Size()
			i -= size
			if _, err := m.HostHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Headers) > 0 {
		keysForHeaders := make([]string, 0, len(m.Headers))
		for k := range m.Headers {
			keysForHeaders = append(keysForHeaders, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
		for iNdEx := len(keysForHeaders) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Headers[string(keysForHeaders[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForHeaders[iNdEx])
			copy(dAtA[i:], keysForHeaders[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForHeaders[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Header_HostHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header_HostHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostHeader)
	copy(dAtA[i:], m.HostHeader)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostHeader)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Header_UseOriginServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header_UseOriginServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseOriginServerName != nil {
		{
			size, err := m.UseOriginServerName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HttpsHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostHeader != nil {
		{
			size, err := m.HostHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostHeader != nil {
		{
			size, err := m.HostHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TcpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendPayload) > 0 {
		i -= len(m.SendPayload)
		copy(dAtA[i:], m.SendPayload)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SendPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x50
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x50
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x50
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x50
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostHeaderChoice != nil {
		n += m.HostHeaderChoice.Size()
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExpectedStatusCodes) > 0 {
		for _, s := range m.ExpectedStatusCodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SendPayload)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Header_HostHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostHeader)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *Header_UseOriginServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseOriginServerName != nil {
		l = m.UseOriginServerName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostHeader != nil {
		l = m.HostHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostHeader != nil {
		l = m.HostHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendPayload)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	return n
}

func (m *GlobalSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	return n
}

func (m *CreateSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	return n
}

func (m *ReplaceSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	return n
}

func (m *GetSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Header) string() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&Header{`,
		`HostHeaderChoice:` + fmt.Sprintf("%v", this.HostHeaderChoice) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ExpectedStatusCodes:` + fmt.Sprintf("%v", this.ExpectedStatusCodes) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "schema.SecretType", 1) + `,`,
		`SendPayload:` + fmt.Sprintf("%v", this.SendPayload) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Header_HostHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Header_HostHeader{`,
		`HostHeader:` + fmt.Sprintf("%v", this.HostHeader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Header_UseOriginServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Header_UseOriginServerName{`,
		`UseOriginServerName:` + strings.Replace(fmt.Sprintf("%v", this.UseOriginServerName), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpsHealthCheck{`,
		`HostHeader:` + strings.Replace(this.HostHeader.String(), "Header", "Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHealthCheck{`,
		`HostHeader:` + strings.Replace(this.HostHeader.String(), "Header", "Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TcpHealthCheck{`,
		`SendPayload:` + fmt.Sprintf("%v", this.SendPayload) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpsHealthCheck", "HttpsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpsHealthCheck", "HttpsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpsHealthCheck", "HttpsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpsHealthCheck", "HttpsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostHeader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostHeaderChoice = &Header_HostHeader{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseOriginServerName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostHeaderChoice = &Header_UseOriginServerName{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedStatusCodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedStatusCodes = append(m.ExpectedStatusCodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &schema.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpsHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpsHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpsHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostHeader == nil {
				m.HostHeader = &Header{}
			}
			if err := m.HostHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostHeader == nil {
				m.HostHeader = &Header{}
			}
			if err := m.HostHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_policy_template

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetContinuousFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOnStartFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetContinuousFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetContinuousFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetContinuousFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "continuous_flow." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetOnStartFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOnStartFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOnStartFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "on_start_flow." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) OnStartFlowValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for on_start_flow")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TemplateTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["continuous_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("continuous_flow"))
		if err := fv(ctx, m.GetContinuousFlow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["on_start_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("on_start_flow"))
		if err := fv(ctx, m.GetOnStartFlow(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOnStartFlow := v.OnStartFlowValidationRuleHandler
	rulesOnStartFlow := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOnStartFlow(rulesOnStartFlow)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.on_start_flow: %s", err)
		panic(errMsg)
	}
	v.FldValidators["on_start_flow"] = vFn

	v.FldValidators["continuous_flow"] = TemplateTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Flows) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Flows) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Flows) DeepCopy() *Flows {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Flows{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Flows) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Flows) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FlowsValidator().Validate(ctx, m, opts...)
}

func (m *Flows) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetFlowTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Flows) GetFlowTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFlowType() == nil {
		return nil, nil
	}
	switch m.GetFlowType().(type) {
	case *Flows_AllowAll:

		return nil, nil

	case *Flows_SamlFederation:

		drInfos, err := m.GetSamlFederation().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSamlFederation().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "saml_federation." + dri.DRField
		}
		return drInfos, err

	case *Flows_GeolocationMatch:

		drInfos, err := m.GetGeolocationMatch().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGeolocationMatch().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "geolocation_match." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateFlows struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFlows) FlowTypeSamlFederationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return SAMLFederationValidator().Validate, nil
}
func (v *ValidateFlows) FlowTypeGeolocationMatchValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return GeoLocationMatchValidator().Validate, nil
}

func (v *ValidateFlows) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Flows)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Flows got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetFlowType().(type) {
	case *Flows_AllowAll:
		if fv, exists := v.FldValidators["flow_type.allow_all"]; exists {
			val := m.GetFlowType().(*Flows_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("flow_type"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Flows_SamlFederation:
		if fv, exists := v.FldValidators["flow_type.saml_federation"]; exists {
			val := m.GetFlowType().(*Flows_SamlFederation).SamlFederation
			vOpts := append(opts,
				db.WithValidateField("flow_type"),
				db.WithValidateField("saml_federation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Flows_GeolocationMatch:
		if fv, exists := v.FldValidators["flow_type.geolocation_match"]; exists {
			val := m.GetFlowType().(*Flows_GeolocationMatch).GeolocationMatch
			vOpts := append(opts,
				db.WithValidateField("flow_type"),
				db.WithValidateField("geolocation_match"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFlowsValidator = func() *ValidateFlows {
	v := &ValidateFlows{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFlowTypeSamlFederation := v.FlowTypeSamlFederationValidationRuleHandler
	rulesFlowTypeSamlFederation := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["flow_type.saml_federation"], err = vrhFlowTypeSamlFederation(rulesFlowTypeSamlFederation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Flows.flow_type_saml_federation: %s", err)
		panic(errMsg)
	}
	vrhFlowTypeGeolocationMatch := v.FlowTypeGeolocationMatchValidationRuleHandler
	rulesFlowTypeGeolocationMatch := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["flow_type.geolocation_match"], err = vrhFlowTypeGeolocationMatch(rulesFlowTypeGeolocationMatch)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Flows.flow_type_geolocation_match: %s", err)
		panic(errMsg)
	}

	v.FldValidators["flow_type.saml_federation"] = vFnMap["flow_type.saml_federation"]
	v.FldValidators["flow_type.geolocation_match"] = vFnMap["flow_type.geolocation_match"]

	return v
}()

func FlowsValidator() db.Validator {
	return DefaultFlowsValidator
}

// augmented methods on protoc/std generated struct

func (m *GeoLocationMatch) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GeoLocationMatch) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GeoLocationMatch) DeepCopy() *GeoLocationMatch {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GeoLocationMatch{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GeoLocationMatch) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GeoLocationMatch) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GeoLocationMatchValidator().Validate(ctx, m, opts...)
}

func (m *GeoLocationMatch) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGeomatchDRefInfo()

}

func (m *GeoLocationMatch) GetGeomatchDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetGeomatch()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GeoLocationMatch.geomatch[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_flow.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "geomatch",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetGeomatchDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GeoLocationMatch) GetGeomatchDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_flow.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_flow")
	}
	for _, ref := range m.GetGeomatch() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGeoLocationMatch struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGeoLocationMatch) GeomatchValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for geomatch")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for geomatch")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated geomatch")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items geomatch")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGeoLocationMatch) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GeoLocationMatch)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GeoLocationMatch got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["geomatch"]; exists {
		vOpts := append(opts, db.WithValidateField("geomatch"))
		if err := fv(ctx, m.GetGeomatch(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGeoLocationMatchValidator = func() *ValidateGeoLocationMatch {
	v := &ValidateGeoLocationMatch{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGeomatch := v.GeomatchValidationRuleHandler
	rulesGeomatch := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhGeomatch(rulesGeomatch)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GeoLocationMatch.geomatch: %s", err)
		panic(errMsg)
	}
	v.FldValidators["geomatch"] = vFn

	return v
}()

func GeoLocationMatchValidator() db.Validator {
	return DefaultGeoLocationMatchValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetContinuousFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOnStartFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetContinuousFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetContinuousFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetContinuousFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "continuous_flow." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetOnStartFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOnStartFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOnStartFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "on_start_flow." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) OnStartFlowValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for on_start_flow")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TemplateTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["continuous_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("continuous_flow"))
		if err := fv(ctx, m.GetContinuousFlow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["on_start_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("on_start_flow"))
		if err := fv(ctx, m.GetOnStartFlow(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOnStartFlow := v.OnStartFlowValidationRuleHandler
	rulesOnStartFlow := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOnStartFlow(rulesOnStartFlow)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.on_start_flow: %s", err)
		panic(errMsg)
	}
	v.FldValidators["on_start_flow"] = vFn

	v.FldValidators["continuous_flow"] = TemplateTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetContinuousFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOnStartFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetContinuousFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetContinuousFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetContinuousFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "continuous_flow." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOnStartFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOnStartFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOnStartFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "on_start_flow." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) OnStartFlowValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for on_start_flow")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TemplateTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["continuous_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("continuous_flow"))
		if err := fv(ctx, m.GetContinuousFlow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["on_start_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("on_start_flow"))
		if err := fv(ctx, m.GetOnStartFlow(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOnStartFlow := v.OnStartFlowValidationRuleHandler
	rulesOnStartFlow := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOnStartFlow(rulesOnStartFlow)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.on_start_flow: %s", err)
		panic(errMsg)
	}
	v.FldValidators["on_start_flow"] = vFn

	v.FldValidators["continuous_flow"] = TemplateTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetContinuousFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOnStartFlowDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlowDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetContinuousFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetContinuousFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetContinuousFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetContinuousFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "continuous_flow." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetOnStartFlowDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOnStartFlow() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOnStartFlow().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOnStartFlow().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "on_start_flow." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) OnStartFlowValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for on_start_flow")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TemplateTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["continuous_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("continuous_flow"))
		if err := fv(ctx, m.GetContinuousFlow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["on_start_flow"]; exists {

		vOpts := append(opts, db.WithValidateField("on_start_flow"))
		if err := fv(ctx, m.GetOnStartFlow(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOnStartFlow := v.OnStartFlowValidationRuleHandler
	rulesOnStartFlow := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOnStartFlow(rulesOnStartFlow)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.on_start_flow: %s", err)
		panic(errMsg)
	}
	v.FldValidators["on_start_flow"] = vFn

	v.FldValidators["continuous_flow"] = TemplateTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SAMLFederation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SAMLFederation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SAMLFederation) DeepCopy() *SAMLFederation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SAMLFederation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SAMLFederation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SAMLFederation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SAMLFederationValidator().Validate(ctx, m, opts...)
}

func (m *SAMLFederation) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSamlDRefInfo()

}

func (m *SAMLFederation) GetSamlDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetSaml()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("SAMLFederation.saml[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_flow.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "saml",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetSamlDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SAMLFederation) GetSamlDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_flow.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_flow")
	}
	for _, ref := range m.GetSaml() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateSAMLFederation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSAMLFederation) SamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for saml")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for saml")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated saml")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items saml")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSAMLFederation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SAMLFederation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SAMLFederation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["saml"]; exists {
		vOpts := append(opts, db.WithValidateField("saml"))
		if err := fv(ctx, m.GetSaml(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSAMLFederationValidator = func() *ValidateSAMLFederation {
	v := &ValidateSAMLFederation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSaml := v.SamlValidationRuleHandler
	rulesSaml := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhSaml(rulesSaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SAMLFederation.saml: %s", err)
		panic(errMsg)
	}
	v.FldValidators["saml"] = vFn

	return v
}()

func SAMLFederationValidator() db.Validator {
	return DefaultSAMLFederationValidator
}

// augmented methods on protoc/std generated struct

func (m *SimpleTemplate) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SimpleTemplate) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SimpleTemplate) DeepCopy() *SimpleTemplate {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SimpleTemplate{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SimpleTemplate) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SimpleTemplate) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SimpleTemplateValidator().Validate(ctx, m, opts...)
}

func (m *SimpleTemplate) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetFlowsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SimpleTemplate) GetFlowsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFlows() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetFlows() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFlows() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("flows[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateSimpleTemplate struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSimpleTemplate) FlowsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for flows")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Flows, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FlowsValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for flows")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Flows)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Flows, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated flows")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items flows")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleTemplate) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SimpleTemplate)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SimpleTemplate got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["flows"]; exists {
		vOpts := append(opts, db.WithValidateField("flows"))
		if err := fv(ctx, m.GetFlows(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSimpleTemplateValidator = func() *ValidateSimpleTemplate {
	v := &ValidateSimpleTemplate{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFlows := v.FlowsValidationRuleHandler
	rulesFlows := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "2",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFlows(rulesFlows)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleTemplate.flows: %s", err)
		panic(errMsg)
	}
	v.FldValidators["flows"] = vFn

	return v
}()

func SimpleTemplateValidator() db.Validator {
	return DefaultSimpleTemplateValidator
}

// augmented methods on protoc/std generated struct

func (m *TemplateType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TemplateType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TemplateType) DeepCopy() *TemplateType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TemplateType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TemplateType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TemplateType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TemplateTypeValidator().Validate(ctx, m, opts...)
}

func (m *TemplateType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTemplateTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *TemplateType) GetTemplateTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTemplateType() == nil {
		return nil, nil
	}
	switch m.GetTemplateType().(type) {
	case *TemplateType_DenyAll:

		return nil, nil

	case *TemplateType_Simple:

		drInfos, err := m.GetSimple().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSimple().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "simple." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateTemplateType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTemplateType) TemplateTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for template_type")
	}
	return validatorFn, nil
}

func (v *ValidateTemplateType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TemplateType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TemplateType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["template_type"]; exists {
		val := m.GetTemplateType()
		vOpts := append(opts,
			db.WithValidateField("template_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTemplateType().(type) {
	case *TemplateType_DenyAll:
		if fv, exists := v.FldValidators["template_type.deny_all"]; exists {
			val := m.GetTemplateType().(*TemplateType_DenyAll).DenyAll
			vOpts := append(opts,
				db.WithValidateField("template_type"),
				db.WithValidateField("deny_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TemplateType_Simple:
		if fv, exists := v.FldValidators["template_type.simple"]; exists {
			val := m.GetTemplateType().(*TemplateType_Simple).Simple
			vOpts := append(opts,
				db.WithValidateField("template_type"),
				db.WithValidateField("simple"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTemplateTypeValidator = func() *ValidateTemplateType {
	v := &ValidateTemplateType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTemplateType := v.TemplateTypeValidationRuleHandler
	rulesTemplateType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTemplateType(rulesTemplateType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TemplateType.template_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["template_type"] = vFn

	v.FldValidators["template_type.simple"] = SimpleTemplateValidator().Validate

	return v
}()

func TemplateTypeValidator() db.Validator {
	return DefaultTemplateTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ContinuousFlow = f.GetContinuousFlow()
	m.OnStartFlow = f.GetOnStartFlow()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ContinuousFlow = m1.ContinuousFlow
	f.OnStartFlow = m1.OnStartFlow
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ContinuousFlow = f.GetContinuousFlow()
	m.OnStartFlow = f.GetOnStartFlow()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ContinuousFlow = m1.ContinuousFlow
	f.OnStartFlow = m1.OnStartFlow
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ContinuousFlow = f.GetContinuousFlow()
	m.OnStartFlow = f.GetOnStartFlow()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ContinuousFlow = m1.ContinuousFlow
	f.OnStartFlow = m1.OnStartFlow
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_active_sessions

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create ActiveSessionsAPI GRPC Client satisfying server.CustomClient
type ActiveSessionsAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient ActiveSessionsAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *ActiveSessionsAPIGrpcClient) doRPCGetActiveSession(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetActiveSessionRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.uztna.uztna_active_sessions.GetActiveSessionRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetActiveSession(ctx, req, opts...)
	return rsp, err
}

func (c *ActiveSessionsAPIGrpcClient) doRPCListActiveSessions(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListActiveSessionsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListActiveSessions(ctx, req, opts...)
	return rsp, err
}

func (c *ActiveSessionsAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewActiveSessionsAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &ActiveSessionsAPIGrpcClient{
		conn:       cc,
		grpcClient: NewActiveSessionsAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["GetActiveSession"] = ccl.doRPCGetActiveSession

	rpcFns["ListActiveSessions"] = ccl.doRPCListActiveSessions

	ccl.rpcFns = rpcFns

	return ccl
}

// Create ActiveSessionsAPI REST Client satisfying server.CustomClient
type ActiveSessionsAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *ActiveSessionsAPIRestClient) doRPCGetActiveSession(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetActiveSessionRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.uztna.uztna_active_sessions.GetActiveSessionRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetActiveSessionResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.uztna.uztna_active_sessions.GetActiveSessionResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *ActiveSessionsAPIRestClient) doRPCListActiveSessions(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListActiveSessionsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("limit", fmt.Sprintf("%v", req.Limit))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("offset", fmt.Sprintf("%v", req.Offset))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListActiveSessionsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *ActiveSessionsAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewActiveSessionsAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &ActiveSessionsAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["GetActiveSession"] = ccl.doRPCGetActiveSession

	rpcFns["ListActiveSessions"] = ccl.doRPCListActiveSessions

	ccl.rpcFns = rpcFns

	return ccl
}

// Create activeSessionsAPIInprocClient

// INPROC Client (satisfying ActiveSessionsAPIClient interface)
type activeSessionsAPIInprocClient struct {
	ActiveSessionsAPIServer
}

func (c *activeSessionsAPIInprocClient) GetActiveSession(ctx context.Context, in *GetActiveSessionRequest, opts ...grpc.CallOption) (*GetActiveSessionResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.GetActiveSession")
	return c.ActiveSessionsAPIServer.GetActiveSession(ctx, in)
}
func (c *activeSessionsAPIInprocClient) ListActiveSessions(ctx context.Context, in *ListActiveSessionsRequest, opts ...grpc.CallOption) (*ListActiveSessionsResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.ListActiveSessions")
	return c.ActiveSessionsAPIServer.ListActiveSessions(ctx, in)
}

func NewActiveSessionsAPIInprocClient(svc svcfw.Service) ActiveSessionsAPIClient {
	return &activeSessionsAPIInprocClient{ActiveSessionsAPIServer: NewActiveSessionsAPIServer(svc)}
}

// RegisterGwActiveSessionsAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwActiveSessionsAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterActiveSessionsAPIHandlerClient(ctx, mux, NewActiveSessionsAPIInprocClient(s))
}

// Create activeSessionsAPISrv

// SERVER (satisfying ActiveSessionsAPIServer interface)
type activeSessionsAPISrv struct {
	svc svcfw.Service
}

func (s *activeSessionsAPISrv) GetActiveSession(ctx context.Context, in *GetActiveSessionRequest) (*GetActiveSessionResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI")
	cah, ok := ah.(ActiveSessionsAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *ActiveSessionsAPIServer", ah)
	}

	var (
		rsp *GetActiveSessionResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.uztna.uztna_active_sessions.GetActiveSessionRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'ActiveSessionsAPI.GetActiveSession' operation on 'uztna_active_sessions'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.GetActiveSession"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetActiveSession(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.uztna.uztna_active_sessions.GetActiveSessionResponse", rsp)...)

	return rsp, nil
}
func (s *activeSessionsAPISrv) ListActiveSessions(ctx context.Context, in *ListActiveSessionsRequest) (*ListActiveSessionsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI")
	cah, ok := ah.(ActiveSessionsAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *ActiveSessionsAPIServer", ah)
	}

	var (
		rsp *ListActiveSessionsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'ActiveSessionsAPI.ListActiveSessions' operation on 'uztna_active_sessions'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.ListActiveSessions"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListActiveSessions(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsResponse", rsp)...)

	return rsp, nil
}

func NewActiveSessionsAPIServer(svc svcfw.Service) ActiveSessionsAPIServer {
	return &activeSessionsAPISrv{svc: svc}
}

var ActiveSessionsAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "manage active sessions",
        "description": "APIs to monitor UZTNA active sessions on all applications.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/uztna/active-sessions": {
            "get": {
                "summary": "List Active Sessions",
                "description": "List all active sessions",
                "operationId": "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.ListActiveSessions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/uztna_active_sessionsListActiveSessionsResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace of the App type for the current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "offset",
                        "description": "x-example: \"9d6d591\"\nOffset to query the next set of sessions. Offset contains the session ID to offset from",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Offset"
                    },
                    {
                        "name": "limit",
                        "description": "x-example: \"25\"\nLimits the number of results to the specified number",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-displayname": "Limit"
                    }
                ],
                "tags": [
                    "ActiveSessionsAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-uztna-uztna_active_sessions-activesessionsapi-listactivesessions"
                },
                "x-ves-proto-rpc": "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.ListActiveSessions"
            },
            "x-displayname": "Active Sessions API",
            "x-ves-proto-service": "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/uztna/active-sessions/{id}": {
            "get": {
                "summary": "Get Active Session",
                "description": "Get an active session by ID",
                "operationId": "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.GetActiveSession",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/uztna_active_sessionsGetActiveSessionResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace of the App type for the current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "id",
                        "description": "id\n\nx-example: \"9d6d591\"\nID of the session",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Session ID"
                    }
                ],
                "tags": [
                    "ActiveSessionsAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-uztna-uztna_active_sessions-activesessionsapi-getactivesession"
                },
                "x-ves-proto-rpc": "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI.GetActiveSession"
            },
            "x-displayname": "Active Sessions API",
            "x-ves-proto-service": "ves.io.schema.uztna.uztna_active_sessions.ActiveSessionsAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "uztna_active_sessionsGetActiveSessionResponse": {
            "type": "object",
            "description": "Response structure of active session query",
            "title": "GetActiveSessionResponse",
            "x-displayname": "Get Active Session Response",
            "x-ves-proto-message": "ves.io.schema.uztna.uztna_active_sessions.GetActiveSessionResponse",
            "properties": {
                "client_ip": {
                    "type": "string",
                    "description": " Client IP of the user that connected via the session\n\nExample: - \"10.192.0.1\"-",
                    "title": "client ip",
                    "x-displayname": "Client IP",
                    "x-ves-example": "10.192.0.1"
                },
                "expiration_time": {
                    "type": "string",
                    "description": " Expiration time of the session in ISO-8601 format\n\nExample: - \"2024-08-07T20:58:46.089939+0000\"-",
                    "title": "expiration time",
                    "format": "date-time",
                    "x-displayname": "Expiration Time",
                    "x-ves-example": "2024-08-07T20:58:46.089939+0000"
                },
                "id": {
                    "type": "string",
                    "description": " ID of the session\n\nExample: - \"9d6d591\"-",
                    "title": "id",
                    "x-displayname": "Session ID",
                    "x-ves-example": "9d6d591"
                },
                "start_time": {
                    "type": "string",
                    "description": " Start time of the session in ISO-8601 format\n\nExample: - \"2024-08-06T20:58:46.089939+0000\"-",
                    "title": "start time",
                    "format": "date-time",
                    "x-displayname": "Start Time",
                    "x-ves-example": "2024-08-06T20:58:46.089939+0000"
                },
                "status": {
                    "description": " The status of session\n\nExample: - \"Established\"-",
                    "title": "status",
                    "$ref": "#/definitions/uztna_active_sessionsSessionStatus",
                    "x-displayname": "Status",
                    "x-ves-example": "Established"
                },
                "username": {
                    "type": "string",
                    "description": " Username used in authentication of this session\n\nExample: - \"testUser\"-",
                    "title": "username",
                    "x-displayname": "Username",
                    "x-ves-example": "testUser"
                },
                "variables": {
                    "type": "array",
                    "description": " Session variables present in the session",
                    "title": "Session variables",
                    "items": {
                        "$ref": "#/definitions/uztna_active_sessionsSessionVariable"
                    },
                    "x-displayname": "Session Variables"
                }
            }
        },
        "uztna_active_sessionsListActiveSessionsItem": {
            "type": "object",
            "description": "An object representing an active session",
            "title": "ListActiveSessionsItem",
            "x-displayname": "List Active Session Item",
            "x-ves-proto-message": "ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsItem",
            "properties": {
                "client_ip": {
                    "type": "string",
                    "description": " Client IP of the user that connected via the session\n\nExample: - \"10.192.0.1\"-",
                    "title": "client ip",
                    "x-displayname": "Client IP",
                    "x-ves-example": "10.192.0.1"
                },
                "expiration_time": {
                    "type": "string",
                    "description": " Expiration time of the session in ISO-8601 format\n\nExample: - \"2024-08-07T20:58:46.089939+0000\"-",
                    "title": "expiration time",
                    "format": "date-time",
                    "x-displayname": "Expiration Time",
                    "x-ves-example": "2024-08-07T20:58:46.089939+0000"
                },
                "id": {
                    "type": "string",
                    "description": " ID of the session\n\nExample: - \"9d6d591\"-",
                    "title": "id",
                    "x-displayname": "Session ID",
                    "x-ves-example": "9d6d591"
                },
                "start_time": {
                    "type": "string",
                    "description": " Start time of the session in ISO-8601 format\n\nExample: - \"2024-08-06T20:58:46.089939+0000\"-",
                    "title": "start time",
                    "format": "date-time",
                    "x-displayname": "Start Time",
                    "x-ves-example": "2024-08-06T20:58:46.089939+0000"
                },
                "status": {
                    "description": " The status of session",
                    "title": "status",
                    "$ref": "#/definitions/uztna_active_sessionsSessionStatus",
                    "x-displayname": "Status"
                },
                "username": {
                    "type": "string",
                    "description": " Username used in authentication of this session\n\nExample: - \"testUser\"-",
                    "title": "username",
                    "x-displayname": "Username",
                    "x-ves-example": "testUser"
                }
            }
        },
        "uztna_active_sessionsListActiveSessionsResponse": {
            "type": "object",
            "description": "Response structure for active sessions list",
            "title": "ListActiveSessionResponse",
            "x-displayname": "List Active Sessions Response",
            "x-ves-proto-message": "ves.io.schema.uztna.uztna_active_sessions.ListActiveSessionsResponse",
            "properties": {
                "count": {
                    "type": "integer",
                    "description": " Total count of active sessions\n\nExample: - \"20\"-",
                    "title": "count",
                    "format": "int32",
                    "x-displayname": "Count",
                    "x-ves-example": "20"
                },
                "items": {
                    "type": "array",
                    "description": " List of active sessions",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/uztna_active_sessionsListActiveSessionsItem"
                    },
                    "x-displayname": "Sessions"
                }
            }
        },
        "uztna_active_sessionsSessionStatus": {
            "type": "string",
            "description": "The status of the active session\n\nSession status is pending\nSession status is established",
            "title": "Session status",
            "enum": [
                "PENDING",
                "ESTABLISHED"
            ],
            "default": "PENDING",
            "x-displayname": "Session Status",
            "x-ves-proto-enum": "ves.io.schema.uztna.uztna_active_sessions.SessionStatus"
        },
        "uztna_active_sessionsSessionVariable": {
            "type": "object",
            "description": "An object representing a session variable",
            "title": "SessionVariable",
            "x-displayname": "Session Variable",
            "x-ves-proto-message": "ves.io.schema.uztna.uztna_active_sessions.SessionVariable",
            "properties": {
                "value": {
                    "type": "string",
                    "description": " The variable value\n\nExample: - \"1724969282346\"-",
                    "title": "value",
                    "x-displayname": "Value",
                    "x-ves-example": "1724969282346"
                },
                "variable": {
                    "type": "string",
                    "description": " The variable name\n\nExample: - \"session.user.starttime\"-",
                    "title": "variable",
                    "x-displayname": "Variable",
                    "x-ves-example": "session.user.starttime"
                }
            }
        }
    },
    "x-displayname": "Manage Active Sessions",
    "x-ves-proto-file": "ves.io/schema/uztna/uztna_active_sessions/public_uztna_active_sessions.proto"
}`

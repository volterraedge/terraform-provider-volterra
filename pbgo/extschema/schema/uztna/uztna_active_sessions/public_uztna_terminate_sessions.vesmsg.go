// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_active_sessions

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *TerminateSessionsRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TerminateSessionsRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TerminateSessionsRequest) DeepCopy() *TerminateSessionsRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TerminateSessionsRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TerminateSessionsRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TerminateSessionsRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TerminateSessionsRequestValidator().Validate(ctx, m, opts...)
}

type ValidateTerminateSessionsRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTerminateSessionsRequest) SessionIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for session_id")
	}

	return validatorFn, nil
}

func (v *ValidateTerminateSessionsRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TerminateSessionsRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TerminateSessionsRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["session_id"]; exists {

		vOpts := append(opts, db.WithValidateField("session_id"))
		if err := fv(ctx, m.GetSessionId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTerminateSessionsRequestValidator = func() *ValidateTerminateSessionsRequest {
	v := &ValidateTerminateSessionsRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSessionId := v.SessionIdValidationRuleHandler
	rulesSessionId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.not_empty": "true",
	}
	vFn, err = vrhSessionId(rulesSessionId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TerminateSessionsRequest.session_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["session_id"] = vFn

	return v
}()

func TerminateSessionsRequestValidator() db.Validator {
	return DefaultTerminateSessionsRequestValidator
}

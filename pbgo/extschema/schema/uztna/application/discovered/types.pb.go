// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/application/discovered/types.proto

package discovered

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Get Discovered CM Application
//
// x-displayName: "Get Discovered CM Application"
// Get Discovered CM Application. This will return App data
// of a Discovered CM Application
type GetSpecType struct {
	// name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "cm01app01"
	// Unique Name of Discovered CM Application Object
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// virtual_server
	//
	// x-displayName: "Virtual Server"
	// x-example: "App Portal"
	// Name of the Virtual Server front-ending the Application
	VirtualServer string `protobuf:"bytes,2,opt,name=virtual_server,json=virtualServer,proto3" json:"virtual_server,omitempty"`
	// application
	//
	// x-displayName: "Application"
	// x-example: "MyApp1"
	// CM-assigned name of the Application
	Application string `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "CE-Mumbai"
	// BIG-IP Next CE Site on which the App is running
	Site string `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	// instance
	//
	// x-displayName: "BIG-IP Next Instance"
	// x-example: "BIGIP-NX-MUM04"
	// BIG-IP Next Instance on which the Virtual Server is deployed
	Instance string `protobuf:"bytes,5,opt,name=instance,proto3" json:"instance,omitempty"`
	// private_ip
	//
	// x-displayName: "Private IP"
	// x-example: "192.168.1.2"
	// VIP serving the App on a BIG-IP Next Instance
	PrivateIp string `protobuf:"bytes,6,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83aa3a7771c9fcb, []int{0}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSpecType) GetVirtualServer() string {
	if m != nil {
		return m.VirtualServer
	}
	return ""
}

func (m *GetSpecType) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *GetSpecType) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *GetSpecType) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *GetSpecType) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "GlobalSpecType"
// Defines actual Discovered CM Application shape in DB
type GlobalSpecType struct {
	// cm site name
	//
	// x-displayName: "CM Site Name"
	// x-required
	// x-example: "cm01-eastern-us"
	// Name of the Central Manager site
	CmSiteName string `protobuf:"bytes,1,opt,name=cm_site_name,json=cmSiteName,proto3" json:"cm_site_name,omitempty"`
	// locations
	//
	// x-displayName: "BIG-IP Next Instances"
	// Locations of the BIG-IP Next Instances
	Locations []*ApplicationLocation `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83aa3a7771c9fcb, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetCmSiteName() string {
	if m != nil {
		return m.CmSiteName
	}
	return ""
}

func (m *GlobalSpecType) GetLocations() []*ApplicationLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

// ApplicationLocation
//
// x-displayName: "Application Location"
// Defines BIG-IP Next Instance Details
type ApplicationLocation struct {
	// id
	//
	// x-displayName: "Instance ID"
	// x-required
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// instance
	//
	// x-displayName: "BIG-IP Next Instance"
	// x-required
	// x-example: "BIGIP-NX-MUM04"
	// BIG-IP Next Instance on which the Virtual Server is deployed
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// hostname
	//
	// x-displayName: "Hostname"
	// x-example: "bigip-next.asia.com"
	// FQDN of Instance
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// site_name
	//
	// x-displayName: "Site Name"
	// x-example: "CE-Mumbai"
	// BIG-IP Next CE Site on which this Instance is running
	SiteName string `protobuf:"bytes,4,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	// ip_address
	//
	// x-displayName: "IP Address"
	// x-example: "202.14.23.121"
	// Management IP of the BIG-IP Next Instance
	IpAddress string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// virtual_servers
	//
	// x-displayName: "Virtual Servers List"
	// List of Virtual Servers deployed on this Instance
	VirtualServers []*VirtualServer `protobuf:"bytes,6,rep,name=virtual_servers,json=virtualServers,proto3" json:"virtual_servers,omitempty"`
}

func (m *ApplicationLocation) Reset()      { *m = ApplicationLocation{} }
func (*ApplicationLocation) ProtoMessage() {}
func (*ApplicationLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83aa3a7771c9fcb, []int{2}
}
func (m *ApplicationLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationLocation.Merge(m, src)
}
func (m *ApplicationLocation) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationLocation.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationLocation proto.InternalMessageInfo

func (m *ApplicationLocation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ApplicationLocation) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *ApplicationLocation) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ApplicationLocation) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *ApplicationLocation) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ApplicationLocation) GetVirtualServers() []*VirtualServer {
	if m != nil {
		return m.VirtualServers
	}
	return nil
}

// VirtualServer
//
// x-displayName: "Virtual Server"
// Defines Virtual Server Details
type VirtualServer struct {
	// vs_name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "App Portal"
	VsName string `protobuf:"bytes,1,opt,name=vs_name,json=vsName,proto3" json:"vs_name,omitempty"`
	// ip_address
	//
	// x-displayName: "IP Address"
	// x-example: "192.168.1.2"
	// VIP serving the Discovered App on the corresponding BIG-IP Next Instance
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// port
	//
	// x-displayName: "Port"
	// x-example: "443"
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *VirtualServer) Reset()      { *m = VirtualServer{} }
func (*VirtualServer) ProtoMessage() {}
func (*VirtualServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83aa3a7771c9fcb, []int{3}
}
func (m *VirtualServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VirtualServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualServer.Merge(m, src)
}
func (m *VirtualServer) XXX_Size() int {
	return m.Size()
}
func (m *VirtualServer) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualServer.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualServer proto.InternalMessageInfo

func (m *VirtualServer) GetVsName() string {
	if m != nil {
		return m.VsName
	}
	return ""
}

func (m *VirtualServer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *VirtualServer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.application.discovered.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.application.discovered.GetSpecType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.application.discovered.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.application.discovered.GlobalSpecType")
	proto.RegisterType((*ApplicationLocation)(nil), "ves.io.schema.uztna.application.discovered.ApplicationLocation")
	golang_proto.RegisterType((*ApplicationLocation)(nil), "ves.io.schema.uztna.application.discovered.ApplicationLocation")
	proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.uztna.application.discovered.VirtualServer")
	golang_proto.RegisterType((*VirtualServer)(nil), "ves.io.schema.uztna.application.discovered.VirtualServer")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/application/discovered/types.proto", fileDescriptor_a83aa3a7771c9fcb)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/uztna/application/discovered/types.proto", fileDescriptor_a83aa3a7771c9fcb)
}

var fileDescriptor_a83aa3a7771c9fcb = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x39, 0x69, 0x68, 0xae, 0x34, 0xa0, 0x83, 0xc1, 0x04, 0x38, 0xa2, 0xa0, 0x42, 0x85,
	0xa8, 0x2d, 0x15, 0x09, 0x89, 0x09, 0x35, 0x4b, 0x85, 0x84, 0x18, 0x52, 0xc4, 0xc0, 0x12, 0x2e,
	0xf6, 0xd5, 0x39, 0x61, 0xe7, 0x4e, 0x77, 0x17, 0xd3, 0x32, 0xf1, 0x13, 0x10, 0x3f, 0x80, 0x99,
	0x9d, 0x0d, 0x96, 0x8e, 0x30, 0x20, 0x75, 0xcc, 0x48, 0x9d, 0xa5, 0x6c, 0xfd, 0x09, 0x28, 0x67,
	0x37, 0xb6, 0x69, 0x40, 0x65, 0x7b, 0xf7, 0xbe, 0xf7, 0xbe, 0x7b, 0xdf, 0xe7, 0x77, 0x86, 0x0f,
	0x63, 0xaa, 0x1c, 0xc6, 0x5d, 0xe5, 0x0d, 0x69, 0x44, 0xdc, 0xf1, 0x5b, 0x3d, 0x22, 0x2e, 0x11,
	0x22, 0x64, 0x1e, 0xd1, 0x8c, 0x8f, 0x5c, 0x9f, 0x29, 0x8f, 0xc7, 0x54, 0x52, 0xdf, 0xd5, 0xfb,
	0x82, 0x2a, 0x47, 0x48, 0xae, 0x39, 0xba, 0x97, 0xf6, 0x39, 0x69, 0x9f, 0x63, 0xfa, 0x9c, 0x42,
	0x9f, 0x93, 0xf7, 0xb5, 0x36, 0x02, 0xa6, 0x87, 0xe3, 0x81, 0xe3, 0xf1, 0xc8, 0x0d, 0x78, 0xc0,
	0x5d, 0x43, 0x31, 0x18, 0xef, 0x9a, 0x93, 0x39, 0x98, 0x28, 0xa5, 0x6e, 0xdd, 0x0a, 0x38, 0x0f,
	0x42, 0x9a, 0x57, 0x69, 0x16, 0x51, 0xa5, 0x49, 0x24, 0xb2, 0x82, 0xeb, 0xe5, 0x99, 0xb9, 0x98,
	0x5d, 0x98, 0x0d, 0xd6, 0xba, 0x56, 0x06, 0x0b, 0x33, 0xb7, 0x6e, 0x94, 0xa1, 0x98, 0x84, 0xcc,
	0x27, 0x9a, 0x66, 0x68, 0xfb, 0x0f, 0x94, 0xd1, 0x37, 0xfd, 0x12, 0x75, 0xe7, 0x3b, 0x80, 0x2b,
	0xdb, 0x54, 0xef, 0x08, 0xea, 0x3d, 0xdf, 0x17, 0x14, 0x75, 0x60, 0x6d, 0x44, 0x22, 0x6a, 0x83,
	0x36, 0x58, 0x6f, 0x74, 0x9b, 0xc7, 0x5f, 0x01, 0xf8, 0xf2, 0xeb, 0xa0, 0xba, 0x24, 0xab, 0x13,
	0x00, 0x7a, 0x06, 0x43, 0x6b, 0xb0, 0x19, 0x33, 0xa9, 0xc7, 0x24, 0xec, 0x2b, 0x2a, 0x63, 0x2a,
	0x6d, 0x6b, 0x56, 0xdd, 0x5b, 0xcd, 0xb2, 0x3b, 0x26, 0x89, 0xda, 0x70, 0xa5, 0x60, 0x9e, 0x5d,
	0x35, 0x35, 0xc5, 0x14, 0x42, 0xb0, 0xa6, 0x98, 0xa6, 0x76, 0xcd, 0x40, 0x26, 0x46, 0x2d, 0xb8,
	0xcc, 0x46, 0x4a, 0x93, 0x91, 0x47, 0xed, 0x25, 0x93, 0x9f, 0x9f, 0xd1, 0x4d, 0x08, 0x85, 0x64,
	0x31, 0xd1, 0xb4, 0xcf, 0x84, 0x5d, 0x37, 0x68, 0x23, 0xcb, 0x3c, 0x11, 0x9d, 0xcf, 0x00, 0x36,
	0xb7, 0x43, 0x3e, 0x20, 0xe1, 0x5c, 0xce, 0x7d, 0x78, 0xd1, 0x8b, 0xfa, 0x33, 0xe2, 0x7e, 0x41,
	0x16, 0x2c, 0x48, 0x82, 0x5e, 0xb4, 0xc3, 0x34, 0x7d, 0x36, 0x13, 0xa6, 0x60, 0x23, 0xe4, 0xe9,
	0x6c, 0xca, 0xb6, 0xda, 0xd5, 0xf5, 0x95, 0xcd, 0xc7, 0xce, 0xf9, 0x97, 0xc2, 0xd9, 0xca, 0xd3,
	0x4f, 0x33, 0x9e, 0xee, 0x55, 0x73, 0xd7, 0x07, 0x60, 0x5d, 0xde, 0x3c, 0x8d, 0x6c, 0xd0, 0xcb,
	0xef, 0xe9, 0xfc, 0xb0, 0xe0, 0x95, 0x05, 0x8d, 0xa8, 0x05, 0x2d, 0xe6, 0x2f, 0x18, 0xd8, 0x62,
	0x3e, 0xba, 0x53, 0x30, 0xc9, 0x3a, 0x53, 0x91, 0x1b, 0xb6, 0x06, 0x97, 0x87, 0x5c, 0x69, 0x23,
	0xdd, 0xf8, 0xdf, 0x6d, 0xcc, 0xea, 0x6a, 0xd2, 0x1a, 0x82, 0xde, 0x1c, 0x42, 0x77, 0x61, 0x23,
	0xb7, 0xa8, 0x76, 0x96, 0x4f, 0x9d, 0x1a, 0xb4, 0x0e, 0x21, 0x13, 0x7d, 0xe2, 0xfb, 0x92, 0x2a,
	0x95, 0x7e, 0x9e, 0x39, 0xa3, 0x00, 0xbd, 0x06, 0x13, 0x5b, 0x29, 0x86, 0xf6, 0xe0, 0xa5, 0xf2,
	0x8e, 0x28, 0xbb, 0x6e, 0x0c, 0x7d, 0xf4, 0x3f, 0x86, 0xbe, 0x28, 0x2e, 0x54, 0xc1, 0x4a, 0x58,
	0xb0, 0xb2, 0x59, 0xda, 0x3a, 0xd5, 0x91, 0x70, 0xb5, 0xd4, 0x86, 0x6e, 0xc3, 0x0b, 0xb1, 0xfa,
	0xdb, 0xe7, 0xaf, 0xc7, 0x6a, 0x81, 0x32, 0xeb, 0x1f, 0xca, 0x10, 0xac, 0x09, 0x2e, 0xb5, 0xf1,
	0x73, 0xa9, 0x67, 0xe2, 0xee, 0x47, 0x70, 0x78, 0x84, 0x2b, 0x93, 0x23, 0x5c, 0x39, 0x39, 0xc2,
	0xe0, 0x5d, 0x82, 0xc1, 0xa7, 0x04, 0x83, 0x6f, 0x09, 0x06, 0x87, 0x09, 0x06, 0x93, 0x04, 0x83,
	0x9f, 0x09, 0x06, 0xc7, 0x09, 0xae, 0x9c, 0x24, 0x18, 0xbc, 0x9f, 0xe2, 0xca, 0xc1, 0x14, 0x83,
	0xc3, 0x29, 0xae, 0x4c, 0xa6, 0xb8, 0xf2, 0xf2, 0x55, 0xc0, 0xc5, 0xeb, 0xc0, 0x89, 0x79, 0xa8,
	0xa9, 0x94, 0xc4, 0x19, 0x2b, 0xd7, 0x04, 0xbb, 0x5c, 0x46, 0x1b, 0x42, 0xf2, 0x98, 0xf9, 0x54,
	0x6e, 0x9c, 0xc2, 0xae, 0x18, 0x04, 0xdc, 0xa5, 0x7b, 0x3a, 0x7b, 0xd5, 0xe7, 0xf8, 0xcd, 0x0d,
	0xea, 0xe6, 0xb5, 0x3f, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x71, 0xd9, 0xe7, 0x95, 0x1b, 0x05,
	0x00, 0x00,
}

func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.VirtualServer != that1.VirtualServer {
		return false
	}
	if this.Application != that1.Application {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.PrivateIp != that1.PrivateIp {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmSiteName != that1.CmSiteName {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationLocation)
	if !ok {
		that2, ok := that.(ApplicationLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Instance != that1.Instance {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if len(this.VirtualServers) != len(that1.VirtualServers) {
		return false
	}
	for i := range this.VirtualServers {
		if !this.VirtualServers[i].Equal(that1.VirtualServers[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualServer)
	if !ok {
		that2, ok := that.(VirtualServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VsName != that1.VsName {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&discovered.GetSpecType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "VirtualServer: "+fmt.Sprintf("%#v", this.VirtualServer)+",\n")
	s = append(s, "Application: "+fmt.Sprintf("%#v", this.Application)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	s = append(s, "PrivateIp: "+fmt.Sprintf("%#v", this.PrivateIp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered.GlobalSpecType{")
	s = append(s, "CmSiteName: "+fmt.Sprintf("%#v", this.CmSiteName)+",\n")
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationLocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&discovered.ApplicationLocation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	if this.VirtualServers != nil {
		s = append(s, "VirtualServers: "+fmt.Sprintf("%#v", this.VirtualServers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&discovered.VirtualServer{")
	s = append(s, "VsName: "+fmt.Sprintf("%#v", this.VsName)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VirtualServer) > 0 {
		i -= len(m.VirtualServer)
		copy(dAtA[i:], m.VirtualServer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VirtualServer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CmSiteName) > 0 {
		i -= len(m.CmSiteName)
		copy(dAtA[i:], m.CmSiteName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CmSiteName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualServers) > 0 {
		for iNdEx := len(m.VirtualServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VsName) > 0 {
		i -= len(m.VsName)
		copy(dAtA[i:], m.VsName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VirtualServer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CmSiteName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VirtualServers) > 0 {
		for _, e := range m.VirtualServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VirtualServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VsName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`VirtualServer:` + fmt.Sprintf("%v", this.VirtualServer) + `,`,
		`Application:` + fmt.Sprintf("%v", this.Application) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`PrivateIp:` + fmt.Sprintf("%v", this.PrivateIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*ApplicationLocation{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(f.String(), "ApplicationLocation", "ApplicationLocation", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`CmSiteName:` + fmt.Sprintf("%v", this.CmSiteName) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationLocation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualServers := "[]*VirtualServer{"
	for _, f := range this.VirtualServers {
		repeatedStringForVirtualServers += strings.Replace(f.String(), "VirtualServer", "VirtualServer", 1) + ","
	}
	repeatedStringForVirtualServers += "}"
	s := strings.Join([]string{`&ApplicationLocation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`VirtualServers:` + repeatedStringForVirtualServers + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualServer{`,
		`VsName:` + fmt.Sprintf("%v", this.VsName) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmSiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmSiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &ApplicationLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualServers = append(m.VirtualServers, &VirtualServer{})
			if err := m.VirtualServers[len(m.VirtualServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/application/discovered/public_customapi.proto

// Discovered CM Application Object
//
// x-displayName: "Discovered CM Application"
// Discovered CM Application Object. It contains info about
// a Discovered App Managed by a BIP-IP Central Manager (CM).

package discovered

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ListRequest is used to get a collection of Discovered UZTNA Apps
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC. Fields can be used to control
// scope and filtering of collection.
type ListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of Discovered UZTNA Apps
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// label_filter
	//
	// x-displayName: "Label Filter"
	// x-example: "site-name in (cm01-eastern-us, cm01-western-us)"
	// A LabelSelectorType expression that every item in list response will satisfy
	LabelFilter string `protobuf:"bytes,2,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc52d3576d570aef, []int{0}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListRequest) GetLabelFilter() string {
	if m != nil {
		return m.LabelFilter
	}
	return ""
}

// ListResponse is the collection of Discovered UZTNA Apps
//
// x-displayName: "List Response"
// This is the output message of 'List' RPC.
type ListResponse struct {
	// items
	//
	// x-displayName: "Items"
	// items represents the collection in response
	Items []*GetSpecType `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc52d3576d570aef, []int{1}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*GetSpecType {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.uztna.application.discovered.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.uztna.application.discovered.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.uztna.application.discovered.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.uztna.application.discovered.ListResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/application/discovered/public_customapi.proto", fileDescriptor_cc52d3576d570aef)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/uztna/application/discovered/public_customapi.proto", fileDescriptor_cc52d3576d570aef)
}

var fileDescriptor_cc52d3576d570aef = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0x77, 0x92, 0xff, 0x5f, 0xc8, 0xa6, 0xa7, 0x3d, 0x85, 0x58, 0x86, 0x9a, 0x53, 0x11,
	0x76, 0x06, 0x2a, 0x58, 0x0f, 0x22, 0x54, 0x41, 0x11, 0x54, 0x24, 0x7a, 0x12, 0xa4, 0xce, 0x6e,
	0xde, 0x6c, 0x47, 0x77, 0xf7, 0x1d, 0x67, 0x66, 0x17, 0xab, 0x08, 0xd2, 0x4f, 0x20, 0x78, 0xf3,
	0x13, 0xf8, 0x11, 0x04, 0x2f, 0xbd, 0xd9, 0x93, 0x04, 0xbc, 0xf4, 0x68, 0x36, 0x1e, 0x7a, 0xec,
	0x07, 0xf0, 0x20, 0x99, 0x4d, 0xda, 0x04, 0x2f, 0xcd, 0xed, 0x9d, 0xf7, 0xdd, 0xe7, 0x37, 0xf3,
	0xee, 0xf3, 0xf8, 0x3b, 0x25, 0x18, 0x26, 0x91, 0x9b, 0x78, 0x0f, 0x32, 0xc1, 0x8b, 0xb7, 0x36,
	0x17, 0x5c, 0x28, 0x95, 0xca, 0x58, 0x58, 0x89, 0x39, 0x1f, 0x48, 0x13, 0x63, 0x09, 0x1a, 0x06,
	0x5c, 0x15, 0x51, 0x2a, 0xe3, 0xdd, 0xb8, 0x30, 0x16, 0x33, 0xa1, 0x24, 0x53, 0x1a, 0x2d, 0x06,
	0x57, 0x6b, 0x04, 0xab, 0x11, 0xcc, 0x21, 0xd8, 0x02, 0x82, 0x9d, 0x23, 0xba, 0x61, 0x22, 0xed,
	0x5e, 0x11, 0xb1, 0x18, 0x33, 0x9e, 0x60, 0x82, 0xdc, 0x21, 0xa2, 0x62, 0xe8, 0x4e, 0xee, 0xe0,
	0xaa, 0x1a, 0xdd, 0x5d, 0x4f, 0x10, 0x93, 0x14, 0xb8, 0x50, 0x92, 0x8b, 0x3c, 0x47, 0xeb, 0x80,
	0x66, 0x36, 0xed, 0x2e, 0xbf, 0x1d, 0xb4, 0x46, 0x3d, 0x9f, 0x5d, 0x5e, 0x9e, 0xa1, 0x5a, 0x14,
	0x6e, 0xaf, 0xb0, 0x34, 0x46, 0x2f, 0x21, 0xb6, 0x33, 0xe1, 0xf5, 0x15, 0x84, 0x76, 0x5f, 0xc1,
	0xfc, 0xc2, 0xde, 0xb2, 0xae, 0x04, 0x03, 0x79, 0xb9, 0xfc, 0xa8, 0xde, 0x23, 0xbf, 0xfd, 0x40,
	0x1a, 0xdb, 0x87, 0xd7, 0x05, 0x18, 0x1b, 0xac, 0xfb, 0xad, 0x5c, 0x64, 0x60, 0x94, 0x88, 0xa1,
	0x43, 0x36, 0xc8, 0x66, 0xab, 0x7f, 0xde, 0x08, 0xae, 0xf8, 0x6b, 0xa9, 0x88, 0x20, 0xdd, 0x1d,
	0xca, 0xd4, 0x82, 0xee, 0x34, 0xdc, 0x07, 0x6d, 0xd7, 0xbb, 0xeb, 0x5a, 0xbd, 0xe7, 0xfe, 0x5a,
	0xcd, 0x33, 0x0a, 0x73, 0x03, 0xc1, 0x43, 0xff, 0x7f, 0x69, 0x21, 0x33, 0x1d, 0xb2, 0xd1, 0xdc,
	0x6c, 0x6f, 0x6d, 0xb3, 0x8b, 0xdb, 0xc6, 0xee, 0x81, 0x7d, 0xa2, 0x20, 0x7e, 0xba, 0xaf, 0xa0,
	0x5f, 0x53, 0xb6, 0xfe, 0x10, 0xbf, 0x75, 0xc7, 0x25, 0x61, 0xe7, 0xf1, 0xfd, 0x60, 0x4c, 0xfc,
	0xff, 0xa6, 0xb7, 0x05, 0x2b, 0x61, 0x17, 0xf6, 0xed, 0xde, 0x58, 0x5d, 0x58, 0x2f, 0xd6, 0x1b,
	0x1e, 0x7d, 0x6d, 0x90, 0xea, 0x7b, 0x67, 0x1a, 0x87, 0x50, 0x62, 0x28, 0xf3, 0xa1, 0x16, 0xc6,
	0xea, 0x22, 0xb6, 0x85, 0x86, 0x50, 0x83, 0x18, 0x1c, 0xfc, 0xfc, 0xfd, 0xa9, 0x71, 0x2b, 0xb8,
	0x39, 0x8b, 0x30, 0x3f, 0xfb, 0x91, 0x86, 0xbf, 0x3b, 0xab, 0xdf, 0xff, 0xeb, 0xa7, 0x59, 0x30,
	0xb4, 0xdb, 0x3e, 0xfc, 0x46, 0x9a, 0x07, 0x3f, 0x3a, 0xcd, 0x93, 0x06, 0xb9, 0xfd, 0x99, 0x8c,
	0xc6, 0xd4, 0x3b, 0x1e, 0x53, 0xef, 0x74, 0x4c, 0xc9, 0x87, 0x8a, 0x92, 0x2f, 0x15, 0x25, 0x47,
	0x15, 0x25, 0xa3, 0x8a, 0x92, 0x5f, 0x15, 0x25, 0x27, 0x15, 0xf5, 0x4e, 0x2b, 0x4a, 0x3e, 0x4e,
	0xa8, 0x77, 0x38, 0xa1, 0x64, 0x34, 0xa1, 0xde, 0xf1, 0x84, 0x7a, 0xcf, 0x5e, 0x24, 0xa8, 0x5e,
	0x25, 0xac, 0xc4, 0xa9, 0x4d, 0x5a, 0xb0, 0xc2, 0x70, 0x57, 0x0c, 0x51, 0x67, 0xa1, 0xd2, 0x58,
	0xca, 0x01, 0xe8, 0x70, 0x3e, 0xe6, 0x2a, 0x4a, 0x90, 0xc3, 0x1b, 0x3b, 0xcb, 0xce, 0x05, 0xa2,
	0x17, 0x5d, 0x72, 0x89, 0xba, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x32, 0xbe, 0x38, 0xa3, 0xdd,
	0x03, 0x00, 0x00,
}

func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.LabelFilter != that1.LabelFilter {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&discovered.ListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&discovered.ListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// List
	//
	// x-displayName: "List"
	// List the set of Discovered UZTNA Apps in Namespace
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.uztna.application.discovered.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// List
	//
	// x-displayName: "List"
	// List the set of Discovered UZTNA Apps in Namespace
	List(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.uztna.application.discovered.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.uztna.application.discovered.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/uztna/application/discovered/public_customapi.proto",
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelFilter) > 0 {
		i -= len(m.LabelFilter)
		copy(dAtA[i:], m.LabelFilter)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.LabelFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.LabelFilter)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + fmt.Sprintf("%v", this.LabelFilter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*GetSpecType{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "GetSpecType", "GetSpecType", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &GetSpecType{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

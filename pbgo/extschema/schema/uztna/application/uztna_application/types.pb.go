// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/application/uztna_application/types.proto

package uztna_application

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TLS Certificate
//
// x-displayName: "Certificate"
//
// This is used to import or create new certificate for tls communication
type AppCertificate struct {
	// TLS Certificate
	//
	// x-displayName: "TLS Certificate"
	//
	// Select/Add a TLS Certificate object to associate with this Application
	Certificate []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *AppCertificate) Reset()      { *m = AppCertificate{} }
func (*AppCertificate) ProtoMessage() {}
func (*AppCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{0}
}
func (m *AppCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCertificate.Merge(m, src)
}
func (m *AppCertificate) XXX_Size() int {
	return m.Size()
}
func (m *AppCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_AppCertificate proto.InternalMessageInfo

func (m *AppCertificate) GetCertificate() []*schema.ObjectRefType {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// Origin
//
// x-displayName: "Origin"
//
// Shape of Origin Pool and SNAT Pool
type Origin struct {
	// origin_pool
	//
	// x-displayName: "Origin Pool"
	//
	// Origin pool is a view to create cluster and endpoints that can be used in discovery
	// of the Application
	OriginPool []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	// snat_pool
	//
	// x-displayName: "SNAT Pool"
	//
	// A SNAT pool is a collection of IP addresses to be used for source NAT
	// by BIG-IP while sending the Application traffic from TMM to Application server.
	// An address from pool can be used for 63K connections (using different ports) after
	// that another address is used from the pool
	SnatPool []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=snat_pool,json=snatPool,proto3" json:"snat_pool,omitempty"`
}

func (m *Origin) Reset()      { *m = Origin{} }
func (*Origin) ProtoMessage() {}
func (*Origin) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{1}
}
func (m *Origin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Origin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Origin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Origin.Merge(m, src)
}
func (m *Origin) XXX_Size() int {
	return m.Size()
}
func (m *Origin) XXX_DiscardUnknown() {
	xxx_messageInfo_Origin.DiscardUnknown(m)
}

var xxx_messageInfo_Origin proto.InternalMessageInfo

func (m *Origin) GetOriginPool() []*schema.ObjectRefType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *Origin) GetSnatPool() []*schema.ObjectRefType {
	if m != nil {
		return m.SnatPool
	}
	return nil
}

// Protocol
//
// x-displayName: "Protocol"
//
// It specifies the possible Protocols
type Protocol struct {
	// Protocol
	//
	// x-displayName: "Protocol"
	// x-required
	// Select a protocol for the Application
	//
	// Types that are valid to be assigned to ProtocolChoice:
	//	*Protocol_HTTP
	//	*Protocol_HTTPS
	//	*Protocol_TCP
	//	*Protocol_UDP
	ProtocolChoice isProtocol_ProtocolChoice `protobuf_oneof:"protocol_choice"`
}

func (m *Protocol) Reset()      { *m = Protocol{} }
func (*Protocol) ProtoMessage() {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{2}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

type isProtocol_ProtocolChoice interface {
	isProtocol_ProtocolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Protocol_HTTP struct {
	HTTP *schema.Empty `protobuf:"bytes,2,opt,name=HTTP,proto3,oneof" json:"HTTP,omitempty"`
}
type Protocol_HTTPS struct {
	HTTPS *AppCertificate `protobuf:"bytes,3,opt,name=HTTPS,proto3,oneof" json:"HTTPS,omitempty"`
}
type Protocol_TCP struct {
	TCP *schema.Empty `protobuf:"bytes,4,opt,name=TCP,proto3,oneof" json:"TCP,omitempty"`
}
type Protocol_UDP struct {
	UDP *schema.Empty `protobuf:"bytes,5,opt,name=UDP,proto3,oneof" json:"UDP,omitempty"`
}

func (*Protocol_HTTP) isProtocol_ProtocolChoice()  {}
func (*Protocol_HTTPS) isProtocol_ProtocolChoice() {}
func (*Protocol_TCP) isProtocol_ProtocolChoice()   {}
func (*Protocol_UDP) isProtocol_ProtocolChoice()   {}

func (m *Protocol) GetProtocolChoice() isProtocol_ProtocolChoice {
	if m != nil {
		return m.ProtocolChoice
	}
	return nil
}

func (m *Protocol) GetHTTP() *schema.Empty {
	if x, ok := m.GetProtocolChoice().(*Protocol_HTTP); ok {
		return x.HTTP
	}
	return nil
}

func (m *Protocol) GetHTTPS() *AppCertificate {
	if x, ok := m.GetProtocolChoice().(*Protocol_HTTPS); ok {
		return x.HTTPS
	}
	return nil
}

func (m *Protocol) GetTCP() *schema.Empty {
	if x, ok := m.GetProtocolChoice().(*Protocol_TCP); ok {
		return x.TCP
	}
	return nil
}

func (m *Protocol) GetUDP() *schema.Empty {
	if x, ok := m.GetProtocolChoice().(*Protocol_UDP); ok {
		return x.UDP
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Protocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Protocol_HTTP)(nil),
		(*Protocol_HTTPS)(nil),
		(*Protocol_TCP)(nil),
		(*Protocol_UDP)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "GlobalSpecType"
//
// Defines shape of the Application
type GlobalSpecType struct {
	// URL for the Application
	//
	// x-displayName: "URL"
	// x-required
	// x-example: "test.f5net.com"
	// Hostname of the Application to be onboarded
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// port
	//
	// x-displayName: "Port"
	// x-required
	// x-example: "443"
	// The Port on which the Application listens on
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	//
	// Protocol used by the Application for communication
	Protocol *Protocol `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// ApplicationTags
	//
	// x-displayName: "Tags"
	// x-required
	// ZTNA Application tags to associate with Application
	AppTags []string `protobuf:"bytes,4,rep,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	// Location
	//
	// x-displayName: "Location"
	// x-required
	// BIG-IP Next site to deploy the Application onto
	Location []*schema.ObjectRefType `protobuf:"bytes,5,rep,name=location,proto3" json:"location,omitempty"`
	// Origin
	//
	// x-displayName: "Origin"
	//
	// Origin contains the list of the Origin and SNAT Pools.
	// Origin Pool is the collection of endpoints of the Application server.
	// SNAT pool is used to configure the SNAT Pool IPs
	Origin *Origin `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	// VIP Address
	//
	// x-displayName: "Application VIP Address"
	//
	// This IP Address is used to create internal virtual server
	// for the Application on TMM
	ApplicationVip *schema.IpAddressType `protobuf:"bytes,7,opt,name=application_vip,json=applicationVip,proto3" json:"application_vip,omitempty"`
	// Extended Tags
	//
	// x-displayName: "Extended Tags from Application Group"
	//
	// Application tags updated from the Application group
	ExtendedAppTags []string `protobuf:"bytes,8,rep,name=extended_app_tags,json=extendedAppTags,proto3" json:"extended_app_tags,omitempty"`
	// Application Virtual Host Reference
	//
	// x-displayName: "Application Virtual Host Reference"
	// Internal reference to Application VH
	AppVh []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=app_vh,json=appVh,proto3" json:"app_vh,omitempty"`
	// UZTNA Domain Reference
	//
	// x-displayName: "UZTNA Domain Reference"
	// x-required
	// Reference to the UZTNA Domain Non-View Object
	UztnaDomainRef []*schema.ObjectRefType `protobuf:"bytes,10,rep,name=uztna_domain_ref,json=uztnaDomainRef,proto3" json:"uztna_domain_ref,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GlobalSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GlobalSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *GlobalSpecType) GetAppTags() []string {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *GlobalSpecType) GetLocation() []*schema.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GlobalSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *GlobalSpecType) GetApplicationVip() *schema.IpAddressType {
	if m != nil {
		return m.ApplicationVip
	}
	return nil
}

func (m *GlobalSpecType) GetExtendedAppTags() []string {
	if m != nil {
		return m.ExtendedAppTags
	}
	return nil
}

func (m *GlobalSpecType) GetAppVh() []*schema.ObjectRefType {
	if m != nil {
		return m.AppVh
	}
	return nil
}

func (m *GlobalSpecType) GetUztnaDomainRef() []*schema.ObjectRefType {
	if m != nil {
		return m.UztnaDomainRef
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
//
// Shape of the Application's Create Spec
type CreateSpecType struct {
	Url             string                  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Port            uint32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol        *Protocol               `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AppTags         []string                `protobuf:"bytes,4,rep,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Location        []*schema.ObjectRefType `protobuf:"bytes,5,rep,name=location,proto3" json:"location,omitempty"`
	Origin          *Origin                 `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	ApplicationVip  *schema.IpAddressType   `protobuf:"bytes,7,opt,name=application_vip,json=applicationVip,proto3" json:"application_vip,omitempty"`
	ExtendedAppTags []string                `protobuf:"bytes,8,rep,name=extended_app_tags,json=extendedAppTags,proto3" json:"extended_app_tags,omitempty"`
	AppVh           []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=app_vh,json=appVh,proto3" json:"app_vh,omitempty"`
	UztnaDomainRef  []*schema.ObjectRefType `protobuf:"bytes,10,rep,name=uztna_domain_ref,json=uztnaDomainRef,proto3" json:"uztna_domain_ref,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{4}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreateSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CreateSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *CreateSpecType) GetAppTags() []string {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *CreateSpecType) GetLocation() []*schema.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CreateSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CreateSpecType) GetApplicationVip() *schema.IpAddressType {
	if m != nil {
		return m.ApplicationVip
	}
	return nil
}

func (m *CreateSpecType) GetExtendedAppTags() []string {
	if m != nil {
		return m.ExtendedAppTags
	}
	return nil
}

func (m *CreateSpecType) GetAppVh() []*schema.ObjectRefType {
	if m != nil {
		return m.AppVh
	}
	return nil
}

func (m *CreateSpecType) GetUztnaDomainRef() []*schema.ObjectRefType {
	if m != nil {
		return m.UztnaDomainRef
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
//
// Shape of the Application's Replace Spec
type ReplaceSpecType struct {
	Url             string                  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Port            uint32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol        *Protocol               `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AppTags         []string                `protobuf:"bytes,4,rep,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Location        []*schema.ObjectRefType `protobuf:"bytes,5,rep,name=location,proto3" json:"location,omitempty"`
	Origin          *Origin                 `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	ApplicationVip  *schema.IpAddressType   `protobuf:"bytes,7,opt,name=application_vip,json=applicationVip,proto3" json:"application_vip,omitempty"`
	ExtendedAppTags []string                `protobuf:"bytes,8,rep,name=extended_app_tags,json=extendedAppTags,proto3" json:"extended_app_tags,omitempty"`
	AppVh           []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=app_vh,json=appVh,proto3" json:"app_vh,omitempty"`
	UztnaDomainRef  []*schema.ObjectRefType `protobuf:"bytes,10,rep,name=uztna_domain_ref,json=uztnaDomainRef,proto3" json:"uztna_domain_ref,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ReplaceSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ReplaceSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *ReplaceSpecType) GetAppTags() []string {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *ReplaceSpecType) GetLocation() []*schema.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ReplaceSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *ReplaceSpecType) GetApplicationVip() *schema.IpAddressType {
	if m != nil {
		return m.ApplicationVip
	}
	return nil
}

func (m *ReplaceSpecType) GetExtendedAppTags() []string {
	if m != nil {
		return m.ExtendedAppTags
	}
	return nil
}

func (m *ReplaceSpecType) GetAppVh() []*schema.ObjectRefType {
	if m != nil {
		return m.AppVh
	}
	return nil
}

func (m *ReplaceSpecType) GetUztnaDomainRef() []*schema.ObjectRefType {
	if m != nil {
		return m.UztnaDomainRef
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get Specification"
//
// Shape of the Application's Get Spec
type GetSpecType struct {
	Url             string                  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Port            uint32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol        *Protocol               `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AppTags         []string                `protobuf:"bytes,4,rep,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Location        []*schema.ObjectRefType `protobuf:"bytes,5,rep,name=location,proto3" json:"location,omitempty"`
	Origin          *Origin                 `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	ApplicationVip  *schema.IpAddressType   `protobuf:"bytes,7,opt,name=application_vip,json=applicationVip,proto3" json:"application_vip,omitempty"`
	ExtendedAppTags []string                `protobuf:"bytes,8,rep,name=extended_app_tags,json=extendedAppTags,proto3" json:"extended_app_tags,omitempty"`
	AppVh           []*schema.ObjectRefType `protobuf:"bytes,9,rep,name=app_vh,json=appVh,proto3" json:"app_vh,omitempty"`
	UztnaDomainRef  []*schema.ObjectRefType `protobuf:"bytes,10,rep,name=uztna_domain_ref,json=uztnaDomainRef,proto3" json:"uztna_domain_ref,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_da58a048c1512013, []int{6}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GetSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *GetSpecType) GetAppTags() []string {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *GetSpecType) GetLocation() []*schema.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GetSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *GetSpecType) GetApplicationVip() *schema.IpAddressType {
	if m != nil {
		return m.ApplicationVip
	}
	return nil
}

func (m *GetSpecType) GetExtendedAppTags() []string {
	if m != nil {
		return m.ExtendedAppTags
	}
	return nil
}

func (m *GetSpecType) GetAppVh() []*schema.ObjectRefType {
	if m != nil {
		return m.AppVh
	}
	return nil
}

func (m *GetSpecType) GetUztnaDomainRef() []*schema.ObjectRefType {
	if m != nil {
		return m.UztnaDomainRef
	}
	return nil
}

func init() {
	proto.RegisterType((*AppCertificate)(nil), "ves.io.schema.uztna.application.uztna_application.AppCertificate")
	golang_proto.RegisterType((*AppCertificate)(nil), "ves.io.schema.uztna.application.uztna_application.AppCertificate")
	proto.RegisterType((*Origin)(nil), "ves.io.schema.uztna.application.uztna_application.Origin")
	golang_proto.RegisterType((*Origin)(nil), "ves.io.schema.uztna.application.uztna_application.Origin")
	proto.RegisterType((*Protocol)(nil), "ves.io.schema.uztna.application.uztna_application.Protocol")
	golang_proto.RegisterType((*Protocol)(nil), "ves.io.schema.uztna.application.uztna_application.Protocol")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.application.uztna_application.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/application/uztna_application/types.proto", fileDescriptor_da58a048c1512013)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/uztna/application/uztna_application/types.proto", fileDescriptor_da58a048c1512013)
}

var fileDescriptor_da58a048c1512013 = []byte{
	// 1035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6b, 0x1b, 0x47,
	0x14, 0xd6, 0x68, 0x57, 0xf2, 0x7a, 0x9c, 0x5a, 0xf6, 0xb4, 0x4d, 0xd7, 0x8a, 0xd9, 0x18, 0x51,
	0x8a, 0x30, 0x78, 0xe5, 0x26, 0x3e, 0xb8, 0x29, 0x0d, 0xb5, 0xec, 0x10, 0x37, 0x14, 0xa2, 0x6e,
	0xec, 0xb8, 0x0d, 0x94, 0x65, 0xb4, 0x1a, 0xad, 0x26, 0x5d, 0x69, 0x86, 0xdd, 0x91, 0x1a, 0x17,
	0x04, 0x3e, 0xf6, 0x58, 0xf2, 0x3f, 0x14, 0x8a, 0xff, 0x84, 0xaa, 0x07, 0x1f, 0x4b, 0x4e, 0x3e,
	0xea, 0x58, 0xcb, 0x97, 0xf4, 0x96, 0x42, 0x0b, 0xbd, 0xa5, 0xec, 0x0f, 0xc9, 0x2b, 0xa9, 0x09,
	0xb2, 0x21, 0x39, 0xf9, 0x22, 0xed, 0xbc, 0x1f, 0xdf, 0x9b, 0xf7, 0xbd, 0xef, 0x2d, 0x2c, 0xfc,
	0xac, 0x45, 0x3c, 0x9d, 0xb2, 0x82, 0x67, 0xd5, 0x48, 0x1d, 0x17, 0x9a, 0x3f, 0x88, 0x06, 0x2e,
	0x60, 0xce, 0x1d, 0x6a, 0x61, 0x41, 0x59, 0x23, 0xb4, 0x98, 0x71, 0x8b, 0xd8, 0xe7, 0xc4, 0xd3,
	0xb9, 0xcb, 0x04, 0x43, 0x1f, 0x87, 0xe9, 0x7a, 0x98, 0xae, 0x07, 0xc1, 0x7a, 0x2c, 0x58, 0x1f,
	0x4b, 0xcf, 0xae, 0xd8, 0x54, 0xd4, 0x9a, 0x65, 0xdd, 0x62, 0xf5, 0x82, 0xcd, 0x6c, 0x56, 0x08,
	0x90, 0xca, 0xcd, 0x6a, 0x70, 0x0a, 0x0e, 0xc1, 0x53, 0x58, 0x21, 0x7b, 0xdd, 0x66, 0xcc, 0x76,
	0xc8, 0x59, 0x94, 0xa0, 0x75, 0xe2, 0x09, 0x5c, 0xe7, 0x51, 0xc0, 0x07, 0xc3, 0x1d, 0x34, 0x88,
	0x88, 0x1c, 0xd7, 0x86, 0x1d, 0x8c, 0xfb, 0xe5, 0xa3, 0x8b, 0x67, 0x17, 0x86, 0x9d, 0xb1, 0x9e,
	0xb2, 0x8b, 0xc3, 0xae, 0x16, 0x76, 0x68, 0x05, 0x0b, 0x12, 0x79, 0x97, 0x46, 0xbc, 0x94, 0x7c,
	0x6f, 0x0e, 0x43, 0x5f, 0x1f, 0x8f, 0xf0, 0xe2, 0x05, 0x72, 0x8f, 0xe1, 0xec, 0x06, 0xe7, 0x9b,
	0xc4, 0x15, 0xb4, 0xea, 0xb3, 0x42, 0xd0, 0xd7, 0x70, 0xc6, 0x3a, 0x3b, 0xaa, 0x60, 0x49, 0xca,
	0xcf, 0xdc, 0x58, 0xd4, 0x87, 0xc9, 0xbd, 0x5f, 0x7e, 0x4c, 0x2c, 0x61, 0x90, 0xea, 0xce, 0x3e,
	0x27, 0x45, 0xf5, 0xb0, 0x1d, 0xcf, 0xf9, 0xf5, 0xcf, 0x23, 0x29, 0xf5, 0x14, 0x24, 0xe7, 0x80,
	0x11, 0x37, 0xe7, 0x8e, 0x00, 0x4c, 0xdf, 0x77, 0xa9, 0x4d, 0x1b, 0xe8, 0x5b, 0x38, 0xc3, 0x82,
	0x27, 0x93, 0x33, 0xe6, 0x4c, 0x54, 0x44, 0x3b, 0x6c, 0xcf, 0x87, 0x13, 0x8c, 0x65, 0xc6, 0x4a,
	0xc1, 0xd0, 0x5c, 0x62, 0xcc, 0x41, 0x7b, 0x70, 0xda, 0x6b, 0x60, 0x11, 0x82, 0x27, 0x27, 0x00,
	0x5f, 0x3c, 0x6c, 0x67, 0x42, 0xf0, 0x41, 0x5e, 0x1f, 0x5a, 0x05, 0x86, 0xe2, 0x1b, 0x7d, 0xe0,
	0xdc, 0x8f, 0x49, 0xa8, 0x94, 0x7c, 0xe2, 0x2c, 0xe6, 0xa0, 0x65, 0x28, 0x6f, 0xef, 0xec, 0x94,
	0xd4, 0xe4, 0x12, 0xc8, 0xcf, 0xdc, 0x78, 0x6f, 0xa4, 0xc0, 0x9d, 0x3a, 0x17, 0xfb, 0xdb, 0x09,
	0x23, 0x88, 0x41, 0xdf, 0xc0, 0x94, 0xff, 0xff, 0x40, 0x95, 0x82, 0xe0, 0x0d, 0xfd, 0xdc, 0x62,
	0xd5, 0x87, 0xe7, 0xb4, 0x9d, 0x30, 0x42, 0x44, 0x94, 0x87, 0xd2, 0xce, 0x66, 0x49, 0x95, 0x5f,
	0x7b, 0x0b, 0x3f, 0xc4, 0x8f, 0xdc, 0xdd, 0x2a, 0xa9, 0xa9, 0xd7, 0x47, 0xee, 0x6e, 0x95, 0x8a,
	0xd7, 0x60, 0x86, 0x47, 0x6d, 0x9a, 0x56, 0x8d, 0x51, 0x8b, 0x20, 0xe5, 0xa8, 0x03, 0x92, 0xc7,
	0x1d, 0x00, 0xee, 0xc9, 0x0a, 0x98, 0x4b, 0xe6, 0x7e, 0x4b, 0xc3, 0xd9, 0xbb, 0x0e, 0x2b, 0x63,
	0xe7, 0x01, 0x27, 0x96, 0xcf, 0x22, 0xfa, 0x10, 0x4a, 0x4d, 0xd7, 0x9f, 0x26, 0xc8, 0x4f, 0x17,
	0xd1, 0xbf, 0x1d, 0x90, 0xf0, 0x49, 0x9c, 0x76, 0xa7, 0xe6, 0x80, 0x7a, 0x90, 0xac, 0x01, 0xc3,
	0x77, 0xa3, 0x5b, 0x50, 0xe6, 0xcc, 0x15, 0x01, 0x6d, 0xef, 0x14, 0x3f, 0xea, 0x75, 0xc0, 0xfb,
	0x30, 0xb9, 0xbe, 0x0a, 0xe5, 0xf5, 0xd5, 0xe0, 0x77, 0x7d, 0x7d, 0x15, 0x4a, 0x6b, 0x6b, 0x37,
	0xfd, 0x5c, 0x65, 0x39, 0xad, 0xbe, 0x7c, 0x29, 0xe5, 0x81, 0x11, 0xe4, 0xa0, 0x3d, 0xa8, 0xf4,
	0xef, 0x15, 0x31, 0xf9, 0xe9, 0x05, 0x98, 0xec, 0x4f, 0xd0, 0x18, 0x80, 0xa1, 0x35, 0xa8, 0x60,
	0xce, 0x4d, 0x81, 0x6d, 0x4f, 0x95, 0x97, 0xa4, 0xfc, 0x74, 0x71, 0xc1, 0xaf, 0x0f, 0x9f, 0x82,
	0xa9, 0x5c, 0xca, 0x95, 0xd4, 0x83, 0x64, 0x4c, 0x0f, 0x53, 0x98, 0xf3, 0x1d, 0x6c, 0x7b, 0xe8,
	0x11, 0x54, 0x1c, 0x16, 0x82, 0xaa, 0xa9, 0x09, 0x64, 0xb6, 0x74, 0xd8, 0x7e, 0xb7, 0x4c, 0x6d,
	0xca, 0x4d, 0xda, 0xf0, 0x04, 0x6e, 0x58, 0xc4, 0xf4, 0xe8, 0xd0, 0xc2, 0x0c, 0xf0, 0xd0, 0x57,
	0x30, 0x1d, 0x2a, 0x5a, 0x4d, 0x07, 0x8d, 0x7e, 0x72, 0x81, 0x46, 0xc3, 0x6d, 0x33, 0x22, 0x20,
	0x74, 0x0f, 0x66, 0x62, 0x5e, 0xb3, 0x45, 0xb9, 0x3a, 0x15, 0x60, 0x8f, 0xde, 0xfa, 0x0b, 0xbe,
	0x51, 0xa9, 0xb8, 0xc4, 0xf3, 0x82, 0x5b, 0x4b, 0xdd, 0x36, 0x30, 0x66, 0x63, 0x99, 0x0f, 0x29,
	0x47, 0xb7, 0xe1, 0x3c, 0x79, 0x22, 0x48, 0xa3, 0x42, 0x2a, 0xe6, 0x80, 0x39, 0x25, 0x60, 0x0e,
	0x75, 0xdb, 0x60, 0x84, 0x3c, 0x23, 0xd3, 0x0f, 0xde, 0x88, 0xa8, 0xdb, 0x85, 0x69, 0x3f, 0xad,
	0x55, 0x53, 0xa7, 0x27, 0x23, 0xee, 0x4a, 0x8b, 0xba, 0xa2, 0x89, 0x1d, 0xb3, 0xc6, 0x3c, 0xd1,
	0x6d, 0x83, 0xe7, 0x1d, 0x00, 0x62, 0xc4, 0xa5, 0x30, 0xe7, 0x0f, 0x6b, 0x08, 0xc3, 0xb9, 0x90,
	0x86, 0x0a, 0xab, 0x63, 0xda, 0x30, 0x5d, 0x52, 0x55, 0xe1, 0x04, 0x05, 0x16, 0x0e, 0xdb, 0x57,
	0xe2, 0x89, 0x31, 0xe4, 0xd9, 0xc0, 0xbe, 0x15, 0x98, 0x0d, 0x52, 0xbd, 0xb5, 0xf5, 0xac, 0x03,
	0x3e, 0x87, 0x08, 0xca, 0x7e, 0x1f, 0x59, 0x78, 0x26, 0x1c, 0x78, 0x15, 0x2a, 0x5f, 0x46, 0xe3,
	0xf3, 0xed, 0xfd, 0x51, 0x42, 0xd4, 0x7f, 0xef, 0x65, 0x95, 0xfe, 0x50, 0x73, 0x7f, 0xcb, 0x70,
	0x76, 0xd3, 0x25, 0x58, 0x90, 0xc1, 0xfa, 0xcc, 0xc5, 0xd6, 0x27, 0x5c, 0x15, 0x14, 0x5f, 0x95,
	0x37, 0xbd, 0x02, 0x0b, 0xa3, 0x2b, 0x70, 0xa6, 0xf3, 0xd2, 0x39, 0x75, 0x7e, 0xf5, 0xff, 0x75,
	0xfe, 0x66, 0xd5, 0x7d, 0xe7, 0x42, 0xea, 0x1e, 0x13, 0xf6, 0xf2, 0x2b, 0x85, 0x3d, 0x2e, 0xe2,
	0xad, 0x73, 0x89, 0x38, 0x33, 0x22, 0xe2, 0xbe, 0x66, 0xf7, 0x2e, 0xa8, 0xd9, 0xcc, 0x88, 0x66,
	0xc7, 0x94, 0x3a, 0xff, 0xec, 0xf6, 0xc8, 0x2b, 0x3a, 0xf7, 0x8f, 0x0c, 0x33, 0x06, 0xe1, 0x0e,
	0xb6, 0x2e, 0x75, 0x77, 0xa9, 0xbb, 0xb7, 0xa7, 0xbb, 0xbf, 0x64, 0x38, 0x73, 0x97, 0x88, 0x4b,
	0xcd, 0x5d, 0x6a, 0xee, 0x6d, 0x69, 0xae, 0xf8, 0x33, 0x38, 0x3e, 0xd1, 0x12, 0xdd, 0x13, 0x2d,
	0xf1, 0xe2, 0x44, 0x03, 0x07, 0x3d, 0x0d, 0xfc, 0xd2, 0xd3, 0xc0, 0xef, 0x3d, 0x0d, 0x1c, 0xf7,
	0x34, 0xd0, 0xed, 0x69, 0xe0, 0x8f, 0x9e, 0x06, 0x9e, 0xf7, 0xb4, 0xc4, 0x8b, 0x9e, 0x06, 0x7e,
	0x3a, 0xd5, 0x12, 0x47, 0xa7, 0x1a, 0x38, 0x3e, 0xd5, 0x12, 0xdd, 0x53, 0x2d, 0xf1, 0xc8, 0xb6,
	0x19, 0xff, 0xce, 0xd6, 0x5b, 0xcc, 0x11, 0xc4, 0x75, 0xb1, 0xde, 0xf4, 0x0a, 0xc1, 0x43, 0x95,
	0xb9, 0xf5, 0x15, 0xee, 0xb2, 0x16, 0xad, 0x10, 0x77, 0xa5, 0xef, 0x2e, 0xf0, 0xb2, 0xcd, 0x0a,
	0xe4, 0x89, 0x88, 0x3e, 0xb5, 0x26, 0xff, 0x88, 0x2d, 0xa7, 0x03, 0x59, 0xde, 0xfc, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x94, 0xfa, 0xea, 0x21, 0x00, 0x0f, 0x00, 0x00,
}

func (this *AppCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppCertificate)
	if !ok {
		that2, ok := that.(AppCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Certificate) != len(that1.Certificate) {
		return false
	}
	for i := range this.Certificate {
		if !this.Certificate[i].Equal(that1.Certificate[i]) {
			return false
		}
	}
	return true
}
func (this *Origin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Origin)
	if !ok {
		that2, ok := that.(Origin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginPool) != len(that1.OriginPool) {
		return false
	}
	for i := range this.OriginPool {
		if !this.OriginPool[i].Equal(that1.OriginPool[i]) {
			return false
		}
	}
	if len(this.SnatPool) != len(that1.SnatPool) {
		return false
	}
	for i := range this.SnatPool {
		if !this.SnatPool[i].Equal(that1.SnatPool[i]) {
			return false
		}
	}
	return true
}
func (this *Protocol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol)
	if !ok {
		that2, ok := that.(Protocol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProtocolChoice == nil {
		if this.ProtocolChoice != nil {
			return false
		}
	} else if this.ProtocolChoice == nil {
		return false
	} else if !this.ProtocolChoice.Equal(that1.ProtocolChoice) {
		return false
	}
	return true
}
func (this *Protocol_HTTP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_HTTP)
	if !ok {
		that2, ok := that.(Protocol_HTTP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HTTP.Equal(that1.HTTP) {
		return false
	}
	return true
}
func (this *Protocol_HTTPS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_HTTPS)
	if !ok {
		that2, ok := that.(Protocol_HTTPS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HTTPS.Equal(that1.HTTPS) {
		return false
	}
	return true
}
func (this *Protocol_TCP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_TCP)
	if !ok {
		that2, ok := that.(Protocol_TCP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TCP.Equal(that1.TCP) {
		return false
	}
	return true
}
func (this *Protocol_UDP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_UDP)
	if !ok {
		that2, ok := that.(Protocol_UDP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UDP.Equal(that1.UDP) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if len(this.AppTags) != len(that1.AppTags) {
		return false
	}
	for i := range this.AppTags {
		if this.AppTags[i] != that1.AppTags[i] {
			return false
		}
	}
	if len(this.Location) != len(that1.Location) {
		return false
	}
	for i := range this.Location {
		if !this.Location[i].Equal(that1.Location[i]) {
			return false
		}
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	if !this.ApplicationVip.Equal(that1.ApplicationVip) {
		return false
	}
	if len(this.ExtendedAppTags) != len(that1.ExtendedAppTags) {
		return false
	}
	for i := range this.ExtendedAppTags {
		if this.ExtendedAppTags[i] != that1.ExtendedAppTags[i] {
			return false
		}
	}
	if len(this.AppVh) != len(that1.AppVh) {
		return false
	}
	for i := range this.AppVh {
		if !this.AppVh[i].Equal(that1.AppVh[i]) {
			return false
		}
	}
	if len(this.UztnaDomainRef) != len(that1.UztnaDomainRef) {
		return false
	}
	for i := range this.UztnaDomainRef {
		if !this.UztnaDomainRef[i].Equal(that1.UztnaDomainRef[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if len(this.AppTags) != len(that1.AppTags) {
		return false
	}
	for i := range this.AppTags {
		if this.AppTags[i] != that1.AppTags[i] {
			return false
		}
	}
	if len(this.Location) != len(that1.Location) {
		return false
	}
	for i := range this.Location {
		if !this.Location[i].Equal(that1.Location[i]) {
			return false
		}
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	if !this.ApplicationVip.Equal(that1.ApplicationVip) {
		return false
	}
	if len(this.ExtendedAppTags) != len(that1.ExtendedAppTags) {
		return false
	}
	for i := range this.ExtendedAppTags {
		if this.ExtendedAppTags[i] != that1.ExtendedAppTags[i] {
			return false
		}
	}
	if len(this.AppVh) != len(that1.AppVh) {
		return false
	}
	for i := range this.AppVh {
		if !this.AppVh[i].Equal(that1.AppVh[i]) {
			return false
		}
	}
	if len(this.UztnaDomainRef) != len(that1.UztnaDomainRef) {
		return false
	}
	for i := range this.UztnaDomainRef {
		if !this.UztnaDomainRef[i].Equal(that1.UztnaDomainRef[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if len(this.AppTags) != len(that1.AppTags) {
		return false
	}
	for i := range this.AppTags {
		if this.AppTags[i] != that1.AppTags[i] {
			return false
		}
	}
	if len(this.Location) != len(that1.Location) {
		return false
	}
	for i := range this.Location {
		if !this.Location[i].Equal(that1.Location[i]) {
			return false
		}
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	if !this.ApplicationVip.Equal(that1.ApplicationVip) {
		return false
	}
	if len(this.ExtendedAppTags) != len(that1.ExtendedAppTags) {
		return false
	}
	for i := range this.ExtendedAppTags {
		if this.ExtendedAppTags[i] != that1.ExtendedAppTags[i] {
			return false
		}
	}
	if len(this.AppVh) != len(that1.AppVh) {
		return false
	}
	for i := range this.AppVh {
		if !this.AppVh[i].Equal(that1.AppVh[i]) {
			return false
		}
	}
	if len(this.UztnaDomainRef) != len(that1.UztnaDomainRef) {
		return false
	}
	for i := range this.UztnaDomainRef {
		if !this.UztnaDomainRef[i].Equal(that1.UztnaDomainRef[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if len(this.AppTags) != len(that1.AppTags) {
		return false
	}
	for i := range this.AppTags {
		if this.AppTags[i] != that1.AppTags[i] {
			return false
		}
	}
	if len(this.Location) != len(that1.Location) {
		return false
	}
	for i := range this.Location {
		if !this.Location[i].Equal(that1.Location[i]) {
			return false
		}
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	if !this.ApplicationVip.Equal(that1.ApplicationVip) {
		return false
	}
	if len(this.ExtendedAppTags) != len(that1.ExtendedAppTags) {
		return false
	}
	for i := range this.ExtendedAppTags {
		if this.ExtendedAppTags[i] != that1.ExtendedAppTags[i] {
			return false
		}
	}
	if len(this.AppVh) != len(that1.AppVh) {
		return false
	}
	for i := range this.AppVh {
		if !this.AppVh[i].Equal(that1.AppVh[i]) {
			return false
		}
	}
	if len(this.UztnaDomainRef) != len(that1.UztnaDomainRef) {
		return false
	}
	for i := range this.UztnaDomainRef {
		if !this.UztnaDomainRef[i].Equal(that1.UztnaDomainRef[i]) {
			return false
		}
	}
	return true
}
func (this *AppCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_application.AppCertificate{")
	if this.Certificate != nil {
		s = append(s, "Certificate: "+fmt.Sprintf("%#v", this.Certificate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Origin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_application.Origin{")
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.SnatPool != nil {
		s = append(s, "SnatPool: "+fmt.Sprintf("%#v", this.SnatPool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Protocol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&uztna_application.Protocol{")
	if this.ProtocolChoice != nil {
		s = append(s, "ProtocolChoice: "+fmt.Sprintf("%#v", this.ProtocolChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Protocol_HTTP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application.Protocol_HTTP{` +
		`HTTP:` + fmt.Sprintf("%#v", this.HTTP) + `}`}, ", ")
	return s
}
func (this *Protocol_HTTPS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application.Protocol_HTTPS{` +
		`HTTPS:` + fmt.Sprintf("%#v", this.HTTPS) + `}`}, ", ")
	return s
}
func (this *Protocol_TCP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application.Protocol_TCP{` +
		`TCP:` + fmt.Sprintf("%#v", this.TCP) + `}`}, ", ")
	return s
}
func (this *Protocol_UDP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application.Protocol_UDP{` +
		`UDP:` + fmt.Sprintf("%#v", this.UDP) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&uztna_application.GlobalSpecType{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	if this.ApplicationVip != nil {
		s = append(s, "ApplicationVip: "+fmt.Sprintf("%#v", this.ApplicationVip)+",\n")
	}
	s = append(s, "ExtendedAppTags: "+fmt.Sprintf("%#v", this.ExtendedAppTags)+",\n")
	if this.AppVh != nil {
		s = append(s, "AppVh: "+fmt.Sprintf("%#v", this.AppVh)+",\n")
	}
	if this.UztnaDomainRef != nil {
		s = append(s, "UztnaDomainRef: "+fmt.Sprintf("%#v", this.UztnaDomainRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&uztna_application.CreateSpecType{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	if this.ApplicationVip != nil {
		s = append(s, "ApplicationVip: "+fmt.Sprintf("%#v", this.ApplicationVip)+",\n")
	}
	s = append(s, "ExtendedAppTags: "+fmt.Sprintf("%#v", this.ExtendedAppTags)+",\n")
	if this.AppVh != nil {
		s = append(s, "AppVh: "+fmt.Sprintf("%#v", this.AppVh)+",\n")
	}
	if this.UztnaDomainRef != nil {
		s = append(s, "UztnaDomainRef: "+fmt.Sprintf("%#v", this.UztnaDomainRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&uztna_application.ReplaceSpecType{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	if this.ApplicationVip != nil {
		s = append(s, "ApplicationVip: "+fmt.Sprintf("%#v", this.ApplicationVip)+",\n")
	}
	s = append(s, "ExtendedAppTags: "+fmt.Sprintf("%#v", this.ExtendedAppTags)+",\n")
	if this.AppVh != nil {
		s = append(s, "AppVh: "+fmt.Sprintf("%#v", this.AppVh)+",\n")
	}
	if this.UztnaDomainRef != nil {
		s = append(s, "UztnaDomainRef: "+fmt.Sprintf("%#v", this.UztnaDomainRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&uztna_application.GetSpecType{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	if this.ApplicationVip != nil {
		s = append(s, "ApplicationVip: "+fmt.Sprintf("%#v", this.ApplicationVip)+",\n")
	}
	s = append(s, "ExtendedAppTags: "+fmt.Sprintf("%#v", this.ExtendedAppTags)+",\n")
	if this.AppVh != nil {
		s = append(s, "AppVh: "+fmt.Sprintf("%#v", this.AppVh)+",\n")
	}
	if this.UztnaDomainRef != nil {
		s = append(s, "UztnaDomainRef: "+fmt.Sprintf("%#v", this.UztnaDomainRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AppCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		for iNdEx := len(m.Certificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Origin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SnatPool) > 0 {
		for iNdEx := len(m.SnatPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnatPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OriginPool) > 0 {
		for iNdEx := len(m.OriginPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolChoice != nil {
		{
			size := m.ProtocolChoice.Size()
			i -= size
			if _, err := m.ProtocolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Protocol_HTTP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_HTTP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HTTP != nil {
		{
			size, err := m.HTTP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Protocol_HTTPS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_HTTPS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HTTPS != nil {
		{
			size, err := m.HTTPS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Protocol_TCP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_TCP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TCP != nil {
		{
			size, err := m.TCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Protocol_UDP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_UDP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UDP != nil {
		{
			size, err := m.UDP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaDomainRef) > 0 {
		for iNdEx := len(m.UztnaDomainRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaDomainRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AppVh) > 0 {
		for iNdEx := len(m.AppVh) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppVh[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ExtendedAppTags) > 0 {
		for iNdEx := len(m.ExtendedAppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtendedAppTags[iNdEx])
			copy(dAtA[i:], m.ExtendedAppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtendedAppTags[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ApplicationVip != nil {
		{
			size, err := m.ApplicationVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Location) > 0 {
		for iNdEx := len(m.Location) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Location[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AppTags) > 0 {
		for iNdEx := len(m.AppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppTags[iNdEx])
			copy(dAtA[i:], m.AppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AppTags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaDomainRef) > 0 {
		for iNdEx := len(m.UztnaDomainRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaDomainRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AppVh) > 0 {
		for iNdEx := len(m.AppVh) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppVh[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ExtendedAppTags) > 0 {
		for iNdEx := len(m.ExtendedAppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtendedAppTags[iNdEx])
			copy(dAtA[i:], m.ExtendedAppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtendedAppTags[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ApplicationVip != nil {
		{
			size, err := m.ApplicationVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Location) > 0 {
		for iNdEx := len(m.Location) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Location[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AppTags) > 0 {
		for iNdEx := len(m.AppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppTags[iNdEx])
			copy(dAtA[i:], m.AppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AppTags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaDomainRef) > 0 {
		for iNdEx := len(m.UztnaDomainRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaDomainRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AppVh) > 0 {
		for iNdEx := len(m.AppVh) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppVh[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ExtendedAppTags) > 0 {
		for iNdEx := len(m.ExtendedAppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtendedAppTags[iNdEx])
			copy(dAtA[i:], m.ExtendedAppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtendedAppTags[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ApplicationVip != nil {
		{
			size, err := m.ApplicationVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Location) > 0 {
		for iNdEx := len(m.Location) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Location[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AppTags) > 0 {
		for iNdEx := len(m.AppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppTags[iNdEx])
			copy(dAtA[i:], m.AppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AppTags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaDomainRef) > 0 {
		for iNdEx := len(m.UztnaDomainRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaDomainRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AppVh) > 0 {
		for iNdEx := len(m.AppVh) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppVh[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ExtendedAppTags) > 0 {
		for iNdEx := len(m.ExtendedAppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExtendedAppTags[iNdEx])
			copy(dAtA[i:], m.ExtendedAppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtendedAppTags[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ApplicationVip != nil {
		{
			size, err := m.ApplicationVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Location) > 0 {
		for iNdEx := len(m.Location) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Location[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AppTags) > 0 {
		for iNdEx := len(m.AppTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppTags[iNdEx])
			copy(dAtA[i:], m.AppTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AppTags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		for _, e := range m.Certificate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginPool) > 0 {
		for _, e := range m.OriginPool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SnatPool) > 0 {
		for _, e := range m.SnatPool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolChoice != nil {
		n += m.ProtocolChoice.Size()
	}
	return n
}

func (m *Protocol_HTTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HTTP != nil {
		l = m.HTTP.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Protocol_HTTPS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HTTPS != nil {
		l = m.HTTPS.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Protocol_TCP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TCP != nil {
		l = m.TCP.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Protocol_UDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UDP != nil {
		l = m.UDP.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AppTags) > 0 {
		for _, s := range m.AppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Location) > 0 {
		for _, e := range m.Location {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApplicationVip != nil {
		l = m.ApplicationVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ExtendedAppTags) > 0 {
		for _, s := range m.ExtendedAppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AppVh) > 0 {
		for _, e := range m.AppVh {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaDomainRef) > 0 {
		for _, e := range m.UztnaDomainRef {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AppTags) > 0 {
		for _, s := range m.AppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Location) > 0 {
		for _, e := range m.Location {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApplicationVip != nil {
		l = m.ApplicationVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ExtendedAppTags) > 0 {
		for _, s := range m.ExtendedAppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AppVh) > 0 {
		for _, e := range m.AppVh {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaDomainRef) > 0 {
		for _, e := range m.UztnaDomainRef {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AppTags) > 0 {
		for _, s := range m.AppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Location) > 0 {
		for _, e := range m.Location {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApplicationVip != nil {
		l = m.ApplicationVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ExtendedAppTags) > 0 {
		for _, s := range m.ExtendedAppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AppVh) > 0 {
		for _, e := range m.AppVh {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaDomainRef) > 0 {
		for _, e := range m.UztnaDomainRef {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AppTags) > 0 {
		for _, s := range m.AppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Location) > 0 {
		for _, e := range m.Location {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApplicationVip != nil {
		l = m.ApplicationVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ExtendedAppTags) > 0 {
		for _, s := range m.ExtendedAppTags {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AppVh) > 0 {
		for _, e := range m.AppVh {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaDomainRef) > 0 {
		for _, e := range m.UztnaDomainRef {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppCertificate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificate := "[]*ObjectRefType{"
	for _, f := range this.Certificate {
		repeatedStringForCertificate += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForCertificate += "}"
	s := strings.Join([]string{`&AppCertificate{`,
		`Certificate:` + repeatedStringForCertificate + `,`,
		`}`,
	}, "")
	return s
}
func (this *Origin) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPool := "[]*ObjectRefType{"
	for _, f := range this.OriginPool {
		repeatedStringForOriginPool += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForOriginPool += "}"
	repeatedStringForSnatPool := "[]*ObjectRefType{"
	for _, f := range this.SnatPool {
		repeatedStringForSnatPool += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForSnatPool += "}"
	s := strings.Join([]string{`&Origin{`,
		`OriginPool:` + repeatedStringForOriginPool + `,`,
		`SnatPool:` + repeatedStringForSnatPool + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol{`,
		`ProtocolChoice:` + fmt.Sprintf("%v", this.ProtocolChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_HTTP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_HTTP{`,
		`HTTP:` + strings.Replace(fmt.Sprintf("%v", this.HTTP), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_HTTPS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_HTTPS{`,
		`HTTPS:` + strings.Replace(fmt.Sprintf("%v", this.HTTPS), "AppCertificate", "AppCertificate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_TCP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_TCP{`,
		`TCP:` + strings.Replace(fmt.Sprintf("%v", this.TCP), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_UDP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_UDP{`,
		`UDP:` + strings.Replace(fmt.Sprintf("%v", this.UDP), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocation := "[]*ObjectRefType{"
	for _, f := range this.Location {
		repeatedStringForLocation += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForLocation += "}"
	repeatedStringForAppVh := "[]*ObjectRefType{"
	for _, f := range this.AppVh {
		repeatedStringForAppVh += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppVh += "}"
	repeatedStringForUztnaDomainRef := "[]*ObjectRefType{"
	for _, f := range this.UztnaDomainRef {
		repeatedStringForUztnaDomainRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaDomainRef += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + fmt.Sprintf("%v", this.AppTags) + `,`,
		`Location:` + repeatedStringForLocation + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`ApplicationVip:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationVip), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`ExtendedAppTags:` + fmt.Sprintf("%v", this.ExtendedAppTags) + `,`,
		`AppVh:` + repeatedStringForAppVh + `,`,
		`UztnaDomainRef:` + repeatedStringForUztnaDomainRef + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocation := "[]*ObjectRefType{"
	for _, f := range this.Location {
		repeatedStringForLocation += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForLocation += "}"
	repeatedStringForAppVh := "[]*ObjectRefType{"
	for _, f := range this.AppVh {
		repeatedStringForAppVh += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppVh += "}"
	repeatedStringForUztnaDomainRef := "[]*ObjectRefType{"
	for _, f := range this.UztnaDomainRef {
		repeatedStringForUztnaDomainRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaDomainRef += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + fmt.Sprintf("%v", this.AppTags) + `,`,
		`Location:` + repeatedStringForLocation + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`ApplicationVip:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationVip), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`ExtendedAppTags:` + fmt.Sprintf("%v", this.ExtendedAppTags) + `,`,
		`AppVh:` + repeatedStringForAppVh + `,`,
		`UztnaDomainRef:` + repeatedStringForUztnaDomainRef + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocation := "[]*ObjectRefType{"
	for _, f := range this.Location {
		repeatedStringForLocation += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForLocation += "}"
	repeatedStringForAppVh := "[]*ObjectRefType{"
	for _, f := range this.AppVh {
		repeatedStringForAppVh += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppVh += "}"
	repeatedStringForUztnaDomainRef := "[]*ObjectRefType{"
	for _, f := range this.UztnaDomainRef {
		repeatedStringForUztnaDomainRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaDomainRef += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + fmt.Sprintf("%v", this.AppTags) + `,`,
		`Location:` + repeatedStringForLocation + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`ApplicationVip:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationVip), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`ExtendedAppTags:` + fmt.Sprintf("%v", this.ExtendedAppTags) + `,`,
		`AppVh:` + repeatedStringForAppVh + `,`,
		`UztnaDomainRef:` + repeatedStringForUztnaDomainRef + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocation := "[]*ObjectRefType{"
	for _, f := range this.Location {
		repeatedStringForLocation += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForLocation += "}"
	repeatedStringForAppVh := "[]*ObjectRefType{"
	for _, f := range this.AppVh {
		repeatedStringForAppVh += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppVh += "}"
	repeatedStringForUztnaDomainRef := "[]*ObjectRefType{"
	for _, f := range this.UztnaDomainRef {
		repeatedStringForUztnaDomainRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaDomainRef += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + fmt.Sprintf("%v", this.AppTags) + `,`,
		`Location:` + repeatedStringForLocation + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`ApplicationVip:` + strings.Replace(fmt.Sprintf("%v", this.ApplicationVip), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`ExtendedAppTags:` + fmt.Sprintf("%v", this.ExtendedAppTags) + `,`,
		`AppVh:` + repeatedStringForAppVh + `,`,
		`UztnaDomainRef:` + repeatedStringForUztnaDomainRef + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate, &schema.ObjectRefType{})
			if err := m.Certificate[len(m.Certificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Origin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Origin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Origin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPool = append(m.OriginPool, &schema.ObjectRefType{})
			if err := m.OriginPool[len(m.OriginPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnatPool = append(m.SnatPool, &schema.ObjectRefType{})
			if err := m.SnatPool[len(m.SnatPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_HTTP{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppCertificate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_HTTPS{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_TCP{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_UDP{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTags = append(m.AppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, &schema.ObjectRefType{})
			if err := m.Location[len(m.Location)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationVip == nil {
				m.ApplicationVip = &schema.IpAddressType{}
			}
			if err := m.ApplicationVip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedAppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedAppTags = append(m.ExtendedAppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVh = append(m.AppVh, &schema.ObjectRefType{})
			if err := m.AppVh[len(m.AppVh)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaDomainRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaDomainRef = append(m.UztnaDomainRef, &schema.ObjectRefType{})
			if err := m.UztnaDomainRef[len(m.UztnaDomainRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTags = append(m.AppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, &schema.ObjectRefType{})
			if err := m.Location[len(m.Location)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationVip == nil {
				m.ApplicationVip = &schema.IpAddressType{}
			}
			if err := m.ApplicationVip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedAppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedAppTags = append(m.ExtendedAppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVh = append(m.AppVh, &schema.ObjectRefType{})
			if err := m.AppVh[len(m.AppVh)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaDomainRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaDomainRef = append(m.UztnaDomainRef, &schema.ObjectRefType{})
			if err := m.UztnaDomainRef[len(m.UztnaDomainRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTags = append(m.AppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, &schema.ObjectRefType{})
			if err := m.Location[len(m.Location)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationVip == nil {
				m.ApplicationVip = &schema.IpAddressType{}
			}
			if err := m.ApplicationVip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedAppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedAppTags = append(m.ExtendedAppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVh = append(m.AppVh, &schema.ObjectRefType{})
			if err := m.AppVh[len(m.AppVh)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaDomainRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaDomainRef = append(m.UztnaDomainRef, &schema.ObjectRefType{})
			if err := m.UztnaDomainRef[len(m.UztnaDomainRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTags = append(m.AppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, &schema.ObjectRefType{})
			if err := m.Location[len(m.Location)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationVip == nil {
				m.ApplicationVip = &schema.IpAddressType{}
			}
			if err := m.ApplicationVip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedAppTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedAppTags = append(m.ExtendedAppTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVh = append(m.AppVh, &schema.ObjectRefType{})
			if err := m.AppVh[len(m.AppVh)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaDomainRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaDomainRef = append(m.UztnaDomainRef, &schema.ObjectRefType{})
			if err := m.UztnaDomainRef[len(m.UztnaDomainRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/application/uztna_application_group/types.proto

package uztna_application_group

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_domain"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Application
//
// x-displayName: "Applications"
//
// List of applications
type Applications struct {
	// List of Existing Applications
	//
	// x-displayName: "Applications"
	// x-required
	// Select/Add one or more Application objects to associate with this Application Group
	AppList []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=app_list,json=appList,proto3" json:"app_list,omitempty"`
}

func (m *Applications) Reset()      { *m = Applications{} }
func (*Applications) ProtoMessage() {}
func (*Applications) Descriptor() ([]byte, []int) {
	return fileDescriptor_83a81cd2d1fe1f80, []int{0}
}
func (m *Applications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Applications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applications.Merge(m, src)
}
func (m *Applications) XXX_Size() int {
	return m.Size()
}
func (m *Applications) XXX_DiscardUnknown() {
	xxx_messageInfo_Applications.DiscardUnknown(m)
}

var xxx_messageInfo_Applications proto.InternalMessageInfo

func (m *Applications) GetAppList() []*schema.ObjectRefType {
	if m != nil {
		return m.AppList
	}
	return nil
}

// Application Tag
//
// x-displayName: "Tags"
//
// Application Tag for Application Group
type ApplicationTags struct {
	// ApplicationTag
	//
	// x-displayName: "Tags"
	// x-required
	// Application Tag for Application Group
	ApptagList []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=apptag_list,json=apptagList,proto3" json:"apptag_list,omitempty"`
}

func (m *ApplicationTags) Reset()      { *m = ApplicationTags{} }
func (*ApplicationTags) ProtoMessage() {}
func (*ApplicationTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_83a81cd2d1fe1f80, []int{1}
}
func (m *ApplicationTags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationTags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationTags.Merge(m, src)
}
func (m *ApplicationTags) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationTags) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationTags.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationTags proto.InternalMessageInfo

func (m *ApplicationTags) GetApptagList() []*schema.ObjectRefType {
	if m != nil {
		return m.ApptagList
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
//
// Shape of the UZTNA Application Group
type GlobalSpecType struct {
	// ApplicationTags
	//
	// x-displayName: "Tags"
	// x-required
	// List of Valid Application Tags to be tagged for the list of Applications
	AppTags *ApplicationTags `protobuf:"bytes,1,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	// Applications
	//
	// x-displayName: "Applications"
	// x-required
	// List of Applications to be Grouped.
	Apps *Applications `protobuf:"bytes,2,opt,name=apps,proto3" json:"apps,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_83a81cd2d1fe1f80, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *GlobalSpecType) GetApps() *Applications {
	if m != nil {
		return m.Apps
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
//
// Shape of the UZTNA Application Group
type CreateSpecType struct {
	AppTags *ApplicationTags `protobuf:"bytes,1,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Apps    *Applications    `protobuf:"bytes,2,opt,name=apps,proto3" json:"apps,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_83a81cd2d1fe1f80, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *CreateSpecType) GetApps() *Applications {
	if m != nil {
		return m.Apps
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
//
// Shape of the UZTNA Application Group
type ReplaceSpecType struct {
	AppTags *ApplicationTags `protobuf:"bytes,1,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Apps    *Applications    `protobuf:"bytes,2,opt,name=apps,proto3" json:"apps,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_83a81cd2d1fe1f80, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *ReplaceSpecType) GetApps() *Applications {
	if m != nil {
		return m.Apps
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get Specification"
//
// Shape of the UZTNA Application Group
type GetSpecType struct {
	AppTags *ApplicationTags `protobuf:"bytes,1,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Apps    *Applications    `protobuf:"bytes,2,opt,name=apps,proto3" json:"apps,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_83a81cd2d1fe1f80, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *GetSpecType) GetApps() *Applications {
	if m != nil {
		return m.Apps
	}
	return nil
}

func init() {
	proto.RegisterType((*Applications)(nil), "ves.io.schema.uztna.application.uztna_application_group.Applications")
	proto.RegisterType((*ApplicationTags)(nil), "ves.io.schema.uztna.application.uztna_application_group.ApplicationTags")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.application.uztna_application_group.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.application.uztna_application_group.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.application.uztna_application_group.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.application.uztna_application_group.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/application/uztna_application_group/types.proto", fileDescriptor_83a81cd2d1fe1f80)
}

var fileDescriptor_83a81cd2d1fe1f80 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0xf7, 0xb5, 0x55, 0xeb, 0x44, 0x5a, 0x1a, 0x50, 0x62, 0x2c, 0x63, 0xc8, 0x29, 0x87,
	0x64, 0x96, 0xc6, 0x83, 0xe0, 0xa1, 0x60, 0x8b, 0xd4, 0x83, 0x20, 0xc4, 0x5e, 0xf4, 0x12, 0x5e,
	0x36, 0x93, 0x75, 0xed, 0x26, 0xf3, 0xd8, 0x99, 0xac, 0x56, 0xa8, 0xf8, 0x11, 0xc4, 0xaf, 0xe0,
	0x45, 0xfa, 0x11, 0xf4, 0x22, 0x9e, 0xc4, 0x53, 0x8e, 0x3d, 0x36, 0x1b, 0x0f, 0x7a, 0x2b, 0x1e,
	0x3d, 0x49, 0x76, 0x53, 0xdc, 0x4d, 0x2a, 0xa8, 0x78, 0xca, 0x6d, 0x98, 0xff, 0x9b, 0xff, 0x6f,
	0xfe, 0xf3, 0x96, 0xb7, 0x6c, 0x3b, 0x94, 0x5a, 0x78, 0xca, 0xd6, 0xce, 0x63, 0xd9, 0x45, 0xbb,
	0xff, 0xdc, 0xf4, 0xd0, 0x46, 0x22, 0xdf, 0x73, 0xd0, 0x78, 0xaa, 0x97, 0xec, 0x34, 0x53, 0x3b,
	0x4d, 0x37, 0x50, 0x7d, 0xb2, 0xcd, 0x3e, 0x49, 0x2d, 0x28, 0x50, 0x46, 0xe5, 0x6f, 0x26, 0x26,
	0x22, 0x31, 0x11, 0xf1, 0x11, 0x91, 0x3a, 0x22, 0x7e, 0x63, 0x52, 0xbc, 0x96, 0xa5, 0x2b, 0x1a,
	0x6b, 0x13, 0xd7, 0xe2, 0xd5, 0xac, 0x98, 0x02, 0x16, 0xab, 0x67, 0xdd, 0x3a, 0x81, 0xb4, 0x55,
	0x17, 0xbd, 0x5e, 0xa6, 0x7a, 0x3d, 0x5b, 0x1d, 0xa2, 0xef, 0xb5, 0xd1, 0xc8, 0x89, 0x5a, 0x9a,
	0x52, 0x3d, 0xf9, 0xb4, 0x99, 0xbd, 0xc8, 0xf5, 0xd9, 0x0a, 0x9d, 0x06, 0x94, 0x43, 0x76, 0xe9,
	0xf6, 0xaf, 0x6c, 0x3a, 0xdf, 0x61, 0xcb, 0x48, 0xd4, 0xf4, 0x3d, 0x6d, 0x0a, 0x50, 0x5a, 0xac,
	0xe4, 0xea, 0xeb, 0x22, 0xfb, 0x44, 0xf7, 0x5b, 0x4f, 0xa4, 0x63, 0x1a, 0xb2, 0xb3, 0xbb, 0x4f,
	0x72, 0xab, 0x76, 0x78, 0x70, 0x65, 0xf6, 0x89, 0xc6, 0x9c, 0x77, 0xdf, 0x3e, 0x2c, 0x9e, 0x7b,
	0x0d, 0x0b, 0xcb, 0x70, 0xba, 0x2a, 0x40, 0xe3, 0x02, 0x12, 0xdd, 0xf3, 0xb4, 0x29, 0xbf, 0x60,
	0xab, 0x29, 0xee, 0x2e, 0xba, 0x3a, 0xbf, 0xc7, 0x72, 0x48, 0x64, 0xd0, 0xfd, 0x73, 0x7a, 0xf5,
	0xf0, 0xe0, 0xf2, 0x2c, 0xdd, 0xa0, 0x7b, 0x26, 0x9c, 0x25, 0xf6, 0x31, 0xff, 0x07, 0xb0, 0x95,
	0x1d, 0x5f, 0xb5, 0xd0, 0x7f, 0x40, 0xd2, 0x19, 0x9b, 0xe5, 0x9d, 0x24, 0xba, 0x41, 0x57, 0x17,
	0xa0, 0x04, 0x95, 0x5c, 0xfd, 0xae, 0xf8, 0xc7, 0xaf, 0x43, 0x4c, 0x65, 0x8b, 0x73, 0xc7, 0x21,
	0x1f, 0xb2, 0x25, 0x24, 0xd2, 0x85, 0x85, 0x18, 0x70, 0xe7, 0x7f, 0x00, 0x74, 0x23, 0xb6, 0xbc,
	0x55, 0xf9, 0xbe, 0xb9, 0xb8, 0x51, 0xad, 0x7f, 0x7c, 0x0f, 0x9c, 0x5d, 0x64, 0x4b, 0x31, 0x0e,
	0x36, 0xd8, 0xda, 0x54, 0x87, 0xa1, 0x5e, 0x1e, 0x01, 0x5b, 0xd9, 0x0e, 0x24, 0x1a, 0x39, 0x37,
	0xe1, 0xd7, 0x3e, 0x6f, 0x4e, 0xf5, 0xb3, 0xfc, 0x05, 0xd8, 0x6a, 0x43, 0x92, 0x8f, 0xce, 0x5c,
	0xc7, 0x3c, 0x06, 0x96, 0xdb, 0x91, 0x66, 0x8e, 0x23, 0x6e, 0xbd, 0x81, 0xc1, 0x90, 0x5b, 0x47,
	0x43, 0x6e, 0x9d, 0x0c, 0x39, 0xbc, 0x8c, 0x38, 0xbc, 0x8d, 0x38, 0x7c, 0x8a, 0x38, 0x0c, 0x22,
	0x0e, 0xc7, 0x11, 0x87, 0xaf, 0x11, 0xb7, 0x4e, 0x22, 0x0e, 0xaf, 0x46, 0xdc, 0x1a, 0x8c, 0xb8,
	0x75, 0x34, 0xe2, 0xd6, 0xa3, 0xae, 0xab, 0x68, 0xcf, 0x15, 0xa1, 0xf2, 0x8d, 0x0c, 0x02, 0x14,
	0x7d, 0x6d, 0xc7, 0x8b, 0x8e, 0x0a, 0xba, 0x35, 0x0a, 0x54, 0xe8, 0xb5, 0x65, 0x50, 0x3b, 0x95,
	0x6d, 0x6a, 0xb9, 0xca, 0x96, 0xcf, 0xcc, 0x64, 0x56, 0xfe, 0xed, 0x6f, 0xa5, 0x75, 0x3e, 0x9e,
	0xa8, 0x37, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x60, 0x74, 0xab, 0xb4, 0x98, 0x06, 0x00, 0x00,
}

func (this *Applications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Applications)
	if !ok {
		that2, ok := that.(Applications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppList) != len(that1.AppList) {
		return false
	}
	for i := range this.AppList {
		if !this.AppList[i].Equal(that1.AppList[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationTags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationTags)
	if !ok {
		that2, ok := that.(ApplicationTags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApptagList) != len(that1.ApptagList) {
		return false
	}
	for i := range this.ApptagList {
		if !this.ApptagList[i].Equal(that1.ApptagList[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Apps.Equal(that1.Apps) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Apps.Equal(that1.Apps) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Apps.Equal(that1.Apps) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Apps.Equal(that1.Apps) {
		return false
	}
	return true
}
func (this *Applications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_application_group.Applications{")
	if this.AppList != nil {
		s = append(s, "AppList: "+fmt.Sprintf("%#v", this.AppList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationTags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_application_group.ApplicationTags{")
	if this.ApptagList != nil {
		s = append(s, "ApptagList: "+fmt.Sprintf("%#v", this.ApptagList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_application_group.GlobalSpecType{")
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Apps != nil {
		s = append(s, "Apps: "+fmt.Sprintf("%#v", this.Apps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_application_group.CreateSpecType{")
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Apps != nil {
		s = append(s, "Apps: "+fmt.Sprintf("%#v", this.Apps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_application_group.ReplaceSpecType{")
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Apps != nil {
		s = append(s, "Apps: "+fmt.Sprintf("%#v", this.Apps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_application_group.GetSpecType{")
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Apps != nil {
		s = append(s, "Apps: "+fmt.Sprintf("%#v", this.Apps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Applications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Applications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppList) > 0 {
		for iNdEx := len(m.AppList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationTags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationTags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationTags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApptagList) > 0 {
		for iNdEx := len(m.ApptagList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApptagList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apps != nil {
		{
			size, err := m.Apps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apps != nil {
		{
			size, err := m.Apps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apps != nil {
		{
			size, err := m.Apps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apps != nil {
		{
			size, err := m.Apps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Applications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppList) > 0 {
		for _, e := range m.AppList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationTags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApptagList) > 0 {
		for _, e := range m.ApptagList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Apps != nil {
		l = m.Apps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Apps != nil {
		l = m.Apps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Apps != nil {
		l = m.Apps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Apps != nil {
		l = m.Apps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Applications) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppList := "[]*ObjectRefType{"
	for _, f := range this.AppList {
		repeatedStringForAppList += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppList += "}"
	s := strings.Join([]string{`&Applications{`,
		`AppList:` + repeatedStringForAppList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationTags) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApptagList := "[]*ObjectRefType{"
	for _, f := range this.ApptagList {
		repeatedStringForApptagList += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForApptagList += "}"
	s := strings.Join([]string{`&ApplicationTags{`,
		`ApptagList:` + repeatedStringForApptagList + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Apps:` + strings.Replace(this.Apps.String(), "Applications", "Applications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Apps:` + strings.Replace(this.Apps.String(), "Applications", "Applications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Apps:` + strings.Replace(this.Apps.String(), "Applications", "Applications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Apps:` + strings.Replace(this.Apps.String(), "Applications", "Applications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Applications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppList = append(m.AppList, &schema.ObjectRefType{})
			if err := m.AppList[len(m.AppList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationTags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationTags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationTags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApptagList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApptagList = append(m.ApptagList, &schema.ObjectRefType{})
			if err := m.ApptagList[len(m.ApptagList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = &Applications{}
			}
			if err := m.Apps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = &Applications{}
			}
			if err := m.Apps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = &Applications{}
			}
			if err := m.Apps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = &Applications{}
			}
			if err := m.Apps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

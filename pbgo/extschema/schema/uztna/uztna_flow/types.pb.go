// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_flow/types.proto

package uztna_flow

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Flow Type
//
// x-displayName: "Flow Type"
// x-required
// Flow Type provide the configuration of Authentication for Session Policy. It is
// either SAML based or Geolocation based
type FlowType struct {
	// Flow Type
	//
	// x-displayName: "Type"
	// x-required
	// Authentication is either SAML or Geolocation based
	//
	// Types that are valid to be assigned to FlowTypeChoice:
	//	*FlowType_SamlMessage
	//	*FlowType_GeoMatch
	FlowTypeChoice isFlowType_FlowTypeChoice `protobuf_oneof:"flow_type_choice"`
}

func (m *FlowType) Reset()      { *m = FlowType{} }
func (*FlowType) ProtoMessage() {}
func (*FlowType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba099046364d49b9, []int{0}
}
func (m *FlowType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowType.Merge(m, src)
}
func (m *FlowType) XXX_Size() int {
	return m.Size()
}
func (m *FlowType) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowType.DiscardUnknown(m)
}

var xxx_messageInfo_FlowType proto.InternalMessageInfo

type isFlowType_FlowTypeChoice interface {
	isFlowType_FlowTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowType_SamlMessage struct {
	SamlMessage *SAMLMessage `protobuf:"bytes,2,opt,name=saml_message,json=samlMessage,proto3,oneof" json:"saml_message,omitempty"`
}
type FlowType_GeoMatch struct {
	GeoMatch *GeoMatch `protobuf:"bytes,3,opt,name=geo_match,json=geoMatch,proto3,oneof" json:"geo_match,omitempty"`
}

func (*FlowType_SamlMessage) isFlowType_FlowTypeChoice() {}
func (*FlowType_GeoMatch) isFlowType_FlowTypeChoice()    {}

func (m *FlowType) GetFlowTypeChoice() isFlowType_FlowTypeChoice {
	if m != nil {
		return m.FlowTypeChoice
	}
	return nil
}

func (m *FlowType) GetSamlMessage() *SAMLMessage {
	if x, ok := m.GetFlowTypeChoice().(*FlowType_SamlMessage); ok {
		return x.SamlMessage
	}
	return nil
}

func (m *FlowType) GetGeoMatch() *GeoMatch {
	if x, ok := m.GetFlowTypeChoice().(*FlowType_GeoMatch); ok {
		return x.GeoMatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FlowType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FlowType_SamlMessage)(nil),
		(*FlowType_GeoMatch)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
//
// Shape of the UZTNA flow
type GlobalSpecType struct {
	// Service Provider Properties
	//
	// x-displayName: "Flow Type"
	// x-required
	// Flow Type
	FlowType *FlowType `protobuf:"bytes,1,opt,name=flow_type,json=flowType,proto3" json:"flow_type,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba099046364d49b9, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetFlowType() *FlowType {
	if m != nil {
		return m.FlowType
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
// Shape of the UZTNA Tenant
type CreateSpecType struct {
	FlowType *FlowType `protobuf:"bytes,1,opt,name=flow_type,json=flowType,proto3" json:"flow_type,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba099046364d49b9, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetFlowType() *FlowType {
	if m != nil {
		return m.FlowType
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
// Shape of the UZTNA Tenant
type ReplaceSpecType struct {
	FlowType *FlowType `protobuf:"bytes,1,opt,name=flow_type,json=flowType,proto3" json:"flow_type,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba099046364d49b9, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetFlowType() *FlowType {
	if m != nil {
		return m.FlowType
	}
	return nil
}

// Get Tenant Schema
//
// x-displayName: "Get Tenant schema"
// Get a new gateways object.
type GetSpecType struct {
	FlowType *FlowType `protobuf:"bytes,1,opt,name=flow_type,json=flowType,proto3" json:"flow_type,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba099046364d49b9, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetFlowType() *FlowType {
	if m != nil {
		return m.FlowType
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowType)(nil), "ves.io.schema.uztna.uztna_flow.FlowType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_flow.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_flow.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_flow.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_flow.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_flow/types.proto", fileDescriptor_ba099046364d49b9)
}

var fileDescriptor_ba099046364d49b9 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xbf, 0x6e, 0x13, 0x41,
	0x10, 0xc6, 0x6f, 0x8d, 0x85, 0x9c, 0x35, 0x0a, 0xc1, 0x0d, 0x26, 0x41, 0x8b, 0xe5, 0x2a, 0x10,
	0x72, 0x87, 0x92, 0x8e, 0x02, 0x89, 0x44, 0x60, 0x84, 0x62, 0x0a, 0x27, 0x02, 0x89, 0xe6, 0xb4,
	0xbe, 0x8c, 0xd7, 0x4b, 0xf6, 0x3c, 0xab, 0xbb, 0xb5, 0x4d, 0xa8, 0xa8, 0xa9, 0x78, 0x0c, 0xc4,
	0x2b, 0x98, 0x82, 0x12, 0x51, 0xb9, 0x4c, 0x89, 0xcf, 0x0d, 0x65, 0x1e, 0x80, 0x02, 0x9d, 0xbd,
	0x0e, 0xbe, 0x20, 0x30, 0x05, 0xd0, 0x9c, 0xf6, 0xe6, 0xfb, 0xcd, 0x37, 0x7f, 0xa4, 0xa1, 0xb7,
	0x7a, 0x10, 0xbb, 0x12, 0xbd, 0x38, 0x68, 0x43, 0xc8, 0xbd, 0xee, 0x2b, 0xd3, 0xb1, 0x5f, 0xbf,
	0xa5, 0xb0, 0xef, 0x99, 0x63, 0x0d, 0xb1, 0xab, 0x23, 0x34, 0x58, 0x62, 0x53, 0xd6, 0x9d, 0xb2,
	0xee, 0x84, 0x72, 0x7f, 0xb0, 0xab, 0x1b, 0x59, 0x2f, 0xae, 0xa5, 0x2f, 0x22, 0xec, 0x6a, 0x1f,
	0x14, 0x84, 0xd0, 0x31, 0xf3, 0x66, 0xab, 0x57, 0xb3, 0x70, 0x07, 0x8c, 0x15, 0xd6, 0xb2, 0x02,
	0x6a, 0x23, 0xb1, 0x33, 0xcb, 0xba, 0x96, 0x15, 0xe7, 0x0d, 0xef, 0x2c, 0x98, 0x44, 0x00, 0x2a,
	0x0c, 0x78, 0xea, 0x66, 0x33, 0x6e, 0x2e, 0xc8, 0x88, 0x79, 0xa8, 0x2c, 0x7a, 0x3d, 0x8b, 0xf6,
	0xb8, 0x92, 0x87, 0xdc, 0x80, 0x55, 0x2b, 0xe7, 0x54, 0x09, 0x7d, 0x3f, 0xdb, 0xf7, 0x8d, 0x9f,
	0x89, 0x78, 0xbe, 0xfb, 0xea, 0x37, 0x42, 0x0b, 0x0f, 0x15, 0xf6, 0x0f, 0x8e, 0x35, 0x94, 0x9e,
	0xd2, 0x4b, 0x69, 0x6d, 0x3f, 0x84, 0x38, 0xe6, 0x02, 0xca, 0xb9, 0x0a, 0x59, 0x2f, 0x6e, 0x6d,
	0xb8, 0xbf, 0xdf, 0xbf, 0xbb, 0x7f, 0xbf, 0xbe, 0x57, 0x9f, 0xa6, 0xec, 0xe4, 0x87, 0x03, 0x42,
	0x1e, 0x39, 0x8d, 0x62, 0x6a, 0x64, 0x83, 0xa5, 0x3a, 0x5d, 0x12, 0x80, 0x7e, 0xc8, 0x4d, 0xd0,
	0x2e, 0x5f, 0x98, 0x98, 0xae, 0x2f, 0x32, 0xad, 0x01, 0xd6, 0x53, 0xfe, 0xcc, 0xb1, 0x20, 0x66,
	0x91, 0x5d, 0xba, 0x92, 0x22, 0x7e, 0x3a, 0x87, 0x1f, 0xb4, 0x51, 0x06, 0x50, 0xf2, 0x3e, 0x0e,
	0x48, 0x2e, 0x25, 0x93, 0x01, 0xc9, 0x6f, 0xdd, 0xae, 0x6c, 0xbf, 0xff, 0x40, 0xd6, 0x04, 0xe0,
	0x9e, 0x5d, 0x7d, 0x3a, 0xe3, 0x13, 0x34, 0xb2, 0x25, 0xa7, 0xff, 0x8f, 0xf3, 0x05, 0xb2, 0x92,
	0xab, 0x3e, 0xa3, 0xcb, 0x35, 0x85, 0x4d, 0xae, 0xf6, 0x35, 0x04, 0x93, 0x1d, 0x3c, 0xa0, 0x4b,
	0x67, 0xe6, 0x65, 0xf2, 0x67, 0xbd, 0xce, 0x16, 0xd8, 0x28, 0xb4, 0xec, 0xab, 0xfa, 0x82, 0x2e,
	0xef, 0x46, 0xc0, 0x0d, 0xfc, 0x65, 0xe3, 0xbb, 0x57, 0x3e, 0xdf, 0x3b, 0xd7, 0x72, 0xf5, 0x88,
	0x5e, 0x6e, 0x80, 0x56, 0x3c, 0xf8, 0x1f, 0xc5, 0x04, 0x2d, 0xd6, 0xc0, 0xfc, 0xfb, 0x42, 0x3b,
	0x6f, 0xc8, 0x70, 0xc4, 0x9c, 0x93, 0x11, 0x73, 0x4e, 0x47, 0x8c, 0xbc, 0x4e, 0x18, 0x79, 0x97,
	0x30, 0xf2, 0x29, 0x61, 0x64, 0x98, 0x30, 0xf2, 0x25, 0x61, 0xe4, 0x6b, 0xc2, 0x9c, 0xd3, 0x84,
	0x91, 0xb7, 0x63, 0xe6, 0x0c, 0xc7, 0xcc, 0x39, 0x19, 0x33, 0xe7, 0xf9, 0x81, 0x40, 0x7d, 0x24,
	0xdc, 0x1e, 0x2a, 0x03, 0x51, 0xc4, 0xdd, 0x6e, 0xec, 0x4d, 0x1e, 0x2d, 0x8c, 0xc2, 0x4d, 0x1d,
	0x61, 0x4f, 0x1e, 0x42, 0xb4, 0x39, 0x93, 0x3d, 0xdd, 0x14, 0xe8, 0xc1, 0x4b, 0x63, 0x0f, 0xe4,
	0x17, 0x27, 0xd9, 0xbc, 0x38, 0xb9, 0x96, 0xed, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0x8a,
	0x2c, 0x08, 0xb7, 0x04, 0x00, 0x00,
}

func (this *FlowType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowType)
	if !ok {
		that2, ok := that.(FlowType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FlowTypeChoice == nil {
		if this.FlowTypeChoice != nil {
			return false
		}
	} else if this.FlowTypeChoice == nil {
		return false
	} else if !this.FlowTypeChoice.Equal(that1.FlowTypeChoice) {
		return false
	}
	return true
}
func (this *FlowType_SamlMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowType_SamlMessage)
	if !ok {
		that2, ok := that.(FlowType_SamlMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SamlMessage.Equal(that1.SamlMessage) {
		return false
	}
	return true
}
func (this *FlowType_GeoMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowType_GeoMatch)
	if !ok {
		that2, ok := that.(FlowType_GeoMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GeoMatch.Equal(that1.GeoMatch) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowType.Equal(that1.FlowType) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowType.Equal(that1.FlowType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowType.Equal(that1.FlowType) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowType.Equal(that1.FlowType) {
		return false
	}
	return true
}
func (this *FlowType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_flow.FlowType{")
	if this.FlowTypeChoice != nil {
		s = append(s, "FlowTypeChoice: "+fmt.Sprintf("%#v", this.FlowTypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowType_SamlMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_flow.FlowType_SamlMessage{` +
		`SamlMessage:` + fmt.Sprintf("%#v", this.SamlMessage) + `}`}, ", ")
	return s
}
func (this *FlowType_GeoMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_flow.FlowType_GeoMatch{` +
		`GeoMatch:` + fmt.Sprintf("%#v", this.GeoMatch) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_flow.GlobalSpecType{")
	if this.FlowType != nil {
		s = append(s, "FlowType: "+fmt.Sprintf("%#v", this.FlowType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_flow.CreateSpecType{")
	if this.FlowType != nil {
		s = append(s, "FlowType: "+fmt.Sprintf("%#v", this.FlowType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_flow.ReplaceSpecType{")
	if this.FlowType != nil {
		s = append(s, "FlowType: "+fmt.Sprintf("%#v", this.FlowType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_flow.GetSpecType{")
	if this.FlowType != nil {
		s = append(s, "FlowType: "+fmt.Sprintf("%#v", this.FlowType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowTypeChoice != nil {
		{
			size := m.FlowTypeChoice.Size()
			i -= size
			if _, err := m.FlowTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowType_SamlMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowType_SamlMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SamlMessage != nil {
		{
			size, err := m.SamlMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FlowType_GeoMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowType_GeoMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GeoMatch != nil {
		{
			size, err := m.GeoMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowType != nil {
		{
			size, err := m.FlowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowType != nil {
		{
			size, err := m.FlowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowType != nil {
		{
			size, err := m.FlowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowType != nil {
		{
			size, err := m.FlowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowTypeChoice != nil {
		n += m.FlowTypeChoice.Size()
	}
	return n
}

func (m *FlowType_SamlMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SamlMessage != nil {
		l = m.SamlMessage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FlowType_GeoMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GeoMatch != nil {
		l = m.GeoMatch.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowType != nil {
		l = m.FlowType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowType != nil {
		l = m.FlowType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowType != nil {
		l = m.FlowType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowType != nil {
		l = m.FlowType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowType{`,
		`FlowTypeChoice:` + fmt.Sprintf("%v", this.FlowTypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowType_SamlMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowType_SamlMessage{`,
		`SamlMessage:` + strings.Replace(fmt.Sprintf("%v", this.SamlMessage), "SAMLMessage", "SAMLMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowType_GeoMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowType_GeoMatch{`,
		`GeoMatch:` + strings.Replace(fmt.Sprintf("%v", this.GeoMatch), "GeoMatch", "GeoMatch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`FlowType:` + strings.Replace(this.FlowType.String(), "FlowType", "FlowType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`FlowType:` + strings.Replace(this.FlowType.String(), "FlowType", "FlowType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`FlowType:` + strings.Replace(this.FlowType.String(), "FlowType", "FlowType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`FlowType:` + strings.Replace(this.FlowType.String(), "FlowType", "FlowType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamlMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SAMLMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowTypeChoice = &FlowType_SamlMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GeoMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowTypeChoice = &FlowType_GeoMatch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowType == nil {
				m.FlowType = &FlowType{}
			}
			if err := m.FlowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowType == nil {
				m.FlowType = &FlowType{}
			}
			if err := m.FlowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowType == nil {
				m.FlowType = &FlowType{}
			}
			if err := m.FlowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowType == nil {
				m.FlowType = &FlowType{}
			}
			if err := m.FlowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_flow/geolocation.proto

package uztna_flow

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Matching Criteria
//
// x-displayName: "Matching Criteria"
// Selecting Matching criteria
type MatchingCriteria struct {
	// Geolocation Selector
	//
	// x-displayName: "Matching Criteria"
	// Select multiple geolocations
	CustomGeoLocationSelector *schema.LabelSelectorType `protobuf:"bytes,1,opt,name=custom_geo_location_selector,json=customGeoLocationSelector,proto3" json:"custom_geo_location_selector,omitempty"`
}

func (m *MatchingCriteria) Reset()      { *m = MatchingCriteria{} }
func (*MatchingCriteria) ProtoMessage() {}
func (*MatchingCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1976846951ab705, []int{0}
}
func (m *MatchingCriteria) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchingCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchingCriteria.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchingCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchingCriteria.Merge(m, src)
}
func (m *MatchingCriteria) XXX_Size() int {
	return m.Size()
}
func (m *MatchingCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchingCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_MatchingCriteria proto.InternalMessageInfo

func (m *MatchingCriteria) GetCustomGeoLocationSelector() *schema.LabelSelectorType {
	if m != nil {
		return m.CustomGeoLocationSelector
	}
	return nil
}

// Geolocation Match
//
// x-displayName: "Geolocation match"
//
// Geolocation Match selection
type GeoMatch struct {
	// Geolocation Selector
	//
	// x-displayName: "Matching Criteria"
	// Select multiple geolocations
	// x-required
	// Rules to add Matching criteria
	MatchCri []*MatchingCriteria `protobuf:"bytes,1,rep,name=match_cri,json=matchCri,proto3" json:"match_cri,omitempty"`
}

func (m *GeoMatch) Reset()      { *m = GeoMatch{} }
func (*GeoMatch) ProtoMessage() {}
func (*GeoMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1976846951ab705, []int{1}
}
func (m *GeoMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoMatch.Merge(m, src)
}
func (m *GeoMatch) XXX_Size() int {
	return m.Size()
}
func (m *GeoMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoMatch.DiscardUnknown(m)
}

var xxx_messageInfo_GeoMatch proto.InternalMessageInfo

func (m *GeoMatch) GetMatchCri() []*MatchingCriteria {
	if m != nil {
		return m.MatchCri
	}
	return nil
}

func init() {
	proto.RegisterType((*MatchingCriteria)(nil), "ves.io.schema.uztna.uztna_flow.MatchingCriteria")
	proto.RegisterType((*GeoMatch)(nil), "ves.io.schema.uztna.uztna_flow.GeoMatch")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_flow/geolocation.proto", fileDescriptor_d1976846951ab705)
}

var fileDescriptor_d1976846951ab705 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xf7, 0x8b, 0xd5, 0x36, 0x5c, 0x97, 0x28, 0x0b, 0x69, 0xa8, 0x8e, 0xa8, 0x53, 0xf9, 0xd3,
	0x73, 0x54, 0x36, 0xc6, 0x74, 0xe8, 0x52, 0x96, 0xd2, 0x89, 0xc5, 0xba, 0xb8, 0xaf, 0xee, 0x09,
	0xdb, 0xef, 0x74, 0xbe, 0xa4, 0x2d, 0x13, 0x03, 0x13, 0x13, 0xea, 0xc8, 0x27, 0xe0, 0x2b, 0x00,
	0x19, 0x58, 0x90, 0x10, 0x53, 0xc6, 0x8e, 0xcd, 0x65, 0x81, 0xad, 0x1f, 0x01, 0xd5, 0xb1, 0x45,
	0x5d, 0x44, 0x17, 0xeb, 0x27, 0xfd, 0xfe, 0xbc, 0x9f, 0xdf, 0x3b, 0xd6, 0x1f, 0x63, 0x2e, 0x14,
	0x05, 0x79, 0x74, 0x8c, 0xa9, 0x0c, 0x46, 0x6f, 0x6c, 0x56, 0x7e, 0xc3, 0xa3, 0x84, 0x4e, 0x82,
	0x18, 0x29, 0xa1, 0x48, 0x5a, 0x45, 0x99, 0xd0, 0x86, 0x2c, 0xb5, 0xf9, 0xc2, 0x21, 0x16, 0x0e,
	0x51, 0x68, 0xc5, 0x5f, 0x47, 0xf7, 0x49, 0x3d, 0x51, 0x6a, 0x15, 0xc6, 0x86, 0x46, 0x3a, 0xc4,
	0x04, 0x53, 0xcc, 0x6c, 0x60, 0xcf, 0x34, 0xe6, 0x8b, 0xb0, 0xee, 0xfd, 0xba, 0x38, 0x43, 0x5b,
	0x12, 0x0f, 0xea, 0x04, 0xe9, 0xeb, 0x06, 0x95, 0x6b, 0xad, 0x4e, 0xde, 0x0c, 0x5c, 0xaf, 0x53,
	0x63, 0x99, 0xa8, 0x43, 0x69, 0xb1, 0x64, 0x7b, 0xb7, 0x58, 0x85, 0x27, 0x61, 0x3d, 0xfa, 0xe1,
	0xbf, 0x8a, 0xfc, 0xe6, 0x80, 0x8d, 0xcf, 0xc0, 0x5a, 0x2f, 0xa4, 0x8d, 0x8e, 0x55, 0x16, 0xef,
	0x18, 0x65, 0xd1, 0x28, 0xd9, 0xce, 0xd9, 0x7a, 0x34, 0xca, 0x2d, 0xa5, 0x61, 0x8c, 0x14, 0x56,
	0x0b, 0x0b, 0x73, 0x4c, 0x30, 0xb2, 0x64, 0x3a, 0xd0, 0x83, 0xcd, 0xd5, 0xed, 0x9e, 0xa8, 0xaf,
	0x6e, 0x4f, 0x0e, 0x31, 0x79, 0x59, 0x6a, 0x0e, 0xce, 0x34, 0x0e, 0x5a, 0x1f, 0x27, 0xe0, 0x33,
	0x58, 0x71, 0x13, 0x58, 0x62, 0x3e, 0x34, 0x56, 0xf6, 0xd7, 0x16, 0xb9, 0xbb, 0x48, 0x7b, 0x65,
	0x6a, 0x65, 0x78, 0xde, 0xff, 0xf9, 0x15, 0x9e, 0xb2, 0xc7, 0xac, 0x59, 0xd5, 0xe8, 0xf2, 0xbb,
	0x6b, 0x6c, 0xbc, 0x03, 0xd6, 0xdc, 0x45, 0x2a, 0xea, 0xb7, 0x4f, 0xd9, 0xbd, 0xf4, 0x1a, 0x84,
	0x91, 0x51, 0x1d, 0xe8, 0xf9, 0x9b, 0xab, 0xdb, 0x7d, 0x71, 0xf7, 0x6d, 0xc5, 0xed, 0x1f, 0x1f,
	0x3c, 0xfa, 0xf2, 0xfb, 0x9b, 0xbf, 0x74, 0x0e, 0x8d, 0x96, 0x5f, 0xa1, 0x26, 0x54, 0xa8, 0x03,
	0xee, 0xf2, 0xbb, 0xbf, 0x7c, 0x3e, 0x81, 0x46, 0x0b, 0xf6, 0x9b, 0xc5, 0xb4, 0x1d, 0xa3, 0x06,
	0xef, 0x61, 0x3a, 0xe3, 0xde, 0xc5, 0x8c, 0x7b, 0x57, 0x33, 0x0e, 0x6f, 0x1d, 0x87, 0x4f, 0x8e,
	0xc3, 0x0f, 0xc7, 0x61, 0xea, 0x38, 0x5c, 0x3a, 0x0e, 0xbf, 0x1c, 0xf7, 0xae, 0x1c, 0x87, 0x0f,
	0x73, 0xee, 0x4d, 0xe7, 0xdc, 0xbb, 0x98, 0x73, 0xef, 0xd5, 0x41, 0x4c, 0xfa, 0x75, 0x2c, 0xc6,
	0x94, 0x58, 0x34, 0x46, 0x8a, 0x51, 0x1e, 0x14, 0xe0, 0x88, 0x4c, 0xba, 0xa5, 0x0d, 0x8d, 0xd5,
	0x21, 0x9a, 0xad, 0x8a, 0x0e, 0xf4, 0x30, 0xa6, 0x00, 0x4f, 0x6d, 0x79, 0xc9, 0xff, 0x3c, 0xf0,
	0xe1, 0x72, 0x71, 0xd6, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x68, 0xa1, 0xee, 0xd6, 0x09,
	0x03, 0x00, 0x00,
}

func (this *MatchingCriteria) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchingCriteria)
	if !ok {
		that2, ok := that.(MatchingCriteria)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomGeoLocationSelector.Equal(that1.CustomGeoLocationSelector) {
		return false
	}
	return true
}
func (this *GeoMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeoMatch)
	if !ok {
		that2, ok := that.(GeoMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MatchCri) != len(that1.MatchCri) {
		return false
	}
	for i := range this.MatchCri {
		if !this.MatchCri[i].Equal(that1.MatchCri[i]) {
			return false
		}
	}
	return true
}
func (this *MatchingCriteria) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_flow.MatchingCriteria{")
	if this.CustomGeoLocationSelector != nil {
		s = append(s, "CustomGeoLocationSelector: "+fmt.Sprintf("%#v", this.CustomGeoLocationSelector)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeoMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_flow.GeoMatch{")
	if this.MatchCri != nil {
		s = append(s, "MatchCri: "+fmt.Sprintf("%#v", this.MatchCri)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGeolocation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MatchingCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchingCriteria) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchingCriteria) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomGeoLocationSelector != nil {
		{
			size, err := m.CustomGeoLocationSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGeolocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeoMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchCri) > 0 {
		for iNdEx := len(m.MatchCri) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchCri[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGeolocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGeolocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovGeolocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MatchingCriteria) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomGeoLocationSelector != nil {
		l = m.CustomGeoLocationSelector.Size()
		n += 1 + l + sovGeolocation(uint64(l))
	}
	return n
}

func (m *GeoMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchCri) > 0 {
		for _, e := range m.MatchCri {
			l = e.Size()
			n += 1 + l + sovGeolocation(uint64(l))
		}
	}
	return n
}

func sovGeolocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGeolocation(x uint64) (n int) {
	return sovGeolocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MatchingCriteria) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchingCriteria{`,
		`CustomGeoLocationSelector:` + strings.Replace(fmt.Sprintf("%v", this.CustomGeoLocationSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GeoMatch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMatchCri := "[]*MatchingCriteria{"
	for _, f := range this.MatchCri {
		repeatedStringForMatchCri += strings.Replace(f.String(), "MatchingCriteria", "MatchingCriteria", 1) + ","
	}
	repeatedStringForMatchCri += "}"
	s := strings.Join([]string{`&GeoMatch{`,
		`MatchCri:` + repeatedStringForMatchCri + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGeolocation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MatchingCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeolocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchingCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchingCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomGeoLocationSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeolocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeolocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeolocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomGeoLocationSelector == nil {
				m.CustomGeoLocationSelector = &schema.LabelSelectorType{}
			}
			if err := m.CustomGeoLocationSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeolocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeolocation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeolocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeolocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchCri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeolocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeolocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeolocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchCri = append(m.MatchCri, &MatchingCriteria{})
			if err := m.MatchCri[len(m.MatchCri)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeolocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeolocation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeolocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeolocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeolocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeolocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeolocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGeolocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGeolocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGeolocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGeolocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeolocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGeolocation = fmt.Errorf("proto: unexpected end of group")
)

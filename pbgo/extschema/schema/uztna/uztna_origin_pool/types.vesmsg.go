// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_origin_pool

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaHealthcheckDRefInfo()

}

func (m *CreateSpecType) GetUztnaHealthcheckDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetUztnaHealthcheck()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CreateSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("uztna_healthcheck.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_healthcheck.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "uztna_healthcheck",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetUztnaHealthcheckDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetUztnaHealthcheckDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_healthcheck.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_healthcheck")
	}
	for i, vref := range m.GetUztnaHealthcheck() {
		if vref == nil {
			return nil, fmt.Errorf("CreateSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "uztna_healthcheck.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) OriginServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*OriginServerType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := OriginServerTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*OriginServerType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*OriginServerType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) UztnaHealthcheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for uztna_healthcheck")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for uztna_healthcheck")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated uztna_healthcheck")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items uztna_healthcheck")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LoadbalancerAlgorithmValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for loadbalancer_algorithm")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["loadbalancer_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("loadbalancer_algorithm"))
		if err := fv(ctx, m.GetLoadbalancerAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_servers"))
		if err := fv(ctx, m.GetOriginServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uztna_healthcheck"]; exists {
		vOpts := append(opts, db.WithValidateField("uztna_healthcheck"))
		if err := fv(ctx, m.GetUztnaHealthcheck(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginServers := v.OriginServersValidationRuleHandler
	rulesOriginServers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginServers(rulesOriginServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.origin_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_servers"] = vFn

	vrhUztnaHealthcheck := v.UztnaHealthcheckValidationRuleHandler
	rulesUztnaHealthcheck := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "5",
	}
	vFn, err = vrhUztnaHealthcheck(rulesUztnaHealthcheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.uztna_healthcheck: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uztna_healthcheck"] = vFn

	vrhLoadbalancerAlgorithm := v.LoadbalancerAlgorithmValidationRuleHandler
	rulesLoadbalancerAlgorithm := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadbalancerAlgorithm(rulesLoadbalancerAlgorithm)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.loadbalancer_algorithm: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_algorithm"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaHealthcheckDRefInfo()

}

func (m *GetSpecType) GetUztnaHealthcheckDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetUztnaHealthcheck()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("uztna_healthcheck.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_healthcheck.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "uztna_healthcheck",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetUztnaHealthcheckDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetUztnaHealthcheckDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_healthcheck.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_healthcheck")
	}
	for i, vref := range m.GetUztnaHealthcheck() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "uztna_healthcheck.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) OriginServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*OriginServerType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := OriginServerTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*OriginServerType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*OriginServerType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) UztnaHealthcheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for uztna_healthcheck")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for uztna_healthcheck")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated uztna_healthcheck")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items uztna_healthcheck")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) LoadbalancerAlgorithmValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for loadbalancer_algorithm")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["loadbalancer_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("loadbalancer_algorithm"))
		if err := fv(ctx, m.GetLoadbalancerAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_servers"))
		if err := fv(ctx, m.GetOriginServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uztna_healthcheck"]; exists {
		vOpts := append(opts, db.WithValidateField("uztna_healthcheck"))
		if err := fv(ctx, m.GetUztnaHealthcheck(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginServers := v.OriginServersValidationRuleHandler
	rulesOriginServers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginServers(rulesOriginServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.origin_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_servers"] = vFn

	vrhUztnaHealthcheck := v.UztnaHealthcheckValidationRuleHandler
	rulesUztnaHealthcheck := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "5",
	}
	vFn, err = vrhUztnaHealthcheck(rulesUztnaHealthcheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.uztna_healthcheck: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uztna_healthcheck"] = vFn

	vrhLoadbalancerAlgorithm := v.LoadbalancerAlgorithmValidationRuleHandler
	rulesLoadbalancerAlgorithm := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadbalancerAlgorithm(rulesLoadbalancerAlgorithm)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.loadbalancer_algorithm: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_algorithm"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaHealthcheckDRefInfo()

}

func (m *GlobalSpecType) GetUztnaHealthcheckDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetUztnaHealthcheck()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("uztna_healthcheck.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_healthcheck.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "uztna_healthcheck",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetUztnaHealthcheckDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetUztnaHealthcheckDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_healthcheck.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_healthcheck")
	}
	for i, vref := range m.GetUztnaHealthcheck() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "uztna_healthcheck.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) OriginServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*OriginServerType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := OriginServerTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*OriginServerType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*OriginServerType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LoadbalancerAlgorithmValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for loadbalancer_algorithm")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) UztnaHealthcheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for uztna_healthcheck")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for uztna_healthcheck")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated uztna_healthcheck")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items uztna_healthcheck")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["loadbalancer_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("loadbalancer_algorithm"))
		if err := fv(ctx, m.GetLoadbalancerAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_servers"))
		if err := fv(ctx, m.GetOriginServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uztna_healthcheck"]; exists {
		vOpts := append(opts, db.WithValidateField("uztna_healthcheck"))
		if err := fv(ctx, m.GetUztnaHealthcheck(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginServers := v.OriginServersValidationRuleHandler
	rulesOriginServers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginServers(rulesOriginServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.origin_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_servers"] = vFn

	vrhLoadbalancerAlgorithm := v.LoadbalancerAlgorithmValidationRuleHandler
	rulesLoadbalancerAlgorithm := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadbalancerAlgorithm(rulesLoadbalancerAlgorithm)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.loadbalancer_algorithm: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_algorithm"] = vFn

	vrhUztnaHealthcheck := v.UztnaHealthcheckValidationRuleHandler
	rulesUztnaHealthcheck := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "5",
	}
	vFn, err = vrhUztnaHealthcheck(rulesUztnaHealthcheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.uztna_healthcheck: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uztna_healthcheck"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LoadbalancerAlgorithm) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LoadbalancerAlgorithm) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LoadbalancerAlgorithm) DeepCopy() *LoadbalancerAlgorithm {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LoadbalancerAlgorithm{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LoadbalancerAlgorithm) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LoadbalancerAlgorithm) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LoadbalancerAlgorithmValidator().Validate(ctx, m, opts...)
}

type ValidateLoadbalancerAlgorithm struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLoadbalancerAlgorithm) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LoadbalancerAlgorithm)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LoadbalancerAlgorithm got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetAlgoChoice().(type) {
	case *LoadbalancerAlgorithm_ROUND_ROBIN:
		if fv, exists := v.FldValidators["algo_choice.ROUND_ROBIN"]; exists {
			val := m.GetAlgoChoice().(*LoadbalancerAlgorithm_ROUND_ROBIN).ROUND_ROBIN
			vOpts := append(opts,
				db.WithValidateField("algo_choice"),
				db.WithValidateField("ROUND_ROBIN"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LoadbalancerAlgorithm_LEAST_CONNECTIONS:
		if fv, exists := v.FldValidators["algo_choice.LEAST_CONNECTIONS"]; exists {
			val := m.GetAlgoChoice().(*LoadbalancerAlgorithm_LEAST_CONNECTIONS).LEAST_CONNECTIONS
			vOpts := append(opts,
				db.WithValidateField("algo_choice"),
				db.WithValidateField("LEAST_CONNECTIONS"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLoadbalancerAlgorithmValidator = func() *ValidateLoadbalancerAlgorithm {
	v := &ValidateLoadbalancerAlgorithm{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LoadbalancerAlgorithmValidator() db.Validator {
	return DefaultLoadbalancerAlgorithmValidator
}

// augmented methods on protoc/std generated struct

func (m *OriginServerPrivateIP) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OriginServerPrivateIP) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OriginServerPrivateIP) DeepCopy() *OriginServerPrivateIP {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OriginServerPrivateIP{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OriginServerPrivateIP) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OriginServerPrivateIP) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OriginServerPrivateIPValidator().Validate(ctx, m, opts...)
}

type ValidateOriginServerPrivateIP struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOriginServerPrivateIP) PrivateIpChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for private_ip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOriginServerPrivateIP) PrivateIpChoiceIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip")
	}
	return oValidatorFn_Ip, nil
}
func (v *ValidateOriginServerPrivateIP) PrivateIpChoiceIpv6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ipv6, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ipv6")
	}
	return oValidatorFn_Ipv6, nil
}

func (v *ValidateOriginServerPrivateIP) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OriginServerPrivateIP)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OriginServerPrivateIP got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["private_ip_choice"]; exists {
		val := m.GetPrivateIpChoice()
		vOpts := append(opts,
			db.WithValidateField("private_ip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPrivateIpChoice().(type) {
	case *OriginServerPrivateIP_Ip:
		if fv, exists := v.FldValidators["private_ip_choice.ip"]; exists {
			val := m.GetPrivateIpChoice().(*OriginServerPrivateIP_Ip).Ip
			vOpts := append(opts,
				db.WithValidateField("private_ip_choice"),
				db.WithValidateField("ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OriginServerPrivateIP_Ipv6:
		if fv, exists := v.FldValidators["private_ip_choice.ipv6"]; exists {
			val := m.GetPrivateIpChoice().(*OriginServerPrivateIP_Ipv6).Ipv6
			vOpts := append(opts,
				db.WithValidateField("private_ip_choice"),
				db.WithValidateField("ipv6"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOriginServerPrivateIPValidator = func() *ValidateOriginServerPrivateIP {
	v := &ValidateOriginServerPrivateIP{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPrivateIpChoice := v.PrivateIpChoiceValidationRuleHandler
	rulesPrivateIpChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPrivateIpChoice(rulesPrivateIpChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerPrivateIP.private_ip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_ip_choice"] = vFn

	vrhPrivateIpChoiceIp := v.PrivateIpChoiceIpValidationRuleHandler
	rulesPrivateIpChoiceIp := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFnMap["private_ip_choice.ip"], err = vrhPrivateIpChoiceIp(rulesPrivateIpChoiceIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field OriginServerPrivateIP.private_ip_choice_ip: %s", err)
		panic(errMsg)
	}
	vrhPrivateIpChoiceIpv6 := v.PrivateIpChoiceIpv6ValidationRuleHandler
	rulesPrivateIpChoiceIpv6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFnMap["private_ip_choice.ipv6"], err = vrhPrivateIpChoiceIpv6(rulesPrivateIpChoiceIpv6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field OriginServerPrivateIP.private_ip_choice_ipv6: %s", err)
		panic(errMsg)
	}

	v.FldValidators["private_ip_choice.ip"] = vFnMap["private_ip_choice.ip"]
	v.FldValidators["private_ip_choice.ipv6"] = vFnMap["private_ip_choice.ipv6"]

	return v
}()

func OriginServerPrivateIPValidator() db.Validator {
	return DefaultOriginServerPrivateIPValidator
}

// augmented methods on protoc/std generated struct

func (m *OriginServerPrivateName) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OriginServerPrivateName) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OriginServerPrivateName) DeepCopy() *OriginServerPrivateName {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OriginServerPrivateName{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OriginServerPrivateName) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OriginServerPrivateName) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OriginServerPrivateNameValidator().Validate(ctx, m, opts...)
}

type ValidateOriginServerPrivateName struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOriginServerPrivateName) HostnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hostname")
	}

	return validatorFn, nil
}

func (v *ValidateOriginServerPrivateName) RefreshIntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for refresh_interval")
	}

	return validatorFn, nil
}

func (v *ValidateOriginServerPrivateName) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OriginServerPrivateName)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OriginServerPrivateName got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("hostname"))
		if err := fv(ctx, m.GetHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["refresh_interval"]; exists {

		vOpts := append(opts, db.WithValidateField("refresh_interval"))
		if err := fv(ctx, m.GetRefreshInterval(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOriginServerPrivateNameValidator = func() *ValidateOriginServerPrivateName {
	v := &ValidateOriginServerPrivateName{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostname := v.HostnameValidationRuleHandler
	rulesHostname := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHostname(rulesHostname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerPrivateName.hostname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hostname"] = vFn

	vrhRefreshInterval := v.RefreshIntervalValidationRuleHandler
	rulesRefreshInterval := map[string]string{
		"ves.io.schema.rules.uint32.lte": "604800",
	}
	vFn, err = vrhRefreshInterval(rulesRefreshInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerPrivateName.refresh_interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["refresh_interval"] = vFn

	return v
}()

func OriginServerPrivateNameValidator() db.Validator {
	return DefaultOriginServerPrivateNameValidator
}

// augmented methods on protoc/std generated struct

func (m *OriginServerType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OriginServerType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OriginServerType) DeepCopy() *OriginServerType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OriginServerType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OriginServerType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OriginServerType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OriginServerTypeValidator().Validate(ctx, m, opts...)
}

type ValidateOriginServerType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOriginServerType) ChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for choice")
	}
	return validatorFn, nil
}

func (v *ValidateOriginServerType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateOriginServerType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OriginServerType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OriginServerType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["choice"]; exists {
		val := m.GetChoice()
		vOpts := append(opts,
			db.WithValidateField("choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChoice().(type) {
	case *OriginServerType_PrivateIp:
		if fv, exists := v.FldValidators["choice.private_ip"]; exists {
			val := m.GetChoice().(*OriginServerType_PrivateIp).PrivateIp
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("private_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OriginServerType_PrivateName:
		if fv, exists := v.FldValidators["choice.private_name"]; exists {
			val := m.GetChoice().(*OriginServerType_PrivateName).PrivateName
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("private_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOriginServerTypeValidator = func() *ValidateOriginServerType {
	v := &ValidateOriginServerType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChoice := v.ChoiceValidationRuleHandler
	rulesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChoice(rulesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerType.choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["choice"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	v.FldValidators["choice.private_ip"] = OriginServerPrivateIPValidator().Validate
	v.FldValidators["choice.private_name"] = OriginServerPrivateNameValidator().Validate

	return v
}()

func OriginServerTypeValidator() db.Validator {
	return DefaultOriginServerTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaHealthcheckDRefInfo()

}

func (m *ReplaceSpecType) GetUztnaHealthcheckDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetUztnaHealthcheck()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("uztna_healthcheck.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_healthcheck.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "uztna_healthcheck",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetUztnaHealthcheckDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetUztnaHealthcheckDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_healthcheck.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_healthcheck")
	}
	for i, vref := range m.GetUztnaHealthcheck() {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.uztna_healthcheck[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "uztna_healthcheck.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) OriginServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*OriginServerType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := OriginServerTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*OriginServerType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*OriginServerType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) UztnaHealthcheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for uztna_healthcheck")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for uztna_healthcheck")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated uztna_healthcheck")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items uztna_healthcheck")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LoadbalancerAlgorithmValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for loadbalancer_algorithm")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["loadbalancer_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("loadbalancer_algorithm"))
		if err := fv(ctx, m.GetLoadbalancerAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_servers"))
		if err := fv(ctx, m.GetOriginServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uztna_healthcheck"]; exists {
		vOpts := append(opts, db.WithValidateField("uztna_healthcheck"))
		if err := fv(ctx, m.GetUztnaHealthcheck(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginServers := v.OriginServersValidationRuleHandler
	rulesOriginServers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginServers(rulesOriginServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.origin_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_servers"] = vFn

	vrhUztnaHealthcheck := v.UztnaHealthcheckValidationRuleHandler
	rulesUztnaHealthcheck := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "5",
	}
	vFn, err = vrhUztnaHealthcheck(rulesUztnaHealthcheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.uztna_healthcheck: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uztna_healthcheck"] = vFn

	vrhLoadbalancerAlgorithm := v.LoadbalancerAlgorithmValidationRuleHandler
	rulesLoadbalancerAlgorithm := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLoadbalancerAlgorithm(rulesLoadbalancerAlgorithm)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.loadbalancer_algorithm: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_algorithm"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LoadbalancerAlgorithm = f.GetLoadbalancerAlgorithm()
	m.OriginServers = f.GetOriginServers()
	m.UztnaHealthcheck = f.GetUztnaHealthcheck()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LoadbalancerAlgorithm = m1.LoadbalancerAlgorithm
	f.OriginServers = m1.OriginServers
	f.UztnaHealthcheck = m1.UztnaHealthcheck
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LoadbalancerAlgorithm = f.GetLoadbalancerAlgorithm()
	m.OriginServers = f.GetOriginServers()
	m.UztnaHealthcheck = f.GetUztnaHealthcheck()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LoadbalancerAlgorithm = m1.LoadbalancerAlgorithm
	f.OriginServers = m1.OriginServers
	f.UztnaHealthcheck = m1.UztnaHealthcheck
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LoadbalancerAlgorithm = f.GetLoadbalancerAlgorithm()
	m.OriginServers = f.GetOriginServers()
	m.UztnaHealthcheck = f.GetUztnaHealthcheck()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LoadbalancerAlgorithm = m1.LoadbalancerAlgorithm
	f.OriginServers = m1.OriginServers
	f.UztnaHealthcheck = m1.UztnaHealthcheck
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

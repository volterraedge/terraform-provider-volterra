// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_origin_pool/types.proto

package uztna_origin_pool

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LoadbalancerAlgorithm
//
// x-displayName: "Load Balancer Algorithm"
// Algorithm the Load Balancer should use to select the upstream endpoint
type LoadbalancerAlgorithm struct {
	// LoadBalancerAlgorithm
	//
	// x-displayName: "LoadBalancerAlgorithm"
	// Select the load balancer algorithm
	//
	// Types that are valid to be assigned to AlgoChoice:
	//	*LoadbalancerAlgorithm_ROUND_ROBIN
	//	*LoadbalancerAlgorithm_LEAST_CONNECTIONS
	AlgoChoice isLoadbalancerAlgorithm_AlgoChoice `protobuf_oneof:"algo_choice"`
}

func (m *LoadbalancerAlgorithm) Reset()      { *m = LoadbalancerAlgorithm{} }
func (*LoadbalancerAlgorithm) ProtoMessage() {}
func (*LoadbalancerAlgorithm) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{0}
}
func (m *LoadbalancerAlgorithm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadbalancerAlgorithm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoadbalancerAlgorithm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerAlgorithm.Merge(m, src)
}
func (m *LoadbalancerAlgorithm) XXX_Size() int {
	return m.Size()
}
func (m *LoadbalancerAlgorithm) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerAlgorithm.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerAlgorithm proto.InternalMessageInfo

type isLoadbalancerAlgorithm_AlgoChoice interface {
	isLoadbalancerAlgorithm_AlgoChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LoadbalancerAlgorithm_ROUND_ROBIN struct {
	ROUND_ROBIN *schema.Empty `protobuf:"bytes,2,opt,name=ROUND_ROBIN,json=ROUNDROBIN,proto3,oneof" json:"ROUND_ROBIN,omitempty"`
}
type LoadbalancerAlgorithm_LEAST_CONNECTIONS struct {
	LEAST_CONNECTIONS *schema.Empty `protobuf:"bytes,3,opt,name=LEAST_CONNECTIONS,json=LEASTCONNECTIONS,proto3,oneof" json:"LEAST_CONNECTIONS,omitempty"`
}

func (*LoadbalancerAlgorithm_ROUND_ROBIN) isLoadbalancerAlgorithm_AlgoChoice()       {}
func (*LoadbalancerAlgorithm_LEAST_CONNECTIONS) isLoadbalancerAlgorithm_AlgoChoice() {}

func (m *LoadbalancerAlgorithm) GetAlgoChoice() isLoadbalancerAlgorithm_AlgoChoice {
	if m != nil {
		return m.AlgoChoice
	}
	return nil
}

func (m *LoadbalancerAlgorithm) GetROUND_ROBIN() *schema.Empty {
	if x, ok := m.GetAlgoChoice().(*LoadbalancerAlgorithm_ROUND_ROBIN); ok {
		return x.ROUND_ROBIN
	}
	return nil
}

func (m *LoadbalancerAlgorithm) GetLEAST_CONNECTIONS() *schema.Empty {
	if x, ok := m.GetAlgoChoice().(*LoadbalancerAlgorithm_LEAST_CONNECTIONS); ok {
		return x.LEAST_CONNECTIONS
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LoadbalancerAlgorithm) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LoadbalancerAlgorithm_ROUND_ROBIN)(nil),
		(*LoadbalancerAlgorithm_LEAST_CONNECTIONS)(nil),
	}
}

// OriginServerPrivateIP
//
// x-displayName: "IP address on given Sites"
// Specify origin server with private or public IP address and site information
type OriginServerPrivateIP struct {
	// Private IP Choice
	//
	// x-displayName: "Select Private IP"
	// x-required
	// Origin server Private IP - either V4 or V6
	//
	// Types that are valid to be assigned to PrivateIpChoice:
	//	*OriginServerPrivateIP_Ip
	//	*OriginServerPrivateIP_Ipv6
	PrivateIpChoice isOriginServerPrivateIP_PrivateIpChoice `protobuf_oneof:"private_ip_choice"`
}

func (m *OriginServerPrivateIP) Reset()      { *m = OriginServerPrivateIP{} }
func (*OriginServerPrivateIP) ProtoMessage() {}
func (*OriginServerPrivateIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{1}
}
func (m *OriginServerPrivateIP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginServerPrivateIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginServerPrivateIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginServerPrivateIP.Merge(m, src)
}
func (m *OriginServerPrivateIP) XXX_Size() int {
	return m.Size()
}
func (m *OriginServerPrivateIP) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginServerPrivateIP.DiscardUnknown(m)
}

var xxx_messageInfo_OriginServerPrivateIP proto.InternalMessageInfo

type isOriginServerPrivateIP_PrivateIpChoice interface {
	isOriginServerPrivateIP_PrivateIpChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerPrivateIP_Ip struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}
type OriginServerPrivateIP_Ipv6 struct {
	Ipv6 string `protobuf:"bytes,11,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (*OriginServerPrivateIP_Ip) isOriginServerPrivateIP_PrivateIpChoice()   {}
func (*OriginServerPrivateIP_Ipv6) isOriginServerPrivateIP_PrivateIpChoice() {}

func (m *OriginServerPrivateIP) GetPrivateIpChoice() isOriginServerPrivateIP_PrivateIpChoice {
	if m != nil {
		return m.PrivateIpChoice
	}
	return nil
}

func (m *OriginServerPrivateIP) GetIp() string {
	if x, ok := m.GetPrivateIpChoice().(*OriginServerPrivateIP_Ip); ok {
		return x.Ip
	}
	return ""
}

func (m *OriginServerPrivateIP) GetIpv6() string {
	if x, ok := m.GetPrivateIpChoice().(*OriginServerPrivateIP_Ipv6); ok {
		return x.Ipv6
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OriginServerPrivateIP) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OriginServerPrivateIP_Ip)(nil),
		(*OriginServerPrivateIP_Ipv6)(nil),
	}
}

// OriginServerPrivateName
//
// x-displayName: "DNS Name on given Sites"
// Specify origin server with private or public DNS name and site information
type OriginServerPrivateName struct {
	// DNS name
	//
	// x-displayName: "Host Name"
	// x-example: "value"
	// x-required
	// DNS Name
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// refresh_interval
	//
	// x-displayName: "DNS Refresh interval"
	// x-example: "20"
	// Interval for DNS refresh in seconds.
	// Max value is 7 days as per https://datatracker.ietf.org/doc/html/rfc8767
	RefreshInterval uint32 `protobuf:"varint,2,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
}

func (m *OriginServerPrivateName) Reset()      { *m = OriginServerPrivateName{} }
func (*OriginServerPrivateName) ProtoMessage() {}
func (*OriginServerPrivateName) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{2}
}
func (m *OriginServerPrivateName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginServerPrivateName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginServerPrivateName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginServerPrivateName.Merge(m, src)
}
func (m *OriginServerPrivateName) XXX_Size() int {
	return m.Size()
}
func (m *OriginServerPrivateName) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginServerPrivateName.DiscardUnknown(m)
}

var xxx_messageInfo_OriginServerPrivateName proto.InternalMessageInfo

func (m *OriginServerPrivateName) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *OriginServerPrivateName) GetRefreshInterval() uint32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

// OriginServerType
//
// x-displayName: "Origin Server"
// Various options to specify origin server
type OriginServerType struct {
	// Origin Server Type
	//
	// x-displayName: "Origin Server Type"
	// x-required
	// Type of Origin server
	//
	// Types that are valid to be assigned to Choice:
	//	*OriginServerType_PrivateIp
	//	*OriginServerType_PrivateName
	Choice isOriginServerType_Choice `protobuf_oneof:"choice"`
	// Origin Server Labels
	//
	// x-displayName: "Origin Server Labels"
	// x-example: "value"
	// Add Labels for this origin server, these labels can be used to form subset.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Origin Server Port
	//
	// x-displayName: "Origin Server Port"
	// x-example: "9080"
	// x-required
	// Endpoint service is available on this port
	Port uint32 `protobuf:"varint,10,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *OriginServerType) Reset()      { *m = OriginServerType{} }
func (*OriginServerType) ProtoMessage() {}
func (*OriginServerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{3}
}
func (m *OriginServerType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginServerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginServerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginServerType.Merge(m, src)
}
func (m *OriginServerType) XXX_Size() int {
	return m.Size()
}
func (m *OriginServerType) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginServerType.DiscardUnknown(m)
}

var xxx_messageInfo_OriginServerType proto.InternalMessageInfo

type isOriginServerType_Choice interface {
	isOriginServerType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OriginServerType_PrivateIp struct {
	PrivateIp *OriginServerPrivateIP `protobuf:"bytes,1,opt,name=private_ip,json=privateIp,proto3,oneof" json:"private_ip,omitempty"`
}
type OriginServerType_PrivateName struct {
	PrivateName *OriginServerPrivateName `protobuf:"bytes,2,opt,name=private_name,json=privateName,proto3,oneof" json:"private_name,omitempty"`
}

func (*OriginServerType_PrivateIp) isOriginServerType_Choice()   {}
func (*OriginServerType_PrivateName) isOriginServerType_Choice() {}

func (m *OriginServerType) GetChoice() isOriginServerType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *OriginServerType) GetPrivateIp() *OriginServerPrivateIP {
	if x, ok := m.GetChoice().(*OriginServerType_PrivateIp); ok {
		return x.PrivateIp
	}
	return nil
}

func (m *OriginServerType) GetPrivateName() *OriginServerPrivateName {
	if x, ok := m.GetChoice().(*OriginServerType_PrivateName); ok {
		return x.PrivateName
	}
	return nil
}

func (m *OriginServerType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *OriginServerType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OriginServerType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OriginServerType_PrivateIp)(nil),
		(*OriginServerType_PrivateName)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the origin pool specification
type GlobalSpecType struct {
	// List of Origin Servers
	//
	// x-displayName: "Origin Servers"
	// x-required
	// List of origin servers in this pool
	OriginServers []*OriginServerType `protobuf:"bytes,1,rep,name=origin_servers,json=originServers,proto3" json:"origin_servers,omitempty"`
	// loadbalancer_algorithm
	//
	// x-displayName: "LoadBalancer Algorithm"
	// x-required
	// When a connection to a endpoint in an upstream cluster is required, the loadbalancer uses
	// loadbalancer_algorithm to determine which host is selected.
	LoadbalancerAlgorithm *LoadbalancerAlgorithm `protobuf:"bytes,2,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3" json:"loadbalancer_algorithm,omitempty"`
	// Health Check
	//
	// x-displayName: "Health Check object"
	// Reference to healthcheck configuration objects
	UztnaHealthcheck []*views.ObjectRefType `protobuf:"bytes,3,rep,name=uztna_healthcheck,json=uztnaHealthcheck,proto3" json:"uztna_healthcheck,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *GlobalSpecType) GetLoadbalancerAlgorithm() *LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return nil
}

func (m *GlobalSpecType) GetUztnaHealthcheck() []*views.ObjectRefType {
	if m != nil {
		return m.UztnaHealthcheck
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Origin Pool"
// Shape of the origin pool create specification
type CreateSpecType struct {
	OriginServers         []*OriginServerType    `protobuf:"bytes,1,rep,name=origin_servers,json=originServers,proto3" json:"origin_servers,omitempty"`
	UztnaHealthcheck      []*views.ObjectRefType `protobuf:"bytes,6,rep,name=uztna_healthcheck,json=uztnaHealthcheck,proto3" json:"uztna_healthcheck,omitempty"`
	LoadbalancerAlgorithm *LoadbalancerAlgorithm `protobuf:"bytes,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3" json:"loadbalancer_algorithm,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *CreateSpecType) GetUztnaHealthcheck() []*views.ObjectRefType {
	if m != nil {
		return m.UztnaHealthcheck
	}
	return nil
}

func (m *CreateSpecType) GetLoadbalancerAlgorithm() *LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Origin Pool"
// Shape of the origin pool replace specification
type ReplaceSpecType struct {
	OriginServers         []*OriginServerType    `protobuf:"bytes,1,rep,name=origin_servers,json=originServers,proto3" json:"origin_servers,omitempty"`
	UztnaHealthcheck      []*views.ObjectRefType `protobuf:"bytes,6,rep,name=uztna_healthcheck,json=uztnaHealthcheck,proto3" json:"uztna_healthcheck,omitempty"`
	LoadbalancerAlgorithm *LoadbalancerAlgorithm `protobuf:"bytes,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3" json:"loadbalancer_algorithm,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *ReplaceSpecType) GetUztnaHealthcheck() []*views.ObjectRefType {
	if m != nil {
		return m.UztnaHealthcheck
	}
	return nil
}

func (m *ReplaceSpecType) GetLoadbalancerAlgorithm() *LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get Origin Pool"
// Shape of the origin pool get specification
type GetSpecType struct {
	OriginServers         []*OriginServerType    `protobuf:"bytes,1,rep,name=origin_servers,json=originServers,proto3" json:"origin_servers,omitempty"`
	UztnaHealthcheck      []*views.ObjectRefType `protobuf:"bytes,6,rep,name=uztna_healthcheck,json=uztnaHealthcheck,proto3" json:"uztna_healthcheck,omitempty"`
	LoadbalancerAlgorithm *LoadbalancerAlgorithm `protobuf:"bytes,7,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3" json:"loadbalancer_algorithm,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_877265605b6ed070, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetOriginServers() []*OriginServerType {
	if m != nil {
		return m.OriginServers
	}
	return nil
}

func (m *GetSpecType) GetUztnaHealthcheck() []*views.ObjectRefType {
	if m != nil {
		return m.UztnaHealthcheck
	}
	return nil
}

func (m *GetSpecType) GetLoadbalancerAlgorithm() *LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return nil
}

func init() {
	proto.RegisterType((*LoadbalancerAlgorithm)(nil), "ves.io.schema.uztna.uztna_origin_pool.LoadbalancerAlgorithm")
	golang_proto.RegisterType((*LoadbalancerAlgorithm)(nil), "ves.io.schema.uztna.uztna_origin_pool.LoadbalancerAlgorithm")
	proto.RegisterType((*OriginServerPrivateIP)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerPrivateIP")
	golang_proto.RegisterType((*OriginServerPrivateIP)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerPrivateIP")
	proto.RegisterType((*OriginServerPrivateName)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerPrivateName")
	golang_proto.RegisterType((*OriginServerPrivateName)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerPrivateName")
	proto.RegisterType((*OriginServerType)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerType")
	golang_proto.RegisterType((*OriginServerType)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerType.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.uztna.uztna_origin_pool.OriginServerType.LabelsEntry")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_origin_pool.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_origin_pool/types.proto", fileDescriptor_877265605b6ed070)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/uztna/uztna_origin_pool/types.proto", fileDescriptor_877265605b6ed070)
}

var fileDescriptor_877265605b6ed070 = []byte{
	// 1189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x51, 0x6f, 0xdb, 0x54,
	0x14, 0xf6, 0xb1, 0xdd, 0x2c, 0x3d, 0xa1, 0x5d, 0x6a, 0x56, 0x96, 0xb5, 0xc8, 0x84, 0x88, 0xa1,
	0x6a, 0x74, 0x4e, 0x93, 0x76, 0x6b, 0x5a, 0xa1, 0x49, 0x4b, 0x56, 0xad, 0x29, 0x53, 0x52, 0xb9,
	0xe3, 0x05, 0x04, 0x91, 0x93, 0xdd, 0x26, 0x66, 0x4e, 0xae, 0x65, 0x3b, 0x61, 0x45, 0x02, 0x4d,
	0xc0, 0x03, 0xe2, 0x09, 0xf1, 0x06, 0xe2, 0x07, 0x20, 0x7e, 0x02, 0x1e, 0xa8, 0x9a, 0x84, 0x84,
	0xf6, 0xd4, 0xc7, 0x69, 0x4f, 0x9b, 0x2b, 0xa1, 0x8d, 0xa7, 0x09, 0x09, 0xb4, 0xb7, 0x21, 0x5f,
	0xdb, 0x9b, 0xd3, 0x75, 0xd3, 0x34, 0xd8, 0xdb, 0x5e, 0x8e, 0xee, 0xd5, 0x77, 0xce, 0xb9, 0xe7,
	0x7e, 0xdf, 0xb9, 0x27, 0x0e, 0x16, 0x06, 0xc4, 0x56, 0x74, 0x9a, 0xb7, 0x5b, 0x1d, 0xd2, 0xd5,
	0xf2, 0xfd, 0x4f, 0x9c, 0x5e, 0x68, 0x1b, 0xd4, 0xd2, 0xdb, 0x7a, 0xaf, 0x61, 0x52, 0x6a, 0xe4,
	0x9d, 0x2d, 0x93, 0xd8, 0x8a, 0x69, 0x51, 0x87, 0x4a, 0x47, 0x83, 0x10, 0x25, 0x08, 0x51, 0x98,
	0xb3, 0xf2, 0x48, 0xc8, 0xd4, 0xf1, 0xb6, 0xee, 0x74, 0xfa, 0x4d, 0xa5, 0x45, 0xbb, 0xf9, 0x36,
	0x6d, 0xd3, 0x3c, 0x8b, 0x6e, 0xf6, 0x37, 0xd9, 0x8e, 0x6d, 0xd8, 0x2a, 0xc8, 0x3a, 0xf5, 0xfa,
	0x70, 0x21, 0x2d, 0xa3, 0x6f, 0x3b, 0xc4, 0x8a, 0x1f, 0x3c, 0x35, 0x3d, 0xec, 0x42, 0x4d, 0x47,
	0xa7, 0xbd, 0x08, 0x3c, 0x32, 0x0c, 0xc6, 0xe3, 0x5e, 0x1d, 0x86, 0x06, 0x9a, 0xa1, 0x5f, 0xd0,
	0x1c, 0x12, 0xa2, 0xd9, 0x3d, 0xa8, 0x4e, 0x3e, 0x6e, 0x0c, 0xa7, 0x7e, 0xed, 0x51, 0x0f, 0x3b,
	0x7e, 0x40, 0xce, 0x05, 0x9c, 0x3c, 0x47, 0xb5, 0x0b, 0x4d, 0xcd, 0xd0, 0x7a, 0x2d, 0x62, 0x9d,
	0x36, 0xda, 0xd4, 0xd2, 0x9d, 0x4e, 0x57, 0x5a, 0xc4, 0x94, 0x5a, 0x7f, 0xb7, 0x76, 0xa6, 0xa1,
	0xd6, 0xcb, 0xd5, 0x5a, 0x86, 0xcf, 0xc2, 0x4c, 0xaa, 0x78, 0x48, 0x19, 0x66, 0x70, 0xa5, 0x6b,
	0x3a, 0x5b, 0xab, 0x9c, 0x8a, 0xcc, 0x95, 0x79, 0x4a, 0x15, 0x9c, 0x38, 0xb7, 0x72, 0x7a, 0xe3,
	0x7c, 0xa3, 0x52, 0xaf, 0xd5, 0x56, 0x2a, 0xe7, 0xab, 0xf5, 0xda, 0x46, 0x46, 0x78, 0x62, 0x78,
	0x9a, 0x05, 0xc4, 0xfc, 0xcb, 0x32, 0xa6, 0x34, 0xa3, 0x4d, 0x1b, 0xad, 0x0e, 0xd5, 0x5b, 0x44,
	0x3a, 0xb8, 0xed, 0x02, 0xbf, 0xe3, 0x02, 0x78, 0x2e, 0x08, 0xc5, 0xd9, 0xf9, 0x35, 0x31, 0x09,
	0x69, 0x3e, 0xf7, 0x05, 0xe0, 0x64, 0x9d, 0x09, 0xb7, 0x41, 0xac, 0x01, 0xb1, 0xd6, 0x2d, 0x7d,
	0xa0, 0x39, 0xa4, 0xba, 0x2e, 0x4d, 0x23, 0xaf, 0x9b, 0x19, 0xc8, 0xc2, 0xcc, 0x68, 0x79, 0xf4,
	0xe7, 0x3b, 0xdb, 0x82, 0x68, 0xf1, 0x97, 0x60, 0x95, 0x53, 0x79, 0xdd, 0x94, 0xb2, 0x28, 0xea,
	0xe6, 0xe0, 0x64, 0x26, 0xc5, 0x60, 0xf4, 0xe1, 0x11, 0x4b, 0xb8, 0x0c, 0x3e, 0xce, 0x90, 0xf2,
	0x51, 0x9c, 0x30, 0x83, 0x5c, 0x0d, 0xdd, 0x8c, 0x8a, 0x48, 0x6f, 0xbb, 0x00, 0x3b, 0x2e, 0xa0,
	0xe7, 0x82, 0x58, 0x98, 0x2d, 0x14, 0xd6, 0xc4, 0x24, 0xa6, 0x53, 0xb9, 0x2f, 0x01, 0x0f, 0xef,
	0x53, 0x45, 0x4d, 0xeb, 0x12, 0x69, 0x0a, 0x93, 0x1d, 0x6a, 0x3b, 0x3d, 0xad, 0x4b, 0x82, 0x6a,
	0xd4, 0x07, 0x7b, 0x69, 0x05, 0xd3, 0x16, 0xd9, 0xb4, 0x88, 0xdd, 0x69, 0xe8, 0x3d, 0x87, 0x58,
	0x03, 0xcd, 0x60, 0x34, 0x8f, 0x95, 0xa7, 0xfc, 0x93, 0x6e, 0xb8, 0x20, 0xcc, 0xcf, 0xcd, 0xdd,
	0x73, 0x81, 0xf3, 0x2b, 0x4c, 0x1c, 0x13, 0x33, 0x97, 0xff, 0x7e, 0x43, 0x3d, 0x18, 0xc6, 0x54,
	0xc3, 0x90, 0xe5, 0xc4, 0x5f, 0xa7, 0x84, 0xc2, 0x6c, 0x31, 0xf7, 0xcf, 0x08, 0xa6, 0xe3, 0x65,
	0x9c, 0xdf, 0x32, 0x89, 0xf4, 0x01, 0xe2, 0xc3, 0x8b, 0xb0, 0x0a, 0x52, 0xc5, 0xb7, 0x95, 0xa7,
	0x7a, 0x06, 0xca, 0xbe, 0xcc, 0xae, 0x72, 0xea, 0x68, 0x98, 0xb1, 0x6a, 0x4a, 0x3a, 0xbe, 0x14,
	0xa5, 0x67, 0x57, 0x0c, 0xba, 0xe4, 0xd4, 0xb3, 0x1f, 0xe0, 0x93, 0x56, 0x16, 0x6f, 0xbb, 0x4c,
	0x8b, 0x94, 0x19, 0x63, 0xd2, 0xc1, 0x84, 0xa1, 0x35, 0x89, 0x61, 0x67, 0x46, 0xb3, 0xc2, 0x4c,
	0xaa, 0x58, 0x79, 0x86, 0x43, 0x7c, 0x4a, 0x94, 0x73, 0x2c, 0xcb, 0x4a, 0xcf, 0xb1, 0xb6, 0xca,
	0x87, 0x7d, 0xa2, 0xbf, 0xbf, 0x02, 0x22, 0xf2, 0x1c, 0x78, 0x37, 0x7f, 0x13, 0x12, 0x5f, 0x5f,
	0x01, 0x3e, 0xc9, 0xa9, 0xe1, 0x59, 0xd2, 0xe7, 0x80, 0xa2, 0x49, 0x2d, 0x27, 0x83, 0x4c, 0x98,
	0x9e, 0x2f, 0xca, 0xc2, 0xc2, 0xbc, 0xe7, 0xc2, 0x3b, 0xc8, 0x97, 0xe6, 0x50, 0x2c, 0xcd, 0x31,
	0x5b, 0xf2, 0x6d, 0x71, 0xee, 0x44, 0xd1, 0xb7, 0xa5, 0xc0, 0x9e, 0xf4, 0xed, 0xd2, 0x09, 0xf4,
	0x03, 0x18, 0xc8, 0x6c, 0x29, 0xb0, 0x8b, 0x0c, 0x3c, 0x89, 0x62, 0x69, 0x61, 0x61, 0x3e, 0xd2,
	0x58, 0x3c, 0xc6, 0xcf, 0x40, 0x24, 0xf6, 0xfd, 0xfb, 0x82, 0xca, 0xce, 0x9e, 0x5a, 0xc2, 0x54,
	0xac, 0x68, 0x29, 0x8d, 0xc2, 0x45, 0xb2, 0x15, 0xb6, 0x93, 0xbf, 0x94, 0x0e, 0xe1, 0xc8, 0x40,
	0x33, 0xfa, 0x01, 0xff, 0xa3, 0x6a, 0xb0, 0x59, 0xe6, 0x4b, 0xb0, 0xfc, 0x2b, 0x5c, 0x75, 0xe1,
	0x08, 0x1e, 0xc6, 0xb1, 0x80, 0x87, 0x6c, 0x40, 0x84, 0x94, 0x28, 0xcd, 0x2e, 0xcd, 0x16, 0xe6,
	0xae, 0xb9, 0xf0, 0x03, 0xe0, 0x69, 0x14, 0x7d, 0x66, 0x8e, 0x2d, 0xe1, 0x22, 0x66, 0xe2, 0x0d,
	0x53, 0xc4, 0x50, 0x96, 0x6c, 0x75, 0x1d, 0xa7, 0x87, 0xb5, 0x2e, 0xa6, 0x22, 0xec, 0x4c, 0x6d,
	0x03, 0x0b, 0x78, 0xc0, 0x57, 0x29, 0x5f, 0x5d, 0x2f, 0xbe, 0x89, 0x63, 0x0f, 0x33, 0x28, 0xba,
	0x89, 0x93, 0xf1, 0x30, 0x25, 0x6a, 0x7f, 0x1c, 0x47, 0x71, 0xdd, 0xbf, 0x5d, 0x22, 0x60, 0x18,
	0x0f, 0x61, 0x22, 0xb8, 0xe5, 0x1a, 0x46, 0x52, 0xa7, 0xf9, 0xf2, 0x34, 0x26, 0xc2, 0xe7, 0x37,
	0x11, 0x3e, 0xbf, 0xa4, 0xe7, 0x02, 0x14, 0xee, 0xb9, 0x00, 0x6b, 0x62, 0x32, 0x99, 0x1e, 0xcd,
	0xfd, 0x22, 0xe0, 0xf8, 0x59, 0x83, 0x36, 0x35, 0x63, 0xc3, 0x24, 0x2d, 0xd6, 0xf6, 0x9f, 0xe1,
	0x78, 0xd8, 0x03, 0x36, 0xbb, 0xaf, 0x9d, 0x01, 0xd6, 0x34, 0x8b, 0xcf, 0xd8, 0x34, 0x65, 0x99,
	0x0d, 0x89, 0x6f, 0x81, 0x4f, 0x67, 0xa3, 0x55, 0x12, 0xa2, 0x55, 0x06, 0xd4, 0x31, 0x1a, 0x8b,
	0xb0, 0xa5, 0xaf, 0x00, 0x5f, 0x31, 0x62, 0x63, 0xb5, 0xa1, 0x45, 0x73, 0x35, 0x7c, 0x22, 0x4f,
	0xfb, 0x06, 0xf7, 0x9d, 0xcd, 0xe5, 0x97, 0x6f, 0xb8, 0x10, 0x9f, 0xce, 0x7e, 0xff, 0xa8, 0x93,
	0xc6, 0xbe, 0x73, 0x9c, 0xe2, 0x44, 0x90, 0xb6, 0x43, 0x34, 0xc3, 0xe9, 0xb4, 0x3a, 0xa4, 0x75,
	0x31, 0x23, 0x30, 0x36, 0x72, 0x7b, 0x8a, 0x60, 0x3f, 0x0f, 0x4a, 0xbd, 0xf9, 0x11, 0x69, 0x39,
	0x2a, 0xd9, 0x0c, 0x2e, 0xfe, 0xd3, 0xa7, 0x8f, 0xc6, 0x3f, 0x20, 0x63, 0x44, 0x4d, 0x33, 0x70,
	0xf5, 0x21, 0xb6, 0x9c, 0xbf, 0xea, 0xc2, 0x5b, 0x38, 0x89, 0xe3, 0x43, 0x1d, 0x67, 0x4b, 0xfe,
	0x90, 0x42, 0x09, 0xc7, 0x02, 0xdf, 0x6c, 0xc5, 0x77, 0xb6, 0x25, 0x98, 0xcf, 0xdd, 0xe1, 0x71,
	0xbc, 0x62, 0x11, 0xcd, 0x21, 0x0f, 0xf4, 0xfb, 0xf0, 0x7f, 0xd6, 0x6f, 0xaf, 0x3e, 0xfb, 0x92,
	0x92, 0x78, 0x7e, 0xa4, 0x48, 0xf6, 0x63, 0xfb, 0xe1, 0xc0, 0x7f, 0xef, 0x87, 0xc7, 0x48, 0xbf,
	0x3c, 0x71, 0xed, 0xd4, 0x9e, 0x87, 0x91, 0xfb, 0x93, 0xc7, 0x83, 0x2a, 0x31, 0x0d, 0xad, 0xf5,
	0x82, 0xec, 0xe7, 0x4e, 0xf6, 0x1f, 0x3c, 0xa6, 0xce, 0x12, 0xe7, 0x05, 0xd1, 0xcf, 0x99, 0xe8,
	0xf2, 0x77, 0xb0, 0x73, 0x4b, 0xe6, 0xae, 0xdf, 0x92, 0xb9, 0xbb, 0xb7, 0x64, 0xb8, 0xec, 0xc9,
	0xf0, 0xa3, 0x27, 0xc3, 0xef, 0x9e, 0x0c, 0x3b, 0x9e, 0x0c, 0xd7, 0x3d, 0x19, 0x6e, 0x7a, 0x32,
	0xdc, 0xf6, 0x64, 0xee, 0xae, 0x27, 0xc3, 0x37, 0xbb, 0x32, 0xb7, 0xbd, 0x2b, 0xc3, 0xce, 0xae,
	0xcc, 0x5d, 0xdf, 0x95, 0xb9, 0xf7, 0xde, 0x6f, 0x53, 0xf3, 0x62, 0x5b, 0x19, 0x50, 0xc3, 0x21,
	0x96, 0xa5, 0x29, 0x7d, 0x3b, 0xcf, 0x16, 0x9b, 0xd4, 0xea, 0x1e, 0x37, 0x2d, 0x3a, 0xd0, 0x2f,
	0x10, 0xeb, 0x78, 0x04, 0xe7, 0xcd, 0x66, 0x9b, 0xe6, 0xc9, 0x25, 0x27, 0xfc, 0xa8, 0x7e, 0xf2,
	0xff, 0x8f, 0x66, 0x82, 0x7d, 0x68, 0xcf, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x72, 0x0c, 0xcc,
	0xec, 0xaf, 0x0c, 0x00, 0x00,
}

func (this *LoadbalancerAlgorithm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadbalancerAlgorithm)
	if !ok {
		that2, ok := that.(LoadbalancerAlgorithm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AlgoChoice == nil {
		if this.AlgoChoice != nil {
			return false
		}
	} else if this.AlgoChoice == nil {
		return false
	} else if !this.AlgoChoice.Equal(that1.AlgoChoice) {
		return false
	}
	return true
}
func (this *LoadbalancerAlgorithm_ROUND_ROBIN) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadbalancerAlgorithm_ROUND_ROBIN)
	if !ok {
		that2, ok := that.(LoadbalancerAlgorithm_ROUND_ROBIN)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ROUND_ROBIN.Equal(that1.ROUND_ROBIN) {
		return false
	}
	return true
}
func (this *LoadbalancerAlgorithm_LEAST_CONNECTIONS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadbalancerAlgorithm_LEAST_CONNECTIONS)
	if !ok {
		that2, ok := that.(LoadbalancerAlgorithm_LEAST_CONNECTIONS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LEAST_CONNECTIONS.Equal(that1.LEAST_CONNECTIONS) {
		return false
	}
	return true
}
func (this *OriginServerPrivateIP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateIP)
	if !ok {
		that2, ok := that.(OriginServerPrivateIP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PrivateIpChoice == nil {
		if this.PrivateIpChoice != nil {
			return false
		}
	} else if this.PrivateIpChoice == nil {
		return false
	} else if !this.PrivateIpChoice.Equal(that1.PrivateIpChoice) {
		return false
	}
	return true
}
func (this *OriginServerPrivateIP_Ip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateIP_Ip)
	if !ok {
		that2, ok := that.(OriginServerPrivateIP_Ip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *OriginServerPrivateIP_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateIP_Ipv6)
	if !ok {
		that2, ok := that.(OriginServerPrivateIP_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *OriginServerPrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerPrivateName)
	if !ok {
		that2, ok := that.(OriginServerPrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.RefreshInterval != that1.RefreshInterval {
		return false
	}
	return true
}
func (this *OriginServerType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType)
	if !ok {
		that2, ok := that.(OriginServerType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *OriginServerType_PrivateIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_PrivateIp)
	if !ok {
		that2, ok := that.(OriginServerType_PrivateIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateIp.Equal(that1.PrivateIp) {
		return false
	}
	return true
}
func (this *OriginServerType_PrivateName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerType_PrivateName)
	if !ok {
		that2, ok := that.(OriginServerType_PrivateName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateName.Equal(that1.PrivateName) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if !this.LoadbalancerAlgorithm.Equal(that1.LoadbalancerAlgorithm) {
		return false
	}
	if len(this.UztnaHealthcheck) != len(that1.UztnaHealthcheck) {
		return false
	}
	for i := range this.UztnaHealthcheck {
		if !this.UztnaHealthcheck[i].Equal(that1.UztnaHealthcheck[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if len(this.UztnaHealthcheck) != len(that1.UztnaHealthcheck) {
		return false
	}
	for i := range this.UztnaHealthcheck {
		if !this.UztnaHealthcheck[i].Equal(that1.UztnaHealthcheck[i]) {
			return false
		}
	}
	if !this.LoadbalancerAlgorithm.Equal(that1.LoadbalancerAlgorithm) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if len(this.UztnaHealthcheck) != len(that1.UztnaHealthcheck) {
		return false
	}
	for i := range this.UztnaHealthcheck {
		if !this.UztnaHealthcheck[i].Equal(that1.UztnaHealthcheck[i]) {
			return false
		}
	}
	if !this.LoadbalancerAlgorithm.Equal(that1.LoadbalancerAlgorithm) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServers) != len(that1.OriginServers) {
		return false
	}
	for i := range this.OriginServers {
		if !this.OriginServers[i].Equal(that1.OriginServers[i]) {
			return false
		}
	}
	if len(this.UztnaHealthcheck) != len(that1.UztnaHealthcheck) {
		return false
	}
	for i := range this.UztnaHealthcheck {
		if !this.UztnaHealthcheck[i].Equal(that1.UztnaHealthcheck[i]) {
			return false
		}
	}
	if !this.LoadbalancerAlgorithm.Equal(that1.LoadbalancerAlgorithm) {
		return false
	}
	return true
}
func (this *LoadbalancerAlgorithm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_origin_pool.LoadbalancerAlgorithm{")
	if this.AlgoChoice != nil {
		s = append(s, "AlgoChoice: "+fmt.Sprintf("%#v", this.AlgoChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadbalancerAlgorithm_ROUND_ROBIN) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_origin_pool.LoadbalancerAlgorithm_ROUND_ROBIN{` +
		`ROUND_ROBIN:` + fmt.Sprintf("%#v", this.ROUND_ROBIN) + `}`}, ", ")
	return s
}
func (this *LoadbalancerAlgorithm_LEAST_CONNECTIONS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_origin_pool.LoadbalancerAlgorithm_LEAST_CONNECTIONS{` +
		`LEAST_CONNECTIONS:` + fmt.Sprintf("%#v", this.LEAST_CONNECTIONS) + `}`}, ", ")
	return s
}
func (this *OriginServerPrivateIP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_origin_pool.OriginServerPrivateIP{")
	if this.PrivateIpChoice != nil {
		s = append(s, "PrivateIpChoice: "+fmt.Sprintf("%#v", this.PrivateIpChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerPrivateIP_Ip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_origin_pool.OriginServerPrivateIP_Ip{` +
		`Ip:` + fmt.Sprintf("%#v", this.Ip) + `}`}, ", ")
	return s
}
func (this *OriginServerPrivateIP_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_origin_pool.OriginServerPrivateIP_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *OriginServerPrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_origin_pool.OriginServerPrivateName{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "RefreshInterval: "+fmt.Sprintf("%#v", this.RefreshInterval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&uztna_origin_pool.OriginServerType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OriginServerType_PrivateIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_origin_pool.OriginServerType_PrivateIp{` +
		`PrivateIp:` + fmt.Sprintf("%#v", this.PrivateIp) + `}`}, ", ")
	return s
}
func (this *OriginServerType_PrivateName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_origin_pool.OriginServerType_PrivateName{` +
		`PrivateName:` + fmt.Sprintf("%#v", this.PrivateName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uztna_origin_pool.GlobalSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.LoadbalancerAlgorithm != nil {
		s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	}
	if this.UztnaHealthcheck != nil {
		s = append(s, "UztnaHealthcheck: "+fmt.Sprintf("%#v", this.UztnaHealthcheck)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uztna_origin_pool.CreateSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.UztnaHealthcheck != nil {
		s = append(s, "UztnaHealthcheck: "+fmt.Sprintf("%#v", this.UztnaHealthcheck)+",\n")
	}
	if this.LoadbalancerAlgorithm != nil {
		s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uztna_origin_pool.ReplaceSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.UztnaHealthcheck != nil {
		s = append(s, "UztnaHealthcheck: "+fmt.Sprintf("%#v", this.UztnaHealthcheck)+",\n")
	}
	if this.LoadbalancerAlgorithm != nil {
		s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uztna_origin_pool.GetSpecType{")
	if this.OriginServers != nil {
		s = append(s, "OriginServers: "+fmt.Sprintf("%#v", this.OriginServers)+",\n")
	}
	if this.UztnaHealthcheck != nil {
		s = append(s, "UztnaHealthcheck: "+fmt.Sprintf("%#v", this.UztnaHealthcheck)+",\n")
	}
	if this.LoadbalancerAlgorithm != nil {
		s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoadbalancerAlgorithm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadbalancerAlgorithm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadbalancerAlgorithm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AlgoChoice != nil {
		{
			size := m.AlgoChoice.Size()
			i -= size
			if _, err := m.AlgoChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoadbalancerAlgorithm_ROUND_ROBIN) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadbalancerAlgorithm_ROUND_ROBIN) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ROUND_ROBIN != nil {
		{
			size, err := m.ROUND_ROBIN.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LoadbalancerAlgorithm_LEAST_CONNECTIONS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadbalancerAlgorithm_LEAST_CONNECTIONS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LEAST_CONNECTIONS != nil {
		{
			size, err := m.LEAST_CONNECTIONS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerPrivateIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerPrivateIP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerPrivateIP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivateIpChoice != nil {
		{
			size := m.PrivateIpChoice.Size()
			i -= size
			if _, err := m.PrivateIpChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OriginServerPrivateIP_Ip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerPrivateIP_Ip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Ip)
	copy(dAtA[i:], m.Ip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *OriginServerPrivateIP_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerPrivateIP_Ipv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Ipv6)
	copy(dAtA[i:], m.Ipv6)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
	i--
	dAtA[i] = 0x5a
	return len(dAtA) - i, nil
}
func (m *OriginServerPrivateName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerPrivateName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerPrivateName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OriginServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OriginServerType_PrivateIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerType_PrivateIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateIp != nil {
		{
			size, err := m.PrivateIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerType_PrivateName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerType_PrivateName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateName != nil {
		{
			size, err := m.PrivateName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaHealthcheck) > 0 {
		for iNdEx := len(m.UztnaHealthcheck) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaHealthcheck[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LoadbalancerAlgorithm != nil {
		{
			size, err := m.LoadbalancerAlgorithm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OriginServers) > 0 {
		for iNdEx := len(m.OriginServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerAlgorithm != nil {
		{
			size, err := m.LoadbalancerAlgorithm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UztnaHealthcheck) > 0 {
		for iNdEx := len(m.UztnaHealthcheck) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaHealthcheck[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OriginServers) > 0 {
		for iNdEx := len(m.OriginServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerAlgorithm != nil {
		{
			size, err := m.LoadbalancerAlgorithm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UztnaHealthcheck) > 0 {
		for iNdEx := len(m.UztnaHealthcheck) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaHealthcheck[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OriginServers) > 0 {
		for iNdEx := len(m.OriginServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerAlgorithm != nil {
		{
			size, err := m.LoadbalancerAlgorithm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UztnaHealthcheck) > 0 {
		for iNdEx := len(m.UztnaHealthcheck) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaHealthcheck[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OriginServers) > 0 {
		for iNdEx := len(m.OriginServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoadbalancerAlgorithm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlgoChoice != nil {
		n += m.AlgoChoice.Size()
	}
	return n
}

func (m *LoadbalancerAlgorithm_ROUND_ROBIN) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ROUND_ROBIN != nil {
		l = m.ROUND_ROBIN.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LoadbalancerAlgorithm_LEAST_CONNECTIONS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LEAST_CONNECTIONS != nil {
		l = m.LEAST_CONNECTIONS.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerPrivateIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateIpChoice != nil {
		n += m.PrivateIpChoice.Size()
	}
	return n
}

func (m *OriginServerPrivateIP_Ip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *OriginServerPrivateIP_Ipv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipv6)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *OriginServerPrivateName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovTypes(uint64(m.RefreshInterval))
	}
	return n
}

func (m *OriginServerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *OriginServerType_PrivateIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateIp != nil {
		l = m.PrivateIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerType_PrivateName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateName != nil {
		l = m.PrivateName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != nil {
		l = m.LoadbalancerAlgorithm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.UztnaHealthcheck) > 0 {
		for _, e := range m.UztnaHealthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaHealthcheck) > 0 {
		for _, e := range m.UztnaHealthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != nil {
		l = m.LoadbalancerAlgorithm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaHealthcheck) > 0 {
		for _, e := range m.UztnaHealthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != nil {
		l = m.LoadbalancerAlgorithm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginServers) > 0 {
		for _, e := range m.OriginServers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UztnaHealthcheck) > 0 {
		for _, e := range m.UztnaHealthcheck {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != nil {
		l = m.LoadbalancerAlgorithm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoadbalancerAlgorithm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerAlgorithm{`,
		`AlgoChoice:` + fmt.Sprintf("%v", this.AlgoChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerAlgorithm_ROUND_ROBIN) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerAlgorithm_ROUND_ROBIN{`,
		`ROUND_ROBIN:` + strings.Replace(fmt.Sprintf("%v", this.ROUND_ROBIN), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerAlgorithm_LEAST_CONNECTIONS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerAlgorithm_LEAST_CONNECTIONS{`,
		`LEAST_CONNECTIONS:` + strings.Replace(fmt.Sprintf("%v", this.LEAST_CONNECTIONS), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateIP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateIP{`,
		`PrivateIpChoice:` + fmt.Sprintf("%v", this.PrivateIpChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateIP_Ip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateIP_Ip{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateIP_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateIP_Ipv6{`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerPrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerPrivateName{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`RefreshInterval:` + fmt.Sprintf("%v", this.RefreshInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&OriginServerType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_PrivateIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_PrivateIp{`,
		`PrivateIp:` + strings.Replace(fmt.Sprintf("%v", this.PrivateIp), "OriginServerPrivateIP", "OriginServerPrivateIP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerType_PrivateName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OriginServerType_PrivateName{`,
		`PrivateName:` + strings.Replace(fmt.Sprintf("%v", this.PrivateName), "OriginServerPrivateName", "OriginServerPrivateName", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginServers := "[]*OriginServerType{"
	for _, f := range this.OriginServers {
		repeatedStringForOriginServers += strings.Replace(f.String(), "OriginServerType", "OriginServerType", 1) + ","
	}
	repeatedStringForOriginServers += "}"
	repeatedStringForUztnaHealthcheck := "[]*ObjectRefType{"
	for _, f := range this.UztnaHealthcheck {
		repeatedStringForUztnaHealthcheck += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaHealthcheck += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`OriginServers:` + repeatedStringForOriginServers + `,`,
		`LoadbalancerAlgorithm:` + strings.Replace(this.LoadbalancerAlgorithm.String(), "LoadbalancerAlgorithm", "LoadbalancerAlgorithm", 1) + `,`,
		`UztnaHealthcheck:` + repeatedStringForUztnaHealthcheck + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginServers := "[]*OriginServerType{"
	for _, f := range this.OriginServers {
		repeatedStringForOriginServers += strings.Replace(f.String(), "OriginServerType", "OriginServerType", 1) + ","
	}
	repeatedStringForOriginServers += "}"
	repeatedStringForUztnaHealthcheck := "[]*ObjectRefType{"
	for _, f := range this.UztnaHealthcheck {
		repeatedStringForUztnaHealthcheck += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaHealthcheck += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`OriginServers:` + repeatedStringForOriginServers + `,`,
		`UztnaHealthcheck:` + repeatedStringForUztnaHealthcheck + `,`,
		`LoadbalancerAlgorithm:` + strings.Replace(this.LoadbalancerAlgorithm.String(), "LoadbalancerAlgorithm", "LoadbalancerAlgorithm", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginServers := "[]*OriginServerType{"
	for _, f := range this.OriginServers {
		repeatedStringForOriginServers += strings.Replace(f.String(), "OriginServerType", "OriginServerType", 1) + ","
	}
	repeatedStringForOriginServers += "}"
	repeatedStringForUztnaHealthcheck := "[]*ObjectRefType{"
	for _, f := range this.UztnaHealthcheck {
		repeatedStringForUztnaHealthcheck += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaHealthcheck += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`OriginServers:` + repeatedStringForOriginServers + `,`,
		`UztnaHealthcheck:` + repeatedStringForUztnaHealthcheck + `,`,
		`LoadbalancerAlgorithm:` + strings.Replace(this.LoadbalancerAlgorithm.String(), "LoadbalancerAlgorithm", "LoadbalancerAlgorithm", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginServers := "[]*OriginServerType{"
	for _, f := range this.OriginServers {
		repeatedStringForOriginServers += strings.Replace(f.String(), "OriginServerType", "OriginServerType", 1) + ","
	}
	repeatedStringForOriginServers += "}"
	repeatedStringForUztnaHealthcheck := "[]*ObjectRefType{"
	for _, f := range this.UztnaHealthcheck {
		repeatedStringForUztnaHealthcheck += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaHealthcheck += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`OriginServers:` + repeatedStringForOriginServers + `,`,
		`UztnaHealthcheck:` + repeatedStringForUztnaHealthcheck + `,`,
		`LoadbalancerAlgorithm:` + strings.Replace(this.LoadbalancerAlgorithm.String(), "LoadbalancerAlgorithm", "LoadbalancerAlgorithm", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoadbalancerAlgorithm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadbalancerAlgorithm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadbalancerAlgorithm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ROUND_ROBIN", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgoChoice = &LoadbalancerAlgorithm_ROUND_ROBIN{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LEAST_CONNECTIONS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgoChoice = &LoadbalancerAlgorithm_LEAST_CONNECTIONS{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerPrivateIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerPrivateIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerPrivateIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIpChoice = &OriginServerPrivateIP_Ip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIpChoice = &OriginServerPrivateIP_Ipv6{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerPrivateName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerPrivateName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerPrivateName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerPrivateIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_PrivateIp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OriginServerPrivateName{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &OriginServerType_PrivateName{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadbalancerAlgorithm == nil {
				m.LoadbalancerAlgorithm = &LoadbalancerAlgorithm{}
			}
			if err := m.LoadbalancerAlgorithm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaHealthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaHealthcheck = append(m.UztnaHealthcheck, &views.ObjectRefType{})
			if err := m.UztnaHealthcheck[len(m.UztnaHealthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaHealthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaHealthcheck = append(m.UztnaHealthcheck, &views.ObjectRefType{})
			if err := m.UztnaHealthcheck[len(m.UztnaHealthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadbalancerAlgorithm == nil {
				m.LoadbalancerAlgorithm = &LoadbalancerAlgorithm{}
			}
			if err := m.LoadbalancerAlgorithm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaHealthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaHealthcheck = append(m.UztnaHealthcheck, &views.ObjectRefType{})
			if err := m.UztnaHealthcheck[len(m.UztnaHealthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadbalancerAlgorithm == nil {
				m.LoadbalancerAlgorithm = &LoadbalancerAlgorithm{}
			}
			if err := m.LoadbalancerAlgorithm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServers = append(m.OriginServers, &OriginServerType{})
			if err := m.OriginServers[len(m.OriginServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaHealthcheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaHealthcheck = append(m.UztnaHealthcheck, &views.ObjectRefType{})
			if err := m.UztnaHealthcheck[len(m.UztnaHealthcheck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadbalancerAlgorithm == nil {
				m.LoadbalancerAlgorithm = &LoadbalancerAlgorithm{}
			}
			if err := m.LoadbalancerAlgorithm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_gateway/types.proto

package uztna_gateway

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BIG-IP Instance
//
// x-displayName: "BIG-IP Instance"
//
// BIG-IP Instances. Maximum limit for one gateway is one.
type BigIpAccessSiteList struct {
	// Selected BigIP Instance
	//
	// x-displayName: "BIG-IP Instance"
	// x-required
	// Selected BIG-IP Instance
	BigipSite []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=bigip_site,json=bigipSite,proto3" json:"bigip_site,omitempty"`
}

func (m *BigIpAccessSiteList) Reset()      { *m = BigIpAccessSiteList{} }
func (*BigIpAccessSiteList) ProtoMessage() {}
func (*BigIpAccessSiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dfe27e7fa458c, []int{0}
}
func (m *BigIpAccessSiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigIpAccessSiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BigIpAccessSiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BigIpAccessSiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigIpAccessSiteList.Merge(m, src)
}
func (m *BigIpAccessSiteList) XXX_Size() int {
	return m.Size()
}
func (m *BigIpAccessSiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_BigIpAccessSiteList.DiscardUnknown(m)
}

var xxx_messageInfo_BigIpAccessSiteList proto.InternalMessageInfo

func (m *BigIpAccessSiteList) GetBigipSite() []*schema.ObjectRefType {
	if m != nil {
		return m.BigipSite
	}
	return nil
}

// Listeners
//
// x-displayName: "Listeners"
//
// Configure BIG-IP Edge Gateway Listener IP
type Listeners struct {
	// BIG-IP Edge Gateway Listener
	//
	// x-displayName: "BIG-IP Edge Gateway Listener"
	//
	// Listener IP Address Assignment
	//
	// Types that are valid to be assigned to FlowType:
	//	*Listeners_Ipv4
	//	*Listeners_Ipv6
	FlowType isListeners_FlowType `protobuf_oneof:"flow_type"`
}

func (m *Listeners) Reset()      { *m = Listeners{} }
func (*Listeners) ProtoMessage() {}
func (*Listeners) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dfe27e7fa458c, []int{1}
}
func (m *Listeners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Listeners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Listeners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Listeners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Listeners.Merge(m, src)
}
func (m *Listeners) XXX_Size() int {
	return m.Size()
}
func (m *Listeners) XXX_DiscardUnknown() {
	xxx_messageInfo_Listeners.DiscardUnknown(m)
}

var xxx_messageInfo_Listeners proto.InternalMessageInfo

type isListeners_FlowType interface {
	isListeners_FlowType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Listeners_Ipv4 struct {
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
}
type Listeners_Ipv6 struct {
	Ipv6 string `protobuf:"bytes,3,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (*Listeners_Ipv4) isListeners_FlowType() {}
func (*Listeners_Ipv6) isListeners_FlowType() {}

func (m *Listeners) GetFlowType() isListeners_FlowType {
	if m != nil {
		return m.FlowType
	}
	return nil
}

func (m *Listeners) GetIpv4() string {
	if x, ok := m.GetFlowType().(*Listeners_Ipv4); ok {
		return x.Ipv4
	}
	return ""
}

func (m *Listeners) GetIpv6() string {
	if x, ok := m.GetFlowType().(*Listeners_Ipv6); ok {
		return x.Ipv6
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Listeners) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Listeners_Ipv4)(nil),
		(*Listeners_Ipv6)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// The gateways represent the sites
// where the end user can connect to terminate
// the mTLS/DTLS tunnels.The gateways associated with a UZTNA ZeroTrust Domains
// would all be front ending the same set of applications and will
// enforce same set of policies for authentication and authorisation
// to grant access to these applications.
// This ensures same user experience no matter which gateway is reached for tunnel termination.
// Each Gateway will have a lease pool defined to allocate IP address to client for the
// terminated tunnel.
// Shape of the UZTNA Gateway
type GlobalSpecType struct {
	// BIG-IP Instance
	//
	// x-displayName: "BIG-IP Instance"
	// x-required
	// BIG-IP Instance.
	BigIpInstance *BigIpAccessSiteList `protobuf:"bytes,1,opt,name=big_ip_instance,json=bigIpInstance,proto3" json:"big_ip_instance,omitempty"`
	// Listeners
	//
	// x-displayName: "Listeners"
	// x-required
	// BIG-IP Edge Gateway Listener.
	Listeners []*Listeners `protobuf:"bytes,3,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dfe27e7fa458c, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetBigIpInstance() *BigIpAccessSiteList {
	if m != nil {
		return m.BigIpInstance
	}
	return nil
}

func (m *GlobalSpecType) GetListeners() []*Listeners {
	if m != nil {
		return m.Listeners
	}
	return nil
}

// Create Big IP CE Gateways Schema
//
// x-displayName: "Create Gateways schema"
//
// Creates a new gateways object.
type CreateSpecType struct {
	BigIpInstance *BigIpAccessSiteList `protobuf:"bytes,1,opt,name=big_ip_instance,json=bigIpInstance,proto3" json:"big_ip_instance,omitempty"`
	Listeners     []*Listeners         `protobuf:"bytes,3,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dfe27e7fa458c, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetBigIpInstance() *BigIpAccessSiteList {
	if m != nil {
		return m.BigIpInstance
	}
	return nil
}

func (m *CreateSpecType) GetListeners() []*Listeners {
	if m != nil {
		return m.Listeners
	}
	return nil
}

// Replace Gateways Schema
//
// x-displayName: "Replace Gateways schema"
// Replace a new gateways object.
type ReplaceSpecType struct {
	BigIpInstance *BigIpAccessSiteList `protobuf:"bytes,1,opt,name=big_ip_instance,json=bigIpInstance,proto3" json:"big_ip_instance,omitempty"`
	Listeners     []*Listeners         `protobuf:"bytes,3,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dfe27e7fa458c, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetBigIpInstance() *BigIpAccessSiteList {
	if m != nil {
		return m.BigIpInstance
	}
	return nil
}

func (m *ReplaceSpecType) GetListeners() []*Listeners {
	if m != nil {
		return m.Listeners
	}
	return nil
}

// Get Gateways Schema
//
// x-displayName: "Get Gateways schema"
// Get a new gateways object.
type GetSpecType struct {
	BigIpInstance *BigIpAccessSiteList `protobuf:"bytes,1,opt,name=big_ip_instance,json=bigIpInstance,proto3" json:"big_ip_instance,omitempty"`
	Listeners     []*Listeners         `protobuf:"bytes,3,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dfe27e7fa458c, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetBigIpInstance() *BigIpAccessSiteList {
	if m != nil {
		return m.BigIpInstance
	}
	return nil
}

func (m *GetSpecType) GetListeners() []*Listeners {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func init() {
	proto.RegisterType((*BigIpAccessSiteList)(nil), "ves.io.schema.uztna.uztna_gateway.BigIpAccessSiteList")
	proto.RegisterType((*Listeners)(nil), "ves.io.schema.uztna.uztna_gateway.Listeners")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_gateway.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_gateway.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_gateway.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_gateway.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_gateway/types.proto", fileDescriptor_ec5dfe27e7fa458c)
}

var fileDescriptor_ec5dfe27e7fa458c = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0x4f, 0x6b, 0xd3, 0x60,
	0x18, 0xcf, 0x93, 0x66, 0xb2, 0xbe, 0x9b, 0x5b, 0xcd, 0x04, 0xbb, 0x3a, 0x62, 0x2c, 0x1e, 0x86,
	0xac, 0x29, 0xd4, 0xd1, 0xc3, 0x10, 0x61, 0x15, 0xa9, 0x2d, 0x82, 0xa3, 0x13, 0x05, 0x0f, 0x96,
	0x24, 0x7d, 0x16, 0x5f, 0xcd, 0x92, 0x97, 0xbc, 0xef, 0xba, 0x4d, 0x50, 0xf6, 0x05, 0x04, 0xf1,
	0x53, 0x88, 0x1f, 0xc1, 0x7a, 0x18, 0x9e, 0x64, 0xa7, 0x22, 0x28, 0x3b, 0xda, 0xec, 0xa2, 0xb7,
	0x1d, 0x3d, 0x4a, 0x93, 0x74, 0x2e, 0x43, 0xd1, 0xab, 0xbb, 0x84, 0xf0, 0xfc, 0xfe, 0x3c, 0x79,
	0x9e, 0x5f, 0x78, 0x48, 0xa9, 0x8b, 0xdc, 0xa0, 0x7e, 0x99, 0xdb, 0x8f, 0x71, 0xdd, 0x2c, 0x6f,
	0x3c, 0x13, 0x5e, 0xf2, 0x6c, 0x3b, 0xa6, 0xc0, 0x4d, 0x73, 0xbb, 0x2c, 0xb6, 0x19, 0x72, 0x83,
	0x05, 0xbe, 0xf0, 0xd5, 0xcb, 0x31, 0xdd, 0x88, 0xe9, 0x46, 0x44, 0x34, 0x52, 0xf4, 0xc2, 0x85,
	0xb4, 0xa3, 0x87, 0x22, 0xd6, 0x16, 0x2e, 0xa6, 0x01, 0x9f, 0x09, 0xea, 0x7b, 0x89, 0x71, 0x61,
	0x36, 0x0d, 0x1e, 0xeb, 0x59, 0x98, 0x4b, 0x43, 0x5d, 0xd3, 0xa5, 0x1d, 0x53, 0x60, 0x82, 0xea,
	0x27, 0x50, 0x8a, 0x9b, 0xed, 0x94, 0x75, 0xf1, 0x05, 0x99, 0xa9, 0x51, 0xa7, 0xc1, 0x96, 0x6d,
	0x1b, 0x39, 0x5f, 0xa5, 0x02, 0xef, 0x50, 0x2e, 0x54, 0x93, 0x10, 0x8b, 0x3a, 0x94, 0xb5, 0x39,
	0x15, 0x98, 0x97, 0xf5, 0xcc, 0xfc, 0x44, 0x65, 0xce, 0x48, 0xcf, 0x77, 0xd7, 0x7a, 0x82, 0xb6,
	0x68, 0xe1, 0xda, 0xbd, 0x6d, 0x86, 0xb5, 0x2b, 0x6f, 0x9f, 0xcf, 0xc4, 0x12, 0xea, 0x71, 0x61,
	0x7a, 0x36, 0x46, 0xda, 0x9d, 0xf7, 0x00, 0xef, 0xbe, 0xef, 0x66, 0xc6, 0x5e, 0x83, 0x9c, 0x83,
	0x56, 0x36, 0xa2, 0x0c, 0xdb, 0x34, 0x95, 0x71, 0xc8, 0xc9, 0xc5, 0x01, 0x90, 0xec, 0xb0, 0x23,
	0x7a, 0x18, 0x70, 0xf5, 0x12, 0x51, 0x28, 0xeb, 0x2e, 0xe6, 0x65, 0x1d, 0xe6, 0xb3, 0xb5, 0xec,
	0x50, 0xa8, 0x04, 0xf2, 0x16, 0xdc, 0x96, 0x5a, 0x11, 0xa0, 0xea, 0x11, 0xa1, 0x9a, 0xcf, 0x44,
	0x04, 0x12, 0x39, 0x07, 0x99, 0x1d, 0x18, 0x31, 0xaa, 0x4b, 0x6c, 0xaf, 0x07, 0x2e, 0xb9, 0x4e,
	0x48, 0x63, 0x45, 0xbf, 0x8f, 0x01, 0xa7, 0xbe, 0x77, 0xd5, 0x20, 0x0b, 0xe4, 0x7c, 0x6c, 0x5d,
	0x99, 0x6c, 0xac, 0x74, 0x17, 0xf5, 0xe5, 0x4e, 0x27, 0x40, 0xce, 0x93, 0x6a, 0x35, 0xaa, 0x56,
	0x8f, 0xaa, 0x0b, 0x64, 0xae, 0xd6, 0xa8, 0x97, 0x1a, 0x2b, 0xfa, 0xad, 0x8e, 0x83, 0x7a, 0x3d,
	0x0e, 0x4f, 0x1f, 0x7d, 0x67, 0x65, 0x32, 0xf6, 0x8a, 0xb5, 0xb5, 0x59, 0x92, 0x5d, 0x73, 0xfd,
	0xcd, 0xf6, 0x30, 0x16, 0x75, 0x72, 0xb7, 0x07, 0x72, 0xbf, 0x07, 0xca, 0x8f, 0x1e, 0xc8, 0x4d,
	0x65, 0x5c, 0xc9, 0x8d, 0x15, 0x3f, 0x00, 0x99, 0xaa, 0xbb, 0xbe, 0x65, 0xba, 0xab, 0x0c, 0xed,
	0xe1, 0xb6, 0xd4, 0x47, 0x64, 0xda, 0xa2, 0x4e, 0xfb, 0xd8, 0xb6, 0xf2, 0xa0, 0xc3, 0xfc, 0x44,
	0xa5, 0x6a, 0xfc, 0xf5, 0x27, 0x32, 0x7e, 0x13, 0x58, 0xeb, 0xac, 0x35, 0x2c, 0x36, 0x12, 0x33,
	0xb5, 0x49, 0xb2, 0xee, 0x68, 0xab, 0xf9, 0x4c, 0x14, 0xdf, 0xc2, 0x3f, 0x38, 0x1f, 0x25, 0xd1,
	0xfa, 0x25, 0x6f, 0x2a, 0xe3, 0x72, 0x2e, 0x53, 0xfc, 0x0c, 0x64, 0xea, 0x66, 0x80, 0xa6, 0xc0,
	0xff, 0x71, 0x88, 0xa5, 0x73, 0x7b, 0x37, 0x4e, 0x64, 0x90, 0xcc, 0xf5, 0x05, 0xc8, 0x74, 0x0b,
	0x99, 0x6b, 0xda, 0xa7, 0x6c, 0xb0, 0x4f, 0x40, 0x26, 0xea, 0x28, 0x4e, 0xd5, 0x50, 0xb5, 0x97,
	0xd0, 0x1f, 0x68, 0xd2, 0xfe, 0x40, 0x93, 0x0e, 0x07, 0x1a, 0xec, 0x84, 0x1a, 0xbc, 0x09, 0x35,
	0xf8, 0x18, 0x6a, 0xd0, 0x0f, 0x35, 0xf8, 0x1a, 0x6a, 0xf0, 0x2d, 0xd4, 0xa4, 0xc3, 0x50, 0x83,
	0x57, 0x07, 0x9a, 0xd4, 0x3f, 0xd0, 0xa4, 0xfd, 0x03, 0x4d, 0x7a, 0xf8, 0xc0, 0xf1, 0xd9, 0x53,
	0xc7, 0xe8, 0xfa, 0xae, 0xc0, 0x20, 0x30, 0x8d, 0x0d, 0x5e, 0x8e, 0x5e, 0xd6, 0xfc, 0x60, 0xbd,
	0xc4, 0x02, 0xbf, 0x4b, 0x3b, 0x18, 0x94, 0x46, 0x70, 0x99, 0x59, 0x8e, 0x5f, 0xc6, 0x2d, 0x91,
	0x9c, 0xcd, 0x3f, 0x9f, 0x7f, 0xeb, 0x4c, 0x74, 0x45, 0xaf, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x9d, 0x93, 0x8d, 0x70, 0x2a, 0x06, 0x00, 0x00,
}

func (this *BigIpAccessSiteList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BigIpAccessSiteList)
	if !ok {
		that2, ok := that.(BigIpAccessSiteList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BigipSite) != len(that1.BigipSite) {
		return false
	}
	for i := range this.BigipSite {
		if !this.BigipSite[i].Equal(that1.BigipSite[i]) {
			return false
		}
	}
	return true
}
func (this *Listeners) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Listeners)
	if !ok {
		that2, ok := that.(Listeners)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FlowType == nil {
		if this.FlowType != nil {
			return false
		}
	} else if this.FlowType == nil {
		return false
	} else if !this.FlowType.Equal(that1.FlowType) {
		return false
	}
	return true
}
func (this *Listeners_Ipv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Listeners_Ipv4)
	if !ok {
		that2, ok := that.(Listeners_Ipv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4 != that1.Ipv4 {
		return false
	}
	return true
}
func (this *Listeners_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Listeners_Ipv6)
	if !ok {
		that2, ok := that.(Listeners_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BigIpInstance.Equal(that1.BigIpInstance) {
		return false
	}
	if len(this.Listeners) != len(that1.Listeners) {
		return false
	}
	for i := range this.Listeners {
		if !this.Listeners[i].Equal(that1.Listeners[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BigIpInstance.Equal(that1.BigIpInstance) {
		return false
	}
	if len(this.Listeners) != len(that1.Listeners) {
		return false
	}
	for i := range this.Listeners {
		if !this.Listeners[i].Equal(that1.Listeners[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BigIpInstance.Equal(that1.BigIpInstance) {
		return false
	}
	if len(this.Listeners) != len(that1.Listeners) {
		return false
	}
	for i := range this.Listeners {
		if !this.Listeners[i].Equal(that1.Listeners[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BigIpInstance.Equal(that1.BigIpInstance) {
		return false
	}
	if len(this.Listeners) != len(that1.Listeners) {
		return false
	}
	for i := range this.Listeners {
		if !this.Listeners[i].Equal(that1.Listeners[i]) {
			return false
		}
	}
	return true
}
func (this *BigIpAccessSiteList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_gateway.BigIpAccessSiteList{")
	if this.BigipSite != nil {
		s = append(s, "BigipSite: "+fmt.Sprintf("%#v", this.BigipSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Listeners) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_gateway.Listeners{")
	if this.FlowType != nil {
		s = append(s, "FlowType: "+fmt.Sprintf("%#v", this.FlowType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Listeners_Ipv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_gateway.Listeners_Ipv4{` +
		`Ipv4:` + fmt.Sprintf("%#v", this.Ipv4) + `}`}, ", ")
	return s
}
func (this *Listeners_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_gateway.Listeners_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_gateway.GlobalSpecType{")
	if this.BigIpInstance != nil {
		s = append(s, "BigIpInstance: "+fmt.Sprintf("%#v", this.BigIpInstance)+",\n")
	}
	if this.Listeners != nil {
		s = append(s, "Listeners: "+fmt.Sprintf("%#v", this.Listeners)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_gateway.CreateSpecType{")
	if this.BigIpInstance != nil {
		s = append(s, "BigIpInstance: "+fmt.Sprintf("%#v", this.BigIpInstance)+",\n")
	}
	if this.Listeners != nil {
		s = append(s, "Listeners: "+fmt.Sprintf("%#v", this.Listeners)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_gateway.ReplaceSpecType{")
	if this.BigIpInstance != nil {
		s = append(s, "BigIpInstance: "+fmt.Sprintf("%#v", this.BigIpInstance)+",\n")
	}
	if this.Listeners != nil {
		s = append(s, "Listeners: "+fmt.Sprintf("%#v", this.Listeners)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_gateway.GetSpecType{")
	if this.BigIpInstance != nil {
		s = append(s, "BigIpInstance: "+fmt.Sprintf("%#v", this.BigIpInstance)+",\n")
	}
	if this.Listeners != nil {
		s = append(s, "Listeners: "+fmt.Sprintf("%#v", this.Listeners)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BigIpAccessSiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigIpAccessSiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigIpAccessSiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BigipSite) > 0 {
		for iNdEx := len(m.BigipSite) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BigipSite[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *Listeners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Listeners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Listeners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowType != nil {
		{
			size := m.FlowType.Size()
			i -= size
			if _, err := m.FlowType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Listeners_Ipv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Listeners_Ipv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Ipv4)
	copy(dAtA[i:], m.Ipv4)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv4)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Listeners_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Listeners_Ipv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Ipv6)
	copy(dAtA[i:], m.Ipv6)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BigIpInstance != nil {
		{
			size, err := m.BigIpInstance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BigIpInstance != nil {
		{
			size, err := m.BigIpInstance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BigIpInstance != nil {
		{
			size, err := m.BigIpInstance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BigIpInstance != nil {
		{
			size, err := m.BigIpInstance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BigIpAccessSiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BigipSite) > 0 {
		for _, e := range m.BigipSite {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Listeners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowType != nil {
		n += m.FlowType.Size()
	}
	return n
}

func (m *Listeners_Ipv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipv4)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *Listeners_Ipv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipv6)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BigIpInstance != nil {
		l = m.BigIpInstance.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BigIpInstance != nil {
		l = m.BigIpInstance.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BigIpInstance != nil {
		l = m.BigIpInstance.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BigIpInstance != nil {
		l = m.BigIpInstance.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BigIpAccessSiteList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBigipSite := "[]*ObjectRefType{"
	for _, f := range this.BigipSite {
		repeatedStringForBigipSite += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForBigipSite += "}"
	s := strings.Join([]string{`&BigIpAccessSiteList{`,
		`BigipSite:` + repeatedStringForBigipSite + `,`,
		`}`,
	}, "")
	return s
}
func (this *Listeners) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Listeners{`,
		`FlowType:` + fmt.Sprintf("%v", this.FlowType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Listeners_Ipv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Listeners_Ipv4{`,
		`Ipv4:` + fmt.Sprintf("%v", this.Ipv4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Listeners_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Listeners_Ipv6{`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForListeners := "[]*Listeners{"
	for _, f := range this.Listeners {
		repeatedStringForListeners += strings.Replace(f.String(), "Listeners", "Listeners", 1) + ","
	}
	repeatedStringForListeners += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`BigIpInstance:` + strings.Replace(this.BigIpInstance.String(), "BigIpAccessSiteList", "BigIpAccessSiteList", 1) + `,`,
		`Listeners:` + repeatedStringForListeners + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForListeners := "[]*Listeners{"
	for _, f := range this.Listeners {
		repeatedStringForListeners += strings.Replace(f.String(), "Listeners", "Listeners", 1) + ","
	}
	repeatedStringForListeners += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`BigIpInstance:` + strings.Replace(this.BigIpInstance.String(), "BigIpAccessSiteList", "BigIpAccessSiteList", 1) + `,`,
		`Listeners:` + repeatedStringForListeners + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForListeners := "[]*Listeners{"
	for _, f := range this.Listeners {
		repeatedStringForListeners += strings.Replace(f.String(), "Listeners", "Listeners", 1) + ","
	}
	repeatedStringForListeners += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`BigIpInstance:` + strings.Replace(this.BigIpInstance.String(), "BigIpAccessSiteList", "BigIpAccessSiteList", 1) + `,`,
		`Listeners:` + repeatedStringForListeners + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForListeners := "[]*Listeners{"
	for _, f := range this.Listeners {
		repeatedStringForListeners += strings.Replace(f.String(), "Listeners", "Listeners", 1) + ","
	}
	repeatedStringForListeners += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`BigIpInstance:` + strings.Replace(this.BigIpInstance.String(), "BigIpAccessSiteList", "BigIpAccessSiteList", 1) + `,`,
		`Listeners:` + repeatedStringForListeners + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BigIpAccessSiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigIpAccessSiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigIpAccessSiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigipSite = append(m.BigipSite, &schema.ObjectRefType{})
			if err := m.BigipSite[len(m.BigipSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Listeners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Listeners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Listeners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowType = &Listeners_Ipv4{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowType = &Listeners_Ipv6{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigIpInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigIpInstance == nil {
				m.BigIpInstance = &BigIpAccessSiteList{}
			}
			if err := m.BigIpInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, &Listeners{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigIpInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigIpInstance == nil {
				m.BigIpInstance = &BigIpAccessSiteList{}
			}
			if err := m.BigIpInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, &Listeners{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigIpInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigIpInstance == nil {
				m.BigIpInstance = &BigIpAccessSiteList{}
			}
			if err := m.BigIpInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, &Listeners{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigIpInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigIpInstance == nil {
				m.BigIpInstance = &BigIpAccessSiteList{}
			}
			if err := m.BigIpInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, &Listeners{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_leasepool/types.proto

package uztna_leasepool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IPV4 Lease Pool IP Range
//
// x-displayName: "Lease Pool IP Range"
//
// IPV4 Lease Pool IP Range
type IPV4LeasePoolRange struct {
	// IPV4 Start Address
	//
	// x-displayName: "Start Address"
	//
	// IPV4 Start Address
	StartAddress *schema.Ipv4AddressType `protobuf:"bytes,3,opt,name=start_address,json=startAddress,proto3" json:"start_address,omitempty"`
	// IPV4 End Address
	//
	// x-displayName: "End Address"
	//
	// IPV4 End Address
	EndAddress *schema.Ipv4AddressType `protobuf:"bytes,4,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (m *IPV4LeasePoolRange) Reset()      { *m = IPV4LeasePoolRange{} }
func (*IPV4LeasePoolRange) ProtoMessage() {}
func (*IPV4LeasePoolRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{0}
}
func (m *IPV4LeasePoolRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPV4LeasePoolRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPV4LeasePoolRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPV4LeasePoolRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPV4LeasePoolRange.Merge(m, src)
}
func (m *IPV4LeasePoolRange) XXX_Size() int {
	return m.Size()
}
func (m *IPV4LeasePoolRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IPV4LeasePoolRange.DiscardUnknown(m)
}

var xxx_messageInfo_IPV4LeasePoolRange proto.InternalMessageInfo

func (m *IPV4LeasePoolRange) GetStartAddress() *schema.Ipv4AddressType {
	if m != nil {
		return m.StartAddress
	}
	return nil
}

func (m *IPV4LeasePoolRange) GetEndAddress() *schema.Ipv4AddressType {
	if m != nil {
		return m.EndAddress
	}
	return nil
}

// IPV6 Lease Pool Range
//
// x-displayName: "Lease Pool Range"
//
// IPV6 Lease Pool Range
type IPV6LeasePoolRange struct {
	// IPV6 Start Address
	//
	// x-displayName: "Start Address"
	//
	// IPV6 Start Address
	StartAddress *schema.Ipv6AddressType `protobuf:"bytes,1,opt,name=start_address,json=startAddress,proto3" json:"start_address,omitempty"`
	// IPV6 End Address
	//
	// x-displayName: "End Address"
	//
	// IPV6 End Address
	EndAddress *schema.Ipv6AddressType `protobuf:"bytes,2,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (m *IPV6LeasePoolRange) Reset()      { *m = IPV6LeasePoolRange{} }
func (*IPV6LeasePoolRange) ProtoMessage() {}
func (*IPV6LeasePoolRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{1}
}
func (m *IPV6LeasePoolRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPV6LeasePoolRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPV6LeasePoolRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPV6LeasePoolRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPV6LeasePoolRange.Merge(m, src)
}
func (m *IPV6LeasePoolRange) XXX_Size() int {
	return m.Size()
}
func (m *IPV6LeasePoolRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IPV6LeasePoolRange.DiscardUnknown(m)
}

var xxx_messageInfo_IPV6LeasePoolRange proto.InternalMessageInfo

func (m *IPV6LeasePoolRange) GetStartAddress() *schema.Ipv6AddressType {
	if m != nil {
		return m.StartAddress
	}
	return nil
}

func (m *IPV6LeasePoolRange) GetEndAddress() *schema.Ipv6AddressType {
	if m != nil {
		return m.EndAddress
	}
	return nil
}

// IPV4 Lease Pool Config
//
// x-displayName: "IPV4 Pool Config "
//
// IPV4 Lease Pool Network
type IPV4LeasePoolConfig struct {
	// Lease Pool Network
	//
	// x-displayName: "Lease Pool Network"
	// x-required
	// x-example: "['10.2.1.0/24', '192.168.8.0/29', '10.7.64.160/27']"
	// IPV4 Lease Pool Network
	Prefix []string `protobuf:"bytes,3,rep,name=prefix,proto3" json:"prefix,omitempty"`
	// IPV4 Lease Pool Range
	//
	// x-displayName: "Lease Pool Range"
	// IPV4 Lease Pool Range
	Vip4Range []*IPV4LeasePoolRange `protobuf:"bytes,2,rep,name=vip4_range,json=vip4Range,proto3" json:"vip4_range,omitempty"`
}

func (m *IPV4LeasePoolConfig) Reset()      { *m = IPV4LeasePoolConfig{} }
func (*IPV4LeasePoolConfig) ProtoMessage() {}
func (*IPV4LeasePoolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{2}
}
func (m *IPV4LeasePoolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPV4LeasePoolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPV4LeasePoolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPV4LeasePoolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPV4LeasePoolConfig.Merge(m, src)
}
func (m *IPV4LeasePoolConfig) XXX_Size() int {
	return m.Size()
}
func (m *IPV4LeasePoolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IPV4LeasePoolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IPV4LeasePoolConfig proto.InternalMessageInfo

func (m *IPV4LeasePoolConfig) GetPrefix() []string {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *IPV4LeasePoolConfig) GetVip4Range() []*IPV4LeasePoolRange {
	if m != nil {
		return m.Vip4Range
	}
	return nil
}

// IPV6 Lease Pool Config
//
// x-displayName: "IPV6 Lease Pool"
//
// IPV6 Lease Pool Config
type IPV6LeasePoolConfig struct {
	// IPV6 Lease Pool Network
	//
	// x-displayName: "Lease Pool Network"
	// x-example: "['2001:db8:abcd:0012::0/64', 'fd48:fa09:d9d4::/48', 'fdd8:3a62:45c7:98a5::/64']"
	// IPV6 Lease Pool Network
	Ipv6Prefix []string `protobuf:"bytes,1,rep,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	// IPV6 Lease Pool Range
	//
	// x-displayName: "Lease Pool Range"
	// x-required
	// IPV6 Lease Pool Range
	Vip6Range []*IPV6LeasePoolRange `protobuf:"bytes,3,rep,name=vip6_range,json=vip6Range,proto3" json:"vip6_range,omitempty"`
}

func (m *IPV6LeasePoolConfig) Reset()      { *m = IPV6LeasePoolConfig{} }
func (*IPV6LeasePoolConfig) ProtoMessage() {}
func (*IPV6LeasePoolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{3}
}
func (m *IPV6LeasePoolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPV6LeasePoolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPV6LeasePoolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPV6LeasePoolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPV6LeasePoolConfig.Merge(m, src)
}
func (m *IPV6LeasePoolConfig) XXX_Size() int {
	return m.Size()
}
func (m *IPV6LeasePoolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IPV6LeasePoolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IPV6LeasePoolConfig proto.InternalMessageInfo

func (m *IPV6LeasePoolConfig) GetIpv6Prefix() []string {
	if m != nil {
		return m.Ipv6Prefix
	}
	return nil
}

func (m *IPV6LeasePoolConfig) GetVip6Range() []*IPV6LeasePoolRange {
	if m != nil {
		return m.Vip6Range
	}
	return nil
}

// Lease Pool IP
//
// x-displayName: "Lease Pool IP"
//
// Lease pool network and subnet ip
type IPVersion struct {
	// IPV4/IPV6 Lease Pool
	//
	// x-displayName: "IPV4/IPV6 Lease Pool"
	//
	// IPV4/IPV6 Lease Pool
	//
	// Types that are valid to be assigned to IpVip:
	//	*IPVersion_Ipv4Vip
	//	*IPVersion_Ipv6Vip
	IpVip isIPVersion_IpVip `protobuf_oneof:"ip_vip"`
}

func (m *IPVersion) Reset()      { *m = IPVersion{} }
func (*IPVersion) ProtoMessage() {}
func (*IPVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{4}
}
func (m *IPVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPVersion.Merge(m, src)
}
func (m *IPVersion) XXX_Size() int {
	return m.Size()
}
func (m *IPVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_IPVersion.DiscardUnknown(m)
}

var xxx_messageInfo_IPVersion proto.InternalMessageInfo

type isIPVersion_IpVip interface {
	isIPVersion_IpVip()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type IPVersion_Ipv4Vip struct {
	Ipv4Vip *IPV4LeasePoolConfig `protobuf:"bytes,1,opt,name=ipv4_vip,json=ipv4Vip,proto3,oneof" json:"ipv4_vip,omitempty"`
}
type IPVersion_Ipv6Vip struct {
	Ipv6Vip *IPV6LeasePoolConfig `protobuf:"bytes,2,opt,name=ipv6_vip,json=ipv6Vip,proto3,oneof" json:"ipv6_vip,omitempty"`
}

func (*IPVersion_Ipv4Vip) isIPVersion_IpVip() {}
func (*IPVersion_Ipv6Vip) isIPVersion_IpVip() {}

func (m *IPVersion) GetIpVip() isIPVersion_IpVip {
	if m != nil {
		return m.IpVip
	}
	return nil
}

func (m *IPVersion) GetIpv4Vip() *IPV4LeasePoolConfig {
	if x, ok := m.GetIpVip().(*IPVersion_Ipv4Vip); ok {
		return x.Ipv4Vip
	}
	return nil
}

func (m *IPVersion) GetIpv6Vip() *IPV6LeasePoolConfig {
	if x, ok := m.GetIpVip().(*IPVersion_Ipv6Vip); ok {
		return x.Ipv6Vip
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IPVersion) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IPVersion_Ipv4Vip)(nil),
		(*IPVersion_Ipv6Vip)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
//
// Shape of the UZTNA Lease Pool
type GlobalSpecType struct {
	// IP Version
	//
	// x-displayName: "IP Version"
	// x-required
	// IP address ranges for the Lease Pools
	IpVersion *IPVersion `protobuf:"bytes,3,opt,name=ip_version,json=ipVersion,proto3" json:"ip_version,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{5}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetIpVersion() *IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
// Shape of the UZTNA Tenant
type CreateSpecType struct {
	IpVersion *IPVersion `protobuf:"bytes,3,opt,name=ip_version,json=ipVersion,proto3" json:"ip_version,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{6}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetIpVersion() *IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
// Shape of the UZTNA Tenant
type ReplaceSpecType struct {
	IpVersion *IPVersion `protobuf:"bytes,3,opt,name=ip_version,json=ipVersion,proto3" json:"ip_version,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{7}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetIpVersion() *IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return nil
}

// Get Tenant Schema
//
// x-displayName: "Get Tenant schema"
// Get a new gateways object.
type GetSpecType struct {
	IpVersion *IPVersion `protobuf:"bytes,3,opt,name=ip_version,json=ipVersion,proto3" json:"ip_version,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{8}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetIpVersion() *IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return nil
}

func init() {
	proto.RegisterType((*IPV4LeasePoolRange)(nil), "ves.io.schema.uztna.uztna_leasepool.IPV4LeasePoolRange")
	proto.RegisterType((*IPV6LeasePoolRange)(nil), "ves.io.schema.uztna.uztna_leasepool.IPV6LeasePoolRange")
	proto.RegisterType((*IPV4LeasePoolConfig)(nil), "ves.io.schema.uztna.uztna_leasepool.IPV4LeasePoolConfig")
	proto.RegisterType((*IPV6LeasePoolConfig)(nil), "ves.io.schema.uztna.uztna_leasepool.IPV6LeasePoolConfig")
	proto.RegisterType((*IPVersion)(nil), "ves.io.schema.uztna.uztna_leasepool.IPVersion")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_leasepool/types.proto", fileDescriptor_16543978451c6ad7)
}

var fileDescriptor_16543978451c6ad7 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0xcf, 0x6f, 0xeb, 0x44,
	0x10, 0xc7, 0xbd, 0x76, 0x9a, 0x26, 0x13, 0xda, 0x06, 0x53, 0x89, 0xb4, 0x20, 0x63, 0x82, 0x90,
	0x2a, 0xa0, 0x8e, 0x08, 0x91, 0x41, 0x3d, 0x14, 0x91, 0x02, 0x6d, 0x22, 0x40, 0x51, 0x5a, 0x22,
	0x51, 0x0e, 0xc6, 0x6d, 0xb6, 0x61, 0x55, 0xd7, 0xbb, 0xb2, 0x5d, 0xd3, 0x82, 0x04, 0xfd, 0x0f,
	0x40, 0xf9, 0x2b, 0xf8, 0x1b, 0x48, 0x0f, 0xbd, 0x20, 0xa1, 0x9e, 0x72, 0x00, 0xa9, 0xc7, 0xd6,
	0xbd, 0x14, 0x4e, 0x3d, 0xa1, 0x77, 0x7c, 0xb2, 0xbd, 0xe9, 0x8b, 0xd3, 0xf7, 0x23, 0x3d, 0x54,
	0xbd, 0x24, 0xb3, 0x9e, 0x99, 0xef, 0xcc, 0x67, 0xbc, 0xf6, 0x1a, 0x4a, 0x3e, 0x76, 0x35, 0x42,
	0x4b, 0xee, 0xf6, 0xf7, 0x78, 0xcf, 0x2c, 0xed, 0xff, 0xe8, 0xd9, 0xfc, 0xd7, 0xb0, 0xb0, 0xe9,
	0x62, 0x46, 0xa9, 0x55, 0xf2, 0x0e, 0x19, 0x76, 0x35, 0xe6, 0x50, 0x8f, 0xca, 0x6f, 0xc5, 0x09,
	0x5a, 0x9c, 0xa0, 0x45, 0xa1, 0xda, 0x48, 0xc2, 0xfc, 0xbb, 0x49, 0x55, 0x93, 0x11, 0xa3, 0xe3,
	0xd0, 0x7d, 0x66, 0x60, 0x0b, 0xef, 0x61, 0xdb, 0x1b, 0x56, 0x9c, 0x7f, 0x35, 0x19, 0x6c, 0x63,
	0x8f, 0x3b, 0x5e, 0x4b, 0x3a, 0x28, 0xf3, 0x08, 0xb5, 0x07, 0x59, 0x73, 0x49, 0xe7, 0xb0, 0xe0,
	0xeb, 0x49, 0x97, 0x6f, 0x5a, 0xa4, 0x6d, 0x7a, 0x98, 0x7b, 0xd5, 0x11, 0x2f, 0xc1, 0x3f, 0x18,
	0x49, 0xe9, 0x37, 0x6e, 0x47, 0xb8, 0xc3, 0x05, 0x8a, 0xff, 0x23, 0x90, 0x6b, 0x8d, 0x56, 0xe5,
	0x8b, 0x10, 0xb8, 0x41, 0xa9, 0xd5, 0x34, 0xed, 0x0e, 0x96, 0x57, 0x60, 0xca, 0xf5, 0x4c, 0xc7,
	0x33, 0xcc, 0x76, 0xdb, 0xc1, 0xae, 0x5b, 0x90, 0x54, 0xb4, 0x90, 0x2b, 0x2b, 0x5a, 0x72, 0x64,
	0x35, 0xe6, 0x57, 0x3e, 0x89, 0x23, 0x36, 0x0e, 0x19, 0x6e, 0xbe, 0x14, 0x25, 0xf1, 0x2b, 0xf2,
	0xc7, 0x90, 0xc3, 0x76, 0xfb, 0x46, 0x22, 0x35, 0x96, 0x04, 0x60, 0xbb, 0xcd, 0xd7, 0x4b, 0x5f,
	0x9d, 0xf6, 0x50, 0x1d, 0xde, 0x86, 0xa9, 0xf5, 0x50, 0x56, 0xe5, 0x97, 0xe7, 0x67, 0x41, 0x4e,
	0x34, 0xa7, 0x85, 0xff, 0xf0, 0x26, 0xe4, 0x3e, 0xb3, 0xdb, 0x37, 0x41, 0x32, 0xe4, 0x87, 0x8a,
	0x47, 0x21, 0xf5, 0x54, 0x06, 0xe5, 0xc5, 0x7a, 0x2a, 0x23, 0xe6, 0xa5, 0xe2, 0x7f, 0x31, 0xb8,
	0xfe, 0x22, 0x70, 0xf4, 0xac, 0xae, 0xf5, 0xb1, 0xc1, 0xc5, 0xb1, 0x24, 0xee, 0x11, 0xbc, 0xf8,
	0x0f, 0x82, 0x57, 0x12, 0x77, 0x79, 0x85, 0xda, 0x3b, 0xa4, 0x23, 0x7f, 0x07, 0x69, 0xe6, 0xe0,
	0x1d, 0x72, 0x50, 0x90, 0x54, 0x69, 0x21, 0x5b, 0x5d, 0xfb, 0xe3, 0xdf, 0x13, 0x09, 0xba, 0x68,
	0xb2, 0x38, 0xe1, 0x48, 0x8f, 0x10, 0x1a, 0x5e, 0x9e, 0xc5, 0xcb, 0x74, 0x17, 0x49, 0xf9, 0xa3,
	0x4c, 0x68, 0x4e, 0x74, 0x91, 0x98, 0x41, 0x03, 0xab, 0x80, 0x82, 0xf3, 0x3f, 0xa5, 0x74, 0xf7,
	0x18, 0x89, 0x79, 0xa1, 0xc9, 0x75, 0xe5, 0x16, 0x80, 0x4f, 0x58, 0xc5, 0x70, 0xc2, 0xe9, 0x16,
	0x44, 0x55, 0x5a, 0xc8, 0x95, 0x3f, 0xd4, 0xc6, 0x78, 0xf0, 0xb4, 0xdb, 0xbb, 0xb2, 0x99, 0x0d,
	0xa5, 0x22, 0x33, 0xbe, 0x95, 0xc5, 0xbf, 0x63, 0x2e, 0x7d, 0x94, 0xcb, 0x80, 0x1c, 0x61, 0xbe,
	0x6e, 0x70, 0x38, 0x14, 0xc1, 0x2d, 0x0f, 0xd3, 0x1c, 0x89, 0x63, 0xc0, 0x25, 0x91, 0x20, 0x94,
	0x6c, 0x0c, 0x63, 0xe9, 0x1c, 0x4b, 0xba, 0x1b, 0x96, 0xfe, 0x14, 0x2c, 0x7d, 0x80, 0x15, 0xee,
	0xcd, 0x63, 0x11, 0xb2, 0xb5, 0x46, 0x0b, 0x3b, 0x2e, 0xa1, 0xb6, 0xfc, 0x35, 0x64, 0x08, 0xf3,
	0x2b, 0x86, 0x4f, 0x18, 0xdf, 0x8d, 0x1f, 0xdd, 0x7d, 0x80, 0xf1, 0x60, 0xd6, 0x84, 0xe6, 0x64,
	0xa8, 0xd5, 0x22, 0x4c, 0xfe, 0x36, 0x92, 0xd5, 0x23, 0x59, 0xf1, 0x6e, 0xb2, 0xa3, 0xf3, 0xae,
	0xa6, 0xae, 0x7a, 0x08, 0x71, 0x71, 0xbd, 0x45, 0xd8, 0xd2, 0xe6, 0x69, 0x0f, 0xb5, 0x60, 0x03,
	0xa0, 0xd6, 0x50, 0x39, 0xc7, 0x3b, 0x9f, 0xc3, 0xa7, 0xa0, 0x3e, 0x61, 0x29, 0xcf, 0x86, 0x0d,
	0xaa, 0xd4, 0xb6, 0x0e, 0xd5, 0x48, 0x4f, 0x0d, 0x05, 0x79, 0x84, 0x7e, 0x13, 0xa1, 0x8f, 0x46,
	0x54, 0xe7, 0x20, 0x4d, 0x58, 0xe8, 0x97, 0x67, 0x4e, 0x7a, 0x08, 0xf5, 0x7b, 0x48, 0x0a, 0x7a,
	0x48, 0x7a, 0xff, 0xbd, 0x72, 0x3d, 0x95, 0x91, 0xf2, 0xa9, 0xe2, 0x2e, 0x4c, 0xaf, 0x5a, 0x74,
	0xcb, 0xb4, 0xd6, 0x19, 0xde, 0x0e, 0x9f, 0x2d, 0xf9, 0x4b, 0x80, 0x30, 0x25, 0x6e, 0x84, 0xbf,
	0xcb, 0xb4, 0x71, 0x69, 0xe3, 0xac, 0x66, 0x96, 0x30, 0x6e, 0x26, 0xde, 0x23, 0x3f, 0xc3, 0xf4,
	0x8a, 0x83, 0x4d, 0x0f, 0xdf, 0x53, 0xb1, 0xa5, 0x97, 0x4f, 0x97, 0x47, 0x70, 0x12, 0xf5, 0x7f,
	0x81, 0x99, 0x26, 0x66, 0x96, 0xb9, 0xfd, 0x50, 0x0d, 0xfc, 0x04, 0xb9, 0x55, 0xec, 0x3d, 0x4c,
	0xf1, 0xea, 0xaf, 0xa8, 0x7f, 0xa1, 0x08, 0x67, 0x17, 0x8a, 0x70, 0x7d, 0xa1, 0xa0, 0xa3, 0x40,
	0x41, 0xbf, 0x07, 0x0a, 0xfa, 0x2b, 0x50, 0x50, 0x3f, 0x50, 0xd0, 0x79, 0xa0, 0xa0, 0xab, 0x40,
	0x11, 0xae, 0x03, 0x05, 0xfd, 0x76, 0xa9, 0x08, 0xfd, 0x4b, 0x45, 0x38, 0xbb, 0x54, 0x84, 0xcd,
	0x6f, 0x3a, 0x94, 0xed, 0x76, 0x34, 0x9f, 0x5a, 0x1e, 0x76, 0x1c, 0x53, 0xdb, 0x77, 0x4b, 0x91,
	0xb1, 0x43, 0x9d, 0xbd, 0x45, 0xe6, 0x50, 0x9f, 0xb4, 0xb1, 0xb3, 0x38, 0x70, 0x97, 0xd8, 0x56,
	0x87, 0x96, 0xf0, 0x81, 0xc7, 0x4f, 0xd1, 0xe7, 0x7d, 0x60, 0x6c, 0xa5, 0xa3, 0x73, 0xf5, 0x83,
	0xc7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0x4a, 0x12, 0x92, 0x8e, 0x08, 0x00, 0x00,
}

func (this *IPV4LeasePoolRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPV4LeasePoolRange)
	if !ok {
		that2, ok := that.(IPV4LeasePoolRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartAddress.Equal(that1.StartAddress) {
		return false
	}
	if !this.EndAddress.Equal(that1.EndAddress) {
		return false
	}
	return true
}
func (this *IPV6LeasePoolRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPV6LeasePoolRange)
	if !ok {
		that2, ok := that.(IPV6LeasePoolRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartAddress.Equal(that1.StartAddress) {
		return false
	}
	if !this.EndAddress.Equal(that1.EndAddress) {
		return false
	}
	return true
}
func (this *IPV4LeasePoolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPV4LeasePoolConfig)
	if !ok {
		that2, ok := that.(IPV4LeasePoolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefix) != len(that1.Prefix) {
		return false
	}
	for i := range this.Prefix {
		if this.Prefix[i] != that1.Prefix[i] {
			return false
		}
	}
	if len(this.Vip4Range) != len(that1.Vip4Range) {
		return false
	}
	for i := range this.Vip4Range {
		if !this.Vip4Range[i].Equal(that1.Vip4Range[i]) {
			return false
		}
	}
	return true
}
func (this *IPV6LeasePoolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPV6LeasePoolConfig)
	if !ok {
		that2, ok := that.(IPV6LeasePoolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ipv6Prefix) != len(that1.Ipv6Prefix) {
		return false
	}
	for i := range this.Ipv6Prefix {
		if this.Ipv6Prefix[i] != that1.Ipv6Prefix[i] {
			return false
		}
	}
	if len(this.Vip6Range) != len(that1.Vip6Range) {
		return false
	}
	for i := range this.Vip6Range {
		if !this.Vip6Range[i].Equal(that1.Vip6Range[i]) {
			return false
		}
	}
	return true
}
func (this *IPVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPVersion)
	if !ok {
		that2, ok := that.(IPVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpVip == nil {
		if this.IpVip != nil {
			return false
		}
	} else if this.IpVip == nil {
		return false
	} else if !this.IpVip.Equal(that1.IpVip) {
		return false
	}
	return true
}
func (this *IPVersion_Ipv4Vip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPVersion_Ipv4Vip)
	if !ok {
		that2, ok := that.(IPVersion_Ipv4Vip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4Vip.Equal(that1.Ipv4Vip) {
		return false
	}
	return true
}
func (this *IPVersion_Ipv6Vip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPVersion_Ipv6Vip)
	if !ok {
		that2, ok := that.(IPVersion_Ipv6Vip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv6Vip.Equal(that1.Ipv6Vip) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpVersion.Equal(that1.IpVersion) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpVersion.Equal(that1.IpVersion) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpVersion.Equal(that1.IpVersion) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpVersion.Equal(that1.IpVersion) {
		return false
	}
	return true
}
func (this *IPV4LeasePoolRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.IPV4LeasePoolRange{")
	if this.StartAddress != nil {
		s = append(s, "StartAddress: "+fmt.Sprintf("%#v", this.StartAddress)+",\n")
	}
	if this.EndAddress != nil {
		s = append(s, "EndAddress: "+fmt.Sprintf("%#v", this.EndAddress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPV6LeasePoolRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.IPV6LeasePoolRange{")
	if this.StartAddress != nil {
		s = append(s, "StartAddress: "+fmt.Sprintf("%#v", this.StartAddress)+",\n")
	}
	if this.EndAddress != nil {
		s = append(s, "EndAddress: "+fmt.Sprintf("%#v", this.EndAddress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPV4LeasePoolConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.IPV4LeasePoolConfig{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.Vip4Range != nil {
		s = append(s, "Vip4Range: "+fmt.Sprintf("%#v", this.Vip4Range)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPV6LeasePoolConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.IPV6LeasePoolConfig{")
	s = append(s, "Ipv6Prefix: "+fmt.Sprintf("%#v", this.Ipv6Prefix)+",\n")
	if this.Vip6Range != nil {
		s = append(s, "Vip6Range: "+fmt.Sprintf("%#v", this.Vip6Range)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.IPVersion{")
	if this.IpVip != nil {
		s = append(s, "IpVip: "+fmt.Sprintf("%#v", this.IpVip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPVersion_Ipv4Vip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_leasepool.IPVersion_Ipv4Vip{` +
		`Ipv4Vip:` + fmt.Sprintf("%#v", this.Ipv4Vip) + `}`}, ", ")
	return s
}
func (this *IPVersion_Ipv6Vip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_leasepool.IPVersion_Ipv6Vip{` +
		`Ipv6Vip:` + fmt.Sprintf("%#v", this.Ipv6Vip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_leasepool.GlobalSpecType{")
	if this.IpVersion != nil {
		s = append(s, "IpVersion: "+fmt.Sprintf("%#v", this.IpVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_leasepool.CreateSpecType{")
	if this.IpVersion != nil {
		s = append(s, "IpVersion: "+fmt.Sprintf("%#v", this.IpVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_leasepool.ReplaceSpecType{")
	if this.IpVersion != nil {
		s = append(s, "IpVersion: "+fmt.Sprintf("%#v", this.IpVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_leasepool.GetSpecType{")
	if this.IpVersion != nil {
		s = append(s, "IpVersion: "+fmt.Sprintf("%#v", this.IpVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *IPV4LeasePoolRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPV4LeasePoolRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPV4LeasePoolRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndAddress != nil {
		{
			size, err := m.EndAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartAddress != nil {
		{
			size, err := m.StartAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *IPV6LeasePoolRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPV6LeasePoolRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPV6LeasePoolRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndAddress != nil {
		{
			size, err := m.EndAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartAddress != nil {
		{
			size, err := m.StartAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPV4LeasePoolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPV4LeasePoolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPV4LeasePoolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		for iNdEx := len(m.Prefix) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefix[iNdEx])
			copy(dAtA[i:], m.Prefix[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Vip4Range) > 0 {
		for iNdEx := len(m.Vip4Range) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vip4Range[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *IPV6LeasePoolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPV6LeasePoolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPV6LeasePoolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vip6Range) > 0 {
		for iNdEx := len(m.Vip6Range) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vip6Range[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv6Prefix) > 0 {
		for iNdEx := len(m.Ipv6Prefix) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipv6Prefix[iNdEx])
			copy(dAtA[i:], m.Ipv6Prefix[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv6Prefix[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IPVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpVip != nil {
		{
			size := m.IpVip.Size()
			i -= size
			if _, err := m.IpVip.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IPVersion_Ipv4Vip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPVersion_Ipv4Vip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv4Vip != nil {
		{
			size, err := m.Ipv4Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IPVersion_Ipv6Vip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPVersion_Ipv6Vip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv6Vip != nil {
		{
			size, err := m.Ipv6Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpVersion != nil {
		{
			size, err := m.IpVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpVersion != nil {
		{
			size, err := m.IpVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpVersion != nil {
		{
			size, err := m.IpVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpVersion != nil {
		{
			size, err := m.IpVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IPV4LeasePoolRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartAddress != nil {
		l = m.StartAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndAddress != nil {
		l = m.EndAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IPV6LeasePoolRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartAddress != nil {
		l = m.StartAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndAddress != nil {
		l = m.EndAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IPV4LeasePoolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vip4Range) > 0 {
		for _, e := range m.Vip4Range {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Prefix) > 0 {
		for _, s := range m.Prefix {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *IPV6LeasePoolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ipv6Prefix) > 0 {
		for _, s := range m.Ipv6Prefix {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Vip6Range) > 0 {
		for _, e := range m.Vip6Range {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *IPVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpVip != nil {
		n += m.IpVip.Size()
	}
	return n
}

func (m *IPVersion_Ipv4Vip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4Vip != nil {
		l = m.Ipv4Vip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IPVersion_Ipv6Vip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6Vip != nil {
		l = m.Ipv6Vip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpVersion != nil {
		l = m.IpVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpVersion != nil {
		l = m.IpVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpVersion != nil {
		l = m.IpVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpVersion != nil {
		l = m.IpVersion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *IPV4LeasePoolRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPV4LeasePoolRange{`,
		`StartAddress:` + strings.Replace(fmt.Sprintf("%v", this.StartAddress), "Ipv4AddressType", "schema.Ipv4AddressType", 1) + `,`,
		`EndAddress:` + strings.Replace(fmt.Sprintf("%v", this.EndAddress), "Ipv4AddressType", "schema.Ipv4AddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPV6LeasePoolRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPV6LeasePoolRange{`,
		`StartAddress:` + strings.Replace(fmt.Sprintf("%v", this.StartAddress), "Ipv6AddressType", "schema.Ipv6AddressType", 1) + `,`,
		`EndAddress:` + strings.Replace(fmt.Sprintf("%v", this.EndAddress), "Ipv6AddressType", "schema.Ipv6AddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPV4LeasePoolConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVip4Range := "[]*IPV4LeasePoolRange{"
	for _, f := range this.Vip4Range {
		repeatedStringForVip4Range += strings.Replace(f.String(), "IPV4LeasePoolRange", "IPV4LeasePoolRange", 1) + ","
	}
	repeatedStringForVip4Range += "}"
	s := strings.Join([]string{`&IPV4LeasePoolConfig{`,
		`Vip4Range:` + repeatedStringForVip4Range + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPV6LeasePoolConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVip6Range := "[]*IPV6LeasePoolRange{"
	for _, f := range this.Vip6Range {
		repeatedStringForVip6Range += strings.Replace(f.String(), "IPV6LeasePoolRange", "IPV6LeasePoolRange", 1) + ","
	}
	repeatedStringForVip6Range += "}"
	s := strings.Join([]string{`&IPV6LeasePoolConfig{`,
		`Ipv6Prefix:` + fmt.Sprintf("%v", this.Ipv6Prefix) + `,`,
		`Vip6Range:` + repeatedStringForVip6Range + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPVersion{`,
		`IpVip:` + fmt.Sprintf("%v", this.IpVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPVersion_Ipv4Vip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPVersion_Ipv4Vip{`,
		`Ipv4Vip:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4Vip), "IPV4LeasePoolConfig", "IPV4LeasePoolConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPVersion_Ipv6Vip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPVersion_Ipv6Vip{`,
		`Ipv6Vip:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6Vip), "IPV6LeasePoolConfig", "IPV6LeasePoolConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`IpVersion:` + strings.Replace(this.IpVersion.String(), "IPVersion", "IPVersion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`IpVersion:` + strings.Replace(this.IpVersion.String(), "IPVersion", "IPVersion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`IpVersion:` + strings.Replace(this.IpVersion.String(), "IPVersion", "IPVersion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`IpVersion:` + strings.Replace(this.IpVersion.String(), "IPVersion", "IPVersion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *IPV4LeasePoolRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPV4LeasePoolRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPV4LeasePoolRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAddress == nil {
				m.StartAddress = &schema.Ipv4AddressType{}
			}
			if err := m.StartAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAddress == nil {
				m.EndAddress = &schema.Ipv4AddressType{}
			}
			if err := m.EndAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPV6LeasePoolRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPV6LeasePoolRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPV6LeasePoolRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAddress == nil {
				m.StartAddress = &schema.Ipv6AddressType{}
			}
			if err := m.StartAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAddress == nil {
				m.EndAddress = &schema.Ipv6AddressType{}
			}
			if err := m.EndAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPV4LeasePoolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPV4LeasePoolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPV4LeasePoolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip4Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vip4Range = append(m.Vip4Range, &IPV4LeasePoolRange{})
			if err := m.Vip4Range[len(m.Vip4Range)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPV6LeasePoolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPV6LeasePoolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPV6LeasePoolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Prefix = append(m.Ipv6Prefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip6Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vip6Range = append(m.Vip6Range, &IPV6LeasePoolRange{})
			if err := m.Vip6Range[len(m.Vip6Range)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPV4LeasePoolConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpVip = &IPVersion_Ipv4Vip{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPV6LeasePoolConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpVip = &IPVersion_Ipv6Vip{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpVersion == nil {
				m.IpVersion = &IPVersion{}
			}
			if err := m.IpVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpVersion == nil {
				m.IpVersion = &IPVersion{}
			}
			if err := m.IpVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpVersion == nil {
				m.IpVersion = &IPVersion{}
			}
			if err := m.IpVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpVersion == nil {
				m.IpVersion = &IPVersion{}
			}
			if err := m.IpVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

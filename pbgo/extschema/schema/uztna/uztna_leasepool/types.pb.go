// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/uztna_leasepool/types.proto

package uztna_leasepool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LeasePool
//
// x-displayName: "LeasePool IP Range"
// Start and End address of the pool.
type LeasePool struct {
	// StartAddress
	//
	// x-displayName: "Start Address"
	// x-required
	// startAddress of Lease Pool member
	StartAddress *schema.IpAddressType `protobuf:"bytes,1,opt,name=start_address,json=startAddress,proto3" json:"start_address,omitempty"`
	// endaddress
	//
	// x-displayName: "End Address"
	// x-required
	// End Address of Lease Pool member
	EndAddress *schema.IpAddressType `protobuf:"bytes,2,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (m *LeasePool) Reset()      { *m = LeasePool{} }
func (*LeasePool) ProtoMessage() {}
func (*LeasePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{0}
}
func (m *LeasePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeasePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeasePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeasePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeasePool.Merge(m, src)
}
func (m *LeasePool) XXX_Size() int {
	return m.Size()
}
func (m *LeasePool) XXX_DiscardUnknown() {
	xxx_messageInfo_LeasePool.DiscardUnknown(m)
}

var xxx_messageInfo_LeasePool proto.InternalMessageInfo

func (m *LeasePool) GetStartAddress() *schema.IpAddressType {
	if m != nil {
		return m.StartAddress
	}
	return nil
}

func (m *LeasePool) GetEndAddress() *schema.IpAddressType {
	if m != nil {
		return m.EndAddress
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
//
// Shape of the UZTNA LeasePool
type GlobalSpecType struct {
	// Network
	//
	// x-displayName: "LeasePool Network"
	// x-required
	// IPv4 or IPv6 network addresses
	Network []*schema.IpSubnetType `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
	// LeasePool
	//
	// x-displayName: "LeasePool IP Range"
	// x-required
	// IP address ranges for the lease pool
	LeasePool []*LeasePool `protobuf:"bytes,2,rep,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetNetwork() []*schema.IpSubnetType {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *GlobalSpecType) GetLeasePool() []*LeasePool {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
// Shape of the UZTNA Tenant
type CreateSpecType struct {
	Network   []*schema.IpSubnetType `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
	LeasePool []*LeasePool           `protobuf:"bytes,2,rep,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetNetwork() []*schema.IpSubnetType {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *CreateSpecType) GetLeasePool() []*LeasePool {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
// Shape of the UZTNA Tenant
type ReplaceSpecType struct {
	Network   []*schema.IpSubnetType `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
	LeasePool []*LeasePool           `protobuf:"bytes,2,rep,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetNetwork() []*schema.IpSubnetType {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *ReplaceSpecType) GetLeasePool() []*LeasePool {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

// Get Tenant Schema
//
// x-displayName: "Get Tenant schema"
// Get a new gateways object.
type GetSpecType struct {
	Network   []*schema.IpSubnetType `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
	LeasePool []*LeasePool           `protobuf:"bytes,2,rep,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_16543978451c6ad7, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetNetwork() []*schema.IpSubnetType {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *GetSpecType) GetLeasePool() []*LeasePool {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

func init() {
	proto.RegisterType((*LeasePool)(nil), "ves.io.schema.uztna.uztna_leasepool.LeasePool")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.uztna_leasepool.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/uztna_leasepool/types.proto", fileDescriptor_16543978451c6ad7)
}

var fileDescriptor_16543978451c6ad7 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x4f, 0x6b, 0x13, 0x4d,
	0x18, 0xdf, 0x69, 0x79, 0xdb, 0x66, 0xd2, 0x36, 0x7d, 0x83, 0x62, 0xba, 0x2d, 0xe3, 0x92, 0x5e,
	0x0a, 0xd2, 0x59, 0xac, 0xf4, 0x52, 0x50, 0x68, 0x44, 0x42, 0xb0, 0x4a, 0x48, 0xbc, 0xd8, 0xcb,
	0x32, 0xc9, 0x3e, 0xc6, 0xa5, 0x9b, 0x9d, 0x61, 0x76, 0x92, 0x5a, 0x4f, 0xfd, 0x06, 0x4a, 0x3f,
	0x84, 0xa8, 0x1f, 0xc1, 0x5e, 0x3c, 0x4a, 0x4e, 0x39, 0x16, 0x4f, 0x66, 0x73, 0xd1, 0x5b, 0xfd,
	0x06, 0xb2, 0x9b, 0x4d, 0xdc, 0x4d, 0x41, 0x2a, 0x5e, 0xf4, 0x12, 0x26, 0xf3, 0x7b, 0x9e, 0xdf,
	0x9f, 0xd9, 0x87, 0x07, 0x9b, 0x5d, 0xf0, 0xa9, 0xc3, 0x4d, 0xbf, 0xf9, 0x1c, 0xda, 0xcc, 0xec,
	0xbc, 0x54, 0x5e, 0xfc, 0x6b, 0xb9, 0xc0, 0x7c, 0x10, 0x9c, 0xbb, 0xa6, 0x3a, 0x16, 0xe0, 0x53,
	0x21, 0xb9, 0xe2, 0xf9, 0x8d, 0x51, 0x03, 0x1d, 0x35, 0xd0, 0xa8, 0x94, 0x4e, 0x35, 0xe8, 0xb7,
	0xd2, 0xac, 0x4c, 0x38, 0x56, 0x4b, 0xf2, 0x8e, 0xb0, 0xc0, 0x85, 0x36, 0x78, 0x2a, 0xc9, 0xa8,
	0xdf, 0x48, 0x17, 0x7b, 0xa0, 0x62, 0x60, 0x2d, 0x0d, 0x70, 0xa1, 0x1c, 0xee, 0x8d, 0xbb, 0x56,
	0xd3, 0x60, 0x92, 0x70, 0x3d, 0x0d, 0x75, 0x99, 0xeb, 0xd8, 0x4c, 0x41, 0x8c, 0x1a, 0x53, 0xa8,
	0x03, 0x47, 0x56, 0x9a, 0xfa, 0xe6, 0xe5, 0x0a, 0x3f, 0x29, 0x50, 0xfc, 0x8c, 0x70, 0x66, 0x3f,
	0x0c, 0x5b, 0xe5, 0xdc, 0xcd, 0xef, 0xe1, 0x25, 0x5f, 0x31, 0xa9, 0x2c, 0x66, 0xdb, 0x12, 0x7c,
	0xbf, 0x80, 0x0c, 0xb4, 0x99, 0xdd, 0x5e, 0xa7, 0xe9, 0x97, 0xaa, 0x88, 0xbd, 0x11, 0xfe, 0xe4,
	0x58, 0x40, 0x6d, 0x31, 0x6a, 0x89, 0x6f, 0xf2, 0x77, 0x71, 0x16, 0x3c, 0x7b, 0x42, 0x30, 0x73,
	0x05, 0x02, 0x0c, 0x9e, 0x1d, 0xff, 0xdf, 0x7d, 0xd8, 0x3b, 0x43, 0x65, 0xbc, 0x81, 0x57, 0xea,
	0x21, 0xa9, 0x51, 0xa9, 0x1a, 0x31, 0xa2, 0xe7, 0xa6, 0xbc, 0x61, 0x03, 0xe7, 0x1e, 0x78, 0x76,
	0xa2, 0xc4, 0xd0, 0x97, 0x52, 0xe2, 0xc5, 0xef, 0x08, 0x2f, 0x97, 0x5d, 0xde, 0x60, 0x6e, 0x5d,
	0x40, 0x33, 0xd4, 0xca, 0xef, 0xe3, 0x79, 0x0f, 0xd4, 0x11, 0x97, 0x87, 0x05, 0x64, 0xcc, 0x6e,
	0x66, 0xb7, 0xd7, 0x2e, 0x59, 0xab, 0x77, 0x1a, 0x1e, 0xa8, 0xb0, 0xba, 0x74, 0xfd, 0xc3, 0xb7,
	0x8f, 0xb3, 0x73, 0xa7, 0x68, 0x76, 0xe5, 0x64, 0x21, 0x3c, 0xfe, 0x77, 0x8a, 0x66, 0x16, 0x50,
	0x6d, 0x4c, 0x91, 0x3f, 0xc0, 0x38, 0x9a, 0x14, 0x2b, 0x1c, 0x95, 0xc2, 0x4c, 0x44, 0x48, 0xe9,
	0x15, 0xc6, 0x8a, 0x4e, 0xde, 0xbc, 0x94, 0x4d, 0x68, 0xd4, 0x32, 0xee, 0xf8, 0x7e, 0x77, 0xa7,
	0x77, 0x86, 0x6e, 0xe3, 0x6b, 0x78, 0xfe, 0xf1, 0x48, 0x4c, 0xcf, 0x4c, 0xac, 0xe3, 0x55, 0x9c,
	0xa9, 0x54, 0x8d, 0x1a, 0xf3, 0x5a, 0x60, 0xe8, 0x8b, 0x49, 0x13, 0xc5, 0x77, 0x08, 0x2f, 0xdf,
	0x97, 0xc0, 0x14, 0x4c, 0x32, 0xef, 0xfc, 0x4e, 0xe6, 0x9f, 0xe1, 0x1e, 0xfd, 0x79, 0xb8, 0x64,
	0x9e, 0xff, 0x7b, 0xf7, 0xa6, 0x3e, 0x46, 0xf1, 0x3d, 0xc2, 0xb9, 0x1a, 0x08, 0x97, 0x35, 0xff,
	0x01, 0xb3, 0x6f, 0x10, 0xce, 0x96, 0x41, 0xfd, 0xf5, 0x46, 0x4b, 0xaf, 0x50, 0x7f, 0x40, 0xb4,
	0xf3, 0x01, 0xd1, 0x2e, 0x06, 0x04, 0x9d, 0x04, 0x04, 0xbd, 0x0d, 0x08, 0xfa, 0x14, 0x10, 0xd4,
	0x0f, 0x08, 0xfa, 0x12, 0x10, 0xf4, 0x35, 0x20, 0xda, 0x45, 0x40, 0xd0, 0xeb, 0x21, 0xd1, 0xfa,
	0x43, 0xa2, 0x9d, 0x0f, 0x89, 0x76, 0xf0, 0xb4, 0xc5, 0xc5, 0x61, 0x8b, 0x76, 0xb9, 0xab, 0x40,
	0x4a, 0x46, 0x3b, 0xbe, 0x19, 0x1d, 0x9e, 0x71, 0xd9, 0xde, 0x12, 0x92, 0x77, 0x1d, 0x1b, 0xe4,
	0xd6, 0x18, 0x36, 0x45, 0xa3, 0xc5, 0x4d, 0x78, 0xa1, 0xe2, 0xcd, 0xf2, 0xab, 0xa5, 0xdb, 0x98,
	0x8b, 0x76, 0xcd, 0x9d, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x59, 0x15, 0x62, 0xa2, 0x05,
	0x00, 0x00,
}

func (this *LeasePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeasePool)
	if !ok {
		that2, ok := that.(LeasePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartAddress.Equal(that1.StartAddress) {
		return false
	}
	if !this.EndAddress.Equal(that1.EndAddress) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Network) != len(that1.Network) {
		return false
	}
	for i := range this.Network {
		if !this.Network[i].Equal(that1.Network[i]) {
			return false
		}
	}
	if len(this.LeasePool) != len(that1.LeasePool) {
		return false
	}
	for i := range this.LeasePool {
		if !this.LeasePool[i].Equal(that1.LeasePool[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Network) != len(that1.Network) {
		return false
	}
	for i := range this.Network {
		if !this.Network[i].Equal(that1.Network[i]) {
			return false
		}
	}
	if len(this.LeasePool) != len(that1.LeasePool) {
		return false
	}
	for i := range this.LeasePool {
		if !this.LeasePool[i].Equal(that1.LeasePool[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Network) != len(that1.Network) {
		return false
	}
	for i := range this.Network {
		if !this.Network[i].Equal(that1.Network[i]) {
			return false
		}
	}
	if len(this.LeasePool) != len(that1.LeasePool) {
		return false
	}
	for i := range this.LeasePool {
		if !this.LeasePool[i].Equal(that1.LeasePool[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Network) != len(that1.Network) {
		return false
	}
	for i := range this.Network {
		if !this.Network[i].Equal(that1.Network[i]) {
			return false
		}
	}
	if len(this.LeasePool) != len(that1.LeasePool) {
		return false
	}
	for i := range this.LeasePool {
		if !this.LeasePool[i].Equal(that1.LeasePool[i]) {
			return false
		}
	}
	return true
}
func (this *LeasePool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.LeasePool{")
	if this.StartAddress != nil {
		s = append(s, "StartAddress: "+fmt.Sprintf("%#v", this.StartAddress)+",\n")
	}
	if this.EndAddress != nil {
		s = append(s, "EndAddress: "+fmt.Sprintf("%#v", this.EndAddress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.GlobalSpecType{")
	if this.Network != nil {
		s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.CreateSpecType{")
	if this.Network != nil {
		s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.ReplaceSpecType{")
	if this.Network != nil {
		s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_leasepool.GetSpecType{")
	if this.Network != nil {
		s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LeasePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeasePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeasePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndAddress != nil {
		{
			size, err := m.EndAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartAddress != nil {
		{
			size, err := m.StartAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeasePool) > 0 {
		for iNdEx := len(m.LeasePool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeasePool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Network) > 0 {
		for iNdEx := len(m.Network) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Network[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeasePool) > 0 {
		for iNdEx := len(m.LeasePool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeasePool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Network) > 0 {
		for iNdEx := len(m.Network) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Network[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeasePool) > 0 {
		for iNdEx := len(m.LeasePool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeasePool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Network) > 0 {
		for iNdEx := len(m.Network) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Network[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeasePool) > 0 {
		for iNdEx := len(m.LeasePool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeasePool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Network) > 0 {
		for iNdEx := len(m.Network) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Network[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LeasePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartAddress != nil {
		l = m.StartAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndAddress != nil {
		l = m.EndAddress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Network) > 0 {
		for _, e := range m.Network {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LeasePool) > 0 {
		for _, e := range m.LeasePool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Network) > 0 {
		for _, e := range m.Network {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LeasePool) > 0 {
		for _, e := range m.LeasePool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Network) > 0 {
		for _, e := range m.Network {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LeasePool) > 0 {
		for _, e := range m.LeasePool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Network) > 0 {
		for _, e := range m.Network {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LeasePool) > 0 {
		for _, e := range m.LeasePool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LeasePool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeasePool{`,
		`StartAddress:` + strings.Replace(fmt.Sprintf("%v", this.StartAddress), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`EndAddress:` + strings.Replace(fmt.Sprintf("%v", this.EndAddress), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetwork := "[]*IpSubnetType{"
	for _, f := range this.Network {
		repeatedStringForNetwork += strings.Replace(fmt.Sprintf("%v", f), "IpSubnetType", "schema.IpSubnetType", 1) + ","
	}
	repeatedStringForNetwork += "}"
	repeatedStringForLeasePool := "[]*LeasePool{"
	for _, f := range this.LeasePool {
		repeatedStringForLeasePool += strings.Replace(f.String(), "LeasePool", "LeasePool", 1) + ","
	}
	repeatedStringForLeasePool += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Network:` + repeatedStringForNetwork + `,`,
		`LeasePool:` + repeatedStringForLeasePool + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetwork := "[]*IpSubnetType{"
	for _, f := range this.Network {
		repeatedStringForNetwork += strings.Replace(fmt.Sprintf("%v", f), "IpSubnetType", "schema.IpSubnetType", 1) + ","
	}
	repeatedStringForNetwork += "}"
	repeatedStringForLeasePool := "[]*LeasePool{"
	for _, f := range this.LeasePool {
		repeatedStringForLeasePool += strings.Replace(f.String(), "LeasePool", "LeasePool", 1) + ","
	}
	repeatedStringForLeasePool += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Network:` + repeatedStringForNetwork + `,`,
		`LeasePool:` + repeatedStringForLeasePool + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetwork := "[]*IpSubnetType{"
	for _, f := range this.Network {
		repeatedStringForNetwork += strings.Replace(fmt.Sprintf("%v", f), "IpSubnetType", "schema.IpSubnetType", 1) + ","
	}
	repeatedStringForNetwork += "}"
	repeatedStringForLeasePool := "[]*LeasePool{"
	for _, f := range this.LeasePool {
		repeatedStringForLeasePool += strings.Replace(f.String(), "LeasePool", "LeasePool", 1) + ","
	}
	repeatedStringForLeasePool += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Network:` + repeatedStringForNetwork + `,`,
		`LeasePool:` + repeatedStringForLeasePool + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetwork := "[]*IpSubnetType{"
	for _, f := range this.Network {
		repeatedStringForNetwork += strings.Replace(fmt.Sprintf("%v", f), "IpSubnetType", "schema.IpSubnetType", 1) + ","
	}
	repeatedStringForNetwork += "}"
	repeatedStringForLeasePool := "[]*LeasePool{"
	for _, f := range this.LeasePool {
		repeatedStringForLeasePool += strings.Replace(f.String(), "LeasePool", "LeasePool", 1) + ","
	}
	repeatedStringForLeasePool += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Network:` + repeatedStringForNetwork + `,`,
		`LeasePool:` + repeatedStringForLeasePool + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LeasePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeasePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeasePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAddress == nil {
				m.StartAddress = &schema.IpAddressType{}
			}
			if err := m.StartAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAddress == nil {
				m.EndAddress = &schema.IpAddressType{}
			}
			if err := m.EndAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network, &schema.IpSubnetType{})
			if err := m.Network[len(m.Network)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeasePool = append(m.LeasePool, &LeasePool{})
			if err := m.LeasePool[len(m.LeasePool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network, &schema.IpSubnetType{})
			if err := m.Network[len(m.Network)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeasePool = append(m.LeasePool, &LeasePool{})
			if err := m.LeasePool[len(m.LeasePool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network, &schema.IpSubnetType{})
			if err := m.Network[len(m.Network)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeasePool = append(m.LeasePool, &LeasePool{})
			if err := m.LeasePool[len(m.LeasePool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network, &schema.IpSubnetType{})
			if err := m.Network[len(m.Network)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeasePool = append(m.LeasePool, &LeasePool{})
			if err := m.LeasePool[len(m.LeasePool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

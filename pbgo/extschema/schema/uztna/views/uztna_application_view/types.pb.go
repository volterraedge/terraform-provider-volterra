// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/views/uztna_application_view/types.proto

package uztna_application_view

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TLS Certificate
//
// x-displayName: "Certificate"
//
// This is used to import or create new certificate for tls communication.
type AppCertificate struct {
	// TLS Certificates
	//
	// x-displayName: "TLS Certificates"
	//
	// Select/Add TLS Certificate objects to associate with this Application
	Certificate *views.ObjectRefType `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *AppCertificate) Reset()      { *m = AppCertificate{} }
func (*AppCertificate) ProtoMessage() {}
func (*AppCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{0}
}
func (m *AppCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCertificate.Merge(m, src)
}
func (m *AppCertificate) XXX_Size() int {
	return m.Size()
}
func (m *AppCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_AppCertificate proto.InternalMessageInfo

func (m *AppCertificate) GetCertificate() *views.ObjectRefType {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// Origin
//
// x-displayName: "Origin"
//
// Origin Pool for the Application
type Origin struct {
	// Origin Pool
	//
	// x-displayName: "Origin Pool"
	//
	// Origin pool contains the application server endpoints.
	// to which the BIG-IP Next will distribute the application traffic
	OriginPool []*views.ObjectRefType `protobuf:"bytes,1,rep,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	// SNAT Pool
	//
	// x-displayName: "SNAT Pool"
	//
	// A SNAT pool is a collection of IP addresses to be used for source NAT
	// by BIG-IP Next while sending the application traffic from TMM to Application server.
	// Each address in the SNAT pool can be used for up to 63K
	// connections with unique ports.
	SnatPool []*views.ObjectRefType `protobuf:"bytes,2,rep,name=snat_pool,json=snatPool,proto3" json:"snat_pool,omitempty"`
}

func (m *Origin) Reset()      { *m = Origin{} }
func (*Origin) ProtoMessage() {}
func (*Origin) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{1}
}
func (m *Origin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Origin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Origin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Origin.Merge(m, src)
}
func (m *Origin) XXX_Size() int {
	return m.Size()
}
func (m *Origin) XXX_DiscardUnknown() {
	xxx_messageInfo_Origin.DiscardUnknown(m)
}

var xxx_messageInfo_Origin proto.InternalMessageInfo

func (m *Origin) GetOriginPool() []*views.ObjectRefType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *Origin) GetSnatPool() []*views.ObjectRefType {
	if m != nil {
		return m.SnatPool
	}
	return nil
}

// ApplicationTags
//
// x-displayName: "Tags"
//
// UZTNA Application tags are used for managing access to Applications
type ApplicationTags struct {
	// ApplicationTags
	//
	// x-displayName: "Tags"
	// x-required
	// List of Tags to be associated with the Application.
	AppTags []*views.ObjectRefType `protobuf:"bytes,1,rep,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
}

func (m *ApplicationTags) Reset()      { *m = ApplicationTags{} }
func (*ApplicationTags) ProtoMessage() {}
func (*ApplicationTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{2}
}
func (m *ApplicationTags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationTags.Merge(m, src)
}
func (m *ApplicationTags) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationTags) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationTags.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationTags proto.InternalMessageInfo

func (m *ApplicationTags) GetAppTags() []*views.ObjectRefType {
	if m != nil {
		return m.AppTags
	}
	return nil
}

// Protocol
//
// x-displayName: "Protocol"
//
// It specifies the possible Protocols
type Protocol struct {
	// Protocol
	//
	// x-displayName: "Protocol"
	// x-required
	// Select the protocol for the application
	//
	// Types that are valid to be assigned to ProtocolChoice:
	//	*Protocol_HTTP
	//	*Protocol_HTTPS
	//	*Protocol_TCP
	//	*Protocol_UDP
	ProtocolChoice isProtocol_ProtocolChoice `protobuf_oneof:"protocol_choice"`
}

func (m *Protocol) Reset()      { *m = Protocol{} }
func (*Protocol) ProtoMessage() {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{3}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

type isProtocol_ProtocolChoice interface {
	isProtocol_ProtocolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Protocol_HTTP struct {
	HTTP *schema.Empty `protobuf:"bytes,2,opt,name=HTTP,proto3,oneof" json:"HTTP,omitempty"`
}
type Protocol_HTTPS struct {
	HTTPS *AppCertificate `protobuf:"bytes,3,opt,name=HTTPS,proto3,oneof" json:"HTTPS,omitempty"`
}
type Protocol_TCP struct {
	TCP *schema.Empty `protobuf:"bytes,4,opt,name=TCP,proto3,oneof" json:"TCP,omitempty"`
}
type Protocol_UDP struct {
	UDP *schema.Empty `protobuf:"bytes,5,opt,name=UDP,proto3,oneof" json:"UDP,omitempty"`
}

func (*Protocol_HTTP) isProtocol_ProtocolChoice()  {}
func (*Protocol_HTTPS) isProtocol_ProtocolChoice() {}
func (*Protocol_TCP) isProtocol_ProtocolChoice()   {}
func (*Protocol_UDP) isProtocol_ProtocolChoice()   {}

func (m *Protocol) GetProtocolChoice() isProtocol_ProtocolChoice {
	if m != nil {
		return m.ProtocolChoice
	}
	return nil
}

func (m *Protocol) GetHTTP() *schema.Empty {
	if x, ok := m.GetProtocolChoice().(*Protocol_HTTP); ok {
		return x.HTTP
	}
	return nil
}

func (m *Protocol) GetHTTPS() *AppCertificate {
	if x, ok := m.GetProtocolChoice().(*Protocol_HTTPS); ok {
		return x.HTTPS
	}
	return nil
}

func (m *Protocol) GetTCP() *schema.Empty {
	if x, ok := m.GetProtocolChoice().(*Protocol_TCP); ok {
		return x.TCP
	}
	return nil
}

func (m *Protocol) GetUDP() *schema.Empty {
	if x, ok := m.GetProtocolChoice().(*Protocol_UDP); ok {
		return x.UDP
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Protocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Protocol_HTTP)(nil),
		(*Protocol_HTTPS)(nil),
		(*Protocol_TCP)(nil),
		(*Protocol_UDP)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "GlobalSpecType"
//
// Defines shape of application
type GlobalSpecType struct {
	// FQDN for the application
	//
	// x-displayName: "FQDN"
	// x-required
	// x-example: "test.f5net.com"
	// Hostname of the application to be onboarded.
	Fqdn string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// port
	//
	// x-displayName: "Port"
	// x-required
	// x-example: "443"
	// The port on which the application listens .
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	//
	// Protocol used by the Application for communication
	Protocol *Protocol `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// ApplicationTags
	//
	// x-displayName: "Tags"
	// x-required
	// List of Tags to be associated with the Application
	AppTags *ApplicationTags `protobuf:"bytes,4,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	// Location
	//
	// x-displayName: "Location"
	// x-required
	// BIG-IP Next sites to onboard the Application
	Location *views.ObjectRefType `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	// Origin
	//
	// x-displayName: "Origin"
	//
	// List of the Origin Pools and SNAT pool.
	// Origin Pool is  used application server end points.
	// SNAT pool is an advanced field which is used to configure the SNAT pool IPs
	Origin *Origin `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	//
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,7,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *GlobalSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GlobalSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *GlobalSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *GlobalSpecType) GetLocation() *views.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GlobalSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
//
// Shape of the Application's Create Spec
type CreateSpecType struct {
	Fqdn     string               `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Port     uint32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol *Protocol            `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AppTags  *ApplicationTags     `protobuf:"bytes,4,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Location *views.ObjectRefType `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Origin   *Origin              `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *CreateSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CreateSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *CreateSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *CreateSpecType) GetLocation() *views.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CreateSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
//
// Shape of the Application's Replace Spec
type ReplaceSpecType struct {
	Fqdn     string               `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Port     uint32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol *Protocol            `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AppTags  *ApplicationTags     `protobuf:"bytes,4,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Location *views.ObjectRefType `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Origin   *Origin              `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *ReplaceSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ReplaceSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *ReplaceSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *ReplaceSpecType) GetLocation() *views.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ReplaceSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get Specification"
//
// Shape of the Application's Get Spec
type GetSpecType struct {
	Fqdn     string               `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Port     uint32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol *Protocol            `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	AppTags  *ApplicationTags     `protobuf:"bytes,4,opt,name=app_tags,json=appTags,proto3" json:"app_tags,omitempty"`
	Location *views.ObjectRefType `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Origin   *Origin              `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_50a4a18fb34b4cd4, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *GetSpecType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GetSpecType) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *GetSpecType) GetAppTags() *ApplicationTags {
	if m != nil {
		return m.AppTags
	}
	return nil
}

func (m *GetSpecType) GetLocation() *views.ObjectRefType {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GetSpecType) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func init() {
	proto.RegisterType((*AppCertificate)(nil), "ves.io.schema.uztna.views.uztna_application_view.AppCertificate")
	golang_proto.RegisterType((*AppCertificate)(nil), "ves.io.schema.uztna.views.uztna_application_view.AppCertificate")
	proto.RegisterType((*Origin)(nil), "ves.io.schema.uztna.views.uztna_application_view.Origin")
	golang_proto.RegisterType((*Origin)(nil), "ves.io.schema.uztna.views.uztna_application_view.Origin")
	proto.RegisterType((*ApplicationTags)(nil), "ves.io.schema.uztna.views.uztna_application_view.ApplicationTags")
	golang_proto.RegisterType((*ApplicationTags)(nil), "ves.io.schema.uztna.views.uztna_application_view.ApplicationTags")
	proto.RegisterType((*Protocol)(nil), "ves.io.schema.uztna.views.uztna_application_view.Protocol")
	golang_proto.RegisterType((*Protocol)(nil), "ves.io.schema.uztna.views.uztna_application_view.Protocol")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.views.uztna_application_view.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/views/uztna_application_view/types.proto", fileDescriptor_50a4a18fb34b4cd4)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/uztna/views/uztna_application_view/types.proto", fileDescriptor_50a4a18fb34b4cd4)
}

var fileDescriptor_50a4a18fb34b4cd4 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x5d, 0x6b, 0xdb, 0x56,
	0x18, 0xd6, 0x6b, 0x29, 0x8e, 0x72, 0xbc, 0xc6, 0xee, 0xd9, 0x07, 0x9a, 0x37, 0xd4, 0xe0, 0x8b,
	0x12, 0x46, 0x22, 0x75, 0x4d, 0x06, 0x23, 0x8c, 0xd1, 0x38, 0x1d, 0xcd, 0xba, 0x41, 0x8c, 0xea,
	0x0d, 0x36, 0xc6, 0x8c, 0xac, 0x1c, 0x2b, 0xda, 0x64, 0x9f, 0x33, 0xe9, 0xc4, 0x5d, 0x06, 0x86,
	0xc0, 0xfe, 0x40, 0xe9, 0x5f, 0x58, 0xd9, 0x86, 0x7f, 0xc2, 0x9c, 0x41, 0x6e, 0x06, 0xa3, 0x57,
	0xb9, 0xcc, 0x65, 0xa3, 0xdc, 0x74, 0x37, 0x25, 0x97, 0xbb, 0xeb, 0xd0, 0x91, 0xec, 0xc8, 0xe9,
	0x0a, 0x4e, 0xd9, 0x4a, 0x2f, 0x7a, 0xe5, 0x73, 0xf4, 0x7e, 0x3c, 0xef, 0x79, 0x9e, 0x47, 0x07,
	0x0b, 0x7d, 0xd0, 0x25, 0xa1, 0xe1, 0x51, 0x33, 0x74, 0xb6, 0x48, 0xdb, 0x36, 0xb7, 0x7f, 0xe0,
	0x1d, 0xdb, 0xec, 0x7a, 0xe4, 0x76, 0x98, 0xac, 0x1b, 0x36, 0x63, 0xbe, 0xe7, 0xd8, 0xdc, 0xa3,
	0x9d, 0x46, 0xfc, 0xdc, 0xe4, 0x3b, 0x8c, 0x84, 0x06, 0x0b, 0x28, 0xa7, 0xf8, 0x4a, 0x52, 0x6d,
	0x24, 0xd5, 0x86, 0xa8, 0x30, 0x44, 0xb5, 0xf1, 0xef, 0xd5, 0xe5, 0x45, 0xd7, 0xe3, 0x5b, 0xdb,
	0x4d, 0xc3, 0xa1, 0x6d, 0xd3, 0xa5, 0x2e, 0x35, 0x45, 0xa3, 0xe6, 0x76, 0x4b, 0xec, 0xc4, 0x46,
	0xac, 0x12, 0x80, 0xf2, 0x25, 0x97, 0x52, 0xd7, 0x27, 0xa7, 0x59, 0xdc, 0x6b, 0x93, 0x90, 0xdb,
	0x6d, 0x96, 0x26, 0xbc, 0x35, 0x3e, 0x3f, 0x65, 0x31, 0x54, 0x3a, 0x5e, 0xf9, 0xcd, 0xf1, 0x60,
	0x66, 0xf2, 0xf2, 0xdb, 0xe3, 0xa1, 0xae, 0xed, 0x7b, 0x9b, 0x36, 0x27, 0x69, 0x74, 0xee, 0x4c,
	0xd4, 0x23, 0xb7, 0x1b, 0xe3, 0xad, 0x2f, 0x3d, 0x99, 0x11, 0x66, 0x01, 0x2a, 0x2d, 0x34, 0xbb,
	0xca, 0xd8, 0x1a, 0x09, 0xb8, 0xd7, 0x8a, 0x19, 0x20, 0xb8, 0x8e, 0x0a, 0xce, 0xe9, 0x56, 0x83,
	0x39, 0x98, 0x2f, 0x5c, 0xad, 0x18, 0xe3, 0x14, 0x26, 0xe4, 0x6d, 0x34, 0xbf, 0x21, 0x0e, 0xb7,
	0x48, 0xab, 0xbe, 0xc3, 0x48, 0x75, 0xb6, 0xdf, 0xcb, 0x56, 0x5a, 0xd9, 0x4d, 0xe5, 0x11, 0xa0,
	0xfc, 0x46, 0xe0, 0xb9, 0x5e, 0x07, 0x07, 0xa8, 0x40, 0xc5, 0xaa, 0xc1, 0x28, 0xf5, 0x35, 0x98,
	0x93, 0x27, 0x04, 0x58, 0xec, 0xf7, 0x2e, 0x26, 0x7a, 0x65, 0xea, 0x77, 0xf7, 0x40, 0xfa, 0xed,
	0xaf, 0x7d, 0x79, 0xea, 0x2e, 0xe4, 0x4a, 0x10, 0x3d, 0xf8, 0x43, 0xce, 0xdf, 0xdd, 0x83, 0x5c,
	0x49, 0xb2, 0x50, 0x92, 0x55, 0xa3, 0xd4, 0xc7, 0x0c, 0xcd, 0x84, 0x1d, 0x9b, 0x27, 0x88, 0xb9,
	0x89, 0x11, 0xcd, 0x7e, 0xaf, 0x98, 0x20, 0x8e, 0xaa, 0xf7, 0x07, 0x00, 0x59, 0x4c, 0x6d, 0x0c,
	0x53, 0x8d, 0xf3, 0x62, 0xc4, 0xca, 0x8f, 0x80, 0x8a, 0xab, 0xa7, 0xb6, 0xaa, 0xdb, 0x6e, 0x88,
	0x19, 0x52, 0x6d, 0xc6, 0x1a, 0xdc, 0x76, 0xc3, 0x73, 0x1c, 0xfb, 0xdd, 0x7e, 0xef, 0xf5, 0x27,
	0x6d, 0xca, 0x6d, 0xf7, 0xe9, 0x63, 0x4c, 0xdb, 0x8c, 0xc5, 0x88, 0x95, 0x7b, 0x39, 0xa4, 0xd6,
	0x62, 0xa1, 0x1d, 0xea, 0xe3, 0x2b, 0x48, 0x59, 0xaf, 0xd7, 0x6b, 0x5a, 0x4e, 0x48, 0xfa, 0xda,
	0x19, 0xe8, 0x8f, 0xda, 0x8c, 0xef, 0x54, 0x95, 0x87, 0x03, 0x80, 0x75, 0xc9, 0x12, 0x99, 0xf8,
	0x6b, 0x34, 0x15, 0xff, 0xde, 0xd2, 0x64, 0x51, 0x72, 0xcd, 0x38, 0xef, 0x8b, 0x64, 0x8c, 0x9b,
	0x6b, 0xd4, 0x3e, 0x69, 0x8b, 0xe7, 0x91, 0x5c, 0x5f, 0xab, 0x69, 0xca, 0xd3, 0x07, 0x5a, 0x97,
	0xac, 0x38, 0x05, 0x1b, 0x48, 0xfe, 0xec, 0x7a, 0x4d, 0x9b, 0x9a, 0x60, 0xf4, 0x38, 0xb1, 0x7a,
	0x19, 0x15, 0x59, 0x7a, 0xee, 0x86, 0xb3, 0x45, 0x3d, 0x87, 0xe0, 0x57, 0xf7, 0x07, 0xa0, 0x1c,
	0x0c, 0x00, 0xa2, 0x01, 0x4c, 0x5f, 0x5d, 0x58, 0x5a, 0x58, 0x5e, 0x78, 0xef, 0xa6, 0xa2, 0x42,
	0x29, 0x57, 0x79, 0xa4, 0xa0, 0xd9, 0x1b, 0x3e, 0x6d, 0xda, 0xfe, 0x2d, 0x46, 0x9c, 0x98, 0x75,
	0x7c, 0x19, 0x29, 0xad, 0xef, 0x36, 0x3b, 0xc2, 0xff, 0x33, 0x55, 0xfc, 0xf7, 0x20, 0xe1, 0x7a,
	0x26, 0x98, 0x2e, 0x81, 0xb6, 0x9b, 0xdb, 0x02, 0x4b, 0xc4, 0xb1, 0x81, 0x14, 0x46, 0x03, 0x2e,
	0x48, 0xbd, 0x50, 0x2d, 0x47, 0x03, 0x98, 0x41, 0xf2, 0xf2, 0xf2, 0x12, 0xca, 0x2d, 0x2f, 0xc5,
	0x05, 0xea, 0x3b, 0x79, 0xed, 0xf1, 0x63, 0x79, 0x1e, 0x2c, 0x91, 0x87, 0xbf, 0x42, 0xea, 0x70,
	0xb0, 0x94, 0xd5, 0x95, 0xf3, 0xb3, 0x3a, 0x94, 0xb4, 0xaa, 0x9c, 0x0c, 0x00, 0xac, 0x51, 0xc7,
	0xb8, 0xfb, 0xc8, 0x61, 0x09, 0xab, 0xab, 0xcf, 0xa4, 0x59, 0xd6, 0xb6, 0x23, 0x37, 0xe1, 0x0d,
	0xa4, 0xfa, 0x34, 0x09, 0x68, 0xea, 0xc4, 0xf7, 0x42, 0xb1, 0xdf, 0x53, 0x42, 0x8f, 0x93, 0xdd,
	0x3d, 0x80, 0x3b, 0xbf, 0xc7, 0xe3, 0x0e, 0x9b, 0xe0, 0x1a, 0xca, 0x27, 0x2f, 0xa9, 0x96, 0x17,
	0xed, 0xde, 0x3f, 0xff, 0xb0, 0xc9, 0xa5, 0x62, 0xa5, 0x7d, 0xf0, 0x17, 0xe8, 0x82, 0xb8, 0x06,
	0xbd, 0x0e, 0x27, 0x41, 0xc7, 0xf6, 0xb5, 0xe9, 0x89, 0xe7, 0x2c, 0xf5, 0x7b, 0xe3, 0xb5, 0xd6,
	0x2b, 0xf1, 0xf6, 0xe3, 0x74, 0xb7, 0x72, 0xfd, 0xfe, 0x00, 0xae, 0x21, 0x8c, 0x94, 0x98, 0x8b,
	0x32, 0x3a, 0x65, 0x1a, 0xbd, 0x81, 0xd4, 0x4f, 0xd3, 0x23, 0xc5, 0xcf, 0x87, 0xc7, 0x43, 0x78,
	0x78, 0xe7, 0x95, 0xd5, 0xe1, 0x41, 0x6f, 0x2a, 0xea, 0x54, 0x29, 0x5f, 0xf9, 0x59, 0x46, 0xb3,
	0x6b, 0x01, 0xb1, 0x39, 0x19, 0x19, 0x0e, 0x67, 0x0d, 0x97, 0x9a, 0x0b, 0x67, 0xcd, 0x95, 0x1a,
	0xe8, 0xf3, 0xff, 0xd2, 0x40, 0xcf, 0xcd, 0x3a, 0x9f, 0x3c, 0x93, 0x75, 0x0a, 0x19, 0xeb, 0xfc,
	0x9f, 0xb6, 0x59, 0xb9, 0x78, 0xff, 0xc3, 0x33, 0x17, 0x40, 0x2a, 0xd4, 0x2f, 0x32, 0x2a, 0x5a,
	0x84, 0xf9, 0xb6, 0xf3, 0x52, 0xa9, 0x17, 0x5b, 0xa9, 0x9f, 0x64, 0x54, 0xb8, 0x41, 0xf8, 0x4b,
	0x95, 0x5e, 0x64, 0x95, 0xaa, 0xf7, 0xe0, 0xe0, 0x48, 0x97, 0x0e, 0x8f, 0x74, 0xe9, 0xe4, 0x48,
	0x87, 0xdd, 0x48, 0x87, 0x5f, 0x23, 0x1d, 0xfe, 0x8c, 0x74, 0x38, 0x88, 0x74, 0x38, 0x8c, 0x74,
	0x78, 0x10, 0xe9, 0xf0, 0x30, 0xd2, 0xa5, 0x93, 0x48, 0x87, 0x3b, 0xc7, 0xba, 0xb4, 0x7f, 0xac,
	0xc3, 0xc1, 0xb1, 0x2e, 0x1d, 0x1e, 0xeb, 0xd2, 0x97, 0x2d, 0x97, 0xb2, 0x6f, 0x5d, 0xa3, 0x4b,
	0x7d, 0x4e, 0x82, 0xc0, 0x36, 0xb6, 0x43, 0x53, 0x2c, 0x5a, 0x34, 0x68, 0x2f, 0xb2, 0x80, 0x76,
	0xbd, 0x4d, 0x12, 0x2c, 0x0e, 0xc3, 0x26, 0x6b, 0xba, 0xd4, 0x24, 0xdf, 0xf3, 0xf4, 0xef, 0xef,
	0xc4, 0x5f, 0x0f, 0xcd, 0xbc, 0x90, 0x71, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x3b,
	0xc8, 0x89, 0x78, 0x0c, 0x00, 0x00,
}

func (this *AppCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppCertificate)
	if !ok {
		that2, ok := that.(AppCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Certificate.Equal(that1.Certificate) {
		return false
	}
	return true
}
func (this *Origin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Origin)
	if !ok {
		that2, ok := that.(Origin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginPool) != len(that1.OriginPool) {
		return false
	}
	for i := range this.OriginPool {
		if !this.OriginPool[i].Equal(that1.OriginPool[i]) {
			return false
		}
	}
	if len(this.SnatPool) != len(that1.SnatPool) {
		return false
	}
	for i := range this.SnatPool {
		if !this.SnatPool[i].Equal(that1.SnatPool[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationTags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationTags)
	if !ok {
		that2, ok := that.(ApplicationTags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppTags) != len(that1.AppTags) {
		return false
	}
	for i := range this.AppTags {
		if !this.AppTags[i].Equal(that1.AppTags[i]) {
			return false
		}
	}
	return true
}
func (this *Protocol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol)
	if !ok {
		that2, ok := that.(Protocol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProtocolChoice == nil {
		if this.ProtocolChoice != nil {
			return false
		}
	} else if this.ProtocolChoice == nil {
		return false
	} else if !this.ProtocolChoice.Equal(that1.ProtocolChoice) {
		return false
	}
	return true
}
func (this *Protocol_HTTP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_HTTP)
	if !ok {
		that2, ok := that.(Protocol_HTTP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HTTP.Equal(that1.HTTP) {
		return false
	}
	return true
}
func (this *Protocol_HTTPS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_HTTPS)
	if !ok {
		that2, ok := that.(Protocol_HTTPS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HTTPS.Equal(that1.HTTPS) {
		return false
	}
	return true
}
func (this *Protocol_TCP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_TCP)
	if !ok {
		that2, ok := that.(Protocol_TCP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TCP.Equal(that1.TCP) {
		return false
	}
	return true
}
func (this *Protocol_UDP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Protocol_UDP)
	if !ok {
		that2, ok := that.(Protocol_UDP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UDP.Equal(that1.UDP) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fqdn != that1.Fqdn {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fqdn != that1.Fqdn {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fqdn != that1.Fqdn {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fqdn != that1.Fqdn {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if !this.AppTags.Equal(that1.AppTags) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if !this.Origin.Equal(that1.Origin) {
		return false
	}
	return true
}
func (this *AppCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_application_view.AppCertificate{")
	if this.Certificate != nil {
		s = append(s, "Certificate: "+fmt.Sprintf("%#v", this.Certificate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Origin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_application_view.Origin{")
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.SnatPool != nil {
		s = append(s, "SnatPool: "+fmt.Sprintf("%#v", this.SnatPool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationTags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_application_view.ApplicationTags{")
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Protocol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&uztna_application_view.Protocol{")
	if this.ProtocolChoice != nil {
		s = append(s, "ProtocolChoice: "+fmt.Sprintf("%#v", this.ProtocolChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Protocol_HTTP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application_view.Protocol_HTTP{` +
		`HTTP:` + fmt.Sprintf("%#v", this.HTTP) + `}`}, ", ")
	return s
}
func (this *Protocol_HTTPS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application_view.Protocol_HTTPS{` +
		`HTTPS:` + fmt.Sprintf("%#v", this.HTTPS) + `}`}, ", ")
	return s
}
func (this *Protocol_TCP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application_view.Protocol_TCP{` +
		`TCP:` + fmt.Sprintf("%#v", this.TCP) + `}`}, ", ")
	return s
}
func (this *Protocol_UDP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_application_view.Protocol_UDP{` +
		`UDP:` + fmt.Sprintf("%#v", this.UDP) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&uztna_application_view.GlobalSpecType{")
	s = append(s, "Fqdn: "+fmt.Sprintf("%#v", this.Fqdn)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_application_view.CreateSpecType{")
	s = append(s, "Fqdn: "+fmt.Sprintf("%#v", this.Fqdn)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_application_view.ReplaceSpecType{")
	s = append(s, "Fqdn: "+fmt.Sprintf("%#v", this.Fqdn)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_application_view.GetSpecType{")
	s = append(s, "Fqdn: "+fmt.Sprintf("%#v", this.Fqdn)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.AppTags != nil {
		s = append(s, "AppTags: "+fmt.Sprintf("%#v", this.AppTags)+",\n")
	}
	if this.Location != nil {
		s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	}
	if this.Origin != nil {
		s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AppCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Certificate != nil {
		{
			size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Origin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SnatPool) > 0 {
		for iNdEx := len(m.SnatPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnatPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OriginPool) > 0 {
		for iNdEx := len(m.OriginPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationTags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationTags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationTags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppTags) > 0 {
		for iNdEx := len(m.AppTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolChoice != nil {
		{
			size := m.ProtocolChoice.Size()
			i -= size
			if _, err := m.ProtocolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Protocol_HTTP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_HTTP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HTTP != nil {
		{
			size, err := m.HTTP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Protocol_HTTPS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_HTTPS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HTTPS != nil {
		{
			size, err := m.HTTPS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Protocol_TCP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_TCP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TCP != nil {
		{
			size, err := m.TCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Protocol_UDP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_UDP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UDP != nil {
		{
			size, err := m.UDP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fqdn) > 0 {
		i -= len(m.Fqdn)
		copy(dAtA[i:], m.Fqdn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Fqdn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fqdn) > 0 {
		i -= len(m.Fqdn)
		copy(dAtA[i:], m.Fqdn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Fqdn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fqdn) > 0 {
		i -= len(m.Fqdn)
		copy(dAtA[i:], m.Fqdn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Fqdn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AppTags != nil {
		{
			size, err := m.AppTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fqdn) > 0 {
		i -= len(m.Fqdn)
		copy(dAtA[i:], m.Fqdn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Fqdn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificate != nil {
		l = m.Certificate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginPool) > 0 {
		for _, e := range m.OriginPool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SnatPool) > 0 {
		for _, e := range m.SnatPool {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationTags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppTags) > 0 {
		for _, e := range m.AppTags {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolChoice != nil {
		n += m.ProtocolChoice.Size()
	}
	return n
}

func (m *Protocol_HTTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HTTP != nil {
		l = m.HTTP.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Protocol_HTTPS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HTTPS != nil {
		l = m.HTTPS.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Protocol_TCP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TCP != nil {
		l = m.TCP.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Protocol_UDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UDP != nil {
		l = m.UDP.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fqdn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fqdn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fqdn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fqdn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppTags != nil {
		l = m.AppTags.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCertificate{`,
		`Certificate:` + strings.Replace(fmt.Sprintf("%v", this.Certificate), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Origin) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPool := "[]*ObjectRefType{"
	for _, f := range this.OriginPool {
		repeatedStringForOriginPool += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForOriginPool += "}"
	repeatedStringForSnatPool := "[]*ObjectRefType{"
	for _, f := range this.SnatPool {
		repeatedStringForSnatPool += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForSnatPool += "}"
	s := strings.Join([]string{`&Origin{`,
		`OriginPool:` + repeatedStringForOriginPool + `,`,
		`SnatPool:` + repeatedStringForSnatPool + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationTags) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppTags := "[]*ObjectRefType{"
	for _, f := range this.AppTags {
		repeatedStringForAppTags += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAppTags += "}"
	s := strings.Join([]string{`&ApplicationTags{`,
		`AppTags:` + repeatedStringForAppTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol{`,
		`ProtocolChoice:` + fmt.Sprintf("%v", this.ProtocolChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_HTTP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_HTTP{`,
		`HTTP:` + strings.Replace(fmt.Sprintf("%v", this.HTTP), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_HTTPS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_HTTPS{`,
		`HTTPS:` + strings.Replace(fmt.Sprintf("%v", this.HTTPS), "AppCertificate", "AppCertificate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_TCP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_TCP{`,
		`TCP:` + strings.Replace(fmt.Sprintf("%v", this.TCP), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Protocol_UDP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Protocol_UDP{`,
		`UDP:` + strings.Replace(fmt.Sprintf("%v", this.UDP), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Fqdn:` + fmt.Sprintf("%v", this.Fqdn) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Fqdn:` + fmt.Sprintf("%v", this.Fqdn) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Fqdn:` + fmt.Sprintf("%v", this.Fqdn) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Fqdn:` + fmt.Sprintf("%v", this.Fqdn) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + strings.Replace(this.Protocol.String(), "Protocol", "Protocol", 1) + `,`,
		`AppTags:` + strings.Replace(this.AppTags.String(), "ApplicationTags", "ApplicationTags", 1) + `,`,
		`Origin:` + strings.Replace(this.Origin.String(), "Origin", "Origin", 1) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificate == nil {
				m.Certificate = &views.ObjectRefType{}
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Origin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Origin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Origin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPool = append(m.OriginPool, &views.ObjectRefType{})
			if err := m.OriginPool[len(m.OriginPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnatPool = append(m.SnatPool, &views.ObjectRefType{})
			if err := m.SnatPool[len(m.SnatPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationTags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationTags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationTags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTags = append(m.AppTags, &views.ObjectRefType{})
			if err := m.AppTags[len(m.AppTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_HTTP{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppCertificate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_HTTPS{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_TCP{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProtocolChoice = &Protocol_UDP{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &views.ObjectRefType{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &views.ObjectRefType{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &views.ObjectRefType{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppTags == nil {
				m.AppTags = &ApplicationTags{}
			}
			if err := m.AppTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &views.ObjectRefType{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_application_view

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DeleteExtendedTagsRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeleteExtendedTagsRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeleteExtendedTagsRequest) DeepCopy() *DeleteExtendedTagsRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeleteExtendedTagsRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeleteExtendedTagsRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeleteExtendedTagsRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeleteExtendedTagsRequestValidator().Validate(ctx, m, opts...)
}

type ValidateDeleteExtendedTagsRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeleteExtendedTagsRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeleteExtendedTagsRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeleteExtendedTagsRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["extended_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("extended_tags"))
		for idx, item := range m.GetExtendedTags() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["objname"]; exists {

		vOpts := append(opts, db.WithValidateField("objname"))
		if err := fv(ctx, m.GetObjname(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeleteExtendedTagsRequestValidator = func() *ValidateDeleteExtendedTagsRequest {
	v := &ValidateDeleteExtendedTagsRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DeleteExtendedTagsRequestValidator() db.Validator {
	return DefaultDeleteExtendedTagsRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *DeleteExtendedTagsResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeleteExtendedTagsResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeleteExtendedTagsResponse) DeepCopy() *DeleteExtendedTagsResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeleteExtendedTagsResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeleteExtendedTagsResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeleteExtendedTagsResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeleteExtendedTagsResponseValidator().Validate(ctx, m, opts...)
}

type ValidateDeleteExtendedTagsResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeleteExtendedTagsResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeleteExtendedTagsResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeleteExtendedTagsResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeleteExtendedTagsResponseValidator = func() *ValidateDeleteExtendedTagsResponse {
	v := &ValidateDeleteExtendedTagsResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DeleteExtendedTagsResponseValidator() db.Validator {
	return DefaultDeleteExtendedTagsResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SetExtendedTagsRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetExtendedTagsRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetExtendedTagsRequest) DeepCopy() *SetExtendedTagsRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetExtendedTagsRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetExtendedTagsRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetExtendedTagsRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetExtendedTagsRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSetExtendedTagsRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetExtendedTagsRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetExtendedTagsRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetExtendedTagsRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["extended_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("extended_tags"))
		for idx, item := range m.GetExtendedTags() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["objname"]; exists {

		vOpts := append(opts, db.WithValidateField("objname"))
		if err := fv(ctx, m.GetObjname(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetExtendedTagsRequestValidator = func() *ValidateSetExtendedTagsRequest {
	v := &ValidateSetExtendedTagsRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SetExtendedTagsRequestValidator() db.Validator {
	return DefaultSetExtendedTagsRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SetExtendedTagsResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetExtendedTagsResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetExtendedTagsResponse) DeepCopy() *SetExtendedTagsResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetExtendedTagsResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetExtendedTagsResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetExtendedTagsResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetExtendedTagsResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSetExtendedTagsResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetExtendedTagsResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetExtendedTagsResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetExtendedTagsResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetExtendedTagsResponseValidator = func() *ValidateSetExtendedTagsResponse {
	v := &ValidateSetExtendedTagsResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SetExtendedTagsResponseValidator() db.Validator {
	return DefaultSetExtendedTagsResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateExtendedTagsRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateExtendedTagsRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateExtendedTagsRequest) DeepCopy() *UpdateExtendedTagsRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateExtendedTagsRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateExtendedTagsRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateExtendedTagsRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateExtendedTagsRequestValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateExtendedTagsRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateExtendedTagsRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateExtendedTagsRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateExtendedTagsRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_extended_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("add_extended_tags"))
		for idx, item := range m.GetAddExtendedTags() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["delete_extended_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("delete_extended_tags"))
		for idx, item := range m.GetDeleteExtendedTags() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["objname"]; exists {

		vOpts := append(opts, db.WithValidateField("objname"))
		if err := fv(ctx, m.GetObjname(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateExtendedTagsRequestValidator = func() *ValidateUpdateExtendedTagsRequest {
	v := &ValidateUpdateExtendedTagsRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateExtendedTagsRequestValidator() db.Validator {
	return DefaultUpdateExtendedTagsRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateExtendedTagsResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateExtendedTagsResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateExtendedTagsResponse) DeepCopy() *UpdateExtendedTagsResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateExtendedTagsResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateExtendedTagsResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateExtendedTagsResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateExtendedTagsResponseValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateExtendedTagsResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateExtendedTagsResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateExtendedTagsResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateExtendedTagsResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateExtendedTagsResponseValidator = func() *ValidateUpdateExtendedTagsResponse {
	v := &ValidateUpdateExtendedTagsResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateExtendedTagsResponseValidator() db.Validator {
	return DefaultUpdateExtendedTagsResponseValidator
}

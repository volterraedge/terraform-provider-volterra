// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/uztna/views/uztna_domain_view/types.proto

package uztna_domain_view

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/uztna/uztna_domain"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TLS Certificate
//
// x-displayName: "Certificate"
// This is used to import or create new certificate for tls communication
type DomainViewCertificate struct {
	// TLS Certificates
	//
	// x-displayName: "TLS Certificate"
	// Select/Add one or more TLS Certificate objects to associate with this ZeroTrust Domain
	Certificate *views.ObjectRefType `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *DomainViewCertificate) Reset()      { *m = DomainViewCertificate{} }
func (*DomainViewCertificate) ProtoMessage() {}
func (*DomainViewCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{0}
}
func (m *DomainViewCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewCertificate.Merge(m, src)
}
func (m *DomainViewCertificate) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewCertificate proto.InternalMessageInfo

func (m *DomainViewCertificate) GetCertificate() *views.ObjectRefType {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// ZTNA Policy
//
// x-displayName: "ZTNA Policy"
type DomainViewPolicy struct {
	// ZTNA Policy
	//
	// x-displayName: "ZTNA Policy"
	//
	// The ZeroTrust Domain enforces an Access policy that all end users must comply with to access private and potentially public applications. The ZTNA policy allows the admin to set up the access policy for this ZeroTrust Domain
	PolicyName *views.ObjectRefType `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (m *DomainViewPolicy) Reset()      { *m = DomainViewPolicy{} }
func (*DomainViewPolicy) ProtoMessage() {}
func (*DomainViewPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{1}
}
func (m *DomainViewPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewPolicy.Merge(m, src)
}
func (m *DomainViewPolicy) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewPolicy proto.InternalMessageInfo

func (m *DomainViewPolicy) GetPolicyName() *views.ObjectRefType {
	if m != nil {
		return m.PolicyName
	}
	return nil
}

// Dual Stack App VIP Pool
//
// x-displayName: "Dual Stack App VIP Pools"
//
// This is used to import or create new IPv4 and Ipv6 App VIP Pools
type DomainViewDualStackAppVipPool struct {
	// IPv4 App VIP Pools
	//
	// x-displayName: "IPv4 App VIP Pool"
	// x-required
	// Select or create new IPv4 App VIP pools
	Ipv4AppVipPool *views.ObjectRefType `protobuf:"bytes,1,opt,name=ipv4_app_vip_pool,json=ipv4AppVipPool,proto3" json:"ipv4_app_vip_pool,omitempty"`
	// IPv6 App VIP Pool
	//
	// x-displayName: "IPv6 App VIP Pool"
	// x-required
	// Select or create new IPv6 App VIP Pools
	Ipv6AppVipPool *views.ObjectRefType `protobuf:"bytes,2,opt,name=ipv6_app_vip_pool,json=ipv6AppVipPool,proto3" json:"ipv6_app_vip_pool,omitempty"`
}

func (m *DomainViewDualStackAppVipPool) Reset()      { *m = DomainViewDualStackAppVipPool{} }
func (*DomainViewDualStackAppVipPool) ProtoMessage() {}
func (*DomainViewDualStackAppVipPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{2}
}
func (m *DomainViewDualStackAppVipPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewDualStackAppVipPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewDualStackAppVipPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewDualStackAppVipPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewDualStackAppVipPool.Merge(m, src)
}
func (m *DomainViewDualStackAppVipPool) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewDualStackAppVipPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewDualStackAppVipPool.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewDualStackAppVipPool proto.InternalMessageInfo

func (m *DomainViewDualStackAppVipPool) GetIpv4AppVipPool() *views.ObjectRefType {
	if m != nil {
		return m.Ipv4AppVipPool
	}
	return nil
}

func (m *DomainViewDualStackAppVipPool) GetIpv6AppVipPool() *views.ObjectRefType {
	if m != nil {
		return m.Ipv6AppVipPool
	}
	return nil
}

// Application VIP Pool
//
// x-displayName: "Application VIP Pool"
// This is used to select VIP Network and VIP Range from
// VIP Pool.
type DomainViewAppVIPPool struct {
	// App VIP Pool
	//
	// x-displayName: "IP Version"
	// App VIP Pool for UZTNA Domain View
	//
	// Types that are valid to be assigned to IpaddressType:
	//	*DomainViewAppVIPPool_Ipv4AppVipPool
	//	*DomainViewAppVIPPool_Ipv6AppVipPool
	//	*DomainViewAppVIPPool_Ipv4Ipv6AppVipPool
	IpaddressType isDomainViewAppVIPPool_IpaddressType `protobuf_oneof:"ipaddress_type"`
}

func (m *DomainViewAppVIPPool) Reset()      { *m = DomainViewAppVIPPool{} }
func (*DomainViewAppVIPPool) ProtoMessage() {}
func (*DomainViewAppVIPPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{3}
}
func (m *DomainViewAppVIPPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewAppVIPPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewAppVIPPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewAppVIPPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewAppVIPPool.Merge(m, src)
}
func (m *DomainViewAppVIPPool) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewAppVIPPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewAppVIPPool.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewAppVIPPool proto.InternalMessageInfo

type isDomainViewAppVIPPool_IpaddressType interface {
	isDomainViewAppVIPPool_IpaddressType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DomainViewAppVIPPool_Ipv4AppVipPool struct {
	Ipv4AppVipPool *views.ObjectRefType `protobuf:"bytes,6,opt,name=ipv4_app_vip_pool,json=ipv4AppVipPool,proto3,oneof" json:"ipv4_app_vip_pool,omitempty"`
}
type DomainViewAppVIPPool_Ipv6AppVipPool struct {
	Ipv6AppVipPool *views.ObjectRefType `protobuf:"bytes,7,opt,name=ipv6_app_vip_pool,json=ipv6AppVipPool,proto3,oneof" json:"ipv6_app_vip_pool,omitempty"`
}
type DomainViewAppVIPPool_Ipv4Ipv6AppVipPool struct {
	Ipv4Ipv6AppVipPool *DomainViewDualStackAppVipPool `protobuf:"bytes,5,opt,name=ipv4_ipv6_app_vip_pool,json=ipv4Ipv6AppVipPool,proto3,oneof" json:"ipv4_ipv6_app_vip_pool,omitempty"`
}

func (*DomainViewAppVIPPool_Ipv4AppVipPool) isDomainViewAppVIPPool_IpaddressType()     {}
func (*DomainViewAppVIPPool_Ipv6AppVipPool) isDomainViewAppVIPPool_IpaddressType()     {}
func (*DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) isDomainViewAppVIPPool_IpaddressType() {}

func (m *DomainViewAppVIPPool) GetIpaddressType() isDomainViewAppVIPPool_IpaddressType {
	if m != nil {
		return m.IpaddressType
	}
	return nil
}

func (m *DomainViewAppVIPPool) GetIpv4AppVipPool() *views.ObjectRefType {
	if x, ok := m.GetIpaddressType().(*DomainViewAppVIPPool_Ipv4AppVipPool); ok {
		return x.Ipv4AppVipPool
	}
	return nil
}

func (m *DomainViewAppVIPPool) GetIpv6AppVipPool() *views.ObjectRefType {
	if x, ok := m.GetIpaddressType().(*DomainViewAppVIPPool_Ipv6AppVipPool); ok {
		return x.Ipv6AppVipPool
	}
	return nil
}

func (m *DomainViewAppVIPPool) GetIpv4Ipv6AppVipPool() *DomainViewDualStackAppVipPool {
	if x, ok := m.GetIpaddressType().(*DomainViewAppVIPPool_Ipv4Ipv6AppVipPool); ok {
		return x.Ipv4Ipv6AppVipPool
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DomainViewAppVIPPool) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DomainViewAppVIPPool_Ipv4AppVipPool)(nil),
		(*DomainViewAppVIPPool_Ipv6AppVipPool)(nil),
		(*DomainViewAppVIPPool_Ipv4Ipv6AppVipPool)(nil),
	}
}

// Dual Stack Lease Pool
//
// x-displayName: "Dual Stack Lease Pools"
//
// This is used to import or create new IPv4 and Ipv6 Lease Pools
type DomainViewDualStackLeasePool struct {
	// IPv4 Lease Pools
	//
	// x-displayName: "IPv4 Lease Pool"
	// x-required
	// Select or create new IPv4 Leasepools
	Ipv4Leasepool *views.ObjectRefType `protobuf:"bytes,2,opt,name=ipv4_leasepool,json=ipv4Leasepool,proto3" json:"ipv4_leasepool,omitempty"`
	// IPv6 Lease Pool
	//
	// x-displayName: "IPv6 Lease Pool"
	// x-required
	// Select or create new IPv6 Lease Pools
	Ipv6Leasepool *views.ObjectRefType `protobuf:"bytes,3,opt,name=ipv6_leasepool,json=ipv6Leasepool,proto3" json:"ipv6_leasepool,omitempty"`
}

func (m *DomainViewDualStackLeasePool) Reset()      { *m = DomainViewDualStackLeasePool{} }
func (*DomainViewDualStackLeasePool) ProtoMessage() {}
func (*DomainViewDualStackLeasePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{4}
}
func (m *DomainViewDualStackLeasePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewDualStackLeasePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewDualStackLeasePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewDualStackLeasePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewDualStackLeasePool.Merge(m, src)
}
func (m *DomainViewDualStackLeasePool) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewDualStackLeasePool) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewDualStackLeasePool.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewDualStackLeasePool proto.InternalMessageInfo

func (m *DomainViewDualStackLeasePool) GetIpv4Leasepool() *views.ObjectRefType {
	if m != nil {
		return m.Ipv4Leasepool
	}
	return nil
}

func (m *DomainViewDualStackLeasePool) GetIpv6Leasepool() *views.ObjectRefType {
	if m != nil {
		return m.Ipv6Leasepool
	}
	return nil
}

// IPv4 Lease Pool
//
// x-displayName: "IPv4 Lease Pool"
type IPv4LeasePool struct {
	// IPv4 Lease Pool
	//
	// x-displayName: "IPv4 Lease Pool"
	// x-required
	// Select or create new IPv4 Leasepools
	Ipv4Leasepool *views.ObjectRefType `protobuf:"bytes,1,opt,name=ipv4_leasepool,json=ipv4Leasepool,proto3" json:"ipv4_leasepool,omitempty"`
}

func (m *IPv4LeasePool) Reset()      { *m = IPv4LeasePool{} }
func (*IPv4LeasePool) ProtoMessage() {}
func (*IPv4LeasePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{5}
}
func (m *IPv4LeasePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPv4LeasePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPv4LeasePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPv4LeasePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4LeasePool.Merge(m, src)
}
func (m *IPv4LeasePool) XXX_Size() int {
	return m.Size()
}
func (m *IPv4LeasePool) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4LeasePool.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4LeasePool proto.InternalMessageInfo

func (m *IPv4LeasePool) GetIpv4Leasepool() *views.ObjectRefType {
	if m != nil {
		return m.Ipv4Leasepool
	}
	return nil
}

// IPv6 Lease Pool
//
// x-displayName: "IPv6 Lease Pool"
type IPv6LeasePool struct {
	// IPv6 Lease Pool
	//
	// x-displayName: "IPv6 Lease Pool"
	// x-required
	// Select or create new IPv6 Leasepools
	Ipv6Leasepool *views.ObjectRefType `protobuf:"bytes,1,opt,name=ipv6_leasepool,json=ipv6Leasepool,proto3" json:"ipv6_leasepool,omitempty"`
}

func (m *IPv6LeasePool) Reset()      { *m = IPv6LeasePool{} }
func (*IPv6LeasePool) ProtoMessage() {}
func (*IPv6LeasePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{6}
}
func (m *IPv6LeasePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPv6LeasePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPv6LeasePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPv6LeasePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv6LeasePool.Merge(m, src)
}
func (m *IPv6LeasePool) XXX_Size() int {
	return m.Size()
}
func (m *IPv6LeasePool) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv6LeasePool.DiscardUnknown(m)
}

var xxx_messageInfo_IPv6LeasePool proto.InternalMessageInfo

func (m *IPv6LeasePool) GetIpv6Leasepool() *views.ObjectRefType {
	if m != nil {
		return m.Ipv6Leasepool
	}
	return nil
}

// Lease Pools
//
// x-displayName: "Lease Pools"
//
// Lease Pool For UZTNA Domain View.
type DomainViewLeasePoolList struct {
	// Lease Pool
	//
	// x-displayName: "IP Version"
	// x-required
	// IP version type for the lease pool
	//
	// Types that are valid to be assigned to IpaddressType:
	//	*DomainViewLeasePoolList_Ipv4Leasepool
	//	*DomainViewLeasePoolList_Ipv6Leasepool
	//	*DomainViewLeasePoolList_Ipv4Ipv6Leasepool
	IpaddressType isDomainViewLeasePoolList_IpaddressType `protobuf_oneof:"ipaddress_type"`
}

func (m *DomainViewLeasePoolList) Reset()      { *m = DomainViewLeasePoolList{} }
func (*DomainViewLeasePoolList) ProtoMessage() {}
func (*DomainViewLeasePoolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{7}
}
func (m *DomainViewLeasePoolList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewLeasePoolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewLeasePoolList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewLeasePoolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewLeasePoolList.Merge(m, src)
}
func (m *DomainViewLeasePoolList) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewLeasePoolList) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewLeasePoolList.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewLeasePoolList proto.InternalMessageInfo

type isDomainViewLeasePoolList_IpaddressType interface {
	isDomainViewLeasePoolList_IpaddressType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DomainViewLeasePoolList_Ipv4Leasepool struct {
	Ipv4Leasepool *views.ObjectRefType `protobuf:"bytes,3,opt,name=ipv4_leasepool,json=ipv4Leasepool,proto3,oneof" json:"ipv4_leasepool,omitempty"`
}
type DomainViewLeasePoolList_Ipv6Leasepool struct {
	Ipv6Leasepool *views.ObjectRefType `protobuf:"bytes,4,opt,name=ipv6_leasepool,json=ipv6Leasepool,proto3,oneof" json:"ipv6_leasepool,omitempty"`
}
type DomainViewLeasePoolList_Ipv4Ipv6Leasepool struct {
	Ipv4Ipv6Leasepool *DomainViewDualStackLeasePool `protobuf:"bytes,5,opt,name=ipv4_ipv6_leasepool,json=ipv4Ipv6Leasepool,proto3,oneof" json:"ipv4_ipv6_leasepool,omitempty"`
}

func (*DomainViewLeasePoolList_Ipv4Leasepool) isDomainViewLeasePoolList_IpaddressType()     {}
func (*DomainViewLeasePoolList_Ipv6Leasepool) isDomainViewLeasePoolList_IpaddressType()     {}
func (*DomainViewLeasePoolList_Ipv4Ipv6Leasepool) isDomainViewLeasePoolList_IpaddressType() {}

func (m *DomainViewLeasePoolList) GetIpaddressType() isDomainViewLeasePoolList_IpaddressType {
	if m != nil {
		return m.IpaddressType
	}
	return nil
}

func (m *DomainViewLeasePoolList) GetIpv4Leasepool() *views.ObjectRefType {
	if x, ok := m.GetIpaddressType().(*DomainViewLeasePoolList_Ipv4Leasepool); ok {
		return x.Ipv4Leasepool
	}
	return nil
}

func (m *DomainViewLeasePoolList) GetIpv6Leasepool() *views.ObjectRefType {
	if x, ok := m.GetIpaddressType().(*DomainViewLeasePoolList_Ipv6Leasepool); ok {
		return x.Ipv6Leasepool
	}
	return nil
}

func (m *DomainViewLeasePoolList) GetIpv4Ipv6Leasepool() *DomainViewDualStackLeasePool {
	if x, ok := m.GetIpaddressType().(*DomainViewLeasePoolList_Ipv4Ipv6Leasepool); ok {
		return x.Ipv4Ipv6Leasepool
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DomainViewLeasePoolList) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DomainViewLeasePoolList_Ipv4Leasepool)(nil),
		(*DomainViewLeasePoolList_Ipv6Leasepool)(nil),
		(*DomainViewLeasePoolList_Ipv4Ipv6Leasepool)(nil),
	}
}

// Cloud Gateway
//
// x-displayName: "Cloud Gateway"
//
// Cloud Gateways
type DomainViewCloudGateways struct {
	// Cloud Gateway
	//
	// x-displayName: "Cloud Gateways"
	//
	// Cloud Gateways
	CloudGateways []*views.ObjectRefType `protobuf:"bytes,1,rep,name=cloud_gateways,json=cloudGateways,proto3" json:"cloud_gateways,omitempty"`
}

func (m *DomainViewCloudGateways) Reset()      { *m = DomainViewCloudGateways{} }
func (*DomainViewCloudGateways) ProtoMessage() {}
func (*DomainViewCloudGateways) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{8}
}
func (m *DomainViewCloudGateways) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewCloudGateways) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewCloudGateways.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewCloudGateways) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewCloudGateways.Merge(m, src)
}
func (m *DomainViewCloudGateways) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewCloudGateways) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewCloudGateways.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewCloudGateways proto.InternalMessageInfo

func (m *DomainViewCloudGateways) GetCloudGateways() []*views.ObjectRefType {
	if m != nil {
		return m.CloudGateways
	}
	return nil
}

// BIG-IP Next CE
//
// x-displayName: "BIG-IP Next CE"
// Selected BIG-IP Next CE.
type DomainViewSites struct {
	// BIG-IP Next CE
	//
	// x-displayName: "BIG-IP Next CE "
	// Selected BIG-IP Next CE
	UztnaGateway []*views.ObjectRefType `protobuf:"bytes,1,rep,name=uztna_gateway,json=uztnaGateway,proto3" json:"uztna_gateway,omitempty"`
}

func (m *DomainViewSites) Reset()      { *m = DomainViewSites{} }
func (*DomainViewSites) ProtoMessage() {}
func (*DomainViewSites) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{9}
}
func (m *DomainViewSites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewSites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewSites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewSites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewSites.Merge(m, src)
}
func (m *DomainViewSites) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewSites) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewSites.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewSites proto.InternalMessageInfo

func (m *DomainViewSites) GetUztnaGateway() []*views.ObjectRefType {
	if m != nil {
		return m.UztnaGateway
	}
	return nil
}

// CloudGatewayAdvertisement
//
// x-displayName: "Cloud Gateway Advertisement"
//
// Gateways for Advertisement
type DVCloudGatewayAdvertisement struct {
	// Cloud Gateway Advertisement
	//
	// x-displayName: "Cloud Gateway Advertising"
	//
	// Cloud gateways, hosted within the F5 Distributed Cloud, are typically accessed by
	// mobile users who are not connected to their office or corporate network. For example,
	// users accessing the ZTNA platform from a public place over the public internet.
	//
	// Types that are valid to be assigned to CloudGatewayChoice:
	//	*DVCloudGatewayAdvertisement_AllCloud
	//	*DVCloudGatewayAdvertisement_ReSites
	CloudGatewayChoice isDVCloudGatewayAdvertisement_CloudGatewayChoice `protobuf_oneof:"cloud_gateway_choice"`
}

func (m *DVCloudGatewayAdvertisement) Reset()      { *m = DVCloudGatewayAdvertisement{} }
func (*DVCloudGatewayAdvertisement) ProtoMessage() {}
func (*DVCloudGatewayAdvertisement) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{10}
}
func (m *DVCloudGatewayAdvertisement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVCloudGatewayAdvertisement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVCloudGatewayAdvertisement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVCloudGatewayAdvertisement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVCloudGatewayAdvertisement.Merge(m, src)
}
func (m *DVCloudGatewayAdvertisement) XXX_Size() int {
	return m.Size()
}
func (m *DVCloudGatewayAdvertisement) XXX_DiscardUnknown() {
	xxx_messageInfo_DVCloudGatewayAdvertisement.DiscardUnknown(m)
}

var xxx_messageInfo_DVCloudGatewayAdvertisement proto.InternalMessageInfo

type isDVCloudGatewayAdvertisement_CloudGatewayChoice interface {
	isDVCloudGatewayAdvertisement_CloudGatewayChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DVCloudGatewayAdvertisement_AllCloud struct {
	AllCloud *schema.Empty `protobuf:"bytes,1,opt,name=all_cloud,json=allCloud,proto3,oneof" json:"all_cloud,omitempty"`
}
type DVCloudGatewayAdvertisement_ReSites struct {
	ReSites *DomainViewCloudGateways `protobuf:"bytes,2,opt,name=re_sites,json=reSites,proto3,oneof" json:"re_sites,omitempty"`
}

func (*DVCloudGatewayAdvertisement_AllCloud) isDVCloudGatewayAdvertisement_CloudGatewayChoice() {}
func (*DVCloudGatewayAdvertisement_ReSites) isDVCloudGatewayAdvertisement_CloudGatewayChoice()  {}

func (m *DVCloudGatewayAdvertisement) GetCloudGatewayChoice() isDVCloudGatewayAdvertisement_CloudGatewayChoice {
	if m != nil {
		return m.CloudGatewayChoice
	}
	return nil
}

func (m *DVCloudGatewayAdvertisement) GetAllCloud() *schema.Empty {
	if x, ok := m.GetCloudGatewayChoice().(*DVCloudGatewayAdvertisement_AllCloud); ok {
		return x.AllCloud
	}
	return nil
}

func (m *DVCloudGatewayAdvertisement) GetReSites() *DomainViewCloudGateways {
	if x, ok := m.GetCloudGatewayChoice().(*DVCloudGatewayAdvertisement_ReSites); ok {
		return x.ReSites
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DVCloudGatewayAdvertisement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DVCloudGatewayAdvertisement_AllCloud)(nil),
		(*DVCloudGatewayAdvertisement_ReSites)(nil),
	}
}

// Private Gateways
//
// x-displayName: "Private Gateways"
// Private gateways are gateways hosted within the customer's data centers and are typically accessed by users connected to their office or corporate network.
type DomainViewPrivateGateways struct {
	// Private Gateway
	//
	// x-displayName: "Private Gateway"
	// x-example: "system/alon-ge"
	UztnaGateway []*views.ObjectRefType `protobuf:"bytes,1,rep,name=uztna_gateway,json=uztnaGateway,proto3" json:"uztna_gateway,omitempty"`
}

func (m *DomainViewPrivateGateways) Reset()      { *m = DomainViewPrivateGateways{} }
func (*DomainViewPrivateGateways) ProtoMessage() {}
func (*DomainViewPrivateGateways) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{11}
}
func (m *DomainViewPrivateGateways) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewPrivateGateways) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewPrivateGateways.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewPrivateGateways) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewPrivateGateways.Merge(m, src)
}
func (m *DomainViewPrivateGateways) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewPrivateGateways) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewPrivateGateways.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewPrivateGateways proto.InternalMessageInfo

func (m *DomainViewPrivateGateways) GetUztnaGateway() []*views.ObjectRefType {
	if m != nil {
		return m.UztnaGateway
	}
	return nil
}

// Gateways
//
// x-displayName: "Gateways"
//
// Access FQDNs resolve to IP addresses on F5 Distributed Cloud or BIG-IP devices in customers' data centers. These devices, known as Gateways, establish secure connections with end users. This section allows users to specify Gateways for this ZeroTrust Domain.
// client for the terminated tunnel
type DomainViewGateways struct {
	// PerimeterREAdvertisement
	//
	// x-displayName: "Cloud Gateways"
	//
	// Cloud Gateways and Big-IP Edge Gateways
	PerimeterRe *DVCloudGatewayAdvertisement `protobuf:"bytes,1,opt,name=perimeter_re,json=perimeterRe,proto3" json:"perimeter_re,omitempty"`
	// Private Gateways
	//
	// x-displayName: "Private Gateways"
	// Private gateways are gateways hosted within the customer's data centers and are typically accessed by users connected to their office or corporate network.
	PrivateGateway *DomainViewPrivateGateways `protobuf:"bytes,4,opt,name=private_gateway,json=privateGateway,proto3" json:"private_gateway,omitempty"`
}

func (m *DomainViewGateways) Reset()      { *m = DomainViewGateways{} }
func (*DomainViewGateways) ProtoMessage() {}
func (*DomainViewGateways) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{12}
}
func (m *DomainViewGateways) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainViewGateways) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainViewGateways.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainViewGateways) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainViewGateways.Merge(m, src)
}
func (m *DomainViewGateways) XXX_Size() int {
	return m.Size()
}
func (m *DomainViewGateways) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainViewGateways.DiscardUnknown(m)
}

var xxx_messageInfo_DomainViewGateways proto.InternalMessageInfo

func (m *DomainViewGateways) GetPerimeterRe() *DVCloudGatewayAdvertisement {
	if m != nil {
		return m.PerimeterRe
	}
	return nil
}

func (m *DomainViewGateways) GetPrivateGateway() *DomainViewPrivateGateways {
	if m != nil {
		return m.PrivateGateway
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
//
// Shape of the UZTNA ZeroTrust Domain
type GlobalSpecType struct {
	// Access URL
	//
	// x-displayName: "Access FQDN"
	// x-required
	// The FQDN that users will configure on their Access Clients
	// to connect to the ZTNA service.
	// This URL would resolve to the Cloud or the Private Gateway
	AccessUrl string `protobuf:"bytes,1,opt,name=access_url,json=accessUrl,proto3" json:"access_url,omitempty"`
	// Certificate
	//
	// x-displayName: "TLS Certificate"
	// x-required
	// Select the certificate to be used for mTLS negotiation between clients
	// and the server on Cloud and Private gateways
	Cert *DomainViewCertificate `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// Gateways
	//
	// x-displayName: "Gateways"
	// x-required
	// List of all RE prime and Big Ip edge CE
	Gateways *DomainViewGateways `protobuf:"bytes,3,opt,name=gateways,proto3" json:"gateways,omitempty"`
	// Lease Pool
	//
	// x-displayName: "Lease Pools"
	// After a successful evaluation of the Access Policy,the
	// end-user device is assigned private IP addressess. All
	// application requests from this device will have this IP
	// as their source. The admin can set up a subnet or IP address
	// range using the leasepool for this assignment
	LeasePool *DomainViewLeasePoolList `protobuf:"bytes,4,opt,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,6,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// Selected VIP Pools
	//
	// x-displayName: "Application VIP Pools"
	// Applications Onboarded to the ZTNA platform are assigned an IP
	// address from this Pool as internal Virtual Server.
	// Configure this option only if the default range is unacceptable.
	AppVipPool *DomainViewAppVIPPool `protobuf:"bytes,7,opt,name=app_vip_pool,json=appVipPool,proto3" json:"app_vip_pool,omitempty"`
	// Profile Name
	//
	// x-displayName: "ZTNA Profile"
	//
	// The name of the ZTNA profile
	Policy *DomainViewPolicy `protobuf:"bytes,8,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{13}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetAccessUrl() string {
	if m != nil {
		return m.AccessUrl
	}
	return ""
}

func (m *GlobalSpecType) GetCert() *DomainViewCertificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *GlobalSpecType) GetGateways() *DomainViewGateways {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *GlobalSpecType) GetLeasePool() *DomainViewLeasePoolList {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetAppVipPool() *DomainViewAppVIPPool {
	if m != nil {
		return m.AppVipPool
	}
	return nil
}

func (m *GlobalSpecType) GetPolicy() *DomainViewPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Specification"
// Shape of the UZTNA ZeroTrust Domain
type CreateSpecType struct {
	AccessUrl  string                   `protobuf:"bytes,1,opt,name=access_url,json=accessUrl,proto3" json:"access_url,omitempty"`
	Cert       *DomainViewCertificate   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Gateways   *DomainViewGateways      `protobuf:"bytes,3,opt,name=gateways,proto3" json:"gateways,omitempty"`
	LeasePool  *DomainViewLeasePoolList `protobuf:"bytes,4,opt,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
	AppVipPool *DomainViewAppVIPPool    `protobuf:"bytes,7,opt,name=app_vip_pool,json=appVipPool,proto3" json:"app_vip_pool,omitempty"`
	Policy     *DomainViewPolicy        `protobuf:"bytes,8,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{14}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetAccessUrl() string {
	if m != nil {
		return m.AccessUrl
	}
	return ""
}

func (m *CreateSpecType) GetCert() *DomainViewCertificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CreateSpecType) GetGateways() *DomainViewGateways {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *CreateSpecType) GetLeasePool() *DomainViewLeasePoolList {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

func (m *CreateSpecType) GetAppVipPool() *DomainViewAppVIPPool {
	if m != nil {
		return m.AppVipPool
	}
	return nil
}

func (m *CreateSpecType) GetPolicy() *DomainViewPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace Specification"
// Shape of the UZTNA ZeroTrust Domain
type ReplaceSpecType struct {
	AccessUrl string                   `protobuf:"bytes,1,opt,name=access_url,json=accessUrl,proto3" json:"access_url,omitempty"`
	Cert      *DomainViewCertificate   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Gateways  *DomainViewGateways      `protobuf:"bytes,3,opt,name=gateways,proto3" json:"gateways,omitempty"`
	LeasePool *DomainViewLeasePoolList `protobuf:"bytes,4,opt,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
	Policy    *DomainViewPolicy        `protobuf:"bytes,8,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{15}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetAccessUrl() string {
	if m != nil {
		return m.AccessUrl
	}
	return ""
}

func (m *ReplaceSpecType) GetCert() *DomainViewCertificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *ReplaceSpecType) GetGateways() *DomainViewGateways {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *ReplaceSpecType) GetLeasePool() *DomainViewLeasePoolList {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicy() *DomainViewPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get Specification"
// Shape of the UZTNA ZeroTrust Domain
type GetSpecType struct {
	AccessUrl  string                   `protobuf:"bytes,1,opt,name=access_url,json=accessUrl,proto3" json:"access_url,omitempty"`
	Cert       *DomainViewCertificate   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Gateways   *DomainViewGateways      `protobuf:"bytes,3,opt,name=gateways,proto3" json:"gateways,omitempty"`
	LeasePool  *DomainViewLeasePoolList `protobuf:"bytes,4,opt,name=lease_pool,json=leasePool,proto3" json:"lease_pool,omitempty"`
	AppVipPool *DomainViewAppVIPPool    `protobuf:"bytes,7,opt,name=app_vip_pool,json=appVipPool,proto3" json:"app_vip_pool,omitempty"`
	Policy     *DomainViewPolicy        `protobuf:"bytes,8,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0504c1c76ca1eb7, []int{16}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetAccessUrl() string {
	if m != nil {
		return m.AccessUrl
	}
	return ""
}

func (m *GetSpecType) GetCert() *DomainViewCertificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *GetSpecType) GetGateways() *DomainViewGateways {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *GetSpecType) GetLeasePool() *DomainViewLeasePoolList {
	if m != nil {
		return m.LeasePool
	}
	return nil
}

func (m *GetSpecType) GetAppVipPool() *DomainViewAppVIPPool {
	if m != nil {
		return m.AppVipPool
	}
	return nil
}

func (m *GetSpecType) GetPolicy() *DomainViewPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func init() {
	proto.RegisterType((*DomainViewCertificate)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewCertificate")
	proto.RegisterType((*DomainViewPolicy)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewPolicy")
	proto.RegisterType((*DomainViewDualStackAppVipPool)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewDualStackAppVipPool")
	proto.RegisterType((*DomainViewAppVIPPool)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewAppVIPPool")
	proto.RegisterType((*DomainViewDualStackLeasePool)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewDualStackLeasePool")
	proto.RegisterType((*IPv4LeasePool)(nil), "ves.io.schema.uztna.views.uztna_domain_view.IPv4LeasePool")
	proto.RegisterType((*IPv6LeasePool)(nil), "ves.io.schema.uztna.views.uztna_domain_view.IPv6LeasePool")
	proto.RegisterType((*DomainViewLeasePoolList)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewLeasePoolList")
	proto.RegisterType((*DomainViewCloudGateways)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewCloudGateways")
	proto.RegisterType((*DomainViewSites)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewSites")
	proto.RegisterType((*DVCloudGatewayAdvertisement)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DVCloudGatewayAdvertisement")
	proto.RegisterType((*DomainViewPrivateGateways)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewPrivateGateways")
	proto.RegisterType((*DomainViewGateways)(nil), "ves.io.schema.uztna.views.uztna_domain_view.DomainViewGateways")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.uztna.views.uztna_domain_view.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.uztna.views.uztna_domain_view.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.uztna.views.uztna_domain_view.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.uztna.views.uztna_domain_view.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/uztna/views/uztna_domain_view/types.proto", fileDescriptor_f0504c1c76ca1eb7)
}

var fileDescriptor_f0504c1c76ca1eb7 = []byte{
	// 1378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xd8, 0x1b, 0xc7, 0x79, 0x89, 0x1d, 0x67, 0xbe, 0xfd, 0x91, 0xfe, 0xda, 0xfa, 0xeb,
	0x22, 0x84, 0x20, 0xb5, 0x51, 0x53, 0x5c, 0xa9, 0x12, 0xa0, 0x38, 0xa1, 0x4d, 0xac, 0xaa, 0x44,
	0xdb, 0x36, 0x52, 0x4b, 0xd1, 0x32, 0x59, 0x4f, 0xd2, 0x69, 0xd7, 0xde, 0x65, 0x77, 0xe3, 0x34,
	0x48, 0x96, 0x82, 0x84, 0xe0, 0xd2, 0x03, 0xea, 0x85, 0x03, 0x12, 0x42, 0x9c, 0x50, 0xc4, 0x5f,
	0x50, 0x17, 0x29, 0x42, 0x42, 0x42, 0x15, 0x87, 0x1c, 0x7b, 0xe0, 0xd0, 0xba, 0x97, 0x22, 0x2e,
	0x3d, 0x72, 0x44, 0x3b, 0x3b, 0xd9, 0x1f, 0x76, 0x82, 0x12, 0x27, 0xf4, 0xd4, 0xdb, 0xce, 0xce,
	0xcc, 0xfb, 0xbc, 0xcf, 0x7b, 0x9f, 0xf7, 0x66, 0x76, 0xe1, 0x5c, 0x83, 0xda, 0x05, 0x66, 0x14,
	0x6d, 0xed, 0x16, 0xad, 0x91, 0xe2, 0xd2, 0x67, 0x4e, 0x9d, 0x14, 0x1b, 0x8c, 0x2e, 0xdb, 0xde,
	0xb3, 0x5a, 0x35, 0x6a, 0x84, 0xd5, 0x55, 0xf7, 0x55, 0xd1, 0x59, 0x31, 0xa9, 0x5d, 0x30, 0x2d,
	0xc3, 0x31, 0xf0, 0x5b, 0xde, 0xc6, 0x82, 0xb7, 0xb1, 0xc0, 0x17, 0x17, 0xf8, 0xc6, 0x42, 0xd7,
	0xc6, 0xa3, 0xc7, 0xa2, 0x28, 0x86, 0xe9, 0x30, 0xa3, 0x2e, 0x2c, 0x1d, 0x3d, 0x12, 0x9d, 0x0c,
	0x81, 0x1c, 0x1d, 0xdb, 0xca, 0xbb, 0xb0, 0xf9, 0xc8, 0xea, 0xe3, 0xd1, 0xd5, 0x0d, 0xa2, 0xb3,
	0x2a, 0x71, 0xa8, 0x98, 0xcd, 0x75, 0xcc, 0x32, 0xba, 0xac, 0x46, 0x1d, 0x39, 0xd9, 0xbd, 0xc2,
	0x0e, 0x03, 0xe4, 0x6b, 0x70, 0x70, 0x8a, 0xc3, 0xce, 0x31, 0xba, 0x3c, 0x49, 0x2d, 0x87, 0x2d,
	0x30, 0x8d, 0x38, 0x14, 0x5f, 0x85, 0x41, 0x2d, 0x18, 0x8e, 0xc6, 0x73, 0xe8, 0x8d, 0xc1, 0x33,
	0xf9, 0x42, 0x34, 0x44, 0x5e, 0x70, 0x3e, 0x9c, 0xbf, 0x4d, 0x35, 0x47, 0xa1, 0x0b, 0x57, 0x57,
	0x4c, 0x5a, 0xce, 0xac, 0x35, 0xc3, 0x3b, 0x95, 0xf0, 0x20, 0x7f, 0x0f, 0x41, 0x36, 0xc0, 0x9b,
	0x35, 0x74, 0xa6, 0xad, 0xe0, 0xbb, 0x30, 0x68, 0xf2, 0x27, 0xb5, 0x4e, 0x6a, 0x74, 0x14, 0xed,
	0x18, 0x6a, 0x7c, 0xad, 0x79, 0xd0, 0x0b, 0x9d, 0xd8, 0xef, 0xd0, 0x9a, 0xa9, 0x13, 0x87, 0xfe,
	0xf0, 0x33, 0x3a, 0xcc, 0x27, 0x3c, 0x84, 0xcb, 0x86, 0x70, 0x80, 0x19, 0x75, 0x05, 0xbc, 0xb5,
	0x97, 0x49, 0x8d, 0xe6, 0xff, 0x42, 0x70, 0x22, 0x70, 0x67, 0x6a, 0x89, 0xe8, 0x57, 0x1c, 0xa2,
	0xdd, 0x99, 0x30, 0xcd, 0x39, 0x66, 0xce, 0x1a, 0x86, 0x8e, 0xab, 0x30, 0xc2, 0xcc, 0xc6, 0x59,
	0x95, 0x98, 0xa6, 0xda, 0x60, 0xa6, 0x6a, 0x1a, 0x86, 0xbe, 0x0b, 0x0f, 0x0f, 0xae, 0x35, 0xb1,
	0xe7, 0x61, 0xd8, 0x80, 0x92, 0x71, 0x6d, 0x76, 0xa1, 0x94, 0xa2, 0x28, 0xf1, 0xfd, 0x40, 0x29,
	0x05, 0x28, 0xf9, 0x9f, 0x12, 0x70, 0x20, 0x60, 0xeb, 0x4e, 0xcc, 0xcc, 0x72, 0xf8, 0x85, 0xad,
	0x48, 0x26, 0xf7, 0x08, 0x3f, 0x1d, 0xeb, 0xa2, 0x79, 0x7b, 0x2b, 0x9a, 0xfd, 0x3b, 0xc6, 0x39,
	0xb2, 0x25, 0xce, 0xf3, 0x16, 0x42, 0x02, 0x2b, 0x44, 0x16, 0x7f, 0x89, 0xe0, 0x10, 0x27, 0xd5,
	0x8d, 0xd8, 0xc7, 0x11, 0x2b, 0x85, 0x5d, 0x94, 0x7b, 0xe1, 0x5f, 0x55, 0x52, 0x96, 0x84, 0x13,
	0xd8, 0x45, 0x9c, 0x89, 0x38, 0x52, 0x3e, 0x09, 0x19, 0x66, 0x92, 0x6a, 0xd5, 0xa2, 0xb6, 0xad,
	0xba, 0xa5, 0x87, 0xd3, 0x1b, 0x2d, 0x14, 0x6f, 0xb7, 0x50, 0x5f, 0x69, 0xec, 0xdc, 0xd8, 0x3b,
	0x15, 0x29, 0x85, 0xb2, 0xf1, 0x8a, 0x94, 0x8a, 0x67, 0x13, 0x15, 0x29, 0x95, 0xc8, 0x4a, 0x15,
	0x29, 0x25, 0x65, 0xfb, 0xf2, 0x7f, 0x20, 0x38, 0xbe, 0x05, 0xec, 0x25, 0x4a, 0x6c, 0xca, 0x29,
	0x7e, 0x0c, 0x3c, 0xc0, 0xaa, 0xee, 0xbe, 0xd9, 0xa5, 0x64, 0xf0, 0x5a, 0x73, 0xd8, 0x63, 0xe9,
	0xef, 0x56, 0xd2, 0xae, 0xb5, 0x4b, 0x9b, 0x43, 0x61, 0xbe, 0x14, 0x32, 0x9f, 0xd8, 0xb3, 0xf9,
	0x92, 0x6f, 0x3e, 0x5f, 0x87, 0xf4, 0xcc, 0xac, 0xc0, 0xdb, 0x86, 0x0e, 0xda, 0x47, 0x3a, 0x02,
	0xaf, 0xd4, 0x89, 0x57, 0xda, 0x57, 0xbc, 0x10, 0xbf, 0xef, 0x13, 0x70, 0x38, 0x48, 0x9f, 0x0f,
	0x7b, 0x89, 0xd9, 0x0e, 0x56, 0xbb, 0xa8, 0xee, 0x29, 0xb4, 0xd3, 0xb1, 0xce, 0xdc, 0x69, 0x5d,
	0xdc, 0xa4, 0x1d, 0x03, 0x1c, 0xea, 0x06, 0x10, 0xf2, 0x8e, 0x32, 0xc4, 0x9f, 0x23, 0xf8, 0x5f,
	0x50, 0x62, 0x01, 0x94, 0x57, 0x5f, 0x33, 0x7b, 0xad, 0x2f, 0x3f, 0x64, 0x7e, 0x79, 0x8d, 0x6c,
	0x96, 0x97, 0xef, 0x43, 0xf9, 0x54, 0x57, 0x75, 0x8d, 0xac, 0xb7, 0x50, 0x62, 0xb3, 0xc2, 0xc6,
	0xc7, 0xce, 0xf2, 0x0a, 0xf3, 0x6a, 0xcb, 0xab, 0xb3, 0x64, 0xb6, 0xbf, 0x22, 0xa5, 0xfa, 0xb3,
	0xa9, 0xfc, 0x57, 0x28, 0x9c, 0xa2, 0x49, 0xdd, 0x58, 0xaa, 0x5e, 0x24, 0x0e, 0x5d, 0x26, 0x2b,
	0x36, 0xd6, 0x21, 0xa3, 0xb9, 0x2f, 0xd4, 0x45, 0xf1, 0x66, 0x14, 0xe5, 0x12, 0x3b, 0x8c, 0xe0,
	0xff, 0xd7, 0x9a, 0x92, 0xcd, 0x1c, 0xba, 0xfa, 0x10, 0xa1, 0x07, 0x7f, 0xae, 0x27, 0x92, 0xf7,
	0x51, 0x22, 0xbb, 0x9a, 0x6b, 0x3f, 0xf9, 0x35, 0x91, 0xbc, 0xff, 0x10, 0xc5, 0xb3, 0x31, 0x25,
	0xad, 0x85, 0xd1, 0xf2, 0x3a, 0x0c, 0x07, 0x8e, 0x5c, 0x61, 0x0e, 0xb5, 0xf1, 0x75, 0x48, 0x7b,
	0x61, 0x12, 0x0e, 0xec, 0x02, 0x3f, 0xbb, 0xd6, 0x8c, 0xee, 0x55, 0x86, 0xf8, 0x50, 0xc0, 0xe5,
	0x7f, 0x8f, 0xc3, 0xb1, 0xa9, 0xb9, 0x30, 0xdf, 0x89, 0x6a, 0xc3, 0x3d, 0xa5, 0x6d, 0x5a, 0xa3,
	0x75, 0x07, 0x8f, 0xc3, 0x00, 0xd1, 0x75, 0x95, 0xbb, 0x28, 0x8a, 0xe2, 0x40, 0x07, 0xec, 0x07,
	0x35, 0xd3, 0x59, 0x99, 0x8e, 0x29, 0x29, 0xa2, 0xeb, 0xdc, 0x10, 0xbe, 0x0d, 0x29, 0x8b, 0xaa,
	0x2e, 0x6d, 0x5b, 0xf4, 0xa1, 0xa9, 0x1e, 0x15, 0x10, 0x49, 0x44, 0xb9, 0xff, 0x71, 0x13, 0x89,
	0xfc, 0xf7, 0x5b, 0x94, 0xc7, 0xe6, 0xfc, 0x27, 0x8f, 0x5a, 0xe8, 0x26, 0xdc, 0x80, 0x0c, 0x5f,
	0x9a, 0xdb, 0x5c, 0xfb, 0xe6, 0x34, 0x5c, 0x80, 0x93, 0x21, 0xe7, 0xcf, 0xe0, 0x09, 0x5d, 0xcf,
	0x45, 0x17, 0xc1, 0xa9, 0xc0, 0xd1, 0x33, 0xdb, 0xa5, 0xbf, 0xfc, 0x1a, 0x1c, 0x88, 0xa4, 0x5f,
	0xd5, 0x6e, 0x19, 0x4c, 0xa3, 0x78, 0x68, 0xbd, 0x85, 0xd0, 0x46, 0x0b, 0x49, 0x7f, 0xb7, 0x50,
	0x5c, 0x34, 0xea, 0x7b, 0x08, 0x8e, 0x84, 0x2e, 0x35, 0x16, 0x6b, 0x10, 0x87, 0xfa, 0x42, 0x32,
	0x7a, 0xcf, 0xe3, 0xeb, 0x9d, 0x79, 0xdc, 0x46, 0x4c, 0xd1, 0xec, 0x7e, 0x11, 0x07, 0x1c, 0xb8,
	0xe3, 0xfb, 0xf1, 0x29, 0x0c, 0x99, 0xd4, 0x62, 0x35, 0xea, 0x50, 0x4b, 0xb5, 0x36, 0xaf, 0x59,
	0xd3, 0xbb, 0xcb, 0xd1, 0xf6, 0xa2, 0x29, 0x4b, 0x2f, 0x5a, 0x08, 0x29, 0x83, 0x3e, 0x86, 0x42,
	0xb1, 0x01, 0xc3, 0xa6, 0x17, 0x0d, 0x9f, 0xbc, 0xd7, 0x86, 0x2e, 0xf4, 0xa8, 0x8c, 0x8e, 0xd8,
	0x2a, 0x19, 0x33, 0xf2, 0x22, 0x7c, 0x88, 0xe6, 0x1f, 0xf4, 0x41, 0xe6, 0xa2, 0x6e, 0xcc, 0x13,
	0xfd, 0x8a, 0x49, 0x35, 0x37, 0x9e, 0xf8, 0x34, 0x00, 0xd1, 0x34, 0xb7, 0x53, 0x2c, 0x59, 0x5e,
	0xb7, 0x1f, 0x28, 0x67, 0xdc, 0x98, 0x0e, 0x58, 0xfd, 0x59, 0x34, 0xba, 0x1a, 0xbf, 0x85, 0x94,
	0x01, 0x6f, 0xc5, 0x35, 0x4b, 0xc7, 0x37, 0x41, 0x72, 0xef, 0xae, 0x42, 0xcd, 0xe5, 0x5e, 0xd5,
	0x1c, 0x5c, 0x7f, 0xcb, 0xd2, 0x86, 0x1b, 0x23, 0x6e, 0x15, 0x13, 0x48, 0xf9, 0xad, 0xc5, 0xeb,
	0xfe, 0xef, 0xf7, 0x88, 0xe0, 0x8b, 0xd6, 0x4b, 0x81, 0x6f, 0x16, 0x6b, 0x00, 0xbc, 0x2b, 0xab,
	0xa1, 0x13, 0xa0, 0xd7, 0xa2, 0x8c, 0x1c, 0x60, 0xca, 0x80, 0xee, 0x1f, 0xa3, 0xd7, 0x21, 0xcd,
	0x3f, 0x3c, 0x58, 0xdd, 0xa1, 0x56, 0x9d, 0xec, 0xe6, 0xe2, 0xe8, 0xf6, 0xa9, 0xc8, 0x5e, 0x65,
	0xc8, 0x1d, 0xce, 0x88, 0x11, 0x66, 0x30, 0xb4, 0xc5, 0x55, 0x71, 0xa2, 0x47, 0x06, 0xc1, 0x85,
	0xb7, 0x2c, 0xb9, 0x55, 0xac, 0x00, 0x09, 0xae, 0x8b, 0xd7, 0x20, 0xe9, 0x7d, 0x17, 0x8c, 0xa6,
	0x38, 0xc8, 0xbb, 0xbd, 0x2a, 0x94, 0x1b, 0x51, 0x84, 0xb1, 0xf3, 0x6f, 0xff, 0xd2, 0x42, 0x63,
	0x90, 0x86, 0x94, 0x5f, 0x86, 0x68, 0x1c, 0x8e, 0xc1, 0xa1, 0x89, 0x6a, 0x83, 0xd4, 0x35, 0x5a,
	0xcd, 0x4d, 0x1a, 0xf5, 0x05, 0xb6, 0xb8, 0x64, 0xf1, 0x6f, 0x13, 0x8c, 0xce, 0x55, 0xa4, 0x54,
	0x5f, 0x36, 0x99, 0xff, 0x4e, 0x82, 0xcc, 0xa4, 0x45, 0x89, 0x43, 0x7d, 0xf1, 0x9e, 0xe8, 0x16,
	0x6f, 0x58, 0xac, 0x73, 0xfb, 0x2d, 0x56, 0x21, 0xd3, 0x8f, 0xf6, 0x5d, 0xa6, 0x2f, 0x5b, 0xa0,
	0xda, 0x7f, 0xa4, 0xa2, 0x97, 0xa1, 0x9f, 0x91, 0x47, 0xef, 0x75, 0x34, 0x31, 0x21, 0x90, 0xf5,
	0x04, 0x0c, 0x2b, 0xd4, 0xd4, 0x89, 0xf6, 0x4a, 0x21, 0x7b, 0x56, 0xc8, 0x4b, 0x4e, 0x9e, 0xb8,
	0x7d, 0x7e, 0x2b, 0xc1, 0xe0, 0x45, 0xea, 0xbc, 0x4a, 0xdf, 0xab, 0x02, 0xef, 0xd6, 0x48, 0xf9,
	0x1b, 0xb4, 0xf1, 0x54, 0x8e, 0x3d, 0x7e, 0x2a, 0xc7, 0x5e, 0x3c, 0x95, 0xd1, 0x6a, 0x5b, 0x46,
	0x3f, 0xb6, 0x65, 0xf4, 0x5b, 0x5b, 0x46, 0x1b, 0x6d, 0x19, 0x3d, 0x69, 0xcb, 0xe8, 0x79, 0x5b,
	0x8e, 0xbd, 0x68, 0xcb, 0xe8, 0xeb, 0x67, 0x72, 0x6c, 0xe3, 0x99, 0x1c, 0x7b, 0xfc, 0x4c, 0x8e,
	0xdd, 0x20, 0x8b, 0x86, 0x79, 0x67, 0xb1, 0xd0, 0x30, 0x74, 0x87, 0x5a, 0x16, 0x29, 0x2c, 0xd9,
	0x45, 0xfe, 0xb0, 0x60, 0x58, 0xb5, 0xd3, 0xa6, 0x65, 0x34, 0x58, 0x95, 0x5a, 0xa7, 0x37, 0xa7,
	0x8b, 0xe6, 0xfc, 0xa2, 0x51, 0xa4, 0x77, 0x1d, 0xf1, 0x7f, 0x70, 0x27, 0xbf, 0x4c, 0xe7, 0x93,
	0xfc, 0xcf, 0xe1, 0xf8, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x63, 0x40, 0x81, 0xd5, 0x68, 0x15,
	0x00, 0x00,
}

func (this *DomainViewCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewCertificate)
	if !ok {
		that2, ok := that.(DomainViewCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Certificate.Equal(that1.Certificate) {
		return false
	}
	return true
}
func (this *DomainViewPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewPolicy)
	if !ok {
		that2, ok := that.(DomainViewPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyName.Equal(that1.PolicyName) {
		return false
	}
	return true
}
func (this *DomainViewDualStackAppVipPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewDualStackAppVipPool)
	if !ok {
		that2, ok := that.(DomainViewDualStackAppVipPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4AppVipPool.Equal(that1.Ipv4AppVipPool) {
		return false
	}
	if !this.Ipv6AppVipPool.Equal(that1.Ipv6AppVipPool) {
		return false
	}
	return true
}
func (this *DomainViewAppVIPPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewAppVIPPool)
	if !ok {
		that2, ok := that.(DomainViewAppVIPPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpaddressType == nil {
		if this.IpaddressType != nil {
			return false
		}
	} else if this.IpaddressType == nil {
		return false
	} else if !this.IpaddressType.Equal(that1.IpaddressType) {
		return false
	}
	return true
}
func (this *DomainViewAppVIPPool_Ipv4AppVipPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewAppVIPPool_Ipv4AppVipPool)
	if !ok {
		that2, ok := that.(DomainViewAppVIPPool_Ipv4AppVipPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4AppVipPool.Equal(that1.Ipv4AppVipPool) {
		return false
	}
	return true
}
func (this *DomainViewAppVIPPool_Ipv6AppVipPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewAppVIPPool_Ipv6AppVipPool)
	if !ok {
		that2, ok := that.(DomainViewAppVIPPool_Ipv6AppVipPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv6AppVipPool.Equal(that1.Ipv6AppVipPool) {
		return false
	}
	return true
}
func (this *DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewAppVIPPool_Ipv4Ipv6AppVipPool)
	if !ok {
		that2, ok := that.(DomainViewAppVIPPool_Ipv4Ipv6AppVipPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4Ipv6AppVipPool.Equal(that1.Ipv4Ipv6AppVipPool) {
		return false
	}
	return true
}
func (this *DomainViewDualStackLeasePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewDualStackLeasePool)
	if !ok {
		that2, ok := that.(DomainViewDualStackLeasePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4Leasepool.Equal(that1.Ipv4Leasepool) {
		return false
	}
	if !this.Ipv6Leasepool.Equal(that1.Ipv6Leasepool) {
		return false
	}
	return true
}
func (this *IPv4LeasePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPv4LeasePool)
	if !ok {
		that2, ok := that.(IPv4LeasePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4Leasepool.Equal(that1.Ipv4Leasepool) {
		return false
	}
	return true
}
func (this *IPv6LeasePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPv6LeasePool)
	if !ok {
		that2, ok := that.(IPv6LeasePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv6Leasepool.Equal(that1.Ipv6Leasepool) {
		return false
	}
	return true
}
func (this *DomainViewLeasePoolList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewLeasePoolList)
	if !ok {
		that2, ok := that.(DomainViewLeasePoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpaddressType == nil {
		if this.IpaddressType != nil {
			return false
		}
	} else if this.IpaddressType == nil {
		return false
	} else if !this.IpaddressType.Equal(that1.IpaddressType) {
		return false
	}
	return true
}
func (this *DomainViewLeasePoolList_Ipv4Leasepool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewLeasePoolList_Ipv4Leasepool)
	if !ok {
		that2, ok := that.(DomainViewLeasePoolList_Ipv4Leasepool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4Leasepool.Equal(that1.Ipv4Leasepool) {
		return false
	}
	return true
}
func (this *DomainViewLeasePoolList_Ipv6Leasepool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewLeasePoolList_Ipv6Leasepool)
	if !ok {
		that2, ok := that.(DomainViewLeasePoolList_Ipv6Leasepool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv6Leasepool.Equal(that1.Ipv6Leasepool) {
		return false
	}
	return true
}
func (this *DomainViewLeasePoolList_Ipv4Ipv6Leasepool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewLeasePoolList_Ipv4Ipv6Leasepool)
	if !ok {
		that2, ok := that.(DomainViewLeasePoolList_Ipv4Ipv6Leasepool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4Ipv6Leasepool.Equal(that1.Ipv4Ipv6Leasepool) {
		return false
	}
	return true
}
func (this *DomainViewCloudGateways) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewCloudGateways)
	if !ok {
		that2, ok := that.(DomainViewCloudGateways)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CloudGateways) != len(that1.CloudGateways) {
		return false
	}
	for i := range this.CloudGateways {
		if !this.CloudGateways[i].Equal(that1.CloudGateways[i]) {
			return false
		}
	}
	return true
}
func (this *DomainViewSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewSites)
	if !ok {
		that2, ok := that.(DomainViewSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UztnaGateway) != len(that1.UztnaGateway) {
		return false
	}
	for i := range this.UztnaGateway {
		if !this.UztnaGateway[i].Equal(that1.UztnaGateway[i]) {
			return false
		}
	}
	return true
}
func (this *DVCloudGatewayAdvertisement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DVCloudGatewayAdvertisement)
	if !ok {
		that2, ok := that.(DVCloudGatewayAdvertisement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudGatewayChoice == nil {
		if this.CloudGatewayChoice != nil {
			return false
		}
	} else if this.CloudGatewayChoice == nil {
		return false
	} else if !this.CloudGatewayChoice.Equal(that1.CloudGatewayChoice) {
		return false
	}
	return true
}
func (this *DVCloudGatewayAdvertisement_AllCloud) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DVCloudGatewayAdvertisement_AllCloud)
	if !ok {
		that2, ok := that.(DVCloudGatewayAdvertisement_AllCloud)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllCloud.Equal(that1.AllCloud) {
		return false
	}
	return true
}
func (this *DVCloudGatewayAdvertisement_ReSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DVCloudGatewayAdvertisement_ReSites)
	if !ok {
		that2, ok := that.(DVCloudGatewayAdvertisement_ReSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReSites.Equal(that1.ReSites) {
		return false
	}
	return true
}
func (this *DomainViewPrivateGateways) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewPrivateGateways)
	if !ok {
		that2, ok := that.(DomainViewPrivateGateways)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UztnaGateway) != len(that1.UztnaGateway) {
		return false
	}
	for i := range this.UztnaGateway {
		if !this.UztnaGateway[i].Equal(that1.UztnaGateway[i]) {
			return false
		}
	}
	return true
}
func (this *DomainViewGateways) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainViewGateways)
	if !ok {
		that2, ok := that.(DomainViewGateways)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PerimeterRe.Equal(that1.PerimeterRe) {
		return false
	}
	if !this.PrivateGateway.Equal(that1.PrivateGateway) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessUrl != that1.AccessUrl {
		return false
	}
	if !this.Cert.Equal(that1.Cert) {
		return false
	}
	if !this.Gateways.Equal(that1.Gateways) {
		return false
	}
	if !this.LeasePool.Equal(that1.LeasePool) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if !this.AppVipPool.Equal(that1.AppVipPool) {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessUrl != that1.AccessUrl {
		return false
	}
	if !this.Cert.Equal(that1.Cert) {
		return false
	}
	if !this.Gateways.Equal(that1.Gateways) {
		return false
	}
	if !this.LeasePool.Equal(that1.LeasePool) {
		return false
	}
	if !this.AppVipPool.Equal(that1.AppVipPool) {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessUrl != that1.AccessUrl {
		return false
	}
	if !this.Cert.Equal(that1.Cert) {
		return false
	}
	if !this.Gateways.Equal(that1.Gateways) {
		return false
	}
	if !this.LeasePool.Equal(that1.LeasePool) {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessUrl != that1.AccessUrl {
		return false
	}
	if !this.Cert.Equal(that1.Cert) {
		return false
	}
	if !this.Gateways.Equal(that1.Gateways) {
		return false
	}
	if !this.LeasePool.Equal(that1.LeasePool) {
		return false
	}
	if !this.AppVipPool.Equal(that1.AppVipPool) {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *DomainViewCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.DomainViewCertificate{")
	if this.Certificate != nil {
		s = append(s, "Certificate: "+fmt.Sprintf("%#v", this.Certificate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.DomainViewPolicy{")
	if this.PolicyName != nil {
		s = append(s, "PolicyName: "+fmt.Sprintf("%#v", this.PolicyName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewDualStackAppVipPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_domain_view.DomainViewDualStackAppVipPool{")
	if this.Ipv4AppVipPool != nil {
		s = append(s, "Ipv4AppVipPool: "+fmt.Sprintf("%#v", this.Ipv4AppVipPool)+",\n")
	}
	if this.Ipv6AppVipPool != nil {
		s = append(s, "Ipv6AppVipPool: "+fmt.Sprintf("%#v", this.Ipv6AppVipPool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewAppVIPPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uztna_domain_view.DomainViewAppVIPPool{")
	if this.IpaddressType != nil {
		s = append(s, "IpaddressType: "+fmt.Sprintf("%#v", this.IpaddressType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewAppVIPPool_Ipv4AppVipPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DomainViewAppVIPPool_Ipv4AppVipPool{` +
		`Ipv4AppVipPool:` + fmt.Sprintf("%#v", this.Ipv4AppVipPool) + `}`}, ", ")
	return s
}
func (this *DomainViewAppVIPPool_Ipv6AppVipPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DomainViewAppVIPPool_Ipv6AppVipPool{` +
		`Ipv6AppVipPool:` + fmt.Sprintf("%#v", this.Ipv6AppVipPool) + `}`}, ", ")
	return s
}
func (this *DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DomainViewAppVIPPool_Ipv4Ipv6AppVipPool{` +
		`Ipv4Ipv6AppVipPool:` + fmt.Sprintf("%#v", this.Ipv4Ipv6AppVipPool) + `}`}, ", ")
	return s
}
func (this *DomainViewDualStackLeasePool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_domain_view.DomainViewDualStackLeasePool{")
	if this.Ipv4Leasepool != nil {
		s = append(s, "Ipv4Leasepool: "+fmt.Sprintf("%#v", this.Ipv4Leasepool)+",\n")
	}
	if this.Ipv6Leasepool != nil {
		s = append(s, "Ipv6Leasepool: "+fmt.Sprintf("%#v", this.Ipv6Leasepool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPv4LeasePool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.IPv4LeasePool{")
	if this.Ipv4Leasepool != nil {
		s = append(s, "Ipv4Leasepool: "+fmt.Sprintf("%#v", this.Ipv4Leasepool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPv6LeasePool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.IPv6LeasePool{")
	if this.Ipv6Leasepool != nil {
		s = append(s, "Ipv6Leasepool: "+fmt.Sprintf("%#v", this.Ipv6Leasepool)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewLeasePoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uztna_domain_view.DomainViewLeasePoolList{")
	if this.IpaddressType != nil {
		s = append(s, "IpaddressType: "+fmt.Sprintf("%#v", this.IpaddressType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewLeasePoolList_Ipv4Leasepool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DomainViewLeasePoolList_Ipv4Leasepool{` +
		`Ipv4Leasepool:` + fmt.Sprintf("%#v", this.Ipv4Leasepool) + `}`}, ", ")
	return s
}
func (this *DomainViewLeasePoolList_Ipv6Leasepool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DomainViewLeasePoolList_Ipv6Leasepool{` +
		`Ipv6Leasepool:` + fmt.Sprintf("%#v", this.Ipv6Leasepool) + `}`}, ", ")
	return s
}
func (this *DomainViewLeasePoolList_Ipv4Ipv6Leasepool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DomainViewLeasePoolList_Ipv4Ipv6Leasepool{` +
		`Ipv4Ipv6Leasepool:` + fmt.Sprintf("%#v", this.Ipv4Ipv6Leasepool) + `}`}, ", ")
	return s
}
func (this *DomainViewCloudGateways) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.DomainViewCloudGateways{")
	if this.CloudGateways != nil {
		s = append(s, "CloudGateways: "+fmt.Sprintf("%#v", this.CloudGateways)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.DomainViewSites{")
	if this.UztnaGateway != nil {
		s = append(s, "UztnaGateway: "+fmt.Sprintf("%#v", this.UztnaGateway)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DVCloudGatewayAdvertisement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_domain_view.DVCloudGatewayAdvertisement{")
	if this.CloudGatewayChoice != nil {
		s = append(s, "CloudGatewayChoice: "+fmt.Sprintf("%#v", this.CloudGatewayChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DVCloudGatewayAdvertisement_AllCloud) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DVCloudGatewayAdvertisement_AllCloud{` +
		`AllCloud:` + fmt.Sprintf("%#v", this.AllCloud) + `}`}, ", ")
	return s
}
func (this *DVCloudGatewayAdvertisement_ReSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&uztna_domain_view.DVCloudGatewayAdvertisement_ReSites{` +
		`ReSites:` + fmt.Sprintf("%#v", this.ReSites) + `}`}, ", ")
	return s
}
func (this *DomainViewPrivateGateways) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uztna_domain_view.DomainViewPrivateGateways{")
	if this.UztnaGateway != nil {
		s = append(s, "UztnaGateway: "+fmt.Sprintf("%#v", this.UztnaGateway)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DomainViewGateways) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uztna_domain_view.DomainViewGateways{")
	if this.PerimeterRe != nil {
		s = append(s, "PerimeterRe: "+fmt.Sprintf("%#v", this.PerimeterRe)+",\n")
	}
	if this.PrivateGateway != nil {
		s = append(s, "PrivateGateway: "+fmt.Sprintf("%#v", this.PrivateGateway)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&uztna_domain_view.GlobalSpecType{")
	s = append(s, "AccessUrl: "+fmt.Sprintf("%#v", this.AccessUrl)+",\n")
	if this.Cert != nil {
		s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	}
	if this.Gateways != nil {
		s = append(s, "Gateways: "+fmt.Sprintf("%#v", this.Gateways)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.AppVipPool != nil {
		s = append(s, "AppVipPool: "+fmt.Sprintf("%#v", this.AppVipPool)+",\n")
	}
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_domain_view.CreateSpecType{")
	s = append(s, "AccessUrl: "+fmt.Sprintf("%#v", this.AccessUrl)+",\n")
	if this.Cert != nil {
		s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	}
	if this.Gateways != nil {
		s = append(s, "Gateways: "+fmt.Sprintf("%#v", this.Gateways)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	if this.AppVipPool != nil {
		s = append(s, "AppVipPool: "+fmt.Sprintf("%#v", this.AppVipPool)+",\n")
	}
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&uztna_domain_view.ReplaceSpecType{")
	s = append(s, "AccessUrl: "+fmt.Sprintf("%#v", this.AccessUrl)+",\n")
	if this.Cert != nil {
		s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	}
	if this.Gateways != nil {
		s = append(s, "Gateways: "+fmt.Sprintf("%#v", this.Gateways)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&uztna_domain_view.GetSpecType{")
	s = append(s, "AccessUrl: "+fmt.Sprintf("%#v", this.AccessUrl)+",\n")
	if this.Cert != nil {
		s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	}
	if this.Gateways != nil {
		s = append(s, "Gateways: "+fmt.Sprintf("%#v", this.Gateways)+",\n")
	}
	if this.LeasePool != nil {
		s = append(s, "LeasePool: "+fmt.Sprintf("%#v", this.LeasePool)+",\n")
	}
	if this.AppVipPool != nil {
		s = append(s, "AppVipPool: "+fmt.Sprintf("%#v", this.AppVipPool)+",\n")
	}
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DomainViewCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Certificate != nil {
		{
			size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyName != nil {
		{
			size, err := m.PolicyName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewDualStackAppVipPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewDualStackAppVipPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewDualStackAppVipPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ipv6AppVipPool != nil {
		{
			size, err := m.Ipv6AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ipv4AppVipPool != nil {
		{
			size, err := m.Ipv4AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewAppVIPPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewAppVIPPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewAppVIPPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpaddressType != nil {
		{
			size := m.IpaddressType.Size()
			i -= size
			if _, err := m.IpaddressType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv4Ipv6AppVipPool != nil {
		{
			size, err := m.Ipv4Ipv6AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewAppVIPPool_Ipv4AppVipPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewAppVIPPool_Ipv4AppVipPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv4AppVipPool != nil {
		{
			size, err := m.Ipv4AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewAppVIPPool_Ipv6AppVipPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewAppVIPPool_Ipv6AppVipPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv6AppVipPool != nil {
		{
			size, err := m.Ipv6AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewDualStackLeasePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewDualStackLeasePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewDualStackLeasePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ipv6Leasepool != nil {
		{
			size, err := m.Ipv6Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ipv4Leasepool != nil {
		{
			size, err := m.Ipv4Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *IPv4LeasePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPv4LeasePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPv4LeasePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ipv4Leasepool != nil {
		{
			size, err := m.Ipv4Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPv6LeasePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPv6LeasePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPv6LeasePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ipv6Leasepool != nil {
		{
			size, err := m.Ipv6Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewLeasePoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewLeasePoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewLeasePoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpaddressType != nil {
		{
			size := m.IpaddressType.Size()
			i -= size
			if _, err := m.IpaddressType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewLeasePoolList_Ipv4Leasepool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewLeasePoolList_Ipv4Leasepool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv4Leasepool != nil {
		{
			size, err := m.Ipv4Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewLeasePoolList_Ipv6Leasepool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewLeasePoolList_Ipv6Leasepool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv6Leasepool != nil {
		{
			size, err := m.Ipv6Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewLeasePoolList_Ipv4Ipv6Leasepool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewLeasePoolList_Ipv4Ipv6Leasepool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv4Ipv6Leasepool != nil {
		{
			size, err := m.Ipv4Ipv6Leasepool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewCloudGateways) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewCloudGateways) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewCloudGateways) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CloudGateways) > 0 {
		for iNdEx := len(m.CloudGateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloudGateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewSites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaGateway) > 0 {
		for iNdEx := len(m.UztnaGateway) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaGateway[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DVCloudGatewayAdvertisement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVCloudGatewayAdvertisement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVCloudGatewayAdvertisement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudGatewayChoice != nil {
		{
			size := m.CloudGatewayChoice.Size()
			i -= size
			if _, err := m.CloudGatewayChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DVCloudGatewayAdvertisement_AllCloud) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVCloudGatewayAdvertisement_AllCloud) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllCloud != nil {
		{
			size, err := m.AllCloud.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DVCloudGatewayAdvertisement_ReSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVCloudGatewayAdvertisement_ReSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReSites != nil {
		{
			size, err := m.ReSites.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DomainViewPrivateGateways) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewPrivateGateways) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewPrivateGateways) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UztnaGateway) > 0 {
		for iNdEx := len(m.UztnaGateway) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UztnaGateway[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DomainViewGateways) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainViewGateways) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainViewGateways) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivateGateway != nil {
		{
			size, err := m.PrivateGateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PerimeterRe != nil {
		{
			size, err := m.PerimeterRe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.AppVipPool != nil {
		{
			size, err := m.AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LeasePool != nil {
		{
			size, err := m.LeasePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Gateways != nil {
		{
			size, err := m.Gateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cert != nil {
		{
			size, err := m.Cert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessUrl) > 0 {
		i -= len(m.AccessUrl)
		copy(dAtA[i:], m.AccessUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AccessUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.AppVipPool != nil {
		{
			size, err := m.AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LeasePool != nil {
		{
			size, err := m.LeasePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Gateways != nil {
		{
			size, err := m.Gateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cert != nil {
		{
			size, err := m.Cert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessUrl) > 0 {
		i -= len(m.AccessUrl)
		copy(dAtA[i:], m.AccessUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AccessUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.LeasePool != nil {
		{
			size, err := m.LeasePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Gateways != nil {
		{
			size, err := m.Gateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cert != nil {
		{
			size, err := m.Cert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessUrl) > 0 {
		i -= len(m.AccessUrl)
		copy(dAtA[i:], m.AccessUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AccessUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.AppVipPool != nil {
		{
			size, err := m.AppVipPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LeasePool != nil {
		{
			size, err := m.LeasePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Gateways != nil {
		{
			size, err := m.Gateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cert != nil {
		{
			size, err := m.Cert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessUrl) > 0 {
		i -= len(m.AccessUrl)
		copy(dAtA[i:], m.AccessUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AccessUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DomainViewCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificate != nil {
		l = m.Certificate.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainViewPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyName != nil {
		l = m.PolicyName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainViewDualStackAppVipPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4AppVipPool != nil {
		l = m.Ipv4AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Ipv6AppVipPool != nil {
		l = m.Ipv6AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainViewAppVIPPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpaddressType != nil {
		n += m.IpaddressType.Size()
	}
	return n
}

func (m *DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4Ipv6AppVipPool != nil {
		l = m.Ipv4Ipv6AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewAppVIPPool_Ipv4AppVipPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4AppVipPool != nil {
		l = m.Ipv4AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewAppVIPPool_Ipv6AppVipPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6AppVipPool != nil {
		l = m.Ipv6AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewDualStackLeasePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4Leasepool != nil {
		l = m.Ipv4Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Ipv6Leasepool != nil {
		l = m.Ipv6Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IPv4LeasePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4Leasepool != nil {
		l = m.Ipv4Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IPv6LeasePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6Leasepool != nil {
		l = m.Ipv6Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainViewLeasePoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpaddressType != nil {
		n += m.IpaddressType.Size()
	}
	return n
}

func (m *DomainViewLeasePoolList_Ipv4Leasepool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4Leasepool != nil {
		l = m.Ipv4Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewLeasePoolList_Ipv6Leasepool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6Leasepool != nil {
		l = m.Ipv6Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewLeasePoolList_Ipv4Ipv6Leasepool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4Ipv6Leasepool != nil {
		l = m.Ipv4Ipv6Leasepool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewCloudGateways) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CloudGateways) > 0 {
		for _, e := range m.CloudGateways {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DomainViewSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UztnaGateway) > 0 {
		for _, e := range m.UztnaGateway {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DVCloudGatewayAdvertisement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudGatewayChoice != nil {
		n += m.CloudGatewayChoice.Size()
	}
	return n
}

func (m *DVCloudGatewayAdvertisement_AllCloud) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllCloud != nil {
		l = m.AllCloud.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DVCloudGatewayAdvertisement_ReSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReSites != nil {
		l = m.ReSites.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainViewPrivateGateways) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UztnaGateway) > 0 {
		for _, e := range m.UztnaGateway {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DomainViewGateways) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerimeterRe != nil {
		l = m.PerimeterRe.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateGateway != nil {
		l = m.PrivateGateway.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cert != nil {
		l = m.Cert.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Gateways != nil {
		l = m.Gateways.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LeasePool != nil {
		l = m.LeasePool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppVipPool != nil {
		l = m.AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cert != nil {
		l = m.Cert.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Gateways != nil {
		l = m.Gateways.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LeasePool != nil {
		l = m.LeasePool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppVipPool != nil {
		l = m.AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cert != nil {
		l = m.Cert.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Gateways != nil {
		l = m.Gateways.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LeasePool != nil {
		l = m.LeasePool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Cert != nil {
		l = m.Cert.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Gateways != nil {
		l = m.Gateways.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LeasePool != nil {
		l = m.LeasePool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AppVipPool != nil {
		l = m.AppVipPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DomainViewCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewCertificate{`,
		`Certificate:` + strings.Replace(fmt.Sprintf("%v", this.Certificate), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewPolicy{`,
		`PolicyName:` + strings.Replace(fmt.Sprintf("%v", this.PolicyName), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewDualStackAppVipPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewDualStackAppVipPool{`,
		`Ipv4AppVipPool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4AppVipPool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Ipv6AppVipPool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6AppVipPool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewAppVIPPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewAppVIPPool{`,
		`IpaddressType:` + fmt.Sprintf("%v", this.IpaddressType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewAppVIPPool_Ipv4Ipv6AppVipPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewAppVIPPool_Ipv4Ipv6AppVipPool{`,
		`Ipv4Ipv6AppVipPool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4Ipv6AppVipPool), "DomainViewDualStackAppVipPool", "DomainViewDualStackAppVipPool", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewAppVIPPool_Ipv4AppVipPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewAppVIPPool_Ipv4AppVipPool{`,
		`Ipv4AppVipPool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4AppVipPool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewAppVIPPool_Ipv6AppVipPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewAppVIPPool_Ipv6AppVipPool{`,
		`Ipv6AppVipPool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6AppVipPool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewDualStackLeasePool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewDualStackLeasePool{`,
		`Ipv4Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4Leasepool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Ipv6Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6Leasepool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPv4LeasePool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPv4LeasePool{`,
		`Ipv4Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4Leasepool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPv6LeasePool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPv6LeasePool{`,
		`Ipv6Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6Leasepool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewLeasePoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewLeasePoolList{`,
		`IpaddressType:` + fmt.Sprintf("%v", this.IpaddressType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewLeasePoolList_Ipv4Leasepool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewLeasePoolList_Ipv4Leasepool{`,
		`Ipv4Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4Leasepool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewLeasePoolList_Ipv6Leasepool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewLeasePoolList_Ipv6Leasepool{`,
		`Ipv6Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6Leasepool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewLeasePoolList_Ipv4Ipv6Leasepool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewLeasePoolList_Ipv4Ipv6Leasepool{`,
		`Ipv4Ipv6Leasepool:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4Ipv6Leasepool), "DomainViewDualStackLeasePool", "DomainViewDualStackLeasePool", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewCloudGateways) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCloudGateways := "[]*ObjectRefType{"
	for _, f := range this.CloudGateways {
		repeatedStringForCloudGateways += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForCloudGateways += "}"
	s := strings.Join([]string{`&DomainViewCloudGateways{`,
		`CloudGateways:` + repeatedStringForCloudGateways + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewSites) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUztnaGateway := "[]*ObjectRefType{"
	for _, f := range this.UztnaGateway {
		repeatedStringForUztnaGateway += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaGateway += "}"
	s := strings.Join([]string{`&DomainViewSites{`,
		`UztnaGateway:` + repeatedStringForUztnaGateway + `,`,
		`}`,
	}, "")
	return s
}
func (this *DVCloudGatewayAdvertisement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DVCloudGatewayAdvertisement{`,
		`CloudGatewayChoice:` + fmt.Sprintf("%v", this.CloudGatewayChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DVCloudGatewayAdvertisement_AllCloud) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DVCloudGatewayAdvertisement_AllCloud{`,
		`AllCloud:` + strings.Replace(fmt.Sprintf("%v", this.AllCloud), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DVCloudGatewayAdvertisement_ReSites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DVCloudGatewayAdvertisement_ReSites{`,
		`ReSites:` + strings.Replace(fmt.Sprintf("%v", this.ReSites), "DomainViewCloudGateways", "DomainViewCloudGateways", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewPrivateGateways) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUztnaGateway := "[]*ObjectRefType{"
	for _, f := range this.UztnaGateway {
		repeatedStringForUztnaGateway += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForUztnaGateway += "}"
	s := strings.Join([]string{`&DomainViewPrivateGateways{`,
		`UztnaGateway:` + repeatedStringForUztnaGateway + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainViewGateways) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainViewGateways{`,
		`PerimeterRe:` + strings.Replace(this.PerimeterRe.String(), "DVCloudGatewayAdvertisement", "DVCloudGatewayAdvertisement", 1) + `,`,
		`PrivateGateway:` + strings.Replace(this.PrivateGateway.String(), "DomainViewPrivateGateways", "DomainViewPrivateGateways", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AccessUrl:` + fmt.Sprintf("%v", this.AccessUrl) + `,`,
		`Cert:` + strings.Replace(this.Cert.String(), "DomainViewCertificate", "DomainViewCertificate", 1) + `,`,
		`Gateways:` + strings.Replace(this.Gateways.String(), "DomainViewGateways", "DomainViewGateways", 1) + `,`,
		`LeasePool:` + strings.Replace(this.LeasePool.String(), "DomainViewLeasePoolList", "DomainViewLeasePoolList", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`AppVipPool:` + strings.Replace(this.AppVipPool.String(), "DomainViewAppVIPPool", "DomainViewAppVIPPool", 1) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "DomainViewPolicy", "DomainViewPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`AccessUrl:` + fmt.Sprintf("%v", this.AccessUrl) + `,`,
		`Cert:` + strings.Replace(this.Cert.String(), "DomainViewCertificate", "DomainViewCertificate", 1) + `,`,
		`Gateways:` + strings.Replace(this.Gateways.String(), "DomainViewGateways", "DomainViewGateways", 1) + `,`,
		`LeasePool:` + strings.Replace(this.LeasePool.String(), "DomainViewLeasePoolList", "DomainViewLeasePoolList", 1) + `,`,
		`AppVipPool:` + strings.Replace(this.AppVipPool.String(), "DomainViewAppVIPPool", "DomainViewAppVIPPool", 1) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "DomainViewPolicy", "DomainViewPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`AccessUrl:` + fmt.Sprintf("%v", this.AccessUrl) + `,`,
		`Cert:` + strings.Replace(this.Cert.String(), "DomainViewCertificate", "DomainViewCertificate", 1) + `,`,
		`Gateways:` + strings.Replace(this.Gateways.String(), "DomainViewGateways", "DomainViewGateways", 1) + `,`,
		`LeasePool:` + strings.Replace(this.LeasePool.String(), "DomainViewLeasePoolList", "DomainViewLeasePoolList", 1) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "DomainViewPolicy", "DomainViewPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`AccessUrl:` + fmt.Sprintf("%v", this.AccessUrl) + `,`,
		`Cert:` + strings.Replace(this.Cert.String(), "DomainViewCertificate", "DomainViewCertificate", 1) + `,`,
		`Gateways:` + strings.Replace(this.Gateways.String(), "DomainViewGateways", "DomainViewGateways", 1) + `,`,
		`LeasePool:` + strings.Replace(this.LeasePool.String(), "DomainViewLeasePoolList", "DomainViewLeasePoolList", 1) + `,`,
		`AppVipPool:` + strings.Replace(this.AppVipPool.String(), "DomainViewAppVIPPool", "DomainViewAppVIPPool", 1) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "DomainViewPolicy", "DomainViewPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DomainViewCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificate == nil {
				m.Certificate = &views.ObjectRefType{}
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyName == nil {
				m.PolicyName = &views.ObjectRefType{}
			}
			if err := m.PolicyName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewDualStackAppVipPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewDualStackAppVipPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewDualStackAppVipPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4AppVipPool == nil {
				m.Ipv4AppVipPool = &views.ObjectRefType{}
			}
			if err := m.Ipv4AppVipPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6AppVipPool == nil {
				m.Ipv6AppVipPool = &views.ObjectRefType{}
			}
			if err := m.Ipv6AppVipPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewAppVIPPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewAppVIPPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewAppVIPPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Ipv6AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainViewDualStackAppVipPool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpaddressType = &DomainViewAppVIPPool_Ipv4Ipv6AppVipPool{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpaddressType = &DomainViewAppVIPPool_Ipv4AppVipPool{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpaddressType = &DomainViewAppVIPPool_Ipv6AppVipPool{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewDualStackLeasePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewDualStackLeasePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewDualStackLeasePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4Leasepool == nil {
				m.Ipv4Leasepool = &views.ObjectRefType{}
			}
			if err := m.Ipv4Leasepool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6Leasepool == nil {
				m.Ipv6Leasepool = &views.ObjectRefType{}
			}
			if err := m.Ipv6Leasepool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPv4LeasePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPv4LeasePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPv4LeasePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4Leasepool == nil {
				m.Ipv4Leasepool = &views.ObjectRefType{}
			}
			if err := m.Ipv4Leasepool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPv6LeasePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPv6LeasePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPv6LeasePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6Leasepool == nil {
				m.Ipv6Leasepool = &views.ObjectRefType{}
			}
			if err := m.Ipv6Leasepool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewLeasePoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewLeasePoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewLeasePoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpaddressType = &DomainViewLeasePoolList_Ipv4Leasepool{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpaddressType = &DomainViewLeasePoolList_Ipv6Leasepool{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Ipv6Leasepool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainViewDualStackLeasePool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpaddressType = &DomainViewLeasePoolList_Ipv4Ipv6Leasepool{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewCloudGateways) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewCloudGateways: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewCloudGateways: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudGateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudGateways = append(m.CloudGateways, &views.ObjectRefType{})
			if err := m.CloudGateways[len(m.CloudGateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewSites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewSites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewSites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaGateway = append(m.UztnaGateway, &views.ObjectRefType{})
			if err := m.UztnaGateway[len(m.UztnaGateway)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVCloudGatewayAdvertisement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVCloudGatewayAdvertisement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVCloudGatewayAdvertisement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCloud", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudGatewayChoice = &DVCloudGatewayAdvertisement_AllCloud{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainViewCloudGateways{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudGatewayChoice = &DVCloudGatewayAdvertisement_ReSites{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewPrivateGateways) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewPrivateGateways: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewPrivateGateways: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UztnaGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UztnaGateway = append(m.UztnaGateway, &views.ObjectRefType{})
			if err := m.UztnaGateway[len(m.UztnaGateway)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainViewGateways) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainViewGateways: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainViewGateways: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerimeterRe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerimeterRe == nil {
				m.PerimeterRe = &DVCloudGatewayAdvertisement{}
			}
			if err := m.PerimeterRe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateGateway == nil {
				m.PrivateGateway = &DomainViewPrivateGateways{}
			}
			if err := m.PrivateGateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cert == nil {
				m.Cert = &DomainViewCertificate{}
			}
			if err := m.Cert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateways == nil {
				m.Gateways = &DomainViewGateways{}
			}
			if err := m.Gateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeasePool == nil {
				m.LeasePool = &DomainViewLeasePoolList{}
			}
			if err := m.LeasePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppVipPool == nil {
				m.AppVipPool = &DomainViewAppVIPPool{}
			}
			if err := m.AppVipPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &DomainViewPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cert == nil {
				m.Cert = &DomainViewCertificate{}
			}
			if err := m.Cert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateways == nil {
				m.Gateways = &DomainViewGateways{}
			}
			if err := m.Gateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeasePool == nil {
				m.LeasePool = &DomainViewLeasePoolList{}
			}
			if err := m.LeasePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppVipPool == nil {
				m.AppVipPool = &DomainViewAppVIPPool{}
			}
			if err := m.AppVipPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &DomainViewPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cert == nil {
				m.Cert = &DomainViewCertificate{}
			}
			if err := m.Cert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateways == nil {
				m.Gateways = &DomainViewGateways{}
			}
			if err := m.Gateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeasePool == nil {
				m.LeasePool = &DomainViewLeasePoolList{}
			}
			if err := m.LeasePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &DomainViewPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cert == nil {
				m.Cert = &DomainViewCertificate{}
			}
			if err := m.Cert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateways == nil {
				m.Gateways = &DomainViewGateways{}
			}
			if err := m.Gateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeasePool == nil {
				m.LeasePool = &DomainViewLeasePoolList{}
			}
			if err := m.LeasePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVipPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppVipPool == nil {
				m.AppVipPool = &DomainViewAppVIPPool{}
			}
			if err := m.AppVipPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &DomainViewPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

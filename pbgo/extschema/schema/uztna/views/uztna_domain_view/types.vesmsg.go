// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_domain_view

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DomainViewLeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DVPerimeterREAdvertisement) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DVPerimeterREAdvertisement) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DVPerimeterREAdvertisement) DeepCopy() *DVPerimeterREAdvertisement {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DVPerimeterREAdvertisement{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DVPerimeterREAdvertisement) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DVPerimeterREAdvertisement) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DVPerimeterREAdvertisementValidator().Validate(ctx, m, opts...)
}

func (m *DVPerimeterREAdvertisement) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPerimeterReChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *DVPerimeterREAdvertisement) GetPerimeterReChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPerimeterReChoice() == nil {
		return nil, nil
	}
	switch m.GetPerimeterReChoice().(type) {
	case *DVPerimeterREAdvertisement_AllPerimeter:

		return nil, nil

	case *DVPerimeterREAdvertisement_ReSites:

		drInfos, err := m.GetReSites().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetReSites().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "re_sites." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateDVPerimeterREAdvertisement struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDVPerimeterREAdvertisement) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DVPerimeterREAdvertisement)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DVPerimeterREAdvertisement got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetPerimeterReChoice().(type) {
	case *DVPerimeterREAdvertisement_AllPerimeter:
		if fv, exists := v.FldValidators["perimeter_re_choice.all_perimeter"]; exists {
			val := m.GetPerimeterReChoice().(*DVPerimeterREAdvertisement_AllPerimeter).AllPerimeter
			vOpts := append(opts,
				db.WithValidateField("perimeter_re_choice"),
				db.WithValidateField("all_perimeter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DVPerimeterREAdvertisement_ReSites:
		if fv, exists := v.FldValidators["perimeter_re_choice.re_sites"]; exists {
			val := m.GetPerimeterReChoice().(*DVPerimeterREAdvertisement_ReSites).ReSites
			vOpts := append(opts,
				db.WithValidateField("perimeter_re_choice"),
				db.WithValidateField("re_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDVPerimeterREAdvertisementValidator = func() *ValidateDVPerimeterREAdvertisement {
	v := &ValidateDVPerimeterREAdvertisement{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["perimeter_re_choice.re_sites"] = DomainViewPerimeterREValidator().Validate

	return v
}()

func DVPerimeterREAdvertisementValidator() db.Validator {
	return DefaultDVPerimeterREAdvertisementValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainViewCertificate) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainViewCertificate) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainViewCertificate) DeepCopy() *DomainViewCertificate {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainViewCertificate{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainViewCertificate) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainViewCertificate) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainViewCertificateValidator().Validate(ctx, m, opts...)
}

func (m *DomainViewCertificate) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCertificateDRefInfo()

}

func (m *DomainViewCertificate) GetCertificateDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCertificate()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("certificate.Object")
	dri := db.DRefInfo{
		RefdType:   "certificate.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "certificate",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCertificateDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DomainViewCertificate) GetCertificateDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate")
	}

	vref := m.GetCertificate()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "certificate.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateDomainViewCertificate struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainViewCertificate) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainViewCertificate)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainViewCertificate got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate"))
		if err := fv(ctx, m.GetCertificate(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainViewCertificateValidator = func() *ValidateDomainViewCertificate {
	v := &ValidateDomainViewCertificate{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["certificate"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DomainViewCertificateValidator() db.Validator {
	return DefaultDomainViewCertificateValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainViewGateways) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainViewGateways) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainViewGateways) DeepCopy() *DomainViewGateways {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainViewGateways{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainViewGateways) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainViewGateways) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainViewGatewaysValidator().Validate(ctx, m, opts...)
}

func (m *DomainViewGateways) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetBigipCeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBigipCeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPerimeterReDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPerimeterReDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *DomainViewGateways) GetBigipCeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBigipCe() == nil {
		return nil, nil
	}

	drInfos, err := m.GetBigipCe().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetBigipCe().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "bigip_ce." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *DomainViewGateways) GetPerimeterReDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPerimeterRe() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPerimeterRe().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPerimeterRe().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "perimeter_re." + dri.DRField
	}
	return drInfos, err

}

type ValidateDomainViewGateways struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainViewGateways) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainViewGateways)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainViewGateways got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bigip_ce"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_ce"))
		if err := fv(ctx, m.GetBigipCe(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["perimeter_re"]; exists {

		vOpts := append(opts, db.WithValidateField("perimeter_re"))
		if err := fv(ctx, m.GetPerimeterRe(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainViewGatewaysValidator = func() *ValidateDomainViewGateways {
	v := &ValidateDomainViewGateways{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["perimeter_re"] = DVPerimeterREAdvertisementValidator().Validate

	v.FldValidators["bigip_ce"] = DomainViewSitesValidator().Validate

	return v
}()

func DomainViewGatewaysValidator() db.Validator {
	return DefaultDomainViewGatewaysValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainViewLeasePoolList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainViewLeasePoolList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainViewLeasePoolList) DeepCopy() *DomainViewLeasePoolList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainViewLeasePoolList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainViewLeasePoolList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainViewLeasePoolList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainViewLeasePoolListValidator().Validate(ctx, m, opts...)
}

func (m *DomainViewLeasePoolList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaLpoolDRefInfo()

}

func (m *DomainViewLeasePoolList) GetUztnaLpoolDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetUztnaLpool()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("DomainViewLeasePoolList.uztna_lpool[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("uztna_leasepool.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_leasepool.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "uztna_lpool",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetUztnaLpoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DomainViewLeasePoolList) GetUztnaLpoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_leasepool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_leasepool")
	}
	for i, vref := range m.GetUztnaLpool() {
		if vref == nil {
			return nil, fmt.Errorf("DomainViewLeasePoolList.uztna_lpool[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "uztna_leasepool.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDomainViewLeasePoolList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainViewLeasePoolList) UztnaLpoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for uztna_lpool")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for uztna_lpool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated uztna_lpool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items uztna_lpool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDomainViewLeasePoolList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainViewLeasePoolList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainViewLeasePoolList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["uztna_lpool"]; exists {
		vOpts := append(opts, db.WithValidateField("uztna_lpool"))
		if err := fv(ctx, m.GetUztnaLpool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainViewLeasePoolListValidator = func() *ValidateDomainViewLeasePoolList {
	v := &ValidateDomainViewLeasePoolList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUztnaLpool := v.UztnaLpoolValidationRuleHandler
	rulesUztnaLpool := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhUztnaLpool(rulesUztnaLpool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DomainViewLeasePoolList.uztna_lpool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uztna_lpool"] = vFn

	return v
}()

func DomainViewLeasePoolListValidator() db.Validator {
	return DefaultDomainViewLeasePoolListValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainViewPerimeterRE) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainViewPerimeterRE) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainViewPerimeterRE) DeepCopy() *DomainViewPerimeterRE {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainViewPerimeterRE{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainViewPerimeterRE) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainViewPerimeterRE) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainViewPerimeterREValidator().Validate(ctx, m, opts...)
}

func (m *DomainViewPerimeterRE) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPerimeterReSiteDRefInfo()

}

func (m *DomainViewPerimeterRE) GetPerimeterReSiteDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetPerimeterReSite()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("DomainViewPerimeterRE.perimeter_re_site[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("site.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "perimeter_re_site",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetPerimeterReSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DomainViewPerimeterRE) GetPerimeterReSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}
	for i, vref := range m.GetPerimeterReSite() {
		if vref == nil {
			return nil, fmt.Errorf("DomainViewPerimeterRE.perimeter_re_site[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "site.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDomainViewPerimeterRE struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainViewPerimeterRE) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainViewPerimeterRE)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainViewPerimeterRE got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["perimeter_re_site"]; exists {

		vOpts := append(opts, db.WithValidateField("perimeter_re_site"))
		for idx, item := range m.GetPerimeterReSite() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainViewPerimeterREValidator = func() *ValidateDomainViewPerimeterRE {
	v := &ValidateDomainViewPerimeterRE{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["perimeter_re_site"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DomainViewPerimeterREValidator() db.Validator {
	return DefaultDomainViewPerimeterREValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainViewSites) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainViewSites) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainViewSites) DeepCopy() *DomainViewSites {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainViewSites{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainViewSites) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainViewSites) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainViewSitesValidator().Validate(ctx, m, opts...)
}

func (m *DomainViewSites) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaGatewayDRefInfo()

}

func (m *DomainViewSites) GetUztnaGatewayDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetUztnaGateway()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("DomainViewSites.uztna_gateway[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("uztna_gateway.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_gateway.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "uztna_gateway",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetUztnaGatewayDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DomainViewSites) GetUztnaGatewayDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_gateway.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_gateway")
	}
	for i, vref := range m.GetUztnaGateway() {
		if vref == nil {
			return nil, fmt.Errorf("DomainViewSites.uztna_gateway[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "uztna_gateway.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDomainViewSites struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainViewSites) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainViewSites)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainViewSites got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["uztna_gateway"]; exists {

		vOpts := append(opts, db.WithValidateField("uztna_gateway"))
		for idx, item := range m.GetUztnaGateway() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainViewSitesValidator = func() *ValidateDomainViewSites {
	v := &ValidateDomainViewSites{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["uztna_gateway"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DomainViewSitesValidator() db.Validator {
	return DefaultDomainViewSitesValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DomainViewLeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DomainViewLeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := DomainViewLeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessUrl = f.GetAccessUrl()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.ProfileName = f.GetProfileName()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessUrl = m1.AccessUrl
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.ProfileName = m1.ProfileName
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessUrl = f.GetAccessUrl()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.ProfileName = f.GetProfileName()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessUrl = m1.AccessUrl
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.ProfileName = m1.ProfileName
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessUrl = f.GetAccessUrl()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.ProfileName = f.GetProfileName()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessUrl = m1.AccessUrl
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.ProfileName = m1.ProfileName
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

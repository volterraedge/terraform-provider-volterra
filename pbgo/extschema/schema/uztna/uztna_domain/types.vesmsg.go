// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_domain

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *Certificate) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Certificate) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Certificate) DeepCopy() *Certificate {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Certificate{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Certificate) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Certificate) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CertificateValidator().Validate(ctx, m, opts...)
}

func (m *Certificate) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCertificateDRefInfo()

}

func (m *Certificate) GetCertificateDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCertificate()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("Certificate.certificate[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "certificate.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "certificate",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCertificateDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *Certificate) GetCertificateDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate")
	}
	for _, ref := range m.GetCertificate() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCertificate struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCertificate) CertificateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for certificate")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for certificate")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated certificate")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items certificate")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCertificate) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Certificate)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Certificate got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate"]; exists {
		vOpts := append(opts, db.WithValidateField("certificate"))
		if err := fv(ctx, m.GetCertificate(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCertificateValidator = func() *ValidateCertificate {
	v := &ValidateCertificate{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificate := v.CertificateValidationRuleHandler
	rulesCertificate := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCertificate(rulesCertificate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Certificate.certificate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate"] = vFn

	return v
}()

func CertificateValidator() db.Validator {
	return DefaultCertificateValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainPerimeterRE) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainPerimeterRE) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainPerimeterRE) DeepCopy() *DomainPerimeterRE {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainPerimeterRE{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainPerimeterRE) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainPerimeterRE) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainPerimeterREValidator().Validate(ctx, m, opts...)
}

func (m *DomainPerimeterRE) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPerimeterReSiteDRefInfo()

}

func (m *DomainPerimeterRE) GetPerimeterReSiteDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetPerimeterReSite()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("DomainPerimeterRE.perimeter_re_site[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "perimeter_re_site",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetPerimeterReSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DomainPerimeterRE) GetPerimeterReSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}
	for _, ref := range m.GetPerimeterReSite() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDomainPerimeterRE struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainPerimeterRE) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainPerimeterRE)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainPerimeterRE got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["perimeter_re_site"]; exists {

		vOpts := append(opts, db.WithValidateField("perimeter_re_site"))
		for idx, item := range m.GetPerimeterReSite() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainPerimeterREValidator = func() *ValidateDomainPerimeterRE {
	v := &ValidateDomainPerimeterRE{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DomainPerimeterREValidator() db.Validator {
	return DefaultDomainPerimeterREValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainSites) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainSites) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainSites) DeepCopy() *DomainSites {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainSites{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainSites) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainSites) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainSitesValidator().Validate(ctx, m, opts...)
}

func (m *DomainSites) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaGatewayDRefInfo()

}

func (m *DomainSites) GetUztnaGatewayDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetUztnaGateway()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("DomainSites.uztna_gateway[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_gateway.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "uztna_gateway",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetUztnaGatewayDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DomainSites) GetUztnaGatewayDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_gateway.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_gateway")
	}
	for _, ref := range m.GetUztnaGateway() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateDomainSites struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainSites) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainSites)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainSites got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["uztna_gateway"]; exists {

		vOpts := append(opts, db.WithValidateField("uztna_gateway"))
		for idx, item := range m.GetUztnaGateway() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainSitesValidator = func() *ValidateDomainSites {
	v := &ValidateDomainSites{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DomainSitesValidator() db.Validator {
	return DefaultDomainSitesValidator
}

// augmented methods on protoc/std generated struct

func (m *Gateways) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Gateways) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Gateways) DeepCopy() *Gateways {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Gateways{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Gateways) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Gateways) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GatewaysValidator().Validate(ctx, m, opts...)
}

func (m *Gateways) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetBigipCeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBigipCeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPerimeterReDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPerimeterReDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *Gateways) GetBigipCeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBigipCe() == nil {
		return nil, nil
	}

	drInfos, err := m.GetBigipCe().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetBigipCe().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "bigip_ce." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *Gateways) GetPerimeterReDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPerimeterRe() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPerimeterRe().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPerimeterRe().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "perimeter_re." + dri.DRField
	}
	return drInfos, err

}

type ValidateGateways struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGateways) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Gateways)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Gateways got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bigip_ce"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_ce"))
		if err := fv(ctx, m.GetBigipCe(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["perimeter_re"]; exists {

		vOpts := append(opts, db.WithValidateField("perimeter_re"))
		if err := fv(ctx, m.GetPerimeterRe(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGatewaysValidator = func() *ValidateGateways {
	v := &ValidateGateways{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GatewaysValidator() db.Validator {
	return DefaultGatewaysValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LeasePoolList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LeasePoolList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LeasePoolList) DeepCopy() *LeasePoolList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LeasePoolList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LeasePoolList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LeasePoolList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LeasePoolListValidator().Validate(ctx, m, opts...)
}

func (m *LeasePoolList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetUztnaLpoolDRefInfo()

}

func (m *LeasePoolList) GetUztnaLpoolDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetUztnaLpool()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("LeasePoolList.uztna_lpool[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_leasepool.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "uztna_lpool",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetUztnaLpoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *LeasePoolList) GetUztnaLpoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_leasepool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_leasepool")
	}
	for _, ref := range m.GetUztnaLpool() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateLeasePoolList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLeasePoolList) UztnaLpoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for uztna_lpool")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for uztna_lpool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated uztna_lpool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items uztna_lpool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLeasePoolList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LeasePoolList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LeasePoolList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["uztna_lpool"]; exists {
		vOpts := append(opts, db.WithValidateField("uztna_lpool"))
		if err := fv(ctx, m.GetUztnaLpool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLeasePoolListValidator = func() *ValidateLeasePoolList {
	v := &ValidateLeasePoolList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUztnaLpool := v.UztnaLpoolValidationRuleHandler
	rulesUztnaLpool := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhUztnaLpool(rulesUztnaLpool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LeasePoolList.uztna_lpool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uztna_lpool"] = vFn

	return v
}()

func LeasePoolListValidator() db.Validator {
	return DefaultLeasePoolListValidator
}

// augmented methods on protoc/std generated struct

func (m *PerimeterREAdvertisement) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PerimeterREAdvertisement) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PerimeterREAdvertisement) DeepCopy() *PerimeterREAdvertisement {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PerimeterREAdvertisement{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PerimeterREAdvertisement) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PerimeterREAdvertisement) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PerimeterREAdvertisementValidator().Validate(ctx, m, opts...)
}

func (m *PerimeterREAdvertisement) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPerimterReChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *PerimeterREAdvertisement) GetPerimterReChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPerimterReChoice() == nil {
		return nil, nil
	}
	switch m.GetPerimterReChoice().(type) {
	case *PerimeterREAdvertisement_AllPerimeter:

		return nil, nil

	case *PerimeterREAdvertisement_DomainReSites:

		drInfos, err := m.GetDomainReSites().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDomainReSites().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "domain_re_sites." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidatePerimeterREAdvertisement struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePerimeterREAdvertisement) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PerimeterREAdvertisement)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PerimeterREAdvertisement got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetPerimterReChoice().(type) {
	case *PerimeterREAdvertisement_AllPerimeter:
		if fv, exists := v.FldValidators["perimter_re_choice.all_perimeter"]; exists {
			val := m.GetPerimterReChoice().(*PerimeterREAdvertisement_AllPerimeter).AllPerimeter
			vOpts := append(opts,
				db.WithValidateField("perimter_re_choice"),
				db.WithValidateField("all_perimeter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PerimeterREAdvertisement_DomainReSites:
		if fv, exists := v.FldValidators["perimter_re_choice.domain_re_sites"]; exists {
			val := m.GetPerimterReChoice().(*PerimeterREAdvertisement_DomainReSites).DomainReSites
			vOpts := append(opts,
				db.WithValidateField("perimter_re_choice"),
				db.WithValidateField("domain_re_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPerimeterREAdvertisementValidator = func() *ValidatePerimeterREAdvertisement {
	v := &ValidatePerimeterREAdvertisement{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func PerimeterREAdvertisementValidator() db.Validator {
	return DefaultPerimeterREAdvertisementValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AccessUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_url")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ProfileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for profile_name")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_url"]; exists {

		vOpts := append(opts, db.WithValidateField("access_url"))
		if err := fv(ctx, m.GetAccessUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["profile_name"]; exists {

		vOpts := append(opts, db.WithValidateField("profile_name"))
		if err := fv(ctx, m.GetProfileName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhAccessUrl := v.AccessUrlValidationRuleHandler
	rulesAccessUrl := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessUrl(rulesAccessUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.access_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_url"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhProfileName := v.ProfileNameValidationRuleHandler
	rulesProfileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "1024",
	}
	vFn, err = vrhProfileName(rulesProfileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.profile_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["profile_name"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessUrl = f.GetAccessUrl()
	m.CdnCeVhApiGw = f.GetCdnCeVhApiGw()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.ProfileName = f.GetProfileName()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessUrl = m1.AccessUrl
	f.CdnCeVhApiGw = m1.CdnCeVhApiGw
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.ProfileName = m1.ProfileName
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessUrl = f.GetAccessUrl()
	m.CdnCeVhApiGw = f.GetCdnCeVhApiGw()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.ProfileName = f.GetProfileName()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessUrl = m1.AccessUrl
	f.CdnCeVhApiGw = m1.CdnCeVhApiGw
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.ProfileName = m1.ProfileName
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessUrl = f.GetAccessUrl()
	m.CdnCeVhApiGw = f.GetCdnCeVhApiGw()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.ProfileName = f.GetProfileName()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessUrl = m1.AccessUrl
	f.CdnCeVhApiGw = m1.CdnCeVhApiGw
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.ProfileName = m1.ProfileName
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

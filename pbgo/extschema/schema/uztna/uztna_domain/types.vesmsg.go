// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package uztna_domain

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AppVIPPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AppVIPPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AppVIPPool) DeepCopy() *AppVIPPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AppVIPPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AppVIPPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AppVIPPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AppVIPPoolValidator().Validate(ctx, m, opts...)
}

func (m *AppVIPPool) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAppVipPoolDRefInfo()

}

func (m *AppVIPPool) GetAppVipPoolDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetAppVipPool()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("AppVIPPool.app_vip_pool[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_app_vip_pool.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "app_vip_pool",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetAppVipPoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AppVIPPool) GetAppVipPoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_app_vip_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_app_vip_pool")
	}
	for _, ref := range m.GetAppVipPool() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateAppVIPPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAppVIPPool) AppVipPoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for app_vip_pool")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for app_vip_pool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated app_vip_pool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items app_vip_pool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppVIPPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AppVIPPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AppVIPPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_vip_pool"]; exists {
		vOpts := append(opts, db.WithValidateField("app_vip_pool"))
		if err := fv(ctx, m.GetAppVipPool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAppVIPPoolValidator = func() *ValidateAppVIPPool {
	v := &ValidateAppVIPPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppVipPool := v.AppVipPoolValidationRuleHandler
	rulesAppVipPool := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhAppVipPool(rulesAppVipPool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppVIPPool.app_vip_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_vip_pool"] = vFn

	return v
}()

func AppVIPPoolValidator() db.Validator {
	return DefaultAppVIPPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *Certificate) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Certificate) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Certificate) DeepCopy() *Certificate {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Certificate{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Certificate) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Certificate) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CertificateValidator().Validate(ctx, m, opts...)
}

func (m *Certificate) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCertificateDRefInfo()

}

func (m *Certificate) GetCertificateDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCertificate()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("Certificate.certificate[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "certificate.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "certificate",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCertificateDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *Certificate) GetCertificateDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate")
	}
	for _, ref := range m.GetCertificate() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCertificate struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCertificate) CertificateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for certificate")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for certificate")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated certificate")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items certificate")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCertificate) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Certificate)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Certificate got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate"]; exists {
		vOpts := append(opts, db.WithValidateField("certificate"))
		if err := fv(ctx, m.GetCertificate(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCertificateValidator = func() *ValidateCertificate {
	v := &ValidateCertificate{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificate := v.CertificateValidationRuleHandler
	rulesCertificate := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCertificate(rulesCertificate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Certificate.certificate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate"] = vFn

	return v
}()

func CertificateValidator() db.Validator {
	return DefaultCertificateValidator
}

// augmented methods on protoc/std generated struct

func (m *CloudGatewayAdvertisement) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CloudGatewayAdvertisement) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CloudGatewayAdvertisement) DeepCopy() *CloudGatewayAdvertisement {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CloudGatewayAdvertisement{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CloudGatewayAdvertisement) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CloudGatewayAdvertisement) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CloudGatewayAdvertisementValidator().Validate(ctx, m, opts...)
}

func (m *CloudGatewayAdvertisement) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudGatewayChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CloudGatewayAdvertisement) GetCloudGatewayChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudGatewayChoice() == nil {
		return nil, nil
	}
	switch m.GetCloudGatewayChoice().(type) {
	case *CloudGatewayAdvertisement_AllCloud:

		return nil, nil

	case *CloudGatewayAdvertisement_ReSites:

		drInfos, err := m.GetReSites().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetReSites().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "re_sites." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCloudGatewayAdvertisement struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCloudGatewayAdvertisement) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CloudGatewayAdvertisement)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CloudGatewayAdvertisement got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetCloudGatewayChoice().(type) {
	case *CloudGatewayAdvertisement_AllCloud:
		if fv, exists := v.FldValidators["cloud_gateway_choice.all_cloud"]; exists {
			val := m.GetCloudGatewayChoice().(*CloudGatewayAdvertisement_AllCloud).AllCloud
			vOpts := append(opts,
				db.WithValidateField("cloud_gateway_choice"),
				db.WithValidateField("all_cloud"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CloudGatewayAdvertisement_ReSites:
		if fv, exists := v.FldValidators["cloud_gateway_choice.re_sites"]; exists {
			val := m.GetCloudGatewayChoice().(*CloudGatewayAdvertisement_ReSites).ReSites
			vOpts := append(opts,
				db.WithValidateField("cloud_gateway_choice"),
				db.WithValidateField("re_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCloudGatewayAdvertisementValidator = func() *ValidateCloudGatewayAdvertisement {
	v := &ValidateCloudGatewayAdvertisement{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CloudGatewayAdvertisementValidator() db.Validator {
	return DefaultCloudGatewayAdvertisementValidator
}

// augmented methods on protoc/std generated struct

func (m *CloudGateways) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CloudGateways) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CloudGateways) DeepCopy() *CloudGateways {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CloudGateways{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CloudGateways) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CloudGateways) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CloudGatewaysValidator().Validate(ctx, m, opts...)
}

func (m *CloudGateways) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudGatewayDRefInfo()

}

func (m *CloudGateways) GetCloudGatewayDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCloudGateway()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CloudGateways.cloud_gateway[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cloud_gateway",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCloudGatewayDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CloudGateways) GetCloudGatewayDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}
	for _, ref := range m.GetCloudGateway() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCloudGateways struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCloudGateways) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CloudGateways)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CloudGateways got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_gateway"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_gateway"))
		for idx, item := range m.GetCloudGateway() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCloudGatewaysValidator = func() *ValidateCloudGateways {
	v := &ValidateCloudGateways{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CloudGatewaysValidator() db.Validator {
	return DefaultCloudGatewaysValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppVipPoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppVipPoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAppVipPoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppVipPool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAppVipPool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAppVipPool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "app_vip_pool." + dri.DRField
	}
	return drInfos, err

}

func (m *CreateSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := PolicyValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VipDnsProxyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vip_dns_proxy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AccessFqdnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_fqdn")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AppVipSubnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for app_vip_subnet")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for app_vip_subnet")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated app_vip_subnet")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items app_vip_subnet")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_fqdn"]; exists {

		vOpts := append(opts, db.WithValidateField("access_fqdn"))
		if err := fv(ctx, m.GetAccessFqdn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("app_vip_pool"))
		if err := fv(ctx, m.GetAppVipPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_subnet"]; exists {
		vOpts := append(opts, db.WithValidateField("app_vip_subnet"))
		if err := fv(ctx, m.GetAppVipSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_dns_proxy"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_dns_proxy"))
		if err := fv(ctx, m.GetVipDnsProxy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	vrhVipDnsProxy := v.VipDnsProxyValidationRuleHandler
	rulesVipDnsProxy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVipDnsProxy(rulesVipDnsProxy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.vip_dns_proxy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_dns_proxy"] = vFn

	vrhAccessFqdn := v.AccessFqdnValidationRuleHandler
	rulesAccessFqdn := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessFqdn(rulesAccessFqdn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.access_fqdn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_fqdn"] = vFn

	vrhAppVipSubnet := v.AppVipSubnetValidationRuleHandler
	rulesAppVipSubnet := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.ip_prefix": "true",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhAppVipSubnet(rulesAppVipSubnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.app_vip_subnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_vip_subnet"] = vFn

	v.FldValidators["app_vip_pool"] = AppVIPPoolValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DualStackLeasePool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DualStackLeasePool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DualStackLeasePool) DeepCopy() *DualStackLeasePool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DualStackLeasePool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DualStackLeasePool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DualStackLeasePool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DualStackLeasePoolValidator().Validate(ctx, m, opts...)
}

func (m *DualStackLeasePool) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetIpv4LeasepoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpv4LeasepoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpv6LeasepoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpv6LeasepoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *DualStackLeasePool) GetIpv4LeasepoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpv4Leasepool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetIpv4Leasepool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetIpv4Leasepool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "ipv4_leasepool." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *DualStackLeasePool) GetIpv6LeasepoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpv6Leasepool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetIpv6Leasepool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetIpv6Leasepool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "ipv6_leasepool." + dri.DRField
	}
	return drInfos, err

}

type ValidateDualStackLeasePool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDualStackLeasePool) Ipv4LeasepoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ipv4_leasepool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := IPv4LeasepoolValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDualStackLeasePool) Ipv6LeasepoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for ipv6_leasepool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := IPv6LeasepoolValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDualStackLeasePool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DualStackLeasePool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DualStackLeasePool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipv4_leasepool"]; exists {

		vOpts := append(opts, db.WithValidateField("ipv4_leasepool"))
		if err := fv(ctx, m.GetIpv4Leasepool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ipv6_leasepool"]; exists {

		vOpts := append(opts, db.WithValidateField("ipv6_leasepool"))
		if err := fv(ctx, m.GetIpv6Leasepool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDualStackLeasePoolValidator = func() *ValidateDualStackLeasePool {
	v := &ValidateDualStackLeasePool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpv4Leasepool := v.Ipv4LeasepoolValidationRuleHandler
	rulesIpv4Leasepool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIpv4Leasepool(rulesIpv4Leasepool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DualStackLeasePool.ipv4_leasepool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv4_leasepool"] = vFn

	vrhIpv6Leasepool := v.Ipv6LeasepoolValidationRuleHandler
	rulesIpv6Leasepool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIpv6Leasepool(rulesIpv6Leasepool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DualStackLeasePool.ipv6_leasepool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv6_leasepool"] = vFn

	return v
}()

func DualStackLeasePoolValidator() db.Validator {
	return DefaultDualStackLeasePoolValidator
}

// augmented methods on protoc/std generated struct

func (m *Gateways) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Gateways) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Gateways) DeepCopy() *Gateways {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Gateways{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Gateways) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Gateways) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GatewaysValidator().Validate(ctx, m, opts...)
}

func (m *Gateways) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetBigipSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBigipSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPerimeterReDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPerimeterReDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *Gateways) GetBigipSiteDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetBigipSite()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("Gateways.bigip_site[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_gateway.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "bigip_site",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetBigipSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *Gateways) GetBigipSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_gateway.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_gateway")
	}
	for _, ref := range m.GetBigipSite() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *Gateways) GetPerimeterReDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPerimeterRe() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPerimeterRe().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPerimeterRe().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "perimeter_re." + dri.DRField
	}
	return drInfos, err

}

type ValidateGateways struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGateways) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Gateways)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Gateways got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bigip_site"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_site"))
		for idx, item := range m.GetBigipSite() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["perimeter_re"]; exists {

		vOpts := append(opts, db.WithValidateField("perimeter_re"))
		if err := fv(ctx, m.GetPerimeterRe(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGatewaysValidator = func() *ValidateGateways {
	v := &ValidateGateways{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GatewaysValidator() db.Validator {
	return DefaultGatewaysValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppVipPoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppVipPoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAppVipPoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppVipPool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAppVipPool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAppVipPool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "app_vip_pool." + dri.DRField
	}
	return drInfos, err

}

func (m *GetSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := PolicyValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VipDnsProxyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vip_dns_proxy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AccessFqdnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_fqdn")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AppVipSubnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for app_vip_subnet")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for app_vip_subnet")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated app_vip_subnet")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items app_vip_subnet")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_fqdn"]; exists {

		vOpts := append(opts, db.WithValidateField("access_fqdn"))
		if err := fv(ctx, m.GetAccessFqdn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("app_vip_pool"))
		if err := fv(ctx, m.GetAppVipPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_subnet"]; exists {
		vOpts := append(opts, db.WithValidateField("app_vip_subnet"))
		if err := fv(ctx, m.GetAppVipSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_dns_proxy"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_dns_proxy"))
		if err := fv(ctx, m.GetVipDnsProxy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	vrhVipDnsProxy := v.VipDnsProxyValidationRuleHandler
	rulesVipDnsProxy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVipDnsProxy(rulesVipDnsProxy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.vip_dns_proxy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_dns_proxy"] = vFn

	vrhAccessFqdn := v.AccessFqdnValidationRuleHandler
	rulesAccessFqdn := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessFqdn(rulesAccessFqdn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.access_fqdn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_fqdn"] = vFn

	vrhAppVipSubnet := v.AppVipSubnetValidationRuleHandler
	rulesAppVipSubnet := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.ip_prefix": "true",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhAppVipSubnet(rulesAppVipSubnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.app_vip_subnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_vip_subnet"] = vFn

	v.FldValidators["app_vip_pool"] = AppVIPPoolValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppVipPoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppVipPoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAppVipPoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppVipPool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAppVipPool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAppVipPool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "app_vip_pool." + dri.DRField
	}
	return drInfos, err

}

func (m *GlobalSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := PolicyValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VipDnsProxyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vip_dns_proxy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AccessFqdnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_fqdn")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AppVipSubnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for app_vip_subnet")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for app_vip_subnet")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated app_vip_subnet")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items app_vip_subnet")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_fqdn"]; exists {

		vOpts := append(opts, db.WithValidateField("access_fqdn"))
		if err := fv(ctx, m.GetAccessFqdn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("app_vip_pool"))
		if err := fv(ctx, m.GetAppVipPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_subnet"]; exists {
		vOpts := append(opts, db.WithValidateField("app_vip_subnet"))
		if err := fv(ctx, m.GetAppVipSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_dns_proxy"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_dns_proxy"))
		if err := fv(ctx, m.GetVipDnsProxy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	vrhVipDnsProxy := v.VipDnsProxyValidationRuleHandler
	rulesVipDnsProxy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVipDnsProxy(rulesVipDnsProxy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.vip_dns_proxy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_dns_proxy"] = vFn

	vrhAccessFqdn := v.AccessFqdnValidationRuleHandler
	rulesAccessFqdn := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessFqdn(rulesAccessFqdn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.access_fqdn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_fqdn"] = vFn

	vrhAppVipSubnet := v.AppVipSubnetValidationRuleHandler
	rulesAppVipSubnet := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.ip_prefix": "true",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhAppVipSubnet(rulesAppVipSubnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.app_vip_subnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_vip_subnet"] = vFn

	v.FldValidators["app_vip_pool"] = AppVIPPoolValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *IPv4Leasepool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IPv4Leasepool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IPv4Leasepool) DeepCopy() *IPv4Leasepool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IPv4Leasepool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IPv4Leasepool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IPv4Leasepool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IPv4LeasepoolValidator().Validate(ctx, m, opts...)
}

func (m *IPv4Leasepool) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetIpv4LeasepoolDRefInfo()

}

func (m *IPv4Leasepool) GetIpv4LeasepoolDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetIpv4Leasepool()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("IPv4Leasepool.ipv4_leasepool[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_leasepool.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ipv4_leasepool",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetIpv4LeasepoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *IPv4Leasepool) GetIpv4LeasepoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_leasepool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_leasepool")
	}
	for _, ref := range m.GetIpv4Leasepool() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateIPv4Leasepool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIPv4Leasepool) Ipv4LeasepoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ipv4_leasepool")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ipv4_leasepool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ipv4_leasepool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ipv4_leasepool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateIPv4Leasepool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IPv4Leasepool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IPv4Leasepool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipv4_leasepool"]; exists {
		vOpts := append(opts, db.WithValidateField("ipv4_leasepool"))
		if err := fv(ctx, m.GetIpv4Leasepool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIPv4LeasepoolValidator = func() *ValidateIPv4Leasepool {
	v := &ValidateIPv4Leasepool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpv4Leasepool := v.Ipv4LeasepoolValidationRuleHandler
	rulesIpv4Leasepool := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhIpv4Leasepool(rulesIpv4Leasepool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IPv4Leasepool.ipv4_leasepool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv4_leasepool"] = vFn

	return v
}()

func IPv4LeasepoolValidator() db.Validator {
	return DefaultIPv4LeasepoolValidator
}

// augmented methods on protoc/std generated struct

func (m *IPv6Leasepool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IPv6Leasepool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IPv6Leasepool) DeepCopy() *IPv6Leasepool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IPv6Leasepool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IPv6Leasepool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IPv6Leasepool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IPv6LeasepoolValidator().Validate(ctx, m, opts...)
}

func (m *IPv6Leasepool) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetIpv6LeasepoolDRefInfo()

}

func (m *IPv6Leasepool) GetIpv6LeasepoolDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetIpv6Leasepool()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("IPv6Leasepool.ipv6_leasepool[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_leasepool.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ipv6_leasepool",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetIpv6LeasepoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *IPv6Leasepool) GetIpv6LeasepoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_leasepool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_leasepool")
	}
	for _, ref := range m.GetIpv6Leasepool() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateIPv6Leasepool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIPv6Leasepool) Ipv6LeasepoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ipv6_leasepool")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ipv6_leasepool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ipv6_leasepool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ipv6_leasepool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateIPv6Leasepool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IPv6Leasepool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IPv6Leasepool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipv6_leasepool"]; exists {
		vOpts := append(opts, db.WithValidateField("ipv6_leasepool"))
		if err := fv(ctx, m.GetIpv6Leasepool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIPv6LeasepoolValidator = func() *ValidateIPv6Leasepool {
	v := &ValidateIPv6Leasepool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpv6Leasepool := v.Ipv6LeasepoolValidationRuleHandler
	rulesIpv6Leasepool := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhIpv6Leasepool(rulesIpv6Leasepool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IPv6Leasepool.ipv6_leasepool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv6_leasepool"] = vFn

	return v
}()

func IPv6LeasepoolValidator() db.Validator {
	return DefaultIPv6LeasepoolValidator
}

// augmented methods on protoc/std generated struct

func (m *LeasePoolList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LeasePoolList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LeasePoolList) DeepCopy() *LeasePoolList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LeasePoolList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LeasePoolList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LeasePoolList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LeasePoolListValidator().Validate(ctx, m, opts...)
}

func (m *LeasePoolList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetIpaddressTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *LeasePoolList) GetIpaddressTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpaddressType() == nil {
		return nil, nil
	}
	switch m.GetIpaddressType().(type) {
	case *LeasePoolList_Ipv4Leasepool:

		drInfos, err := m.GetIpv4Leasepool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpv4Leasepool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipv4_leasepool." + dri.DRField
		}
		return drInfos, err

	case *LeasePoolList_Ipv6Leasepool:

		drInfos, err := m.GetIpv6Leasepool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpv6Leasepool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipv6_leasepool." + dri.DRField
		}
		return drInfos, err

	case *LeasePoolList_Ipv4Ipv6Leasepool:

		drInfos, err := m.GetIpv4Ipv6Leasepool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpv4Ipv6Leasepool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ipv4_ipv6_leasepool." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateLeasePoolList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLeasePoolList) IpaddressTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ipaddress_type")
	}
	return validatorFn, nil
}

func (v *ValidateLeasePoolList) IpaddressTypeIpv4LeasepoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return IPv4LeasepoolValidator().Validate, nil
}
func (v *ValidateLeasePoolList) IpaddressTypeIpv6LeasepoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return IPv6LeasepoolValidator().Validate, nil
}

func (v *ValidateLeasePoolList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LeasePoolList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LeasePoolList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipaddress_type"]; exists {
		val := m.GetIpaddressType()
		vOpts := append(opts,
			db.WithValidateField("ipaddress_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpaddressType().(type) {
	case *LeasePoolList_Ipv4Leasepool:
		if fv, exists := v.FldValidators["ipaddress_type.ipv4_leasepool"]; exists {
			val := m.GetIpaddressType().(*LeasePoolList_Ipv4Leasepool).Ipv4Leasepool
			vOpts := append(opts,
				db.WithValidateField("ipaddress_type"),
				db.WithValidateField("ipv4_leasepool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LeasePoolList_Ipv6Leasepool:
		if fv, exists := v.FldValidators["ipaddress_type.ipv6_leasepool"]; exists {
			val := m.GetIpaddressType().(*LeasePoolList_Ipv6Leasepool).Ipv6Leasepool
			vOpts := append(opts,
				db.WithValidateField("ipaddress_type"),
				db.WithValidateField("ipv6_leasepool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LeasePoolList_Ipv4Ipv6Leasepool:
		if fv, exists := v.FldValidators["ipaddress_type.ipv4_ipv6_leasepool"]; exists {
			val := m.GetIpaddressType().(*LeasePoolList_Ipv4Ipv6Leasepool).Ipv4Ipv6Leasepool
			vOpts := append(opts,
				db.WithValidateField("ipaddress_type"),
				db.WithValidateField("ipv4_ipv6_leasepool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLeasePoolListValidator = func() *ValidateLeasePoolList {
	v := &ValidateLeasePoolList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpaddressType := v.IpaddressTypeValidationRuleHandler
	rulesIpaddressType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpaddressType(rulesIpaddressType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LeasePoolList.ipaddress_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipaddress_type"] = vFn

	vrhIpaddressTypeIpv4Leasepool := v.IpaddressTypeIpv4LeasepoolValidationRuleHandler
	rulesIpaddressTypeIpv4Leasepool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["ipaddress_type.ipv4_leasepool"], err = vrhIpaddressTypeIpv4Leasepool(rulesIpaddressTypeIpv4Leasepool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field LeasePoolList.ipaddress_type_ipv4_leasepool: %s", err)
		panic(errMsg)
	}
	vrhIpaddressTypeIpv6Leasepool := v.IpaddressTypeIpv6LeasepoolValidationRuleHandler
	rulesIpaddressTypeIpv6Leasepool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["ipaddress_type.ipv6_leasepool"], err = vrhIpaddressTypeIpv6Leasepool(rulesIpaddressTypeIpv6Leasepool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field LeasePoolList.ipaddress_type_ipv6_leasepool: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ipaddress_type.ipv4_leasepool"] = vFnMap["ipaddress_type.ipv4_leasepool"]
	v.FldValidators["ipaddress_type.ipv6_leasepool"] = vFnMap["ipaddress_type.ipv6_leasepool"]

	v.FldValidators["ipaddress_type.ipv4_ipv6_leasepool"] = DualStackLeasePoolValidator().Validate

	return v
}()

func LeasePoolListValidator() db.Validator {
	return DefaultLeasePoolListValidator
}

// augmented methods on protoc/std generated struct

func (m *Policy) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Policy) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Policy) DeepCopy() *Policy {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Policy{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Policy) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Policy) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PolicyValidator().Validate(ctx, m, opts...)
}

func (m *Policy) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPolicyDRefInfo()

}

func (m *Policy) GetPolicyDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetPolicy()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("Policy.policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "uztna_policy_template.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "policy",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *Policy) GetPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "uztna_policy_template.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: uztna_policy_template")
	}
	for _, ref := range m.GetPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidatePolicy struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePolicy) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for policy")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePolicy) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Policy)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Policy got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policy"]; exists {
		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPolicyValidator = func() *ValidatePolicy {
	v := &ValidatePolicy{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Policy.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	return v
}()

func PolicyValidator() db.Validator {
	return DefaultPolicyValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAppVipPoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAppVipPoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCdnCeVhApiGwDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCdnCeVhApiGwDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCertDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGatewaysDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGatewaysDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLeasePoolDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLeasePoolDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAppVipPoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAppVipPool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAppVipPool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAppVipPool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "app_vip_pool." + dri.DRField
	}
	return drInfos, err

}

func (m *ReplaceSpecType) GetCdnCeVhApiGwDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCdnCeVhApiGw()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.cdn_ce_vh_api_gw[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_host.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "cdn_ce_vh_api_gw",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCdnCeVhApiGwDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetCdnCeVhApiGwDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_host.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_host")
	}
	for _, ref := range m.GetCdnCeVhApiGw() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetCertDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCert() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCert().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCert().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cert." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetGatewaysDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGateways() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGateways().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGateways().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "gateways." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLeasePoolDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLeasePool() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLeasePool().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLeasePool().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "lease_pool." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) LeasePoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for lease_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := LeasePoolListValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GatewaysValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gateways")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CertValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for cert")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CertificateValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) CdnCeVhApiGwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cdn_ce_vh_api_gw")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cdn_ce_vh_api_gw")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cdn_ce_vh_api_gw")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cdn_ce_vh_api_gw")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := PolicyValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) VipDnsProxyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vip_dns_proxy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AccessFqdnValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for access_fqdn")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AppVipSubnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for app_vip_subnet")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for app_vip_subnet")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated app_vip_subnet")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items app_vip_subnet")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_fqdn"]; exists {

		vOpts := append(opts, db.WithValidateField("access_fqdn"))
		if err := fv(ctx, m.GetAccessFqdn(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("app_vip_pool"))
		if err := fv(ctx, m.GetAppVipPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["app_vip_subnet"]; exists {
		vOpts := append(opts, db.WithValidateField("app_vip_subnet"))
		if err := fv(ctx, m.GetAppVipSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cdn_ce_vh_api_gw"]; exists {
		vOpts := append(opts, db.WithValidateField("cdn_ce_vh_api_gw"))
		if err := fv(ctx, m.GetCdnCeVhApiGw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cert"]; exists {

		vOpts := append(opts, db.WithValidateField("cert"))
		if err := fv(ctx, m.GetCert(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateways"]; exists {

		vOpts := append(opts, db.WithValidateField("gateways"))
		if err := fv(ctx, m.GetGateways(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("lease_pool"))
		if err := fv(ctx, m.GetLeasePool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_dns_proxy"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_dns_proxy"))
		if err := fv(ctx, m.GetVipDnsProxy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLeasePool := v.LeasePoolValidationRuleHandler
	rulesLeasePool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLeasePool(rulesLeasePool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.lease_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool"] = vFn

	vrhGateways := v.GatewaysValidationRuleHandler
	rulesGateways := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGateways(rulesGateways)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.gateways: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gateways"] = vFn

	vrhCert := v.CertValidationRuleHandler
	rulesCert := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCert(rulesCert)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cert: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cert"] = vFn

	vrhCdnCeVhApiGw := v.CdnCeVhApiGwValidationRuleHandler
	rulesCdnCeVhApiGw := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCdnCeVhApiGw(rulesCdnCeVhApiGw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cdn_ce_vh_api_gw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cdn_ce_vh_api_gw"] = vFn

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	vrhVipDnsProxy := v.VipDnsProxyValidationRuleHandler
	rulesVipDnsProxy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVipDnsProxy(rulesVipDnsProxy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.vip_dns_proxy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_dns_proxy"] = vFn

	vrhAccessFqdn := v.AccessFqdnValidationRuleHandler
	rulesAccessFqdn := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.max_bytes":      "1024",
		"ves.io.schema.rules.string.url_or_uri_ref": "true",
	}
	vFn, err = vrhAccessFqdn(rulesAccessFqdn)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.access_fqdn: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_fqdn"] = vFn

	vrhAppVipSubnet := v.AppVipSubnetValidationRuleHandler
	rulesAppVipSubnet := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.ip_prefix": "true",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhAppVipSubnet(rulesAppVipSubnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.app_vip_subnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_vip_subnet"] = vFn

	v.FldValidators["app_vip_pool"] = AppVIPPoolValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessFqdn = f.GetAccessFqdn()
	m.AppVipPool = f.GetAppVipPool()
	m.AppVipSubnet = f.GetAppVipSubnet()
	m.CdnCeVhApiGw = f.GetCdnCeVhApiGw()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.Policy = f.GetPolicy()
	m.VipDnsProxy = f.GetVipDnsProxy()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessFqdn = m1.AccessFqdn
	f.AppVipPool = m1.AppVipPool
	f.AppVipSubnet = m1.AppVipSubnet
	f.CdnCeVhApiGw = m1.CdnCeVhApiGw
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.Policy = m1.Policy
	f.VipDnsProxy = m1.VipDnsProxy
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessFqdn = f.GetAccessFqdn()
	m.AppVipPool = f.GetAppVipPool()
	m.AppVipSubnet = f.GetAppVipSubnet()
	m.CdnCeVhApiGw = f.GetCdnCeVhApiGw()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.Policy = f.GetPolicy()
	m.VipDnsProxy = f.GetVipDnsProxy()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessFqdn = m1.AccessFqdn
	f.AppVipPool = m1.AppVipPool
	f.AppVipSubnet = m1.AppVipSubnet
	f.CdnCeVhApiGw = m1.CdnCeVhApiGw
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.Policy = m1.Policy
	f.VipDnsProxy = m1.VipDnsProxy
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AccessFqdn = f.GetAccessFqdn()
	m.AppVipPool = f.GetAppVipPool()
	m.AppVipSubnet = f.GetAppVipSubnet()
	m.CdnCeVhApiGw = f.GetCdnCeVhApiGw()
	m.Cert = f.GetCert()
	m.Gateways = f.GetGateways()
	m.LeasePool = f.GetLeasePool()
	m.Policy = f.GetPolicy()
	m.VipDnsProxy = f.GetVipDnsProxy()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AccessFqdn = m1.AccessFqdn
	f.AppVipPool = m1.AppVipPool
	f.AppVipSubnet = m1.AppVipSubnet
	f.CdnCeVhApiGw = m1.CdnCeVhApiGw
	f.Cert = m1.Cert
	f.Gateways = m1.Gateways
	f.LeasePool = m1.LeasePool
	f.Policy = m1.Policy
	f.VipDnsProxy = m1.VipDnsProxy
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

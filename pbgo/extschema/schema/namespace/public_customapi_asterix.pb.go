// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/public_customapi_asterix.proto

// Namespace API
//
// x-displayName: "Namespace"
// APIs in this file are custom APIs on namespace object served by asterix

package namespace

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Api Endpoints stats request
//
// x-displayName: "Api Endpoints Stats Request"
// Request shape for GET Api Endpoints Stats
type ApiEndpointsStatsNSReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// List Of Virtual Hosts Name
	//
	// x-displayName: "List Of Virtual Hosts Name"
	// x-example: "blogging-app, test-app"
	// List of Virtual Hosts for current request
	// If the list is empty or not provided, it will return stats for all virtual hosts under the requested namespace.
	VhostsFilter []string `protobuf:"bytes,1,rep,name=vhosts_filter,json=vhostsFilter,proto3" json:"vhosts_filter,omitempty"`
	// Virtual Hosts Types Filter
	//
	// x-displayName: "Virtual Hosts Types Filter"
	// x-example: ["HTTP_LOAD_BALANCER", "CDN_LOAD_BALANCER"]
	// List of Virtual Hosts types for current request
	// If the list is empty or not provided, it will return stats for all virtual hosts under the requested namespace.
	VhostsTypesFilter []virtual_host.VirtualHostType `protobuf:"varint,3,rep,packed,name=vhosts_types_filter,json=vhostsTypesFilter,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"vhosts_types_filter,omitempty"`
}

func (m *ApiEndpointsStatsNSReq) Reset()      { *m = ApiEndpointsStatsNSReq{} }
func (*ApiEndpointsStatsNSReq) ProtoMessage() {}
func (*ApiEndpointsStatsNSReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d03a36da3cd3d47, []int{0}
}
func (m *ApiEndpointsStatsNSReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointsStatsNSReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiEndpointsStatsNSReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiEndpointsStatsNSReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointsStatsNSReq.Merge(m, src)
}
func (m *ApiEndpointsStatsNSReq) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointsStatsNSReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointsStatsNSReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointsStatsNSReq proto.InternalMessageInfo

func (m *ApiEndpointsStatsNSReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApiEndpointsStatsNSReq) GetVhostsFilter() []string {
	if m != nil {
		return m.VhostsFilter
	}
	return nil
}

func (m *ApiEndpointsStatsNSReq) GetVhostsTypesFilter() []virtual_host.VirtualHostType {
	if m != nil {
		return m.VhostsTypesFilter
	}
	return nil
}

// Api Endpoints stats all namespaces request
//
// x-displayName: "Api Endpoints Stats All Namespaces Request"
// Request shape for GET Api Endpoints Stats All Namespaces
type ApiEndpointsStatsAllNSReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ApiEndpointsStatsAllNSReq) Reset()      { *m = ApiEndpointsStatsAllNSReq{} }
func (*ApiEndpointsStatsAllNSReq) ProtoMessage() {}
func (*ApiEndpointsStatsAllNSReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d03a36da3cd3d47, []int{1}
}
func (m *ApiEndpointsStatsAllNSReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointsStatsAllNSReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiEndpointsStatsAllNSReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiEndpointsStatsAllNSReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointsStatsAllNSReq.Merge(m, src)
}
func (m *ApiEndpointsStatsAllNSReq) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointsStatsAllNSReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointsStatsAllNSReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointsStatsAllNSReq proto.InternalMessageInfo

func (m *ApiEndpointsStatsAllNSReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Api Endpoints stats Response
//
// x-displayName: "Api Endpoints Stats Response"
// Response shape for GET API endpoints Stats.
type ApiEndpointsStatsNSRsp struct {
	// number of endpoints
	//
	// x-displayName: "Total Endpoints"
	// total endpoints
	TotalEndpoints int32 `protobuf:"varint,1,opt,name=total_endpoints,json=totalEndpoints,proto3" json:"total_endpoints,omitempty"`
	// number of discovered endpoints
	//
	// x-displayName: "Discovered"
	// number of endpoints that categorized as discover
	Discovered int32 `protobuf:"varint,2,opt,name=discovered,proto3" json:"discovered,omitempty"`
	// number of inventory endpoints
	//
	// x-displayName: "Inventory"
	// number of endpoints that categorized as inventory
	Inventory int32 `protobuf:"varint,3,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// number of shadow endpoints
	//
	// x-displayName: "Shadow"
	// number of endpoints that categorized as shadow
	Shadow int32 `protobuf:"varint,4,opt,name=shadow,proto3" json:"shadow,omitempty"`
	// number of pii endpoints
	//
	// x-displayName: "PII Detected"
	//number of endpoints that detected with pii
	PiiDetected int32 `protobuf:"varint,5,opt,name=pii_detected,json=piiDetected,proto3" json:"pii_detected,omitempty"`
}

func (m *ApiEndpointsStatsNSRsp) Reset()      { *m = ApiEndpointsStatsNSRsp{} }
func (*ApiEndpointsStatsNSRsp) ProtoMessage() {}
func (*ApiEndpointsStatsNSRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d03a36da3cd3d47, []int{2}
}
func (m *ApiEndpointsStatsNSRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointsStatsNSRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiEndpointsStatsNSRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiEndpointsStatsNSRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointsStatsNSRsp.Merge(m, src)
}
func (m *ApiEndpointsStatsNSRsp) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointsStatsNSRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointsStatsNSRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointsStatsNSRsp proto.InternalMessageInfo

func (m *ApiEndpointsStatsNSRsp) GetTotalEndpoints() int32 {
	if m != nil {
		return m.TotalEndpoints
	}
	return 0
}

func (m *ApiEndpointsStatsNSRsp) GetDiscovered() int32 {
	if m != nil {
		return m.Discovered
	}
	return 0
}

func (m *ApiEndpointsStatsNSRsp) GetInventory() int32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

func (m *ApiEndpointsStatsNSRsp) GetShadow() int32 {
	if m != nil {
		return m.Shadow
	}
	return 0
}

func (m *ApiEndpointsStatsNSRsp) GetPiiDetected() int32 {
	if m != nil {
		return m.PiiDetected
	}
	return 0
}

func init() {
	proto.RegisterType((*ApiEndpointsStatsNSReq)(nil), "ves.io.schema.namespace.ApiEndpointsStatsNSReq")
	golang_proto.RegisterType((*ApiEndpointsStatsNSReq)(nil), "ves.io.schema.namespace.ApiEndpointsStatsNSReq")
	proto.RegisterType((*ApiEndpointsStatsAllNSReq)(nil), "ves.io.schema.namespace.ApiEndpointsStatsAllNSReq")
	golang_proto.RegisterType((*ApiEndpointsStatsAllNSReq)(nil), "ves.io.schema.namespace.ApiEndpointsStatsAllNSReq")
	proto.RegisterType((*ApiEndpointsStatsNSRsp)(nil), "ves.io.schema.namespace.ApiEndpointsStatsNSRsp")
	golang_proto.RegisterType((*ApiEndpointsStatsNSRsp)(nil), "ves.io.schema.namespace.ApiEndpointsStatsNSRsp")
}

func init() {
	proto.RegisterFile("ves.io/schema/namespace/public_customapi_asterix.proto", fileDescriptor_0d03a36da3cd3d47)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/namespace/public_customapi_asterix.proto", fileDescriptor_0d03a36da3cd3d47)
}

var fileDescriptor_0d03a36da3cd3d47 = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x8f, 0xdb, 0x44,
	0x14, 0xcf, 0x24, 0x4d, 0x20, 0xa6, 0x2d, 0xc2, 0x54, 0xc5, 0x0d, 0xab, 0x21, 0xf5, 0x4a, 0xb0,
	0x94, 0xda, 0x46, 0xe1, 0x4b, 0xe5, 0xb6, 0xe5, 0x5b, 0xa2, 0x05, 0x65, 0x51, 0x0f, 0x5c, 0xac,
	0x89, 0xfd, 0xe2, 0x4c, 0x71, 0x3c, 0x53, 0xcf, 0xd8, 0xbb, 0x11, 0x42, 0x42, 0x7b, 0xe1, 0x8a,
	0xe0, 0x9f, 0xe0, 0x4f, 0x40, 0xed, 0x65, 0x6f, 0xf4, 0x84, 0x56, 0xe5, 0x40, 0xb9, 0xb1, 0x0e,
	0x07, 0xb8, 0x2d, 0x12, 0x7f, 0x00, 0xf2, 0xc4, 0xf9, 0x70, 0x36, 0x51, 0x77, 0x6f, 0xf3, 0xde,
	0xef, 0xf7, 0x3e, 0x7e, 0xe3, 0x79, 0xcf, 0xda, 0xdb, 0x29, 0x08, 0x9b, 0x32, 0x47, 0x78, 0x03,
	0x18, 0x12, 0x27, 0x22, 0x43, 0x10, 0x9c, 0x78, 0xe0, 0xf0, 0xa4, 0x17, 0x52, 0xcf, 0xf5, 0x12,
	0x21, 0xd9, 0x90, 0x70, 0xea, 0x12, 0x21, 0x21, 0xa6, 0x7b, 0x36, 0x8f, 0x99, 0x64, 0xfa, 0x0b,
	0x93, 0x38, 0x7b, 0x12, 0x67, 0xcf, 0xe2, 0x5a, 0x56, 0x40, 0xe5, 0x20, 0xe9, 0xd9, 0x1e, 0x1b,
	0x3a, 0x01, 0x0b, 0x98, 0xa3, 0xf8, 0xbd, 0xa4, 0xaf, 0x2c, 0x65, 0xa8, 0xd3, 0x24, 0x4f, 0x6b,
	0x23, 0x60, 0x2c, 0x08, 0xc1, 0x21, 0x9c, 0x3a, 0x24, 0x8a, 0x98, 0x24, 0x92, 0xb2, 0x48, 0x14,
	0xe8, 0xe6, 0xba, 0xee, 0xe4, 0x88, 0xc3, 0x94, 0xf4, 0x62, 0x99, 0xc4, 0xf8, 0x62, 0x86, 0x2b,
	0x65, 0x70, 0x31, 0x6e, 0xa3, 0x0c, 0xa5, 0x24, 0xa4, 0x3e, 0x91, 0x50, 0xa0, 0xe6, 0x12, 0x0a,
	0x02, 0xa2, 0x74, 0x29, 0x79, 0x7b, 0x89, 0x43, 0x61, 0xd7, 0x2d, 0x33, 0x5e, 0x3a, 0xc9, 0x10,
	0xa5, 0x26, 0x5e, 0x5e, 0x26, 0xc4, 0x32, 0x21, 0xa1, 0x3b, 0x60, 0x42, 0x2e, 0xf2, 0xcc, 0x47,
	0x48, 0xbb, 0xbc, 0xcd, 0xe9, 0x07, 0x91, 0xcf, 0x19, 0x8d, 0xa4, 0xd8, 0x91, 0x44, 0x8a, 0xdb,
	0x3b, 0x5d, 0xb8, 0xa7, 0x6f, 0x68, 0xcd, 0xd9, 0xc5, 0x18, 0xd5, 0x36, 0xda, 0x6a, 0x76, 0xe7,
	0x0e, 0x7d, 0x53, 0xbb, 0x90, 0xe6, 0xd9, 0x84, 0xdb, 0xa7, 0xa1, 0x84, 0xd8, 0x40, 0xed, 0xda,
	0x56, 0xb3, 0x7b, 0x7e, 0xe2, 0xfc, 0x50, 0xf9, 0xf4, 0x44, 0x7b, 0xbe, 0x20, 0xa9, 0x9a, 0x53,
	0x6a, 0xad, 0x5d, 0xdb, 0xba, 0xd8, 0x79, 0xcd, 0x2e, 0x7f, 0xeb, 0xc5, 0x1e, 0xed, 0x3b, 0x13,
	0xe3, 0x63, 0x26, 0xe4, 0x17, 0x23, 0x0e, 0x37, 0x8d, 0xfb, 0xff, 0x1c, 0xd4, 0x9a, 0xfb, 0xa8,
	0xd1, 0x3a, 0x87, 0x1a, 0x4f, 0x3d, 0x9d, 0x5b, 0xf5, 0x1f, 0x50, 0xd5, 0x40, 0xdd, 0xe7, 0x26,
	0x15, 0x72, 0x56, 0x51, 0xd6, 0xbc, 0xa1, 0x5d, 0x39, 0xa1, 0x69, 0x3b, 0x0c, 0x57, 0xc8, 0x42,
	0x4b, 0xb2, 0xcc, 0xfb, 0x6b, 0xee, 0x43, 0x70, 0xfd, 0x15, 0xed, 0x59, 0xc9, 0x24, 0x09, 0x5d,
	0x98, 0x82, 0x2a, 0xbc, 0xde, 0xbd, 0xa8, 0xdc, 0xb3, 0x10, 0x1d, 0x6b, 0x9a, 0x4f, 0x85, 0xc7,
	0x52, 0x88, 0xc1, 0x57, 0x37, 0x57, 0xef, 0x2e, 0x78, 0xf2, 0x0e, 0x68, 0x94, 0x42, 0x24, 0x59,
	0x3c, 0x32, 0x6a, 0x0a, 0x9e, 0x3b, 0xf4, 0xcb, 0x5a, 0x43, 0x0c, 0x88, 0xcf, 0x76, 0x8d, 0x73,
	0x0a, 0x2a, 0x2c, 0xfd, 0xaa, 0x76, 0x9e, 0x53, 0xea, 0xfa, 0x20, 0xc1, 0x93, 0xe0, 0x1b, 0x75,
	0x85, 0x3e, 0xc3, 0x29, 0x7d, 0xbf, 0x70, 0x75, 0xfe, 0xad, 0x6b, 0x97, 0x6e, 0x4f, 0xa5, 0xdc,
	0xfa, 0xf4, 0x3d, 0x35, 0x63, 0xdb, 0x9f, 0x7f, 0xa2, 0xff, 0x8e, 0xb4, 0x0b, 0x3b, 0x49, 0x10,
	0x80, 0x90, 0x77, 0x48, 0x98, 0x80, 0xd0, 0x5f, 0xb5, 0xd7, 0x0c, 0x9a, 0x5d, 0xe2, 0x75, 0xe1,
	0x5e, 0xeb, 0xda, 0x69, 0xa9, 0x82, 0x9b, 0xec, 0xe1, 0xcf, 0x55, 0x94, 0xfd, 0x62, 0xe4, 0xef,
	0xda, 0xa2, 0xcc, 0x0a, 0x20, 0x82, 0x98, 0x84, 0x56, 0x0c, 0xc4, 0xbf, 0xde, 0xee, 0xbf, 0xb5,
	0xe7, 0x59, 0xbb, 0x84, 0x70, 0x8b, 0xf8, 0x29, 0x89, 0x3c, 0xf0, 0xad, 0x21, 0x8b, 0xa8, 0x64,
	0xf1, 0xfe, 0x6f, 0x7f, 0xfd, 0x58, 0xed, 0x98, 0x56, 0xb1, 0x1e, 0xe6, 0x13, 0x29, 0x9c, 0xaf,
	0x67, 0xe7, 0x6f, 0x1c, 0x31, 0x29, 0x68, 0xa5, 0xaa, 0xe2, 0xbb, 0xe8, 0x9a, 0xfe, 0x07, 0xd2,
	0x2e, 0x7d, 0x04, 0xf2, 0xc4, 0x27, 0xd3, 0x9d, 0xb5, 0x5d, 0xaf, 0x7e, 0xee, 0xad, 0xb3, 0x05,
	0x08, 0x6e, 0xba, 0x85, 0xd6, 0xd6, 0x5c, 0x96, 0x90, 0x24, 0xf2, 0x49, 0x5c, 0x96, 0xf5, 0x8e,
	0xd9, 0x79, 0x82, 0xac, 0x7c, 0x0d, 0xce, 0x1e, 0x95, 0x23, 0xf2, 0x12, 0xb9, 0xb6, 0xff, 0x90,
	0x76, 0x75, 0x95, 0xb6, 0xfc, 0x29, 0xcf, 0x12, 0xe9, 0x9d, 0xd3, 0xf7, 0x3d, 0x9d, 0x81, 0xb3,
	0x6b, 0xbd, 0x5b, 0x68, 0xdd, 0x5c, 0xa1, 0x95, 0x84, 0xa1, 0x15, 0x09, 0xcb, 0x27, 0x62, 0xd0,
	0x63, 0x24, 0xf6, 0x95, 0xe8, 0x1b, 0xe6, 0x9b, 0x2b, 0x44, 0x8b, 0x91, 0x90, 0x30, 0x5c, 0xd2,
	0x4b, 0xc2, 0xd0, 0x8d, 0x84, 0x3b, 0x95, 0xdd, 0xba, 0x7e, 0xf0, 0x00, 0xd5, 0x1e, 0x3d, 0x40,
	0x78, 0x5d, 0x8f, 0x9f, 0xf5, 0xee, 0x82, 0x27, 0xf7, 0x7f, 0x35, 0xaa, 0xaf, 0xa3, 0x9b, 0xdf,
	0xa1, 0xc3, 0x23, 0x5c, 0x79, 0x7c, 0x84, 0x2b, 0xc7, 0x47, 0x18, 0x7d, 0x9b, 0x61, 0xf4, 0x53,
	0x86, 0xd1, 0xc3, 0x0c, 0xa3, 0xc3, 0x0c, 0xa3, 0x3f, 0x33, 0x8c, 0xfe, 0xce, 0x70, 0xe5, 0x38,
	0xc3, 0xe8, 0xfb, 0x31, 0xae, 0x1c, 0x8c, 0x31, 0x3a, 0x1c, 0xe3, 0xca, 0xe3, 0x31, 0xae, 0x7c,
	0x79, 0x2b, 0x60, 0xfc, 0xab, 0xc0, 0x4e, 0x59, 0xbe, 0x34, 0x62, 0x62, 0x27, 0xc2, 0x51, 0x87,
	0x3e, 0x8b, 0x87, 0x16, 0x8f, 0x59, 0x4a, 0x7d, 0x88, 0xad, 0x29, 0xec, 0xf0, 0x5e, 0xc0, 0x1c,
	0xd8, 0x93, 0xc5, 0x4a, 0x5d, 0xfe, 0x77, 0xf4, 0x1a, 0x6a, 0xa3, 0xbe, 0xf1, 0x7f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa2, 0x75, 0x58, 0x48, 0xfb, 0x06, 0x00, 0x00,
}

func (this *ApiEndpointsStatsNSReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointsStatsNSReq)
	if !ok {
		that2, ok := that.(ApiEndpointsStatsNSReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.VhostsFilter) != len(that1.VhostsFilter) {
		return false
	}
	for i := range this.VhostsFilter {
		if this.VhostsFilter[i] != that1.VhostsFilter[i] {
			return false
		}
	}
	if len(this.VhostsTypesFilter) != len(that1.VhostsTypesFilter) {
		return false
	}
	for i := range this.VhostsTypesFilter {
		if this.VhostsTypesFilter[i] != that1.VhostsTypesFilter[i] {
			return false
		}
	}
	return true
}
func (this *ApiEndpointsStatsAllNSReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointsStatsAllNSReq)
	if !ok {
		that2, ok := that.(ApiEndpointsStatsAllNSReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ApiEndpointsStatsNSRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointsStatsNSRsp)
	if !ok {
		that2, ok := that.(ApiEndpointsStatsNSRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalEndpoints != that1.TotalEndpoints {
		return false
	}
	if this.Discovered != that1.Discovered {
		return false
	}
	if this.Inventory != that1.Inventory {
		return false
	}
	if this.Shadow != that1.Shadow {
		return false
	}
	if this.PiiDetected != that1.PiiDetected {
		return false
	}
	return true
}
func (this *ApiEndpointsStatsNSReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.ApiEndpointsStatsNSReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "VhostsFilter: "+fmt.Sprintf("%#v", this.VhostsFilter)+",\n")
	s = append(s, "VhostsTypesFilter: "+fmt.Sprintf("%#v", this.VhostsTypesFilter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointsStatsAllNSReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.ApiEndpointsStatsAllNSReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointsStatsNSRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&namespace.ApiEndpointsStatsNSRsp{")
	s = append(s, "TotalEndpoints: "+fmt.Sprintf("%#v", this.TotalEndpoints)+",\n")
	s = append(s, "Discovered: "+fmt.Sprintf("%#v", this.Discovered)+",\n")
	s = append(s, "Inventory: "+fmt.Sprintf("%#v", this.Inventory)+",\n")
	s = append(s, "Shadow: "+fmt.Sprintf("%#v", this.Shadow)+",\n")
	s = append(s, "PiiDetected: "+fmt.Sprintf("%#v", this.PiiDetected)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapiAsterix(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NamespaceMLCustomAPIClient is the client API for NamespaceMLCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamespaceMLCustomAPIClient interface {
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// Returns suggested values for the specified field in the given Create/Replace/Custom request
	SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error)
	// Get Api Endpoints Stats for Namespace
	//
	// x-displayName: "Get Api Endpoints Stats for Namespace"
	// Get api endpoints stats for the given Namespace
	GetApiEndpointsStats(ctx context.Context, in *ApiEndpointsStatsNSReq, opts ...grpc.CallOption) (*ApiEndpointsStatsNSRsp, error)
	// Get Api Endpoints Stats for All Namespaces
	//
	// x-displayName: "Get Api Endpoints Stats for All Namespaces"
	// Get api endpoints stats for all Namespaces. This API is specific to system namespace
	GetApiEndpointsStatsAllNamespaces(ctx context.Context, in *ApiEndpointsStatsAllNSReq, opts ...grpc.CallOption) (*ApiEndpointsStatsNSRsp, error)
}

type namespaceMLCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceMLCustomAPIClient(cc *grpc.ClientConn) NamespaceMLCustomAPIClient {
	return &namespaceMLCustomAPIClient{cc}
}

func (c *namespaceMLCustomAPIClient) SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error) {
	out := new(SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceMLCustomAPI/SuggestValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceMLCustomAPIClient) GetApiEndpointsStats(ctx context.Context, in *ApiEndpointsStatsNSReq, opts ...grpc.CallOption) (*ApiEndpointsStatsNSRsp, error) {
	out := new(ApiEndpointsStatsNSRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceMLCustomAPI/GetApiEndpointsStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceMLCustomAPIClient) GetApiEndpointsStatsAllNamespaces(ctx context.Context, in *ApiEndpointsStatsAllNSReq, opts ...grpc.CallOption) (*ApiEndpointsStatsNSRsp, error) {
	out := new(ApiEndpointsStatsNSRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceMLCustomAPI/GetApiEndpointsStatsAllNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceMLCustomAPIServer is the server API for NamespaceMLCustomAPI service.
type NamespaceMLCustomAPIServer interface {
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// Returns suggested values for the specified field in the given Create/Replace/Custom request
	SuggestValues(context.Context, *SuggestValuesReq) (*SuggestValuesResp, error)
	// Get Api Endpoints Stats for Namespace
	//
	// x-displayName: "Get Api Endpoints Stats for Namespace"
	// Get api endpoints stats for the given Namespace
	GetApiEndpointsStats(context.Context, *ApiEndpointsStatsNSReq) (*ApiEndpointsStatsNSRsp, error)
	// Get Api Endpoints Stats for All Namespaces
	//
	// x-displayName: "Get Api Endpoints Stats for All Namespaces"
	// Get api endpoints stats for all Namespaces. This API is specific to system namespace
	GetApiEndpointsStatsAllNamespaces(context.Context, *ApiEndpointsStatsAllNSReq) (*ApiEndpointsStatsNSRsp, error)
}

// UnimplementedNamespaceMLCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNamespaceMLCustomAPIServer struct {
}

func (*UnimplementedNamespaceMLCustomAPIServer) SuggestValues(ctx context.Context, req *SuggestValuesReq) (*SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestValues not implemented")
}
func (*UnimplementedNamespaceMLCustomAPIServer) GetApiEndpointsStats(ctx context.Context, req *ApiEndpointsStatsNSReq) (*ApiEndpointsStatsNSRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiEndpointsStats not implemented")
}
func (*UnimplementedNamespaceMLCustomAPIServer) GetApiEndpointsStatsAllNamespaces(ctx context.Context, req *ApiEndpointsStatsAllNSReq) (*ApiEndpointsStatsNSRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiEndpointsStatsAllNamespaces not implemented")
}

func RegisterNamespaceMLCustomAPIServer(s *grpc.Server, srv NamespaceMLCustomAPIServer) {
	s.RegisterService(&_NamespaceMLCustomAPI_serviceDesc, srv)
}

func _NamespaceMLCustomAPI_SuggestValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceMLCustomAPIServer).SuggestValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceMLCustomAPI/SuggestValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceMLCustomAPIServer).SuggestValues(ctx, req.(*SuggestValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceMLCustomAPI_GetApiEndpointsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiEndpointsStatsNSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceMLCustomAPIServer).GetApiEndpointsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceMLCustomAPI/GetApiEndpointsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceMLCustomAPIServer).GetApiEndpointsStats(ctx, req.(*ApiEndpointsStatsNSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceMLCustomAPI_GetApiEndpointsStatsAllNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiEndpointsStatsAllNSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceMLCustomAPIServer).GetApiEndpointsStatsAllNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceMLCustomAPI/GetApiEndpointsStatsAllNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceMLCustomAPIServer).GetApiEndpointsStatsAllNamespaces(ctx, req.(*ApiEndpointsStatsAllNSReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceMLCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.namespace.NamespaceMLCustomAPI",
	HandlerType: (*NamespaceMLCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestValues",
			Handler:    _NamespaceMLCustomAPI_SuggestValues_Handler,
		},
		{
			MethodName: "GetApiEndpointsStats",
			Handler:    _NamespaceMLCustomAPI_GetApiEndpointsStats_Handler,
		},
		{
			MethodName: "GetApiEndpointsStatsAllNamespaces",
			Handler:    _NamespaceMLCustomAPI_GetApiEndpointsStatsAllNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/namespace/public_customapi_asterix.proto",
}

func (m *ApiEndpointsStatsNSReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointsStatsNSReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointsStatsNSReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VhostsTypesFilter) > 0 {
		dAtA2 := make([]byte, len(m.VhostsTypesFilter)*10)
		var j1 int
		for _, num := range m.VhostsTypesFilter {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VhostsFilter) > 0 {
		for iNdEx := len(m.VhostsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VhostsFilter[iNdEx])
			copy(dAtA[i:], m.VhostsFilter[iNdEx])
			i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(len(m.VhostsFilter[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointsStatsAllNSReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointsStatsAllNSReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointsStatsAllNSReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointsStatsNSRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointsStatsNSRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointsStatsNSRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PiiDetected != 0 {
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(m.PiiDetected))
		i--
		dAtA[i] = 0x28
	}
	if m.Shadow != 0 {
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(m.Shadow))
		i--
		dAtA[i] = 0x20
	}
	if m.Inventory != 0 {
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(m.Inventory))
		i--
		dAtA[i] = 0x18
	}
	if m.Discovered != 0 {
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(m.Discovered))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalEndpoints != 0 {
		i = encodeVarintPublicCustomapiAsterix(dAtA, i, uint64(m.TotalEndpoints))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapiAsterix(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapiAsterix(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiEndpointsStatsNSReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VhostsFilter) > 0 {
		for _, s := range m.VhostsFilter {
			l = len(s)
			n += 1 + l + sovPublicCustomapiAsterix(uint64(l))
		}
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAsterix(uint64(l))
	}
	if len(m.VhostsTypesFilter) > 0 {
		l = 0
		for _, e := range m.VhostsTypesFilter {
			l += sovPublicCustomapiAsterix(uint64(e))
		}
		n += 1 + sovPublicCustomapiAsterix(uint64(l)) + l
	}
	return n
}

func (m *ApiEndpointsStatsAllNSReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAsterix(uint64(l))
	}
	return n
}

func (m *ApiEndpointsStatsNSRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalEndpoints != 0 {
		n += 1 + sovPublicCustomapiAsterix(uint64(m.TotalEndpoints))
	}
	if m.Discovered != 0 {
		n += 1 + sovPublicCustomapiAsterix(uint64(m.Discovered))
	}
	if m.Inventory != 0 {
		n += 1 + sovPublicCustomapiAsterix(uint64(m.Inventory))
	}
	if m.Shadow != 0 {
		n += 1 + sovPublicCustomapiAsterix(uint64(m.Shadow))
	}
	if m.PiiDetected != 0 {
		n += 1 + sovPublicCustomapiAsterix(uint64(m.PiiDetected))
	}
	return n
}

func sovPublicCustomapiAsterix(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapiAsterix(x uint64) (n int) {
	return sovPublicCustomapiAsterix(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApiEndpointsStatsNSReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointsStatsNSReq{`,
		`VhostsFilter:` + fmt.Sprintf("%v", this.VhostsFilter) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`VhostsTypesFilter:` + fmt.Sprintf("%v", this.VhostsTypesFilter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointsStatsAllNSReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointsStatsAllNSReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointsStatsNSRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointsStatsNSRsp{`,
		`TotalEndpoints:` + fmt.Sprintf("%v", this.TotalEndpoints) + `,`,
		`Discovered:` + fmt.Sprintf("%v", this.Discovered) + `,`,
		`Inventory:` + fmt.Sprintf("%v", this.Inventory) + `,`,
		`Shadow:` + fmt.Sprintf("%v", this.Shadow) + `,`,
		`PiiDetected:` + fmt.Sprintf("%v", this.PiiDetected) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapiAsterix(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApiEndpointsStatsNSReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAsterix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointsStatsNSReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointsStatsNSReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VhostsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VhostsFilter = append(m.VhostsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v virtual_host.VirtualHostType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapiAsterix
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= virtual_host.VirtualHostType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VhostsTypesFilter = append(m.VhostsTypesFilter, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapiAsterix
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomapiAsterix
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomapiAsterix
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.VhostsTypesFilter) == 0 {
					m.VhostsTypesFilter = make([]virtual_host.VirtualHostType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v virtual_host.VirtualHostType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapiAsterix
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= virtual_host.VirtualHostType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VhostsTypesFilter = append(m.VhostsTypesFilter, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VhostsTypesFilter", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAsterix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointsStatsAllNSReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAsterix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointsStatsAllNSReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointsStatsAllNSReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAsterix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointsStatsNSRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAsterix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointsStatsNSRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointsStatsNSRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEndpoints", wireType)
			}
			m.TotalEndpoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEndpoints |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discovered", wireType)
			}
			m.Discovered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discovered |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			m.Inventory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inventory |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shadow", wireType)
			}
			m.Shadow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shadow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiiDetected", wireType)
			}
			m.PiiDetected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PiiDetected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAsterix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAsterix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapiAsterix(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapiAsterix
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAsterix
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapiAsterix
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapiAsterix
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapiAsterix
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapiAsterix        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapiAsterix          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapiAsterix = fmt.Errorf("proto: unexpected end of group")
)

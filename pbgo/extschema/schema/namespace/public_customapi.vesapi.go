//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package namespace

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCCascadeDelete(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.CascadeDeleteRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CascadeDelete(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCEvaluateAPIAccess(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &EvaluateAPIAccessReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.EvaluateAPIAccessReq", yamlReq)
	}
	rsp, err := c.grpcClient.EvaluateAPIAccess(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCUpdateAllowAdvertiseOnPublic(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UpdateAllowAdvertiseOnPublicReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq", yamlReq)
	}
	rsp, err := c.grpcClient.UpdateAllowAdvertiseOnPublic(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["EvaluateAPIAccess"] = ccl.doRPCEvaluateAPIAccess

	rpcFns["UpdateAllowAdvertiseOnPublic"] = ccl.doRPCUpdateAllowAdvertiseOnPublic

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCCascadeDelete(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.CascadeDeleteRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CascadeDeleteResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.namespace.CascadeDeleteResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCEvaluateAPIAccess(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &EvaluateAPIAccessReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.EvaluateAPIAccessReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("item_lists", fmt.Sprintf("%v", req.ItemLists))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &EvaluateAPIAccessResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.namespace.EvaluateAPIAccessResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCUpdateAllowAdvertiseOnPublic(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UpdateAllowAdvertiseOnPublicReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("allow_advertise_on_public", fmt.Sprintf("%v", req.AllowAdvertiseOnPublic))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &UpdateAllowAdvertiseOnPublicResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["EvaluateAPIAccess"] = ccl.doRPCEvaluateAPIAccess

	rpcFns["UpdateAllowAdvertiseOnPublic"] = ccl.doRPCUpdateAllowAdvertiseOnPublic

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type CustomAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomAPIInprocClient) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.namespace.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *CascadeDeleteResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.namespace.CascadeDeleteRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.CascadeDelete' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.namespace.CustomAPI.CascadeDelete"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CascadeDelete(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.namespace.CascadeDeleteResponse", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) EvaluateAPIAccess(ctx context.Context, in *EvaluateAPIAccessReq, opts ...grpc.CallOption) (*EvaluateAPIAccessResp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.namespace.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *EvaluateAPIAccessResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.namespace.EvaluateAPIAccessReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.EvaluateAPIAccess' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.namespace.CustomAPI.EvaluateAPIAccess"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.EvaluateAPIAccess(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.namespace.EvaluateAPIAccessResp", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) UpdateAllowAdvertiseOnPublic(ctx context.Context, in *UpdateAllowAdvertiseOnPublicReq, opts ...grpc.CallOption) (*UpdateAllowAdvertiseOnPublicResp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.namespace.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *UpdateAllowAdvertiseOnPublicResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.UpdateAllowAdvertiseOnPublic' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.namespace.CustomAPI.UpdateAllowAdvertiseOnPublic"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.UpdateAllowAdvertiseOnPublic(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp", rsp)...)

	return rsp, nil
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &CustomAPIInprocClient{svc: svc}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Namespace API",
        "description": "This API can be used to delete all configuration objects within a namespace in a single API.\nNote: this operation cannot be reversed so please use with caution.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/system/evaluate-api-access": {
            "post": {
                "summary": "EvaluateAPIAccess",
                "description": "EvaluateAPIAccess can evaluate multiple lists of API url, method under a namesapce for a given user of a tenant.",
                "operationId": "ves.io.schema.namespace.CustomAPI.EvaluateAPIAccess",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceEvaluateAPIAccessResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceEvaluateAPIAccessReq"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-CustomAPI-EvaluateAPIAccess"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.CustomAPI.EvaluateAPIAccess"
            },
            "x-displayname": "CustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/update_allow_advertise_on_public": {
            "post": {
                "summary": "UpdateAllowAdvertiseOnPublic",
                "description": "UpdateAllowAdvertiseOnPublic can update a config to allow advertise on public.",
                "operationId": "ves.io.schema.namespace.CustomAPI.UpdateAllowAdvertiseOnPublic",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceUpdateAllowAdvertiseOnPublicResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceUpdateAllowAdvertiseOnPublicReq"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-CustomAPI-UpdateAllowAdvertiseOnPublic"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.CustomAPI.UpdateAllowAdvertiseOnPublic"
            },
            "x-displayname": "CustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{name}/cascade_delete": {
            "post": {
                "summary": "CascadeDelete",
                "description": "CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.\nunder it. Use this only if the entire namespace and its contents are to be wiped out.",
                "operationId": "ves.io.schema.namespace.CustomAPI.CascadeDelete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceCascadeDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"value\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceCascadeDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-CustomAPI-CascadeDelete"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.CustomAPI.CascadeDelete"
            },
            "x-displayname": "CustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "namespaceAPIItem": {
            "type": "object",
            "description": "An item for which API access needs to be checked - used in request and response\nThe result field is ignored when processing requests",
            "title": "APIItem",
            "x-displayname": "API Item",
            "x-ves-proto-message": "ves.io.schema.namespace.APIItem",
            "properties": {
                "method": {
                    "type": "string",
                    "description": " HTTP request method\n\nExample: - \"GET\"-",
                    "title": "method",
                    "x-displayname": "Method",
                    "x-ves-example": "GET"
                },
                "path": {
                    "type": "string",
                    "description": " HTTP request URL path\n\nExample: - \"/api/web/namespaces\"-",
                    "title": "path",
                    "x-displayname": "Path",
                    "x-ves-example": "/api/web/namespaces"
                },
                "result": {
                    "type": "boolean",
                    "description": " Result after evaluation ",
                    "title": "result",
                    "format": "boolean",
                    "x-displayname": "Result"
                }
            }
        },
        "namespaceAPIItemList": {
            "type": "object",
            "description": "An list of items for which API access needs to be checked  - used in request and response\nresult will show combined AND output from the result of individual api items.",
            "title": "APIItemList",
            "x-displayname": "API Item List",
            "x-ves-proto-message": "ves.io.schema.namespace.APIItemList",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " List of APIItem entries",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/namespaceAPIItem"
                    },
                    "x-displayname": "Items"
                },
                "list_id": {
                    "type": "string",
                    "description": " Identifier group items\n\nExample: - \"value\"-",
                    "title": "list_id",
                    "x-displayname": "List ID",
                    "x-ves-example": "value"
                },
                "result": {
                    "type": "boolean",
                    "description": " Combined result after evaluation of items",
                    "title": "result",
                    "format": "boolean",
                    "x-displayname": "Result"
                }
            }
        },
        "namespaceCascadeDeleteItemType": {
            "type": "object",
            "description": "CascadeDeleteItemType is details of object that was handled as part of cascade delete\nof namespace and whether it was successfully deleted",
            "title": "CascadeDeleteItemType",
            "x-displayname": "Cascade Delete Item",
            "x-ves-proto-message": "ves.io.schema.namespace.CascadeDeleteItemType",
            "properties": {
                "error_message": {
                    "type": "string",
                    "description": " A description of the error encountered (if any) in the process of cascade deletion\n\nExample: - \"value\"-",
                    "title": "error_message",
                    "x-displayname": "Error",
                    "x-ves-example": "value"
                },
                "object_name": {
                    "type": "string",
                    "description": " Name of the configuration object that was deleted\n\nExample: - \"value\"-",
                    "title": "object_name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                },
                "object_type": {
                    "type": "string",
                    "description": " The type of the contained configuration object in the namespace that was deleted\n\nExample: - \"ves.io.schema.virtual_host.Object\"-",
                    "title": "object_type",
                    "x-displayname": "Type",
                    "x-ves-example": "ves.io.schema.virtual_host.Object"
                },
                "object_uid": {
                    "type": "string",
                    "description": " The UID identifier of the configuration object that was deleted\n\nExample: - \"value\"-",
                    "title": "object_uid",
                    "x-displayname": "UID",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceCascadeDeleteRequest": {
            "type": "object",
            "description": "CascadeDeleteRequest contains the name of the namespace that has to be deleted\nalong with the objects configured under the namespace",
            "title": "CascadeDeleteRequest",
            "x-displayname": "Cascade Delete Request",
            "x-ves-proto-message": "ves.io.schema.namespace.CascadeDeleteRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"value\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceCascadeDeleteResponse": {
            "type": "object",
            "description": "CascadeDeleteResponse contains a list of objects in the namespace that were\ndeleted (or encountered an error while deleting)",
            "title": "CascadeDeleteResponse",
            "x-displayname": "Cascade Delete Response",
            "x-ves-proto-message": "ves.io.schema.namespace.CascadeDeleteResponse",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " The objects deleted in namespace",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/namespaceCascadeDeleteItemType"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "namespaceEvaluateAPIAccessReq": {
            "type": "object",
            "description": "Request body of EvaluateAPIAccess request",
            "title": "EvaluateAPIAccessReq",
            "x-displayname": "Request for EvaluateAPIAccess",
            "x-ves-proto-message": "ves.io.schema.namespace.EvaluateAPIAccessReq",
            "properties": {
                "item_lists": {
                    "type": "array",
                    "description": " List of APIItemList entries",
                    "title": "item_lists",
                    "items": {
                        "$ref": "#/definitions/namespaceAPIItemList"
                    },
                    "x-displayname": "Item Lists"
                },
                "namespace": {
                    "type": "string",
                    "description": " Name of the namespace under which all the URLs in APIItems will be evaluated\n\nExample: - \"value\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceEvaluateAPIAccessResp": {
            "type": "object",
            "description": "Response body of EvaluateAPIAccess request",
            "title": "EvaluateAPIAccessResp",
            "x-displayname": "Response for EvaluateAPIAccess",
            "x-ves-proto-message": "ves.io.schema.namespace.EvaluateAPIAccessResp",
            "properties": {
                "item_lists": {
                    "type": "array",
                    "description": " List of APIItemList entries",
                    "title": "item_lists",
                    "items": {
                        "$ref": "#/definitions/namespaceAPIItemList"
                    },
                    "x-displayname": "Item Lists"
                }
            }
        },
        "namespacePublicAdvertiseChoice": {
            "type": "string",
            "description": "Enum for advertisement choise on public.\n\nInherit tenant's default.\nEnable enables advertisement on public.\nDisable disables advertisement on public.",
            "title": "PublicAdvertiseChoice",
            "enum": [
                "Default",
                "Enable",
                "Disable"
            ],
            "default": "Default",
            "x-displayname": "PublicAdvertiseChoice",
            "x-ves-proto-enum": "ves.io.schema.namespace.PublicAdvertiseChoice"
        },
        "namespaceUpdateAllowAdvertiseOnPublicReq": {
            "type": "object",
            "description": "Request body of UpdateAllowAdvertiseOnPublic request",
            "title": "UpdateAllowAdvertiseOnPublicReq",
            "x-displayname": "Request for UpdateAllowAdvertiseOnPublic",
            "x-ves-proto-message": "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq",
            "properties": {
                "allow_advertise_on_public": {
                    "description": " Config choice to allow advertisement on the public.",
                    "$ref": "#/definitions/namespacePublicAdvertiseChoice",
                    "x-displayname": "Allow advertisement on public."
                },
                "namespace": {
                    "type": "string",
                    "description": " Name of the namespace under which all the URLs in APIItems will be evaluated\n\nExample: - \"value\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceUpdateAllowAdvertiseOnPublicResp": {
            "type": "object",
            "description": "Response body of UpdateAllowAdvertiseOnPublic request",
            "title": "UpdateAllowAdvertiseOnPublicResp",
            "x-displayname": "Response for UpdateAllowAdvertiseOnPublic",
            "x-ves-proto-message": "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp",
            "properties": {
                "result": {
                    "type": "boolean",
                    "description": " API result. ",
                    "title": "result",
                    "format": "boolean",
                    "x-displayname": "Result"
                }
            }
        }
    },
    "x-displayname": "Namespace",
    "x-ves-proto-file": "ves.io/schema/namespace/public_customapi.proto"
}`

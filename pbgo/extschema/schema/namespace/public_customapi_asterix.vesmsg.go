// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package namespace

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsAllNSReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsAllNSReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsAllNSReq) DeepCopy() *ApiEndpointsStatsAllNSReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsAllNSReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsAllNSReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsAllNSReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsAllNSReqValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsAllNSReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsAllNSReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsAllNSReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsAllNSReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsAllNSReqValidator = func() *ValidateApiEndpointsStatsAllNSReq {
	v := &ValidateApiEndpointsStatsAllNSReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApiEndpointsStatsAllNSReqValidator() db.Validator {
	return DefaultApiEndpointsStatsAllNSReqValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsNSReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsNSReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsNSReq) DeepCopy() *ApiEndpointsStatsNSReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsNSReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsNSReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsNSReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsNSReqValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsNSReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsNSReq) VhostsTypesFilterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_virtual_host.VirtualHostType)
		return int32(i)
	}
	// ves_io_schema_virtual_host.VirtualHostType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_virtual_host.VirtualHostType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vhosts_types_filter")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_virtual_host.VirtualHostType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vhosts_types_filter")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_virtual_host.VirtualHostType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_virtual_host.VirtualHostType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vhosts_types_filter")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vhosts_types_filter")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiEndpointsStatsNSReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsNSReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsNSReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vhosts_filter"]; exists {

		vOpts := append(opts, db.WithValidateField("vhosts_filter"))
		for idx, item := range m.GetVhostsFilter() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vhosts_types_filter"]; exists {
		vOpts := append(opts, db.WithValidateField("vhosts_types_filter"))
		if err := fv(ctx, m.GetVhostsTypesFilter(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsNSReqValidator = func() *ValidateApiEndpointsStatsNSReq {
	v := &ValidateApiEndpointsStatsNSReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVhostsTypesFilter := v.VhostsTypesFilterValidationRuleHandler
	rulesVhostsTypesFilter := map[string]string{
		"ves.io.schema.rules.enum.in":         "[1,6,7,8]",
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhVhostsTypesFilter(rulesVhostsTypesFilter)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiEndpointsStatsNSReq.vhosts_types_filter: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vhosts_types_filter"] = vFn

	return v
}()

func ApiEndpointsStatsNSReqValidator() db.Validator {
	return DefaultApiEndpointsStatsNSReqValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsNSRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsNSRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsNSRsp) DeepCopy() *ApiEndpointsStatsNSRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsNSRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsNSRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsNSRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsNSRspValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsNSRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsNSRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsNSRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsNSRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovered"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered"))
		if err := fv(ctx, m.GetDiscovered(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inventory"]; exists {

		vOpts := append(opts, db.WithValidateField("inventory"))
		if err := fv(ctx, m.GetInventory(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pii_detected"]; exists {

		vOpts := append(opts, db.WithValidateField("pii_detected"))
		if err := fv(ctx, m.GetPiiDetected(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shadow"]; exists {

		vOpts := append(opts, db.WithValidateField("shadow"))
		if err := fv(ctx, m.GetShadow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["total_endpoints"]; exists {

		vOpts := append(opts, db.WithValidateField("total_endpoints"))
		if err := fv(ctx, m.GetTotalEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsNSRspValidator = func() *ValidateApiEndpointsStatsNSRsp {
	v := &ValidateApiEndpointsStatsNSRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApiEndpointsStatsNSRspValidator() db.Validator {
	return DefaultApiEndpointsStatsNSRspValidator
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package namespace

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create NamespaceCustomAPI GRPC Client satisfying server.CustomClient
type NamespaceCustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient NamespaceCustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *NamespaceCustomAPIGrpcClient) doRPCAllApplicationInventory(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &AllApplicationInventoryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.AllApplicationInventoryRequest", yamlReq)
	}
	rsp, err := c.grpcClient.AllApplicationInventory(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCAllApplicationInventoryWaf(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &AllApplicationInventoryWafFilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest", yamlReq)
	}
	rsp, err := c.grpcClient.AllApplicationInventoryWaf(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCApplicationInventory(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ApplicationInventoryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.ApplicationInventoryRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ApplicationInventory(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCCascadeDelete(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.CascadeDeleteRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CascadeDelete(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCGetActiveAlertPolicies(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetActiveAlertPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetActiveAlertPoliciesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetActiveAlertPolicies(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCGetActiveNetworkPolicies(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetActiveNetworkPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetActiveNetworkPoliciesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetActiveNetworkPolicies(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCGetActiveServicePolicies(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetActiveServicePoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetActiveServicePoliciesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetActiveServicePolicies(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCGetFastACLsForInternetVIPs(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetFastACLsForInternetVIPsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetFastACLsForInternetVIPs(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCNetworkingInventory(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &NetworkingInventoryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.NetworkingInventoryRequest", yamlReq)
	}
	rsp, err := c.grpcClient.NetworkingInventory(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCSetActiveAlertPolicies(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetActiveAlertPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetActiveAlertPoliciesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SetActiveAlertPolicies(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCSetActiveNetworkPolicies(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetActiveNetworkPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetActiveNetworkPoliciesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SetActiveNetworkPolicies(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCSetActiveServicePolicies(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetActiveServicePoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetActiveServicePoliciesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SetActiveServicePolicies(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCSetFastACLsForInternetVIPs(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SetFastACLsForInternetVIPsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SetFastACLsForInternetVIPs(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCSuggestValues(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SuggestValuesReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SuggestValuesReq", yamlReq)
	}
	rsp, err := c.grpcClient.SuggestValues(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCUpdateAllowAdvertiseOnPublic(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UpdateAllowAdvertiseOnPublicReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq", yamlReq)
	}
	rsp, err := c.grpcClient.UpdateAllowAdvertiseOnPublic(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) doRPCValidateRules(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ValidateRulesReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.ValidateRulesReq", yamlReq)
	}
	rsp, err := c.grpcClient.ValidateRules(ctx, req, opts...)
	return rsp, err
}

func (c *NamespaceCustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewNamespaceCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &NamespaceCustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewNamespaceCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["AllApplicationInventory"] = ccl.doRPCAllApplicationInventory

	rpcFns["AllApplicationInventoryWaf"] = ccl.doRPCAllApplicationInventoryWaf

	rpcFns["ApplicationInventory"] = ccl.doRPCApplicationInventory

	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["GetActiveAlertPolicies"] = ccl.doRPCGetActiveAlertPolicies

	rpcFns["GetActiveNetworkPolicies"] = ccl.doRPCGetActiveNetworkPolicies

	rpcFns["GetActiveServicePolicies"] = ccl.doRPCGetActiveServicePolicies

	rpcFns["GetFastACLsForInternetVIPs"] = ccl.doRPCGetFastACLsForInternetVIPs

	rpcFns["NetworkingInventory"] = ccl.doRPCNetworkingInventory

	rpcFns["SetActiveAlertPolicies"] = ccl.doRPCSetActiveAlertPolicies

	rpcFns["SetActiveNetworkPolicies"] = ccl.doRPCSetActiveNetworkPolicies

	rpcFns["SetActiveServicePolicies"] = ccl.doRPCSetActiveServicePolicies

	rpcFns["SetFastACLsForInternetVIPs"] = ccl.doRPCSetFastACLsForInternetVIPs

	rpcFns["SuggestValues"] = ccl.doRPCSuggestValues

	rpcFns["UpdateAllowAdvertiseOnPublic"] = ccl.doRPCUpdateAllowAdvertiseOnPublic

	rpcFns["ValidateRules"] = ccl.doRPCValidateRules

	ccl.rpcFns = rpcFns

	return ccl
}

// Create NamespaceCustomAPI REST Client satisfying server.CustomClient
type NamespaceCustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *NamespaceCustomAPIRestClient) doRPCAllApplicationInventory(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &AllApplicationInventoryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.AllApplicationInventoryRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("http_load_balancer_filter", fmt.Sprintf("%v", req.HttpLoadBalancerFilter))
		q.Add("tcp_load_balancer_filter", fmt.Sprintf("%v", req.TcpLoadBalancerFilter))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ApplicationInventoryResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.ApplicationInventoryResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCAllApplicationInventoryWaf(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &AllApplicationInventoryWafFilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("waf_filter_choice", fmt.Sprintf("%v", req.WafFilterChoice))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &AllApplicationInventoryWafFilterResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.AllApplicationInventoryWafFilterResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCApplicationInventory(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ApplicationInventoryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.ApplicationInventoryRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("http_load_balancer_filter", fmt.Sprintf("%v", req.HttpLoadBalancerFilter))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("tcp_load_balancer_filter", fmt.Sprintf("%v", req.TcpLoadBalancerFilter))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ApplicationInventoryResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.ApplicationInventoryResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCCascadeDelete(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.CascadeDeleteRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CascadeDeleteResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.CascadeDeleteResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCGetActiveAlertPolicies(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetActiveAlertPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetActiveAlertPoliciesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetActiveAlertPoliciesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.GetActiveAlertPoliciesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCGetActiveNetworkPolicies(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetActiveNetworkPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetActiveNetworkPoliciesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetActiveNetworkPoliciesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.GetActiveNetworkPoliciesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCGetActiveServicePolicies(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetActiveServicePoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetActiveServicePoliciesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetActiveServicePoliciesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.GetActiveServicePoliciesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCGetFastACLsForInternetVIPs(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetFastACLsForInternetVIPsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetFastACLsForInternetVIPsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCNetworkingInventory(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &NetworkingInventoryRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.NetworkingInventoryRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &NetworkingInventoryResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.NetworkingInventoryResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCSetActiveAlertPolicies(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetActiveAlertPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetActiveAlertPoliciesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		for _, item := range req.AlertPolicies {
			q.Add("alert_policies", fmt.Sprintf("%v", item))
		}
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetActiveAlertPoliciesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.SetActiveAlertPoliciesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCSetActiveNetworkPolicies(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetActiveNetworkPoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetActiveNetworkPoliciesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		for _, item := range req.NetworkPolicies {
			q.Add("network_policies", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetActiveNetworkPoliciesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.SetActiveNetworkPoliciesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCSetActiveServicePolicies(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetActiveServicePoliciesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetActiveServicePoliciesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		for _, item := range req.ServicePolicies {
			q.Add("service_policies", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetActiveServicePoliciesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.SetActiveServicePoliciesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCSetFastACLsForInternetVIPs(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SetFastACLsForInternetVIPsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		for _, item := range req.FastAcls {
			q.Add("fast_acls", fmt.Sprintf("%v", item))
		}
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SetFastACLsForInternetVIPsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCSuggestValues(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SuggestValuesReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.SuggestValuesReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("field_path", fmt.Sprintf("%v", req.FieldPath))
		q.Add("match_value", fmt.Sprintf("%v", req.MatchValue))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("request_body", fmt.Sprintf("%v", req.RequestBody))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SuggestValuesResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.SuggestValuesResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCUpdateAllowAdvertiseOnPublic(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UpdateAllowAdvertiseOnPublicReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("allow_advertise_on_public", fmt.Sprintf("%v", req.AllowAdvertiseOnPublic))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &UpdateAllowAdvertiseOnPublicResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) doRPCValidateRules(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ValidateRulesReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.namespace.ValidateRulesReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("validator_evaluation", fmt.Sprintf("%v", req.ValidatorEvaluation))
		q.Add("value", fmt.Sprintf("%v", req.Value))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ValidateRulesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.namespace.ValidateRulesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *NamespaceCustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewNamespaceCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &NamespaceCustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["AllApplicationInventory"] = ccl.doRPCAllApplicationInventory

	rpcFns["AllApplicationInventoryWaf"] = ccl.doRPCAllApplicationInventoryWaf

	rpcFns["ApplicationInventory"] = ccl.doRPCApplicationInventory

	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["GetActiveAlertPolicies"] = ccl.doRPCGetActiveAlertPolicies

	rpcFns["GetActiveNetworkPolicies"] = ccl.doRPCGetActiveNetworkPolicies

	rpcFns["GetActiveServicePolicies"] = ccl.doRPCGetActiveServicePolicies

	rpcFns["GetFastACLsForInternetVIPs"] = ccl.doRPCGetFastACLsForInternetVIPs

	rpcFns["NetworkingInventory"] = ccl.doRPCNetworkingInventory

	rpcFns["SetActiveAlertPolicies"] = ccl.doRPCSetActiveAlertPolicies

	rpcFns["SetActiveNetworkPolicies"] = ccl.doRPCSetActiveNetworkPolicies

	rpcFns["SetActiveServicePolicies"] = ccl.doRPCSetActiveServicePolicies

	rpcFns["SetFastACLsForInternetVIPs"] = ccl.doRPCSetFastACLsForInternetVIPs

	rpcFns["SuggestValues"] = ccl.doRPCSuggestValues

	rpcFns["UpdateAllowAdvertiseOnPublic"] = ccl.doRPCUpdateAllowAdvertiseOnPublic

	rpcFns["ValidateRules"] = ccl.doRPCValidateRules

	ccl.rpcFns = rpcFns

	return ccl
}

// Create namespaceCustomAPIInprocClient

// INPROC Client (satisfying NamespaceCustomAPIClient interface)
type namespaceCustomAPIInprocClient struct {
	NamespaceCustomAPIServer
}

func (c *namespaceCustomAPIInprocClient) AllApplicationInventory(ctx context.Context, in *AllApplicationInventoryRequest, opts ...grpc.CallOption) (*ApplicationInventoryResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventory", nil)
	return c.NamespaceCustomAPIServer.AllApplicationInventory(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) AllApplicationInventoryWaf(ctx context.Context, in *AllApplicationInventoryWafFilterRequest, opts ...grpc.CallOption) (*AllApplicationInventoryWafFilterResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventoryWaf", nil)
	return c.NamespaceCustomAPIServer.AllApplicationInventoryWaf(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) ApplicationInventory(ctx context.Context, in *ApplicationInventoryRequest, opts ...grpc.CallOption) (*ApplicationInventoryResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.ApplicationInventory", nil)
	return c.NamespaceCustomAPIServer.ApplicationInventory(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.CascadeDelete", nil)
	return c.NamespaceCustomAPIServer.CascadeDelete(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) GetActiveAlertPolicies(ctx context.Context, in *GetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*GetActiveAlertPoliciesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveAlertPolicies", nil)
	return c.NamespaceCustomAPIServer.GetActiveAlertPolicies(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) GetActiveNetworkPolicies(ctx context.Context, in *GetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*GetActiveNetworkPoliciesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveNetworkPolicies", nil)
	return c.NamespaceCustomAPIServer.GetActiveNetworkPolicies(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) GetActiveServicePolicies(ctx context.Context, in *GetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*GetActiveServicePoliciesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveServicePolicies", nil)
	return c.NamespaceCustomAPIServer.GetActiveServicePolicies(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) GetFastACLsForInternetVIPs(ctx context.Context, in *GetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*GetFastACLsForInternetVIPsResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.GetFastACLsForInternetVIPs", nil)
	return c.NamespaceCustomAPIServer.GetFastACLsForInternetVIPs(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) NetworkingInventory(ctx context.Context, in *NetworkingInventoryRequest, opts ...grpc.CallOption) (*NetworkingInventoryResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.NetworkingInventory", nil)
	return c.NamespaceCustomAPIServer.NetworkingInventory(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) SetActiveAlertPolicies(ctx context.Context, in *SetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*SetActiveAlertPoliciesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveAlertPolicies", nil)
	return c.NamespaceCustomAPIServer.SetActiveAlertPolicies(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) SetActiveNetworkPolicies(ctx context.Context, in *SetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*SetActiveNetworkPoliciesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveNetworkPolicies", nil)
	return c.NamespaceCustomAPIServer.SetActiveNetworkPolicies(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) SetActiveServicePolicies(ctx context.Context, in *SetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*SetActiveServicePoliciesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveServicePolicies", nil)
	return c.NamespaceCustomAPIServer.SetActiveServicePolicies(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) SetFastACLsForInternetVIPs(ctx context.Context, in *SetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*SetFastACLsForInternetVIPsResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.SetFastACLsForInternetVIPs", nil)
	return c.NamespaceCustomAPIServer.SetFastACLsForInternetVIPs(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.SuggestValues", nil)
	return c.NamespaceCustomAPIServer.SuggestValues(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) UpdateAllowAdvertiseOnPublic(ctx context.Context, in *UpdateAllowAdvertiseOnPublicReq, opts ...grpc.CallOption) (*UpdateAllowAdvertiseOnPublicResp, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.UpdateAllowAdvertiseOnPublic", nil)
	return c.NamespaceCustomAPIServer.UpdateAllowAdvertiseOnPublic(ctx, in)
}
func (c *namespaceCustomAPIInprocClient) ValidateRules(ctx context.Context, in *ValidateRulesReq, opts ...grpc.CallOption) (*ValidateRulesResponse, error) {
	ctx = server.ContextFromInprocReq(ctx, "ves.io.schema.namespace.NamespaceCustomAPI.ValidateRules", nil)
	return c.NamespaceCustomAPIServer.ValidateRules(ctx, in)
}

func NewNamespaceCustomAPIInprocClient(svc svcfw.Service) NamespaceCustomAPIClient {
	return &namespaceCustomAPIInprocClient{NamespaceCustomAPIServer: NewNamespaceCustomAPIServer(svc)}
}

// RegisterGwNamespaceCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwNamespaceCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterNamespaceCustomAPIHandlerClient(ctx, mux, NewNamespaceCustomAPIInprocClient(s))
}

// Create namespaceCustomAPISrv

// SERVER (satisfying NamespaceCustomAPIServer interface)
type namespaceCustomAPISrv struct {
	svc svcfw.Service
}

func (s *namespaceCustomAPISrv) AllApplicationInventory(ctx context.Context, in *AllApplicationInventoryRequest) (*ApplicationInventoryResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *ApplicationInventoryResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.AllApplicationInventoryRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.AllApplicationInventory' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventory"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.AllApplicationInventory(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.ApplicationInventoryResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) AllApplicationInventoryWaf(ctx context.Context, in *AllApplicationInventoryWafFilterRequest) (*AllApplicationInventoryWafFilterResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *AllApplicationInventoryWafFilterResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.AllApplicationInventoryWaf' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventoryWaf"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.AllApplicationInventoryWaf(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.AllApplicationInventoryWafFilterResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) ApplicationInventory(ctx context.Context, in *ApplicationInventoryRequest) (*ApplicationInventoryResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *ApplicationInventoryResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.ApplicationInventoryRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.ApplicationInventory' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.ApplicationInventory"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ApplicationInventory(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.ApplicationInventoryResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest) (*CascadeDeleteResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *CascadeDeleteResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.CascadeDeleteRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.CascadeDelete' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.CascadeDelete"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CascadeDelete(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.CascadeDeleteResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) GetActiveAlertPolicies(ctx context.Context, in *GetActiveAlertPoliciesRequest) (*GetActiveAlertPoliciesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *GetActiveAlertPoliciesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetActiveAlertPoliciesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.GetActiveAlertPolicies' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.GetActiveAlertPolicies"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetActiveAlertPolicies(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetActiveAlertPoliciesResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) GetActiveNetworkPolicies(ctx context.Context, in *GetActiveNetworkPoliciesRequest) (*GetActiveNetworkPoliciesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *GetActiveNetworkPoliciesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.GetActiveNetworkPolicies' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.GetActiveNetworkPolicies"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetActiveNetworkPolicies(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) GetActiveServicePolicies(ctx context.Context, in *GetActiveServicePoliciesRequest) (*GetActiveServicePoliciesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *GetActiveServicePoliciesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetActiveServicePoliciesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.GetActiveServicePolicies' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.GetActiveServicePolicies"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetActiveServicePolicies(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetActiveServicePoliciesResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) GetFastACLsForInternetVIPs(ctx context.Context, in *GetFastACLsForInternetVIPsRequest) (*GetFastACLsForInternetVIPsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *GetFastACLsForInternetVIPsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.GetFastACLsForInternetVIPs' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.GetFastACLsForInternetVIPs"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetFastACLsForInternetVIPs(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) NetworkingInventory(ctx context.Context, in *NetworkingInventoryRequest) (*NetworkingInventoryResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *NetworkingInventoryResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.NetworkingInventoryRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.NetworkingInventory' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.NetworkingInventory"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.NetworkingInventory(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.NetworkingInventoryResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) SetActiveAlertPolicies(ctx context.Context, in *SetActiveAlertPoliciesRequest) (*SetActiveAlertPoliciesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *SetActiveAlertPoliciesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetActiveAlertPoliciesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.SetActiveAlertPolicies' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.SetActiveAlertPolicies"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetActiveAlertPolicies(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetActiveAlertPoliciesResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) SetActiveNetworkPolicies(ctx context.Context, in *SetActiveNetworkPoliciesRequest) (*SetActiveNetworkPoliciesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *SetActiveNetworkPoliciesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.SetActiveNetworkPolicies' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.SetActiveNetworkPolicies"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetActiveNetworkPolicies(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) SetActiveServicePolicies(ctx context.Context, in *SetActiveServicePoliciesRequest) (*SetActiveServicePoliciesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *SetActiveServicePoliciesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetActiveServicePoliciesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.SetActiveServicePolicies' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.SetActiveServicePolicies"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetActiveServicePolicies(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetActiveServicePoliciesResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) SetFastACLsForInternetVIPs(ctx context.Context, in *SetFastACLsForInternetVIPsRequest) (*SetFastACLsForInternetVIPsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *SetFastACLsForInternetVIPsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.SetFastACLsForInternetVIPs' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.SetFastACLsForInternetVIPs"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SetFastACLsForInternetVIPs(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) SuggestValues(ctx context.Context, in *SuggestValuesReq) (*SuggestValuesResp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *SuggestValuesResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.SuggestValuesReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.SuggestValues' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.SuggestValues"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SuggestValues(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.SuggestValuesResp", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) UpdateAllowAdvertiseOnPublic(ctx context.Context, in *UpdateAllowAdvertiseOnPublicReq) (*UpdateAllowAdvertiseOnPublicResp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *UpdateAllowAdvertiseOnPublicResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.UpdateAllowAdvertiseOnPublic' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.UpdateAllowAdvertiseOnPublic"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.UpdateAllowAdvertiseOnPublic(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp", rsp)...)

	return rsp, nil
}
func (s *namespaceCustomAPISrv) ValidateRules(ctx context.Context, in *ValidateRulesReq) (*ValidateRulesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.namespace.NamespaceCustomAPI")
	cah, ok := ah.(NamespaceCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *NamespaceCustomAPIServer", ah)
	}

	var (
		rsp *ValidateRulesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.namespace.ValidateRulesReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'NamespaceCustomAPI.ValidateRules' operation on 'namespace'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.namespace.NamespaceCustomAPI.ValidateRules"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ValidateRules(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.namespace.ValidateRulesResponse", rsp)...)

	return rsp, nil
}

func NewNamespaceCustomAPIServer(svc svcfw.Service) NamespaceCustomAPIServer {
	return &namespaceCustomAPISrv{svc: svc}
}

var NamespaceCustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Namespace API",
        "description": "APIs in this file are custom APIs on namespace object served by akar",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/system/all_application_inventory": {
            "post": {
                "summary": "All Application Objects Inventory",
                "description": "AllApplicationInventory returns inventory of configured application related objects for all namespaces.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventory",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceApplicationInventoryResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceAllApplicationInventoryRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-allapplicationinventory"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventory"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/all_application_inventory_waf_filters": {
            "post": {
                "summary": "All Application Objects Inventory with WAF Filters",
                "description": "AllApplicationInventoryWaf returns inventory of configured application related objects for all namespaces with WAF Filters.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventoryWaf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceAllApplicationInventoryWafFilterResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceAllApplicationInventoryWafFilterRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-allapplicationinventorywaf"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.AllApplicationInventoryWaf"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/networking_inventory": {
            "post": {
                "summary": "Networking Objects Inventory",
                "description": "NetworkingInventory returns inventory of configured networking related objects for the tenant.\nInventory of system-wide objects (global networks, sites, site mesh groups, etc) is returned.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.NetworkingInventory",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceNetworkingInventoryResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceNetworkingInventoryRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-networkinginventory"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.NetworkingInventory"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/update_allow_advertise_on_public": {
            "post": {
                "summary": "Update allow advertise on public.",
                "description": "UpdateAllowAdvertiseOnPublic can update a config to allow advertise on public.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.UpdateAllowAdvertiseOnPublic",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceUpdateAllowAdvertiseOnPublicResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceUpdateAllowAdvertiseOnPublicReq"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-updateallowadvertiseonpublic"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.UpdateAllowAdvertiseOnPublic"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/validate_rules": {
            "post": {
                "summary": "Validate Rules",
                "description": "ValidateRules returns whether the value is valid or not for the specified validator rules.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.ValidateRules",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceValidateRulesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceValidateRulesReq"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-validaterules"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.ValidateRules"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/active_alert_policies": {
            "get": {
                "summary": "Get Active Alert Policies",
                "description": "GetActiveAlertPolicies returns the list of active alert policies for the namespace",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveAlertPolicies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceGetActiveAlertPoliciesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-getactivealertpolicies"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveAlertPolicies"
            },
            "post": {
                "summary": "Set Active Alert Policies",
                "description": "SetActiveAlertPolicies sets the active alert policies for the namespace\nAn emtpy list in the request will clear the active alert policies for the namespace",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveAlertPolicies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceSetActiveAlertPoliciesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceSetActiveAlertPoliciesRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-setactivealertpolicies"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveAlertPolicies"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/active_network_policies": {
            "get": {
                "summary": "Get Active Network Policies",
                "description": "GetActiveNetworkPolicies resturn the list of active network policies for the namespace",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveNetworkPolicies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceGetActiveNetworkPoliciesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-getactivenetworkpolicies"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveNetworkPolicies"
            },
            "post": {
                "summary": "Set Active Network Policies",
                "description": "SetActiveNetworkPolicies sets the active network policies for the namespace\nAn emtpy list in the request will clear the active network policies for the namespace",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveNetworkPolicies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceSetActiveNetworkPoliciesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceSetActiveNetworkPoliciesRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-setactivenetworkpolicies"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveNetworkPolicies"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/active_service_policies": {
            "get": {
                "summary": "Get Active Service Policies",
                "description": "GetActiveServicePolicies resturn the list of active service policies for the namespace",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveServicePolicies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceGetActiveServicePoliciesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-getactiveservicepolicies"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.GetActiveServicePolicies"
            },
            "post": {
                "summary": "Set Active Service Policies",
                "description": "SetActiveServicePolicies sets the active service policies for the namespace\nAn emtpy list in the request will clear the active service policies for the namespace",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveServicePolicies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceSetActiveServicePoliciesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceSetActiveServicePoliciesRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-setactiveservicepolicies"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.SetActiveServicePolicies"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/application_inventory": {
            "post": {
                "summary": "Application Objects Inventory",
                "description": "ApplicationInventory returns inventory of configured application related objects for the tenant.\nInventory of namespaced objects (HTTP LBs, TCP LBs, etc) in a particular namespace is returned.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.ApplicationInventory",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceApplicationInventoryResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceApplicationInventoryRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-applicationinventory"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.ApplicationInventory"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/fast_acls_for_internet_vips": {
            "get": {
                "summary": "Get FastACLs For Internet VIPs",
                "description": "GetFastACLsForInternetVIPs Returns the list of Active FastACLs for Internet VIPs.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.GetFastACLsForInternetVIPs",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceGetFastACLsForInternetVIPsResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-getfastaclsforinternetvips"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.GetFastACLsForInternetVIPs"
            },
            "post": {
                "summary": "Set FastACLs For Internet VIPs",
                "description": "SetFastACLsForInternetVIPs activates the passed list of FastACLs for Internet VIPs.\nAn emtpy list in the request will clear FastACLs for Internet VIPs.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.SetFastACLsForInternetVIPs",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceSetFastACLsForInternetVIPsResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceSetFastACLsForInternetVIPsRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-setfastaclsforinternetvips"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.SetFastACLsForInternetVIPs"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/suggest-values": {
            "post": {
                "summary": "Suggest Values",
                "description": "SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.SuggestValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/schemanamespaceSuggestValuesResp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"foobar\"\nNamespace in which the suggestions are scoped.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceSuggestValuesReq"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-suggestvalues"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.SuggestValues"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{name}/cascade_delete": {
            "post": {
                "summary": "Cascade Delete",
                "description": "CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.\nunder it. Use this only if the entire namespace and its contents are to be wiped out.",
                "operationId": "ves.io.schema.namespace.NamespaceCustomAPI.CascadeDelete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/namespaceCascadeDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"value\"\nThe name of the namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/namespaceCascadeDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "NamespaceCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-namespace-namespacecustomapi-cascadedelete"
                },
                "x-ves-proto-rpc": "ves.io.schema.namespace.NamespaceCustomAPI.CascadeDelete"
            },
            "x-displayname": "NamespaceCustomAPI",
            "x-ves-proto-service": "ves.io.schema.namespace.NamespaceCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "alert_policy_setAlertPolicyStatus": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.alert_policy_set.AlertPolicyStatus",
            "properties": {
                "policy": {
                    "description": " Reference to Alert Policy objects to send the alert.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Alert Policy",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Alert Policy",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "reason": {
                    "type": "array",
                    "description": " A human-readable description of why this status is in the\n \"Partially Active\" or \"Inactive\" status. The value will be empty for\n \"Active\" status.",
                    "title": "Reason",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Reason"
                },
                "status": {
                    "type": "string",
                    "description": " Staus of the alert policy\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Active\\\",\\\"Inactive\\\",\\\"Partially Active\\\"]\n",
                    "title": "Status",
                    "x-displayname": "Status",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Active\\\",\\\"Inactive\\\",\\\"Partially Active\\\"]"
                    }
                }
            }
        },
        "app_firewallAppFirewallViolationType": {
            "type": "string",
            "description": "List of all supported Violation Types\n\nVIOL_NONE\nVIOL_FILETYPE\nVIOL_METHOD\nVIOL_MANDATORY_HEADER\nVIOL_HTTP_RESPONSE_STATUS\nVIOL_REQUEST_MAX_LENGTH\nVIOL_FILE_UPLOAD\nVIOL_FILE_UPLOAD_IN_BODY\nVIOL_XML_MALFORMED\nVIOL_JSON_MALFORMED\nVIOL_ASM_COOKIE_MODIFIED\nVIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS\nVIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE\nVIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT\nVIOL_HTTP_PROTOCOL_NULL_IN_REQUEST\nVIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION\nVIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START\nVIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST\nVIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING\nVIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS\nVIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER\nVIOL_EVASION_DIRECTORY_TRAVERSALS\nVIOL_MALFORMED_REQUEST\nVIOL_EVASION_MULTIPLE_DECODING\nVIOL_DATA_GUARD\nVIOL_EVASION_APACHE_WHITESPACE\nVIOL_COOKIE_MODIFIED\nVIOL_EVASION_IIS_UNICODE_CODEPOINTS\nVIOL_EVASION_IIS_BACKSLASHES\nVIOL_EVASION_PERCENT_U_DECODING\nVIOL_EVASION_BARE_BYTE_DECODING\nVIOL_EVASION_BAD_UNESCAPE\nVIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORMDATA_REQUEST_PARSING\nVIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUEST\nVIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS\nVIOL_ENCODING\nVIOL_COOKIE_MALFORMED\nVIOL_GRAPHQL_FORMAT\nVIOL_GRAPHQL_MALFORMED\nVIOL_GRAPHQL_INTROSPECTION_QUERY",
            "title": "App Firewall Violation Type",
            "enum": [
                "VIOL_NONE",
                "VIOL_FILETYPE",
                "VIOL_METHOD",
                "VIOL_MANDATORY_HEADER",
                "VIOL_HTTP_RESPONSE_STATUS",
                "VIOL_REQUEST_MAX_LENGTH",
                "VIOL_FILE_UPLOAD",
                "VIOL_FILE_UPLOAD_IN_BODY",
                "VIOL_XML_MALFORMED",
                "VIOL_JSON_MALFORMED",
                "VIOL_ASM_COOKIE_MODIFIED",
                "VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS",
                "VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE",
                "VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT",
                "VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST",
                "VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION",
                "VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START",
                "VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST",
                "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING",
                "VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS",
                "VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER",
                "VIOL_EVASION_DIRECTORY_TRAVERSALS",
                "VIOL_MALFORMED_REQUEST",
                "VIOL_EVASION_MULTIPLE_DECODING",
                "VIOL_DATA_GUARD",
                "VIOL_EVASION_APACHE_WHITESPACE",
                "VIOL_COOKIE_MODIFIED",
                "VIOL_EVASION_IIS_UNICODE_CODEPOINTS",
                "VIOL_EVASION_IIS_BACKSLASHES",
                "VIOL_EVASION_PERCENT_U_DECODING",
                "VIOL_EVASION_BARE_BYTE_DECODING",
                "VIOL_EVASION_BAD_UNESCAPE",
                "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORMDATA_REQUEST_PARSING",
                "VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUEST",
                "VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS",
                "VIOL_ENCODING",
                "VIOL_COOKIE_MALFORMED",
                "VIOL_GRAPHQL_FORMAT",
                "VIOL_GRAPHQL_MALFORMED",
                "VIOL_GRAPHQL_INTROSPECTION_QUERY"
            ],
            "default": "VIOL_NONE",
            "x-displayname": "App Firewall Violation Type",
            "x-ves-proto-enum": "ves.io.schema.app_firewall.AppFirewallViolationType"
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "namespaceAllApplicationInventoryRequest": {
            "type": "object",
            "description": "Request for inventory of application related objects",
            "title": "AllApplicationInventoryRequest",
            "x-displayname": "All Application related objects inventory request",
            "x-ves-proto-message": "ves.io.schema.namespace.AllApplicationInventoryRequest",
            "properties": {
                "http_load_balancer_filter": {
                    "description": " Filters for HTTP LoadBalancer",
                    "title": "HTTPLoadbalancerInventoryFilterType",
                    "$ref": "#/definitions/namespaceHTTPLoadbalancerInventoryFilterType",
                    "x-displayname": "HTTP LoadBalancer Inventory Filter Type"
                },
                "tcp_load_balancer_filter": {
                    "description": " Filters for TCP LoadBalancer",
                    "title": "TCPLoadbalancerInventoryFilterType",
                    "$ref": "#/definitions/namespaceTCPLoadbalancerInventoryFilterType",
                    "x-displayname": "TCP LoadBalancer Inventory Filter Type"
                }
            }
        },
        "namespaceAllApplicationInventoryWafFilterRequest": {
            "type": "object",
            "description": "Request for inventory of application related objects with WAF Filter",
            "title": "AllApplicationInventoryWafFilterRequest",
            "x-displayname": "All Application related objects inventory request with WAF Filter",
            "x-ves-oneof-field-waf_filter_choice": "[\"exclusion_signature_id\",\"exclusion_violation_type\"]",
            "x-ves-proto-message": "ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest",
            "properties": {
                "exclusion_signature_id": {
                    "type": "integer",
                    "description": "Exclusive with [exclusion_violation_type]\n",
                    "title": "WAF Exclusion Rule Signature Id",
                    "format": "int64",
                    "x-displayname": "WAF Exclusion Rule Signature Id"
                },
                "exclusion_violation_type": {
                    "description": "Exclusive with [exclusion_signature_id]\n",
                    "title": "WAF Exclusion Rule Violation Name",
                    "$ref": "#/definitions/app_firewallAppFirewallViolationType",
                    "x-displayname": "WAF Exclusion Rule Violation Name"
                }
            }
        },
        "namespaceAllApplicationInventoryWafFilterResponse": {
            "type": "object",
            "description": "Response for inventory of application related objects",
            "title": "AllApplicationInventoryWafFilterResponse",
            "x-displayname": "Application related objects inventory response",
            "x-ves-proto-message": "ves.io.schema.namespace.AllApplicationInventoryWafFilterResponse",
            "properties": {
                "http_loadbalancers": {
                    "type": "array",
                    "description": " Application Inventory of configured HTTP Loadbalancers with WAF Filters",
                    "title": "HTTP Loadbalancer Inventory with WAF Filters",
                    "items": {
                        "$ref": "#/definitions/namespaceHTTPLoadbalancerWafFilterResultType"
                    },
                    "x-displayname": "HTTP Loadbalancers with WAF Filters"
                }
            }
        },
        "namespaceApplicationInventoryRequest": {
            "type": "object",
            "description": "Request for inventory of application related objects from all namespaces",
            "title": "ApplicationInventoryRequest",
            "x-displayname": "Application related objects inventory request",
            "x-ves-proto-message": "ves.io.schema.namespace.ApplicationInventoryRequest",
            "properties": {
                "http_load_balancer_filter": {
                    "description": " Filters for HTTP LoadBalancer",
                    "title": "HTTPLoadbalancerInventoryFilterType",
                    "$ref": "#/definitions/namespaceHTTPLoadbalancerInventoryFilterType",
                    "x-displayname": "HTTP LoadBalancer Inventory Filter Type"
                },
                "namespace": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tcp_load_balancer_filter": {
                    "description": " Filters for TCP LoadBalancer",
                    "title": "TCPLoadbalancerInventoryFilterType",
                    "$ref": "#/definitions/namespaceTCPLoadbalancerInventoryFilterType",
                    "x-displayname": "TCP LoadBalancer Inventory Filter Type"
                }
            }
        },
        "namespaceApplicationInventoryResponse": {
            "type": "object",
            "description": "Response for inventory of application related objects",
            "title": "ApplicationInventoryResponse",
            "x-displayname": "Application related objects inventory response",
            "x-ves-proto-message": "ves.io.schema.namespace.ApplicationInventoryResponse",
            "properties": {
                "http_loadbalancers": {
                    "description": " Inventory of configured HTTP Loadbalancers",
                    "title": "HTTP Loadbalancer Inventory",
                    "$ref": "#/definitions/namespaceHTTPLoadbalancerInventoryType",
                    "x-displayname": "HTTP Loadbalancers"
                },
                "loadbalancers": {
                    "type": "integer",
                    "description": " Number of HTTP and TCP Load Balancers configured",
                    "title": "Load Balancers",
                    "format": "int64",
                    "x-displayname": "Load Balancers"
                },
                "origin_pools": {
                    "type": "integer",
                    "description": " Number of origin pools configured",
                    "title": "Origin Pools",
                    "format": "int64",
                    "x-displayname": "Origin Pools"
                },
                "services_discovered": {
                    "type": "integer",
                    "description": " Number of services discovered",
                    "title": "Services Discovered",
                    "format": "int64",
                    "x-displayname": "Services Discovered"
                },
                "tcp_loadbalancers": {
                    "description": " Inventory of configured TCP Loadbalancers",
                    "title": "TCP Loadbalancer Inventory",
                    "$ref": "#/definitions/namespaceTCPLoadbalancerInventoryType",
                    "x-displayname": "TCP Loadbalancers"
                }
            }
        },
        "namespaceCascadeDeleteItemType": {
            "type": "object",
            "description": "CascadeDeleteItemType is details of object that was handled as part of cascade delete\nof namespace and whether it was successfully deleted",
            "title": "CascadeDeleteItemType",
            "x-displayname": "Cascade Delete Item",
            "x-ves-proto-message": "ves.io.schema.namespace.CascadeDeleteItemType",
            "properties": {
                "error_message": {
                    "type": "string",
                    "description": " A description of the error encountered (if any) in the process of cascade deletion\n\nExample: - \"value\"-",
                    "title": "error_message",
                    "x-displayname": "Error",
                    "x-ves-example": "value"
                },
                "object_name": {
                    "type": "string",
                    "description": " Name of the configuration object that was deleted\n\nExample: - \"value\"-",
                    "title": "object_name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                },
                "object_type": {
                    "type": "string",
                    "description": " The type of the contained configuration object in the namespace that was deleted\n\nExample: - \"ves.io.schema.virtual_host.Object\"-",
                    "title": "object_type",
                    "x-displayname": "Type",
                    "x-ves-example": "ves.io.schema.virtual_host.Object"
                },
                "object_uid": {
                    "type": "string",
                    "description": " The UID identifier of the configuration object that was deleted\n\nExample: - \"value\"-",
                    "title": "object_uid",
                    "x-displayname": "UID",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceCascadeDeleteRequest": {
            "type": "object",
            "description": "CascadeDeleteRequest contains the name of the namespace that has to be deleted\nalong with the objects configured under the namespace",
            "title": "CascadeDeleteRequest",
            "x-displayname": "Cascade Delete Request",
            "x-ves-proto-message": "ves.io.schema.namespace.CascadeDeleteRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"value\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceCascadeDeleteResponse": {
            "type": "object",
            "description": "CascadeDeleteResponse contains a list of objects in the namespace that were\ndeleted (or encountered an error while deleting)",
            "title": "CascadeDeleteResponse",
            "x-displayname": "Cascade Delete Response",
            "x-ves-proto-message": "ves.io.schema.namespace.CascadeDeleteResponse",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " The objects deleted in namespace",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/namespaceCascadeDeleteItemType"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "namespaceGetActiveAlertPoliciesResponse": {
            "type": "object",
            "description": "GetActiveAlertPoliciesResponse is the shape of the response for GetActiveAlertPolicies.",
            "title": "GetActiveAlertPoliciesResponse",
            "x-displayname": "Response for GetActiveAlertPolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.GetActiveAlertPoliciesResponse",
            "properties": {
                "alert_policies": {
                    "type": "array",
                    "description": " A list of references to alert_policy objects.",
                    "title": "alert_policies",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Alert Policies"
                },
                "alert_policies_status": {
                    "type": "array",
                    "description": " The status of alert policies",
                    "title": "policy_status",
                    "items": {
                        "$ref": "#/definitions/alert_policy_setAlertPolicyStatus"
                    },
                    "x-displayname": "Alert Policies Status"
                }
            }
        },
        "namespaceGetActiveNetworkPoliciesResponse": {
            "type": "object",
            "description": "GetActiveNetworkPoliciesResponse is the shape of the response for GetActiveNetworkPolicies.",
            "title": "GetActiveNetworkPoliciesResponse",
            "x-displayname": "Response for GetActiveNetworkPolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse",
            "properties": {
                "network_policies": {
                    "type": "array",
                    "description": " A list of references to network_policy objects.",
                    "title": "network_policies",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Network Policies"
                }
            }
        },
        "namespaceGetActiveServicePoliciesResponse": {
            "type": "object",
            "description": "GetActiveServicePoliciesResponse is the shape of the response for GetActiveServicePolicies.",
            "title": "GetActiveServicePoliciesResponse",
            "x-displayname": "Response for GetActiveServicePolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.GetActiveServicePoliciesResponse",
            "properties": {
                "service_policies": {
                    "type": "array",
                    "description": " A list of references to service_policy objects.",
                    "title": "service_policies",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Service Policies"
                }
            }
        },
        "namespaceGetFastACLsForInternetVIPsResponse": {
            "type": "object",
            "description": "GetFastACLsForInternetVIPsResponse contains list of FastACLs refs that\nare applied to the Internet VIPs",
            "title": "GetFastACLsForInternetVIPsResponse",
            "x-displayname": "Response for GetFastACLsForInternetVIPs",
            "x-ves-proto-message": "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse",
            "properties": {
                "fast_acls": {
                    "type": "array",
                    "description": " The list of refs of FastACLs\n\nExample: - \"list of refs\"-",
                    "title": "fast_acls",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "FastACLs",
                    "x-ves-example": "list of refs"
                }
            }
        },
        "namespaceHTTPLoadbalancerInventoryFilterType": {
            "type": "object",
            "description": "HTTP Loadbalancer Inventory Filter",
            "title": "HTTPLoadbalancerInventoryFilterType",
            "x-displayname": "Filter for HTTP Loadbalancers Inventory",
            "x-ves-proto-message": "ves.io.schema.namespace.HTTPLoadbalancerInventoryFilterType",
            "properties": {
                "api_definition": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with API Definition",
                    "title": "API Definition",
                    "format": "boolean",
                    "x-displayname": "API Definition"
                },
                "api_protection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with API Protection configured",
                    "title": "API Protection",
                    "format": "boolean",
                    "x-displayname": "API Protection"
                },
                "api_schema_validation": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with API Schema Validation",
                    "title": "API Schema Validation",
                    "format": "boolean",
                    "x-displayname": "API Schema Validation"
                },
                "bot_protection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Bot Protection configured",
                    "title": "Bot Protection",
                    "format": "boolean",
                    "x-displayname": "Bot Protection"
                },
                "client_blocking": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Client Blocking",
                    "title": "Client Blocking",
                    "format": "boolean",
                    "x-displayname": "Client Blocking"
                },
                "client_side_defense": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Client Side Defense configured",
                    "title": "Client Side Defense",
                    "format": "boolean",
                    "x-displayname": "Client Side Defense"
                },
                "cookie_protection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Cookie Protection",
                    "title": "Cookie Protection",
                    "format": "boolean",
                    "x-displayname": "Cookie Protection"
                },
                "cors_policy": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with CORS Policy",
                    "title": "CORS Policy",
                    "format": "boolean",
                    "x-displayname": "CORS Policy"
                },
                "csrf_protection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with CSRF Protection",
                    "title": "CSRF Protection",
                    "format": "boolean",
                    "x-displayname": "CSRF Protection"
                },
                "data_guard": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Data Guard",
                    "title": "Data Guard",
                    "format": "boolean",
                    "x-displayname": "Data Guard"
                },
                "ddos_auto_mitigation": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with DDoS Auto Mitigation",
                    "title": "DDoS Auto Mitigation",
                    "format": "boolean",
                    "x-displayname": "DDoS Auto Mitigation"
                },
                "ddos_mitigation": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with DDoS Mitigation",
                    "title": "DDoS Mitigation",
                    "format": "boolean",
                    "x-displayname": "DDoS Mitigation"
                },
                "ddos_protection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with DDoS Protection configured",
                    "title": "DDoS Protection",
                    "format": "boolean",
                    "x-displayname": "DDoS Protection"
                },
                "default_loadbalancer": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Default Loadbalancer",
                    "title": "Default Loadbalancer",
                    "format": "boolean",
                    "x-displayname": "Default Loadbalancer"
                },
                "graph_ql_inspection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with GraphQL Inspection",
                    "title": "GraphQL Inspection",
                    "format": "boolean",
                    "x-displayname": "GraphQL Inspection"
                },
                "http_only": {
                    "type": "boolean",
                    "description": " Filter results with HTTP only loadbalancers",
                    "title": "HTTP Only",
                    "format": "boolean",
                    "x-displayname": "HTTP Only"
                },
                "ip_reputation": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with IP Reputation configured",
                    "title": "IP Reputation",
                    "format": "boolean",
                    "x-displayname": "IP Reputation"
                },
                "malicious_user_detection": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Malicious User Detection configured",
                    "title": "Malicious User Detection",
                    "format": "boolean",
                    "x-displayname": "Malicious User Detection"
                },
                "malicious_user_mitigation": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Malicious User Mitigation",
                    "title": "Malicious User Mitigation",
                    "format": "boolean",
                    "x-displayname": "Malicious User Mitigation"
                },
                "mutual_tls": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Mutual TLS",
                    "title": "Mutual TLS",
                    "format": "boolean",
                    "x-displayname": "Mutual TLS"
                },
                "namespace_service_policy": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Namespace Service Policy configured",
                    "title": "Namespace Service Policy",
                    "format": "boolean",
                    "x-displayname": "Namespace Service Policy"
                },
                "origin_server_subset": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Origin Server Subset",
                    "title": "Origin Server Subset",
                    "format": "boolean",
                    "x-displayname": "Origin Server Subset"
                },
                "private_advertisement": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers advertised privately",
                    "title": "Private Advertisement",
                    "format": "boolean",
                    "x-displayname": "Private Advertisement"
                },
                "public_advertisment": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers advertised publicly",
                    "title": "Public Advertisement",
                    "format": "boolean",
                    "x-displayname": "Public Advertisement"
                },
                "routes": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Routes",
                    "title": "Routes",
                    "format": "boolean",
                    "x-displayname": "Routes"
                },
                "service_policy": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Service Policy configured",
                    "title": "Service Policy",
                    "format": "boolean",
                    "x-displayname": "Service Policy"
                },
                "slow_ddos_mitigation": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Slow DDoS Mitigation",
                    "title": "Slow DDoS Mitigation",
                    "format": "boolean",
                    "x-displayname": "Slow DDoS Mitigation"
                },
                "trusted_client": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Trusted Client",
                    "title": "Trusted Client",
                    "format": "boolean",
                    "x-displayname": "Trusted Client"
                },
                "trusted_client_ip_headers": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with Trusted Client IP Headers",
                    "title": "Trusted Client IP Headers",
                    "format": "boolean",
                    "x-displayname": "Trusted Client IP Headers"
                },
                "waf": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with WAF configured",
                    "title": "WAF",
                    "format": "boolean",
                    "x-displayname": "WAF"
                },
                "waf_exclusion": {
                    "type": "boolean",
                    "description": " Filter results with HTTP loadbalancers with WAF Exclusion",
                    "title": "WAF Exclusion",
                    "format": "boolean",
                    "x-displayname": "WAF Exclusion"
                }
            }
        },
        "namespaceHTTPLoadbalancerInventoryType": {
            "type": "object",
            "description": "HTTP Loadbalancer inventory",
            "title": "HTTPLoadbalancerInventoryType",
            "x-displayname": "Inventory of HTTP Loadbalancers",
            "x-ves-proto-message": "ves.io.schema.namespace.HTTPLoadbalancerInventoryType",
            "properties": {
                "api_protection": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with API Protection configured",
                    "title": "API Protection",
                    "format": "int64",
                    "x-displayname": "API Protection"
                },
                "bot_protection": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with Bot Protection configured",
                    "title": "Bot Protection",
                    "format": "int64",
                    "x-displayname": "Bot Protection"
                },
                "client_side_defense": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with Client Side Defense configured",
                    "title": "Client Side Defense",
                    "format": "int64",
                    "x-displayname": "Client Side Defense"
                },
                "ddos_protection": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with DDoS Protection configured",
                    "title": "DDoS Protection",
                    "format": "int64",
                    "x-displayname": "DDoS Protection"
                },
                "http_only": {
                    "type": "integer",
                    "description": " Number of HTTP Only loadbalancers",
                    "title": "HTTP Only",
                    "format": "int64",
                    "x-displayname": "HTTP Only"
                },
                "httplb_results": {
                    "type": "array",
                    "description": " List of HTTP loadbalancers",
                    "title": "HTTP Loadbalancers",
                    "items": {
                        "$ref": "#/definitions/namespaceHTTPLoadbalancerResultType"
                    },
                    "x-displayname": "List of HTTP Loadbalancers"
                },
                "ip_reputation": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with IP Reputation configured",
                    "title": "IP Reputation",
                    "format": "int64",
                    "x-displayname": "IP Reputation"
                },
                "malicious_user_detection": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with Malicious User Detection configured",
                    "title": "Malicious User Detection",
                    "format": "int64",
                    "x-displayname": "Malicious User Detection"
                },
                "namespace_service_policy": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with Namespace Service Policy configured",
                    "title": "Namespace Service Policy",
                    "format": "int64",
                    "x-displayname": "Namespace Service Policy"
                },
                "private_advertisement": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers advertised privately",
                    "title": "Private Advertisement",
                    "format": "int64",
                    "x-displayname": "Private Advertisement"
                },
                "public_advertisment": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers advertised publicly",
                    "title": "Public Advertisement",
                    "format": "int64",
                    "x-displayname": "Public Advertisement"
                },
                "service_policy": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with Service Policy configured",
                    "title": "Service Policy",
                    "format": "int64",
                    "x-displayname": "Service Policy"
                },
                "waf": {
                    "type": "integer",
                    "description": " Number of HTTP loadbalancers with WAF configured",
                    "title": "WAF",
                    "format": "int64",
                    "x-displayname": "WAF"
                }
            }
        },
        "namespaceHTTPLoadbalancerResultType": {
            "type": "object",
            "description": "HTTP Loadbalancer Inventory Results",
            "title": "HTTPLoadbalancerResultType",
            "x-displayname": "HTTP Loadbalancer Inventory Results",
            "x-ves-proto-message": "ves.io.schema.namespace.HTTPLoadbalancerResultType",
            "properties": {
                "api_definition_enabled": {
                    "description": " API Definition configured ",
                    "title": "API Definition Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "API Definition Enabled or Disabled"
                },
                "api_protection_enabled": {
                    "description": " API Protection configured",
                    "title": "API Protection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "API Protection Enabled or Disabled"
                },
                "api_schema_validation_enabled": {
                    "description": " API Schema Validation configured ",
                    "title": "API Schema Validation Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "API Schema Validation Enabled or Disabled"
                },
                "bot_protection_enabled": {
                    "description": " Bot Protection configured",
                    "title": "Bot Protection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Bot Protection Enabled or Disabled"
                },
                "certification_expiration_date": {
                    "type": "string",
                    "description": " Certification Expiration Date",
                    "title": "Certification Expiration Date",
                    "format": "date-time",
                    "x-displayname": "Certification Expiration Date"
                },
                "certification_status": {
                    "type": "string",
                    "description": " Certification Status",
                    "title": "Certification Status",
                    "x-displayname": "Certification Status"
                },
                "client_blocking_enabled": {
                    "description": " Client Blocking configured ",
                    "title": "Client Blocking Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Client Blocking Enabled or Disabled"
                },
                "client_side_defense_enabled": {
                    "description": " Client Side Defense configured",
                    "title": "Client Side Defense Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Client Side Defense Enabled or Disabled"
                },
                "connection_idle_timeout": {
                    "type": "integer",
                    "description": " Connection Idle Timeout",
                    "title": "Connection Idle Timeout",
                    "format": "int64",
                    "x-displayname": "Connection Idle Timeout"
                },
                "cookie_protection_enabled": {
                    "description": " Cookie Protection configured ",
                    "title": "Cookie Protection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Cookie Protection Enabled or Disabled"
                },
                "cors_policy_enabled": {
                    "description": " CORS Policy configured ",
                    "title": "CORS Policy Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "CORS Policy Enabled or Disabled"
                },
                "csrf_protection_enabled": {
                    "description": " CSRF Protection configured ",
                    "title": "CSRF Protection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "CSRF Protection Enabled or Disabled"
                },
                "data_guard_enabled": {
                    "description": " Data Guard configured  ",
                    "title": "Data Guard Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Data Guard Enabled or Disabled"
                },
                "ddos_auto_mitigation_enabled": {
                    "description": " DDoS Auto Mitigation configured ",
                    "title": "DDoS Auto Mitigation Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "DDoS Auto Mitigation Enabled or Disabled"
                },
                "ddos_mitigation_enabled": {
                    "description": " DDoS Mitigation configured ",
                    "title": "DDoS Mitigation Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "DDoS Mitigation Enabled or Disabled"
                },
                "ddos_protection_enabled": {
                    "description": " DDoS Detection configured",
                    "title": "DDoS Detection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "DDoS Detection Enabled or Disabled"
                },
                "default_loadbalancer_enabled": {
                    "description": " Default Loadbalancer configured ",
                    "title": "Default Loadbalancer Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Default Loadbalancer Enabled or Disabled"
                },
                "dns_info": {
                    "type": "string",
                    "description": " DNS Info",
                    "title": "DNS Info",
                    "x-displayname": "DNS Info"
                },
                "domains": {
                    "type": "array",
                    "description": " Domains ",
                    "title": "Domains",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains"
                },
                "graph_ql_inspection_enabled": {
                    "description": " GraphQL Inspection configured ",
                    "title": "GraphQL Inspection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "GraphQL Inspection Enabled or Disabled"
                },
                "http_enabled": {
                    "description": " HTTP only loadbalancers",
                    "title": "HTTP Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "HTTP Only Enabled or Disabled"
                },
                "http_listen_port_choice": {
                    "type": "string",
                    "description": " HTTP Listen Port Choice ",
                    "title": "HTTP Listen Port Choice",
                    "x-displayname": "HTTP Listen Port Choice"
                },
                "idle_timeout": {
                    "type": "integer",
                    "description": " Idle Timeout ",
                    "title": "Idle Timeout",
                    "format": "int64",
                    "x-displayname": "Idle Timeout"
                },
                "ip_reputation_enabled": {
                    "description": " IP Reputation configured",
                    "title": "IP Reputation Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "IP Reputation Enabled or Disabled"
                },
                "loadbalancer_algorithm": {
                    "type": "string",
                    "description": " Loadbalancer Algorithm configured ",
                    "title": "Loadbalancer Algorithm",
                    "x-displayname": "Loadbalancer Algorithm"
                },
                "malicious_user_detection_enabled": {
                    "description": " HTTP loadbalancer Malicious User Detection configured",
                    "title": "Malicious User Detection Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Malicious User Detection Enabled or Disabled"
                },
                "malicious_user_mitigation_enabled": {
                    "description": " Malicious User Mitigation configured ",
                    "title": "Malicious User Mitigation Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Malicious User Mitigation Enabled or Disabled"
                },
                "mutual_tls_enabled": {
                    "description": " Mutual TLS configured ",
                    "title": "Mutual TLS Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Mutual TLS Enabled or Disabled"
                },
                "name": {
                    "type": "string",
                    "description": " Name of HTTP LB",
                    "title": "HTTP LB Name",
                    "x-displayname": "HTTP LB Name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of HTTP LB",
                    "title": "HTTP LB Namespace",
                    "x-displayname": "HTTP LB Namespace"
                },
                "namespace_service_policy_enabled": {
                    "description": " Namespace Service Policy configured",
                    "title": "Namespace Service Policy Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Namespace Service Policy Enabled or Disabled"
                },
                "origin_server_subset_enabled": {
                    "description": " Origin Server Subset configured ",
                    "title": "Origin Server Subset Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Origin Server Subset Enabled or Disabled"
                },
                "private_advertisement_enabled": {
                    "description": " advertised privately configured",
                    "title": "Private Advertisement Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Private Advertisement Enabled or Disabled"
                },
                "public_advertisment_enabled": {
                    "description": " advertised publicly configured",
                    "title": "Public Advertisement Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Public Advertisement Enabled or Disabled"
                },
                "rate_limit": {
                    "description": " Rate Limiting configured",
                    "title": "Rate Limiting Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Rate Limiting Enabled or Disabled"
                },
                "routes_enabled": {
                    "description": " Routes configured ",
                    "title": "Routes Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Routes Enabled or Disabled"
                },
                "service_policy_enabled": {
                    "description": " Service Policy configured ",
                    "title": "Service Policy Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Service Policy Enabled or Disabled"
                },
                "slow_ddos_mitigation_enabled": {
                    "description": " Slow DDoS Mitigation configured ",
                    "title": "Slow DDoS Mitigation Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Slow DDoS Mitigation Enabled or Disabled"
                },
                "tls_security_level": {
                    "type": "string",
                    "description": " TLS Security Level",
                    "title": "TLS Security Level",
                    "x-displayname": "TLS Security Level"
                },
                "trusted_client_enabled": {
                    "description": " Trusted Client configured ",
                    "title": "Trusted Client Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Trusted Client Enabled or Disabled"
                },
                "trusted_client_ip_headers_enabled": {
                    "description": " Trusted Client IP Headers configured ",
                    "title": "Trusted Client IP Headers Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Trusted Client IP Headers Enabled or Disabled"
                },
                "vip_type": {
                    "type": "string",
                    "description": " VIP Type ",
                    "title": "VIP Type",
                    "x-displayname": "VIP Type"
                },
                "waf_enabled": {
                    "description": " WAF configured",
                    "title": "WAF Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "WAF Enabled or Disabled"
                },
                "waf_exclusion_enabled": {
                    "description": " WAF Exclusion configured ",
                    "title": "WAF Exclusion Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "WAF Exclusion Enabled or Disabled"
                },
                "waf_policy_name": {
                    "type": "string",
                    "description": " Name of the WAF policy (if applicable)",
                    "title": "WAF Policy Name",
                    "x-displayname": "WAF Policy Name"
                }
            }
        },
        "namespaceHTTPLoadbalancerWafFilterResultType": {
            "type": "object",
            "description": "HTTP Loadbalancer Waf Filter Inventory Results",
            "title": "HTTPLoadbalancerWafFilterResultType",
            "x-displayname": "HTTP Loadbalancer Inventory Results",
            "x-ves-proto-message": "ves.io.schema.namespace.HTTPLoadbalancerWafFilterResultType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of HTTP LB",
                    "title": "HTTP LB Name",
                    "x-displayname": "HTTP LB Name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of HTTP LB",
                    "title": "HTTP LB Namespace",
                    "x-displayname": "HTTP LB Namespace"
                }
            }
        },
        "namespaceNetworkingInventoryRequest": {
            "type": "object",
            "description": "Request for inventory of networking related objects",
            "title": "NetworkingInventoryRequest",
            "x-displayname": "Networking related objects inventory request",
            "x-ves-proto-message": "ves.io.schema.namespace.NetworkingInventoryRequest"
        },
        "namespaceNetworkingInventoryResponse": {
            "type": "object",
            "description": "Response for inventory of networking related objects",
            "title": "NetworkingInventoryResponse",
            "x-displayname": "Networking related objects inventory response",
            "x-ves-proto-message": "ves.io.schema.namespace.NetworkingInventoryResponse",
            "properties": {
                "cloud_links": {
                    "type": "integer",
                    "description": " Number of CloudLinks",
                    "title": "CloudLinks",
                    "format": "int64",
                    "x-displayname": "CloudLinks"
                },
                "dc_cluster_groups": {
                    "type": "integer",
                    "description": " Number of DC cluster groups configured",
                    "title": "DC Cluster Groups",
                    "format": "int64",
                    "x-displayname": "DC Cluster Groups"
                },
                "global_networks": {
                    "type": "integer",
                    "description": " Number of global networks configured",
                    "title": "Global Networks",
                    "format": "int64",
                    "x-displayname": "Global Networks"
                },
                "site_mesh_groups": {
                    "type": "integer",
                    "description": " Number of site mesh groups configured",
                    "title": "Site Mesh Groups",
                    "format": "int64",
                    "x-displayname": "Site Mesh Groups"
                },
                "sites": {
                    "type": "integer",
                    "description": " Number of sites configured",
                    "title": "Sites",
                    "format": "int64",
                    "x-displayname": "Sites"
                }
            }
        },
        "namespacePublicAdvertiseChoice": {
            "type": "string",
            "description": "Enum for advertisement choise on public.\n\nInherit tenant's default.\nEnable enables advertisement on public.\nDisable disables advertisement on public.",
            "title": "PublicAdvertiseChoice",
            "enum": [
                "Default",
                "Enable",
                "Disable"
            ],
            "default": "Default",
            "x-displayname": "PublicAdvertiseChoice",
            "x-ves-proto-enum": "ves.io.schema.namespace.PublicAdvertiseChoice"
        },
        "namespaceSetActiveAlertPoliciesRequest": {
            "type": "object",
            "description": "SetActiveAlertPoliciesRequest is the shape of the request for SetActiveAlertPolicies.",
            "title": "SetActiveAlertPoliciesRequest",
            "x-displayname": "Request for SetActiveAlertPolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.SetActiveAlertPoliciesRequest",
            "properties": {
                "alert_policies": {
                    "type": "array",
                    "description": " A list of references to alert_policy objects.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n",
                    "title": "alert_policies",
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Alert Policies",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "namespaceSetActiveAlertPoliciesResponse": {
            "type": "object",
            "description": "SetActiveAlertPoliciesResponse is the shape of the response for SetActiveAlertPolicies.",
            "title": "SetActiveAlertPoliciesResponse",
            "x-displayname": "Response for SetActiveAlertPolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.SetActiveAlertPoliciesResponse"
        },
        "namespaceSetActiveNetworkPoliciesRequest": {
            "type": "object",
            "description": "SetActiveNetworkPoliciesRequest is the shape of the request for SetActiveNetworkPolicies.",
            "title": "SetActiveNetworkPoliciesRequest",
            "x-displayname": "Request for SetActiveNetworkPolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "network_policies": {
                    "type": "array",
                    "description": " A list of references to network_policy objects.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n",
                    "title": "network_policies",
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Network Policies",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32"
                    }
                }
            }
        },
        "namespaceSetActiveNetworkPoliciesResponse": {
            "type": "object",
            "description": "SetActiveNetworkPoliciesResponse is the shape of the response for SetActiveNetworkPolicies.",
            "title": "SetActiveNetworkPoliciesResponse",
            "x-displayname": "Response for SetActiveNetworkPolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse"
        },
        "namespaceSetActiveServicePoliciesRequest": {
            "type": "object",
            "description": "SetActiveServicePoliciesRequest is the shape of the request for SetActiveServicePolicies.",
            "title": "SetActiveServicePoliciesRequest",
            "x-displayname": "Request for SetActiveServicePolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.SetActiveServicePoliciesRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "service_policies": {
                    "type": "array",
                    "description": " Service Policies is a sequential engine where policies (and rules within the policy) are evaluated one after the other. It's important to define the\n correct order (policies evaluated from top to bottom in the list) for service policies, to get the intended result.\n For each request, its characteristics are evaluated based on the match criteria in each service policy starting at the top. If there is a match in the\n current policy, then the policy takes effect, and no more policies are evaluated. Otherwise, the next policy is evaluated.\n If all policies are evaluated and none match, then the request will be denied by default.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n",
                    "title": "service_policies",
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Service Policies",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32"
                    }
                }
            }
        },
        "namespaceSetActiveServicePoliciesResponse": {
            "type": "object",
            "description": "SetActiveServicePoliciesResponse is the shape of the response for SetActiveServicePolicies.",
            "title": "SetActiveServicePoliciesResponse",
            "x-displayname": "Response for SetActiveServicePolicies",
            "x-ves-proto-message": "ves.io.schema.namespace.SetActiveServicePoliciesResponse"
        },
        "namespaceSetFastACLsForInternetVIPsRequest": {
            "type": "object",
            "description": "SetFastACLsForInternetVIPsRequest contains list of FastACLs refs that\nshould be applied to the Internet VIPs",
            "title": "SetFastACLsForInternetVIPsRequest",
            "x-displayname": "Request for SetFastACLsForInternetVIP",
            "x-ves-proto-message": "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest",
            "properties": {
                "fast_acls": {
                    "type": "array",
                    "description": " The list of refs of FastACLs\n\nExample: - \"list of refs\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 128\n",
                    "title": "fast_acls",
                    "maxItems": 128,
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "FastACLs",
                    "x-ves-example": "list of refs",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "128"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " The name of the namespace\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "namespaceSetFastACLsForInternetVIPsResponse": {
            "type": "object",
            "description": "SetFastACLsForInternetVIPsResponse is empty",
            "title": "SetFastACLsForInternetVIPsResponse",
            "x-displayname": "Response for SetFastACLsForInternetVIPs",
            "x-ves-proto-message": "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse"
        },
        "namespaceSuggestValuesReq": {
            "type": "object",
            "description": "Request body of SuggestValues request",
            "title": "SuggestValuesReq",
            "x-displayname": "Request for SuggestValues",
            "x-ves-proto-message": "ves.io.schema.namespace.SuggestValuesReq",
            "properties": {
                "field_path": {
                    "type": "string",
                    "description": " JSON path of the field for which the suggested values are being requested.\n\nExample: - \"spec.rule_choice.rule_list.rules[2].spec.api_group_matcher.match\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 1024\n",
                    "title": "field_path",
                    "maxLength": 1024,
                    "x-displayname": "Field Path",
                    "x-ves-example": "spec.rule_choice.rule_list.rules[2].spec.api_group_matcher.match",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "1024"
                    }
                },
                "match_value": {
                    "type": "string",
                    "description": " A substring that must be present in either the value or description of each SuggestedItem in the response.\n\nExample: - \"some-substring\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "match_value",
                    "maxLength": 256,
                    "x-displayname": "Match Value",
                    "x-ves-example": "some-substring",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the suggestions are scoped.\n\nExample: - \"foobar\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "foobar"
                },
                "request_body": {
                    "description": " Body of the Create/Replace/Custom request in whose context the suggested values for the field are being requested.",
                    "title": "request_body",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Request Body"
                }
            }
        },
        "namespaceTCPLoadbalancerInventoryFilterType": {
            "type": "object",
            "description": "TCP Loadbalancer inventory Filter",
            "title": "TCPLoadbalancerInventoryFilterType",
            "x-displayname": "Filter for Inventory of TCP Loadbalancers",
            "x-ves-proto-message": "ves.io.schema.namespace.TCPLoadbalancerInventoryFilterType",
            "properties": {
                "namespace_service_policy": {
                    "type": "boolean",
                    "description": " Filter results with TCP loadbalancers with Namespace Service Policy configured",
                    "title": "Namespace Service Policy",
                    "format": "boolean",
                    "x-displayname": "Namespace Service Policy"
                },
                "private_advertisement": {
                    "type": "boolean",
                    "description": " Filter results with TCP loadbalancers advertised privately",
                    "title": "Private Advertisement",
                    "format": "boolean",
                    "x-displayname": "Private Advertisement"
                },
                "public_advertisment": {
                    "type": "boolean",
                    "description": " Filter results with TCP loadbalancers advertised publicly",
                    "title": "Public Advertisement",
                    "format": "boolean",
                    "x-displayname": "Public Advertisement"
                },
                "service_policy": {
                    "type": "boolean",
                    "description": " Filter results with TCP loadbalancers with Service Policy configured",
                    "title": "Service Policy",
                    "format": "boolean",
                    "x-displayname": "Service Policy"
                },
                "tls_encryption": {
                    "type": "boolean",
                    "description": " Filter results with TCP loadbalancers with TLS Encryption configured",
                    "title": "TLS Encryption",
                    "format": "boolean",
                    "x-displayname": "TLS Encryption"
                }
            }
        },
        "namespaceTCPLoadbalancerInventoryType": {
            "type": "object",
            "description": "TCP Loadbalancer inventory",
            "title": "TCPLoadbalancerInventoryType",
            "x-displayname": "Inventory of TCP Loadbalancers",
            "x-ves-proto-message": "ves.io.schema.namespace.TCPLoadbalancerInventoryType",
            "properties": {
                "namespace_service_policy": {
                    "type": "integer",
                    "description": " Number of TCP loadbalancers with Namespace Service Policy configured",
                    "title": "Namespace Service Policy",
                    "format": "int64",
                    "x-displayname": "Namespace Service Policy"
                },
                "private_advertisement": {
                    "type": "integer",
                    "description": " Number of TCP loadbalancers advertised privately",
                    "title": "Private Advertisement",
                    "format": "int64",
                    "x-displayname": "Private Advertisement"
                },
                "public_advertisment": {
                    "type": "integer",
                    "description": " Number of TCP loadbalancers advertised publicly",
                    "title": "Public Advertisement",
                    "format": "int64",
                    "x-displayname": "Public Advertisement"
                },
                "service_policy": {
                    "type": "integer",
                    "description": " Number of TCP loadbalancers with Service Policy configured",
                    "title": "Service Policy",
                    "format": "int64",
                    "x-displayname": "Service Policy"
                },
                "tcplb_results": {
                    "type": "array",
                    "description": " List of TCP loadbalancers",
                    "title": "TCP Loadbalancers",
                    "items": {
                        "$ref": "#/definitions/namespaceTCPLoadbalancerResultType"
                    },
                    "x-displayname": "List of TCP Loadbalancers"
                },
                "tls_encryption": {
                    "type": "integer",
                    "description": " Number of TCP loadbalancers with TLS Encryption configured",
                    "title": "TLS Encryption",
                    "format": "int64",
                    "x-displayname": "TLS Encryption"
                }
            }
        },
        "namespaceTCPLoadbalancerResultType": {
            "type": "object",
            "description": "TCP Loadbalancer Inventory Results",
            "title": "TCPLoadbalancerResultType",
            "x-displayname": "TCP Loadbalancer Inventory Results",
            "x-ves-proto-message": "ves.io.schema.namespace.TCPLoadbalancerResultType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of TCP LB",
                    "title": "TCP LB Name",
                    "x-displayname": "TCP LB Name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of TCP LB",
                    "title": "TCP LB Namespace",
                    "x-displayname": "TCP LB Namespace"
                },
                "namespace_service_policy": {
                    "description": " Namespace Service Policy configured",
                    "title": "Namespace Service Policy Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Namespace Service Policy"
                },
                "private_advertisement": {
                    "description": " advertised privately configured",
                    "title": "Private Advertisement Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Private Advertisement Enabled or Disabled"
                },
                "public_advertisment": {
                    "description": " advertised publicly configured",
                    "title": "Public Advertisement Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Public Advertisement Enabled or Disabled"
                },
                "rate_limit": {
                    "description": " Rate Limit Status",
                    "title": "Rate Limit Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Rate Limiting Enabled or Disabled"
                },
                "service_policy": {
                    "description": " xService Policy configured",
                    "title": "Service Policy Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Service Policy Enabled or Disabled"
                },
                "tls_encryption": {
                    "description": " TLS Encryption configured",
                    "title": "TLS Encryption Status",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "TLS Encryption Enabled or Disabled"
                }
            }
        },
        "namespaceUpdateAllowAdvertiseOnPublicReq": {
            "type": "object",
            "description": "Request body of UpdateAllowAdvertiseOnPublic request",
            "title": "UpdateAllowAdvertiseOnPublicReq",
            "x-displayname": "Request for UpdateAllowAdvertiseOnPublic",
            "x-ves-proto-message": "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq",
            "properties": {
                "allow_advertise_on_public": {
                    "description": " Config choice to allow advertisement on the public.",
                    "$ref": "#/definitions/namespacePublicAdvertiseChoice",
                    "x-displayname": "Allow advertisement on public."
                },
                "namespace": {
                    "type": "string",
                    "description": " Name of the namespace under which all the URLs in APIItems will be evaluated\n\nExample: - \"value\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceUpdateAllowAdvertiseOnPublicResp": {
            "type": "object",
            "description": "Response body of UpdateAllowAdvertiseOnPublic request",
            "title": "UpdateAllowAdvertiseOnPublicResp",
            "x-displayname": "Response for UpdateAllowAdvertiseOnPublic",
            "x-ves-proto-message": "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp",
            "properties": {
                "result": {
                    "type": "boolean",
                    "description": " API result.",
                    "title": "result",
                    "format": "boolean",
                    "x-displayname": "Result"
                }
            }
        },
        "namespaceValidateRulesReq": {
            "type": "object",
            "description": "Request body of ValidateRulesReq request",
            "title": "ValidateRulesReq",
            "x-displayname": "Request for validating according to rules specified in the validator_evaluation",
            "x-ves-proto-message": "ves.io.schema.namespace.ValidateRulesReq",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " The name of the namespace which will be system in this case.\n\nExample: - \"system\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "validator_evaluation": {
                    "type": "object",
                    "description": " Map contains vaidators which needs to be evaluated\n\nExample: - \"The map key would be the validator type e.g. XStringRegex and the map value is the validator value e.g. true\"-",
                    "title": "validator evaluation",
                    "x-displayname": "Validator evaluation",
                    "x-ves-example": "The map key would be the validator type e.g. XStringRegex and the map value is the validator value e.g. true"
                },
                "value": {
                    "type": "string",
                    "description": " The value to be validated\n\nExample: - \"value\"-",
                    "title": "value",
                    "x-displayname": "Value",
                    "x-ves-example": "value"
                }
            }
        },
        "namespaceValidateRulesResponse": {
            "type": "object",
            "description": "Response body of ValidateRulesReq request",
            "title": "ValidateRulesResponse",
            "x-displayname": "Response for ValidateRulesReq",
            "x-ves-proto-message": "ves.io.schema.namespace.ValidateRulesResponse",
            "properties": {
                "error": {
                    "type": "string",
                    "description": " Error returned in case the value does not match the validator rules.",
                    "title": "error",
                    "x-displayname": "Error"
                },
                "success": {
                    "type": "boolean",
                    "description": " This will set true if validation is successful on value",
                    "title": "success",
                    "format": "boolean",
                    "x-displayname": "Success"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemanamespaceSuggestValuesResp": {
            "type": "object",
            "description": "Response body of SuggestValues request",
            "title": "SuggestValuesResp",
            "x-displayname": "Response for SuggestValues",
            "x-ves-proto-message": "ves.io.schema.namespace.SuggestValuesResp",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " List of suggested items.",
                    "title": "item_lists",
                    "items": {
                        "$ref": "#/definitions/schemanamespaceSuggestedItem"
                    },
                    "x-displayname": "Suggested Items"
                }
            }
        },
        "schemanamespaceSuggestedItem": {
            "type": "object",
            "description": "A tuple with a suggested value and it's description.",
            "title": "SuggestedItem",
            "x-displayname": "Suggested Item",
            "x-ves-oneof-field-value_choice": "[\"ref_value\",\"str_value\"]",
            "x-ves-proto-message": "ves.io.schema.namespace.SuggestedItem",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Optional description for the suggested value.",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "ref_value": {
                    "description": "Exclusive with [str_value]\n",
                    "title": "str_value",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Object Reference"
                },
                "str_value": {
                    "type": "string",
                    "description": "Exclusive with [ref_value]\n",
                    "title": "str_value",
                    "x-displayname": "String"
                },
                "value": {
                    "type": "string",
                    "description": " Suggested value for the field.\n Should use value_choice.str_value instead.",
                    "title": "value",
                    "x-displayname": "Value"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        }
    },
    "x-displayname": "Namespace",
    "x-ves-proto-file": "ves.io/schema/namespace/public_customapi_akar.proto"
}`

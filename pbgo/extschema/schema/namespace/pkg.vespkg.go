// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package namespace

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.namespace.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.namespace.Object"] = ObjectValidator()
	vr["ves.io.schema.namespace.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.namespace.CreateRequest"] = CreateRequestValidator()
	vr["ves.io.schema.namespace.CreateResponse"] = CreateResponseValidator()
	vr["ves.io.schema.namespace.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.namespace.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.namespace.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.namespace.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.namespace.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.namespace.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.namespace.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.namespace.APIItem"] = APIItemValidator()
	vr["ves.io.schema.namespace.APIItemList"] = APIItemListValidator()
	vr["ves.io.schema.namespace.EvaluateAPIAccessReq"] = EvaluateAPIAccessReqValidator()
	vr["ves.io.schema.namespace.EvaluateAPIAccessResp"] = EvaluateAPIAccessRespValidator()
	vr["ves.io.schema.namespace.EvaluateBatchAPIAccessReq"] = EvaluateBatchAPIAccessReqValidator()
	vr["ves.io.schema.namespace.EvaluateBatchAPIAccessResp"] = EvaluateBatchAPIAccessRespValidator()
	vr["ves.io.schema.namespace.LookupUserRolesReq"] = LookupUserRolesReqValidator()
	vr["ves.io.schema.namespace.LookupUserRolesResp"] = LookupUserRolesRespValidator()
	vr["ves.io.schema.namespace.NamespaceAPIList"] = NamespaceAPIListValidator()

	vr["ves.io.schema.namespace.AllApplicationInventoryRequest"] = AllApplicationInventoryRequestValidator()
	vr["ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest"] = AllApplicationInventoryWafFilterRequestValidator()
	vr["ves.io.schema.namespace.AllApplicationInventoryWafFilterResponse"] = AllApplicationInventoryWafFilterResponseValidator()
	vr["ves.io.schema.namespace.ApplicationInventoryRequest"] = ApplicationInventoryRequestValidator()
	vr["ves.io.schema.namespace.ApplicationInventoryResponse"] = ApplicationInventoryResponseValidator()
	vr["ves.io.schema.namespace.GetActiveAlertPoliciesRequest"] = GetActiveAlertPoliciesRequestValidator()
	vr["ves.io.schema.namespace.GetActiveAlertPoliciesResponse"] = GetActiveAlertPoliciesResponseValidator()
	vr["ves.io.schema.namespace.GetActiveNetworkPoliciesRequest"] = GetActiveNetworkPoliciesRequestValidator()
	vr["ves.io.schema.namespace.GetActiveNetworkPoliciesResponse"] = GetActiveNetworkPoliciesResponseValidator()
	vr["ves.io.schema.namespace.GetActiveServicePoliciesRequest"] = GetActiveServicePoliciesRequestValidator()
	vr["ves.io.schema.namespace.GetActiveServicePoliciesResponse"] = GetActiveServicePoliciesResponseValidator()
	vr["ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest"] = GetFastACLsForInternetVIPsRequestValidator()
	vr["ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse"] = GetFastACLsForInternetVIPsResponseValidator()
	vr["ves.io.schema.namespace.HTTPLoadbalancerInventoryFilterType"] = HTTPLoadbalancerInventoryFilterTypeValidator()
	vr["ves.io.schema.namespace.HTTPLoadbalancerInventoryType"] = HTTPLoadbalancerInventoryTypeValidator()
	vr["ves.io.schema.namespace.HTTPLoadbalancerResultType"] = HTTPLoadbalancerResultTypeValidator()
	vr["ves.io.schema.namespace.HTTPLoadbalancerWafFilterResultType"] = HTTPLoadbalancerWafFilterResultTypeValidator()
	vr["ves.io.schema.namespace.NetworkingInventoryRequest"] = NetworkingInventoryRequestValidator()
	vr["ves.io.schema.namespace.NetworkingInventoryResponse"] = NetworkingInventoryResponseValidator()
	vr["ves.io.schema.namespace.SetActiveAlertPoliciesRequest"] = SetActiveAlertPoliciesRequestValidator()
	vr["ves.io.schema.namespace.SetActiveAlertPoliciesResponse"] = SetActiveAlertPoliciesResponseValidator()
	vr["ves.io.schema.namespace.SetActiveNetworkPoliciesRequest"] = SetActiveNetworkPoliciesRequestValidator()
	vr["ves.io.schema.namespace.SetActiveNetworkPoliciesResponse"] = SetActiveNetworkPoliciesResponseValidator()
	vr["ves.io.schema.namespace.SetActiveServicePoliciesRequest"] = SetActiveServicePoliciesRequestValidator()
	vr["ves.io.schema.namespace.SetActiveServicePoliciesResponse"] = SetActiveServicePoliciesResponseValidator()
	vr["ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest"] = SetFastACLsForInternetVIPsRequestValidator()
	vr["ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse"] = SetFastACLsForInternetVIPsResponseValidator()
	vr["ves.io.schema.namespace.TCPLoadbalancerInventoryFilterType"] = TCPLoadbalancerInventoryFilterTypeValidator()
	vr["ves.io.schema.namespace.TCPLoadbalancerInventoryType"] = TCPLoadbalancerInventoryTypeValidator()
	vr["ves.io.schema.namespace.TCPLoadbalancerResultType"] = TCPLoadbalancerResultTypeValidator()
	vr["ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq"] = UpdateAllowAdvertiseOnPublicReqValidator()
	vr["ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp"] = UpdateAllowAdvertiseOnPublicRespValidator()
	vr["ves.io.schema.namespace.ValidateRulesReq"] = ValidateRulesReqValidator()
	vr["ves.io.schema.namespace.ValidateRulesResponse"] = ValidateRulesResponseValidator()

	vr["ves.io.schema.namespace.ApiEndpointsStatsNSReq"] = ApiEndpointsStatsNSReqValidator()
	vr["ves.io.schema.namespace.ApiEndpointsStatsNSRsp"] = ApiEndpointsStatsNSRspValidator()

	vr["ves.io.schema.namespace.CascadeDeleteItemType"] = CascadeDeleteItemTypeValidator()
	vr["ves.io.schema.namespace.CascadeDeleteRequest"] = CascadeDeleteRequestValidator()
	vr["ves.io.schema.namespace.CascadeDeleteResponse"] = CascadeDeleteResponseValidator()
	vr["ves.io.schema.namespace.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.namespace.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.namespace.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.namespace.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.namespace.SubCA"] = SubCAValidator()
	vr["ves.io.schema.namespace.SuggestValuesReq"] = SuggestValuesReqValidator()
	vr["ves.io.schema.namespace.SuggestValuesResp"] = SuggestValuesRespValidator()
	vr["ves.io.schema.namespace.SuggestedItem"] = SuggestedItemValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.namespace.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.namespace.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.namespace.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.namespace.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.namespace.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.namespace.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.namespace.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.namespace.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.namespace.API"] = "web"
	sm["ves.io.schema.namespace.CustomAPI"] = "web"
	sm["ves.io.schema.namespace.NamespaceCustomAPI"] = "config"
	sm["ves.io.schema.namespace.NamespaceMLCustomAPI"] = "ml/data"
	sm["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = "cloud-data"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.namespace.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.namespace.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.namespace.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.namespace.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.namespace.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.namespace.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.namespace.Object"] = NewCRUDAPIServer

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.namespace.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.namespace.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.namespace.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.namespace.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.namespace.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.namespace.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.namespace.Object"] = NamespaceCustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.namespace.NamespaceCustomAPI"] = NewNamespaceCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.namespace.NamespaceCustomAPI"] = NewNamespaceCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.namespace.NamespaceCustomAPI"] = RegisterNamespaceCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.namespace.NamespaceCustomAPI"] = RegisterGwNamespaceCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.namespace.NamespaceCustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewNamespaceCustomAPIServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.namespace.Object"] = NamespaceMLCustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.namespace.NamespaceMLCustomAPI"] = NewNamespaceMLCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.namespace.NamespaceMLCustomAPI"] = NewNamespaceMLCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.namespace.NamespaceMLCustomAPI"] = RegisterNamespaceMLCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.namespace.NamespaceMLCustomAPI"] = RegisterGwNamespaceMLCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.namespace.NamespaceMLCustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewNamespaceMLCustomAPIServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		customCSR.SwaggerRegistry["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = NamespaceCloudDataCustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = NewNamespaceCloudDataCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = NewNamespaceCloudDataCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = RegisterNamespaceCloudDataCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = RegisterGwNamespaceCloudDataCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.namespace.NamespaceCloudDataCustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewNamespaceCloudDataCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

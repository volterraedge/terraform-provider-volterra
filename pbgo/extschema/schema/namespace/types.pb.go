// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/types.proto

package namespace

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PublicAdvertiseChoice
//
// x-displayName: "PublicAdvertiseChoice"
// Enum for advertisement choise on public.
type PublicAdvertiseChoice int32

const (
	// x-displayName: "Default"
	// Inherit tenant's default.
	Default PublicAdvertiseChoice = 0
	// x-displayName: "Enable"
	// Enable enables advertisement on public.
	Enable PublicAdvertiseChoice = 1
	// x-displayName: "Disable"
	// Disable disables advertisement on public.
	Disable PublicAdvertiseChoice = 2
)

var PublicAdvertiseChoice_name = map[int32]string{
	0: "Default",
	1: "Enable",
	2: "Disable",
}

var PublicAdvertiseChoice_value = map[string]int32{
	"Default": 0,
	"Enable":  1,
	"Disable": 2,
}

func (PublicAdvertiseChoice) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6586097a4709ae33, []int{0}
}

// Sub CA Usage
//
// x-displayName: "Sub CA"
// Sub CA information.
type SubCA struct {
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// Name for this CA
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CA PEM
	//
	// x-displayName: "PEM encoded certificate for"
	// x-required
	// PEM encoded certificate
	Pem string `protobuf:"bytes,2,opt,name=pem,proto3" json:"pem,omitempty"`
	// Private Key
	//
	// x-displayName: "Private Key"
	// x-required
	// Private Key for CA
	PrivateKey *schema.SecretType `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Version
	//
	// x-displayName: "Version"
	// Certificate version
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *SubCA) Reset()      { *m = SubCA{} }
func (*SubCA) ProtoMessage() {}
func (*SubCA) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586097a4709ae33, []int{0}
}
func (m *SubCA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubCA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubCA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubCA.Merge(m, src)
}
func (m *SubCA) XXX_Size() int {
	return m.Size()
}
func (m *SubCA) XXX_DiscardUnknown() {
	xxx_messageInfo_SubCA.DiscardUnknown(m)
}

var xxx_messageInfo_SubCA proto.InternalMessageInfo

func (m *SubCA) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubCA) GetPem() string {
	if m != nil {
		return m.Pem
	}
	return ""
}

func (m *SubCA) GetPrivateKey() *schema.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SubCA) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// This is the shape of the namespace representation in the database at Global Controller
type GlobalSpecType struct {
	// Proxy Sub CAs
	//
	// Array of SubCAs, the latest one will be used for proxy feature.
	// x-displayName: "Proxy Sub CAs"
	ProxySubCas []*SubCA `protobuf:"bytes,1,rep,name=proxy_sub_cas,json=proxySubCas,proto3" json:"proxy_sub_cas,omitempty"`
	// Proxy Sub CA Version
	//
	// SubCA version which is the latest and will be used for proxy feature.
	// x-displayName: "Proxy Sub CA Version"
	ProxySubCaLatestVersion uint32 `protobuf:"varint,2,opt,name=proxy_sub_ca_latest_version,json=proxySubCaLatestVersion,proto3" json:"proxy_sub_ca_latest_version,omitempty"`
	// Allow advertisement on public.
	//
	// Config choice to allow advertisement on the public.
	// x-displayName: "Allow advertisement on public."
	AllowAdvertiseOnPublic PublicAdvertiseChoice `protobuf:"varint,3,opt,name=allow_advertise_on_public,json=allowAdvertiseOnPublic,proto3,enum=ves.io.schema.namespace.PublicAdvertiseChoice" json:"allow_advertise_on_public,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586097a4709ae33, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetProxySubCas() []*SubCA {
	if m != nil {
		return m.ProxySubCas
	}
	return nil
}

func (m *GlobalSpecType) GetProxySubCaLatestVersion() uint32 {
	if m != nil {
		return m.ProxySubCaLatestVersion
	}
	return 0
}

func (m *GlobalSpecType) GetAllowAdvertiseOnPublic() PublicAdvertiseChoice {
	if m != nil {
		return m.AllowAdvertiseOnPublic
	}
	return Default
}

// Create namespace
//
// x-displayName: "Create Namespace"
// Creates a new namespace. Name of the object is name of the name space.
type CreateSpecType struct {
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586097a4709ae33, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

// Replace namespace
//
// x-displayName: "Replace Namespace"
// Replaces attributes of a namespace including its metadata like labels, description etc.
type ReplaceSpecType struct {
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586097a4709ae33, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

// Get namespace
//
// x-displayName: "Get Namespace"
// This is the read representation of the namespace object.
type GetSpecType struct {
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586097a4709ae33, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ves.io.schema.namespace.PublicAdvertiseChoice", PublicAdvertiseChoice_name, PublicAdvertiseChoice_value)
	golang_proto.RegisterEnum("ves.io.schema.namespace.PublicAdvertiseChoice", PublicAdvertiseChoice_name, PublicAdvertiseChoice_value)
	proto.RegisterType((*SubCA)(nil), "ves.io.schema.namespace.SubCA")
	golang_proto.RegisterType((*SubCA)(nil), "ves.io.schema.namespace.SubCA")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.namespace.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.namespace.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.namespace.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.namespace.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.namespace.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.namespace.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.namespace.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.namespace.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/namespace/types.proto", fileDescriptor_6586097a4709ae33)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/namespace/types.proto", fileDescriptor_6586097a4709ae33)
}

var fileDescriptor_6586097a4709ae33 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x4f, 0x14, 0x4d,
	0x10, 0xc6, 0xa7, 0x77, 0x17, 0xc8, 0xdb, 0x13, 0x78, 0x71, 0x8c, 0x32, 0x2c, 0xa6, 0xb3, 0x59,
	0x34, 0x6e, 0x4c, 0x98, 0x49, 0xf0, 0x66, 0xfc, 0x13, 0x16, 0x0d, 0x07, 0x35, 0x92, 0xc1, 0x78,
	0xf0, 0x32, 0xe9, 0x19, 0x8a, 0xa1, 0xc3, 0xec, 0x74, 0xa7, 0xbb, 0x67, 0x64, 0x0f, 0x26, 0xc4,
	0xab, 0x17, 0x3f, 0x86, 0x67, 0x8f, 0x9e, 0x38, 0x12, 0x4f, 0x1c, 0x39, 0xca, 0xec, 0x45, 0x6f,
	0x7c, 0x01, 0x13, 0xb3, 0x3d, 0x2c, 0xb0, 0x44, 0xb8, 0x55, 0xcd, 0xf3, 0xab, 0xaa, 0xa7, 0x2a,
	0x3d, 0x78, 0xb1, 0x00, 0xe5, 0x31, 0xee, 0xab, 0x78, 0x1b, 0x7a, 0xd4, 0xcf, 0x68, 0x0f, 0x94,
	0xa0, 0x31, 0xf8, 0xba, 0x2f, 0x40, 0x79, 0x42, 0x72, 0xcd, 0x9d, 0xb9, 0x0a, 0xf2, 0x2a, 0xc8,
	0x3b, 0x83, 0x9a, 0x4b, 0x09, 0xd3, 0xdb, 0x79, 0xe4, 0xc5, 0xbc, 0xe7, 0x27, 0x3c, 0xe1, 0xbe,
	0xe1, 0xa3, 0x7c, 0xcb, 0x64, 0x26, 0x31, 0x51, 0xd5, 0xa7, 0xb9, 0x30, 0x3e, 0x8c, 0x0b, 0xcd,
	0x78, 0x76, 0x3a, 0xa4, 0x39, 0x3f, 0x2e, 0x5e, 0x98, 0xdf, 0xbc, 0x33, 0x2e, 0x15, 0x34, 0x65,
	0x9b, 0x54, 0x43, 0xa5, 0xb6, 0xbf, 0x21, 0x3c, 0xb1, 0x91, 0x47, 0xab, 0x2b, 0xce, 0x7d, 0xdc,
	0x18, 0x7a, 0x73, 0x51, 0x0b, 0x75, 0xfe, 0xeb, 0xde, 0xfc, 0xfe, 0x7b, 0xbf, 0x3e, 0x21, 0xeb,
	0xee, 0xa7, 0xc6, 0x30, 0x6a, 0xc8, 0xda, 0x2c, 0x0a, 0x0c, 0xe0, 0xdc, 0xc3, 0x75, 0x01, 0x3d,
	0xb7, 0x36, 0xce, 0xed, 0xad, 0x9f, 0x73, 0x43, 0xdd, 0x79, 0x86, 0x6d, 0x21, 0x59, 0x41, 0x35,
	0x84, 0x3b, 0xd0, 0x77, 0xeb, 0x2d, 0xd4, 0xb1, 0x97, 0xe7, 0xbd, 0xf1, 0x6b, 0x6c, 0x40, 0x2c,
	0x41, 0xbf, 0xed, 0x0b, 0xe8, 0xd6, 0x0f, 0x3e, 0xa2, 0x00, 0x9f, 0x96, 0xbc, 0x84, 0xbe, 0xe3,
	0xe2, 0xa9, 0x02, 0xa4, 0x62, 0x3c, 0x73, 0x1b, 0x2d, 0xd4, 0x99, 0x0e, 0x46, 0x69, 0xfb, 0x0f,
	0xc2, 0x33, 0x6b, 0x29, 0x8f, 0x68, 0xba, 0x21, 0x20, 0x1e, 0x56, 0x3b, 0x5d, 0x3c, 0x2d, 0x24,
	0xdf, 0xed, 0x87, 0x2a, 0x8f, 0xc2, 0x98, 0x2a, 0x17, 0xb5, 0xea, 0x1d, 0x7b, 0x99, 0x78, 0x57,
	0x5c, 0xdf, 0x33, 0x4b, 0x07, 0xb6, 0x29, 0x1a, 0xc6, 0x54, 0x39, 0x8f, 0xf1, 0xc2, 0xc5, 0x1e,
	0x61, 0x4a, 0x35, 0x28, 0x1d, 0x8e, 0x4c, 0xd4, 0x8c, 0x89, 0xb9, 0xf3, 0x8a, 0x57, 0x46, 0x7f,
	0x57, 0xc9, 0x0e, 0xc3, 0xf3, 0x34, 0x4d, 0xf9, 0x87, 0x90, 0x6e, 0x16, 0x20, 0x35, 0x53, 0x10,
	0xf2, 0x2c, 0x14, 0x79, 0x94, 0xb2, 0xd8, 0x6c, 0x3f, 0xb3, 0xec, 0x5d, 0xe9, 0x66, 0xdd, 0x60,
	0x2b, 0xa3, 0xca, 0xd5, 0x6d, 0xce, 0x62, 0x08, 0x6e, 0x9b, 0x86, 0x67, 0x5f, 0xdf, 0x64, 0x15,
	0xd6, 0x5e, 0xc4, 0x33, 0xab, 0x12, 0xa8, 0x86, 0xd1, 0xfa, 0x8f, 0x6e, 0xfc, 0x78, 0x7a, 0xe9,
	0x22, 0xed, 0xbb, 0xf8, 0xff, 0x00, 0x44, 0x4a, 0xe3, 0x6b, 0xa9, 0x16, 0xb6, 0xd7, 0x40, 0x5f,
	0x43, 0x3c, 0x78, 0x82, 0x6f, 0xfd, 0xd3, 0x9d, 0x63, 0xe3, 0xa9, 0xe7, 0xb0, 0x45, 0xf3, 0x54,
	0xcf, 0x5a, 0x0e, 0xc6, 0x93, 0x2f, 0x32, 0x1a, 0xa5, 0x30, 0x8b, 0x8c, 0xc0, 0x94, 0x49, 0x6a,
	0xdd, 0xcf, 0xe8, 0xf0, 0x98, 0x58, 0x47, 0xc7, 0xc4, 0x3a, 0x39, 0x26, 0x68, 0xaf, 0x24, 0xe8,
	0x6b, 0x49, 0xd0, 0x41, 0x49, 0xd0, 0x61, 0x49, 0xd0, 0x51, 0x49, 0xd0, 0xcf, 0x92, 0xa0, 0x5f,
	0x25, 0xb1, 0x4e, 0x4a, 0x82, 0xbe, 0x0c, 0x88, 0xb5, 0x3f, 0x20, 0xe8, 0x70, 0x40, 0xac, 0xa3,
	0x01, 0xb1, 0xde, 0xbf, 0x4e, 0xb8, 0xd8, 0x49, 0xbc, 0x82, 0xa7, 0x1a, 0xa4, 0xa4, 0x5e, 0xae,
	0x7c, 0x13, 0x6c, 0x71, 0xd9, 0x5b, 0x12, 0x92, 0x17, 0x6c, 0x13, 0xe4, 0xd2, 0x48, 0xf6, 0x45,
	0x94, 0x70, 0x1f, 0x76, 0xf5, 0xe9, 0x63, 0xbf, 0xfc, 0x63, 0x46, 0x93, 0xe6, 0xd5, 0x3f, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xe6, 0x8f, 0x77, 0xba, 0x03, 0x00, 0x00,
}

func (x PublicAdvertiseChoice) String() string {
	s, ok := PublicAdvertiseChoice_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SubCA) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubCA)
	if !ok {
		that2, ok := that.(SubCA)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Pem != that1.Pem {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProxySubCas) != len(that1.ProxySubCas) {
		return false
	}
	for i := range this.ProxySubCas {
		if !this.ProxySubCas[i].Equal(that1.ProxySubCas[i]) {
			return false
		}
	}
	if this.ProxySubCaLatestVersion != that1.ProxySubCaLatestVersion {
		return false
	}
	if this.AllowAdvertiseOnPublic != that1.AllowAdvertiseOnPublic {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubCA) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespace.SubCA{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Pem: "+fmt.Sprintf("%#v", this.Pem)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.GlobalSpecType{")
	if this.ProxySubCas != nil {
		s = append(s, "ProxySubCas: "+fmt.Sprintf("%#v", this.ProxySubCas)+",\n")
	}
	s = append(s, "ProxySubCaLatestVersion: "+fmt.Sprintf("%#v", this.ProxySubCaLatestVersion)+",\n")
	s = append(s, "AllowAdvertiseOnPublic: "+fmt.Sprintf("%#v", this.AllowAdvertiseOnPublic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.CreateSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.ReplaceSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.GetSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SubCA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubCA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubCA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pem) > 0 {
		i -= len(m.Pem)
		copy(dAtA[i:], m.Pem)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowAdvertiseOnPublic != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AllowAdvertiseOnPublic))
		i--
		dAtA[i] = 0x18
	}
	if m.ProxySubCaLatestVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxySubCaLatestVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProxySubCas) > 0 {
		for iNdEx := len(m.ProxySubCas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProxySubCas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubCA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Pem)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProxySubCas) > 0 {
		for _, e := range m.ProxySubCas {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ProxySubCaLatestVersion != 0 {
		n += 1 + sovTypes(uint64(m.ProxySubCaLatestVersion))
	}
	if m.AllowAdvertiseOnPublic != 0 {
		n += 1 + sovTypes(uint64(m.AllowAdvertiseOnPublic))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SubCA) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubCA{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Pem:` + fmt.Sprintf("%v", this.Pem) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProxySubCas := "[]*SubCA{"
	for _, f := range this.ProxySubCas {
		repeatedStringForProxySubCas += strings.Replace(f.String(), "SubCA", "SubCA", 1) + ","
	}
	repeatedStringForProxySubCas += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ProxySubCas:` + repeatedStringForProxySubCas + `,`,
		`ProxySubCaLatestVersion:` + fmt.Sprintf("%v", this.ProxySubCaLatestVersion) + `,`,
		`AllowAdvertiseOnPublic:` + fmt.Sprintf("%v", this.AllowAdvertiseOnPublic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SubCA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubCA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubCA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &schema.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxySubCas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxySubCas = append(m.ProxySubCas, &SubCA{})
			if err := m.ProxySubCas[len(m.ProxySubCas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxySubCaLatestVersion", wireType)
			}
			m.ProxySubCaLatestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxySubCaLatestVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAdvertiseOnPublic", wireType)
			}
			m.AllowAdvertiseOnPublic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowAdvertiseOnPublic |= PublicAdvertiseChoice(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

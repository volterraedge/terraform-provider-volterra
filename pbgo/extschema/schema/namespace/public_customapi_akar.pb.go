// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/public_customapi_akar.proto

// Namespace API
//
// x-displayName: "Namespace"
// APIs in this file are custom APIs on namespace object served by akar

package namespace

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SetFastACLsForInternetVIPsRequest
//
// x-displayName: "Request for SetFastACLsForInternetVIP"
// SetFastACLsForInternetVIPsRequest contains list of FastACLs refs that
// should be applied to the Internet VIPs
type SetFastACLsForInternetVIPsRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// fast_acls
	//
	// x-displayName: "FastACLs"
	// x-example: "list of refs"
	// The list of refs of FastACLs
	FastAcls []*views.ObjectRefType `protobuf:"bytes,2,rep,name=fast_acls,json=fastAcls,proto3" json:"fast_acls,omitempty"`
}

func (m *SetFastACLsForInternetVIPsRequest) Reset()      { *m = SetFastACLsForInternetVIPsRequest{} }
func (*SetFastACLsForInternetVIPsRequest) ProtoMessage() {}
func (*SetFastACLsForInternetVIPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{0}
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetFastACLsForInternetVIPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetFastACLsForInternetVIPsRequest.Merge(m, src)
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetFastACLsForInternetVIPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetFastACLsForInternetVIPsRequest proto.InternalMessageInfo

func (m *SetFastACLsForInternetVIPsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetFastACLsForInternetVIPsRequest) GetFastAcls() []*views.ObjectRefType {
	if m != nil {
		return m.FastAcls
	}
	return nil
}

// SetFastACLsForInternetVIPsResponse
//
// x-displayName: "Response for SetFastACLsForInternetVIPs"
// SetFastACLsForInternetVIPsResponse is empty
type SetFastACLsForInternetVIPsResponse struct {
}

func (m *SetFastACLsForInternetVIPsResponse) Reset()      { *m = SetFastACLsForInternetVIPsResponse{} }
func (*SetFastACLsForInternetVIPsResponse) ProtoMessage() {}
func (*SetFastACLsForInternetVIPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{1}
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetFastACLsForInternetVIPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetFastACLsForInternetVIPsResponse.Merge(m, src)
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetFastACLsForInternetVIPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetFastACLsForInternetVIPsResponse proto.InternalMessageInfo

// GetFastACLsForInternetVIPsRequest
//
// x-displayName: "Request for GetFastACLsForInternetVIP"
// GetFastACLsForInternetVIPsRequest contains the namespace for which
// the list of refs to FastACLs for Internet VIPs are being requested
type GetFastACLsForInternetVIPsRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetFastACLsForInternetVIPsRequest) Reset()      { *m = GetFastACLsForInternetVIPsRequest{} }
func (*GetFastACLsForInternetVIPsRequest) ProtoMessage() {}
func (*GetFastACLsForInternetVIPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{2}
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFastACLsForInternetVIPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFastACLsForInternetVIPsRequest.Merge(m, src)
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFastACLsForInternetVIPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFastACLsForInternetVIPsRequest proto.InternalMessageInfo

func (m *GetFastACLsForInternetVIPsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetFastACLsForInternetVIPsResponse
//
// x-displayName: "Response for GetFastACLsForInternetVIPs"
// GetFastACLsForInternetVIPsResponse contains list of FastACLs refs that
// are applied to the Internet VIPs
type GetFastACLsForInternetVIPsResponse struct {
	// fast_acls
	//
	// x-displayName: "FastACLs"
	// x-example: "list of refs"
	// The list of refs of FastACLs
	FastAcls []*views.ObjectRefType `protobuf:"bytes,1,rep,name=fast_acls,json=fastAcls,proto3" json:"fast_acls,omitempty"`
}

func (m *GetFastACLsForInternetVIPsResponse) Reset()      { *m = GetFastACLsForInternetVIPsResponse{} }
func (*GetFastACLsForInternetVIPsResponse) ProtoMessage() {}
func (*GetFastACLsForInternetVIPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{3}
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFastACLsForInternetVIPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFastACLsForInternetVIPsResponse.Merge(m, src)
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFastACLsForInternetVIPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFastACLsForInternetVIPsResponse proto.InternalMessageInfo

func (m *GetFastACLsForInternetVIPsResponse) GetFastAcls() []*views.ObjectRefType {
	if m != nil {
		return m.FastAcls
	}
	return nil
}

// SetActiveServicePoliciesRequest
//
// x-displayName: "Request for SetActiveServicePolicies"
// SetActiveServicePoliciesRequest is the shape of the request for SetActiveServicePolicies.
type SetActiveServicePoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// service_policies
	//
	// x-displayName: "Service Policies"
	// A list of references to service_policy objects.
	ServicePolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=service_policies,json=servicePolicies,proto3" json:"service_policies,omitempty"`
}

func (m *SetActiveServicePoliciesRequest) Reset()      { *m = SetActiveServicePoliciesRequest{} }
func (*SetActiveServicePoliciesRequest) ProtoMessage() {}
func (*SetActiveServicePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{4}
}
func (m *SetActiveServicePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveServicePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveServicePoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveServicePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveServicePoliciesRequest.Merge(m, src)
}
func (m *SetActiveServicePoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveServicePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveServicePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveServicePoliciesRequest proto.InternalMessageInfo

func (m *SetActiveServicePoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetActiveServicePoliciesRequest) GetServicePolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// SetActiveServicePoliciesResponse
//
// x-displayName: "Response for SetActiveServicePolicies"
// SetActiveServicePoliciesResponse is the shape of the response for SetActiveServicePolicies.
type SetActiveServicePoliciesResponse struct {
}

func (m *SetActiveServicePoliciesResponse) Reset()      { *m = SetActiveServicePoliciesResponse{} }
func (*SetActiveServicePoliciesResponse) ProtoMessage() {}
func (*SetActiveServicePoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{5}
}
func (m *SetActiveServicePoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveServicePoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveServicePoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveServicePoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveServicePoliciesResponse.Merge(m, src)
}
func (m *SetActiveServicePoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveServicePoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveServicePoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveServicePoliciesResponse proto.InternalMessageInfo

// GetActiveServicePoliciesRequest
//
// x-displayName: "Request for GetActiveServicePolicies"
// GetActiveServicePoliciesRequest is the shape of the request for GetActiveServicePolicies.
type GetActiveServicePoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetActiveServicePoliciesRequest) Reset()      { *m = GetActiveServicePoliciesRequest{} }
func (*GetActiveServicePoliciesRequest) ProtoMessage() {}
func (*GetActiveServicePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{6}
}
func (m *GetActiveServicePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveServicePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveServicePoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveServicePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveServicePoliciesRequest.Merge(m, src)
}
func (m *GetActiveServicePoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveServicePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveServicePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveServicePoliciesRequest proto.InternalMessageInfo

func (m *GetActiveServicePoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetActiveServicePoliciesResponse
//
// x-displayName: "Response for GetActiveServicePolicies"
// GetActiveServicePoliciesResponse is the shape of the response for GetActiveServicePolicies.
type GetActiveServicePoliciesResponse struct {
	// service_policies
	//
	// x-displayName: "Service Policies"
	// A list of references to service_policy objects.
	ServicePolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=service_policies,json=servicePolicies,proto3" json:"service_policies,omitempty"`
}

func (m *GetActiveServicePoliciesResponse) Reset()      { *m = GetActiveServicePoliciesResponse{} }
func (*GetActiveServicePoliciesResponse) ProtoMessage() {}
func (*GetActiveServicePoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{7}
}
func (m *GetActiveServicePoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveServicePoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveServicePoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveServicePoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveServicePoliciesResponse.Merge(m, src)
}
func (m *GetActiveServicePoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveServicePoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveServicePoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveServicePoliciesResponse proto.InternalMessageInfo

func (m *GetActiveServicePoliciesResponse) GetServicePolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// SetActiveNetworkPoliciesRequest
//
// x-displayName: "Request for SetActiveNetworkPolicies"
// SetActiveNetworkPoliciesRequest is the shape of the request for SetActiveNetworkPolicies.
type SetActiveNetworkPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// network_policies
	//
	// x-displayName: "Network Policies"
	// A list of references to network_policy objects.
	NetworkPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=network_policies,json=networkPolicies,proto3" json:"network_policies,omitempty"`
}

func (m *SetActiveNetworkPoliciesRequest) Reset()      { *m = SetActiveNetworkPoliciesRequest{} }
func (*SetActiveNetworkPoliciesRequest) ProtoMessage() {}
func (*SetActiveNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{8}
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveNetworkPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveNetworkPoliciesRequest.Merge(m, src)
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveNetworkPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveNetworkPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveNetworkPoliciesRequest proto.InternalMessageInfo

func (m *SetActiveNetworkPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetActiveNetworkPoliciesRequest) GetNetworkPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.NetworkPolicies
	}
	return nil
}

// SetActiveNetworkPoliciesResponse
//
// x-displayName: "Response for SetActiveNetworkPolicies"
// SetActiveNetworkPoliciesResponse is the shape of the response for SetActiveNetworkPolicies.
type SetActiveNetworkPoliciesResponse struct {
}

func (m *SetActiveNetworkPoliciesResponse) Reset()      { *m = SetActiveNetworkPoliciesResponse{} }
func (*SetActiveNetworkPoliciesResponse) ProtoMessage() {}
func (*SetActiveNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{9}
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveNetworkPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveNetworkPoliciesResponse.Merge(m, src)
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveNetworkPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveNetworkPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveNetworkPoliciesResponse proto.InternalMessageInfo

// GetActiveNetworkPoliciesRequest
//
// x-displayName: "Request for GetActiveNetworkPolicies"
// GetActiveNetworkPoliciesRequest is the shape of the request for GetActiveNetworkPolicies.
type GetActiveNetworkPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetActiveNetworkPoliciesRequest) Reset()      { *m = GetActiveNetworkPoliciesRequest{} }
func (*GetActiveNetworkPoliciesRequest) ProtoMessage() {}
func (*GetActiveNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{10}
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveNetworkPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveNetworkPoliciesRequest.Merge(m, src)
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveNetworkPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveNetworkPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveNetworkPoliciesRequest proto.InternalMessageInfo

func (m *GetActiveNetworkPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetActiveNetworkPoliciesResponse
//
// x-displayName: "Response for GetActiveNetworkPolicies"
// GetActiveNetworkPoliciesResponse is the shape of the response for GetActiveNetworkPolicies.
type GetActiveNetworkPoliciesResponse struct {
	// network_policies
	//
	// x-displayName: "Network Policies"
	// A list of references to network_policy objects.
	NetworkPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=network_policies,json=networkPolicies,proto3" json:"network_policies,omitempty"`
}

func (m *GetActiveNetworkPoliciesResponse) Reset()      { *m = GetActiveNetworkPoliciesResponse{} }
func (*GetActiveNetworkPoliciesResponse) ProtoMessage() {}
func (*GetActiveNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{11}
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveNetworkPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveNetworkPoliciesResponse.Merge(m, src)
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveNetworkPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveNetworkPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveNetworkPoliciesResponse proto.InternalMessageInfo

func (m *GetActiveNetworkPoliciesResponse) GetNetworkPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.NetworkPolicies
	}
	return nil
}

// SetActiveAlertPoliciesRequest
//
// x-displayName: "Request for SetActiveAlertPolicies"
// SetActiveAlertPoliciesRequest is the shape of the request for SetActiveAlertPolicies.
type SetActiveAlertPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// alert_policies
	//
	// x-displayName: "Alert Policies"
	// A list of references to alert_policy objects.
	AlertPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=alert_policies,json=alertPolicies,proto3" json:"alert_policies,omitempty"`
}

func (m *SetActiveAlertPoliciesRequest) Reset()      { *m = SetActiveAlertPoliciesRequest{} }
func (*SetActiveAlertPoliciesRequest) ProtoMessage() {}
func (*SetActiveAlertPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{12}
}
func (m *SetActiveAlertPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveAlertPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveAlertPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveAlertPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveAlertPoliciesRequest.Merge(m, src)
}
func (m *SetActiveAlertPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveAlertPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveAlertPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveAlertPoliciesRequest proto.InternalMessageInfo

func (m *SetActiveAlertPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetActiveAlertPoliciesRequest) GetAlertPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.AlertPolicies
	}
	return nil
}

// SetActiveAlertPoliciesResponse
//
// x-displayName: "Response for SetActiveAlertPolicies"
// SetActiveAlertPoliciesResponse is the shape of the response for SetActiveAlertPolicies.
type SetActiveAlertPoliciesResponse struct {
}

func (m *SetActiveAlertPoliciesResponse) Reset()      { *m = SetActiveAlertPoliciesResponse{} }
func (*SetActiveAlertPoliciesResponse) ProtoMessage() {}
func (*SetActiveAlertPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{13}
}
func (m *SetActiveAlertPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveAlertPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveAlertPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveAlertPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveAlertPoliciesResponse.Merge(m, src)
}
func (m *SetActiveAlertPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveAlertPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveAlertPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveAlertPoliciesResponse proto.InternalMessageInfo

// GetActiveAlertPoliciesRequest
//
// x-displayName: "Request for GetActiveAlertPolicies"
// GetActiveAlertPoliciesRequest is the shape of the request for GetActiveAlertPolicies.
type GetActiveAlertPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetActiveAlertPoliciesRequest) Reset()      { *m = GetActiveAlertPoliciesRequest{} }
func (*GetActiveAlertPoliciesRequest) ProtoMessage() {}
func (*GetActiveAlertPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{14}
}
func (m *GetActiveAlertPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveAlertPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveAlertPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveAlertPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveAlertPoliciesRequest.Merge(m, src)
}
func (m *GetActiveAlertPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveAlertPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveAlertPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveAlertPoliciesRequest proto.InternalMessageInfo

func (m *GetActiveAlertPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetActiveAlertPoliciesResponse
//
// x-displayName: "Response for GetActiveAlertPolicies"
// GetActiveAlertPoliciesResponse is the shape of the response for GetActiveAlertPolicies.
type GetActiveAlertPoliciesResponse struct {
	// alert_policies
	//
	// x-displayName: "Alert Policies"
	// A list of references to alert_policy objects.
	AlertPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=alert_policies,json=alertPolicies,proto3" json:"alert_policies,omitempty"`
}

func (m *GetActiveAlertPoliciesResponse) Reset()      { *m = GetActiveAlertPoliciesResponse{} }
func (*GetActiveAlertPoliciesResponse) ProtoMessage() {}
func (*GetActiveAlertPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{15}
}
func (m *GetActiveAlertPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveAlertPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveAlertPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveAlertPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveAlertPoliciesResponse.Merge(m, src)
}
func (m *GetActiveAlertPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveAlertPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveAlertPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveAlertPoliciesResponse proto.InternalMessageInfo

func (m *GetActiveAlertPoliciesResponse) GetAlertPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.AlertPolicies
	}
	return nil
}

func init() {
	proto.RegisterType((*SetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest")
	golang_proto.RegisterType((*SetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest")
	proto.RegisterType((*SetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse")
	golang_proto.RegisterType((*SetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse")
	proto.RegisterType((*GetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest")
	golang_proto.RegisterType((*GetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest")
	proto.RegisterType((*GetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse")
	golang_proto.RegisterType((*GetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse")
	proto.RegisterType((*SetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesRequest")
	golang_proto.RegisterType((*SetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesRequest")
	proto.RegisterType((*SetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesResponse")
	golang_proto.RegisterType((*SetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesResponse")
	proto.RegisterType((*GetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesRequest")
	golang_proto.RegisterType((*GetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesRequest")
	proto.RegisterType((*GetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesResponse")
	golang_proto.RegisterType((*GetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesResponse")
	proto.RegisterType((*SetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest")
	golang_proto.RegisterType((*SetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest")
	proto.RegisterType((*SetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse")
	golang_proto.RegisterType((*SetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse")
	proto.RegisterType((*GetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest")
	golang_proto.RegisterType((*GetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest")
	proto.RegisterType((*GetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse")
	golang_proto.RegisterType((*GetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse")
	proto.RegisterType((*SetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesRequest")
	golang_proto.RegisterType((*SetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesRequest")
	proto.RegisterType((*SetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesResponse")
	golang_proto.RegisterType((*SetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesResponse")
	proto.RegisterType((*GetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesRequest")
	golang_proto.RegisterType((*GetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesRequest")
	proto.RegisterType((*GetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesResponse")
	golang_proto.RegisterType((*GetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/namespace/public_customapi_akar.proto", fileDescriptor_e3ad0896b746b19a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/namespace/public_customapi_akar.proto", fileDescriptor_e3ad0896b746b19a)
}

var fileDescriptor_e3ad0896b746b19a = []byte{
	// 1004 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0x36, 0xa2, 0xa2, 0x53, 0x68, 0x52, 0x83, 0xc2, 0xb2, 0x4d, 0x9d, 0xed, 0x88,
	0x43, 0x85, 0x58, 0x5b, 0x6a, 0x51, 0x68, 0x53, 0x50, 0xb5, 0xad, 0x54, 0x2b, 0x52, 0x29, 0xd1,
	0x06, 0xa8, 0xe8, 0x65, 0x3b, 0xeb, 0x9d, 0x75, 0xa7, 0xf1, 0x7a, 0xcc, 0xcc, 0x78, 0xd3, 0x15,
	0x44, 0xaa, 0x2a, 0x24, 0xae, 0xa8, 0xdc, 0xb8, 0x72, 0x41, 0xe1, 0x1f, 0x40, 0xf4, 0x12, 0x71,
	0x49, 0x4f, 0x28, 0x82, 0x4b, 0x4f, 0x88, 0x38, 0x08, 0x01, 0xa7, 0x72, 0xe6, 0x82, 0xec, 0x75,
	0xb6, 0xb6, 0xf7, 0xb7, 0xf7, 0x66, 0x7b, 0xfc, 0x3c, 0xef, 0xf3, 0x3e, 0x92, 0xbf, 0x36, 0xbc,
	0xd0, 0x26, 0x42, 0xa3, 0x4c, 0x17, 0xe6, 0x5d, 0xd2, 0xc2, 0xba, 0x83, 0x5b, 0x44, 0xb8, 0xd8,
	0x24, 0xba, 0xeb, 0xd5, 0x6d, 0x6a, 0xd6, 0x4c, 0x4f, 0x48, 0xd6, 0xc2, 0x2e, 0xad, 0xe1, 0x4d,
	0xcc, 0x35, 0x97, 0x33, 0xc9, 0x94, 0xd7, 0xba, 0x45, 0x5a, 0xb7, 0x48, 0xeb, 0x15, 0x15, 0xcb,
	0x16, 0x95, 0x77, 0xbd, 0xba, 0x66, 0xb2, 0x96, 0x6e, 0x31, 0x8b, 0xe9, 0xe1, 0xfd, 0x75, 0xaf,
	0x19, 0x9e, 0x85, 0x27, 0xe1, 0x51, 0xf7, 0x39, 0xc5, 0x25, 0x8b, 0x31, 0xcb, 0x26, 0x3a, 0x76,
	0xa9, 0x8e, 0x1d, 0x87, 0x49, 0x2c, 0x29, 0x73, 0x44, 0xb4, 0x7a, 0x3a, 0xd9, 0x1a, 0x73, 0xe3,
	0x8b, 0x4b, 0xc9, 0xc5, 0x36, 0xb6, 0x69, 0x03, 0x4b, 0x12, 0xad, 0xa2, 0xd4, 0x2a, 0x11, 0xc4,
	0x69, 0xa7, 0x9e, 0xb0, 0x9c, 0xba, 0x87, 0x92, 0x2d, 0xa1, 0xcb, 0x8e, 0x4b, 0xa2, 0x1b, 0xd0,
	0x37, 0x00, 0x9e, 0xdd, 0x20, 0xf2, 0x3a, 0x16, 0xb2, 0x72, 0xed, 0x86, 0xb8, 0xce, 0xf8, 0x9a,
	0x23, 0x09, 0x77, 0x88, 0xfc, 0x78, 0x6d, 0x5d, 0x54, 0xc9, 0xa7, 0x1e, 0x11, 0x52, 0x59, 0x82,
	0xc7, 0x7b, 0xfc, 0x05, 0x50, 0x02, 0xe7, 0x8e, 0x57, 0x9f, 0x5f, 0x50, 0x6e, 0xc1, 0xe3, 0x4d,
	0x2c, 0x64, 0x0d, 0x9b, 0xb6, 0x28, 0xe4, 0x4b, 0x73, 0xe7, 0x4e, 0x9c, 0x47, 0x5a, 0x72, 0x7a,
	0xe1, 0xc6, 0xda, 0x07, 0xf5, 0x7b, 0xc4, 0x94, 0x55, 0xd2, 0xfc, 0xb0, 0xe3, 0x92, 0xab, 0x8b,
	0x3b, 0xdb, 0x2f, 0x1e, 0xd5, 0xfd, 0xf8, 0xf7, 0xee, 0xdc, 0xb1, 0x47, 0x60, 0x6e, 0xe1, 0x01,
	0xa8, 0x86, 0x17, 0x2b, 0xa6, 0x2d, 0xd0, 0x1b, 0x10, 0x8d, 0xea, 0x4d, 0xb8, 0xcc, 0x11, 0x04,
	0x55, 0xe0, 0x59, 0x63, 0x36, 0x02, 0xc4, 0x21, 0x32, 0xc6, 0x6e, 0xa4, 0xdc, 0x88, 0x73, 0x82,
	0x89, 0x39, 0x4f, 0xc4, 0x38, 0x63, 0x70, 0xdf, 0x03, 0xb8, 0xbc, 0x41, 0x64, 0xc5, 0x94, 0xb4,
	0x4d, 0x36, 0x08, 0x6f, 0x53, 0x93, 0xac, 0x33, 0x9b, 0x9a, 0x94, 0x4c, 0x38, 0xf7, 0x7b, 0x70,
	0x41, 0x74, 0xeb, 0x6a, 0x6e, 0x54, 0x38, 0xc5, 0xf8, 0x4f, 0xef, 0x6c, 0x9f, 0x4c, 0x94, 0x77,
	0x02, 0x09, 0x2f, 0x3c, 0x02, 0xf9, 0x85, 0x52, 0x75, 0x5e, 0x24, 0x1b, 0x42, 0x08, 0x96, 0x86,
	0x37, 0x1b, 0x89, 0xb8, 0x02, 0x97, 0x8d, 0x59, 0x80, 0xd0, 0x17, 0x00, 0x96, 0x8c, 0x31, 0xbb,
	0x28, 0x77, 0x66, 0xa2, 0x3e, 0xd5, 0x47, 0xdd, 0xcf, 0x9a, 0x30, 0x73, 0x93, 0xc8, 0x2d, 0xc6,
	0x37, 0xa7, 0x36, 0xe3, 0x74, 0xeb, 0xb2, 0x9a, 0x49, 0x94, 0x27, 0xcc, 0x38, 0xc9, 0x86, 0x12,
	0x66, 0xfa, 0x9a, 0x1d, 0x60, 0x26, 0x0b, 0x50, 0xd2, 0xcc, 0x90, 0x5d, 0x02, 0x33, 0x33, 0x50,
	0x9f, 0xea, 0xa3, 0xee, 0x67, 0xfd, 0x16, 0xc0, 0x33, 0x3d, 0xd8, 0x8a, 0x4d, 0xb8, 0x9c, 0xce,
	0x4b, 0x03, 0x9e, 0xc4, 0x41, 0x55, 0x96, 0xfe, 0x5e, 0xdf, 0xd9, 0x7e, 0x29, 0x56, 0x1c, 0x77,
	0xf2, 0x32, 0x8e, 0xb7, 0x82, 0x4a, 0x50, 0x1d, 0xd6, 0x64, 0xe4, 0xe3, 0x3d, 0x78, 0xc6, 0xc8,
	0x8e, 0x81, 0x3e, 0x87, 0xaa, 0x31, 0x72, 0x03, 0xe5, 0xf6, 0x0c, 0xa0, 0xf3, 0x29, 0xd0, 0x14,
	0xde, 0xf9, 0x9f, 0xe6, 0xa1, 0x72, 0xf3, 0xa8, 0x97, 0x6b, 0x61, 0x74, 0x56, 0xd6, 0xd7, 0x94,
	0xff, 0x00, 0x2c, 0x0e, 0x7f, 0x5b, 0x2b, 0xab, 0xda, 0x90, 0x3c, 0xd5, 0xc6, 0xc6, 0x4f, 0xf1,
	0x72, 0xa6, 0xda, 0x68, 0xd6, 0x0d, 0x7f, 0xaf, 0x10, 0xa4, 0x6c, 0x99, 0xb2, 0x32, 0x75, 0x9a,
	0x1c, 0x0b, 0xc9, 0x3d, 0x53, 0x7a, 0x9c, 0x94, 0xb7, 0x38, 0x95, 0xe4, 0xe1, 0xaf, 0x7f, 0x7c,
	0x9d, 0xbf, 0x82, 0x56, 0xa3, 0x8f, 0x81, 0xe7, 0x5f, 0x07, 0x42, 0xff, 0xac, 0x77, 0xbc, 0xad,
	0xf7, 0xde, 0xfc, 0xb5, 0x26, 0xe3, 0x35, 0x1a, 0xed, 0x54, 0x6b, 0x53, 0x57, 0xac, 0x82, 0x37,
	0x43, 0x7a, 0x23, 0x0b, 0xbd, 0x31, 0x03, 0xbd, 0x31, 0x01, 0xfd, 0x93, 0x1f, 0xf2, 0xc0, 0xdf,
	0x2b, 0x14, 0x07, 0x4f, 0x80, 0x13, 0xdc, 0x08, 0x07, 0xf0, 0xae, 0x32, 0xc3, 0x00, 0x94, 0x7f,
	0x01, 0x2c, 0x0c, 0x8b, 0x07, 0xe5, 0xe2, 0x28, 0x7b, 0xa3, 0xd2, 0xa2, 0x78, 0x29, 0x43, 0x65,
	0xc4, 0x7d, 0x27, 0x66, 0xdd, 0xe5, 0xec, 0x7e, 0xa7, 0x2c, 0x88, 0xe9, 0x71, 0x2a, 0x3b, 0x31,
	0xeb, 0x97, 0xd1, 0xca, 0x18, 0x68, 0x1c, 0x6e, 0x52, 0x4b, 0x07, 0x4e, 0x60, 0x3c, 0x60, 0x36,
	0xa6, 0x67, 0x36, 0x32, 0x33, 0x1b, 0x63, 0x99, 0x53, 0xae, 0x53, 0xdc, 0x3d, 0xd7, 0x17, 0x95,
	0x8c, 0xd8, 0xca, 0x3f, 0x71, 0xcf, 0xa9, 0x18, 0x98, 0xc4, 0xf3, 0xe0, 0xec, 0x99, 0xc4, 0xf3,
	0xb0, 0x64, 0xfb, 0xc4, 0xdf, 0x2b, 0xbc, 0x1a, 0xf1, 0x46, 0x69, 0x91, 0x45, 0x70, 0x3a, 0xb7,
	0x02, 0xc1, 0x7f, 0xc6, 0x05, 0x4f, 0x0e, 0x6b, 0x64, 0x86, 0x1d, 0x17, 0xb0, 0xe8, 0x23, 0x7f,
	0xaf, 0xf0, 0x4a, 0x0a, 0x76, 0x7a, 0xab, 0x69, 0x56, 0xc5, 0x07, 0x70, 0x71, 0x70, 0x60, 0x29,
	0x2b, 0xe3, 0xcd, 0x0c, 0xca, 0xaf, 0xe2, 0x3b, 0x53, 0xd7, 0x45, 0x88, 0xb7, 0x62, 0x3e, 0x2d,
	0xe2, 0x10, 0x8e, 0xed, 0x98, 0xcf, 0x4b, 0xe8, 0xed, 0xc9, 0x18, 0x93, 0xe1, 0x17, 0xd8, 0xfc,
	0x0d, 0xc0, 0x45, 0x63, 0x5a, 0x48, 0x23, 0x23, 0xe4, 0xe8, 0x74, 0x46, 0x1b, 0x31, 0x8f, 0x47,
	0x90, 0x3d, 0x8f, 0x2b, 0x4a, 0x26, 0xc6, 0xe2, 0x5b, 0xbb, 0x8f, 0xc1, 0xdc, 0x2f, 0x8f, 0x81,
	0x3a, 0xac, 0xa9, 0x6e, 0xca, 0x3f, 0xfc, 0xb9, 0x90, 0x5f, 0x00, 0x57, 0xbf, 0x04, 0xfb, 0x07,
	0x6a, 0xee, 0xe9, 0x81, 0x9a, 0x7b, 0x76, 0xa0, 0x82, 0x07, 0xbe, 0x0a, 0xbe, 0xf3, 0x55, 0xf0,
	0xc4, 0x57, 0xc1, 0xbe, 0xaf, 0x82, 0xdf, 0x7d, 0x15, 0xfc, 0xe5, 0xab, 0xb9, 0x67, 0xbe, 0x0a,
	0xbe, 0x3a, 0x54, 0x73, 0xbb, 0x87, 0x2a, 0xd8, 0x3f, 0x54, 0x73, 0x4f, 0x0f, 0xd5, 0xdc, 0xed,
	0xf7, 0x2d, 0xe6, 0x6e, 0x5a, 0x5a, 0x9b, 0xd9, 0x92, 0x70, 0x8e, 0x35, 0x4f, 0xe8, 0xe1, 0x41,
	0x93, 0xf1, 0x56, 0xf0, 0xce, 0x69, 0xd3, 0x06, 0xe1, 0xe5, 0xa3, 0x65, 0xdd, 0xad, 0x5b, 0x4c,
	0x27, 0xf7, 0x65, 0xf4, 0x0b, 0x9a, 0xfe, 0x07, 0xaf, 0x1f, 0x0b, 0x7f, 0x44, 0x2f, 0xfc, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x72, 0xde, 0x85, 0x70, 0xa5, 0x0f, 0x00, 0x00,
}

func (this *SetFastACLsForInternetVIPsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetFastACLsForInternetVIPsRequest)
	if !ok {
		that2, ok := that.(SetFastACLsForInternetVIPsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.FastAcls) != len(that1.FastAcls) {
		return false
	}
	for i := range this.FastAcls {
		if !this.FastAcls[i].Equal(that1.FastAcls[i]) {
			return false
		}
	}
	return true
}
func (this *SetFastACLsForInternetVIPsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetFastACLsForInternetVIPsResponse)
	if !ok {
		that2, ok := that.(SetFastACLsForInternetVIPsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFastACLsForInternetVIPsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFastACLsForInternetVIPsRequest)
	if !ok {
		that2, ok := that.(GetFastACLsForInternetVIPsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetFastACLsForInternetVIPsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFastACLsForInternetVIPsResponse)
	if !ok {
		that2, ok := that.(GetFastACLsForInternetVIPsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FastAcls) != len(that1.FastAcls) {
		return false
	}
	for i := range this.FastAcls {
		if !this.FastAcls[i].Equal(that1.FastAcls[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveServicePoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveServicePoliciesRequest)
	if !ok {
		that2, ok := that.(SetActiveServicePoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveServicePoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveServicePoliciesResponse)
	if !ok {
		that2, ok := that.(SetActiveServicePoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetActiveServicePoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveServicePoliciesRequest)
	if !ok {
		that2, ok := that.(GetActiveServicePoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetActiveServicePoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveServicePoliciesResponse)
	if !ok {
		that2, ok := that.(GetActiveServicePoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveNetworkPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveNetworkPoliciesRequest)
	if !ok {
		that2, ok := that.(SetActiveNetworkPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.NetworkPolicies) != len(that1.NetworkPolicies) {
		return false
	}
	for i := range this.NetworkPolicies {
		if !this.NetworkPolicies[i].Equal(that1.NetworkPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveNetworkPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveNetworkPoliciesResponse)
	if !ok {
		that2, ok := that.(SetActiveNetworkPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetActiveNetworkPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveNetworkPoliciesRequest)
	if !ok {
		that2, ok := that.(GetActiveNetworkPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetActiveNetworkPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveNetworkPoliciesResponse)
	if !ok {
		that2, ok := that.(GetActiveNetworkPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NetworkPolicies) != len(that1.NetworkPolicies) {
		return false
	}
	for i := range this.NetworkPolicies {
		if !this.NetworkPolicies[i].Equal(that1.NetworkPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveAlertPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveAlertPoliciesRequest)
	if !ok {
		that2, ok := that.(SetActiveAlertPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.AlertPolicies) != len(that1.AlertPolicies) {
		return false
	}
	for i := range this.AlertPolicies {
		if !this.AlertPolicies[i].Equal(that1.AlertPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveAlertPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveAlertPoliciesResponse)
	if !ok {
		that2, ok := that.(SetActiveAlertPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetActiveAlertPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveAlertPoliciesRequest)
	if !ok {
		that2, ok := that.(GetActiveAlertPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetActiveAlertPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveAlertPoliciesResponse)
	if !ok {
		that2, ok := that.(GetActiveAlertPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AlertPolicies) != len(that1.AlertPolicies) {
		return false
	}
	for i := range this.AlertPolicies {
		if !this.AlertPolicies[i].Equal(that1.AlertPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetFastACLsForInternetVIPsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetFastACLsForInternetVIPsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.FastAcls != nil {
		s = append(s, "FastAcls: "+fmt.Sprintf("%#v", this.FastAcls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetFastACLsForInternetVIPsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetFastACLsForInternetVIPsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFastACLsForInternetVIPsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetFastACLsForInternetVIPsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFastACLsForInternetVIPsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetFastACLsForInternetVIPsResponse{")
	if this.FastAcls != nil {
		s = append(s, "FastAcls: "+fmt.Sprintf("%#v", this.FastAcls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveServicePoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetActiveServicePoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveServicePoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetActiveServicePoliciesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveServicePoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveServicePoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveServicePoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveServicePoliciesResponse{")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveNetworkPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetActiveNetworkPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.NetworkPolicies != nil {
		s = append(s, "NetworkPolicies: "+fmt.Sprintf("%#v", this.NetworkPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveNetworkPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetActiveNetworkPoliciesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveNetworkPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveNetworkPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveNetworkPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveNetworkPoliciesResponse{")
	if this.NetworkPolicies != nil {
		s = append(s, "NetworkPolicies: "+fmt.Sprintf("%#v", this.NetworkPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveAlertPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetActiveAlertPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.AlertPolicies != nil {
		s = append(s, "AlertPolicies: "+fmt.Sprintf("%#v", this.AlertPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveAlertPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetActiveAlertPoliciesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveAlertPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveAlertPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveAlertPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveAlertPoliciesResponse{")
	if this.AlertPolicies != nil {
		s = append(s, "AlertPolicies: "+fmt.Sprintf("%#v", this.AlertPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapiAkar(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NamespaceCustomAPIClient is the client API for NamespaceCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamespaceCustomAPIClient interface {
	// SetFastACLsForInternetVIPs
	//
	// x-displayName: "Set FastACLs For Internet VIPs"
	// SetFastACLsForInternetVIPs activates the passed list of FastACLs for Internet VIPs.
	// An emtpy list in the request will clear FastACLs for Internet VIPs.
	SetFastACLsForInternetVIPs(ctx context.Context, in *SetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*SetFastACLsForInternetVIPsResponse, error)
	// GetFastACLsForInternetVIPs
	//
	// x-displayName: "Get FastACLs For Internet VIPs"
	// GetFastACLsForInternetVIPs Returns the list of Active FastACLs for Internet VIPs.
	GetFastACLsForInternetVIPs(ctx context.Context, in *GetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*GetFastACLsForInternetVIPsResponse, error)
	// SetActiveServicePolicies
	//
	// x-displayName: "Set Active Service Policies"
	// SetActiveServicePolicies sets the active service policies for the namespace
	// An emtpy list in the request will clear the active service policies for the namespace
	SetActiveServicePolicies(ctx context.Context, in *SetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*SetActiveServicePoliciesResponse, error)
	// GetActiveServicePolicies
	//
	// x-displayName: "Get Active Service Policies"
	// GetActiveServicePolicies resturn the list of active service policies for the namespace
	GetActiveServicePolicies(ctx context.Context, in *GetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*GetActiveServicePoliciesResponse, error)
	// SetActiveNetworkPolicies
	//
	// x-displayName: "Set Active Network Policies"
	// SetActiveNetworkPolicies sets the active network policies for the namespace
	// An emtpy list in the request will clear the active network policies for the namespace
	SetActiveNetworkPolicies(ctx context.Context, in *SetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*SetActiveNetworkPoliciesResponse, error)
	// GetActiveNetworkPolicies
	//
	// x-displayName: "Get Active Network Policies"
	// GetActiveNetworkPolicies resturn the list of active network policies for the namespace
	GetActiveNetworkPolicies(ctx context.Context, in *GetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*GetActiveNetworkPoliciesResponse, error)
	// SetActiveAlertPolicies
	//
	// x-displayName: "Set Active Alert Policies"
	// SetActiveAlertPolicies sets the active alert policies for the namespace
	// An emtpy list in the request will clear the active alert policies for the namespace
	SetActiveAlertPolicies(ctx context.Context, in *SetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*SetActiveAlertPoliciesResponse, error)
	// GetActiveAlertPolicies
	//
	// x-displayName: "Get Active Aelrt Policies"
	// GetActiveAlertPolicies resturn the list of active alert policies for the namespace
	GetActiveAlertPolicies(ctx context.Context, in *GetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*GetActiveAlertPoliciesResponse, error)
}

type namespaceCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceCustomAPIClient(cc *grpc.ClientConn) NamespaceCustomAPIClient {
	return &namespaceCustomAPIClient{cc}
}

func (c *namespaceCustomAPIClient) SetFastACLsForInternetVIPs(ctx context.Context, in *SetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*SetFastACLsForInternetVIPsResponse, error) {
	out := new(SetFastACLsForInternetVIPsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetFastACLsForInternetVIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetFastACLsForInternetVIPs(ctx context.Context, in *GetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*GetFastACLsForInternetVIPsResponse, error) {
	out := new(GetFastACLsForInternetVIPsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetFastACLsForInternetVIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetActiveServicePolicies(ctx context.Context, in *SetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*SetActiveServicePoliciesResponse, error) {
	out := new(SetActiveServicePoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveServicePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetActiveServicePolicies(ctx context.Context, in *GetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*GetActiveServicePoliciesResponse, error) {
	out := new(GetActiveServicePoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveServicePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetActiveNetworkPolicies(ctx context.Context, in *SetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*SetActiveNetworkPoliciesResponse, error) {
	out := new(SetActiveNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetActiveNetworkPolicies(ctx context.Context, in *GetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*GetActiveNetworkPoliciesResponse, error) {
	out := new(GetActiveNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetActiveAlertPolicies(ctx context.Context, in *SetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*SetActiveAlertPoliciesResponse, error) {
	out := new(SetActiveAlertPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveAlertPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetActiveAlertPolicies(ctx context.Context, in *GetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*GetActiveAlertPoliciesResponse, error) {
	out := new(GetActiveAlertPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveAlertPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceCustomAPIServer is the server API for NamespaceCustomAPI service.
type NamespaceCustomAPIServer interface {
	// SetFastACLsForInternetVIPs
	//
	// x-displayName: "Set FastACLs For Internet VIPs"
	// SetFastACLsForInternetVIPs activates the passed list of FastACLs for Internet VIPs.
	// An emtpy list in the request will clear FastACLs for Internet VIPs.
	SetFastACLsForInternetVIPs(context.Context, *SetFastACLsForInternetVIPsRequest) (*SetFastACLsForInternetVIPsResponse, error)
	// GetFastACLsForInternetVIPs
	//
	// x-displayName: "Get FastACLs For Internet VIPs"
	// GetFastACLsForInternetVIPs Returns the list of Active FastACLs for Internet VIPs.
	GetFastACLsForInternetVIPs(context.Context, *GetFastACLsForInternetVIPsRequest) (*GetFastACLsForInternetVIPsResponse, error)
	// SetActiveServicePolicies
	//
	// x-displayName: "Set Active Service Policies"
	// SetActiveServicePolicies sets the active service policies for the namespace
	// An emtpy list in the request will clear the active service policies for the namespace
	SetActiveServicePolicies(context.Context, *SetActiveServicePoliciesRequest) (*SetActiveServicePoliciesResponse, error)
	// GetActiveServicePolicies
	//
	// x-displayName: "Get Active Service Policies"
	// GetActiveServicePolicies resturn the list of active service policies for the namespace
	GetActiveServicePolicies(context.Context, *GetActiveServicePoliciesRequest) (*GetActiveServicePoliciesResponse, error)
	// SetActiveNetworkPolicies
	//
	// x-displayName: "Set Active Network Policies"
	// SetActiveNetworkPolicies sets the active network policies for the namespace
	// An emtpy list in the request will clear the active network policies for the namespace
	SetActiveNetworkPolicies(context.Context, *SetActiveNetworkPoliciesRequest) (*SetActiveNetworkPoliciesResponse, error)
	// GetActiveNetworkPolicies
	//
	// x-displayName: "Get Active Network Policies"
	// GetActiveNetworkPolicies resturn the list of active network policies for the namespace
	GetActiveNetworkPolicies(context.Context, *GetActiveNetworkPoliciesRequest) (*GetActiveNetworkPoliciesResponse, error)
	// SetActiveAlertPolicies
	//
	// x-displayName: "Set Active Alert Policies"
	// SetActiveAlertPolicies sets the active alert policies for the namespace
	// An emtpy list in the request will clear the active alert policies for the namespace
	SetActiveAlertPolicies(context.Context, *SetActiveAlertPoliciesRequest) (*SetActiveAlertPoliciesResponse, error)
	// GetActiveAlertPolicies
	//
	// x-displayName: "Get Active Aelrt Policies"
	// GetActiveAlertPolicies resturn the list of active alert policies for the namespace
	GetActiveAlertPolicies(context.Context, *GetActiveAlertPoliciesRequest) (*GetActiveAlertPoliciesResponse, error)
}

// UnimplementedNamespaceCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNamespaceCustomAPIServer struct {
}

func (*UnimplementedNamespaceCustomAPIServer) SetFastACLsForInternetVIPs(ctx context.Context, req *SetFastACLsForInternetVIPsRequest) (*SetFastACLsForInternetVIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFastACLsForInternetVIPs not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetFastACLsForInternetVIPs(ctx context.Context, req *GetFastACLsForInternetVIPsRequest) (*GetFastACLsForInternetVIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFastACLsForInternetVIPs not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetActiveServicePolicies(ctx context.Context, req *SetActiveServicePoliciesRequest) (*SetActiveServicePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveServicePolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetActiveServicePolicies(ctx context.Context, req *GetActiveServicePoliciesRequest) (*GetActiveServicePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveServicePolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetActiveNetworkPolicies(ctx context.Context, req *SetActiveNetworkPoliciesRequest) (*SetActiveNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveNetworkPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetActiveNetworkPolicies(ctx context.Context, req *GetActiveNetworkPoliciesRequest) (*GetActiveNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveNetworkPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetActiveAlertPolicies(ctx context.Context, req *SetActiveAlertPoliciesRequest) (*SetActiveAlertPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveAlertPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetActiveAlertPolicies(ctx context.Context, req *GetActiveAlertPoliciesRequest) (*GetActiveAlertPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveAlertPolicies not implemented")
}

func RegisterNamespaceCustomAPIServer(s *grpc.Server, srv NamespaceCustomAPIServer) {
	s.RegisterService(&_NamespaceCustomAPI_serviceDesc, srv)
}

func _NamespaceCustomAPI_SetFastACLsForInternetVIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFastACLsForInternetVIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetFastACLsForInternetVIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetFastACLsForInternetVIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetFastACLsForInternetVIPs(ctx, req.(*SetFastACLsForInternetVIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetFastACLsForInternetVIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFastACLsForInternetVIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetFastACLsForInternetVIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetFastACLsForInternetVIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetFastACLsForInternetVIPs(ctx, req.(*GetFastACLsForInternetVIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetActiveServicePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveServicePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetActiveServicePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveServicePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetActiveServicePolicies(ctx, req.(*SetActiveServicePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetActiveServicePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveServicePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetActiveServicePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveServicePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetActiveServicePolicies(ctx, req.(*GetActiveServicePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetActiveNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetActiveNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetActiveNetworkPolicies(ctx, req.(*SetActiveNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetActiveNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetActiveNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetActiveNetworkPolicies(ctx, req.(*GetActiveNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetActiveAlertPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveAlertPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetActiveAlertPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveAlertPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetActiveAlertPolicies(ctx, req.(*SetActiveAlertPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetActiveAlertPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveAlertPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetActiveAlertPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveAlertPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetActiveAlertPolicies(ctx, req.(*GetActiveAlertPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.namespace.NamespaceCustomAPI",
	HandlerType: (*NamespaceCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFastACLsForInternetVIPs",
			Handler:    _NamespaceCustomAPI_SetFastACLsForInternetVIPs_Handler,
		},
		{
			MethodName: "GetFastACLsForInternetVIPs",
			Handler:    _NamespaceCustomAPI_GetFastACLsForInternetVIPs_Handler,
		},
		{
			MethodName: "SetActiveServicePolicies",
			Handler:    _NamespaceCustomAPI_SetActiveServicePolicies_Handler,
		},
		{
			MethodName: "GetActiveServicePolicies",
			Handler:    _NamespaceCustomAPI_GetActiveServicePolicies_Handler,
		},
		{
			MethodName: "SetActiveNetworkPolicies",
			Handler:    _NamespaceCustomAPI_SetActiveNetworkPolicies_Handler,
		},
		{
			MethodName: "GetActiveNetworkPolicies",
			Handler:    _NamespaceCustomAPI_GetActiveNetworkPolicies_Handler,
		},
		{
			MethodName: "SetActiveAlertPolicies",
			Handler:    _NamespaceCustomAPI_SetActiveAlertPolicies_Handler,
		},
		{
			MethodName: "GetActiveAlertPolicies",
			Handler:    _NamespaceCustomAPI_GetActiveAlertPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/namespace/public_customapi_akar.proto",
}

func (m *SetFastACLsForInternetVIPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetFastACLsForInternetVIPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetFastACLsForInternetVIPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastAcls) > 0 {
		for iNdEx := len(m.FastAcls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FastAcls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetFastACLsForInternetVIPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetFastACLsForInternetVIPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetFastACLsForInternetVIPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFastACLsForInternetVIPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFastACLsForInternetVIPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFastACLsForInternetVIPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFastACLsForInternetVIPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFastACLsForInternetVIPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFastACLsForInternetVIPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastAcls) > 0 {
		for iNdEx := len(m.FastAcls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FastAcls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveServicePoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveServicePoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveServicePoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for iNdEx := len(m.ServicePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveServicePoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveServicePoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveServicePoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetActiveServicePoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveServicePoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveServicePoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveServicePoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveServicePoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveServicePoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for iNdEx := len(m.ServicePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveNetworkPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveNetworkPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveNetworkPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkPolicies) > 0 {
		for iNdEx := len(m.NetworkPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveNetworkPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveNetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveNetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetActiveNetworkPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveNetworkPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveNetworkPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveNetworkPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveNetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveNetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkPolicies) > 0 {
		for iNdEx := len(m.NetworkPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveAlertPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveAlertPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveAlertPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlertPolicies) > 0 {
		for iNdEx := len(m.AlertPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveAlertPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveAlertPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveAlertPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetActiveAlertPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveAlertPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveAlertPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveAlertPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveAlertPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveAlertPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlertPolicies) > 0 {
		for iNdEx := len(m.AlertPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapiAkar(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapiAkar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetFastACLsForInternetVIPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.FastAcls) > 0 {
		for _, e := range m.FastAcls {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetFastACLsForInternetVIPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFastACLsForInternetVIPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetFastACLsForInternetVIPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FastAcls) > 0 {
		for _, e := range m.FastAcls {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveServicePoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveServicePoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetActiveServicePoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetActiveServicePoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveNetworkPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.NetworkPolicies) > 0 {
		for _, e := range m.NetworkPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveNetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetActiveNetworkPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetActiveNetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkPolicies) > 0 {
		for _, e := range m.NetworkPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveAlertPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.AlertPolicies) > 0 {
		for _, e := range m.AlertPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveAlertPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetActiveAlertPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetActiveAlertPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AlertPolicies) > 0 {
		for _, e := range m.AlertPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapiAkar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapiAkar(x uint64) (n int) {
	return sovPublicCustomapiAkar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetFastACLsForInternetVIPsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFastAcls := "[]*ObjectRefType{"
	for _, f := range this.FastAcls {
		repeatedStringForFastAcls += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForFastAcls += "}"
	s := strings.Join([]string{`&SetFastACLsForInternetVIPsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`FastAcls:` + repeatedStringForFastAcls + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetFastACLsForInternetVIPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetFastACLsForInternetVIPsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetFastACLsForInternetVIPsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFastACLsForInternetVIPsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFastACLsForInternetVIPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFastAcls := "[]*ObjectRefType{"
	for _, f := range this.FastAcls {
		repeatedStringForFastAcls += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForFastAcls += "}"
	s := strings.Join([]string{`&GetFastACLsForInternetVIPsResponse{`,
		`FastAcls:` + repeatedStringForFastAcls + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveServicePoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServicePolicies := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicies {
		repeatedStringForServicePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicies += "}"
	s := strings.Join([]string{`&SetActiveServicePoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ServicePolicies:` + repeatedStringForServicePolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveServicePoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetActiveServicePoliciesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveServicePoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetActiveServicePoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveServicePoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServicePolicies := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicies {
		repeatedStringForServicePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicies += "}"
	s := strings.Join([]string{`&GetActiveServicePoliciesResponse{`,
		`ServicePolicies:` + repeatedStringForServicePolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveNetworkPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkPolicies := "[]*ObjectRefType{"
	for _, f := range this.NetworkPolicies {
		repeatedStringForNetworkPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkPolicies += "}"
	s := strings.Join([]string{`&SetActiveNetworkPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`NetworkPolicies:` + repeatedStringForNetworkPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveNetworkPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetActiveNetworkPoliciesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveNetworkPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetActiveNetworkPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveNetworkPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkPolicies := "[]*ObjectRefType{"
	for _, f := range this.NetworkPolicies {
		repeatedStringForNetworkPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkPolicies += "}"
	s := strings.Join([]string{`&GetActiveNetworkPoliciesResponse{`,
		`NetworkPolicies:` + repeatedStringForNetworkPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveAlertPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlertPolicies := "[]*ObjectRefType{"
	for _, f := range this.AlertPolicies {
		repeatedStringForAlertPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAlertPolicies += "}"
	s := strings.Join([]string{`&SetActiveAlertPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AlertPolicies:` + repeatedStringForAlertPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveAlertPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetActiveAlertPoliciesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveAlertPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetActiveAlertPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveAlertPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlertPolicies := "[]*ObjectRefType{"
	for _, f := range this.AlertPolicies {
		repeatedStringForAlertPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAlertPolicies += "}"
	s := strings.Join([]string{`&GetActiveAlertPoliciesResponse{`,
		`AlertPolicies:` + repeatedStringForAlertPolicies + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapiAkar(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetFastACLsForInternetVIPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAcls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAcls = append(m.FastAcls, &views.ObjectRefType{})
			if err := m.FastAcls[len(m.FastAcls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetFastACLsForInternetVIPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFastACLsForInternetVIPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFastACLsForInternetVIPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAcls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAcls = append(m.FastAcls, &views.ObjectRefType{})
			if err := m.FastAcls[len(m.FastAcls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveServicePoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveServicePoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveServicePoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveServicePoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveServicePoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveServicePoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveServicePoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveServicePoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveServicePoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveServicePoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveServicePoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveServicePoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveNetworkPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPolicies = append(m.NetworkPolicies, &views.ObjectRefType{})
			if err := m.NetworkPolicies[len(m.NetworkPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveNetworkPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveNetworkPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveNetworkPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPolicies = append(m.NetworkPolicies, &views.ObjectRefType{})
			if err := m.NetworkPolicies[len(m.NetworkPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveAlertPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicies = append(m.AlertPolicies, &views.ObjectRefType{})
			if err := m.AlertPolicies[len(m.AlertPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveAlertPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveAlertPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveAlertPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicies = append(m.AlertPolicies, &views.ObjectRefType{})
			if err := m.AlertPolicies[len(m.AlertPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapiAkar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapiAkar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapiAkar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapiAkar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapiAkar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapiAkar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapiAkar = fmt.Errorf("proto: unexpected end of group")
)

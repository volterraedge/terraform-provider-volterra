// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/public_customapi_akar.proto

// Namespace API
//
// x-displayName: "Namespace"
// APIs in this file are custom APIs on namespace object served by akar

package namespace

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	alert_policy_set "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy_set"
	app_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Severity
//
// x-displayName: "Severity of message"
// List of all supported severities
type Severity int32

const (
	// x-displayName: "Error"
	// ERROR
	ERROR Severity = 0
	// x-displayName: "Info"
	// INFO
	INFO Severity = 1
	// x-displayName: "Warning"
	// WARNING
	WARNING Severity = 2
	// x-displayName: "Success"
	// SUCCESS
	SUCCESS Severity = 3
)

var Severity_name = map[int32]string{
	0: "ERROR",
	1: "INFO",
	2: "WARNING",
	3: "SUCCESS",
}

var Severity_value = map[string]int32{
	"ERROR":   0,
	"INFO":    1,
	"WARNING": 2,
	"SUCCESS": 3,
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{0}
}

// SetFastACLsForInternetVIPsRequest
//
// x-displayName: "Request for SetFastACLsForInternetVIP"
// SetFastACLsForInternetVIPsRequest contains list of FastACLs refs that
// should be applied to the Internet VIPs
type SetFastACLsForInternetVIPsRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// fast_acls
	//
	// x-displayName: "FastACLs"
	// x-example: "list of refs"
	// The list of refs of FastACLs
	FastAcls []*views.ObjectRefType `protobuf:"bytes,2,rep,name=fast_acls,json=fastAcls,proto3" json:"fast_acls,omitempty"`
}

func (m *SetFastACLsForInternetVIPsRequest) Reset()      { *m = SetFastACLsForInternetVIPsRequest{} }
func (*SetFastACLsForInternetVIPsRequest) ProtoMessage() {}
func (*SetFastACLsForInternetVIPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{0}
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetFastACLsForInternetVIPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetFastACLsForInternetVIPsRequest.Merge(m, src)
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetFastACLsForInternetVIPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetFastACLsForInternetVIPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetFastACLsForInternetVIPsRequest proto.InternalMessageInfo

func (m *SetFastACLsForInternetVIPsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetFastACLsForInternetVIPsRequest) GetFastAcls() []*views.ObjectRefType {
	if m != nil {
		return m.FastAcls
	}
	return nil
}

// SetFastACLsForInternetVIPsResponse
//
// x-displayName: "Response for SetFastACLsForInternetVIPs"
// SetFastACLsForInternetVIPsResponse is empty
type SetFastACLsForInternetVIPsResponse struct {
}

func (m *SetFastACLsForInternetVIPsResponse) Reset()      { *m = SetFastACLsForInternetVIPsResponse{} }
func (*SetFastACLsForInternetVIPsResponse) ProtoMessage() {}
func (*SetFastACLsForInternetVIPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{1}
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetFastACLsForInternetVIPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetFastACLsForInternetVIPsResponse.Merge(m, src)
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetFastACLsForInternetVIPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetFastACLsForInternetVIPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetFastACLsForInternetVIPsResponse proto.InternalMessageInfo

// GetFastACLsForInternetVIPsRequest
//
// x-displayName: "Request for GetFastACLsForInternetVIP"
// GetFastACLsForInternetVIPsRequest contains the namespace for which
// the list of refs to FastACLs for Internet VIPs are being requested
type GetFastACLsForInternetVIPsRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetFastACLsForInternetVIPsRequest) Reset()      { *m = GetFastACLsForInternetVIPsRequest{} }
func (*GetFastACLsForInternetVIPsRequest) ProtoMessage() {}
func (*GetFastACLsForInternetVIPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{2}
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFastACLsForInternetVIPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFastACLsForInternetVIPsRequest.Merge(m, src)
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFastACLsForInternetVIPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFastACLsForInternetVIPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFastACLsForInternetVIPsRequest proto.InternalMessageInfo

func (m *GetFastACLsForInternetVIPsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetFastACLsForInternetVIPsResponse
//
// x-displayName: "Response for GetFastACLsForInternetVIPs"
// GetFastACLsForInternetVIPsResponse contains list of FastACLs refs that
// are applied to the Internet VIPs
type GetFastACLsForInternetVIPsResponse struct {
	// fast_acls
	//
	// x-displayName: "FastACLs"
	// x-example: "list of refs"
	// The list of refs of FastACLs
	FastAcls []*views.ObjectRefType `protobuf:"bytes,1,rep,name=fast_acls,json=fastAcls,proto3" json:"fast_acls,omitempty"`
}

func (m *GetFastACLsForInternetVIPsResponse) Reset()      { *m = GetFastACLsForInternetVIPsResponse{} }
func (*GetFastACLsForInternetVIPsResponse) ProtoMessage() {}
func (*GetFastACLsForInternetVIPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{3}
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFastACLsForInternetVIPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFastACLsForInternetVIPsResponse.Merge(m, src)
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetFastACLsForInternetVIPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFastACLsForInternetVIPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFastACLsForInternetVIPsResponse proto.InternalMessageInfo

func (m *GetFastACLsForInternetVIPsResponse) GetFastAcls() []*views.ObjectRefType {
	if m != nil {
		return m.FastAcls
	}
	return nil
}

// SetActiveServicePoliciesRequest
//
// x-displayName: "Request for SetActiveServicePolicies"
// SetActiveServicePoliciesRequest is the shape of the request for SetActiveServicePolicies.
type SetActiveServicePoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// service_policies
	//
	// x-displayName: "Service Policies"
	// Service Policies is a sequential engine where policies (and rules within the policy) are evaluated one after the other. It's important to define the
	// correct order (policies evaluated from top to bottom in the list) for service policies, to get the intended result.
	// For each request, its characteristics are evaluated based on the match criteria in each service policy starting at the top. If there is a match in the
	// current policy, then the policy takes effect, and no more policies are evaluated. Otherwise, the next policy is evaluated.
	// If all policies are evaluated and none match, then the request will be denied by default.
	ServicePolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=service_policies,json=servicePolicies,proto3" json:"service_policies,omitempty"`
}

func (m *SetActiveServicePoliciesRequest) Reset()      { *m = SetActiveServicePoliciesRequest{} }
func (*SetActiveServicePoliciesRequest) ProtoMessage() {}
func (*SetActiveServicePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{4}
}
func (m *SetActiveServicePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveServicePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveServicePoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveServicePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveServicePoliciesRequest.Merge(m, src)
}
func (m *SetActiveServicePoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveServicePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveServicePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveServicePoliciesRequest proto.InternalMessageInfo

func (m *SetActiveServicePoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetActiveServicePoliciesRequest) GetServicePolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// SetActiveServicePoliciesResponse
//
// x-displayName: "Response for SetActiveServicePolicies"
// SetActiveServicePoliciesResponse is the shape of the response for SetActiveServicePolicies.
type SetActiveServicePoliciesResponse struct {
}

func (m *SetActiveServicePoliciesResponse) Reset()      { *m = SetActiveServicePoliciesResponse{} }
func (*SetActiveServicePoliciesResponse) ProtoMessage() {}
func (*SetActiveServicePoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{5}
}
func (m *SetActiveServicePoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveServicePoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveServicePoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveServicePoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveServicePoliciesResponse.Merge(m, src)
}
func (m *SetActiveServicePoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveServicePoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveServicePoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveServicePoliciesResponse proto.InternalMessageInfo

// GetActiveServicePoliciesRequest
//
// x-displayName: "Request for GetActiveServicePolicies"
// GetActiveServicePoliciesRequest is the shape of the request for GetActiveServicePolicies.
type GetActiveServicePoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetActiveServicePoliciesRequest) Reset()      { *m = GetActiveServicePoliciesRequest{} }
func (*GetActiveServicePoliciesRequest) ProtoMessage() {}
func (*GetActiveServicePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{6}
}
func (m *GetActiveServicePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveServicePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveServicePoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveServicePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveServicePoliciesRequest.Merge(m, src)
}
func (m *GetActiveServicePoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveServicePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveServicePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveServicePoliciesRequest proto.InternalMessageInfo

func (m *GetActiveServicePoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetActiveServicePoliciesResponse
//
// x-displayName: "Response for GetActiveServicePolicies"
// GetActiveServicePoliciesResponse is the shape of the response for GetActiveServicePolicies.
type GetActiveServicePoliciesResponse struct {
	// service_policies
	//
	// x-displayName: "Service Policies"
	// A list of references to service_policy objects.
	ServicePolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=service_policies,json=servicePolicies,proto3" json:"service_policies,omitempty"`
}

func (m *GetActiveServicePoliciesResponse) Reset()      { *m = GetActiveServicePoliciesResponse{} }
func (*GetActiveServicePoliciesResponse) ProtoMessage() {}
func (*GetActiveServicePoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{7}
}
func (m *GetActiveServicePoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveServicePoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveServicePoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveServicePoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveServicePoliciesResponse.Merge(m, src)
}
func (m *GetActiveServicePoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveServicePoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveServicePoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveServicePoliciesResponse proto.InternalMessageInfo

func (m *GetActiveServicePoliciesResponse) GetServicePolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// SetActiveNetworkPoliciesRequest
//
// x-displayName: "Request for SetActiveNetworkPolicies"
// SetActiveNetworkPoliciesRequest is the shape of the request for SetActiveNetworkPolicies.
type SetActiveNetworkPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// network_policies
	//
	// x-displayName: "Network Policies"
	// A list of references to network_policy objects.
	NetworkPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=network_policies,json=networkPolicies,proto3" json:"network_policies,omitempty"`
}

func (m *SetActiveNetworkPoliciesRequest) Reset()      { *m = SetActiveNetworkPoliciesRequest{} }
func (*SetActiveNetworkPoliciesRequest) ProtoMessage() {}
func (*SetActiveNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{8}
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveNetworkPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveNetworkPoliciesRequest.Merge(m, src)
}
func (m *SetActiveNetworkPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveNetworkPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveNetworkPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveNetworkPoliciesRequest proto.InternalMessageInfo

func (m *SetActiveNetworkPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetActiveNetworkPoliciesRequest) GetNetworkPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.NetworkPolicies
	}
	return nil
}

// SetActiveNetworkPoliciesResponse
//
// x-displayName: "Response for SetActiveNetworkPolicies"
// SetActiveNetworkPoliciesResponse is the shape of the response for SetActiveNetworkPolicies.
type SetActiveNetworkPoliciesResponse struct {
}

func (m *SetActiveNetworkPoliciesResponse) Reset()      { *m = SetActiveNetworkPoliciesResponse{} }
func (*SetActiveNetworkPoliciesResponse) ProtoMessage() {}
func (*SetActiveNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{9}
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveNetworkPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveNetworkPoliciesResponse.Merge(m, src)
}
func (m *SetActiveNetworkPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveNetworkPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveNetworkPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveNetworkPoliciesResponse proto.InternalMessageInfo

// GetActiveNetworkPoliciesRequest
//
// x-displayName: "Request for GetActiveNetworkPolicies"
// GetActiveNetworkPoliciesRequest is the shape of the request for GetActiveNetworkPolicies.
type GetActiveNetworkPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetActiveNetworkPoliciesRequest) Reset()      { *m = GetActiveNetworkPoliciesRequest{} }
func (*GetActiveNetworkPoliciesRequest) ProtoMessage() {}
func (*GetActiveNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{10}
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveNetworkPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveNetworkPoliciesRequest.Merge(m, src)
}
func (m *GetActiveNetworkPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveNetworkPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveNetworkPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveNetworkPoliciesRequest proto.InternalMessageInfo

func (m *GetActiveNetworkPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetActiveNetworkPoliciesResponse
//
// x-displayName: "Response for GetActiveNetworkPolicies"
// GetActiveNetworkPoliciesResponse is the shape of the response for GetActiveNetworkPolicies.
type GetActiveNetworkPoliciesResponse struct {
	// network_policies
	//
	// x-displayName: "Network Policies"
	// A list of references to network_policy objects.
	NetworkPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=network_policies,json=networkPolicies,proto3" json:"network_policies,omitempty"`
}

func (m *GetActiveNetworkPoliciesResponse) Reset()      { *m = GetActiveNetworkPoliciesResponse{} }
func (*GetActiveNetworkPoliciesResponse) ProtoMessage() {}
func (*GetActiveNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{11}
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveNetworkPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveNetworkPoliciesResponse.Merge(m, src)
}
func (m *GetActiveNetworkPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveNetworkPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveNetworkPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveNetworkPoliciesResponse proto.InternalMessageInfo

func (m *GetActiveNetworkPoliciesResponse) GetNetworkPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.NetworkPolicies
	}
	return nil
}

// SetActiveAlertPoliciesRequest
//
// x-displayName: "Request for SetActiveAlertPolicies"
// SetActiveAlertPoliciesRequest is the shape of the request for SetActiveAlertPolicies.
type SetActiveAlertPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// alert_policies
	//
	// x-displayName: "Alert Policies"
	// A list of references to alert_policy objects.
	AlertPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=alert_policies,json=alertPolicies,proto3" json:"alert_policies,omitempty"`
}

func (m *SetActiveAlertPoliciesRequest) Reset()      { *m = SetActiveAlertPoliciesRequest{} }
func (*SetActiveAlertPoliciesRequest) ProtoMessage() {}
func (*SetActiveAlertPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{12}
}
func (m *SetActiveAlertPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveAlertPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveAlertPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveAlertPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveAlertPoliciesRequest.Merge(m, src)
}
func (m *SetActiveAlertPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveAlertPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveAlertPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveAlertPoliciesRequest proto.InternalMessageInfo

func (m *SetActiveAlertPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetActiveAlertPoliciesRequest) GetAlertPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.AlertPolicies
	}
	return nil
}

// SetActiveAlertPoliciesResponse
//
// x-displayName: "Response for SetActiveAlertPolicies"
// SetActiveAlertPoliciesResponse is the shape of the response for SetActiveAlertPolicies.
type SetActiveAlertPoliciesResponse struct {
}

func (m *SetActiveAlertPoliciesResponse) Reset()      { *m = SetActiveAlertPoliciesResponse{} }
func (*SetActiveAlertPoliciesResponse) ProtoMessage() {}
func (*SetActiveAlertPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{13}
}
func (m *SetActiveAlertPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetActiveAlertPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetActiveAlertPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetActiveAlertPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetActiveAlertPoliciesResponse.Merge(m, src)
}
func (m *SetActiveAlertPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetActiveAlertPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetActiveAlertPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetActiveAlertPoliciesResponse proto.InternalMessageInfo

// GetActiveAlertPoliciesRequest
//
// x-displayName: "Request for GetActiveAlertPolicies"
// GetActiveAlertPoliciesRequest is the shape of the request for GetActiveAlertPolicies.
type GetActiveAlertPoliciesRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetActiveAlertPoliciesRequest) Reset()      { *m = GetActiveAlertPoliciesRequest{} }
func (*GetActiveAlertPoliciesRequest) ProtoMessage() {}
func (*GetActiveAlertPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{14}
}
func (m *GetActiveAlertPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveAlertPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveAlertPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveAlertPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveAlertPoliciesRequest.Merge(m, src)
}
func (m *GetActiveAlertPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveAlertPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveAlertPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveAlertPoliciesRequest proto.InternalMessageInfo

func (m *GetActiveAlertPoliciesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// GetActiveAlertPoliciesResponse
//
// x-displayName: "Response for GetActiveAlertPolicies"
// GetActiveAlertPoliciesResponse is the shape of the response for GetActiveAlertPolicies.
type GetActiveAlertPoliciesResponse struct {
	// alert_policies
	//
	// x-displayName: "Alert Policies"
	// A list of references to alert_policy objects.
	AlertPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=alert_policies,json=alertPolicies,proto3" json:"alert_policies,omitempty"`
	// policy_status
	//
	// x-displayName: "Alert Policies Status"
	// The status of alert policies
	AlertPoliciesStatus []*alert_policy_set.AlertPolicyStatus `protobuf:"bytes,3,rep,name=alert_policies_status,json=alertPoliciesStatus,proto3" json:"alert_policies_status,omitempty"`
}

func (m *GetActiveAlertPoliciesResponse) Reset()      { *m = GetActiveAlertPoliciesResponse{} }
func (*GetActiveAlertPoliciesResponse) ProtoMessage() {}
func (*GetActiveAlertPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{15}
}
func (m *GetActiveAlertPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveAlertPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveAlertPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveAlertPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveAlertPoliciesResponse.Merge(m, src)
}
func (m *GetActiveAlertPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveAlertPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveAlertPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveAlertPoliciesResponse proto.InternalMessageInfo

func (m *GetActiveAlertPoliciesResponse) GetAlertPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.AlertPolicies
	}
	return nil
}

func (m *GetActiveAlertPoliciesResponse) GetAlertPoliciesStatus() []*alert_policy_set.AlertPolicyStatus {
	if m != nil {
		return m.AlertPoliciesStatus
	}
	return nil
}

// UpdateAllowAdvertiseOnPublicReq
//
// x-displayName: "Request for UpdateAllowAdvertiseOnPublic"
// Request body of UpdateAllowAdvertiseOnPublic request
type UpdateAllowAdvertiseOnPublicReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Name of the namespace under which all the URLs in APIItems will be evaluated
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Allow advertisement on public.
	//
	// Config choice to allow advertisement on the public.
	// x-displayName: "Allow advertisement on public."
	AllowAdvertiseOnPublic PublicAdvertiseChoice `protobuf:"varint,2,opt,name=allow_advertise_on_public,json=allowAdvertiseOnPublic,proto3,enum=ves.io.schema.namespace.PublicAdvertiseChoice" json:"allow_advertise_on_public,omitempty"`
}

func (m *UpdateAllowAdvertiseOnPublicReq) Reset()      { *m = UpdateAllowAdvertiseOnPublicReq{} }
func (*UpdateAllowAdvertiseOnPublicReq) ProtoMessage() {}
func (*UpdateAllowAdvertiseOnPublicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{16}
}
func (m *UpdateAllowAdvertiseOnPublicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAllowAdvertiseOnPublicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAllowAdvertiseOnPublicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAllowAdvertiseOnPublicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAllowAdvertiseOnPublicReq.Merge(m, src)
}
func (m *UpdateAllowAdvertiseOnPublicReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAllowAdvertiseOnPublicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAllowAdvertiseOnPublicReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAllowAdvertiseOnPublicReq proto.InternalMessageInfo

func (m *UpdateAllowAdvertiseOnPublicReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateAllowAdvertiseOnPublicReq) GetAllowAdvertiseOnPublic() PublicAdvertiseChoice {
	if m != nil {
		return m.AllowAdvertiseOnPublic
	}
	return Default
}

// UpdateAllowAdvertiseOnPublicResp
//
// x-displayName: "Response for UpdateAllowAdvertiseOnPublic"
// Response body of UpdateAllowAdvertiseOnPublic request
type UpdateAllowAdvertiseOnPublicResp struct {
	// result
	//
	// x-displayName: "Result"
	// API result.
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpdateAllowAdvertiseOnPublicResp) Reset()      { *m = UpdateAllowAdvertiseOnPublicResp{} }
func (*UpdateAllowAdvertiseOnPublicResp) ProtoMessage() {}
func (*UpdateAllowAdvertiseOnPublicResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{17}
}
func (m *UpdateAllowAdvertiseOnPublicResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAllowAdvertiseOnPublicResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAllowAdvertiseOnPublicResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAllowAdvertiseOnPublicResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAllowAdvertiseOnPublicResp.Merge(m, src)
}
func (m *UpdateAllowAdvertiseOnPublicResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAllowAdvertiseOnPublicResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAllowAdvertiseOnPublicResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAllowAdvertiseOnPublicResp proto.InternalMessageInfo

func (m *UpdateAllowAdvertiseOnPublicResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// ValidateRulesReq
//
// x-displayName: "Request for validating according to rules specified in the validator_evaluation"
// Request body of ValidateRulesReq request
type ValidateRulesReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// The name of the namespace which will be system in this case.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// validator evaluation
	//
	// x-displayName: "Validator evaluation"
	// x-example: "The map key would be the validator type e.g. XStringRegex and the map value is the validator value e.g. true"
	// Map contains vaidators which needs to be evaluated
	ValidatorEvaluation map[string]string `protobuf:"bytes,2,rep,name=validator_evaluation,json=validatorEvaluation,proto3" json:"validator_evaluation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// value
	//
	// x-displayName: "Value"
	// x-example: "value"
	// The value to be validated
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ValidateRulesReq) Reset()      { *m = ValidateRulesReq{} }
func (*ValidateRulesReq) ProtoMessage() {}
func (*ValidateRulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{18}
}
func (m *ValidateRulesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRulesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRulesReq.Merge(m, src)
}
func (m *ValidateRulesReq) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRulesReq proto.InternalMessageInfo

func (m *ValidateRulesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ValidateRulesReq) GetValidatorEvaluation() map[string]string {
	if m != nil {
		return m.ValidatorEvaluation
	}
	return nil
}

func (m *ValidateRulesReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ValidationResult struct {
	// Messsge
	//
	// x-displayName: "Message"
	// Information message will be returned for inline notification and error messages for validation rules.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Severity
	//
	// x-displayName: "Severity of message"
	// Severity of message dispalyed, this field will be used by UI to determine the severity of an information message in case of inline notification.
	Severity Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=ves.io.schema.namespace.Severity" json:"severity,omitempty"`
}

func (m *ValidationResult) Reset()      { *m = ValidationResult{} }
func (*ValidationResult) ProtoMessage() {}
func (*ValidationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{19}
}
func (m *ValidationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationResult.Merge(m, src)
}
func (m *ValidationResult) XXX_Size() int {
	return m.Size()
}
func (m *ValidationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationResult.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationResult proto.InternalMessageInfo

func (m *ValidationResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ValidationResult) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return ERROR
}

// ValidateRulesResponse
//
// x-displayName: "Response for ValidateRulesReq"
// Response body of ValidateRulesReq request
type ValidateRulesResponse struct {
	// success
	//
	// x-displayName: "Success"
	// This will set true if validation is successful on value
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Deprecated: Do not use.
	// error
	//
	// x-displayName: "Error"
	// Error returned in case the value does not match the validator rules.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Deprecated: Do not use.
	// Validation Results
	//
	// x-displayName: "Validation Results"
	// This will return a list of validation results based on validators passed as input.
	ValidationResults []*ValidationResult `protobuf:"bytes,3,rep,name=validation_results,json=validationResults,proto3" json:"validation_results,omitempty"`
}

func (m *ValidateRulesResponse) Reset()      { *m = ValidateRulesResponse{} }
func (*ValidateRulesResponse) ProtoMessage() {}
func (*ValidateRulesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{20}
}
func (m *ValidateRulesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRulesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRulesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRulesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRulesResponse.Merge(m, src)
}
func (m *ValidateRulesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRulesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRulesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRulesResponse proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ValidateRulesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Deprecated: Do not use.
func (m *ValidateRulesResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ValidateRulesResponse) GetValidationResults() []*ValidationResult {
	if m != nil {
		return m.ValidationResults
	}
	return nil
}

// NetworkingInventoryRequest
//
// x-displayName: "Networking related objects inventory request"
// Request for inventory of networking related objects
type NetworkingInventoryRequest struct {
}

func (m *NetworkingInventoryRequest) Reset()      { *m = NetworkingInventoryRequest{} }
func (*NetworkingInventoryRequest) ProtoMessage() {}
func (*NetworkingInventoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{21}
}
func (m *NetworkingInventoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkingInventoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkingInventoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkingInventoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkingInventoryRequest.Merge(m, src)
}
func (m *NetworkingInventoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *NetworkingInventoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkingInventoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkingInventoryRequest proto.InternalMessageInfo

// NetworkingInventoryResponse
//
// x-displayName: "Networking related objects inventory response"
// Response for inventory of networking related objects
type NetworkingInventoryResponse struct {
	// Global Networks
	//
	// x-displayName: "Global Networks"
	// Number of global networks configured
	GlobalNetworks uint32 `protobuf:"varint,1,opt,name=global_networks,json=globalNetworks,proto3" json:"global_networks,omitempty"`
	// Sites
	//
	// x-displayName: "Sites"
	// Number of sites configured
	Sites uint32 `protobuf:"varint,2,opt,name=sites,proto3" json:"sites,omitempty"`
	// Site Mesh Groups
	//
	// x-displayName: "Site Mesh Groups"
	// Number of site mesh groups configured
	SiteMeshGroups uint32 `protobuf:"varint,3,opt,name=site_mesh_groups,json=siteMeshGroups,proto3" json:"site_mesh_groups,omitempty"`
	// DC Cluster Groups
	//
	// x-displayName: "DC Cluster Groups"
	// Number of DC cluster groups configured
	DcClusterGroups uint32 `protobuf:"varint,4,opt,name=dc_cluster_groups,json=dcClusterGroups,proto3" json:"dc_cluster_groups,omitempty"`
	// CloudLinks
	//
	// x-displayName: "CloudLinks"
	// Number of CloudLinks
	CloudLinks uint32 `protobuf:"varint,5,opt,name=cloud_links,json=cloudLinks,proto3" json:"cloud_links,omitempty"`
	// Segments
	//
	// x-displayName: "Segments"
	// Number of Segments
	Segments uint32 `protobuf:"varint,6,opt,name=segments,proto3" json:"segments,omitempty"`
}

func (m *NetworkingInventoryResponse) Reset()      { *m = NetworkingInventoryResponse{} }
func (*NetworkingInventoryResponse) ProtoMessage() {}
func (*NetworkingInventoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{22}
}
func (m *NetworkingInventoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkingInventoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkingInventoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkingInventoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkingInventoryResponse.Merge(m, src)
}
func (m *NetworkingInventoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *NetworkingInventoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkingInventoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkingInventoryResponse proto.InternalMessageInfo

func (m *NetworkingInventoryResponse) GetGlobalNetworks() uint32 {
	if m != nil {
		return m.GlobalNetworks
	}
	return 0
}

func (m *NetworkingInventoryResponse) GetSites() uint32 {
	if m != nil {
		return m.Sites
	}
	return 0
}

func (m *NetworkingInventoryResponse) GetSiteMeshGroups() uint32 {
	if m != nil {
		return m.SiteMeshGroups
	}
	return 0
}

func (m *NetworkingInventoryResponse) GetDcClusterGroups() uint32 {
	if m != nil {
		return m.DcClusterGroups
	}
	return 0
}

func (m *NetworkingInventoryResponse) GetCloudLinks() uint32 {
	if m != nil {
		return m.CloudLinks
	}
	return 0
}

func (m *NetworkingInventoryResponse) GetSegments() uint32 {
	if m != nil {
		return m.Segments
	}
	return 0
}

// UDPLoadbalancerResultType
//
// x-displayName: "UDP Loadbalancer Inventory Results"
// UDP Loadbalancer Inventory Results
type UDPLoadbalancerResultType struct {
	// Private Advertisement Status
	//
	// x-displayName: "Private Advertisement Enabled or Disabled"
	// advertised privately configured
	PrivateAdvertisement *schema.Empty `protobuf:"bytes,1,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement Status
	//
	// x-displayName: "Public Advertisement Enabled or Disabled"
	// advertised publicly configured
	PublicAdvertisment *schema.Empty `protobuf:"bytes,2,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
	// UDP LB Name
	//
	// x-displayName: "UDP LB Name"
	// Name of UDP LB
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// UDP LB Namespace
	//
	// x-displayName: "UDP LB Namespace"
	// Namespace of UDP LB
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *UDPLoadbalancerResultType) Reset()      { *m = UDPLoadbalancerResultType{} }
func (*UDPLoadbalancerResultType) ProtoMessage() {}
func (*UDPLoadbalancerResultType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{23}
}
func (m *UDPLoadbalancerResultType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDPLoadbalancerResultType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UDPLoadbalancerResultType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UDPLoadbalancerResultType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPLoadbalancerResultType.Merge(m, src)
}
func (m *UDPLoadbalancerResultType) XXX_Size() int {
	return m.Size()
}
func (m *UDPLoadbalancerResultType) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPLoadbalancerResultType.DiscardUnknown(m)
}

var xxx_messageInfo_UDPLoadbalancerResultType proto.InternalMessageInfo

func (m *UDPLoadbalancerResultType) GetPrivateAdvertisement() *schema.Empty {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return nil
}

func (m *UDPLoadbalancerResultType) GetPublicAdvertisment() *schema.Empty {
	if m != nil {
		return m.PublicAdvertisment
	}
	return nil
}

func (m *UDPLoadbalancerResultType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UDPLoadbalancerResultType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// UDPLoadbalancerInventoryFilterType
//
// x-displayName: "Filter for Inventory of UDP Loadbalancers"
// UDP Loadbalancer inventory Filter
type UDPLoadbalancerInventoryFilterType struct {
	// Private Advertisement
	//
	// x-displayName: "Private Advertisement"
	// Filter results with UDP loadbalancers advertised privately
	PrivateAdvertisement *types.BoolValue `protobuf:"bytes,7,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement
	//
	// x-displayName: "Public Advertisement"
	// Filter results with UDP loadbalancers advertised publicly
	PublicAdvertisment *types.BoolValue `protobuf:"bytes,8,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
}

func (m *UDPLoadbalancerInventoryFilterType) Reset()      { *m = UDPLoadbalancerInventoryFilterType{} }
func (*UDPLoadbalancerInventoryFilterType) ProtoMessage() {}
func (*UDPLoadbalancerInventoryFilterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{24}
}
func (m *UDPLoadbalancerInventoryFilterType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDPLoadbalancerInventoryFilterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UDPLoadbalancerInventoryFilterType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UDPLoadbalancerInventoryFilterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPLoadbalancerInventoryFilterType.Merge(m, src)
}
func (m *UDPLoadbalancerInventoryFilterType) XXX_Size() int {
	return m.Size()
}
func (m *UDPLoadbalancerInventoryFilterType) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPLoadbalancerInventoryFilterType.DiscardUnknown(m)
}

var xxx_messageInfo_UDPLoadbalancerInventoryFilterType proto.InternalMessageInfo

func (m *UDPLoadbalancerInventoryFilterType) GetPrivateAdvertisement() *types.BoolValue {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return nil
}

func (m *UDPLoadbalancerInventoryFilterType) GetPublicAdvertisment() *types.BoolValue {
	if m != nil {
		return m.PublicAdvertisment
	}
	return nil
}

// UDPLoadbalancerInventoryType
//
// x-displayName: "Inventory of UDP Loadbalancers"
// UDP Loadbalancer inventory
type UDPLoadbalancerInventoryType struct {
	// Private Advertisement
	//
	// x-displayName: "Private Advertisement"
	// Number of UDP loadbalancers advertised privately
	PrivateAdvertisement uint32 `protobuf:"varint,1,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement
	//
	// x-displayName: "Public Advertisement"
	// Number of UDP loadbalancers advertised publicly
	PublicAdvertisment uint32 `protobuf:"varint,2,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
	// UDP Loadbalancers
	//
	// x-displayName: "List of UDP Loadbalancers"
	// List of UDP loadbalancers
	UdplbResults []*UDPLoadbalancerResultType `protobuf:"bytes,4,rep,name=udplb_results,json=udplbResults,proto3" json:"udplb_results,omitempty"`
}

func (m *UDPLoadbalancerInventoryType) Reset()      { *m = UDPLoadbalancerInventoryType{} }
func (*UDPLoadbalancerInventoryType) ProtoMessage() {}
func (*UDPLoadbalancerInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{25}
}
func (m *UDPLoadbalancerInventoryType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDPLoadbalancerInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UDPLoadbalancerInventoryType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UDPLoadbalancerInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPLoadbalancerInventoryType.Merge(m, src)
}
func (m *UDPLoadbalancerInventoryType) XXX_Size() int {
	return m.Size()
}
func (m *UDPLoadbalancerInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPLoadbalancerInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_UDPLoadbalancerInventoryType proto.InternalMessageInfo

func (m *UDPLoadbalancerInventoryType) GetPrivateAdvertisement() uint32 {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return 0
}

func (m *UDPLoadbalancerInventoryType) GetPublicAdvertisment() uint32 {
	if m != nil {
		return m.PublicAdvertisment
	}
	return 0
}

func (m *UDPLoadbalancerInventoryType) GetUdplbResults() []*UDPLoadbalancerResultType {
	if m != nil {
		return m.UdplbResults
	}
	return nil
}

// TCPLoadbalancerResultType
//
// x-displayName: "TCP Loadbalancer Inventory Results"
// TCP Loadbalancer Inventory Results
type TCPLoadbalancerResultType struct {
	// TLS Encryption Status
	//
	// x-displayName: "TLS Encryption Enabled or Disabled"
	// TLS Encryption configured
	TlsEncryption *schema.Empty `protobuf:"bytes,1,opt,name=tls_encryption,json=tlsEncryption,proto3" json:"tls_encryption,omitempty"`
	// Namespace Service Policy Status
	//
	// x-displayName: "Namespace Service Policy"
	// Namespace Service Policy configured
	NamespaceServicePolicy *schema.Empty `protobuf:"bytes,2,opt,name=namespace_service_policy,json=namespaceServicePolicy,proto3" json:"namespace_service_policy,omitempty"`
	// Service Policy Status
	//
	// x-displayName: "Service Policy Enabled or Disabled"
	// xService Policy configured
	ServicePolicy *schema.Empty `protobuf:"bytes,3,opt,name=service_policy,json=servicePolicy,proto3" json:"service_policy,omitempty"`
	// Private Advertisement Status
	//
	// x-displayName: "Private Advertisement Enabled or Disabled"
	// advertised privately configured
	PrivateAdvertisement *schema.Empty `protobuf:"bytes,4,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement Status
	//
	// x-displayName: "Public Advertisement Enabled or Disabled"
	// advertised publicly configured
	PublicAdvertisment *schema.Empty `protobuf:"bytes,5,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
	// TCP LB Name
	//
	// x-displayName: "TCP LB Name"
	// Name of TCP LB
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Rate Limit Status
	//
	// x-displayName: "Rate Limiting Enabled or Disabled"
	// Rate Limit Status
	RateLimit *schema.Empty `protobuf:"bytes,7,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// TCP LB Namespace
	//
	// x-displayName: "TCP LB Namespace"
	// Namespace of TCP LB
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *TCPLoadbalancerResultType) Reset()      { *m = TCPLoadbalancerResultType{} }
func (*TCPLoadbalancerResultType) ProtoMessage() {}
func (*TCPLoadbalancerResultType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{26}
}
func (m *TCPLoadbalancerResultType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPLoadbalancerResultType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TCPLoadbalancerResultType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TCPLoadbalancerResultType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPLoadbalancerResultType.Merge(m, src)
}
func (m *TCPLoadbalancerResultType) XXX_Size() int {
	return m.Size()
}
func (m *TCPLoadbalancerResultType) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPLoadbalancerResultType.DiscardUnknown(m)
}

var xxx_messageInfo_TCPLoadbalancerResultType proto.InternalMessageInfo

func (m *TCPLoadbalancerResultType) GetTlsEncryption() *schema.Empty {
	if m != nil {
		return m.TlsEncryption
	}
	return nil
}

func (m *TCPLoadbalancerResultType) GetNamespaceServicePolicy() *schema.Empty {
	if m != nil {
		return m.NamespaceServicePolicy
	}
	return nil
}

func (m *TCPLoadbalancerResultType) GetServicePolicy() *schema.Empty {
	if m != nil {
		return m.ServicePolicy
	}
	return nil
}

func (m *TCPLoadbalancerResultType) GetPrivateAdvertisement() *schema.Empty {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return nil
}

func (m *TCPLoadbalancerResultType) GetPublicAdvertisment() *schema.Empty {
	if m != nil {
		return m.PublicAdvertisment
	}
	return nil
}

func (m *TCPLoadbalancerResultType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TCPLoadbalancerResultType) GetRateLimit() *schema.Empty {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func (m *TCPLoadbalancerResultType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// TCPLoadbalancerInventoryFilterType
//
// x-displayName: "Filter for Inventory of TCP Loadbalancers"
// TCP Loadbalancer inventory Filter
type TCPLoadbalancerInventoryFilterType struct {
	// TLS Encryption
	//
	// x-displayName: "TLS Encryption"
	// Filter results with TCP loadbalancers with TLS Encryption configured
	TlsEncryption *types.BoolValue `protobuf:"bytes,7,opt,name=tls_encryption,json=tlsEncryption,proto3" json:"tls_encryption,omitempty"`
	// Namespace Service Policy
	//
	// x-displayName: "Namespace Service Policy"
	// Filter results with TCP loadbalancers with Namespace Service Policy configured
	NamespaceServicePolicy *types.BoolValue `protobuf:"bytes,8,opt,name=namespace_service_policy,json=namespaceServicePolicy,proto3" json:"namespace_service_policy,omitempty"`
	// Service Policy
	//
	// x-displayName: "Service Policy"
	// Filter results with TCP loadbalancers with Service Policy configured
	ServicePolicy *types.BoolValue `protobuf:"bytes,9,opt,name=service_policy,json=servicePolicy,proto3" json:"service_policy,omitempty"`
	// Private Advertisement
	//
	// x-displayName: "Private Advertisement"
	// Filter results with TCP loadbalancers advertised privately
	PrivateAdvertisement *types.BoolValue `protobuf:"bytes,10,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement
	//
	// x-displayName: "Public Advertisement"
	// Filter results with TCP loadbalancers advertised publicly
	PublicAdvertisment *types.BoolValue `protobuf:"bytes,11,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
}

func (m *TCPLoadbalancerInventoryFilterType) Reset()      { *m = TCPLoadbalancerInventoryFilterType{} }
func (*TCPLoadbalancerInventoryFilterType) ProtoMessage() {}
func (*TCPLoadbalancerInventoryFilterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{27}
}
func (m *TCPLoadbalancerInventoryFilterType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPLoadbalancerInventoryFilterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TCPLoadbalancerInventoryFilterType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TCPLoadbalancerInventoryFilterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPLoadbalancerInventoryFilterType.Merge(m, src)
}
func (m *TCPLoadbalancerInventoryFilterType) XXX_Size() int {
	return m.Size()
}
func (m *TCPLoadbalancerInventoryFilterType) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPLoadbalancerInventoryFilterType.DiscardUnknown(m)
}

var xxx_messageInfo_TCPLoadbalancerInventoryFilterType proto.InternalMessageInfo

func (m *TCPLoadbalancerInventoryFilterType) GetTlsEncryption() *types.BoolValue {
	if m != nil {
		return m.TlsEncryption
	}
	return nil
}

func (m *TCPLoadbalancerInventoryFilterType) GetNamespaceServicePolicy() *types.BoolValue {
	if m != nil {
		return m.NamespaceServicePolicy
	}
	return nil
}

func (m *TCPLoadbalancerInventoryFilterType) GetServicePolicy() *types.BoolValue {
	if m != nil {
		return m.ServicePolicy
	}
	return nil
}

func (m *TCPLoadbalancerInventoryFilterType) GetPrivateAdvertisement() *types.BoolValue {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return nil
}

func (m *TCPLoadbalancerInventoryFilterType) GetPublicAdvertisment() *types.BoolValue {
	if m != nil {
		return m.PublicAdvertisment
	}
	return nil
}

// TCPLoadbalancerInventoryType
//
// x-displayName: "Inventory of TCP Loadbalancers"
// TCP Loadbalancer inventory
type TCPLoadbalancerInventoryType struct {
	// TLS Encryption
	//
	// x-displayName: "TLS Encryption"
	// Number of TCP loadbalancers with TLS Encryption configured
	TlsEncryption uint32 `protobuf:"varint,1,opt,name=tls_encryption,json=tlsEncryption,proto3" json:"tls_encryption,omitempty"`
	// Namespace Service Policy
	//
	// x-displayName: "Namespace Service Policy"
	// Number of TCP loadbalancers with Namespace Service Policy configured
	NamespaceServicePolicy uint32 `protobuf:"varint,2,opt,name=namespace_service_policy,json=namespaceServicePolicy,proto3" json:"namespace_service_policy,omitempty"`
	// Service Policy
	//
	// x-displayName: "Service Policy"
	// Number of TCP loadbalancers with Service Policy configured
	ServicePolicy uint32 `protobuf:"varint,3,opt,name=service_policy,json=servicePolicy,proto3" json:"service_policy,omitempty"`
	// Private Advertisement
	//
	// x-displayName: "Private Advertisement"
	// Number of TCP loadbalancers advertised privately
	PrivateAdvertisement uint32 `protobuf:"varint,4,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement
	//
	// x-displayName: "Public Advertisement"
	// Number of TCP loadbalancers advertised publicly
	PublicAdvertisment uint32 `protobuf:"varint,5,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
	// TCP Loadbalancers
	//
	// x-displayName: "List of TCP Loadbalancers"
	// List of TCP loadbalancers
	TcplbResults []*TCPLoadbalancerResultType `protobuf:"bytes,7,rep,name=tcplb_results,json=tcplbResults,proto3" json:"tcplb_results,omitempty"`
}

func (m *TCPLoadbalancerInventoryType) Reset()      { *m = TCPLoadbalancerInventoryType{} }
func (*TCPLoadbalancerInventoryType) ProtoMessage() {}
func (*TCPLoadbalancerInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{28}
}
func (m *TCPLoadbalancerInventoryType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPLoadbalancerInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TCPLoadbalancerInventoryType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TCPLoadbalancerInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPLoadbalancerInventoryType.Merge(m, src)
}
func (m *TCPLoadbalancerInventoryType) XXX_Size() int {
	return m.Size()
}
func (m *TCPLoadbalancerInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPLoadbalancerInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_TCPLoadbalancerInventoryType proto.InternalMessageInfo

func (m *TCPLoadbalancerInventoryType) GetTlsEncryption() uint32 {
	if m != nil {
		return m.TlsEncryption
	}
	return 0
}

func (m *TCPLoadbalancerInventoryType) GetNamespaceServicePolicy() uint32 {
	if m != nil {
		return m.NamespaceServicePolicy
	}
	return 0
}

func (m *TCPLoadbalancerInventoryType) GetServicePolicy() uint32 {
	if m != nil {
		return m.ServicePolicy
	}
	return 0
}

func (m *TCPLoadbalancerInventoryType) GetPrivateAdvertisement() uint32 {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return 0
}

func (m *TCPLoadbalancerInventoryType) GetPublicAdvertisment() uint32 {
	if m != nil {
		return m.PublicAdvertisment
	}
	return 0
}

func (m *TCPLoadbalancerInventoryType) GetTcplbResults() []*TCPLoadbalancerResultType {
	if m != nil {
		return m.TcplbResults
	}
	return nil
}

// HTTPLoadbalancerInventoryFilterType
//
// x-displayName: "Filter for HTTP Loadbalancers Inventory"
// HTTP Loadbalancer Inventory Filter
type HTTPLoadbalancerInventoryFilterType struct {
	// HTTP Only
	//
	// x-displayName: "HTTP Only"
	// Filter results with HTTP only loadbalancers
	HttpOnly *types.BoolValue `protobuf:"bytes,14,opt,name=http_only,json=httpOnly,proto3" json:"http_only,omitempty"`
	// WAF
	//
	// x-displayName: "WAF"
	// Filter results with HTTP loadbalancers with WAF configured
	Waf *types.BoolValue `protobuf:"bytes,15,opt,name=waf,proto3" json:"waf,omitempty"`
	// Bot Protection
	//
	// x-displayName: "Bot Protection"
	// Filter results with HTTP loadbalancers with Bot Protection configured
	BotProtection *types.BoolValue `protobuf:"bytes,16,opt,name=bot_protection,json=botProtection,proto3" json:"bot_protection,omitempty"`
	// API Protection
	//
	// x-displayName: "API Protection"
	// Filter results with HTTP loadbalancers with API Protection configured
	ApiProtection *types.BoolValue `protobuf:"bytes,17,opt,name=api_protection,json=apiProtection,proto3" json:"api_protection,omitempty"`
	// Client Side Defense
	//
	// x-displayName: "Client Side Defense"
	// Filter results with HTTP loadbalancers with Client Side Defense configured
	ClientSideDefense *types.BoolValue `protobuf:"bytes,19,opt,name=client_side_defense,json=clientSideDefense,proto3" json:"client_side_defense,omitempty"`
	// Namespace Service Policy
	//
	// x-displayName: "Namespace Service Policy"
	// Filter results with HTTP loadbalancers with Namespace Service Policy configured
	NamespaceServicePolicy *types.BoolValue `protobuf:"bytes,20,opt,name=namespace_service_policy,json=namespaceServicePolicy,proto3" json:"namespace_service_policy,omitempty"`
	// Service Policy
	//
	// x-displayName: "Service Policy"
	// Filter results with HTTP loadbalancers with Service Policy configured
	ServicePolicy *types.BoolValue `protobuf:"bytes,21,opt,name=service_policy,json=servicePolicy,proto3" json:"service_policy,omitempty"`
	// IP Reputation
	//
	// x-displayName: "IP Reputation"
	// Filter results with HTTP loadbalancers with IP Reputation configured
	IpReputation *types.BoolValue `protobuf:"bytes,22,opt,name=ip_reputation,json=ipReputation,proto3" json:"ip_reputation,omitempty"`
	// Malicious User Detection
	//
	// x-displayName: "Malicious User Detection"
	// Filter results with HTTP loadbalancers with Malicious User Detection configured
	MaliciousUserDetection *types.BoolValue `protobuf:"bytes,23,opt,name=malicious_user_detection,json=maliciousUserDetection,proto3" json:"malicious_user_detection,omitempty"`
	// Private Advertisement
	//
	// x-displayName: "Private Advertisement"
	// Filter results with HTTP loadbalancers advertised privately
	PrivateAdvertisement *types.BoolValue `protobuf:"bytes,24,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement
	//
	// x-displayName: "Public Advertisement"
	// Filter results with HTTP loadbalancers advertised publicly
	PublicAdvertisment *types.BoolValue `protobuf:"bytes,25,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
	// WAF Exclusion
	//
	// x-displayName: "WAF Exclusion"
	// Filter results with HTTP loadbalancers with WAF Exclusion
	WafExclusion *types.BoolValue `protobuf:"bytes,26,opt,name=waf_exclusion,json=wafExclusion,proto3" json:"waf_exclusion,omitempty"`
	// L7 DDoS Detection
	//
	// x-displayName: "L7 DDoS Detection"
	// Filter results with HTTP loadbalancers with L7 DDoS detection enabled
	DdosProtection *types.BoolValue `protobuf:"bytes,18,opt,name=ddos_protection,json=ddosProtection,proto3" json:"ddos_protection,omitempty"`
	// L7 DDoS Auto Mitigation
	//
	// x-displayName: "L7 DDoS Auto Mitigation"
	// Filter results with HTTP loadbalancers with L7 DDoS Auto Mitigation enabled
	DdosAutoMitigation *types.BoolValue `protobuf:"bytes,27,opt,name=ddos_auto_mitigation,json=ddosAutoMitigation,proto3" json:"ddos_auto_mitigation,omitempty"`
	// DDoS Mitigation Rules
	//
	// x-displayName: "DDoS Mitigation Rules"
	// Filter results with HTTP loadbalancers with DDoS Mitigation Rules configured
	DdosMitigation *types.BoolValue `protobuf:"bytes,28,opt,name=ddos_mitigation,json=ddosMitigation,proto3" json:"ddos_mitigation,omitempty"`
	// Slow DDoS Mitigation
	//
	// x-displayName: "Slow DDoS Mitigation"
	// Filter results with HTTP loadbalancers with Slow DDoS Mitigation
	SlowDdosMitigation *types.BoolValue `protobuf:"bytes,29,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3" json:"slow_ddos_mitigation,omitempty"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Filter results with HTTP loadbalancers with Malicious User Mitigation
	MaliciousUserMitigation *types.BoolValue `protobuf:"bytes,30,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	// Trusted Client
	//
	// x-displayName: "Trusted Client"
	// Filter results with HTTP loadbalancers with Trusted Client
	TrustedClient *types.BoolValue `protobuf:"bytes,31,opt,name=trusted_client,json=trustedClient,proto3" json:"trusted_client,omitempty"`
	// Trusted Client IP Headers
	//
	// x-displayName: "Trusted Client IP Headers"
	// Filter results with HTTP loadbalancers with Trusted Client IP Headers
	TrustedClientIpHeaders *types.BoolValue `protobuf:"bytes,32,opt,name=trusted_client_ip_headers,json=trustedClientIpHeaders,proto3" json:"trusted_client_ip_headers,omitempty"`
	// API Schema Validation
	//
	// x-displayName: "API Schema Validation"
	// Filter results with HTTP loadbalancers with API Schema Validation
	ApiSchemaValidation *types.BoolValue `protobuf:"bytes,33,opt,name=api_schema_validation,json=apiSchemaValidation,proto3" json:"api_schema_validation,omitempty"`
	// API Definition
	//
	// x-displayName: "API Definition"
	// Filter results with HTTP loadbalancers with API Definition
	ApiDefinition *types.BoolValue `protobuf:"bytes,34,opt,name=api_definition,json=apiDefinition,proto3" json:"api_definition,omitempty"`
	// Data Guard
	//
	// x-displayName: "Data Guard"
	// Filter results with HTTP loadbalancers with Data Guard
	DataGuard *types.BoolValue `protobuf:"bytes,35,opt,name=data_guard,json=dataGuard,proto3" json:"data_guard,omitempty"`
	// CSRF Protection
	//
	// x-displayName: "CSRF Protection"
	// Filter results with HTTP loadbalancers with CSRF Protection
	CsrfProtection *types.BoolValue `protobuf:"bytes,36,opt,name=csrf_protection,json=csrfProtection,proto3" json:"csrf_protection,omitempty"`
	// GraphQL Inspection
	//
	// x-displayName: "GraphQL Inspection"
	// Filter results with HTTP loadbalancers with GraphQL Inspection
	GraphQlInspection *types.BoolValue `protobuf:"bytes,37,opt,name=graph_ql_inspection,json=graphQlInspection,proto3" json:"graph_ql_inspection,omitempty"`
	// Cookie Protection
	//
	// x-displayName: "Cookie Protection"
	// Filter results with HTTP loadbalancers with Cookie Protection
	CookieProtection *types.BoolValue `protobuf:"bytes,38,opt,name=cookie_protection,json=cookieProtection,proto3" json:"cookie_protection,omitempty"`
	// Client Blocking
	//
	// x-displayName: "Client Blocking"
	// Filter results with HTTP loadbalancers with Client Blocking
	ClientBlocking *types.BoolValue `protobuf:"bytes,39,opt,name=client_blocking,json=clientBlocking,proto3" json:"client_blocking,omitempty"`
	// CORS Policy
	//
	// x-displayName: "CORS Policy"
	// Filter results with HTTP loadbalancers with CORS Policy
	CorsPolicy *types.BoolValue `protobuf:"bytes,40,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Routes
	//
	// x-displayName: "Routes"
	// Filter results with HTTP loadbalancers with Routes
	Routes *types.BoolValue `protobuf:"bytes,41,opt,name=routes,proto3" json:"routes,omitempty"`
	// Origin Server Subset
	//
	// x-displayName: "Origin Server Subset"
	// Filter results with HTTP loadbalancers with Origin Server Subset
	OriginServerSubset *types.BoolValue `protobuf:"bytes,42,opt,name=origin_server_subset,json=originServerSubset,proto3" json:"origin_server_subset,omitempty"`
	// Default Loadbalancer
	//
	// x-displayName: "Default Loadbalancer"
	// Filter results with HTTP loadbalancers with Default Loadbalancer
	DefaultLoadbalancer *types.BoolValue `protobuf:"bytes,43,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3" json:"default_loadbalancer,omitempty"`
	// mTLS
	//
	// x-displayName: "mTLS"
	// Filter results with HTTP loadbalancers with mTLS
	MutualTls *types.BoolValue `protobuf:"bytes,44,opt,name=mutual_tls,json=mutualTls,proto3" json:"mutual_tls,omitempty"`
	// API Discovery
	//
	// x-displayName: "API Discovery"
	// Filter results with HTTP loadbalancers with API Discovery
	ApiDiscovery *types.BoolValue `protobuf:"bytes,45,opt,name=api_discovery,json=apiDiscovery,proto3" json:"api_discovery,omitempty"`
	// Malware Protection
	//
	// x-displayName: "Malware Protection"
	// Filter results with HTTP loadbalancers with Malware Protection
	MalwareProtection *types.BoolValue `protobuf:"bytes,46,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
}

func (m *HTTPLoadbalancerInventoryFilterType) Reset()      { *m = HTTPLoadbalancerInventoryFilterType{} }
func (*HTTPLoadbalancerInventoryFilterType) ProtoMessage() {}
func (*HTTPLoadbalancerInventoryFilterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{29}
}
func (m *HTTPLoadbalancerInventoryFilterType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLoadbalancerInventoryFilterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPLoadbalancerInventoryFilterType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPLoadbalancerInventoryFilterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLoadbalancerInventoryFilterType.Merge(m, src)
}
func (m *HTTPLoadbalancerInventoryFilterType) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLoadbalancerInventoryFilterType) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLoadbalancerInventoryFilterType.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLoadbalancerInventoryFilterType proto.InternalMessageInfo

func (m *HTTPLoadbalancerInventoryFilterType) GetHttpOnly() *types.BoolValue {
	if m != nil {
		return m.HttpOnly
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetWaf() *types.BoolValue {
	if m != nil {
		return m.Waf
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetBotProtection() *types.BoolValue {
	if m != nil {
		return m.BotProtection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetApiProtection() *types.BoolValue {
	if m != nil {
		return m.ApiProtection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetClientSideDefense() *types.BoolValue {
	if m != nil {
		return m.ClientSideDefense
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetNamespaceServicePolicy() *types.BoolValue {
	if m != nil {
		return m.NamespaceServicePolicy
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetServicePolicy() *types.BoolValue {
	if m != nil {
		return m.ServicePolicy
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetIpReputation() *types.BoolValue {
	if m != nil {
		return m.IpReputation
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetMaliciousUserDetection() *types.BoolValue {
	if m != nil {
		return m.MaliciousUserDetection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetPrivateAdvertisement() *types.BoolValue {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetPublicAdvertisment() *types.BoolValue {
	if m != nil {
		return m.PublicAdvertisment
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetWafExclusion() *types.BoolValue {
	if m != nil {
		return m.WafExclusion
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetDdosProtection() *types.BoolValue {
	if m != nil {
		return m.DdosProtection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetDdosAutoMitigation() *types.BoolValue {
	if m != nil {
		return m.DdosAutoMitigation
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetDdosMitigation() *types.BoolValue {
	if m != nil {
		return m.DdosMitigation
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetSlowDdosMitigation() *types.BoolValue {
	if m != nil {
		return m.SlowDdosMitigation
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetMaliciousUserMitigation() *types.BoolValue {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetTrustedClient() *types.BoolValue {
	if m != nil {
		return m.TrustedClient
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetTrustedClientIpHeaders() *types.BoolValue {
	if m != nil {
		return m.TrustedClientIpHeaders
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetApiSchemaValidation() *types.BoolValue {
	if m != nil {
		return m.ApiSchemaValidation
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetApiDefinition() *types.BoolValue {
	if m != nil {
		return m.ApiDefinition
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetDataGuard() *types.BoolValue {
	if m != nil {
		return m.DataGuard
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetCsrfProtection() *types.BoolValue {
	if m != nil {
		return m.CsrfProtection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetGraphQlInspection() *types.BoolValue {
	if m != nil {
		return m.GraphQlInspection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetCookieProtection() *types.BoolValue {
	if m != nil {
		return m.CookieProtection
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetClientBlocking() *types.BoolValue {
	if m != nil {
		return m.ClientBlocking
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetCorsPolicy() *types.BoolValue {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetRoutes() *types.BoolValue {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetOriginServerSubset() *types.BoolValue {
	if m != nil {
		return m.OriginServerSubset
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetDefaultLoadbalancer() *types.BoolValue {
	if m != nil {
		return m.DefaultLoadbalancer
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetMutualTls() *types.BoolValue {
	if m != nil {
		return m.MutualTls
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetApiDiscovery() *types.BoolValue {
	if m != nil {
		return m.ApiDiscovery
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryFilterType) GetMalwareProtection() *types.BoolValue {
	if m != nil {
		return m.MalwareProtection
	}
	return nil
}

// HTTPLoadbalancerResultType
//
// x-displayName: "HTTP Loadbalancer Inventory Results"
// HTTP Loadbalancer Inventory Results
type HTTPLoadbalancerResultType struct {
	// HTTP Status
	//
	// x-displayName: "HTTP Only Enabled or Disabled"
	// HTTP only loadbalancers
	HttpEnabled *schema.Empty `protobuf:"bytes,1,opt,name=http_enabled,json=httpEnabled,proto3" json:"http_enabled,omitempty"`
	// WAF Status
	//
	// x-displayName: "WAF Enabled or Disabled"
	// WAF configured
	WafEnabled *schema.Empty `protobuf:"bytes,2,opt,name=waf_enabled,json=wafEnabled,proto3" json:"waf_enabled,omitempty"`
	// Bot Protection Status
	//
	// x-displayName: "Bot Protection Enabled or Disabled"
	// Bot Protection configured
	BotProtectionEnabled *schema.Empty `protobuf:"bytes,3,opt,name=bot_protection_enabled,json=botProtectionEnabled,proto3" json:"bot_protection_enabled,omitempty"`
	// API Protection Status
	//
	// x-displayName: "API Protection Enabled or Disabled"
	// API Protection configured
	ApiProtectionEnabled *schema.Empty `protobuf:"bytes,4,opt,name=api_protection_enabled,json=apiProtectionEnabled,proto3" json:"api_protection_enabled,omitempty"`
	// Client Side Defense Status
	//
	// x-displayName: "Client Side Defense Enabled or Disabled"
	// Client Side Defense configured
	ClientSideDefenseEnabled *schema.Empty `protobuf:"bytes,6,opt,name=client_side_defense_enabled,json=clientSideDefenseEnabled,proto3" json:"client_side_defense_enabled,omitempty"`
	// Namespace Service Policy Status
	//
	// x-displayName: "Namespace Service Policy Enabled or Disabled"
	// Namespace Service Policy configured
	NamespaceServicePolicyEnabled *schema.Empty `protobuf:"bytes,7,opt,name=namespace_service_policy_enabled,json=namespaceServicePolicyEnabled,proto3" json:"namespace_service_policy_enabled,omitempty"`
	// Service Policy Status
	//
	// x-displayName: "Service Policy Enabled or Disabled"
	// Service Policy configured
	ServicePolicyEnabled *schema.Empty `protobuf:"bytes,8,opt,name=service_policy_enabled,json=servicePolicyEnabled,proto3" json:"service_policy_enabled,omitempty"`
	// IP Reputation Status
	//
	// x-displayName: "IP Reputation Enabled or Disabled"
	// IP Reputation configured
	IpReputationEnabled *schema.Empty `protobuf:"bytes,9,opt,name=ip_reputation_enabled,json=ipReputationEnabled,proto3" json:"ip_reputation_enabled,omitempty"`
	// Malicious User Detection Status
	//
	// x-displayName: "Malicious User Detection Enabled or Disabled"
	// HTTP loadbalancer Malicious User Detection configured
	MaliciousUserDetectionEnabled *schema.Empty `protobuf:"bytes,10,opt,name=malicious_user_detection_enabled,json=maliciousUserDetectionEnabled,proto3" json:"malicious_user_detection_enabled,omitempty"`
	// Private Advertisement Status
	//
	// x-displayName: "Private Advertisement Enabled or Disabled"
	// advertised privately configured
	PrivateAdvertisementEnabled *schema.Empty `protobuf:"bytes,11,opt,name=private_advertisement_enabled,json=privateAdvertisementEnabled,proto3" json:"private_advertisement_enabled,omitempty"`
	// Public Advertisement Status
	//
	// x-displayName: "Public Advertisement Enabled or Disabled"
	// advertised publicly configured
	PublicAdvertismentEnabled *schema.Empty `protobuf:"bytes,12,opt,name=public_advertisment_enabled,json=publicAdvertismentEnabled,proto3" json:"public_advertisment_enabled,omitempty"`
	// HTTP LB Name
	//
	// x-displayName: "HTTP LB Name"
	// Name of HTTP LB
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Rate Limiting Status
	//
	// x-displayName: "Rate Limiting Enabled or Disabled"
	// Rate Limiting configured
	RateLimit *schema.Empty `protobuf:"bytes,14,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// HTTP LB Namespace
	//
	// x-displayName: "HTTP LB Namespace"
	// Namespace of HTTP LB
	Namespace string `protobuf:"bytes,15,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// WAF Exclusion Status
	//
	// x-displayName: "WAF Exclusion Enabled or Disabled"
	// WAF Exclusion configured
	WafExclusionEnabled *schema.Empty `protobuf:"bytes,17,opt,name=waf_exclusion_enabled,json=wafExclusionEnabled,proto3" json:"waf_exclusion_enabled,omitempty"`
	// L7 DDoS Detection Status
	//
	// x-displayName: "L7 DDoS Detection Enabled or Disabled"
	// L7 DDoS detection configured
	DdosProtectionEnabled *schema.Empty `protobuf:"bytes,5,opt,name=ddos_protection_enabled,json=ddosProtectionEnabled,proto3" json:"ddos_protection_enabled,omitempty"`
	// L7 DDoS Auto Mitigation Status
	//
	// x-displayName: "L7 DDoS Auto Mitigation Enabled or Disabled"
	// L7 DDoS Auto Mitigation configured
	DdosAutoMitigationEnabled *schema.Empty `protobuf:"bytes,18,opt,name=ddos_auto_mitigation_enabled,json=ddosAutoMitigationEnabled,proto3" json:"ddos_auto_mitigation_enabled,omitempty"`
	// DDoS Mitigation Rules Status
	//
	// x-displayName: "DDoS Mitigation Rules Configured"
	// DDoS Mitigation Rules configured
	DdosMitigationEnabled *schema.Empty `protobuf:"bytes,19,opt,name=ddos_mitigation_enabled,json=ddosMitigationEnabled,proto3" json:"ddos_mitigation_enabled,omitempty"`
	// Slow DDoS Mitigation Status
	//
	// x-displayName: "Slow DDoS Mitigation Enabled or Disabled"
	// Slow DDoS Mitigation configured
	SlowDdosMitigationEnabled *schema.Empty `protobuf:"bytes,20,opt,name=slow_ddos_mitigation_enabled,json=slowDdosMitigationEnabled,proto3" json:"slow_ddos_mitigation_enabled,omitempty"`
	// Malicious User Mitigation Status
	//
	// x-displayName: "Malicious User Mitigation Enabled or Disabled"
	// Malicious User Mitigation configured
	MaliciousUserMitigationEnabled *schema.Empty `protobuf:"bytes,21,opt,name=malicious_user_mitigation_enabled,json=maliciousUserMitigationEnabled,proto3" json:"malicious_user_mitigation_enabled,omitempty"`
	// Trusted Client Status
	//
	// x-displayName: "Trusted Client Enabled or Disabled"
	// Trusted Client configured
	TrustedClientEnabled *schema.Empty `protobuf:"bytes,22,opt,name=trusted_client_enabled,json=trustedClientEnabled,proto3" json:"trusted_client_enabled,omitempty"`
	// Trusted Client IP Headers Status
	//
	// x-displayName: "Trusted Client IP Headers Enabled or Disabled"
	// Trusted Client IP Headers configured
	TrustedClientIpHeadersEnabled *schema.Empty `protobuf:"bytes,23,opt,name=trusted_client_ip_headers_enabled,json=trustedClientIpHeadersEnabled,proto3" json:"trusted_client_ip_headers_enabled,omitempty"`
	// API Schema Validation Status
	//
	// x-displayName: "API Schema Validation Enabled or Disabled"
	// API Schema Validation configured
	ApiSchemaValidationEnabled *schema.Empty `protobuf:"bytes,24,opt,name=api_schema_validation_enabled,json=apiSchemaValidationEnabled,proto3" json:"api_schema_validation_enabled,omitempty"`
	// API Definition Status
	//
	// x-displayName: "API Definition Enabled or Disabled"
	// API Definition configured
	ApiDefinitionEnabled *schema.Empty `protobuf:"bytes,25,opt,name=api_definition_enabled,json=apiDefinitionEnabled,proto3" json:"api_definition_enabled,omitempty"`
	// Data Guard Status
	//
	// x-displayName: "Data Guard Enabled or Disabled"
	// Data Guard configured
	DataGuardEnabled *schema.Empty `protobuf:"bytes,26,opt,name=data_guard_enabled,json=dataGuardEnabled,proto3" json:"data_guard_enabled,omitempty"`
	// CSRF Protection Status
	//
	// x-displayName: "CSRF Protection Enabled or Disabled"
	// CSRF Protection configured
	CsrfProtectionEnabled *schema.Empty `protobuf:"bytes,27,opt,name=csrf_protection_enabled,json=csrfProtectionEnabled,proto3" json:"csrf_protection_enabled,omitempty"`
	// GraphQL Inspection Status
	//
	// x-displayName: "GraphQL Inspection Enabled or Disabled"
	// GraphQL Inspection configured
	GraphQlInspectionEnabled *schema.Empty `protobuf:"bytes,28,opt,name=graph_ql_inspection_enabled,json=graphQlInspectionEnabled,proto3" json:"graph_ql_inspection_enabled,omitempty"`
	// Cookie Protection Status
	//
	// x-displayName: "Cookie Protection Enabled or Disabled"
	// Cookie Protection configured
	CookieProtectionEnabled *schema.Empty `protobuf:"bytes,29,opt,name=cookie_protection_enabled,json=cookieProtectionEnabled,proto3" json:"cookie_protection_enabled,omitempty"`
	// Client Blocking Status
	//
	// x-displayName: "Client Blocking Enabled or Disabled"
	// Client Blocking configured
	ClientBlockingEnabled *schema.Empty `protobuf:"bytes,30,opt,name=client_blocking_enabled,json=clientBlockingEnabled,proto3" json:"client_blocking_enabled,omitempty"`
	// CORS Policy Status
	//
	// x-displayName: "CORS Policy Enabled or Disabled"
	// CORS Policy configured
	CorsPolicyEnabled *schema.Empty `protobuf:"bytes,31,opt,name=cors_policy_enabled,json=corsPolicyEnabled,proto3" json:"cors_policy_enabled,omitempty"`
	// Routes Status
	//
	// x-displayName: "Routes Enabled or Disabled"
	// Routes configured
	RoutesEnabled *schema.Empty `protobuf:"bytes,32,opt,name=routes_enabled,json=routesEnabled,proto3" json:"routes_enabled,omitempty"`
	// Origin Server Subset Status
	//
	// x-displayName: "Origin Server Subset Enabled or Disabled"
	// Origin Server Subset configured
	OriginServerSubsetEnabled *schema.Empty `protobuf:"bytes,33,opt,name=origin_server_subset_enabled,json=originServerSubsetEnabled,proto3" json:"origin_server_subset_enabled,omitempty"`
	// Loadbalancer Algorithm
	//
	// x-displayName: "Loadbalancer Algorithm"
	// Loadbalancer Algorithm configured
	LoadbalancerAlgorithm string `protobuf:"bytes,34,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3" json:"loadbalancer_algorithm,omitempty"`
	// DNS Info
	//
	// x-displayName: "DNS Info"
	// DNS Info
	DnsInfo string `protobuf:"bytes,35,opt,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// VIP Type
	//
	// x-displayName: "VIP Type"
	// VIP Type
	VipType string `protobuf:"bytes,36,opt,name=vip_type,json=vipType,proto3" json:"vip_type,omitempty"`
	// Domains
	//
	// x-displayName: "Domains"
	// Domains
	Domains []string `protobuf:"bytes,37,rep,name=domains,proto3" json:"domains,omitempty"`
	// HTTP Listen Port Choice
	//
	// x-displayName: "HTTP Listen Port Choice"
	// HTTP Listen Port Choice
	HttpListenPortChoice string `protobuf:"bytes,38,opt,name=http_listen_port_choice,json=httpListenPortChoice,proto3" json:"http_listen_port_choice,omitempty"`
	// Default Loadbalancer Status
	//
	// x-displayName: "Default Loadbalancer Enabled or Disabled"
	// Default Loadbalancer configured
	DefaultLoadbalancerEnabled *schema.Empty `protobuf:"bytes,39,opt,name=default_loadbalancer_enabled,json=defaultLoadbalancerEnabled,proto3" json:"default_loadbalancer_enabled,omitempty"`
	// mTLS Status
	//
	// x-displayName: "mTLS Enabled or Disabled"
	// mTLS configured
	MutualTlsEnabled *schema.Empty `protobuf:"bytes,40,opt,name=mutual_tls_enabled,json=mutualTlsEnabled,proto3" json:"mutual_tls_enabled,omitempty"`
	// TLS Security Level
	//
	// x-displayName: "TLS Security Level"
	// TLS Security Level
	TlsSecurityLevel string `protobuf:"bytes,41,opt,name=tls_security_level,json=tlsSecurityLevel,proto3" json:"tls_security_level,omitempty"`
	// Idle Timeout
	//
	// x-displayName: "Idle Timeout"
	// Idle Timeout
	IdleTimeout uint32 `protobuf:"varint,42,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Connection Idle Timeout
	//
	// x-displayName: "Connection Idle Timeout"
	// Connection Idle Timeout
	ConnectionIdleTimeout uint32 `protobuf:"varint,43,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	// Certification Status
	//
	// x-displayName: "Certification Status"
	// Certification Status
	CertificationStatus string `protobuf:"bytes,44,opt,name=certification_status,json=certificationStatus,proto3" json:"certification_status,omitempty"`
	// Certification Expiration Date
	//
	// x-displayName: "Certification Expiration Date"
	// Certification Expiration Date
	CertificationExpirationDate *types.Timestamp `protobuf:"bytes,45,opt,name=certification_expiration_date,json=certificationExpirationDate,proto3" json:"certification_expiration_date,omitempty"`
	// WAF Policy Reference
	//
	// x-displayName: "WAF Policy Reference"
	// Reference to the WAF policy (if applicable)
	WafPolicyRef []*views.ObjectRefType `protobuf:"bytes,46,rep,name=waf_policy_ref,json=wafPolicyRef,proto3" json:"waf_policy_ref,omitempty"`
	// API Discovery Status
	//
	// x-displayName: "API Discovery Enabled or Disabled"
	// API Discovery configured
	ApiDiscoveryEnabled *schema.Empty `protobuf:"bytes,47,opt,name=api_discovery_enabled,json=apiDiscoveryEnabled,proto3" json:"api_discovery_enabled,omitempty"`
	// WAF Enforcement Mode
	//
	// x-displayName: "WAF Enforcement Mode"
	// WAF Enforcement Mode
	WafEnforcementMode string `protobuf:"bytes,48,opt,name=waf_enforcement_mode,json=wafEnforcementMode,proto3" json:"waf_enforcement_mode,omitempty"`
	// Malware Protection Status
	//
	// x-displayName: "Malware Protection Enabled or Disabled"
	// Malware Protection configured
	MalwareProtectionEnabled *schema.Empty `protobuf:"bytes,49,opt,name=malware_protection_enabled,json=malwareProtectionEnabled,proto3" json:"malware_protection_enabled,omitempty"`
}

func (m *HTTPLoadbalancerResultType) Reset()      { *m = HTTPLoadbalancerResultType{} }
func (*HTTPLoadbalancerResultType) ProtoMessage() {}
func (*HTTPLoadbalancerResultType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{30}
}
func (m *HTTPLoadbalancerResultType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLoadbalancerResultType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPLoadbalancerResultType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPLoadbalancerResultType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLoadbalancerResultType.Merge(m, src)
}
func (m *HTTPLoadbalancerResultType) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLoadbalancerResultType) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLoadbalancerResultType.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLoadbalancerResultType proto.InternalMessageInfo

func (m *HTTPLoadbalancerResultType) GetHttpEnabled() *schema.Empty {
	if m != nil {
		return m.HttpEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetWafEnabled() *schema.Empty {
	if m != nil {
		return m.WafEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetBotProtectionEnabled() *schema.Empty {
	if m != nil {
		return m.BotProtectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetApiProtectionEnabled() *schema.Empty {
	if m != nil {
		return m.ApiProtectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetClientSideDefenseEnabled() *schema.Empty {
	if m != nil {
		return m.ClientSideDefenseEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetNamespaceServicePolicyEnabled() *schema.Empty {
	if m != nil {
		return m.NamespaceServicePolicyEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetServicePolicyEnabled() *schema.Empty {
	if m != nil {
		return m.ServicePolicyEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetIpReputationEnabled() *schema.Empty {
	if m != nil {
		return m.IpReputationEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetMaliciousUserDetectionEnabled() *schema.Empty {
	if m != nil {
		return m.MaliciousUserDetectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetPrivateAdvertisementEnabled() *schema.Empty {
	if m != nil {
		return m.PrivateAdvertisementEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetPublicAdvertismentEnabled() *schema.Empty {
	if m != nil {
		return m.PublicAdvertismentEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetRateLimit() *schema.Empty {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetWafExclusionEnabled() *schema.Empty {
	if m != nil {
		return m.WafExclusionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetDdosProtectionEnabled() *schema.Empty {
	if m != nil {
		return m.DdosProtectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetDdosAutoMitigationEnabled() *schema.Empty {
	if m != nil {
		return m.DdosAutoMitigationEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetDdosMitigationEnabled() *schema.Empty {
	if m != nil {
		return m.DdosMitigationEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetSlowDdosMitigationEnabled() *schema.Empty {
	if m != nil {
		return m.SlowDdosMitigationEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetMaliciousUserMitigationEnabled() *schema.Empty {
	if m != nil {
		return m.MaliciousUserMitigationEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetTrustedClientEnabled() *schema.Empty {
	if m != nil {
		return m.TrustedClientEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetTrustedClientIpHeadersEnabled() *schema.Empty {
	if m != nil {
		return m.TrustedClientIpHeadersEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetApiSchemaValidationEnabled() *schema.Empty {
	if m != nil {
		return m.ApiSchemaValidationEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetApiDefinitionEnabled() *schema.Empty {
	if m != nil {
		return m.ApiDefinitionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetDataGuardEnabled() *schema.Empty {
	if m != nil {
		return m.DataGuardEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetCsrfProtectionEnabled() *schema.Empty {
	if m != nil {
		return m.CsrfProtectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetGraphQlInspectionEnabled() *schema.Empty {
	if m != nil {
		return m.GraphQlInspectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetCookieProtectionEnabled() *schema.Empty {
	if m != nil {
		return m.CookieProtectionEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetClientBlockingEnabled() *schema.Empty {
	if m != nil {
		return m.ClientBlockingEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetCorsPolicyEnabled() *schema.Empty {
	if m != nil {
		return m.CorsPolicyEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetRoutesEnabled() *schema.Empty {
	if m != nil {
		return m.RoutesEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetOriginServerSubsetEnabled() *schema.Empty {
	if m != nil {
		return m.OriginServerSubsetEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetLoadbalancerAlgorithm() string {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetDnsInfo() string {
	if m != nil {
		return m.DnsInfo
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetVipType() string {
	if m != nil {
		return m.VipType
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetHttpListenPortChoice() string {
	if m != nil {
		return m.HttpListenPortChoice
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetDefaultLoadbalancerEnabled() *schema.Empty {
	if m != nil {
		return m.DefaultLoadbalancerEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetMutualTlsEnabled() *schema.Empty {
	if m != nil {
		return m.MutualTlsEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetTlsSecurityLevel() string {
	if m != nil {
		return m.TlsSecurityLevel
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *HTTPLoadbalancerResultType) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *HTTPLoadbalancerResultType) GetCertificationStatus() string {
	if m != nil {
		return m.CertificationStatus
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetCertificationExpirationDate() *types.Timestamp {
	if m != nil {
		return m.CertificationExpirationDate
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetWafPolicyRef() []*views.ObjectRefType {
	if m != nil {
		return m.WafPolicyRef
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetApiDiscoveryEnabled() *schema.Empty {
	if m != nil {
		return m.ApiDiscoveryEnabled
	}
	return nil
}

func (m *HTTPLoadbalancerResultType) GetWafEnforcementMode() string {
	if m != nil {
		return m.WafEnforcementMode
	}
	return ""
}

func (m *HTTPLoadbalancerResultType) GetMalwareProtectionEnabled() *schema.Empty {
	if m != nil {
		return m.MalwareProtectionEnabled
	}
	return nil
}

// HTTPLoadbalancerInventoryType
//
// x-displayName: "Inventory of HTTP Loadbalancers"
// HTTP Loadbalancer inventory
type HTTPLoadbalancerInventoryType struct {
	// HTTP Only
	//
	// x-displayName: "HTTP Only"
	// Number of HTTP Only loadbalancers
	HttpOnly uint32 `protobuf:"varint,1,opt,name=http_only,json=httpOnly,proto3" json:"http_only,omitempty"`
	// WAF
	//
	// x-displayName: "WAF"
	// Number of HTTP loadbalancers with WAF configured
	Waf uint32 `protobuf:"varint,2,opt,name=waf,proto3" json:"waf,omitempty"`
	// Bot Protection
	//
	// x-displayName: "Bot Protection"
	// Number of HTTP loadbalancers with Bot Protection configured
	BotProtection uint32 `protobuf:"varint,3,opt,name=bot_protection,json=botProtection,proto3" json:"bot_protection,omitempty"`
	// API Protection
	//
	// x-displayName: "API Protection"
	// Number of HTTP loadbalancers with API Protection configured
	ApiProtection uint32 `protobuf:"varint,4,opt,name=api_protection,json=apiProtection,proto3" json:"api_protection,omitempty"`
	// L7 DDoS Detection
	//
	// x-displayName: "L7 DDoS Detection"
	// Number of HTTP loadbalancers with L7 DDoS Detection enabled
	DdosProtection uint32 `protobuf:"varint,5,opt,name=ddos_protection,json=ddosProtection,proto3" json:"ddos_protection,omitempty"`
	// Client Side Defense
	//
	// x-displayName: "Client Side Defense"
	// Number of HTTP loadbalancers with Client Side Defense configured
	ClientSideDefense uint32 `protobuf:"varint,6,opt,name=client_side_defense,json=clientSideDefense,proto3" json:"client_side_defense,omitempty"`
	// Namespace Service Policy
	//
	// x-displayName: "Namespace Service Policy"
	// Number of HTTP loadbalancers with Namespace Service Policy configured
	NamespaceServicePolicy uint32 `protobuf:"varint,7,opt,name=namespace_service_policy,json=namespaceServicePolicy,proto3" json:"namespace_service_policy,omitempty"`
	// Service Policy
	//
	// x-displayName: "Service Policy"
	// Number of HTTP loadbalancers with Service Policy configured
	ServicePolicy uint32 `protobuf:"varint,8,opt,name=service_policy,json=servicePolicy,proto3" json:"service_policy,omitempty"`
	// IP Reputation
	//
	// x-displayName: "IP Reputation"
	// Number of HTTP loadbalancers with IP Reputation configured
	IpReputation uint32 `protobuf:"varint,9,opt,name=ip_reputation,json=ipReputation,proto3" json:"ip_reputation,omitempty"`
	// Malicious User Detection
	//
	// x-displayName: "Malicious User Detection"
	// Number of HTTP loadbalancers with Malicious User Detection configured
	MaliciousUserDetection uint32 `protobuf:"varint,10,opt,name=malicious_user_detection,json=maliciousUserDetection,proto3" json:"malicious_user_detection,omitempty"`
	// Private Advertisement
	//
	// x-displayName: "Private Advertisement"
	// Number of HTTP loadbalancers advertised privately
	PrivateAdvertisement uint32 `protobuf:"varint,11,opt,name=private_advertisement,json=privateAdvertisement,proto3" json:"private_advertisement,omitempty"`
	// Public Advertisement
	//
	// x-displayName: "Public Advertisement"
	// Number of HTTP loadbalancers advertised publicly
	PublicAdvertisment uint32 `protobuf:"varint,12,opt,name=public_advertisment,json=publicAdvertisment,proto3" json:"public_advertisment,omitempty"`
	// HTTP Loadbalancers
	//
	// x-displayName: "List of HTTP Loadbalancers"
	// List of HTTP loadbalancers
	HttplbResults []*HTTPLoadbalancerResultType `protobuf:"bytes,14,rep,name=httplb_results,json=httplbResults,proto3" json:"httplb_results,omitempty"`
	// API Discovery
	//
	// x-displayName: "API Discovery"
	// Number of HTTP loadbalancers with API Discovery enabled
	ApiDiscovery uint32 `protobuf:"varint,15,opt,name=api_discovery,json=apiDiscovery,proto3" json:"api_discovery,omitempty"`
	// CDN Loadbalancers
	//
	// x-displayName: "List of CDN Loadbalancers"
	// List of CDN loadbalancers
	CdnlbResults []*HTTPLoadbalancerResultType `protobuf:"bytes,16,rep,name=cdnlb_results,json=cdnlbResults,proto3" json:"cdnlb_results,omitempty"`
	// Malware Protection
	//
	// x-displayName: "Malware Protection"
	// Number of HTTP loadbalancers with Malware Protection configured
	MalwareProtection uint32 `protobuf:"varint,17,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
}

func (m *HTTPLoadbalancerInventoryType) Reset()      { *m = HTTPLoadbalancerInventoryType{} }
func (*HTTPLoadbalancerInventoryType) ProtoMessage() {}
func (*HTTPLoadbalancerInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{31}
}
func (m *HTTPLoadbalancerInventoryType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLoadbalancerInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPLoadbalancerInventoryType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPLoadbalancerInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLoadbalancerInventoryType.Merge(m, src)
}
func (m *HTTPLoadbalancerInventoryType) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLoadbalancerInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLoadbalancerInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLoadbalancerInventoryType proto.InternalMessageInfo

func (m *HTTPLoadbalancerInventoryType) GetHttpOnly() uint32 {
	if m != nil {
		return m.HttpOnly
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetWaf() uint32 {
	if m != nil {
		return m.Waf
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetBotProtection() uint32 {
	if m != nil {
		return m.BotProtection
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetApiProtection() uint32 {
	if m != nil {
		return m.ApiProtection
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetDdosProtection() uint32 {
	if m != nil {
		return m.DdosProtection
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetClientSideDefense() uint32 {
	if m != nil {
		return m.ClientSideDefense
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetNamespaceServicePolicy() uint32 {
	if m != nil {
		return m.NamespaceServicePolicy
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetServicePolicy() uint32 {
	if m != nil {
		return m.ServicePolicy
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetIpReputation() uint32 {
	if m != nil {
		return m.IpReputation
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetMaliciousUserDetection() uint32 {
	if m != nil {
		return m.MaliciousUserDetection
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetPrivateAdvertisement() uint32 {
	if m != nil {
		return m.PrivateAdvertisement
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetPublicAdvertisment() uint32 {
	if m != nil {
		return m.PublicAdvertisment
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetHttplbResults() []*HTTPLoadbalancerResultType {
	if m != nil {
		return m.HttplbResults
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryType) GetApiDiscovery() uint32 {
	if m != nil {
		return m.ApiDiscovery
	}
	return 0
}

func (m *HTTPLoadbalancerInventoryType) GetCdnlbResults() []*HTTPLoadbalancerResultType {
	if m != nil {
		return m.CdnlbResults
	}
	return nil
}

func (m *HTTPLoadbalancerInventoryType) GetMalwareProtection() uint32 {
	if m != nil {
		return m.MalwareProtection
	}
	return 0
}

// BIGIPVirtualServerInventoryFilterType
//
// x-displayName: "Filter for BIG-IP Virtual Server Inventory"
// BIGIP Virtual Server Inventory Filter
type BIGIPVirtualServerInventoryFilterType struct {
	// API Discovery
	//
	// x-displayName: "API Discovery"
	// Filter results with BIGIP Virtual Server with API Discovery
	ApiDiscovery *types.BoolValue `protobuf:"bytes,1,opt,name=api_discovery,json=apiDiscovery,proto3" json:"api_discovery,omitempty"`
	// WAF
	//
	// x-displayName: "WAF"
	// Filter results with BIGIP Virtual Server with WAF configured
	WafConfigured *types.BoolValue `protobuf:"bytes,2,opt,name=waf_configured,json=wafConfigured,proto3" json:"waf_configured,omitempty"`
}

func (m *BIGIPVirtualServerInventoryFilterType) Reset()      { *m = BIGIPVirtualServerInventoryFilterType{} }
func (*BIGIPVirtualServerInventoryFilterType) ProtoMessage() {}
func (*BIGIPVirtualServerInventoryFilterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{32}
}
func (m *BIGIPVirtualServerInventoryFilterType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BIGIPVirtualServerInventoryFilterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BIGIPVirtualServerInventoryFilterType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BIGIPVirtualServerInventoryFilterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BIGIPVirtualServerInventoryFilterType.Merge(m, src)
}
func (m *BIGIPVirtualServerInventoryFilterType) XXX_Size() int {
	return m.Size()
}
func (m *BIGIPVirtualServerInventoryFilterType) XXX_DiscardUnknown() {
	xxx_messageInfo_BIGIPVirtualServerInventoryFilterType.DiscardUnknown(m)
}

var xxx_messageInfo_BIGIPVirtualServerInventoryFilterType proto.InternalMessageInfo

func (m *BIGIPVirtualServerInventoryFilterType) GetApiDiscovery() *types.BoolValue {
	if m != nil {
		return m.ApiDiscovery
	}
	return nil
}

func (m *BIGIPVirtualServerInventoryFilterType) GetWafConfigured() *types.BoolValue {
	if m != nil {
		return m.WafConfigured
	}
	return nil
}

// BIGIPVirtualServerResultType
//
// x-displayName: "BIG-IP Virtual Server Inventory Results"
// BIGIP Virtual Server Inventory Results
type BIGIPVirtualServerResultType struct {
	// BIGIP Virtual Server Name
	//
	// x-displayName: "BIG-IP Virtual Server Name"
	// Name of BIGIP Virtual Server
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// API Discovery Status
	//
	// x-displayName: "API Discovery Enabled or Disabled"
	// API Discovery configured
	ApiDiscoveryEnabled *schema.Empty `protobuf:"bytes,2,opt,name=api_discovery_enabled,json=apiDiscoveryEnabled,proto3" json:"api_discovery_enabled,omitempty"`
	// WAF Policy Name
	//
	// x-displayName: "WAF Policy Name"
	// WAF Policy Name
	WafPolicyName string `protobuf:"bytes,3,opt,name=waf_policy_name,json=wafPolicyName,proto3" json:"waf_policy_name,omitempty"`
	// WAF Enforcement Mode
	//
	// x-displayName: "WAF Enforcement Mode"
	// WAF Enforcement Mode
	WafEnforcementMode string `protobuf:"bytes,4,opt,name=waf_enforcement_mode,json=wafEnforcementMode,proto3" json:"waf_enforcement_mode,omitempty"`
	// BIGIP Host Name
	//
	// x-displayName: "BIG-IP Host Name"
	// Name of BIGIP Host
	HostName string `protobuf:"bytes,5,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// BIGIP Version
	//
	// x-displayName: "BIG-IP Version"
	// Version of BIGIP
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// BIGIP VS Description
	//
	// x-displayName: "BIG-IP VS Description"
	// VS Description of BIGIP
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// BIGIP VS Display Name
	//
	// x-displayName: "BIG-IP VS Server Name"
	// Display Name of BIGIP VS
	ServerName string `protobuf:"bytes,8,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (m *BIGIPVirtualServerResultType) Reset()      { *m = BIGIPVirtualServerResultType{} }
func (*BIGIPVirtualServerResultType) ProtoMessage() {}
func (*BIGIPVirtualServerResultType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{33}
}
func (m *BIGIPVirtualServerResultType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BIGIPVirtualServerResultType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BIGIPVirtualServerResultType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BIGIPVirtualServerResultType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BIGIPVirtualServerResultType.Merge(m, src)
}
func (m *BIGIPVirtualServerResultType) XXX_Size() int {
	return m.Size()
}
func (m *BIGIPVirtualServerResultType) XXX_DiscardUnknown() {
	xxx_messageInfo_BIGIPVirtualServerResultType.DiscardUnknown(m)
}

var xxx_messageInfo_BIGIPVirtualServerResultType proto.InternalMessageInfo

func (m *BIGIPVirtualServerResultType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BIGIPVirtualServerResultType) GetApiDiscoveryEnabled() *schema.Empty {
	if m != nil {
		return m.ApiDiscoveryEnabled
	}
	return nil
}

func (m *BIGIPVirtualServerResultType) GetWafPolicyName() string {
	if m != nil {
		return m.WafPolicyName
	}
	return ""
}

func (m *BIGIPVirtualServerResultType) GetWafEnforcementMode() string {
	if m != nil {
		return m.WafEnforcementMode
	}
	return ""
}

func (m *BIGIPVirtualServerResultType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *BIGIPVirtualServerResultType) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BIGIPVirtualServerResultType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BIGIPVirtualServerResultType) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

// BIGIPVirtualServerInventoryType
//
// x-displayName: "Inventory of BIG-IP Virtual Server"
// BIGIP Virtual Server inventory
type BIGIPVirtualServerInventoryType struct {
	// WAF
	//
	// x-displayName: "WAF"
	// Number of BIGIP Virtual Servers with WAF configured
	WafConfigured uint32 `protobuf:"varint,1,opt,name=waf_configured,json=wafConfigured,proto3" json:"waf_configured,omitempty"`
	// BIGIP Virtual Server
	//
	// x-displayName: "List of BIG-IP Virtual Server"
	// List of BIGIP Virtual Server
	BigiplbResults []*BIGIPVirtualServerResultType `protobuf:"bytes,3,rep,name=bigiplb_results,json=bigiplbResults,proto3" json:"bigiplb_results,omitempty"`
	// API Discovery
	//
	// x-displayName: "API Discovery"
	// Number of BIGIP Virtual Servers with API Discovery enabled
	ApiDiscovery uint32 `protobuf:"varint,4,opt,name=api_discovery,json=apiDiscovery,proto3" json:"api_discovery,omitempty"`
}

func (m *BIGIPVirtualServerInventoryType) Reset()      { *m = BIGIPVirtualServerInventoryType{} }
func (*BIGIPVirtualServerInventoryType) ProtoMessage() {}
func (*BIGIPVirtualServerInventoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{34}
}
func (m *BIGIPVirtualServerInventoryType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BIGIPVirtualServerInventoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BIGIPVirtualServerInventoryType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BIGIPVirtualServerInventoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BIGIPVirtualServerInventoryType.Merge(m, src)
}
func (m *BIGIPVirtualServerInventoryType) XXX_Size() int {
	return m.Size()
}
func (m *BIGIPVirtualServerInventoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_BIGIPVirtualServerInventoryType.DiscardUnknown(m)
}

var xxx_messageInfo_BIGIPVirtualServerInventoryType proto.InternalMessageInfo

func (m *BIGIPVirtualServerInventoryType) GetWafConfigured() uint32 {
	if m != nil {
		return m.WafConfigured
	}
	return 0
}

func (m *BIGIPVirtualServerInventoryType) GetBigiplbResults() []*BIGIPVirtualServerResultType {
	if m != nil {
		return m.BigiplbResults
	}
	return nil
}

func (m *BIGIPVirtualServerInventoryType) GetApiDiscovery() uint32 {
	if m != nil {
		return m.ApiDiscovery
	}
	return 0
}

// ApplicationInventoryRequest
//
// x-displayName: "Application related objects inventory request"
// Request for inventory of application related objects from all namespaces
type ApplicationInventoryRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The name of the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// HTTPLoadbalancerInventoryFilterType
	//
	// x-displayName: "HTTP LoadBalancer Inventory Filter Type"
	// Filters for HTTP LoadBalancer
	HttpLoadBalancerFilter *HTTPLoadbalancerInventoryFilterType `protobuf:"bytes,2,opt,name=http_load_balancer_filter,json=httpLoadBalancerFilter,proto3" json:"http_load_balancer_filter,omitempty"`
	// TCPLoadbalancerInventoryFilterType
	//
	// x-displayName: "TCP LoadBalancer Inventory Filter Type"
	// Filters for TCP LoadBalancer
	TcpLoadBalancerFilter *TCPLoadbalancerInventoryFilterType `protobuf:"bytes,3,opt,name=tcp_load_balancer_filter,json=tcpLoadBalancerFilter,proto3" json:"tcp_load_balancer_filter,omitempty"`
	// CDN Loadbalancer Inventory Filter Type
	//
	// x-displayName: "CDN LoadBalancer Inventory Filter Type"
	// Filters for CDN LoadBalancer
	CdnLoadBalancerFilter *HTTPLoadbalancerInventoryFilterType `protobuf:"bytes,4,opt,name=cdn_load_balancer_filter,json=cdnLoadBalancerFilter,proto3" json:"cdn_load_balancer_filter,omitempty"`
	// BIGIP Virtual Server Inventory Filter Type
	//
	// x-displayName: "BIG-IP Virtual Server Inventory Filter Type"
	// Filters for BIGIP Virtual Server
	BigipVirtualServerFilter *BIGIPVirtualServerInventoryFilterType `protobuf:"bytes,5,opt,name=bigip_virtual_server_filter,json=bigipVirtualServerFilter,proto3" json:"bigip_virtual_server_filter,omitempty"`
	// UDPLoadbalancerInventoryFilterType
	//
	// x-displayName: "UDP LoadBalancer Inventory Filter Type"
	// Filters for UDP LoadBalancer
	UdpLoadBalancerFilter *UDPLoadbalancerInventoryFilterType `protobuf:"bytes,6,opt,name=udp_load_balancer_filter,json=udpLoadBalancerFilter,proto3" json:"udp_load_balancer_filter,omitempty"`
}

func (m *ApplicationInventoryRequest) Reset()      { *m = ApplicationInventoryRequest{} }
func (*ApplicationInventoryRequest) ProtoMessage() {}
func (*ApplicationInventoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{35}
}
func (m *ApplicationInventoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationInventoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationInventoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationInventoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationInventoryRequest.Merge(m, src)
}
func (m *ApplicationInventoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationInventoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationInventoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationInventoryRequest proto.InternalMessageInfo

func (m *ApplicationInventoryRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ApplicationInventoryRequest) GetHttpLoadBalancerFilter() *HTTPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.HttpLoadBalancerFilter
	}
	return nil
}

func (m *ApplicationInventoryRequest) GetTcpLoadBalancerFilter() *TCPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.TcpLoadBalancerFilter
	}
	return nil
}

func (m *ApplicationInventoryRequest) GetCdnLoadBalancerFilter() *HTTPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.CdnLoadBalancerFilter
	}
	return nil
}

func (m *ApplicationInventoryRequest) GetBigipVirtualServerFilter() *BIGIPVirtualServerInventoryFilterType {
	if m != nil {
		return m.BigipVirtualServerFilter
	}
	return nil
}

func (m *ApplicationInventoryRequest) GetUdpLoadBalancerFilter() *UDPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.UdpLoadBalancerFilter
	}
	return nil
}

// ApplicationInventoryResponse
//
// x-displayName: "Application related objects inventory response"
// Response for inventory of application related objects
type ApplicationInventoryResponse struct {
	// Load Balancers
	//
	// x-displayName: "Load Balancers"
	// Number of HTTP and TCP Load Balancers configured
	Loadbalancers uint32 `protobuf:"varint,1,opt,name=loadbalancers,proto3" json:"loadbalancers,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Number of origin pools configured
	OriginPools uint32 `protobuf:"varint,2,opt,name=origin_pools,json=originPools,proto3" json:"origin_pools,omitempty"`
	// Services Discovered
	//
	// x-displayName: "Services Discovered"
	// Number of services discovered
	ServicesDiscovered uint32 `protobuf:"varint,3,opt,name=services_discovered,json=servicesDiscovered,proto3" json:"services_discovered,omitempty"`
	// HTTP Loadbalancer Inventory
	//
	// x-displayName: "HTTP Loadbalancers"
	// Inventory of configured HTTP Loadbalancers
	HttpLoadbalancers *HTTPLoadbalancerInventoryType `protobuf:"bytes,4,opt,name=http_loadbalancers,json=httpLoadbalancers,proto3" json:"http_loadbalancers,omitempty"`
	// TCP Loadbalancer Inventory
	//
	// x-displayName: "TCP Loadbalancers"
	// Inventory of configured TCP Loadbalancers
	TcpLoadbalancers *TCPLoadbalancerInventoryType `protobuf:"bytes,5,opt,name=tcp_loadbalancers,json=tcpLoadbalancers,proto3" json:"tcp_loadbalancers,omitempty"`
	// CDN Loadbalancer Inventory
	//
	// x-displayName: "CDN Loadbalancers"
	// Inventory of configured CDN Loadbalancers
	CdnLoadbalancers *HTTPLoadbalancerInventoryType `protobuf:"bytes,6,opt,name=cdn_loadbalancers,json=cdnLoadbalancers,proto3" json:"cdn_loadbalancers,omitempty"`
	// BIGIP Virtual Server
	//
	// x-displayName: "BIG-IP Virtual Server"
	// Inventory of configured BIGIP Virtual Server
	BigipVirtualServers *BIGIPVirtualServerInventoryType `protobuf:"bytes,7,opt,name=bigip_virtual_servers,json=bigipVirtualServers,proto3" json:"bigip_virtual_servers,omitempty"`
	// UDP Loadbalancer Inventory
	//
	// x-displayName: "UDP Loadbalancers"
	// Inventory of configured UDP Loadbalancers
	UdpLoadbalancers *UDPLoadbalancerInventoryType `protobuf:"bytes,8,opt,name=udp_loadbalancers,json=udpLoadbalancers,proto3" json:"udp_loadbalancers,omitempty"`
}

func (m *ApplicationInventoryResponse) Reset()      { *m = ApplicationInventoryResponse{} }
func (*ApplicationInventoryResponse) ProtoMessage() {}
func (*ApplicationInventoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{36}
}
func (m *ApplicationInventoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationInventoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationInventoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationInventoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationInventoryResponse.Merge(m, src)
}
func (m *ApplicationInventoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationInventoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationInventoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationInventoryResponse proto.InternalMessageInfo

func (m *ApplicationInventoryResponse) GetLoadbalancers() uint32 {
	if m != nil {
		return m.Loadbalancers
	}
	return 0
}

func (m *ApplicationInventoryResponse) GetOriginPools() uint32 {
	if m != nil {
		return m.OriginPools
	}
	return 0
}

func (m *ApplicationInventoryResponse) GetServicesDiscovered() uint32 {
	if m != nil {
		return m.ServicesDiscovered
	}
	return 0
}

func (m *ApplicationInventoryResponse) GetHttpLoadbalancers() *HTTPLoadbalancerInventoryType {
	if m != nil {
		return m.HttpLoadbalancers
	}
	return nil
}

func (m *ApplicationInventoryResponse) GetTcpLoadbalancers() *TCPLoadbalancerInventoryType {
	if m != nil {
		return m.TcpLoadbalancers
	}
	return nil
}

func (m *ApplicationInventoryResponse) GetCdnLoadbalancers() *HTTPLoadbalancerInventoryType {
	if m != nil {
		return m.CdnLoadbalancers
	}
	return nil
}

func (m *ApplicationInventoryResponse) GetBigipVirtualServers() *BIGIPVirtualServerInventoryType {
	if m != nil {
		return m.BigipVirtualServers
	}
	return nil
}

func (m *ApplicationInventoryResponse) GetUdpLoadbalancers() *UDPLoadbalancerInventoryType {
	if m != nil {
		return m.UdpLoadbalancers
	}
	return nil
}

// AllApplicationInventoryRequest
//
// x-displayName: "All Application related objects inventory request"
// Request for inventory of application related objects
type AllApplicationInventoryRequest struct {
	// HTTPLoadbalancerInventoryFilterType
	//
	// x-displayName: "HTTP LoadBalancer Inventory Filter Type"
	// Filters for HTTP LoadBalancer
	HttpLoadBalancerFilter *HTTPLoadbalancerInventoryFilterType `protobuf:"bytes,2,opt,name=http_load_balancer_filter,json=httpLoadBalancerFilter,proto3" json:"http_load_balancer_filter,omitempty"`
	// TCPLoadbalancerInventoryFilterType
	//
	// x-displayName: "TCP LoadBalancer Inventory Filter Type"
	// Filters for TCP LoadBalancer
	TcpLoadBalancerFilter *TCPLoadbalancerInventoryFilterType `protobuf:"bytes,3,opt,name=tcp_load_balancer_filter,json=tcpLoadBalancerFilter,proto3" json:"tcp_load_balancer_filter,omitempty"`
	// CDN Loadbalancer Inventory FilterType
	//
	// x-displayName: "CDN LoadBalancer Inventory Filter Type"
	// Filters for CDN LoadBalancer
	CdnLoadBalancerFilter *HTTPLoadbalancerInventoryFilterType `protobuf:"bytes,4,opt,name=cdn_load_balancer_filter,json=cdnLoadBalancerFilter,proto3" json:"cdn_load_balancer_filter,omitempty"`
	// BIGIP Virtual Server Inventory Filter Type
	//
	// x-displayName: "BIG-IP Virtual Server Inventory Filter Type"
	// Filters for BIGIP Virtual Server
	BigipVirtualServerFilter *BIGIPVirtualServerInventoryFilterType `protobuf:"bytes,5,opt,name=bigip_virtual_server_filter,json=bigipVirtualServerFilter,proto3" json:"bigip_virtual_server_filter,omitempty"`
	// UDPLoadbalancerInventoryFilterType
	//
	// x-displayName: "UDP LoadBalancer Inventory Filter Type"
	// Filters for UDP LoadBalancer
	UdpLoadBalancerFilter *UDPLoadbalancerInventoryFilterType `protobuf:"bytes,6,opt,name=udp_load_balancer_filter,json=udpLoadBalancerFilter,proto3" json:"udp_load_balancer_filter,omitempty"`
}

func (m *AllApplicationInventoryRequest) Reset()      { *m = AllApplicationInventoryRequest{} }
func (*AllApplicationInventoryRequest) ProtoMessage() {}
func (*AllApplicationInventoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{37}
}
func (m *AllApplicationInventoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllApplicationInventoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllApplicationInventoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllApplicationInventoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllApplicationInventoryRequest.Merge(m, src)
}
func (m *AllApplicationInventoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllApplicationInventoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllApplicationInventoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllApplicationInventoryRequest proto.InternalMessageInfo

func (m *AllApplicationInventoryRequest) GetHttpLoadBalancerFilter() *HTTPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.HttpLoadBalancerFilter
	}
	return nil
}

func (m *AllApplicationInventoryRequest) GetTcpLoadBalancerFilter() *TCPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.TcpLoadBalancerFilter
	}
	return nil
}

func (m *AllApplicationInventoryRequest) GetCdnLoadBalancerFilter() *HTTPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.CdnLoadBalancerFilter
	}
	return nil
}

func (m *AllApplicationInventoryRequest) GetBigipVirtualServerFilter() *BIGIPVirtualServerInventoryFilterType {
	if m != nil {
		return m.BigipVirtualServerFilter
	}
	return nil
}

func (m *AllApplicationInventoryRequest) GetUdpLoadBalancerFilter() *UDPLoadbalancerInventoryFilterType {
	if m != nil {
		return m.UdpLoadBalancerFilter
	}
	return nil
}

// HTTPLoadbalancerWafFilterResultType
//
// x-displayName: "HTTP Loadbalancer Inventory Results"
// HTTP Loadbalancer Waf Filter Inventory Results
type HTTPLoadbalancerWafFilterResultType struct {
	// HTTP LB Namespace
	//
	// x-displayName: "HTTP LB Namespace"
	// Namespace of HTTP LB
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// HTTP LB Name
	//
	// x-displayName: "HTTP LB Name"
	// Name of HTTP LB
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *HTTPLoadbalancerWafFilterResultType) Reset()      { *m = HTTPLoadbalancerWafFilterResultType{} }
func (*HTTPLoadbalancerWafFilterResultType) ProtoMessage() {}
func (*HTTPLoadbalancerWafFilterResultType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{38}
}
func (m *HTTPLoadbalancerWafFilterResultType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLoadbalancerWafFilterResultType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPLoadbalancerWafFilterResultType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPLoadbalancerWafFilterResultType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLoadbalancerWafFilterResultType.Merge(m, src)
}
func (m *HTTPLoadbalancerWafFilterResultType) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLoadbalancerWafFilterResultType) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLoadbalancerWafFilterResultType.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLoadbalancerWafFilterResultType proto.InternalMessageInfo

func (m *HTTPLoadbalancerWafFilterResultType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *HTTPLoadbalancerWafFilterResultType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// AllApplicationInventoryWafFilterResponse
//
// x-displayName: "Application related objects inventory response"
// Response for inventory of application related objects
type AllApplicationInventoryWafFilterResponse struct {
	// HTTP Loadbalancer Inventory with WAF Filters
	//
	// x-displayName: "HTTP Loadbalancers with WAF Filters"
	// Application Inventory of configured HTTP Loadbalancers with WAF Filters
	HttpLoadbalancers []*HTTPLoadbalancerWafFilterResultType `protobuf:"bytes,2,rep,name=http_loadbalancers,json=httpLoadbalancers,proto3" json:"http_loadbalancers,omitempty"`
	// CDN Loadbalancer Inventory with WAF Filters
	//
	// x-displayName: "CDN Loadbalancers with WAF Filters"
	// Application Inventory of configured CDN Loadbalancers with WAF Filters
	CdnLoadbalancers []*HTTPLoadbalancerWafFilterResultType `protobuf:"bytes,3,rep,name=cdn_loadbalancers,json=cdnLoadbalancers,proto3" json:"cdn_loadbalancers,omitempty"`
}

func (m *AllApplicationInventoryWafFilterResponse) Reset() {
	*m = AllApplicationInventoryWafFilterResponse{}
}
func (*AllApplicationInventoryWafFilterResponse) ProtoMessage() {}
func (*AllApplicationInventoryWafFilterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{39}
}
func (m *AllApplicationInventoryWafFilterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllApplicationInventoryWafFilterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllApplicationInventoryWafFilterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllApplicationInventoryWafFilterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllApplicationInventoryWafFilterResponse.Merge(m, src)
}
func (m *AllApplicationInventoryWafFilterResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllApplicationInventoryWafFilterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllApplicationInventoryWafFilterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllApplicationInventoryWafFilterResponse proto.InternalMessageInfo

func (m *AllApplicationInventoryWafFilterResponse) GetHttpLoadbalancers() []*HTTPLoadbalancerWafFilterResultType {
	if m != nil {
		return m.HttpLoadbalancers
	}
	return nil
}

func (m *AllApplicationInventoryWafFilterResponse) GetCdnLoadbalancers() []*HTTPLoadbalancerWafFilterResultType {
	if m != nil {
		return m.CdnLoadbalancers
	}
	return nil
}

// AllApplicationInventoryWafFilterRequest
//
// x-displayName: "All Application related objects inventory request with WAF Filter"
// Request for inventory of application related objects with WAF Filter
type AllApplicationInventoryWafFilterRequest struct {
	// WAF Filter Choice
	//
	// x-required
	// x-displayName: "WAF Filter"
	//
	// Types that are valid to be assigned to WafFilterChoice:
	//	*AllApplicationInventoryWafFilterRequest_ExclusionSignatureId
	//	*AllApplicationInventoryWafFilterRequest_ExclusionViolationType
	WafFilterChoice isAllApplicationInventoryWafFilterRequest_WafFilterChoice `protobuf_oneof:"waf_filter_choice"`
}

func (m *AllApplicationInventoryWafFilterRequest) Reset() {
	*m = AllApplicationInventoryWafFilterRequest{}
}
func (*AllApplicationInventoryWafFilterRequest) ProtoMessage() {}
func (*AllApplicationInventoryWafFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ad0896b746b19a, []int{40}
}
func (m *AllApplicationInventoryWafFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllApplicationInventoryWafFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllApplicationInventoryWafFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllApplicationInventoryWafFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllApplicationInventoryWafFilterRequest.Merge(m, src)
}
func (m *AllApplicationInventoryWafFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllApplicationInventoryWafFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllApplicationInventoryWafFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllApplicationInventoryWafFilterRequest proto.InternalMessageInfo

type isAllApplicationInventoryWafFilterRequest_WafFilterChoice interface {
	isAllApplicationInventoryWafFilterRequest_WafFilterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AllApplicationInventoryWafFilterRequest_ExclusionSignatureId struct {
	ExclusionSignatureId uint32 `protobuf:"varint,2,opt,name=exclusion_signature_id,json=exclusionSignatureId,proto3,oneof" json:"exclusion_signature_id,omitempty"`
}
type AllApplicationInventoryWafFilterRequest_ExclusionViolationType struct {
	ExclusionViolationType app_firewall.AppFirewallViolationType `protobuf:"varint,3,opt,name=exclusion_violation_type,json=exclusionViolationType,proto3,enum=ves.io.schema.app_firewall.AppFirewallViolationType,oneof" json:"exclusion_violation_type,omitempty"`
}

func (*AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) isAllApplicationInventoryWafFilterRequest_WafFilterChoice() {
}
func (*AllApplicationInventoryWafFilterRequest_ExclusionViolationType) isAllApplicationInventoryWafFilterRequest_WafFilterChoice() {
}

func (m *AllApplicationInventoryWafFilterRequest) GetWafFilterChoice() isAllApplicationInventoryWafFilterRequest_WafFilterChoice {
	if m != nil {
		return m.WafFilterChoice
	}
	return nil
}

func (m *AllApplicationInventoryWafFilterRequest) GetExclusionSignatureId() uint32 {
	if x, ok := m.GetWafFilterChoice().(*AllApplicationInventoryWafFilterRequest_ExclusionSignatureId); ok {
		return x.ExclusionSignatureId
	}
	return 0
}

func (m *AllApplicationInventoryWafFilterRequest) GetExclusionViolationType() app_firewall.AppFirewallViolationType {
	if x, ok := m.GetWafFilterChoice().(*AllApplicationInventoryWafFilterRequest_ExclusionViolationType); ok {
		return x.ExclusionViolationType
	}
	return app_firewall.VIOL_NONE
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AllApplicationInventoryWafFilterRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AllApplicationInventoryWafFilterRequest_ExclusionSignatureId)(nil),
		(*AllApplicationInventoryWafFilterRequest_ExclusionViolationType)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.namespace.Severity", Severity_name, Severity_value)
	golang_proto.RegisterEnum("ves.io.schema.namespace.Severity", Severity_name, Severity_value)
	proto.RegisterType((*SetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest")
	golang_proto.RegisterType((*SetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest")
	proto.RegisterType((*SetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse")
	golang_proto.RegisterType((*SetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse")
	proto.RegisterType((*GetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest")
	golang_proto.RegisterType((*GetFastACLsForInternetVIPsRequest)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest")
	proto.RegisterType((*GetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse")
	golang_proto.RegisterType((*GetFastACLsForInternetVIPsResponse)(nil), "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse")
	proto.RegisterType((*SetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesRequest")
	golang_proto.RegisterType((*SetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesRequest")
	proto.RegisterType((*SetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesResponse")
	golang_proto.RegisterType((*SetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveServicePoliciesResponse")
	proto.RegisterType((*GetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesRequest")
	golang_proto.RegisterType((*GetActiveServicePoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesRequest")
	proto.RegisterType((*GetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesResponse")
	golang_proto.RegisterType((*GetActiveServicePoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveServicePoliciesResponse")
	proto.RegisterType((*SetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest")
	golang_proto.RegisterType((*SetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest")
	proto.RegisterType((*SetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse")
	golang_proto.RegisterType((*SetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse")
	proto.RegisterType((*GetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest")
	golang_proto.RegisterType((*GetActiveNetworkPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest")
	proto.RegisterType((*GetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse")
	golang_proto.RegisterType((*GetActiveNetworkPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse")
	proto.RegisterType((*SetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesRequest")
	golang_proto.RegisterType((*SetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesRequest")
	proto.RegisterType((*SetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesResponse")
	golang_proto.RegisterType((*SetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.SetActiveAlertPoliciesResponse")
	proto.RegisterType((*GetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesRequest")
	golang_proto.RegisterType((*GetActiveAlertPoliciesRequest)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesRequest")
	proto.RegisterType((*GetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesResponse")
	golang_proto.RegisterType((*GetActiveAlertPoliciesResponse)(nil), "ves.io.schema.namespace.GetActiveAlertPoliciesResponse")
	proto.RegisterType((*UpdateAllowAdvertiseOnPublicReq)(nil), "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq")
	golang_proto.RegisterType((*UpdateAllowAdvertiseOnPublicReq)(nil), "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq")
	proto.RegisterType((*UpdateAllowAdvertiseOnPublicResp)(nil), "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp")
	golang_proto.RegisterType((*UpdateAllowAdvertiseOnPublicResp)(nil), "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp")
	proto.RegisterType((*ValidateRulesReq)(nil), "ves.io.schema.namespace.ValidateRulesReq")
	golang_proto.RegisterType((*ValidateRulesReq)(nil), "ves.io.schema.namespace.ValidateRulesReq")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.namespace.ValidateRulesReq.ValidatorEvaluationEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.namespace.ValidateRulesReq.ValidatorEvaluationEntry")
	proto.RegisterType((*ValidationResult)(nil), "ves.io.schema.namespace.ValidationResult")
	golang_proto.RegisterType((*ValidationResult)(nil), "ves.io.schema.namespace.ValidationResult")
	proto.RegisterType((*ValidateRulesResponse)(nil), "ves.io.schema.namespace.ValidateRulesResponse")
	golang_proto.RegisterType((*ValidateRulesResponse)(nil), "ves.io.schema.namespace.ValidateRulesResponse")
	proto.RegisterType((*NetworkingInventoryRequest)(nil), "ves.io.schema.namespace.NetworkingInventoryRequest")
	golang_proto.RegisterType((*NetworkingInventoryRequest)(nil), "ves.io.schema.namespace.NetworkingInventoryRequest")
	proto.RegisterType((*NetworkingInventoryResponse)(nil), "ves.io.schema.namespace.NetworkingInventoryResponse")
	golang_proto.RegisterType((*NetworkingInventoryResponse)(nil), "ves.io.schema.namespace.NetworkingInventoryResponse")
	proto.RegisterType((*UDPLoadbalancerResultType)(nil), "ves.io.schema.namespace.UDPLoadbalancerResultType")
	golang_proto.RegisterType((*UDPLoadbalancerResultType)(nil), "ves.io.schema.namespace.UDPLoadbalancerResultType")
	proto.RegisterType((*UDPLoadbalancerInventoryFilterType)(nil), "ves.io.schema.namespace.UDPLoadbalancerInventoryFilterType")
	golang_proto.RegisterType((*UDPLoadbalancerInventoryFilterType)(nil), "ves.io.schema.namespace.UDPLoadbalancerInventoryFilterType")
	proto.RegisterType((*UDPLoadbalancerInventoryType)(nil), "ves.io.schema.namespace.UDPLoadbalancerInventoryType")
	golang_proto.RegisterType((*UDPLoadbalancerInventoryType)(nil), "ves.io.schema.namespace.UDPLoadbalancerInventoryType")
	proto.RegisterType((*TCPLoadbalancerResultType)(nil), "ves.io.schema.namespace.TCPLoadbalancerResultType")
	golang_proto.RegisterType((*TCPLoadbalancerResultType)(nil), "ves.io.schema.namespace.TCPLoadbalancerResultType")
	proto.RegisterType((*TCPLoadbalancerInventoryFilterType)(nil), "ves.io.schema.namespace.TCPLoadbalancerInventoryFilterType")
	golang_proto.RegisterType((*TCPLoadbalancerInventoryFilterType)(nil), "ves.io.schema.namespace.TCPLoadbalancerInventoryFilterType")
	proto.RegisterType((*TCPLoadbalancerInventoryType)(nil), "ves.io.schema.namespace.TCPLoadbalancerInventoryType")
	golang_proto.RegisterType((*TCPLoadbalancerInventoryType)(nil), "ves.io.schema.namespace.TCPLoadbalancerInventoryType")
	proto.RegisterType((*HTTPLoadbalancerInventoryFilterType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerInventoryFilterType")
	golang_proto.RegisterType((*HTTPLoadbalancerInventoryFilterType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerInventoryFilterType")
	proto.RegisterType((*HTTPLoadbalancerResultType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerResultType")
	golang_proto.RegisterType((*HTTPLoadbalancerResultType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerResultType")
	proto.RegisterType((*HTTPLoadbalancerInventoryType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerInventoryType")
	golang_proto.RegisterType((*HTTPLoadbalancerInventoryType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerInventoryType")
	proto.RegisterType((*BIGIPVirtualServerInventoryFilterType)(nil), "ves.io.schema.namespace.BIGIPVirtualServerInventoryFilterType")
	golang_proto.RegisterType((*BIGIPVirtualServerInventoryFilterType)(nil), "ves.io.schema.namespace.BIGIPVirtualServerInventoryFilterType")
	proto.RegisterType((*BIGIPVirtualServerResultType)(nil), "ves.io.schema.namespace.BIGIPVirtualServerResultType")
	golang_proto.RegisterType((*BIGIPVirtualServerResultType)(nil), "ves.io.schema.namespace.BIGIPVirtualServerResultType")
	proto.RegisterType((*BIGIPVirtualServerInventoryType)(nil), "ves.io.schema.namespace.BIGIPVirtualServerInventoryType")
	golang_proto.RegisterType((*BIGIPVirtualServerInventoryType)(nil), "ves.io.schema.namespace.BIGIPVirtualServerInventoryType")
	proto.RegisterType((*ApplicationInventoryRequest)(nil), "ves.io.schema.namespace.ApplicationInventoryRequest")
	golang_proto.RegisterType((*ApplicationInventoryRequest)(nil), "ves.io.schema.namespace.ApplicationInventoryRequest")
	proto.RegisterType((*ApplicationInventoryResponse)(nil), "ves.io.schema.namespace.ApplicationInventoryResponse")
	golang_proto.RegisterType((*ApplicationInventoryResponse)(nil), "ves.io.schema.namespace.ApplicationInventoryResponse")
	proto.RegisterType((*AllApplicationInventoryRequest)(nil), "ves.io.schema.namespace.AllApplicationInventoryRequest")
	golang_proto.RegisterType((*AllApplicationInventoryRequest)(nil), "ves.io.schema.namespace.AllApplicationInventoryRequest")
	proto.RegisterType((*HTTPLoadbalancerWafFilterResultType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerWafFilterResultType")
	golang_proto.RegisterType((*HTTPLoadbalancerWafFilterResultType)(nil), "ves.io.schema.namespace.HTTPLoadbalancerWafFilterResultType")
	proto.RegisterType((*AllApplicationInventoryWafFilterResponse)(nil), "ves.io.schema.namespace.AllApplicationInventoryWafFilterResponse")
	golang_proto.RegisterType((*AllApplicationInventoryWafFilterResponse)(nil), "ves.io.schema.namespace.AllApplicationInventoryWafFilterResponse")
	proto.RegisterType((*AllApplicationInventoryWafFilterRequest)(nil), "ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest")
	golang_proto.RegisterType((*AllApplicationInventoryWafFilterRequest)(nil), "ves.io.schema.namespace.AllApplicationInventoryWafFilterRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/namespace/public_customapi_akar.proto", fileDescriptor_e3ad0896b746b19a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/namespace/public_customapi_akar.proto", fileDescriptor_e3ad0896b746b19a)
}

var fileDescriptor_e3ad0896b746b19a = []byte{
	// 4701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x4b, 0x6c, 0xdc, 0x48,
	0x7a, 0x36, 0x5b, 0xef, 0x92, 0x5a, 0x6a, 0x95, 0x1e, 0xa6, 0x5a, 0x72, 0x4b, 0xe6, 0x8c, 0x67,
	0x3c, 0x33, 0xee, 0xd6, 0x8c, 0x35, 0xf6, 0xcc, 0xd8, 0xb3, 0x99, 0x48, 0xb2, 0x2c, 0xcb, 0xd1,
	0xd8, 0x0a, 0xe5, 0xc7, 0x60, 0x80, 0x0c, 0x43, 0x91, 0xd5, 0x2d, 0xae, 0xd9, 0x24, 0x87, 0x45,
	0xb6, 0x2c, 0x4c, 0x8c, 0x6c, 0x8c, 0x3c, 0x10, 0x20, 0x87, 0xc5, 0x24, 0x08, 0x16, 0x7b, 0xc8,
	0x29, 0x01, 0x12, 0x2f, 0x90, 0x63, 0x10, 0xc4, 0x7b, 0x98, 0x4b, 0xe0, 0xb9, 0x24, 0x30, 0xb2,
	0x40, 0xb2, 0xa7, 0x64, 0x47, 0xce, 0x21, 0x8b, 0x1c, 0xb2, 0x87, 0x1c, 0x02, 0xe4, 0xb0, 0x8b,
	0xaa, 0x22, 0xd9, 0x24, 0x9b, 0x8f, 0x6e, 0xc9, 0x7b, 0xdb, 0x9b, 0x9a, 0x55, 0xff, 0x57, 0xf5,
	0x3f, 0xea, 0xe7, 0x57, 0x7f, 0xb1, 0x04, 0x56, 0x5a, 0x08, 0xd7, 0x34, 0x73, 0x19, 0x2b, 0xfb,
	0xa8, 0x29, 0x2f, 0x1b, 0x72, 0x13, 0x61, 0x4b, 0x56, 0xd0, 0xb2, 0xe5, 0xee, 0xe9, 0x9a, 0x22,
	0x29, 0x2e, 0x76, 0xcc, 0xa6, 0x6c, 0x69, 0x92, 0xfc, 0x40, 0xb6, 0x6b, 0x96, 0x6d, 0x3a, 0x26,
	0x3c, 0xcd, 0x84, 0x6a, 0x4c, 0xa8, 0x16, 0x08, 0x95, 0xab, 0x0d, 0xcd, 0xd9, 0x77, 0xf7, 0x6a,
	0x8a, 0xd9, 0x5c, 0x6e, 0x98, 0x0d, 0x73, 0x99, 0xf6, 0xdf, 0x73, 0xeb, 0xf4, 0x17, 0xfd, 0x41,
	0xff, 0x62, 0x38, 0xe5, 0x85, 0x86, 0x69, 0x36, 0x74, 0xb4, 0x2c, 0x5b, 0xda, 0xb2, 0x6c, 0x18,
	0xa6, 0x23, 0x3b, 0x9a, 0x69, 0x60, 0xaf, 0x75, 0xd1, 0x6b, 0x0d, 0x30, 0x1c, 0xad, 0x89, 0xb0,
	0x23, 0x37, 0x2d, 0xaf, 0x43, 0x25, 0xde, 0xe1, 0xc0, 0x96, 0x2d, 0x0b, 0xd9, 0x3e, 0xc0, 0x5b,
	0x51, 0xdd, 0x64, 0x1d, 0xd9, 0x8e, 0x64, 0x99, 0xba, 0xa6, 0x1c, 0x4a, 0x18, 0x39, 0xcb, 0xe6,
	0xde, 0xb7, 0x91, 0xe2, 0x78, 0x9d, 0x5f, 0x8b, 0x75, 0xb6, 0x2c, 0xa9, 0xae, 0xd9, 0xe8, 0x40,
	0xd6, 0xf5, 0x65, 0xe7, 0xd0, 0x42, 0x3e, 0xe8, 0x2b, 0x69, 0x06, 0x0b, 0x77, 0x9a, 0x8f, 0x76,
	0x32, 0xad, 0xb0, 0x5e, 0x73, 0xd1, 0xc6, 0xb0, 0xdc, 0x42, 0xb4, 0xa9, 0x25, 0xeb, 0x9a, 0x2a,
	0x3b, 0xc8, 0x6b, 0x15, 0x62, 0xad, 0x08, 0x23, 0xa3, 0x15, 0x03, 0x5f, 0x8a, 0xf5, 0xd1, 0xd0,
	0x81, 0x14, 0xed, 0xb1, 0xd8, 0xd9, 0x03, 0x87, 0x27, 0x21, 0xfc, 0x15, 0x07, 0xce, 0xee, 0x22,
	0xe7, 0xba, 0x8c, 0x9d, 0xd5, 0xf5, 0x6d, 0x7c, 0xdd, 0xb4, 0xb7, 0x0c, 0x07, 0xd9, 0x06, 0x72,
	0xee, 0x6d, 0xed, 0x60, 0x11, 0x7d, 0xee, 0x22, 0xec, 0xc0, 0x05, 0x30, 0x12, 0xe8, 0xce, 0x73,
	0x4b, 0xdc, 0xf9, 0x11, 0xb1, 0xfd, 0x00, 0xee, 0x81, 0x91, 0xba, 0x8c, 0x1d, 0x49, 0x56, 0x74,
	0xcc, 0x17, 0x96, 0xfa, 0xce, 0x8f, 0x5e, 0x14, 0x6a, 0xd1, 0xa8, 0xa1, 0x03, 0xd7, 0x6e, 0x53,
	0x1f, 0x88, 0xa8, 0x7e, 0xe7, 0xd0, 0x42, 0x6b, 0x67, 0x9f, 0x3c, 0x1a, 0xf6, 0xe5, 0xfe, 0xe1,
	0xa7, 0x5f, 0xf5, 0x0d, 0x7e, 0xc9, 0xf5, 0x95, 0xbe, 0xc3, 0x1d, 0xfd, 0xe4, 0x1f, 0xfb, 0x06,
	0xbf, 0xfc, 0x21, 0x57, 0x28, 0x71, 0x22, 0x6d, 0x5f, 0x55, 0x74, 0x2c, 0xbc, 0x0a, 0x84, 0xac,
	0x69, 0x62, 0xcb, 0x34, 0x30, 0x12, 0x56, 0xc1, 0xd9, 0xcd, 0x93, 0x29, 0x23, 0xd8, 0x40, 0xd8,
	0xcc, 0x1d, 0x08, 0x6e, 0x87, 0x55, 0xe6, 0xba, 0x56, 0x79, 0x34, 0xa4, 0x72, 0x48, 0xb9, 0xbf,
	0xe3, 0xc0, 0xe2, 0x2e, 0x72, 0x56, 0x15, 0x47, 0x6b, 0xa1, 0x5d, 0x64, 0xb7, 0x34, 0x05, 0xed,
	0x90, 0xd0, 0xd5, 0x50, 0x97, 0x2e, 0x70, 0x41, 0x09, 0x33, 0x39, 0x16, 0xf3, 0x1a, 0xea, 0xc5,
	0x13, 0xaf, 0x3d, 0x79, 0x34, 0x1e, 0x11, 0x3f, 0x24, 0xfe, 0x18, 0xf8, 0x92, 0x2b, 0x94, 0x96,
	0xc2, 0xee, 0x98, 0xc0, 0xd1, 0xb9, 0x09, 0x02, 0x58, 0x4a, 0x9f, 0xb7, 0xe7, 0x93, 0x8f, 0xc0,
	0xe2, 0xe6, 0x49, 0x74, 0x13, 0x7e, 0x9f, 0x03, 0x4b, 0x9b, 0x39, 0xa3, 0xc0, 0xdf, 0x3e, 0x91,
	0x01, 0x26, 0x3b, 0x0c, 0xd0, 0xa9, 0x6b, 0xc4, 0x49, 0xb7, 0x90, 0x73, 0x60, 0xda, 0x0f, 0x7a,
	0x76, 0x92, 0xc1, 0xe4, 0x8e, 0xeb, 0xa4, 0x88, 0x78, 0x9a, 0x93, 0x8c, 0xe8, 0xdc, 0x22, 0x4e,
	0xea, 0x98, 0x77, 0x82, 0x93, 0x8e, 0xa3, 0x5b, 0xd4, 0x49, 0x29, 0xa3, 0x10, 0x27, 0x9d, 0xc0,
	0x00, 0x93, 0x1d, 0x06, 0xe8, 0xd4, 0xf5, 0x6f, 0x39, 0x70, 0x26, 0x50, 0x76, 0x95, 0xbc, 0x03,
	0x7a, 0x73, 0x91, 0x09, 0xc6, 0x43, 0x6f, 0x8e, 0xde, 0xe6, 0xf7, 0xea, 0x93, 0x47, 0x63, 0xe1,
	0xd7, 0x4e, 0xb2, 0x7b, 0x8a, 0x72, 0x78, 0x56, 0xc2, 0x12, 0xa8, 0xa4, 0xcd, 0xd7, 0x73, 0xcd,
	0xb7, 0xc0, 0x99, 0xcd, 0xe3, 0x6b, 0x24, 0xbc, 0xe0, 0x40, 0x65, 0x33, 0x73, 0x04, 0xf8, 0xe9,
	0x09, 0x94, 0x9e, 0x88, 0x29, 0x1d, 0xd3, 0x0f, 0x22, 0x30, 0x13, 0xc5, 0x96, 0xb0, 0x23, 0x3b,
	0x2e, 0xe6, 0xfb, 0xe8, 0x10, 0xef, 0xc4, 0x86, 0x88, 0xbf, 0xb6, 0x6b, 0xed, 0x19, 0x1f, 0xee,
	0x52, 0x41, 0x71, 0x2a, 0x32, 0x00, 0x7b, 0x28, 0x3c, 0xe1, 0xc0, 0xe2, 0x5d, 0x8b, 0xbc, 0x3e,
	0x57, 0x75, 0xdd, 0x3c, 0x58, 0x55, 0x5b, 0xc8, 0x76, 0x34, 0x8c, 0x6e, 0x1b, 0x3b, 0x94, 0xda,
	0x88, 0xe8, 0xf3, 0x1c, 0xcf, 0x6b, 0x60, 0x4e, 0x26, 0xa2, 0x92, 0xec, 0xcb, 0x4a, 0xa6, 0x21,
	0x31, 0x62, 0xc4, 0x17, 0x96, 0xb8, 0xf3, 0xe3, 0x17, 0x6b, 0xb5, 0x14, 0x2a, 0x54, 0x63, 0x83,
	0x04, 0xa3, 0xae, 0xef, 0x9b, 0x9a, 0x82, 0xc4, 0x59, 0x39, 0x71, 0x2e, 0xc2, 0x15, 0xb0, 0x94,
	0x3d, 0x57, 0x6c, 0xc1, 0x59, 0x30, 0x68, 0x23, 0xec, 0xea, 0x0e, 0x9d, 0xe9, 0xb0, 0xe8, 0xfd,
	0x12, 0xfe, 0xa0, 0x00, 0x4a, 0xf7, 0x3c, 0xa6, 0x20, 0xba, 0x3a, 0x8d, 0x82, 0xdc, 0xb4, 0x33,
	0xed, 0x71, 0x0b, 0xd3, 0x96, 0x50, 0x4b, 0xd6, 0x5d, 0xca, 0xbc, 0x3c, 0x27, 0xaf, 0xa5, 0x2a,
	0x15, 0x1f, 0xc6, 0x7f, 0x60, 0xda, 0x1b, 0x01, 0xc8, 0x86, 0xe1, 0xd8, 0x87, 0xe2, 0x54, 0xab,
	0xb3, 0x05, 0x4e, 0x83, 0x01, 0xf2, 0x03, 0xf1, 0x7d, 0x74, 0x42, 0xec, 0x47, 0xf9, 0x3a, 0xe0,
	0xd3, 0x60, 0x60, 0x09, 0xf4, 0x3d, 0x40, 0x87, 0x9e, 0x02, 0xe4, 0xcf, 0x36, 0x46, 0x21, 0x84,
	0x71, 0xa5, 0xf0, 0x3e, 0x27, 0x3c, 0x08, 0xcc, 0xa0, 0x99, 0x86, 0x48, 0x6d, 0x03, 0x79, 0x30,
	0xd4, 0x44, 0x18, 0xcb, 0x0d, 0xbf, 0xbf, 0xff, 0x13, 0x7e, 0x0b, 0x0c, 0x63, 0xd4, 0x42, 0xb6,
	0xe6, 0x1c, 0xd2, 0xe9, 0x8c, 0x5f, 0x3c, 0x9b, 0xaa, 0xf6, 0xae, 0xd7, 0x51, 0x0c, 0x44, 0x84,
	0xbf, 0xe1, 0xc0, 0x4c, 0xcc, 0x1a, 0xde, 0xd2, 0x59, 0x00, 0x43, 0xd8, 0x55, 0x14, 0x84, 0x31,
	0xf3, 0xd3, 0x5a, 0x81, 0xe7, 0x44, 0xff, 0x11, 0xe4, 0xc1, 0x00, 0xb2, 0x6d, 0xd3, 0x66, 0xd3,
	0xa1, 0x6d, 0xec, 0x01, 0xfc, 0x04, 0xc0, 0x56, 0x30, 0x7d, 0x89, 0xf9, 0xd6, 0x5f, 0x13, 0x6f,
	0xe4, 0x79, 0x24, 0xd0, 0x58, 0x9c, 0x6c, 0xc5, 0x9e, 0x60, 0x61, 0x01, 0x94, 0xbd, 0xf4, 0xab,
	0x19, 0x8d, 0x2d, 0xa3, 0x85, 0x0c, 0xc7, 0xb4, 0x0f, 0xbd, 0x5c, 0x21, 0xfc, 0x0f, 0x07, 0xe6,
	0x13, 0x9b, 0x3d, 0x7d, 0x5e, 0x07, 0x13, 0x0d, 0xdd, 0xdc, 0x93, 0x75, 0xc9, 0xcb, 0xac, 0x4c,
	0xaf, 0xa2, 0x38, 0xce, 0x1e, 0x7b, 0xb2, 0x98, 0x78, 0x06, 0x6b, 0x0e, 0x4d, 0x15, 0xa4, 0x99,
	0xfd, 0x80, 0xe7, 0x41, 0x89, 0xfc, 0x21, 0x35, 0x11, 0xde, 0x97, 0x1a, 0xb6, 0xe9, 0x5a, 0x98,
	0xda, 0xbb, 0x28, 0x8e, 0x93, 0xe7, 0x1f, 0x23, 0xbc, 0xbf, 0x49, 0x9f, 0xc2, 0x37, 0xc1, 0xa4,
	0xaa, 0x48, 0x8a, 0xee, 0x62, 0x07, 0xd9, 0x7e, 0xd7, 0x7e, 0xda, 0x75, 0x42, 0x55, 0xd6, 0xd9,
	0x73, 0xaf, 0xef, 0x22, 0x18, 0x55, 0x74, 0xd3, 0x55, 0x25, 0x5d, 0x33, 0x1e, 0x60, 0x7e, 0x80,
	0xf6, 0x02, 0xf4, 0xd1, 0x36, 0x79, 0x02, 0xcb, 0xc4, 0xbd, 0x8d, 0x26, 0x32, 0x1c, 0xcc, 0x0f,
	0xd2, 0xd6, 0xe0, 0xb7, 0xf0, 0x1f, 0x1c, 0x98, 0xbb, 0x7b, 0x6d, 0x67, 0xdb, 0x94, 0xd5, 0x3d,
	0x59, 0x97, 0x0d, 0x05, 0xd9, 0xcc, 0x54, 0x24, 0x7d, 0xc1, 0x2d, 0x30, 0x63, 0xd9, 0x5a, 0x4b,
	0x76, 0x50, 0x7b, 0xdd, 0x13, 0x39, 0xaa, 0xf5, 0xe8, 0xc5, 0xe9, 0x98, 0x2b, 0x36, 0x9a, 0x96,
	0x73, 0x28, 0x4e, 0x7b, 0x22, 0xab, 0x61, 0x09, 0xb8, 0x01, 0xa6, 0xbc, 0x6d, 0x94, 0x8f, 0x44,
	0x81, 0x0a, 0x19, 0x40, 0xd0, 0x8a, 0xe4, 0x0d, 0x0a, 0x03, 0x41, 0x3f, 0x71, 0xb8, 0xb7, 0x6a,
	0xe8, 0xdf, 0xd1, 0xf5, 0xdd, 0x1f, 0xcf, 0xf0, 0x5f, 0x73, 0x40, 0x88, 0x69, 0x18, 0x38, 0xf6,
	0xba, 0xa6, 0x3b, 0xc8, 0xa6, 0xaa, 0xde, 0x4e, 0x53, 0x75, 0x88, 0xce, 0xb0, 0x5c, 0x63, 0x1b,
	0xac, 0x9a, 0xbf, 0xc1, 0xaa, 0xad, 0x99, 0xa6, 0x7e, 0x8f, 0x2c, 0xb8, 0x14, 0x85, 0x7f, 0x23,
	0x59, 0xe1, 0xe1, 0x5c, 0xb8, 0x04, 0xb5, 0x6f, 0xf6, 0x0f, 0x73, 0xa5, 0x21, 0xf2, 0xb2, 0x5a,
	0x48, 0x53, 0x85, 0x2a, 0xb1, 0x92, 0xe5, 0xaf, 0x62, 0xca, 0x44, 0x97, 0xd3, 0x3d, 0x53, 0x4c,
	0xf4, 0xc1, 0x7d, 0x50, 0x74, 0x55, 0x4b, 0xdf, 0x0b, 0x16, 0x66, 0x3f, 0x5d, 0x98, 0x17, 0x53,
	0x17, 0x66, 0x6a, 0x80, 0x89, 0x63, 0x14, 0xc8, 0x5b, 0x9c, 0x37, 0xfb, 0x87, 0xfb, 0x4a, 0xfd,
	0xc2, 0xbf, 0xf7, 0x81, 0xb9, 0x3b, 0xeb, 0x69, 0x21, 0x79, 0x15, 0x8c, 0x3b, 0x3a, 0x96, 0x90,
	0xa1, 0xd8, 0x87, 0x74, 0x2f, 0x97, 0x19, 0x8b, 0x45, 0x47, 0xc7, 0x1b, 0x41, 0x57, 0x78, 0x0b,
	0xf0, 0xc1, 0xac, 0xa4, 0x28, 0xa3, 0xcd, 0x8c, 0xc4, 0xd9, 0x40, 0x2a, 0x4c, 0xb0, 0x0f, 0xc9,
	0x64, 0x62, 0x28, 0x7d, 0x59, 0x93, 0xc1, 0x11, 0xe1, 0xd4, 0xc5, 0xd5, 0xff, 0xb2, 0x16, 0xd7,
	0xc0, 0x31, 0x17, 0xd7, 0x60, 0x68, 0x71, 0xad, 0x00, 0x60, 0x93, 0x29, 0xea, 0x5a, 0x53, 0xf3,
	0x17, 0x43, 0x32, 0xe2, 0x08, 0xe9, 0xb7, 0x4d, 0xba, 0x45, 0x57, 0xe4, 0x70, 0x7c, 0x45, 0xfe,
	0x65, 0x1f, 0x10, 0x62, 0x0e, 0x4e, 0x5a, 0x91, 0xab, 0x1d, 0x9e, 0xce, 0x5f, 0x8a, 0x31, 0x7f,
	0xdf, 0xc9, 0xf0, 0x77, 0xfe, 0x42, 0x4c, 0xf3, 0xfa, 0x6a, 0x87, 0xd7, 0x47, 0xf2, 0x27, 0x16,
	0xf5, 0x7d, 0x6a, 0xb6, 0x01, 0x2f, 0x37, 0xdb, 0x8c, 0x9e, 0x20, 0xdb, 0xfc, 0x77, 0x01, 0x2c,
	0xa4, 0xb9, 0x89, 0x3a, 0xe8, 0x5c, 0xe2, 0x52, 0x2c, 0xc6, 0x9d, 0xf0, 0x7e, 0xce, 0xa2, 0x2b,
	0xa6, 0x1a, 0xfa, 0x5c, 0xe2, 0xf2, 0x2a, 0xc6, 0x8d, 0xb9, 0x92, 0xb5, 0x90, 0x7a, 0xcc, 0x7a,
	0x03, 0x59, 0x59, 0xcf, 0x51, 0xc2, 0x59, 0x6f, 0x28, 0x27, 0xeb, 0xa5, 0xe6, 0x30, 0x71, 0x8c,
	0x02, 0xb5, 0xb3, 0xde, 0x60, 0x69, 0x48, 0xf8, 0x27, 0x08, 0x5e, 0xb9, 0x71, 0xe7, 0x4e, 0xee,
	0xaa, 0x78, 0x0f, 0x8c, 0xec, 0x3b, 0x8e, 0x25, 0x99, 0x86, 0x7e, 0xc8, 0x8f, 0xe7, 0xba, 0x77,
	0x98, 0x74, 0xbe, 0x6d, 0xe8, 0x87, 0xf0, 0x02, 0xe8, 0x3b, 0x90, 0xeb, 0xfc, 0x44, 0xae, 0x08,
	0xe9, 0x46, 0x62, 0x7c, 0xcf, 0x74, 0x24, 0xd2, 0x8c, 0x14, 0xea, 0xdb, 0x52, 0x7e, 0x8c, 0xef,
	0x99, 0xce, 0x4e, 0x20, 0x40, 0x20, 0x64, 0x4b, 0x0b, 0x43, 0x4c, 0xe6, 0x43, 0xc8, 0x96, 0x16,
	0x82, 0xb8, 0x09, 0xa6, 0x14, 0x5d, 0x43, 0x86, 0x23, 0x61, 0x4d, 0x45, 0x92, 0x8a, 0xea, 0xc8,
	0xc0, 0x88, 0x9f, 0xca, 0xc5, 0x99, 0x64, 0x62, 0xbb, 0x9a, 0x8a, 0xae, 0x31, 0xa1, 0xcc, 0x5c,
	0x30, 0xfd, 0x12, 0x73, 0xc1, 0x4c, 0xaf, 0xb9, 0xe0, 0x23, 0x50, 0xd4, 0x2c, 0xc9, 0x46, 0x96,
	0xcb, 0x6a, 0xbe, 0xfc, 0x6c, 0x2e, 0xc2, 0x98, 0x66, 0x89, 0x41, 0x7f, 0xa2, 0x59, 0x53, 0x26,
	0xfb, 0x3d, 0xd3, 0xc5, 0x92, 0x8b, 0x91, 0x2d, 0xa9, 0xc8, 0x37, 0xf9, 0xe9, 0x7c, 0xcd, 0x02,
	0xd9, 0xbb, 0x18, 0xd9, 0xd7, 0x7c, 0xc9, 0xf4, 0x14, 0xc5, 0xbf, 0xdc, 0x14, 0x35, 0x77, 0x9c,
	0x14, 0x45, 0x8c, 0x76, 0x20, 0xd7, 0x25, 0xf4, 0x90, 0x70, 0x64, 0xa2, 0x68, 0x39, 0xdf, 0x68,
	0x07, 0x72, 0x7d, 0xc3, 0xef, 0x0f, 0xd7, 0xc1, 0x84, 0xaa, 0x9a, 0x38, 0x1c, 0x9e, 0x30, 0x17,
	0x62, 0x9c, 0x88, 0x84, 0xe2, 0x73, 0x1b, 0x4c, 0x53, 0x10, 0xd9, 0x75, 0x4c, 0xa9, 0xa9, 0x39,
	0x5a, 0x83, 0x79, 0x70, 0x3e, 0x5f, 0x27, 0x22, 0xb7, 0xea, 0x3a, 0xe6, 0xc7, 0x81, 0x54, 0x30,
	0xa5, 0x10, 0xd0, 0x42, 0x77, 0x53, 0x0a, 0x81, 0x6c, 0x83, 0x69, 0x4c, 0xf6, 0xe9, 0x71, 0xa4,
	0x33, 0xf9, 0x53, 0x22, 0x72, 0xd7, 0xa2, 0x68, 0xf7, 0xc0, 0x5c, 0x2c, 0xb4, 0x42, 0x90, 0x95,
	0x5c, 0xc8, 0xd3, 0x91, 0xd8, 0x0a, 0xe1, 0x92, 0x77, 0xbb, 0x4d, 0x36, 0x31, 0xaa, 0xc4, 0x56,
	0x2a, 0xbf, 0xd8, 0xc5, 0xbb, 0x9d, 0x49, 0xac, 0x53, 0x01, 0x78, 0x17, 0xcc, 0x45, 0x21, 0x24,
	0xcd, 0x92, 0xf6, 0x91, 0xac, 0x22, 0x1b, 0xf3, 0x4b, 0xf9, 0x61, 0x1f, 0x41, 0xdb, 0xb2, 0x6e,
	0x30, 0x49, 0x78, 0x0b, 0xcc, 0x90, 0xac, 0xc5, 0xb2, 0xb9, 0xd4, 0xde, 0x40, 0xf2, 0x67, 0x73,
	0x21, 0xa7, 0x64, 0x4b, 0xdb, 0xa5, 0x72, 0xed, 0x9d, 0xa8, 0x9f, 0x05, 0x55, 0x54, 0xd7, 0x0c,
	0x8d, 0x02, 0x09, 0x5d, 0x65, 0xc1, 0x6b, 0x81, 0x00, 0xfc, 0x00, 0x00, 0x55, 0x76, 0x64, 0xa9,
	0xe1, 0xca, 0xb6, 0xca, 0xbf, 0x92, 0x2b, 0x3e, 0x42, 0x7a, 0x6f, 0x92, 0xce, 0x24, 0xa4, 0x14,
	0x6c, 0xd7, 0xc3, 0x51, 0xfe, 0x6a, 0x7e, 0x48, 0x11, 0x91, 0x68, 0x16, 0x6e, 0xd8, 0xb2, 0xb5,
	0x2f, 0x7d, 0xae, 0x4b, 0x9a, 0x81, 0x2d, 0x0f, 0xe8, 0x5c, 0x7e, 0x16, 0xa6, 0x62, 0xbf, 0xa9,
	0x6f, 0x05, 0x42, 0x70, 0x13, 0x4c, 0x2a, 0xa6, 0xf9, 0x40, 0x43, 0xe1, 0x29, 0xbd, 0x96, 0x8b,
	0x54, 0x62, 0x42, 0xa1, 0x49, 0x11, 0xcd, 0x98, 0xdb, 0xf7, 0x74, 0x53, 0x21, 0xdb, 0x75, 0xfe,
	0xf5, 0x2e, 0x34, 0xa3, 0x22, 0x6b, 0x9e, 0x04, 0xbc, 0x0a, 0x46, 0x15, 0xd3, 0xc6, 0x7e, 0xea,
	0x3e, 0x9f, 0x0b, 0x00, 0x48, 0x77, 0x2f, 0x6f, 0x5f, 0x04, 0x83, 0xb6, 0xe9, 0x92, 0x4d, 0xfe,
	0x1b, 0xb9, 0x72, 0x5e, 0x4f, 0xb2, 0x3a, 0x4d, 0x5b, 0x6b, 0x68, 0x06, 0x7d, 0x03, 0x21, 0x5b,
	0xc2, 0xee, 0x1e, 0x46, 0x0e, 0xff, 0x66, 0xfe, 0xea, 0x64, 0x72, 0xbb, 0x54, 0x6c, 0x97, 0x4a,
	0xc1, 0x8f, 0xc1, 0xb4, 0x8a, 0xea, 0xb2, 0xab, 0x3b, 0x92, 0x1e, 0xa2, 0x0d, 0xfc, 0x5b, 0xf9,
	0xa1, 0xea, 0xc9, 0x85, 0xd9, 0x06, 0x89, 0xb3, 0xa6, 0xeb, 0xb8, 0xb2, 0x2e, 0x39, 0x3a, 0xe6,
	0x2f, 0xe4, 0xc7, 0x19, 0xeb, 0x7d, 0x47, 0xc7, 0x24, 0x1d, 0xd3, 0x28, 0xd7, 0xb0, 0x62, 0xb6,
	0x90, 0x7d, 0xc8, 0x57, 0xf3, 0xd3, 0x31, 0x09, 0x72, 0xbf, 0x3f, 0xdc, 0x02, 0xb0, 0x29, 0xeb,
	0x07, 0xb2, 0x1d, 0x09, 0x8c, 0x5a, 0x7e, 0x88, 0x79, 0x52, 0xed, 0xc8, 0xa0, 0xec, 0x75, 0x5c,
	0xf8, 0x61, 0x19, 0x94, 0xe3, 0x7c, 0x2a, 0xb4, 0x8d, 0x7c, 0x0f, 0x8c, 0x51, 0x1a, 0x85, 0x0c,
	0x79, 0x4f, 0x47, 0x6a, 0xe6, 0x26, 0x72, 0x94, 0xf4, 0xdc, 0x60, 0x1d, 0xe1, 0x25, 0x30, 0x4a,
	0x5f, 0x3c, 0x9e, 0x5c, 0xd6, 0xae, 0x11, 0x90, 0x17, 0x8e, 0x27, 0x76, 0x13, 0xcc, 0x46, 0xf9,
	0x54, 0x80, 0x90, 0xb5, 0x63, 0x9c, 0x8e, 0x30, 0xaa, 0x10, 0x56, 0x94, 0x58, 0x05, 0x58, 0x99,
	0x3b, 0xc7, 0x08, 0xb5, 0xf2, 0xb1, 0x76, 0xc1, 0x7c, 0x02, 0xc3, 0x0a, 0x00, 0x07, 0x33, 0x00,
	0xf9, 0x0e, 0x8e, 0xe5, 0x83, 0xfe, 0x16, 0x58, 0x4a, 0xa3, 0x5a, 0x01, 0x72, 0xd6, 0x4e, 0xf2,
	0x4c, 0x32, 0xd9, 0x0a, 0xe9, 0x9f, 0x02, 0x3a, 0x9c, 0xa5, 0x3f, 0x4e, 0xc2, 0xba, 0x01, 0x66,
	0x22, 0xe4, 0x2b, 0x80, 0x1a, 0xc9, 0x80, 0x9a, 0x0a, 0xd3, 0xaf, 0x90, 0xd2, 0x69, 0x2c, 0x2c,
	0x00, 0x05, 0x59, 0x4a, 0x27, 0xf3, 0x30, 0x1f, 0xfe, 0x13, 0x70, 0x26, 0x91, 0x8e, 0x05, 0xd8,
	0xa3, 0x19, 0xd8, 0xf3, 0x49, 0x84, 0xcc, 0x47, 0xbe, 0x03, 0xe6, 0x13, 0x78, 0x59, 0x80, 0x3b,
	0x96, 0x81, 0x3b, 0xd7, 0xc9, 0xcc, 0x7c, 0x54, 0xbf, 0x96, 0x50, 0x4c, 0xad, 0x25, 0x8c, 0x1f,
	0xa3, 0x96, 0x30, 0x11, 0xaf, 0xde, 0xdf, 0x00, 0x33, 0x11, 0x1e, 0x18, 0x4c, 0x7b, 0x32, 0xcb,
	0x7f, 0x61, 0x26, 0xe8, 0x4f, 0x78, 0x1b, 0x9c, 0x8e, 0x11, 0xc2, 0x00, 0x2b, 0xab, 0x8e, 0x32,
	0x13, 0xa5, 0x84, 0x3e, 0xda, 0x5d, 0xb0, 0x90, 0xc4, 0x0c, 0x03, 0x48, 0x98, 0x65, 0xd5, 0x4e,
	0x6e, 0x18, 0x9f, 0x64, 0x02, 0xe2, 0x54, 0xde, 0x24, 0x3b, 0xd1, 0xee, 0x82, 0x85, 0x24, 0xae,
	0x18, 0x40, 0x4e, 0x67, 0x4d, 0xb2, 0x93, 0x2d, 0xfa, 0xb0, 0x12, 0x38, 0x9b, 0x4a, 0x1a, 0x03,
	0xec, 0x99, 0x0c, 0xec, 0x4a, 0x0a, 0x6d, 0x0c, 0x25, 0x80, 0x18, 0xf5, 0xf3, 0x51, 0x67, 0xb3,
	0x12, 0x40, 0x84, 0xf1, 0xf9, 0x58, 0x9f, 0x81, 0xb3, 0xa9, 0x34, 0x32, 0x80, 0x3d, 0x9d, 0xb5,
	0x6e, 0x93, 0x89, 0xa4, 0x8f, 0x7f, 0x1f, 0x9c, 0x49, 0xe4, 0x93, 0x01, 0x36, 0x9f, 0x81, 0x5d,
	0x4e, 0x60, 0x94, 0xb1, 0xb7, 0x40, 0x9b, 0x58, 0x06, 0x88, 0x73, 0x39, 0x6f, 0x81, 0x36, 0xb5,
	0xf4, 0xb1, 0xd6, 0x00, 0x6c, 0x33, 0xcc, 0x00, 0xa7, 0x9c, 0x81, 0x53, 0x0a, 0x38, 0x66, 0x28,
	0x34, 0x63, 0x54, 0x33, 0x00, 0x9a, 0xcf, 0x0a, 0xcd, 0x28, 0xd9, 0x0c, 0xbd, 0x97, 0x12, 0x38,
	0x67, 0x80, 0xb8, 0x90, 0xf5, 0x5e, 0xea, 0x60, 0x9d, 0x3e, 0xe8, 0x0e, 0x98, 0xeb, 0x20, 0x9f,
	0x01, 0xe4, 0x99, 0x0c, 0xc8, 0xd3, 0x71, 0xfa, 0x19, 0x56, 0x3a, 0xca, 0x42, 0x03, 0xbc, 0x4a,
	0xa6, 0xd2, 0x11, 0x1e, 0xea, 0xa3, 0x5d, 0x03, 0x53, 0x21, 0x3a, 0x1a, 0x20, 0x2d, 0x66, 0x20,
	0x4d, 0xb6, 0x09, 0xa9, 0x8f, 0x72, 0x15, 0x8c, 0x33, 0xb6, 0x19, 0x00, 0x2c, 0x65, 0x15, 0xa5,
	0x59, 0xdf, 0x50, 0x4a, 0x48, 0x22, 0xa8, 0x01, 0xd4, 0xd9, 0xac, 0x94, 0xd0, 0x49, 0x51, 0xdb,
	0xac, 0x69, 0x36, 0xcc, 0x50, 0x25, 0x59, 0x6f, 0x98, 0xb6, 0xe6, 0xec, 0x37, 0xe9, 0x6e, 0x68,
	0x44, 0x9c, 0x09, 0xb7, 0xae, 0xfa, 0x8d, 0x70, 0x0e, 0x0c, 0xab, 0x06, 0x96, 0x34, 0xa3, 0x6e,
	0xd2, 0x7d, 0xcf, 0x88, 0x38, 0xa4, 0x1a, 0x78, 0xcb, 0xa8, 0x9b, 0xa4, 0xa9, 0xa5, 0x59, 0x92,
	0x73, 0x68, 0x21, 0xba, 0xa5, 0x19, 0x11, 0x87, 0x5a, 0x9a, 0x45, 0xb9, 0x1d, 0x0f, 0x86, 0x54,
	0xb3, 0x29, 0x6b, 0x06, 0xe6, 0xcf, 0x2d, 0xf5, 0x51, 0x21, 0xf6, 0x13, 0x5e, 0x02, 0xa7, 0x29,
	0xeb, 0xd3, 0x35, 0xec, 0x20, 0x43, 0xb2, 0x4c, 0xdb, 0x91, 0x14, 0x7a, 0x1a, 0x4d, 0xf7, 0x20,
	0x23, 0xe2, 0x34, 0x69, 0xde, 0xa6, 0xad, 0x3b, 0xa6, 0xed, 0xb0, 0x93, 0x6a, 0x78, 0x0f, 0x2c,
	0x24, 0xf1, 0xec, 0xc0, 0x28, 0xaf, 0x67, 0x2d, 0xe1, 0x04, 0xa6, 0x1d, 0x5a, 0x76, 0x6d, 0xc2,
	0x1d, 0xa0, 0x9d, 0xcf, 0x5a, 0x76, 0x01, 0xe5, 0xf6, 0x31, 0x2e, 0x00, 0x48, 0x84, 0x31, 0x52,
	0x5c, 0x5b, 0x73, 0x0e, 0x25, 0x1d, 0xb5, 0x90, 0x4e, 0x77, 0x24, 0x23, 0x62, 0xc9, 0xd1, 0xf1,
	0xae, 0xd7, 0xb0, 0x4d, 0x9e, 0xc3, 0xb3, 0x60, 0x4c, 0x53, 0x75, 0x24, 0x39, 0x5a, 0x13, 0x99,
	0x2e, 0xdb, 0x77, 0x14, 0xc5, 0x51, 0xf2, 0xec, 0x0e, 0x7b, 0x04, 0x2f, 0x83, 0xd3, 0x8a, 0x69,
	0x18, 0xde, 0xea, 0x88, 0xf4, 0x7e, 0x8b, 0xf6, 0x9e, 0x69, 0x37, 0x6f, 0x85, 0xe4, 0xde, 0x01,
	0xd3, 0x0a, 0x61, 0x01, 0x75, 0x4d, 0x61, 0x09, 0xce, 0xfb, 0x92, 0xe1, 0x02, 0x9d, 0xca, 0x54,
	0xa4, 0x8d, 0x7d, 0x96, 0x00, 0x3f, 0x03, 0x67, 0xa2, 0x22, 0xe8, 0xa1, 0xa5, 0xd9, 0xec, 0x4f,
	0x55, 0x76, 0x50, 0xea, 0x2e, 0xe2, 0x8e, 0xff, 0xf5, 0xa3, 0x38, 0x1f, 0x01, 0xd8, 0x08, 0xe4,
	0xaf, 0xc9, 0x0e, 0x82, 0x0a, 0x18, 0x27, 0xe4, 0xc0, 0x5b, 0x4e, 0x36, 0xaa, 0xf3, 0xb5, 0xae,
	0xbf, 0xdc, 0x98, 0x7b, 0xf2, 0x68, 0x2c, 0xfc, 0xe1, 0x63, 0xf0, 0xb9, 0x0a, 0x47, 0x0b, 0x49,
	0x6c, 0xc9, 0x89, 0xa8, 0x4e, 0x18, 0x48, 0x64, 0xeb, 0x13, 0xf8, 0x71, 0x39, 0x8b, 0x81, 0x84,
	0x37, 0x3f, 0xbe, 0x2b, 0xdf, 0x06, 0xd3, 0x6c, 0x6b, 0x51, 0x37, 0x6d, 0x85, 0x91, 0xbb, 0xa6,
	0xa9, 0x22, 0xfe, 0x6d, 0x6a, 0x41, 0x48, 0x77, 0x13, 0x41, 0xd3, 0xc7, 0xa6, 0x8a, 0xa0, 0x08,
	0xca, 0x9d, 0xbb, 0xa6, 0x60, 0x02, 0xef, 0x64, 0x25, 0xc9, 0x8e, 0x7d, 0x93, 0x37, 0x8b, 0x9b,
	0xfd, 0xc3, 0xa5, 0xd2, 0xa4, 0xf0, 0x83, 0x41, 0x70, 0x26, 0xb5, 0x1c, 0x4d, 0x57, 0xd9, 0x7c,
	0xb8, 0x10, 0xcd, 0x0a, 0xff, 0xed, 0x62, 0x73, 0x89, 0x15, 0x9b, 0x59, 0x79, 0x9f, 0x16, 0x94,
	0xcf, 0x75, 0x14, 0x94, 0xbd, 0x5a, 0x7e, 0xb4, 0x68, 0x7c, 0xae, 0xa3, 0x68, 0xcc, 0x8a, 0xf8,
	0xb1, 0xc2, 0xf0, 0xeb, 0x9d, 0xd5, 0x3b, 0x56, 0xb9, 0x8f, 0x57, 0xe8, 0x6a, 0xc9, 0x15, 0x64,
	0x76, 0x0c, 0x9e, 0x50, 0x25, 0xce, 0x3a, 0xac, 0x18, 0xea, 0xf1, 0xb0, 0x62, 0x38, 0xe9, 0xb0,
	0xe2, 0x95, 0x78, 0xb5, 0x77, 0x84, 0xf6, 0x8a, 0x56, 0x74, 0xdf, 0xcf, 0xa8, 0xe8, 0x02, 0x36,
	0x8b, 0x94, 0xaa, 0x6d, 0xea, 0x59, 0xc8, 0x68, 0xef, 0x67, 0x21, 0x63, 0xa9, 0x67, 0x21, 0x9f,
	0x82, 0x71, 0xe2, 0xea, 0xd0, 0x61, 0xc8, 0x38, 0x5d, 0x58, 0x2b, 0xa9, 0x87, 0x21, 0xe9, 0x5b,
	0x71, 0xb1, 0xc8, 0xa0, 0xbc, 0xe3, 0x10, 0x62, 0xa0, 0x68, 0x29, 0x61, 0x82, 0x19, 0x28, 0x52,
	0x2e, 0xf8, 0x04, 0x14, 0x15, 0xd5, 0x08, 0x8d, 0x5f, 0x3a, 0xfe, 0xf8, 0x63, 0x14, 0xc9, 0x1f,
	0xbe, 0x9a, 0x58, 0x88, 0x98, 0x64, 0xf1, 0x92, 0x54, 0x6c, 0x28, 0x96, 0xc6, 0x85, 0x1f, 0x70,
	0xe0, 0xdc, 0xda, 0xd6, 0xe6, 0xd6, 0xce, 0x3d, 0xcd, 0x26, 0xf9, 0x99, 0xbd, 0x02, 0x93, 0x8e,
	0x6f, 0x3a, 0x0a, 0x25, 0x5c, 0x8f, 0x85, 0x92, 0x55, 0x96, 0xd3, 0x14, 0xd3, 0xa8, 0x6b, 0x0d,
	0xd7, 0x0e, 0x4a, 0x10, 0x99, 0xf5, 0xc4, 0x03, 0xb9, 0xbe, 0x1e, 0x08, 0x08, 0xcf, 0x0b, 0x60,
	0xa1, 0x73, 0xb6, 0xa1, 0xe2, 0x88, 0xbf, 0x77, 0xe3, 0x42, 0x7b, 0xb7, 0xd4, 0x34, 0x57, 0xe8,
	0x35, 0xcd, 0xbd, 0x06, 0x26, 0x42, 0x59, 0x39, 0xf4, 0x35, 0x47, 0x31, 0xc8, 0xab, 0xb7, 0xc8,
	0x88, 0x69, 0xe9, 0xb0, 0x3f, 0x35, 0x1d, 0x92, 0x94, 0x64, 0x62, 0x87, 0x61, 0x0e, 0xd0, 0x6e,
	0xc3, 0xe4, 0x01, 0x85, 0xe3, 0xc1, 0x50, 0x0b, 0xd9, 0xf4, 0xac, 0x60, 0xd0, 0xe3, 0x0b, 0xec,
	0x27, 0x5c, 0x02, 0xa3, 0x2a, 0xc2, 0x8a, 0xad, 0xb5, 0x4f, 0x99, 0x47, 0xc4, 0xf0, 0x23, 0xb8,
	0x08, 0x46, 0x3d, 0x3a, 0x44, 0xa1, 0xd9, 0x89, 0x36, 0x60, 0x8f, 0x08, 0xb8, 0xf0, 0x23, 0x0e,
	0x2c, 0x66, 0x04, 0x80, 0x7f, 0x5c, 0x1a, 0xf3, 0x9c, 0x77, 0x5c, 0x1a, 0xf1, 0x0e, 0xfc, 0x0c,
	0x4c, 0xec, 0x69, 0x0d, 0x2d, 0xbc, 0xb8, 0xd8, 0x87, 0x4f, 0x97, 0x52, 0x83, 0x3b, 0xcb, 0x99,
	0xe2, 0xb8, 0x87, 0x96, 0xba, 0xbe, 0xfa, 0x3b, 0xd7, 0xd7, 0xcd, 0xfe, 0xe1, 0x42, 0xa9, 0x4f,
	0xf8, 0xf3, 0x01, 0x30, 0xbf, 0x6a, 0x59, 0xba, 0xf7, 0x76, 0x8d, 0x7f, 0x2e, 0x95, 0xf3, 0x61,
	0xdd, 0x01, 0x98, 0x63, 0x64, 0xcb, 0x94, 0x55, 0x29, 0xe0, 0x4c, 0x75, 0xba, 0x16, 0xbc, 0xa8,
	0xf9, 0xb0, 0xeb, 0xf5, 0x9a, 0xb0, 0x96, 0xc4, 0x59, 0x4a, 0xd6, 0x4c, 0x59, 0x5d, 0xf3, 0x3a,
	0xb1, 0x36, 0xe8, 0x00, 0xde, 0x51, 0x52, 0xc6, 0x65, 0xd5, 0xb6, 0xab, 0xdd, 0x1e, 0xda, 0x26,
	0x0d, 0x3b, 0xe3, 0x28, 0x49, 0xa3, 0xba, 0x80, 0x57, 0x54, 0x23, 0x79, 0xd4, 0xfe, 0x97, 0xa0,
	0xed, 0x8c, 0xa2, 0x1a, 0x09, 0xc3, 0x3e, 0x02, 0xf3, 0xd4, 0xc1, 0x52, 0x8b, 0xf9, 0xdf, 0xe7,
	0xed, 0xde, 0xc8, 0xac, 0x74, 0xf1, 0x6b, 0x3d, 0x84, 0x4e, 0xd2, 0xd8, 0x3c, 0x1d, 0x22, 0xd2,
	0xad, 0x6d, 0x6b, 0x57, 0x4d, 0xb1, 0xf5, 0x60, 0x8e, 0xad, 0xf3, 0xbf, 0xca, 0x12, 0x67, 0x5c,
	0x35, 0xc1, 0xd6, 0xc2, 0xf7, 0x07, 0xc0, 0x42, 0x72, 0x60, 0x7a, 0x1f, 0xea, 0xbd, 0x0a, 0x8a,
	0x61, 0xa6, 0xee, 0x7f, 0xa6, 0x17, 0x7d, 0x48, 0xd8, 0xb0, 0xb7, 0xd9, 0xb1, 0x4c, 0x53, 0xf7,
	0x3f, 0xd6, 0x1b, 0x65, 0xcf, 0x76, 0xc8, 0x23, 0xf2, 0x6a, 0xf4, 0xde, 0xdf, 0x38, 0x58, 0x32,
	0x5e, 0xd1, 0xb6, 0x28, 0x42, 0xbf, 0xe9, 0x5a, 0xd0, 0x02, 0x11, 0x80, 0x41, 0xd4, 0xb7, 0x87,
	0x67, 0x01, 0x70, 0xb9, 0xf7, 0x00, 0xa0, 0x56, 0x98, 0xf4, 0x03, 0xbd, 0x3d, 0xf5, 0x3d, 0x30,
	0xe9, 0xc7, 0x78, 0x7b, 0x14, 0xe6, 0xec, 0x4b, 0x3d, 0x07, 0x37, 0x1d, 0xa4, 0xe4, 0x85, 0x75,
	0x7b, 0x0c, 0x05, 0x4c, 0xfa, 0x11, 0xdd, 0x1e, 0x63, 0xf0, 0x44, 0x9a, 0x94, 0xbc, 0x20, 0x6e,
	0x0f, 0xa2, 0x83, 0x99, 0xa4, 0xf8, 0xc5, 0x5e, 0x81, 0xf8, 0xfd, 0xe3, 0x44, 0x2e, 0x1d, 0x6a,
	0xaa, 0x33, 0x66, 0xa9, 0xd9, 0xfc, 0x70, 0x6d, 0xab, 0x34, 0x9c, 0x63, 0xb6, 0xac, 0x4f, 0xee,
	0xc4, 0x92, 0x17, 0xa1, 0x01, 0x9c, 0xf0, 0xff, 0xfd, 0xa0, 0xb2, 0xaa, 0xeb, 0x59, 0x89, 0xf3,
	0x57, 0xa9, 0xf1, 0x57, 0xa9, 0xf1, 0x97, 0x94, 0x1a, 0xef, 0x77, 0x7e, 0x46, 0x74, 0x5f, 0xae,
	0xb3, 0xc6, 0x10, 0xc5, 0xcb, 0x7e, 0x75, 0xfb, 0x04, 0xb0, 0xd0, 0x26, 0x80, 0xc2, 0xe3, 0x02,
	0x38, 0x9f, 0x12, 0xd6, 0xe1, 0x01, 0x58, 0xfe, 0x7d, 0x90, 0x98, 0x05, 0xd9, 0x27, 0xf5, 0xdd,
	0xfb, 0x3a, 0x61, 0xe2, 0x49, 0xb9, 0x50, 0x4b, 0xca, 0x53, 0x7d, 0x2f, 0x61, 0xac, 0x8e, 0x6c,
	0x25, 0xfc, 0x9c, 0x03, 0xaf, 0xe7, 0x1b, 0x81, 0x2d, 0xf2, 0xcb, 0x60, 0xb6, 0x7d, 0x2c, 0x81,
	0xb5, 0x86, 0x21, 0x3b, 0xae, 0x8d, 0x24, 0x8d, 0x51, 0xe6, 0xe2, 0x8d, 0x53, 0xe2, 0x74, 0xd0,
	0xbe, 0xeb, 0x37, 0x6f, 0xa9, 0xd0, 0x02, 0x7c, 0x5b, 0xae, 0xa5, 0x99, 0x3a, 0x2b, 0x88, 0xd0,
	0x4a, 0x17, 0xfb, 0x3a, 0xff, 0xdd, 0xf8, 0xb5, 0x90, 0x50, 0x9d, 0xa2, 0xb6, 0x6a, 0x59, 0xd7,
	0xbd, 0xbf, 0xef, 0xf9, 0xc2, 0x44, 0x9b, 0x1b, 0xa7, 0xc4, 0xf6, 0x7c, 0x22, 0x2d, 0x6b, 0xaf,
	0x82, 0x49, 0xc2, 0x4c, 0x59, 0x6c, 0x7a, 0x05, 0x31, 0x38, 0xf1, 0xd5, 0x53, 0xae, 0xf0, 0xfc,
	0x29, 0xc7, 0x1d, 0x3d, 0xe5, 0xfa, 0x2e, 0x5e, 0x58, 0xa1, 0xe7, 0xaa, 0x85, 0x37, 0x3f, 0x00,
	0xc3, 0xfe, 0x15, 0x00, 0x38, 0x02, 0x06, 0x36, 0x44, 0xf1, 0xb6, 0x58, 0x3a, 0x05, 0x87, 0x41,
	0xff, 0xd6, 0xad, 0xeb, 0xb7, 0x4b, 0x1c, 0x1c, 0x05, 0x43, 0xf7, 0x57, 0xc5, 0x5b, 0x5b, 0xb7,
	0x36, 0x4b, 0x05, 0xf2, 0x63, 0xf7, 0xee, 0xfa, 0xfa, 0xc6, 0xee, 0x6e, 0xa9, 0xef, 0xe2, 0x4f,
	0x97, 0x00, 0xbc, 0xe5, 0x3b, 0x60, 0x9d, 0x5e, 0xa6, 0x5d, 0xdd, 0xd9, 0x82, 0xff, 0xc6, 0x81,
	0xe2, 0xba, 0x8c, 0x15, 0x99, 0xec, 0xc2, 0x75, 0xe4, 0x20, 0x58, 0x4d, 0xf5, 0x5a, 0xa4, 0x9f,
	0x67, 0xe8, 0x72, 0xad, 0xdb, 0xee, 0xde, 0x95, 0xa1, 0xc6, 0xd1, 0x33, 0xfe, 0xed, 0xfa, 0xa5,
	0x87, 0x4a, 0x55, 0x31, 0x0d, 0x6c, 0xea, 0xa8, 0xba, 0x27, 0x63, 0x4d, 0xa9, 0xca, 0x6a, 0x53,
	0x33, 0x2e, 0x2c, 0xb5, 0x10, 0xae, 0x6a, 0x66, 0xd5, 0x95, 0x9b, 0xec, 0x49, 0xf5, 0xc0, 0xd6,
	0x1c, 0xf4, 0xf8, 0x47, 0xff, 0xf9, 0xa7, 0x85, 0xaa, 0x70, 0xde, 0xbb, 0x0c, 0xdc, 0xbe, 0xec,
	0x8a, 0x97, 0xbf, 0x20, 0x7f, 0x3f, 0x5a, 0x56, 0xd8, 0x60, 0x92, 0x4a, 0x47, 0xbb, 0xc2, 0xbd,
	0x09, 0xbf, 0x57, 0x00, 0x0b, 0x59, 0x57, 0x59, 0x60, 0xfa, 0xdb, 0x2d, 0xe7, 0xb6, 0x4e, 0xf9,
	0x83, 0x63, 0x4a, 0x62, 0x4b, 0x78, 0xcc, 0x1d, 0x3d, 0xe3, 0x3f, 0xa0, 0xfa, 0xd3, 0xaa, 0x21,
	0x6a, 0x22, 0xbc, 0x5f, 0xc5, 0x8e, 0x6c, 0xa8, 0xb2, 0xad, 0x56, 0x5d, 0x8c, 0xec, 0x0b, 0x9e,
	0x0d, 0x34, 0xa3, 0x6e, 0xcb, 0xd8, 0xb1, 0x5d, 0x85, 0xc4, 0x66, 0xc8, 0x10, 0x1f, 0x09, 0x57,
	0x12, 0x0c, 0x81, 0x0f, 0xb1, 0x83, 0x9a, 0xcb, 0x2e, 0x9d, 0x81, 0x94, 0x7a, 0x5f, 0x88, 0x98,
	0xe6, 0xfb, 0x05, 0x50, 0x4e, 0xbf, 0xb1, 0x0a, 0xaf, 0x64, 0xdc, 0x3f, 0xc9, 0xb9, 0xc0, 0x5a,
	0xbe, 0x7a, 0x2c, 0x59, 0x2f, 0x36, 0x7e, 0x79, 0xc6, 0xf9, 0x22, 0xf8, 0xfb, 0xd1, 0x72, 0x70,
	0x39, 0x56, 0xaa, 0x9b, 0xb6, 0xa4, 0x79, 0x13, 0x91, 0x5a, 0x9a, 0x85, 0x89, 0x71, 0xfe, 0xa2,
	0x00, 0xca, 0x9b, 0xc7, 0x31, 0xce, 0xe6, 0x09, 0x8c, 0x93, 0x7f, 0xad, 0x57, 0xf8, 0x43, 0xee,
	0xeb, 0xbf, 0x2f, 0x10, 0x03, 0x7d, 0x98, 0x6a, 0xa0, 0xa6, 0x69, 0x68, 0x8e, 0x69, 0x07, 0xab,
	0x28, 0x66, 0x24, 0x1b, 0xc9, 0x2a, 0xb5, 0xd1, 0x87, 0xf0, 0x04, 0x36, 0x82, 0xdf, 0x2d, 0x00,
	0x3e, 0xed, 0x66, 0x6d, 0xc6, 0xa2, 0xca, 0xb9, 0x44, 0x9c, 0xb1, 0xa8, 0x72, 0xaf, 0xf1, 0xfe,
	0xee, 0xd1, 0x33, 0xfe, 0x4a, 0x76, 0xd8, 0xf8, 0x26, 0xb1, 0x6c, 0xf3, 0xe1, 0x61, 0xd5, 0x2f,
	0xd8, 0x87, 0xe2, 0xe6, 0xaa, 0x70, 0x39, 0xc7, 0x26, 0x32, 0x9d, 0x83, 0x14, 0xbf, 0xca, 0x4b,
	0x62, 0xe6, 0xcf, 0x0a, 0x80, 0xdf, 0xec, 0xdd, 0x24, 0x9b, 0xc7, 0x36, 0x49, 0xde, 0x9d, 0x63,
	0xe1, 0x71, 0xef, 0xd1, 0x12, 0x33, 0x4d, 0x10, 0x2d, 0xef, 0xc3, 0x63, 0x5a, 0x06, 0xfe, 0x71,
	0x38, 0x52, 0x62, 0x17, 0x6f, 0xbb, 0x89, 0x94, 0xe4, 0xdb, 0xbe, 0xdd, 0x44, 0x4a, 0xda, 0x5d,
	0xe2, 0x87, 0x47, 0xcf, 0xf8, 0x95, 0xee, 0x22, 0xc5, 0xbb, 0x64, 0x76, 0x9c, 0x10, 0x89, 0x5f,
	0x24, 0x26, 0x21, 0xf2, 0x27, 0xe1, 0x10, 0xe9, 0xde, 0x16, 0x9b, 0xc7, 0xb6, 0x45, 0xde, 0x8d,
	0x67, 0xe1, 0x0b, 0x2f, 0x42, 0x2e, 0x75, 0x1d, 0x21, 0xbe, 0x49, 0x7a, 0x0f, 0x8d, 0xb8, 0x45,
	0xe0, 0xcf, 0x39, 0x30, 0x9b, 0x7c, 0xb9, 0x18, 0x5e, 0xce, 0x77, 0x6f, 0xd2, 0x5d, 0xe3, 0xf2,
	0x7b, 0x3d, 0xcb, 0x79, 0x86, 0x70, 0x8e, 0x9e, 0xf1, 0xef, 0x50, 0x23, 0xc8, 0xae, 0xaa, 0x39,
	0x55, 0xdd, 0x6c, 0xe0, 0x2a, 0xbd, 0xc9, 0x8b, 0xa3, 0x21, 0xd1, 0x40, 0x06, 0xb2, 0x65, 0x3d,
	0x14, 0x12, 0x1f, 0x08, 0xef, 0x76, 0x67, 0x80, 0xe8, 0x45, 0x63, 0x12, 0x10, 0x8f, 0x0b, 0x60,
	0x76, 0xb3, 0x57, 0x0b, 0x6c, 0x1e, 0xd3, 0x02, 0xd9, 0xb7, 0xac, 0x85, 0x03, 0x2f, 0x14, 0x56,
	0x52, 0xac, 0x10, 0x0f, 0x04, 0xdf, 0x10, 0x41, 0x20, 0x5c, 0x86, 0xc7, 0xb2, 0x03, 0x7c, 0xca,
	0x81, 0xe2, 0xae, 0xdb, 0x68, 0x20, 0xec, 0xd0, 0x6a, 0x39, 0x86, 0xe9, 0x37, 0x4c, 0x23, 0xfd,
	0x08, 0x0d, 0x7b, 0xb3, 0xdb, 0xae, 0xd8, 0x12, 0x76, 0x3d, 0x0d, 0xa7, 0xa8, 0x86, 0xde, 0xb1,
	0x70, 0x55, 0xa6, 0x77, 0x61, 0xa9, 0x06, 0x17, 0x85, 0x6a, 0x8e, 0x06, 0x98, 0x81, 0x56, 0xe9,
	0x45, 0x5f, 0xea, 0xc2, 0x7f, 0xe5, 0x40, 0x31, 0x72, 0xf7, 0x16, 0xbe, 0xd1, 0xf5, 0x8d, 0xe5,
	0x0c, 0xe2, 0x9c, 0x78, 0x9d, 0x57, 0xf8, 0xb6, 0xa7, 0xc1, 0x72, 0x02, 0x79, 0xce, 0xf5, 0x4f,
	0x32, 0x77, 0xf6, 0x28, 0xa3, 0xff, 0xdf, 0x5d, 0x24, 0x9b, 0x0c, 0x48, 0x14, 0xfb, 0x3f, 0x0e,
	0x4c, 0x25, 0x5c, 0xc5, 0x85, 0xe9, 0x47, 0x3c, 0xe9, 0xf7, 0x7a, 0xcb, 0xef, 0xf6, 0x26, 0xe4,
	0xa9, 0xdb, 0xea, 0x39, 0x3b, 0x75, 0x28, 0xbd, 0x22, 0xd4, 0xd2, 0x95, 0x36, 0x82, 0xb1, 0x25,
	0xcd, 0x1f, 0x9c, 0xa8, 0xfe, 0x7b, 0x05, 0x30, 0x9d, 0xb4, 0xc3, 0x84, 0xe9, 0x6a, 0x64, 0x14,
	0x9b, 0xca, 0x97, 0x7a, 0x94, 0xf2, 0xb4, 0xff, 0x9d, 0x93, 0x6b, 0xdf, 0x45, 0x6a, 0x6a, 0xcf,
	0x20, 0x6a, 0x83, 0xff, 0xe5, 0xc0, 0xe9, 0x94, 0x8d, 0x36, 0x4c, 0xcf, 0x31, 0xd9, 0x65, 0xb7,
	0xe3, 0x5a, 0x42, 0xf3, 0x2c, 0xf1, 0x0a, 0xb5, 0xc4, 0x81, 0x2c, 0x5b, 0x6d, 0x1b, 0xc8, 0xba,
	0x5e, 0x35, 0x70, 0x55, 0x95, 0xf1, 0xfe, 0x9e, 0x29, 0xdb, 0xde, 0x3b, 0x49, 0x58, 0x49, 0xf7,
	0xba, 0xac, 0xeb, 0x52, 0xaa, 0xda, 0xdf, 0x2b, 0x80, 0x72, 0x7a, 0x7d, 0x01, 0xfe, 0x7a, 0xaf,
	0x9a, 0xc7, 0x8b, 0x12, 0xe5, 0xd5, 0x13, 0x20, 0x78, 0xe6, 0x70, 0x7b, 0x35, 0xc7, 0x35, 0xe1,
	0xa3, 0x63, 0x98, 0x43, 0x6a, 0x97, 0x24, 0x48, 0x42, 0x28, 0x5f, 0xf8, 0xea, 0x29, 0xd7, 0xf7,
	0x2f, 0x4f, 0xb9, 0x4a, 0x9a, 0x02, 0xec, 0xfb, 0x8d, 0xc7, 0xff, 0xcc, 0x17, 0x4a, 0xdc, 0xda,
	0x1f, 0x71, 0xcf, 0xbf, 0xa9, 0x9c, 0xfa, 0xf1, 0x37, 0x95, 0x53, 0x3f, 0xfb, 0xa6, 0xc2, 0x7d,
	0xe7, 0xa8, 0xc2, 0xfd, 0xf5, 0x51, 0x85, 0xfb, 0xfa, 0xa8, 0xc2, 0x3d, 0x3f, 0xaa, 0x70, 0x3f,
	0x39, 0xaa, 0x70, 0xff, 0x75, 0x54, 0x39, 0xf5, 0xb3, 0xa3, 0x0a, 0xf7, 0xdd, 0x17, 0x95, 0x53,
	0x5f, 0xbd, 0xa8, 0x70, 0xcf, 0x5f, 0x54, 0x4e, 0xfd, 0xf8, 0x45, 0xe5, 0xd4, 0xa7, 0x1f, 0x37,
	0x4c, 0xeb, 0x41, 0xa3, 0xd6, 0x32, 0xc9, 0xd0, 0xb6, 0x5c, 0x73, 0xf1, 0x32, 0xfd, 0xa3, 0x6e,
	0xda, 0x4d, 0xc2, 0x50, 0x5b, 0x9a, 0x8a, 0xec, 0xaa, 0xdf, 0xbc, 0x6c, 0xed, 0x35, 0xcc, 0x65,
	0xf4, 0xd0, 0xf1, 0xfe, 0x87, 0x54, 0xfc, 0x7f, 0x61, 0xed, 0x0d, 0xd2, 0x03, 0xd9, 0x95, 0x5f,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x35, 0x28, 0x2e, 0x94, 0x5e, 0x4c, 0x00, 0x00,
}

func (x Severity) String() string {
	s, ok := Severity_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SetFastACLsForInternetVIPsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetFastACLsForInternetVIPsRequest)
	if !ok {
		that2, ok := that.(SetFastACLsForInternetVIPsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.FastAcls) != len(that1.FastAcls) {
		return false
	}
	for i := range this.FastAcls {
		if !this.FastAcls[i].Equal(that1.FastAcls[i]) {
			return false
		}
	}
	return true
}
func (this *SetFastACLsForInternetVIPsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetFastACLsForInternetVIPsResponse)
	if !ok {
		that2, ok := that.(SetFastACLsForInternetVIPsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetFastACLsForInternetVIPsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFastACLsForInternetVIPsRequest)
	if !ok {
		that2, ok := that.(GetFastACLsForInternetVIPsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetFastACLsForInternetVIPsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFastACLsForInternetVIPsResponse)
	if !ok {
		that2, ok := that.(GetFastACLsForInternetVIPsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FastAcls) != len(that1.FastAcls) {
		return false
	}
	for i := range this.FastAcls {
		if !this.FastAcls[i].Equal(that1.FastAcls[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveServicePoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveServicePoliciesRequest)
	if !ok {
		that2, ok := that.(SetActiveServicePoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveServicePoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveServicePoliciesResponse)
	if !ok {
		that2, ok := that.(SetActiveServicePoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetActiveServicePoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveServicePoliciesRequest)
	if !ok {
		that2, ok := that.(GetActiveServicePoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetActiveServicePoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveServicePoliciesResponse)
	if !ok {
		that2, ok := that.(GetActiveServicePoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveNetworkPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveNetworkPoliciesRequest)
	if !ok {
		that2, ok := that.(SetActiveNetworkPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.NetworkPolicies) != len(that1.NetworkPolicies) {
		return false
	}
	for i := range this.NetworkPolicies {
		if !this.NetworkPolicies[i].Equal(that1.NetworkPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveNetworkPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveNetworkPoliciesResponse)
	if !ok {
		that2, ok := that.(SetActiveNetworkPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetActiveNetworkPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveNetworkPoliciesRequest)
	if !ok {
		that2, ok := that.(GetActiveNetworkPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetActiveNetworkPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveNetworkPoliciesResponse)
	if !ok {
		that2, ok := that.(GetActiveNetworkPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NetworkPolicies) != len(that1.NetworkPolicies) {
		return false
	}
	for i := range this.NetworkPolicies {
		if !this.NetworkPolicies[i].Equal(that1.NetworkPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveAlertPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveAlertPoliciesRequest)
	if !ok {
		that2, ok := that.(SetActiveAlertPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.AlertPolicies) != len(that1.AlertPolicies) {
		return false
	}
	for i := range this.AlertPolicies {
		if !this.AlertPolicies[i].Equal(that1.AlertPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SetActiveAlertPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetActiveAlertPoliciesResponse)
	if !ok {
		that2, ok := that.(SetActiveAlertPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetActiveAlertPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveAlertPoliciesRequest)
	if !ok {
		that2, ok := that.(GetActiveAlertPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetActiveAlertPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetActiveAlertPoliciesResponse)
	if !ok {
		that2, ok := that.(GetActiveAlertPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AlertPolicies) != len(that1.AlertPolicies) {
		return false
	}
	for i := range this.AlertPolicies {
		if !this.AlertPolicies[i].Equal(that1.AlertPolicies[i]) {
			return false
		}
	}
	if len(this.AlertPoliciesStatus) != len(that1.AlertPoliciesStatus) {
		return false
	}
	for i := range this.AlertPoliciesStatus {
		if !this.AlertPoliciesStatus[i].Equal(that1.AlertPoliciesStatus[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateAllowAdvertiseOnPublicReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAllowAdvertiseOnPublicReq)
	if !ok {
		that2, ok := that.(UpdateAllowAdvertiseOnPublicReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.AllowAdvertiseOnPublic != that1.AllowAdvertiseOnPublic {
		return false
	}
	return true
}
func (this *UpdateAllowAdvertiseOnPublicResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAllowAdvertiseOnPublicResp)
	if !ok {
		that2, ok := that.(UpdateAllowAdvertiseOnPublicResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *ValidateRulesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateRulesReq)
	if !ok {
		that2, ok := that.(ValidateRulesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.ValidatorEvaluation) != len(that1.ValidatorEvaluation) {
		return false
	}
	for i := range this.ValidatorEvaluation {
		if this.ValidatorEvaluation[i] != that1.ValidatorEvaluation[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ValidationResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationResult)
	if !ok {
		that2, ok := that.(ValidationResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Severity != that1.Severity {
		return false
	}
	return true
}
func (this *ValidateRulesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateRulesResponse)
	if !ok {
		that2, ok := that.(ValidateRulesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if len(this.ValidationResults) != len(that1.ValidationResults) {
		return false
	}
	for i := range this.ValidationResults {
		if !this.ValidationResults[i].Equal(that1.ValidationResults[i]) {
			return false
		}
	}
	return true
}
func (this *NetworkingInventoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkingInventoryRequest)
	if !ok {
		that2, ok := that.(NetworkingInventoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NetworkingInventoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkingInventoryResponse)
	if !ok {
		that2, ok := that.(NetworkingInventoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GlobalNetworks != that1.GlobalNetworks {
		return false
	}
	if this.Sites != that1.Sites {
		return false
	}
	if this.SiteMeshGroups != that1.SiteMeshGroups {
		return false
	}
	if this.DcClusterGroups != that1.DcClusterGroups {
		return false
	}
	if this.CloudLinks != that1.CloudLinks {
		return false
	}
	if this.Segments != that1.Segments {
		return false
	}
	return true
}
func (this *UDPLoadbalancerResultType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPLoadbalancerResultType)
	if !ok {
		that2, ok := that.(UDPLoadbalancerResultType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateAdvertisement.Equal(that1.PrivateAdvertisement) {
		return false
	}
	if !this.PublicAdvertisment.Equal(that1.PublicAdvertisment) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *UDPLoadbalancerInventoryFilterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPLoadbalancerInventoryFilterType)
	if !ok {
		that2, ok := that.(UDPLoadbalancerInventoryFilterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateAdvertisement.Equal(that1.PrivateAdvertisement) {
		return false
	}
	if !this.PublicAdvertisment.Equal(that1.PublicAdvertisment) {
		return false
	}
	return true
}
func (this *UDPLoadbalancerInventoryType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPLoadbalancerInventoryType)
	if !ok {
		that2, ok := that.(UDPLoadbalancerInventoryType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrivateAdvertisement != that1.PrivateAdvertisement {
		return false
	}
	if this.PublicAdvertisment != that1.PublicAdvertisment {
		return false
	}
	if len(this.UdplbResults) != len(that1.UdplbResults) {
		return false
	}
	for i := range this.UdplbResults {
		if !this.UdplbResults[i].Equal(that1.UdplbResults[i]) {
			return false
		}
	}
	return true
}
func (this *TCPLoadbalancerResultType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLoadbalancerResultType)
	if !ok {
		that2, ok := that.(TCPLoadbalancerResultType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsEncryption.Equal(that1.TlsEncryption) {
		return false
	}
	if !this.NamespaceServicePolicy.Equal(that1.NamespaceServicePolicy) {
		return false
	}
	if !this.ServicePolicy.Equal(that1.ServicePolicy) {
		return false
	}
	if !this.PrivateAdvertisement.Equal(that1.PrivateAdvertisement) {
		return false
	}
	if !this.PublicAdvertisment.Equal(that1.PublicAdvertisment) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *TCPLoadbalancerInventoryFilterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLoadbalancerInventoryFilterType)
	if !ok {
		that2, ok := that.(TCPLoadbalancerInventoryFilterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsEncryption.Equal(that1.TlsEncryption) {
		return false
	}
	if !this.NamespaceServicePolicy.Equal(that1.NamespaceServicePolicy) {
		return false
	}
	if !this.ServicePolicy.Equal(that1.ServicePolicy) {
		return false
	}
	if !this.PrivateAdvertisement.Equal(that1.PrivateAdvertisement) {
		return false
	}
	if !this.PublicAdvertisment.Equal(that1.PublicAdvertisment) {
		return false
	}
	return true
}
func (this *TCPLoadbalancerInventoryType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPLoadbalancerInventoryType)
	if !ok {
		that2, ok := that.(TCPLoadbalancerInventoryType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TlsEncryption != that1.TlsEncryption {
		return false
	}
	if this.NamespaceServicePolicy != that1.NamespaceServicePolicy {
		return false
	}
	if this.ServicePolicy != that1.ServicePolicy {
		return false
	}
	if this.PrivateAdvertisement != that1.PrivateAdvertisement {
		return false
	}
	if this.PublicAdvertisment != that1.PublicAdvertisment {
		return false
	}
	if len(this.TcplbResults) != len(that1.TcplbResults) {
		return false
	}
	for i := range this.TcplbResults {
		if !this.TcplbResults[i].Equal(that1.TcplbResults[i]) {
			return false
		}
	}
	return true
}
func (this *HTTPLoadbalancerInventoryFilterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLoadbalancerInventoryFilterType)
	if !ok {
		that2, ok := that.(HTTPLoadbalancerInventoryFilterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpOnly.Equal(that1.HttpOnly) {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	if !this.BotProtection.Equal(that1.BotProtection) {
		return false
	}
	if !this.ApiProtection.Equal(that1.ApiProtection) {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	if !this.NamespaceServicePolicy.Equal(that1.NamespaceServicePolicy) {
		return false
	}
	if !this.ServicePolicy.Equal(that1.ServicePolicy) {
		return false
	}
	if !this.IpReputation.Equal(that1.IpReputation) {
		return false
	}
	if !this.MaliciousUserDetection.Equal(that1.MaliciousUserDetection) {
		return false
	}
	if !this.PrivateAdvertisement.Equal(that1.PrivateAdvertisement) {
		return false
	}
	if !this.PublicAdvertisment.Equal(that1.PublicAdvertisment) {
		return false
	}
	if !this.WafExclusion.Equal(that1.WafExclusion) {
		return false
	}
	if !this.DdosProtection.Equal(that1.DdosProtection) {
		return false
	}
	if !this.DdosAutoMitigation.Equal(that1.DdosAutoMitigation) {
		return false
	}
	if !this.DdosMitigation.Equal(that1.DdosMitigation) {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if !this.TrustedClient.Equal(that1.TrustedClient) {
		return false
	}
	if !this.TrustedClientIpHeaders.Equal(that1.TrustedClientIpHeaders) {
		return false
	}
	if !this.ApiSchemaValidation.Equal(that1.ApiSchemaValidation) {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	if !this.DataGuard.Equal(that1.DataGuard) {
		return false
	}
	if !this.CsrfProtection.Equal(that1.CsrfProtection) {
		return false
	}
	if !this.GraphQlInspection.Equal(that1.GraphQlInspection) {
		return false
	}
	if !this.CookieProtection.Equal(that1.CookieProtection) {
		return false
	}
	if !this.ClientBlocking.Equal(that1.ClientBlocking) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if !this.Routes.Equal(that1.Routes) {
		return false
	}
	if !this.OriginServerSubset.Equal(that1.OriginServerSubset) {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	if !this.MutualTls.Equal(that1.MutualTls) {
		return false
	}
	if !this.ApiDiscovery.Equal(that1.ApiDiscovery) {
		return false
	}
	if !this.MalwareProtection.Equal(that1.MalwareProtection) {
		return false
	}
	return true
}
func (this *HTTPLoadbalancerResultType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLoadbalancerResultType)
	if !ok {
		that2, ok := that.(HTTPLoadbalancerResultType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpEnabled.Equal(that1.HttpEnabled) {
		return false
	}
	if !this.WafEnabled.Equal(that1.WafEnabled) {
		return false
	}
	if !this.BotProtectionEnabled.Equal(that1.BotProtectionEnabled) {
		return false
	}
	if !this.ApiProtectionEnabled.Equal(that1.ApiProtectionEnabled) {
		return false
	}
	if !this.ClientSideDefenseEnabled.Equal(that1.ClientSideDefenseEnabled) {
		return false
	}
	if !this.NamespaceServicePolicyEnabled.Equal(that1.NamespaceServicePolicyEnabled) {
		return false
	}
	if !this.ServicePolicyEnabled.Equal(that1.ServicePolicyEnabled) {
		return false
	}
	if !this.IpReputationEnabled.Equal(that1.IpReputationEnabled) {
		return false
	}
	if !this.MaliciousUserDetectionEnabled.Equal(that1.MaliciousUserDetectionEnabled) {
		return false
	}
	if !this.PrivateAdvertisementEnabled.Equal(that1.PrivateAdvertisementEnabled) {
		return false
	}
	if !this.PublicAdvertismentEnabled.Equal(that1.PublicAdvertismentEnabled) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.WafExclusionEnabled.Equal(that1.WafExclusionEnabled) {
		return false
	}
	if !this.DdosProtectionEnabled.Equal(that1.DdosProtectionEnabled) {
		return false
	}
	if !this.DdosAutoMitigationEnabled.Equal(that1.DdosAutoMitigationEnabled) {
		return false
	}
	if !this.DdosMitigationEnabled.Equal(that1.DdosMitigationEnabled) {
		return false
	}
	if !this.SlowDdosMitigationEnabled.Equal(that1.SlowDdosMitigationEnabled) {
		return false
	}
	if !this.MaliciousUserMitigationEnabled.Equal(that1.MaliciousUserMitigationEnabled) {
		return false
	}
	if !this.TrustedClientEnabled.Equal(that1.TrustedClientEnabled) {
		return false
	}
	if !this.TrustedClientIpHeadersEnabled.Equal(that1.TrustedClientIpHeadersEnabled) {
		return false
	}
	if !this.ApiSchemaValidationEnabled.Equal(that1.ApiSchemaValidationEnabled) {
		return false
	}
	if !this.ApiDefinitionEnabled.Equal(that1.ApiDefinitionEnabled) {
		return false
	}
	if !this.DataGuardEnabled.Equal(that1.DataGuardEnabled) {
		return false
	}
	if !this.CsrfProtectionEnabled.Equal(that1.CsrfProtectionEnabled) {
		return false
	}
	if !this.GraphQlInspectionEnabled.Equal(that1.GraphQlInspectionEnabled) {
		return false
	}
	if !this.CookieProtectionEnabled.Equal(that1.CookieProtectionEnabled) {
		return false
	}
	if !this.ClientBlockingEnabled.Equal(that1.ClientBlockingEnabled) {
		return false
	}
	if !this.CorsPolicyEnabled.Equal(that1.CorsPolicyEnabled) {
		return false
	}
	if !this.RoutesEnabled.Equal(that1.RoutesEnabled) {
		return false
	}
	if !this.OriginServerSubsetEnabled.Equal(that1.OriginServerSubsetEnabled) {
		return false
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if this.DnsInfo != that1.DnsInfo {
		return false
	}
	if this.VipType != that1.VipType {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.HttpListenPortChoice != that1.HttpListenPortChoice {
		return false
	}
	if !this.DefaultLoadbalancerEnabled.Equal(that1.DefaultLoadbalancerEnabled) {
		return false
	}
	if !this.MutualTlsEnabled.Equal(that1.MutualTlsEnabled) {
		return false
	}
	if this.TlsSecurityLevel != that1.TlsSecurityLevel {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if this.CertificationStatus != that1.CertificationStatus {
		return false
	}
	if !this.CertificationExpirationDate.Equal(that1.CertificationExpirationDate) {
		return false
	}
	if len(this.WafPolicyRef) != len(that1.WafPolicyRef) {
		return false
	}
	for i := range this.WafPolicyRef {
		if !this.WafPolicyRef[i].Equal(that1.WafPolicyRef[i]) {
			return false
		}
	}
	if !this.ApiDiscoveryEnabled.Equal(that1.ApiDiscoveryEnabled) {
		return false
	}
	if this.WafEnforcementMode != that1.WafEnforcementMode {
		return false
	}
	if !this.MalwareProtectionEnabled.Equal(that1.MalwareProtectionEnabled) {
		return false
	}
	return true
}
func (this *HTTPLoadbalancerInventoryType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLoadbalancerInventoryType)
	if !ok {
		that2, ok := that.(HTTPLoadbalancerInventoryType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpOnly != that1.HttpOnly {
		return false
	}
	if this.Waf != that1.Waf {
		return false
	}
	if this.BotProtection != that1.BotProtection {
		return false
	}
	if this.ApiProtection != that1.ApiProtection {
		return false
	}
	if this.DdosProtection != that1.DdosProtection {
		return false
	}
	if this.ClientSideDefense != that1.ClientSideDefense {
		return false
	}
	if this.NamespaceServicePolicy != that1.NamespaceServicePolicy {
		return false
	}
	if this.ServicePolicy != that1.ServicePolicy {
		return false
	}
	if this.IpReputation != that1.IpReputation {
		return false
	}
	if this.MaliciousUserDetection != that1.MaliciousUserDetection {
		return false
	}
	if this.PrivateAdvertisement != that1.PrivateAdvertisement {
		return false
	}
	if this.PublicAdvertisment != that1.PublicAdvertisment {
		return false
	}
	if len(this.HttplbResults) != len(that1.HttplbResults) {
		return false
	}
	for i := range this.HttplbResults {
		if !this.HttplbResults[i].Equal(that1.HttplbResults[i]) {
			return false
		}
	}
	if this.ApiDiscovery != that1.ApiDiscovery {
		return false
	}
	if len(this.CdnlbResults) != len(that1.CdnlbResults) {
		return false
	}
	for i := range this.CdnlbResults {
		if !this.CdnlbResults[i].Equal(that1.CdnlbResults[i]) {
			return false
		}
	}
	if this.MalwareProtection != that1.MalwareProtection {
		return false
	}
	return true
}
func (this *BIGIPVirtualServerInventoryFilterType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BIGIPVirtualServerInventoryFilterType)
	if !ok {
		that2, ok := that.(BIGIPVirtualServerInventoryFilterType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDiscovery.Equal(that1.ApiDiscovery) {
		return false
	}
	if !this.WafConfigured.Equal(that1.WafConfigured) {
		return false
	}
	return true
}
func (this *BIGIPVirtualServerResultType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BIGIPVirtualServerResultType)
	if !ok {
		that2, ok := that.(BIGIPVirtualServerResultType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ApiDiscoveryEnabled.Equal(that1.ApiDiscoveryEnabled) {
		return false
	}
	if this.WafPolicyName != that1.WafPolicyName {
		return false
	}
	if this.WafEnforcementMode != that1.WafEnforcementMode {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *BIGIPVirtualServerInventoryType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BIGIPVirtualServerInventoryType)
	if !ok {
		that2, ok := that.(BIGIPVirtualServerInventoryType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WafConfigured != that1.WafConfigured {
		return false
	}
	if len(this.BigiplbResults) != len(that1.BigiplbResults) {
		return false
	}
	for i := range this.BigiplbResults {
		if !this.BigiplbResults[i].Equal(that1.BigiplbResults[i]) {
			return false
		}
	}
	if this.ApiDiscovery != that1.ApiDiscovery {
		return false
	}
	return true
}
func (this *ApplicationInventoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationInventoryRequest)
	if !ok {
		that2, ok := that.(ApplicationInventoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.HttpLoadBalancerFilter.Equal(that1.HttpLoadBalancerFilter) {
		return false
	}
	if !this.TcpLoadBalancerFilter.Equal(that1.TcpLoadBalancerFilter) {
		return false
	}
	if !this.CdnLoadBalancerFilter.Equal(that1.CdnLoadBalancerFilter) {
		return false
	}
	if !this.BigipVirtualServerFilter.Equal(that1.BigipVirtualServerFilter) {
		return false
	}
	if !this.UdpLoadBalancerFilter.Equal(that1.UdpLoadBalancerFilter) {
		return false
	}
	return true
}
func (this *ApplicationInventoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationInventoryResponse)
	if !ok {
		that2, ok := that.(ApplicationInventoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Loadbalancers != that1.Loadbalancers {
		return false
	}
	if this.OriginPools != that1.OriginPools {
		return false
	}
	if this.ServicesDiscovered != that1.ServicesDiscovered {
		return false
	}
	if !this.HttpLoadbalancers.Equal(that1.HttpLoadbalancers) {
		return false
	}
	if !this.TcpLoadbalancers.Equal(that1.TcpLoadbalancers) {
		return false
	}
	if !this.CdnLoadbalancers.Equal(that1.CdnLoadbalancers) {
		return false
	}
	if !this.BigipVirtualServers.Equal(that1.BigipVirtualServers) {
		return false
	}
	if !this.UdpLoadbalancers.Equal(that1.UdpLoadbalancers) {
		return false
	}
	return true
}
func (this *AllApplicationInventoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllApplicationInventoryRequest)
	if !ok {
		that2, ok := that.(AllApplicationInventoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadBalancerFilter.Equal(that1.HttpLoadBalancerFilter) {
		return false
	}
	if !this.TcpLoadBalancerFilter.Equal(that1.TcpLoadBalancerFilter) {
		return false
	}
	if !this.CdnLoadBalancerFilter.Equal(that1.CdnLoadBalancerFilter) {
		return false
	}
	if !this.BigipVirtualServerFilter.Equal(that1.BigipVirtualServerFilter) {
		return false
	}
	if !this.UdpLoadBalancerFilter.Equal(that1.UdpLoadBalancerFilter) {
		return false
	}
	return true
}
func (this *HTTPLoadbalancerWafFilterResultType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLoadbalancerWafFilterResultType)
	if !ok {
		that2, ok := that.(HTTPLoadbalancerWafFilterResultType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *AllApplicationInventoryWafFilterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllApplicationInventoryWafFilterResponse)
	if !ok {
		that2, ok := that.(AllApplicationInventoryWafFilterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadbalancers) != len(that1.HttpLoadbalancers) {
		return false
	}
	for i := range this.HttpLoadbalancers {
		if !this.HttpLoadbalancers[i].Equal(that1.HttpLoadbalancers[i]) {
			return false
		}
	}
	if len(this.CdnLoadbalancers) != len(that1.CdnLoadbalancers) {
		return false
	}
	for i := range this.CdnLoadbalancers {
		if !this.CdnLoadbalancers[i].Equal(that1.CdnLoadbalancers[i]) {
			return false
		}
	}
	return true
}
func (this *AllApplicationInventoryWafFilterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllApplicationInventoryWafFilterRequest)
	if !ok {
		that2, ok := that.(AllApplicationInventoryWafFilterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.WafFilterChoice == nil {
		if this.WafFilterChoice != nil {
			return false
		}
	} else if this.WafFilterChoice == nil {
		return false
	} else if !this.WafFilterChoice.Equal(that1.WafFilterChoice) {
		return false
	}
	return true
}
func (this *AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllApplicationInventoryWafFilterRequest_ExclusionSignatureId)
	if !ok {
		that2, ok := that.(AllApplicationInventoryWafFilterRequest_ExclusionSignatureId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExclusionSignatureId != that1.ExclusionSignatureId {
		return false
	}
	return true
}
func (this *AllApplicationInventoryWafFilterRequest_ExclusionViolationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllApplicationInventoryWafFilterRequest_ExclusionViolationType)
	if !ok {
		that2, ok := that.(AllApplicationInventoryWafFilterRequest_ExclusionViolationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExclusionViolationType != that1.ExclusionViolationType {
		return false
	}
	return true
}
func (this *SetFastACLsForInternetVIPsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetFastACLsForInternetVIPsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.FastAcls != nil {
		s = append(s, "FastAcls: "+fmt.Sprintf("%#v", this.FastAcls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetFastACLsForInternetVIPsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetFastACLsForInternetVIPsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFastACLsForInternetVIPsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetFastACLsForInternetVIPsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFastACLsForInternetVIPsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetFastACLsForInternetVIPsResponse{")
	if this.FastAcls != nil {
		s = append(s, "FastAcls: "+fmt.Sprintf("%#v", this.FastAcls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveServicePoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetActiveServicePoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveServicePoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetActiveServicePoliciesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveServicePoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveServicePoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveServicePoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveServicePoliciesResponse{")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveNetworkPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetActiveNetworkPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.NetworkPolicies != nil {
		s = append(s, "NetworkPolicies: "+fmt.Sprintf("%#v", this.NetworkPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveNetworkPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetActiveNetworkPoliciesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveNetworkPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveNetworkPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveNetworkPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveNetworkPoliciesResponse{")
	if this.NetworkPolicies != nil {
		s = append(s, "NetworkPolicies: "+fmt.Sprintf("%#v", this.NetworkPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveAlertPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.SetActiveAlertPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.AlertPolicies != nil {
		s = append(s, "AlertPolicies: "+fmt.Sprintf("%#v", this.AlertPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetActiveAlertPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.SetActiveAlertPoliciesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveAlertPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.GetActiveAlertPoliciesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetActiveAlertPoliciesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.GetActiveAlertPoliciesResponse{")
	if this.AlertPolicies != nil {
		s = append(s, "AlertPolicies: "+fmt.Sprintf("%#v", this.AlertPolicies)+",\n")
	}
	if this.AlertPoliciesStatus != nil {
		s = append(s, "AlertPoliciesStatus: "+fmt.Sprintf("%#v", this.AlertPoliciesStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAllowAdvertiseOnPublicReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.UpdateAllowAdvertiseOnPublicReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "AllowAdvertiseOnPublic: "+fmt.Sprintf("%#v", this.AllowAdvertiseOnPublic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAllowAdvertiseOnPublicResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.UpdateAllowAdvertiseOnPublicResp{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateRulesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.ValidateRulesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	keysForValidatorEvaluation := make([]string, 0, len(this.ValidatorEvaluation))
	for k, _ := range this.ValidatorEvaluation {
		keysForValidatorEvaluation = append(keysForValidatorEvaluation, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValidatorEvaluation)
	mapStringForValidatorEvaluation := "map[string]string{"
	for _, k := range keysForValidatorEvaluation {
		mapStringForValidatorEvaluation += fmt.Sprintf("%#v: %#v,", k, this.ValidatorEvaluation[k])
	}
	mapStringForValidatorEvaluation += "}"
	if this.ValidatorEvaluation != nil {
		s = append(s, "ValidatorEvaluation: "+mapStringForValidatorEvaluation+",\n")
	}
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidationResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.ValidationResult{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Severity: "+fmt.Sprintf("%#v", this.Severity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateRulesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.ValidateRulesResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.ValidationResults != nil {
		s = append(s, "ValidationResults: "+fmt.Sprintf("%#v", this.ValidationResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkingInventoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespace.NetworkingInventoryRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NetworkingInventoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&namespace.NetworkingInventoryResponse{")
	s = append(s, "GlobalNetworks: "+fmt.Sprintf("%#v", this.GlobalNetworks)+",\n")
	s = append(s, "Sites: "+fmt.Sprintf("%#v", this.Sites)+",\n")
	s = append(s, "SiteMeshGroups: "+fmt.Sprintf("%#v", this.SiteMeshGroups)+",\n")
	s = append(s, "DcClusterGroups: "+fmt.Sprintf("%#v", this.DcClusterGroups)+",\n")
	s = append(s, "CloudLinks: "+fmt.Sprintf("%#v", this.CloudLinks)+",\n")
	s = append(s, "Segments: "+fmt.Sprintf("%#v", this.Segments)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UDPLoadbalancerResultType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespace.UDPLoadbalancerResultType{")
	if this.PrivateAdvertisement != nil {
		s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	}
	if this.PublicAdvertisment != nil {
		s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UDPLoadbalancerInventoryFilterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.UDPLoadbalancerInventoryFilterType{")
	if this.PrivateAdvertisement != nil {
		s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	}
	if this.PublicAdvertisment != nil {
		s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UDPLoadbalancerInventoryType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.UDPLoadbalancerInventoryType{")
	s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	if this.UdplbResults != nil {
		s = append(s, "UdplbResults: "+fmt.Sprintf("%#v", this.UdplbResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TCPLoadbalancerResultType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&namespace.TCPLoadbalancerResultType{")
	if this.TlsEncryption != nil {
		s = append(s, "TlsEncryption: "+fmt.Sprintf("%#v", this.TlsEncryption)+",\n")
	}
	if this.NamespaceServicePolicy != nil {
		s = append(s, "NamespaceServicePolicy: "+fmt.Sprintf("%#v", this.NamespaceServicePolicy)+",\n")
	}
	if this.ServicePolicy != nil {
		s = append(s, "ServicePolicy: "+fmt.Sprintf("%#v", this.ServicePolicy)+",\n")
	}
	if this.PrivateAdvertisement != nil {
		s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	}
	if this.PublicAdvertisment != nil {
		s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.RateLimit != nil {
		s = append(s, "RateLimit: "+fmt.Sprintf("%#v", this.RateLimit)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TCPLoadbalancerInventoryFilterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&namespace.TCPLoadbalancerInventoryFilterType{")
	if this.TlsEncryption != nil {
		s = append(s, "TlsEncryption: "+fmt.Sprintf("%#v", this.TlsEncryption)+",\n")
	}
	if this.NamespaceServicePolicy != nil {
		s = append(s, "NamespaceServicePolicy: "+fmt.Sprintf("%#v", this.NamespaceServicePolicy)+",\n")
	}
	if this.ServicePolicy != nil {
		s = append(s, "ServicePolicy: "+fmt.Sprintf("%#v", this.ServicePolicy)+",\n")
	}
	if this.PrivateAdvertisement != nil {
		s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	}
	if this.PublicAdvertisment != nil {
		s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TCPLoadbalancerInventoryType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&namespace.TCPLoadbalancerInventoryType{")
	s = append(s, "TlsEncryption: "+fmt.Sprintf("%#v", this.TlsEncryption)+",\n")
	s = append(s, "NamespaceServicePolicy: "+fmt.Sprintf("%#v", this.NamespaceServicePolicy)+",\n")
	s = append(s, "ServicePolicy: "+fmt.Sprintf("%#v", this.ServicePolicy)+",\n")
	s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	if this.TcplbResults != nil {
		s = append(s, "TcplbResults: "+fmt.Sprintf("%#v", this.TcplbResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLoadbalancerInventoryFilterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 37)
	s = append(s, "&namespace.HTTPLoadbalancerInventoryFilterType{")
	if this.HttpOnly != nil {
		s = append(s, "HttpOnly: "+fmt.Sprintf("%#v", this.HttpOnly)+",\n")
	}
	if this.Waf != nil {
		s = append(s, "Waf: "+fmt.Sprintf("%#v", this.Waf)+",\n")
	}
	if this.BotProtection != nil {
		s = append(s, "BotProtection: "+fmt.Sprintf("%#v", this.BotProtection)+",\n")
	}
	if this.ApiProtection != nil {
		s = append(s, "ApiProtection: "+fmt.Sprintf("%#v", this.ApiProtection)+",\n")
	}
	if this.ClientSideDefense != nil {
		s = append(s, "ClientSideDefense: "+fmt.Sprintf("%#v", this.ClientSideDefense)+",\n")
	}
	if this.NamespaceServicePolicy != nil {
		s = append(s, "NamespaceServicePolicy: "+fmt.Sprintf("%#v", this.NamespaceServicePolicy)+",\n")
	}
	if this.ServicePolicy != nil {
		s = append(s, "ServicePolicy: "+fmt.Sprintf("%#v", this.ServicePolicy)+",\n")
	}
	if this.IpReputation != nil {
		s = append(s, "IpReputation: "+fmt.Sprintf("%#v", this.IpReputation)+",\n")
	}
	if this.MaliciousUserDetection != nil {
		s = append(s, "MaliciousUserDetection: "+fmt.Sprintf("%#v", this.MaliciousUserDetection)+",\n")
	}
	if this.PrivateAdvertisement != nil {
		s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	}
	if this.PublicAdvertisment != nil {
		s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	}
	if this.WafExclusion != nil {
		s = append(s, "WafExclusion: "+fmt.Sprintf("%#v", this.WafExclusion)+",\n")
	}
	if this.DdosProtection != nil {
		s = append(s, "DdosProtection: "+fmt.Sprintf("%#v", this.DdosProtection)+",\n")
	}
	if this.DdosAutoMitigation != nil {
		s = append(s, "DdosAutoMitigation: "+fmt.Sprintf("%#v", this.DdosAutoMitigation)+",\n")
	}
	if this.DdosMitigation != nil {
		s = append(s, "DdosMitigation: "+fmt.Sprintf("%#v", this.DdosMitigation)+",\n")
	}
	if this.SlowDdosMitigation != nil {
		s = append(s, "SlowDdosMitigation: "+fmt.Sprintf("%#v", this.SlowDdosMitigation)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.TrustedClient != nil {
		s = append(s, "TrustedClient: "+fmt.Sprintf("%#v", this.TrustedClient)+",\n")
	}
	if this.TrustedClientIpHeaders != nil {
		s = append(s, "TrustedClientIpHeaders: "+fmt.Sprintf("%#v", this.TrustedClientIpHeaders)+",\n")
	}
	if this.ApiSchemaValidation != nil {
		s = append(s, "ApiSchemaValidation: "+fmt.Sprintf("%#v", this.ApiSchemaValidation)+",\n")
	}
	if this.ApiDefinition != nil {
		s = append(s, "ApiDefinition: "+fmt.Sprintf("%#v", this.ApiDefinition)+",\n")
	}
	if this.DataGuard != nil {
		s = append(s, "DataGuard: "+fmt.Sprintf("%#v", this.DataGuard)+",\n")
	}
	if this.CsrfProtection != nil {
		s = append(s, "CsrfProtection: "+fmt.Sprintf("%#v", this.CsrfProtection)+",\n")
	}
	if this.GraphQlInspection != nil {
		s = append(s, "GraphQlInspection: "+fmt.Sprintf("%#v", this.GraphQlInspection)+",\n")
	}
	if this.CookieProtection != nil {
		s = append(s, "CookieProtection: "+fmt.Sprintf("%#v", this.CookieProtection)+",\n")
	}
	if this.ClientBlocking != nil {
		s = append(s, "ClientBlocking: "+fmt.Sprintf("%#v", this.ClientBlocking)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.OriginServerSubset != nil {
		s = append(s, "OriginServerSubset: "+fmt.Sprintf("%#v", this.OriginServerSubset)+",\n")
	}
	if this.DefaultLoadbalancer != nil {
		s = append(s, "DefaultLoadbalancer: "+fmt.Sprintf("%#v", this.DefaultLoadbalancer)+",\n")
	}
	if this.MutualTls != nil {
		s = append(s, "MutualTls: "+fmt.Sprintf("%#v", this.MutualTls)+",\n")
	}
	if this.ApiDiscovery != nil {
		s = append(s, "ApiDiscovery: "+fmt.Sprintf("%#v", this.ApiDiscovery)+",\n")
	}
	if this.MalwareProtection != nil {
		s = append(s, "MalwareProtection: "+fmt.Sprintf("%#v", this.MalwareProtection)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLoadbalancerResultType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 52)
	s = append(s, "&namespace.HTTPLoadbalancerResultType{")
	if this.HttpEnabled != nil {
		s = append(s, "HttpEnabled: "+fmt.Sprintf("%#v", this.HttpEnabled)+",\n")
	}
	if this.WafEnabled != nil {
		s = append(s, "WafEnabled: "+fmt.Sprintf("%#v", this.WafEnabled)+",\n")
	}
	if this.BotProtectionEnabled != nil {
		s = append(s, "BotProtectionEnabled: "+fmt.Sprintf("%#v", this.BotProtectionEnabled)+",\n")
	}
	if this.ApiProtectionEnabled != nil {
		s = append(s, "ApiProtectionEnabled: "+fmt.Sprintf("%#v", this.ApiProtectionEnabled)+",\n")
	}
	if this.ClientSideDefenseEnabled != nil {
		s = append(s, "ClientSideDefenseEnabled: "+fmt.Sprintf("%#v", this.ClientSideDefenseEnabled)+",\n")
	}
	if this.NamespaceServicePolicyEnabled != nil {
		s = append(s, "NamespaceServicePolicyEnabled: "+fmt.Sprintf("%#v", this.NamespaceServicePolicyEnabled)+",\n")
	}
	if this.ServicePolicyEnabled != nil {
		s = append(s, "ServicePolicyEnabled: "+fmt.Sprintf("%#v", this.ServicePolicyEnabled)+",\n")
	}
	if this.IpReputationEnabled != nil {
		s = append(s, "IpReputationEnabled: "+fmt.Sprintf("%#v", this.IpReputationEnabled)+",\n")
	}
	if this.MaliciousUserDetectionEnabled != nil {
		s = append(s, "MaliciousUserDetectionEnabled: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionEnabled)+",\n")
	}
	if this.PrivateAdvertisementEnabled != nil {
		s = append(s, "PrivateAdvertisementEnabled: "+fmt.Sprintf("%#v", this.PrivateAdvertisementEnabled)+",\n")
	}
	if this.PublicAdvertismentEnabled != nil {
		s = append(s, "PublicAdvertismentEnabled: "+fmt.Sprintf("%#v", this.PublicAdvertismentEnabled)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.RateLimit != nil {
		s = append(s, "RateLimit: "+fmt.Sprintf("%#v", this.RateLimit)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.WafExclusionEnabled != nil {
		s = append(s, "WafExclusionEnabled: "+fmt.Sprintf("%#v", this.WafExclusionEnabled)+",\n")
	}
	if this.DdosProtectionEnabled != nil {
		s = append(s, "DdosProtectionEnabled: "+fmt.Sprintf("%#v", this.DdosProtectionEnabled)+",\n")
	}
	if this.DdosAutoMitigationEnabled != nil {
		s = append(s, "DdosAutoMitigationEnabled: "+fmt.Sprintf("%#v", this.DdosAutoMitigationEnabled)+",\n")
	}
	if this.DdosMitigationEnabled != nil {
		s = append(s, "DdosMitigationEnabled: "+fmt.Sprintf("%#v", this.DdosMitigationEnabled)+",\n")
	}
	if this.SlowDdosMitigationEnabled != nil {
		s = append(s, "SlowDdosMitigationEnabled: "+fmt.Sprintf("%#v", this.SlowDdosMitigationEnabled)+",\n")
	}
	if this.MaliciousUserMitigationEnabled != nil {
		s = append(s, "MaliciousUserMitigationEnabled: "+fmt.Sprintf("%#v", this.MaliciousUserMitigationEnabled)+",\n")
	}
	if this.TrustedClientEnabled != nil {
		s = append(s, "TrustedClientEnabled: "+fmt.Sprintf("%#v", this.TrustedClientEnabled)+",\n")
	}
	if this.TrustedClientIpHeadersEnabled != nil {
		s = append(s, "TrustedClientIpHeadersEnabled: "+fmt.Sprintf("%#v", this.TrustedClientIpHeadersEnabled)+",\n")
	}
	if this.ApiSchemaValidationEnabled != nil {
		s = append(s, "ApiSchemaValidationEnabled: "+fmt.Sprintf("%#v", this.ApiSchemaValidationEnabled)+",\n")
	}
	if this.ApiDefinitionEnabled != nil {
		s = append(s, "ApiDefinitionEnabled: "+fmt.Sprintf("%#v", this.ApiDefinitionEnabled)+",\n")
	}
	if this.DataGuardEnabled != nil {
		s = append(s, "DataGuardEnabled: "+fmt.Sprintf("%#v", this.DataGuardEnabled)+",\n")
	}
	if this.CsrfProtectionEnabled != nil {
		s = append(s, "CsrfProtectionEnabled: "+fmt.Sprintf("%#v", this.CsrfProtectionEnabled)+",\n")
	}
	if this.GraphQlInspectionEnabled != nil {
		s = append(s, "GraphQlInspectionEnabled: "+fmt.Sprintf("%#v", this.GraphQlInspectionEnabled)+",\n")
	}
	if this.CookieProtectionEnabled != nil {
		s = append(s, "CookieProtectionEnabled: "+fmt.Sprintf("%#v", this.CookieProtectionEnabled)+",\n")
	}
	if this.ClientBlockingEnabled != nil {
		s = append(s, "ClientBlockingEnabled: "+fmt.Sprintf("%#v", this.ClientBlockingEnabled)+",\n")
	}
	if this.CorsPolicyEnabled != nil {
		s = append(s, "CorsPolicyEnabled: "+fmt.Sprintf("%#v", this.CorsPolicyEnabled)+",\n")
	}
	if this.RoutesEnabled != nil {
		s = append(s, "RoutesEnabled: "+fmt.Sprintf("%#v", this.RoutesEnabled)+",\n")
	}
	if this.OriginServerSubsetEnabled != nil {
		s = append(s, "OriginServerSubsetEnabled: "+fmt.Sprintf("%#v", this.OriginServerSubsetEnabled)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	s = append(s, "VipType: "+fmt.Sprintf("%#v", this.VipType)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "HttpListenPortChoice: "+fmt.Sprintf("%#v", this.HttpListenPortChoice)+",\n")
	if this.DefaultLoadbalancerEnabled != nil {
		s = append(s, "DefaultLoadbalancerEnabled: "+fmt.Sprintf("%#v", this.DefaultLoadbalancerEnabled)+",\n")
	}
	if this.MutualTlsEnabled != nil {
		s = append(s, "MutualTlsEnabled: "+fmt.Sprintf("%#v", this.MutualTlsEnabled)+",\n")
	}
	s = append(s, "TlsSecurityLevel: "+fmt.Sprintf("%#v", this.TlsSecurityLevel)+",\n")
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	s = append(s, "CertificationStatus: "+fmt.Sprintf("%#v", this.CertificationStatus)+",\n")
	if this.CertificationExpirationDate != nil {
		s = append(s, "CertificationExpirationDate: "+fmt.Sprintf("%#v", this.CertificationExpirationDate)+",\n")
	}
	if this.WafPolicyRef != nil {
		s = append(s, "WafPolicyRef: "+fmt.Sprintf("%#v", this.WafPolicyRef)+",\n")
	}
	if this.ApiDiscoveryEnabled != nil {
		s = append(s, "ApiDiscoveryEnabled: "+fmt.Sprintf("%#v", this.ApiDiscoveryEnabled)+",\n")
	}
	s = append(s, "WafEnforcementMode: "+fmt.Sprintf("%#v", this.WafEnforcementMode)+",\n")
	if this.MalwareProtectionEnabled != nil {
		s = append(s, "MalwareProtectionEnabled: "+fmt.Sprintf("%#v", this.MalwareProtectionEnabled)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLoadbalancerInventoryType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&namespace.HTTPLoadbalancerInventoryType{")
	s = append(s, "HttpOnly: "+fmt.Sprintf("%#v", this.HttpOnly)+",\n")
	s = append(s, "Waf: "+fmt.Sprintf("%#v", this.Waf)+",\n")
	s = append(s, "BotProtection: "+fmt.Sprintf("%#v", this.BotProtection)+",\n")
	s = append(s, "ApiProtection: "+fmt.Sprintf("%#v", this.ApiProtection)+",\n")
	s = append(s, "DdosProtection: "+fmt.Sprintf("%#v", this.DdosProtection)+",\n")
	s = append(s, "ClientSideDefense: "+fmt.Sprintf("%#v", this.ClientSideDefense)+",\n")
	s = append(s, "NamespaceServicePolicy: "+fmt.Sprintf("%#v", this.NamespaceServicePolicy)+",\n")
	s = append(s, "ServicePolicy: "+fmt.Sprintf("%#v", this.ServicePolicy)+",\n")
	s = append(s, "IpReputation: "+fmt.Sprintf("%#v", this.IpReputation)+",\n")
	s = append(s, "MaliciousUserDetection: "+fmt.Sprintf("%#v", this.MaliciousUserDetection)+",\n")
	s = append(s, "PrivateAdvertisement: "+fmt.Sprintf("%#v", this.PrivateAdvertisement)+",\n")
	s = append(s, "PublicAdvertisment: "+fmt.Sprintf("%#v", this.PublicAdvertisment)+",\n")
	if this.HttplbResults != nil {
		s = append(s, "HttplbResults: "+fmt.Sprintf("%#v", this.HttplbResults)+",\n")
	}
	s = append(s, "ApiDiscovery: "+fmt.Sprintf("%#v", this.ApiDiscovery)+",\n")
	if this.CdnlbResults != nil {
		s = append(s, "CdnlbResults: "+fmt.Sprintf("%#v", this.CdnlbResults)+",\n")
	}
	s = append(s, "MalwareProtection: "+fmt.Sprintf("%#v", this.MalwareProtection)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BIGIPVirtualServerInventoryFilterType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.BIGIPVirtualServerInventoryFilterType{")
	if this.ApiDiscovery != nil {
		s = append(s, "ApiDiscovery: "+fmt.Sprintf("%#v", this.ApiDiscovery)+",\n")
	}
	if this.WafConfigured != nil {
		s = append(s, "WafConfigured: "+fmt.Sprintf("%#v", this.WafConfigured)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BIGIPVirtualServerResultType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&namespace.BIGIPVirtualServerResultType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiDiscoveryEnabled != nil {
		s = append(s, "ApiDiscoveryEnabled: "+fmt.Sprintf("%#v", this.ApiDiscoveryEnabled)+",\n")
	}
	s = append(s, "WafPolicyName: "+fmt.Sprintf("%#v", this.WafPolicyName)+",\n")
	s = append(s, "WafEnforcementMode: "+fmt.Sprintf("%#v", this.WafEnforcementMode)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BIGIPVirtualServerInventoryType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.BIGIPVirtualServerInventoryType{")
	s = append(s, "WafConfigured: "+fmt.Sprintf("%#v", this.WafConfigured)+",\n")
	if this.BigiplbResults != nil {
		s = append(s, "BigiplbResults: "+fmt.Sprintf("%#v", this.BigiplbResults)+",\n")
	}
	s = append(s, "ApiDiscovery: "+fmt.Sprintf("%#v", this.ApiDiscovery)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationInventoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&namespace.ApplicationInventoryRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.HttpLoadBalancerFilter != nil {
		s = append(s, "HttpLoadBalancerFilter: "+fmt.Sprintf("%#v", this.HttpLoadBalancerFilter)+",\n")
	}
	if this.TcpLoadBalancerFilter != nil {
		s = append(s, "TcpLoadBalancerFilter: "+fmt.Sprintf("%#v", this.TcpLoadBalancerFilter)+",\n")
	}
	if this.CdnLoadBalancerFilter != nil {
		s = append(s, "CdnLoadBalancerFilter: "+fmt.Sprintf("%#v", this.CdnLoadBalancerFilter)+",\n")
	}
	if this.BigipVirtualServerFilter != nil {
		s = append(s, "BigipVirtualServerFilter: "+fmt.Sprintf("%#v", this.BigipVirtualServerFilter)+",\n")
	}
	if this.UdpLoadBalancerFilter != nil {
		s = append(s, "UdpLoadBalancerFilter: "+fmt.Sprintf("%#v", this.UdpLoadBalancerFilter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationInventoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&namespace.ApplicationInventoryResponse{")
	s = append(s, "Loadbalancers: "+fmt.Sprintf("%#v", this.Loadbalancers)+",\n")
	s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	s = append(s, "ServicesDiscovered: "+fmt.Sprintf("%#v", this.ServicesDiscovered)+",\n")
	if this.HttpLoadbalancers != nil {
		s = append(s, "HttpLoadbalancers: "+fmt.Sprintf("%#v", this.HttpLoadbalancers)+",\n")
	}
	if this.TcpLoadbalancers != nil {
		s = append(s, "TcpLoadbalancers: "+fmt.Sprintf("%#v", this.TcpLoadbalancers)+",\n")
	}
	if this.CdnLoadbalancers != nil {
		s = append(s, "CdnLoadbalancers: "+fmt.Sprintf("%#v", this.CdnLoadbalancers)+",\n")
	}
	if this.BigipVirtualServers != nil {
		s = append(s, "BigipVirtualServers: "+fmt.Sprintf("%#v", this.BigipVirtualServers)+",\n")
	}
	if this.UdpLoadbalancers != nil {
		s = append(s, "UdpLoadbalancers: "+fmt.Sprintf("%#v", this.UdpLoadbalancers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllApplicationInventoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&namespace.AllApplicationInventoryRequest{")
	if this.HttpLoadBalancerFilter != nil {
		s = append(s, "HttpLoadBalancerFilter: "+fmt.Sprintf("%#v", this.HttpLoadBalancerFilter)+",\n")
	}
	if this.TcpLoadBalancerFilter != nil {
		s = append(s, "TcpLoadBalancerFilter: "+fmt.Sprintf("%#v", this.TcpLoadBalancerFilter)+",\n")
	}
	if this.CdnLoadBalancerFilter != nil {
		s = append(s, "CdnLoadBalancerFilter: "+fmt.Sprintf("%#v", this.CdnLoadBalancerFilter)+",\n")
	}
	if this.BigipVirtualServerFilter != nil {
		s = append(s, "BigipVirtualServerFilter: "+fmt.Sprintf("%#v", this.BigipVirtualServerFilter)+",\n")
	}
	if this.UdpLoadBalancerFilter != nil {
		s = append(s, "UdpLoadBalancerFilter: "+fmt.Sprintf("%#v", this.UdpLoadBalancerFilter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLoadbalancerWafFilterResultType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.HTTPLoadbalancerWafFilterResultType{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllApplicationInventoryWafFilterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.AllApplicationInventoryWafFilterResponse{")
	if this.HttpLoadbalancers != nil {
		s = append(s, "HttpLoadbalancers: "+fmt.Sprintf("%#v", this.HttpLoadbalancers)+",\n")
	}
	if this.CdnLoadbalancers != nil {
		s = append(s, "CdnLoadbalancers: "+fmt.Sprintf("%#v", this.CdnLoadbalancers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllApplicationInventoryWafFilterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.AllApplicationInventoryWafFilterRequest{")
	if this.WafFilterChoice != nil {
		s = append(s, "WafFilterChoice: "+fmt.Sprintf("%#v", this.WafFilterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&namespace.AllApplicationInventoryWafFilterRequest_ExclusionSignatureId{` +
		`ExclusionSignatureId:` + fmt.Sprintf("%#v", this.ExclusionSignatureId) + `}`}, ", ")
	return s
}
func (this *AllApplicationInventoryWafFilterRequest_ExclusionViolationType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&namespace.AllApplicationInventoryWafFilterRequest_ExclusionViolationType{` +
		`ExclusionViolationType:` + fmt.Sprintf("%#v", this.ExclusionViolationType) + `}`}, ", ")
	return s
}
func valueToGoStringPublicCustomapiAkar(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NamespaceCustomAPIClient is the client API for NamespaceCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamespaceCustomAPIClient interface {
	// CascadeDelete
	//
	// x-displayName: "Cascade Delete"
	// CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.
	// under it. Use this only if the entire namespace and its contents are to be wiped out.
	CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error)
	// UpdateAllowAdvertiseOnPublic
	//
	// x-displayName: "Update allow advertise on public."
	// UpdateAllowAdvertiseOnPublic can update a config to allow advertise on public.
	UpdateAllowAdvertiseOnPublic(ctx context.Context, in *UpdateAllowAdvertiseOnPublicReq, opts ...grpc.CallOption) (*UpdateAllowAdvertiseOnPublicResp, error)
	// SetFastACLsForInternetVIPs
	//
	// x-displayName: "Set FastACLs For Internet VIPs"
	// SetFastACLsForInternetVIPs activates the passed list of FastACLs for Internet VIPs.
	// An emtpy list in the request will clear FastACLs for Internet VIPs.
	SetFastACLsForInternetVIPs(ctx context.Context, in *SetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*SetFastACLsForInternetVIPsResponse, error)
	// GetFastACLsForInternetVIPs
	//
	// x-displayName: "Get FastACLs For Internet VIPs"
	// GetFastACLsForInternetVIPs Returns the list of Active FastACLs for Internet VIPs.
	GetFastACLsForInternetVIPs(ctx context.Context, in *GetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*GetFastACLsForInternetVIPsResponse, error)
	// SetActiveServicePolicies
	//
	// x-displayName: "Set Active Service Policies"
	// SetActiveServicePolicies sets the active service policies for the namespace
	// An emtpy list in the request will clear the active service policies for the namespace
	SetActiveServicePolicies(ctx context.Context, in *SetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*SetActiveServicePoliciesResponse, error)
	// GetActiveServicePolicies
	//
	// x-displayName: "Get Active Service Policies"
	// GetActiveServicePolicies resturn the list of active service policies for the namespace
	GetActiveServicePolicies(ctx context.Context, in *GetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*GetActiveServicePoliciesResponse, error)
	// SetActiveNetworkPolicies
	//
	// x-displayName: "Set Active Network Policies"
	// SetActiveNetworkPolicies sets the active network policies for the namespace
	// An emtpy list in the request will clear the active network policies for the namespace
	SetActiveNetworkPolicies(ctx context.Context, in *SetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*SetActiveNetworkPoliciesResponse, error)
	// GetActiveNetworkPolicies
	//
	// x-displayName: "Get Active Network Policies"
	// GetActiveNetworkPolicies resturn the list of active network policies for the namespace
	GetActiveNetworkPolicies(ctx context.Context, in *GetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*GetActiveNetworkPoliciesResponse, error)
	// SetActiveAlertPolicies
	//
	// x-displayName: "Set Active Alert Policies"
	// SetActiveAlertPolicies sets the active alert policies for the namespace
	// An emtpy list in the request will clear the active alert policies for the namespace
	SetActiveAlertPolicies(ctx context.Context, in *SetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*SetActiveAlertPoliciesResponse, error)
	// GetActiveAlertPolicies
	//
	// x-displayName: "Get Active Alert Policies"
	// GetActiveAlertPolicies returns the list of active alert policies for the namespace
	GetActiveAlertPolicies(ctx context.Context, in *GetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*GetActiveAlertPoliciesResponse, error)
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.
	SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error)
	// ValidateRules
	//
	// x-displayName: "Validate Rules"
	// ValidateRules returns whether the value is valid or not for the specified validator rules.
	ValidateRules(ctx context.Context, in *ValidateRulesReq, opts ...grpc.CallOption) (*ValidateRulesResponse, error)
	// Inventory of configured networking related objects.
	//
	// x-displayName: "Networking Objects Inventory"
	// NetworkingInventory returns inventory of configured networking related objects for the tenant.
	// Inventory of system-wide objects (global networks, sites, site mesh groups, etc) is returned.
	NetworkingInventory(ctx context.Context, in *NetworkingInventoryRequest, opts ...grpc.CallOption) (*NetworkingInventoryResponse, error)
	// Inventory of configured application related objects.
	//
	// x-displayName: "Application Objects Inventory"
	// ApplicationInventory returns inventory of configured application related objects for the tenant.
	// Inventory of namespaced objects (HTTP LBs, TCP LBs, etc) in a particular namespace is returned.
	ApplicationInventory(ctx context.Context, in *ApplicationInventoryRequest, opts ...grpc.CallOption) (*ApplicationInventoryResponse, error)
	// Inventory of configured application related objects.
	//
	// x-displayName: "All Application Objects Inventory"
	// AllApplicationInventory returns inventory of configured application related objects for all namespaces.
	AllApplicationInventory(ctx context.Context, in *AllApplicationInventoryRequest, opts ...grpc.CallOption) (*ApplicationInventoryResponse, error)
	// Inventory of configured application related objects with WAF Filters.
	//
	// x-displayName: "All Application Objects Inventory with WAF Filters"
	// AllApplicationInventoryWaf returns inventory of configured application related objects for all namespaces with WAF Filters.
	AllApplicationInventoryWaf(ctx context.Context, in *AllApplicationInventoryWafFilterRequest, opts ...grpc.CallOption) (*AllApplicationInventoryWafFilterResponse, error)
}

type namespaceCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceCustomAPIClient(cc *grpc.ClientConn) NamespaceCustomAPIClient {
	return &namespaceCustomAPIClient{cc}
}

func (c *namespaceCustomAPIClient) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	out := new(CascadeDeleteResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/CascadeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) UpdateAllowAdvertiseOnPublic(ctx context.Context, in *UpdateAllowAdvertiseOnPublicReq, opts ...grpc.CallOption) (*UpdateAllowAdvertiseOnPublicResp, error) {
	out := new(UpdateAllowAdvertiseOnPublicResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/UpdateAllowAdvertiseOnPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetFastACLsForInternetVIPs(ctx context.Context, in *SetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*SetFastACLsForInternetVIPsResponse, error) {
	out := new(SetFastACLsForInternetVIPsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetFastACLsForInternetVIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetFastACLsForInternetVIPs(ctx context.Context, in *GetFastACLsForInternetVIPsRequest, opts ...grpc.CallOption) (*GetFastACLsForInternetVIPsResponse, error) {
	out := new(GetFastACLsForInternetVIPsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetFastACLsForInternetVIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetActiveServicePolicies(ctx context.Context, in *SetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*SetActiveServicePoliciesResponse, error) {
	out := new(SetActiveServicePoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveServicePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetActiveServicePolicies(ctx context.Context, in *GetActiveServicePoliciesRequest, opts ...grpc.CallOption) (*GetActiveServicePoliciesResponse, error) {
	out := new(GetActiveServicePoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveServicePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetActiveNetworkPolicies(ctx context.Context, in *SetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*SetActiveNetworkPoliciesResponse, error) {
	out := new(SetActiveNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetActiveNetworkPolicies(ctx context.Context, in *GetActiveNetworkPoliciesRequest, opts ...grpc.CallOption) (*GetActiveNetworkPoliciesResponse, error) {
	out := new(GetActiveNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SetActiveAlertPolicies(ctx context.Context, in *SetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*SetActiveAlertPoliciesResponse, error) {
	out := new(SetActiveAlertPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveAlertPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) GetActiveAlertPolicies(ctx context.Context, in *GetActiveAlertPoliciesRequest, opts ...grpc.CallOption) (*GetActiveAlertPoliciesResponse, error) {
	out := new(GetActiveAlertPoliciesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveAlertPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error) {
	out := new(SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/SuggestValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) ValidateRules(ctx context.Context, in *ValidateRulesReq, opts ...grpc.CallOption) (*ValidateRulesResponse, error) {
	out := new(ValidateRulesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/ValidateRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) NetworkingInventory(ctx context.Context, in *NetworkingInventoryRequest, opts ...grpc.CallOption) (*NetworkingInventoryResponse, error) {
	out := new(NetworkingInventoryResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/NetworkingInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) ApplicationInventory(ctx context.Context, in *ApplicationInventoryRequest, opts ...grpc.CallOption) (*ApplicationInventoryResponse, error) {
	out := new(ApplicationInventoryResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/ApplicationInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) AllApplicationInventory(ctx context.Context, in *AllApplicationInventoryRequest, opts ...grpc.CallOption) (*ApplicationInventoryResponse, error) {
	out := new(ApplicationInventoryResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/AllApplicationInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceCustomAPIClient) AllApplicationInventoryWaf(ctx context.Context, in *AllApplicationInventoryWafFilterRequest, opts ...grpc.CallOption) (*AllApplicationInventoryWafFilterResponse, error) {
	out := new(AllApplicationInventoryWafFilterResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.NamespaceCustomAPI/AllApplicationInventoryWaf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceCustomAPIServer is the server API for NamespaceCustomAPI service.
type NamespaceCustomAPIServer interface {
	// CascadeDelete
	//
	// x-displayName: "Cascade Delete"
	// CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.
	// under it. Use this only if the entire namespace and its contents are to be wiped out.
	CascadeDelete(context.Context, *CascadeDeleteRequest) (*CascadeDeleteResponse, error)
	// UpdateAllowAdvertiseOnPublic
	//
	// x-displayName: "Update allow advertise on public."
	// UpdateAllowAdvertiseOnPublic can update a config to allow advertise on public.
	UpdateAllowAdvertiseOnPublic(context.Context, *UpdateAllowAdvertiseOnPublicReq) (*UpdateAllowAdvertiseOnPublicResp, error)
	// SetFastACLsForInternetVIPs
	//
	// x-displayName: "Set FastACLs For Internet VIPs"
	// SetFastACLsForInternetVIPs activates the passed list of FastACLs for Internet VIPs.
	// An emtpy list in the request will clear FastACLs for Internet VIPs.
	SetFastACLsForInternetVIPs(context.Context, *SetFastACLsForInternetVIPsRequest) (*SetFastACLsForInternetVIPsResponse, error)
	// GetFastACLsForInternetVIPs
	//
	// x-displayName: "Get FastACLs For Internet VIPs"
	// GetFastACLsForInternetVIPs Returns the list of Active FastACLs for Internet VIPs.
	GetFastACLsForInternetVIPs(context.Context, *GetFastACLsForInternetVIPsRequest) (*GetFastACLsForInternetVIPsResponse, error)
	// SetActiveServicePolicies
	//
	// x-displayName: "Set Active Service Policies"
	// SetActiveServicePolicies sets the active service policies for the namespace
	// An emtpy list in the request will clear the active service policies for the namespace
	SetActiveServicePolicies(context.Context, *SetActiveServicePoliciesRequest) (*SetActiveServicePoliciesResponse, error)
	// GetActiveServicePolicies
	//
	// x-displayName: "Get Active Service Policies"
	// GetActiveServicePolicies resturn the list of active service policies for the namespace
	GetActiveServicePolicies(context.Context, *GetActiveServicePoliciesRequest) (*GetActiveServicePoliciesResponse, error)
	// SetActiveNetworkPolicies
	//
	// x-displayName: "Set Active Network Policies"
	// SetActiveNetworkPolicies sets the active network policies for the namespace
	// An emtpy list in the request will clear the active network policies for the namespace
	SetActiveNetworkPolicies(context.Context, *SetActiveNetworkPoliciesRequest) (*SetActiveNetworkPoliciesResponse, error)
	// GetActiveNetworkPolicies
	//
	// x-displayName: "Get Active Network Policies"
	// GetActiveNetworkPolicies resturn the list of active network policies for the namespace
	GetActiveNetworkPolicies(context.Context, *GetActiveNetworkPoliciesRequest) (*GetActiveNetworkPoliciesResponse, error)
	// SetActiveAlertPolicies
	//
	// x-displayName: "Set Active Alert Policies"
	// SetActiveAlertPolicies sets the active alert policies for the namespace
	// An emtpy list in the request will clear the active alert policies for the namespace
	SetActiveAlertPolicies(context.Context, *SetActiveAlertPoliciesRequest) (*SetActiveAlertPoliciesResponse, error)
	// GetActiveAlertPolicies
	//
	// x-displayName: "Get Active Alert Policies"
	// GetActiveAlertPolicies returns the list of active alert policies for the namespace
	GetActiveAlertPolicies(context.Context, *GetActiveAlertPoliciesRequest) (*GetActiveAlertPoliciesResponse, error)
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.
	SuggestValues(context.Context, *SuggestValuesReq) (*SuggestValuesResp, error)
	// ValidateRules
	//
	// x-displayName: "Validate Rules"
	// ValidateRules returns whether the value is valid or not for the specified validator rules.
	ValidateRules(context.Context, *ValidateRulesReq) (*ValidateRulesResponse, error)
	// Inventory of configured networking related objects.
	//
	// x-displayName: "Networking Objects Inventory"
	// NetworkingInventory returns inventory of configured networking related objects for the tenant.
	// Inventory of system-wide objects (global networks, sites, site mesh groups, etc) is returned.
	NetworkingInventory(context.Context, *NetworkingInventoryRequest) (*NetworkingInventoryResponse, error)
	// Inventory of configured application related objects.
	//
	// x-displayName: "Application Objects Inventory"
	// ApplicationInventory returns inventory of configured application related objects for the tenant.
	// Inventory of namespaced objects (HTTP LBs, TCP LBs, etc) in a particular namespace is returned.
	ApplicationInventory(context.Context, *ApplicationInventoryRequest) (*ApplicationInventoryResponse, error)
	// Inventory of configured application related objects.
	//
	// x-displayName: "All Application Objects Inventory"
	// AllApplicationInventory returns inventory of configured application related objects for all namespaces.
	AllApplicationInventory(context.Context, *AllApplicationInventoryRequest) (*ApplicationInventoryResponse, error)
	// Inventory of configured application related objects with WAF Filters.
	//
	// x-displayName: "All Application Objects Inventory with WAF Filters"
	// AllApplicationInventoryWaf returns inventory of configured application related objects for all namespaces with WAF Filters.
	AllApplicationInventoryWaf(context.Context, *AllApplicationInventoryWafFilterRequest) (*AllApplicationInventoryWafFilterResponse, error)
}

// UnimplementedNamespaceCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNamespaceCustomAPIServer struct {
}

func (*UnimplementedNamespaceCustomAPIServer) CascadeDelete(ctx context.Context, req *CascadeDeleteRequest) (*CascadeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CascadeDelete not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) UpdateAllowAdvertiseOnPublic(ctx context.Context, req *UpdateAllowAdvertiseOnPublicReq) (*UpdateAllowAdvertiseOnPublicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllowAdvertiseOnPublic not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetFastACLsForInternetVIPs(ctx context.Context, req *SetFastACLsForInternetVIPsRequest) (*SetFastACLsForInternetVIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFastACLsForInternetVIPs not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetFastACLsForInternetVIPs(ctx context.Context, req *GetFastACLsForInternetVIPsRequest) (*GetFastACLsForInternetVIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFastACLsForInternetVIPs not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetActiveServicePolicies(ctx context.Context, req *SetActiveServicePoliciesRequest) (*SetActiveServicePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveServicePolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetActiveServicePolicies(ctx context.Context, req *GetActiveServicePoliciesRequest) (*GetActiveServicePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveServicePolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetActiveNetworkPolicies(ctx context.Context, req *SetActiveNetworkPoliciesRequest) (*SetActiveNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveNetworkPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetActiveNetworkPolicies(ctx context.Context, req *GetActiveNetworkPoliciesRequest) (*GetActiveNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveNetworkPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SetActiveAlertPolicies(ctx context.Context, req *SetActiveAlertPoliciesRequest) (*SetActiveAlertPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveAlertPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) GetActiveAlertPolicies(ctx context.Context, req *GetActiveAlertPoliciesRequest) (*GetActiveAlertPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveAlertPolicies not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) SuggestValues(ctx context.Context, req *SuggestValuesReq) (*SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestValues not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) ValidateRules(ctx context.Context, req *ValidateRulesReq) (*ValidateRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRules not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) NetworkingInventory(ctx context.Context, req *NetworkingInventoryRequest) (*NetworkingInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkingInventory not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) ApplicationInventory(ctx context.Context, req *ApplicationInventoryRequest) (*ApplicationInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationInventory not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) AllApplicationInventory(ctx context.Context, req *AllApplicationInventoryRequest) (*ApplicationInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllApplicationInventory not implemented")
}
func (*UnimplementedNamespaceCustomAPIServer) AllApplicationInventoryWaf(ctx context.Context, req *AllApplicationInventoryWafFilterRequest) (*AllApplicationInventoryWafFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllApplicationInventoryWaf not implemented")
}

func RegisterNamespaceCustomAPIServer(s *grpc.Server, srv NamespaceCustomAPIServer) {
	s.RegisterService(&_NamespaceCustomAPI_serviceDesc, srv)
}

func _NamespaceCustomAPI_CascadeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CascadeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).CascadeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/CascadeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).CascadeDelete(ctx, req.(*CascadeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_UpdateAllowAdvertiseOnPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowAdvertiseOnPublicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).UpdateAllowAdvertiseOnPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/UpdateAllowAdvertiseOnPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).UpdateAllowAdvertiseOnPublic(ctx, req.(*UpdateAllowAdvertiseOnPublicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetFastACLsForInternetVIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFastACLsForInternetVIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetFastACLsForInternetVIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetFastACLsForInternetVIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetFastACLsForInternetVIPs(ctx, req.(*SetFastACLsForInternetVIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetFastACLsForInternetVIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFastACLsForInternetVIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetFastACLsForInternetVIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetFastACLsForInternetVIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetFastACLsForInternetVIPs(ctx, req.(*GetFastACLsForInternetVIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetActiveServicePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveServicePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetActiveServicePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveServicePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetActiveServicePolicies(ctx, req.(*SetActiveServicePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetActiveServicePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveServicePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetActiveServicePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveServicePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetActiveServicePolicies(ctx, req.(*GetActiveServicePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetActiveNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetActiveNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetActiveNetworkPolicies(ctx, req.(*SetActiveNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetActiveNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetActiveNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetActiveNetworkPolicies(ctx, req.(*GetActiveNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SetActiveAlertPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveAlertPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SetActiveAlertPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SetActiveAlertPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SetActiveAlertPolicies(ctx, req.(*SetActiveAlertPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_GetActiveAlertPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveAlertPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).GetActiveAlertPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/GetActiveAlertPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).GetActiveAlertPolicies(ctx, req.(*GetActiveAlertPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_SuggestValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).SuggestValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/SuggestValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).SuggestValues(ctx, req.(*SuggestValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_ValidateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).ValidateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/ValidateRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).ValidateRules(ctx, req.(*ValidateRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_NetworkingInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkingInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).NetworkingInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/NetworkingInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).NetworkingInventory(ctx, req.(*NetworkingInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_ApplicationInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).ApplicationInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/ApplicationInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).ApplicationInventory(ctx, req.(*ApplicationInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_AllApplicationInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllApplicationInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).AllApplicationInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/AllApplicationInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).AllApplicationInventory(ctx, req.(*AllApplicationInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceCustomAPI_AllApplicationInventoryWaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllApplicationInventoryWafFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceCustomAPIServer).AllApplicationInventoryWaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.NamespaceCustomAPI/AllApplicationInventoryWaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceCustomAPIServer).AllApplicationInventoryWaf(ctx, req.(*AllApplicationInventoryWafFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.namespace.NamespaceCustomAPI",
	HandlerType: (*NamespaceCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CascadeDelete",
			Handler:    _NamespaceCustomAPI_CascadeDelete_Handler,
		},
		{
			MethodName: "UpdateAllowAdvertiseOnPublic",
			Handler:    _NamespaceCustomAPI_UpdateAllowAdvertiseOnPublic_Handler,
		},
		{
			MethodName: "SetFastACLsForInternetVIPs",
			Handler:    _NamespaceCustomAPI_SetFastACLsForInternetVIPs_Handler,
		},
		{
			MethodName: "GetFastACLsForInternetVIPs",
			Handler:    _NamespaceCustomAPI_GetFastACLsForInternetVIPs_Handler,
		},
		{
			MethodName: "SetActiveServicePolicies",
			Handler:    _NamespaceCustomAPI_SetActiveServicePolicies_Handler,
		},
		{
			MethodName: "GetActiveServicePolicies",
			Handler:    _NamespaceCustomAPI_GetActiveServicePolicies_Handler,
		},
		{
			MethodName: "SetActiveNetworkPolicies",
			Handler:    _NamespaceCustomAPI_SetActiveNetworkPolicies_Handler,
		},
		{
			MethodName: "GetActiveNetworkPolicies",
			Handler:    _NamespaceCustomAPI_GetActiveNetworkPolicies_Handler,
		},
		{
			MethodName: "SetActiveAlertPolicies",
			Handler:    _NamespaceCustomAPI_SetActiveAlertPolicies_Handler,
		},
		{
			MethodName: "GetActiveAlertPolicies",
			Handler:    _NamespaceCustomAPI_GetActiveAlertPolicies_Handler,
		},
		{
			MethodName: "SuggestValues",
			Handler:    _NamespaceCustomAPI_SuggestValues_Handler,
		},
		{
			MethodName: "ValidateRules",
			Handler:    _NamespaceCustomAPI_ValidateRules_Handler,
		},
		{
			MethodName: "NetworkingInventory",
			Handler:    _NamespaceCustomAPI_NetworkingInventory_Handler,
		},
		{
			MethodName: "ApplicationInventory",
			Handler:    _NamespaceCustomAPI_ApplicationInventory_Handler,
		},
		{
			MethodName: "AllApplicationInventory",
			Handler:    _NamespaceCustomAPI_AllApplicationInventory_Handler,
		},
		{
			MethodName: "AllApplicationInventoryWaf",
			Handler:    _NamespaceCustomAPI_AllApplicationInventoryWaf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/namespace/public_customapi_akar.proto",
}

func (m *SetFastACLsForInternetVIPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetFastACLsForInternetVIPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetFastACLsForInternetVIPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastAcls) > 0 {
		for iNdEx := len(m.FastAcls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FastAcls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetFastACLsForInternetVIPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetFastACLsForInternetVIPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetFastACLsForInternetVIPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetFastACLsForInternetVIPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFastACLsForInternetVIPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFastACLsForInternetVIPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFastACLsForInternetVIPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFastACLsForInternetVIPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFastACLsForInternetVIPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FastAcls) > 0 {
		for iNdEx := len(m.FastAcls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FastAcls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveServicePoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveServicePoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveServicePoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for iNdEx := len(m.ServicePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveServicePoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveServicePoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveServicePoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetActiveServicePoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveServicePoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveServicePoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveServicePoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveServicePoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveServicePoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for iNdEx := len(m.ServicePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveNetworkPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveNetworkPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveNetworkPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkPolicies) > 0 {
		for iNdEx := len(m.NetworkPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveNetworkPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveNetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveNetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetActiveNetworkPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveNetworkPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveNetworkPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveNetworkPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveNetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveNetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkPolicies) > 0 {
		for iNdEx := len(m.NetworkPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveAlertPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveAlertPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveAlertPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlertPolicies) > 0 {
		for iNdEx := len(m.AlertPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetActiveAlertPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetActiveAlertPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetActiveAlertPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetActiveAlertPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveAlertPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveAlertPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveAlertPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveAlertPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveAlertPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlertPoliciesStatus) > 0 {
		for iNdEx := len(m.AlertPoliciesStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertPoliciesStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AlertPolicies) > 0 {
		for iNdEx := len(m.AlertPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAllowAdvertiseOnPublicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAllowAdvertiseOnPublicReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAllowAdvertiseOnPublicReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowAdvertiseOnPublic != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.AllowAdvertiseOnPublic))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAllowAdvertiseOnPublicResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAllowAdvertiseOnPublicResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAllowAdvertiseOnPublicResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidateRulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRulesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRulesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorEvaluation) > 0 {
		for k := range m.ValidatorEvaluation {
			v := m.ValidatorEvaluation[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Severity != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ValidateRulesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRulesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRulesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationResults) > 0 {
		for iNdEx := len(m.ValidationResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkingInventoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkingInventoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkingInventoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NetworkingInventoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkingInventoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkingInventoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Segments != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Segments))
		i--
		dAtA[i] = 0x30
	}
	if m.CloudLinks != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.CloudLinks))
		i--
		dAtA[i] = 0x28
	}
	if m.DcClusterGroups != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.DcClusterGroups))
		i--
		dAtA[i] = 0x20
	}
	if m.SiteMeshGroups != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.SiteMeshGroups))
		i--
		dAtA[i] = 0x18
	}
	if m.Sites != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Sites))
		i--
		dAtA[i] = 0x10
	}
	if m.GlobalNetworks != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.GlobalNetworks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UDPLoadbalancerResultType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDPLoadbalancerResultType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPLoadbalancerResultType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PublicAdvertisment != nil {
		{
			size, err := m.PublicAdvertisment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PrivateAdvertisement != nil {
		{
			size, err := m.PrivateAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UDPLoadbalancerInventoryFilterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDPLoadbalancerInventoryFilterType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPLoadbalancerInventoryFilterType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PublicAdvertisment != nil {
		{
			size, err := m.PublicAdvertisment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.PrivateAdvertisement != nil {
		{
			size, err := m.PrivateAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *UDPLoadbalancerInventoryType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDPLoadbalancerInventoryType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPLoadbalancerInventoryType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UdplbResults) > 0 {
		for iNdEx := len(m.UdplbResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UdplbResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PublicAdvertisment != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.PublicAdvertisment))
		i--
		dAtA[i] = 0x10
	}
	if m.PrivateAdvertisement != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.PrivateAdvertisement))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TCPLoadbalancerResultType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPLoadbalancerResultType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLoadbalancerResultType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x42
	}
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if m.PublicAdvertisment != nil {
		{
			size, err := m.PublicAdvertisment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PrivateAdvertisement != nil {
		{
			size, err := m.PrivateAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ServicePolicy != nil {
		{
			size, err := m.ServicePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NamespaceServicePolicy != nil {
		{
			size, err := m.NamespaceServicePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TlsEncryption != nil {
		{
			size, err := m.TlsEncryption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TCPLoadbalancerInventoryFilterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPLoadbalancerInventoryFilterType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLoadbalancerInventoryFilterType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PublicAdvertisment != nil {
		{
			size, err := m.PublicAdvertisment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.PrivateAdvertisement != nil {
		{
			size, err := m.PrivateAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ServicePolicy != nil {
		{
			size, err := m.ServicePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.NamespaceServicePolicy != nil {
		{
			size, err := m.NamespaceServicePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TlsEncryption != nil {
		{
			size, err := m.TlsEncryption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *TCPLoadbalancerInventoryType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPLoadbalancerInventoryType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPLoadbalancerInventoryType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TcplbResults) > 0 {
		for iNdEx := len(m.TcplbResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcplbResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PublicAdvertisment != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.PublicAdvertisment))
		i--
		dAtA[i] = 0x28
	}
	if m.PrivateAdvertisement != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.PrivateAdvertisement))
		i--
		dAtA[i] = 0x20
	}
	if m.ServicePolicy != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ServicePolicy))
		i--
		dAtA[i] = 0x18
	}
	if m.NamespaceServicePolicy != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.NamespaceServicePolicy))
		i--
		dAtA[i] = 0x10
	}
	if m.TlsEncryption != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.TlsEncryption))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLoadbalancerInventoryFilterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLoadbalancerInventoryFilterType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLoadbalancerInventoryFilterType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MalwareProtection != nil {
		{
			size, err := m.MalwareProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.ApiDiscovery != nil {
		{
			size, err := m.ApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.MutualTls != nil {
		{
			size, err := m.MutualTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.OriginServerSubset != nil {
		{
			size, err := m.OriginServerSubset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if m.Routes != nil {
		{
			size, err := m.Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.ClientBlocking != nil {
		{
			size, err := m.ClientBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.CookieProtection != nil {
		{
			size, err := m.CookieProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.GraphQlInspection != nil {
		{
			size, err := m.GraphQlInspection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.CsrfProtection != nil {
		{
			size, err := m.CsrfProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.DataGuard != nil {
		{
			size, err := m.DataGuard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.ApiSchemaValidation != nil {
		{
			size, err := m.ApiSchemaValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.TrustedClientIpHeaders != nil {
		{
			size, err := m.TrustedClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.TrustedClient != nil {
		{
			size, err := m.TrustedClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.DdosMitigation != nil {
		{
			size, err := m.DdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.DdosAutoMitigation != nil {
		{
			size, err := m.DdosAutoMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.WafExclusion != nil {
		{
			size, err := m.WafExclusion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.PublicAdvertisment != nil {
		{
			size, err := m.PublicAdvertisment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.PrivateAdvertisement != nil {
		{
			size, err := m.PrivateAdvertisement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.MaliciousUserDetection != nil {
		{
			size, err := m.MaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.IpReputation != nil {
		{
			size, err := m.IpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.ServicePolicy != nil {
		{
			size, err := m.ServicePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.NamespaceServicePolicy != nil {
		{
			size, err := m.NamespaceServicePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.DdosProtection != nil {
		{
			size, err := m.DdosProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ApiProtection != nil {
		{
			size, err := m.ApiProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.BotProtection != nil {
		{
			size, err := m.BotProtection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Waf != nil {
		{
			size, err := m.Waf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.HttpOnly != nil {
		{
			size, err := m.HttpOnly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLoadbalancerResultType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLoadbalancerResultType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLoadbalancerResultType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MalwareProtectionEnabled != nil {
		{
			size, err := m.MalwareProtectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if len(m.WafEnforcementMode) > 0 {
		i -= len(m.WafEnforcementMode)
		copy(dAtA[i:], m.WafEnforcementMode)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.WafEnforcementMode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.ApiDiscoveryEnabled != nil {
		{
			size, err := m.ApiDiscoveryEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if len(m.WafPolicyRef) > 0 {
		for iNdEx := len(m.WafPolicyRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafPolicyRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.CertificationExpirationDate != nil {
		{
			size, err := m.CertificationExpirationDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.CertificationStatus) > 0 {
		i -= len(m.CertificationStatus)
		copy(dAtA[i:], m.CertificationStatus)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.CertificationStatus)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.TlsSecurityLevel) > 0 {
		i -= len(m.TlsSecurityLevel)
		copy(dAtA[i:], m.TlsSecurityLevel)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.TlsSecurityLevel)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.MutualTlsEnabled != nil {
		{
			size, err := m.MutualTlsEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.DefaultLoadbalancerEnabled != nil {
		{
			size, err := m.DefaultLoadbalancerEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.HttpListenPortChoice) > 0 {
		i -= len(m.HttpListenPortChoice)
		copy(dAtA[i:], m.HttpListenPortChoice)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.HttpListenPortChoice)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.VipType) > 0 {
		i -= len(m.VipType)
		copy(dAtA[i:], m.VipType)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.VipType)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DnsInfo) > 0 {
		i -= len(m.DnsInfo)
		copy(dAtA[i:], m.DnsInfo)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.DnsInfo)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.LoadbalancerAlgorithm) > 0 {
		i -= len(m.LoadbalancerAlgorithm)
		copy(dAtA[i:], m.LoadbalancerAlgorithm)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.LoadbalancerAlgorithm)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.OriginServerSubsetEnabled != nil {
		{
			size, err := m.OriginServerSubsetEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.RoutesEnabled != nil {
		{
			size, err := m.RoutesEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.CorsPolicyEnabled != nil {
		{
			size, err := m.CorsPolicyEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.ClientBlockingEnabled != nil {
		{
			size, err := m.ClientBlockingEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.CookieProtectionEnabled != nil {
		{
			size, err := m.CookieProtectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.GraphQlInspectionEnabled != nil {
		{
			size, err := m.GraphQlInspectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.CsrfProtectionEnabled != nil {
		{
			size, err := m.CsrfProtectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.DataGuardEnabled != nil {
		{
			size, err := m.DataGuardEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.ApiDefinitionEnabled != nil {
		{
			size, err := m.ApiDefinitionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ApiSchemaValidationEnabled != nil {
		{
			size, err := m.ApiSchemaValidationEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.TrustedClientIpHeadersEnabled != nil {
		{
			size, err := m.TrustedClientIpHeadersEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.TrustedClientEnabled != nil {
		{
			size, err := m.TrustedClientEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.MaliciousUserMitigationEnabled != nil {
		{
			size, err := m.MaliciousUserMitigationEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.SlowDdosMitigationEnabled != nil {
		{
			size, err := m.SlowDdosMitigationEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.DdosMitigationEnabled != nil {
		{
			size, err := m.DdosMitigationEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.DdosAutoMitigationEnabled != nil {
		{
			size, err := m.DdosAutoMitigationEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.WafExclusionEnabled != nil {
		{
			size, err := m.WafExclusionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PublicAdvertismentEnabled != nil {
		{
			size, err := m.PublicAdvertismentEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PrivateAdvertisementEnabled != nil {
		{
			size, err := m.PrivateAdvertisementEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.MaliciousUserDetectionEnabled != nil {
		{
			size, err := m.MaliciousUserDetectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.IpReputationEnabled != nil {
		{
			size, err := m.IpReputationEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ServicePolicyEnabled != nil {
		{
			size, err := m.ServicePolicyEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NamespaceServicePolicyEnabled != nil {
		{
			size, err := m.NamespaceServicePolicyEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ClientSideDefenseEnabled != nil {
		{
			size, err := m.ClientSideDefenseEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DdosProtectionEnabled != nil {
		{
			size, err := m.DdosProtectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ApiProtectionEnabled != nil {
		{
			size, err := m.ApiProtectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BotProtectionEnabled != nil {
		{
			size, err := m.BotProtectionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WafEnabled != nil {
		{
			size, err := m.WafEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HttpEnabled != nil {
		{
			size, err := m.HttpEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLoadbalancerInventoryType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLoadbalancerInventoryType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLoadbalancerInventoryType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MalwareProtection != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.MalwareProtection))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.CdnlbResults) > 0 {
		for iNdEx := len(m.CdnlbResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CdnlbResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.ApiDiscovery != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ApiDiscovery))
		i--
		dAtA[i] = 0x78
	}
	if len(m.HttplbResults) > 0 {
		for iNdEx := len(m.HttplbResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttplbResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.PublicAdvertisment != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.PublicAdvertisment))
		i--
		dAtA[i] = 0x60
	}
	if m.PrivateAdvertisement != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.PrivateAdvertisement))
		i--
		dAtA[i] = 0x58
	}
	if m.MaliciousUserDetection != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.MaliciousUserDetection))
		i--
		dAtA[i] = 0x50
	}
	if m.IpReputation != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.IpReputation))
		i--
		dAtA[i] = 0x48
	}
	if m.ServicePolicy != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ServicePolicy))
		i--
		dAtA[i] = 0x40
	}
	if m.NamespaceServicePolicy != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.NamespaceServicePolicy))
		i--
		dAtA[i] = 0x38
	}
	if m.ClientSideDefense != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ClientSideDefense))
		i--
		dAtA[i] = 0x30
	}
	if m.DdosProtection != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.DdosProtection))
		i--
		dAtA[i] = 0x28
	}
	if m.ApiProtection != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ApiProtection))
		i--
		dAtA[i] = 0x20
	}
	if m.BotProtection != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.BotProtection))
		i--
		dAtA[i] = 0x18
	}
	if m.Waf != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Waf))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpOnly != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.HttpOnly))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BIGIPVirtualServerInventoryFilterType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BIGIPVirtualServerInventoryFilterType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BIGIPVirtualServerInventoryFilterType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WafConfigured != nil {
		{
			size, err := m.WafConfigured.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ApiDiscovery != nil {
		{
			size, err := m.ApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BIGIPVirtualServerResultType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BIGIPVirtualServerResultType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BIGIPVirtualServerResultType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WafEnforcementMode) > 0 {
		i -= len(m.WafEnforcementMode)
		copy(dAtA[i:], m.WafEnforcementMode)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.WafEnforcementMode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WafPolicyName) > 0 {
		i -= len(m.WafPolicyName)
		copy(dAtA[i:], m.WafPolicyName)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.WafPolicyName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApiDiscoveryEnabled != nil {
		{
			size, err := m.ApiDiscoveryEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BIGIPVirtualServerInventoryType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BIGIPVirtualServerInventoryType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BIGIPVirtualServerInventoryType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiDiscovery != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ApiDiscovery))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BigiplbResults) > 0 {
		for iNdEx := len(m.BigiplbResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BigiplbResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.WafConfigured != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.WafConfigured))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationInventoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationInventoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationInventoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UdpLoadBalancerFilter != nil {
		{
			size, err := m.UdpLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BigipVirtualServerFilter != nil {
		{
			size, err := m.BigipVirtualServerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CdnLoadBalancerFilter != nil {
		{
			size, err := m.CdnLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TcpLoadBalancerFilter != nil {
		{
			size, err := m.TcpLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HttpLoadBalancerFilter != nil {
		{
			size, err := m.HttpLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationInventoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationInventoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationInventoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UdpLoadbalancers != nil {
		{
			size, err := m.UdpLoadbalancers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.BigipVirtualServers != nil {
		{
			size, err := m.BigipVirtualServers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CdnLoadbalancers != nil {
		{
			size, err := m.CdnLoadbalancers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TcpLoadbalancers != nil {
		{
			size, err := m.TcpLoadbalancers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HttpLoadbalancers != nil {
		{
			size, err := m.HttpLoadbalancers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ServicesDiscovered != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ServicesDiscovered))
		i--
		dAtA[i] = 0x18
	}
	if m.OriginPools != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.OriginPools))
		i--
		dAtA[i] = 0x10
	}
	if m.Loadbalancers != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Loadbalancers))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllApplicationInventoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllApplicationInventoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllApplicationInventoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UdpLoadBalancerFilter != nil {
		{
			size, err := m.UdpLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BigipVirtualServerFilter != nil {
		{
			size, err := m.BigipVirtualServerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CdnLoadBalancerFilter != nil {
		{
			size, err := m.CdnLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TcpLoadBalancerFilter != nil {
		{
			size, err := m.TcpLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HttpLoadBalancerFilter != nil {
		{
			size, err := m.HttpLoadBalancerFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLoadbalancerWafFilterResultType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLoadbalancerWafFilterResultType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLoadbalancerWafFilterResultType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllApplicationInventoryWafFilterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllApplicationInventoryWafFilterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllApplicationInventoryWafFilterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CdnLoadbalancers) > 0 {
		for iNdEx := len(m.CdnLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CdnLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HttpLoadbalancers) > 0 {
		for iNdEx := len(m.HttpLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllApplicationInventoryWafFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllApplicationInventoryWafFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllApplicationInventoryWafFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WafFilterChoice != nil {
		{
			size := m.WafFilterChoice.Size()
			i -= size
			if _, err := m.WafFilterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ExclusionSignatureId))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *AllApplicationInventoryWafFilterRequest_ExclusionViolationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllApplicationInventoryWafFilterRequest_ExclusionViolationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.ExclusionViolationType))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func encodeVarintPublicCustomapiAkar(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapiAkar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetFastACLsForInternetVIPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.FastAcls) > 0 {
		for _, e := range m.FastAcls {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetFastACLsForInternetVIPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetFastACLsForInternetVIPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetFastACLsForInternetVIPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FastAcls) > 0 {
		for _, e := range m.FastAcls {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveServicePoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveServicePoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetActiveServicePoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetActiveServicePoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveNetworkPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.NetworkPolicies) > 0 {
		for _, e := range m.NetworkPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveNetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetActiveNetworkPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetActiveNetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkPolicies) > 0 {
		for _, e := range m.NetworkPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveAlertPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.AlertPolicies) > 0 {
		for _, e := range m.AlertPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *SetActiveAlertPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetActiveAlertPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *GetActiveAlertPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AlertPolicies) > 0 {
		for _, e := range m.AlertPolicies {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	if len(m.AlertPoliciesStatus) > 0 {
		for _, e := range m.AlertPoliciesStatus {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *UpdateAllowAdvertiseOnPublicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.AllowAdvertiseOnPublic != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.AllowAdvertiseOnPublic))
	}
	return n
}

func (m *UpdateAllowAdvertiseOnPublicResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *ValidateRulesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.ValidatorEvaluation) > 0 {
		for k, v := range m.ValidatorEvaluation {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapiAkar(uint64(len(k))) + 1 + len(v) + sovPublicCustomapiAkar(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapiAkar(uint64(mapEntrySize))
		}
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *ValidationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.Severity != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Severity))
	}
	return n
}

func (m *ValidateRulesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.ValidationResults) > 0 {
		for _, e := range m.ValidationResults {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *NetworkingInventoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NetworkingInventoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworks != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.GlobalNetworks))
	}
	if m.Sites != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Sites))
	}
	if m.SiteMeshGroups != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.SiteMeshGroups))
	}
	if m.DcClusterGroups != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.DcClusterGroups))
	}
	if m.CloudLinks != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.CloudLinks))
	}
	if m.Segments != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Segments))
	}
	return n
}

func (m *UDPLoadbalancerResultType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateAdvertisement != nil {
		l = m.PrivateAdvertisement.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PublicAdvertisment != nil {
		l = m.PublicAdvertisment.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *UDPLoadbalancerInventoryFilterType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateAdvertisement != nil {
		l = m.PrivateAdvertisement.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PublicAdvertisment != nil {
		l = m.PublicAdvertisment.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *UDPLoadbalancerInventoryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateAdvertisement != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.PrivateAdvertisement))
	}
	if m.PublicAdvertisment != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.PublicAdvertisment))
	}
	if len(m.UdplbResults) > 0 {
		for _, e := range m.UdplbResults {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *TCPLoadbalancerResultType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsEncryption != nil {
		l = m.TlsEncryption.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.NamespaceServicePolicy != nil {
		l = m.NamespaceServicePolicy.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ServicePolicy != nil {
		l = m.ServicePolicy.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PrivateAdvertisement != nil {
		l = m.PrivateAdvertisement.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PublicAdvertisment != nil {
		l = m.PublicAdvertisment.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *TCPLoadbalancerInventoryFilterType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsEncryption != nil {
		l = m.TlsEncryption.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.NamespaceServicePolicy != nil {
		l = m.NamespaceServicePolicy.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ServicePolicy != nil {
		l = m.ServicePolicy.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PrivateAdvertisement != nil {
		l = m.PrivateAdvertisement.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PublicAdvertisment != nil {
		l = m.PublicAdvertisment.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *TCPLoadbalancerInventoryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsEncryption != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.TlsEncryption))
	}
	if m.NamespaceServicePolicy != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.NamespaceServicePolicy))
	}
	if m.ServicePolicy != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ServicePolicy))
	}
	if m.PrivateAdvertisement != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.PrivateAdvertisement))
	}
	if m.PublicAdvertisment != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.PublicAdvertisment))
	}
	if len(m.TcplbResults) > 0 {
		for _, e := range m.TcplbResults {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *HTTPLoadbalancerInventoryFilterType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpOnly != nil {
		l = m.HttpOnly.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.BotProtection != nil {
		l = m.BotProtection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiProtection != nil {
		l = m.ApiProtection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DdosProtection != nil {
		l = m.DdosProtection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.NamespaceServicePolicy != nil {
		l = m.NamespaceServicePolicy.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ServicePolicy != nil {
		l = m.ServicePolicy.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.IpReputation != nil {
		l = m.IpReputation.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MaliciousUserDetection != nil {
		l = m.MaliciousUserDetection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PrivateAdvertisement != nil {
		l = m.PrivateAdvertisement.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PublicAdvertisment != nil {
		l = m.PublicAdvertisment.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.WafExclusion != nil {
		l = m.WafExclusion.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DdosAutoMitigation != nil {
		l = m.DdosAutoMitigation.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DdosMitigation != nil {
		l = m.DdosMitigation.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TrustedClient != nil {
		l = m.TrustedClient.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TrustedClientIpHeaders != nil {
		l = m.TrustedClientIpHeaders.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiSchemaValidation != nil {
		l = m.ApiSchemaValidation.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DataGuard != nil {
		l = m.DataGuard.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CsrfProtection != nil {
		l = m.CsrfProtection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.GraphQlInspection != nil {
		l = m.GraphQlInspection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CookieProtection != nil {
		l = m.CookieProtection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ClientBlocking != nil {
		l = m.ClientBlocking.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.Routes != nil {
		l = m.Routes.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.OriginServerSubset != nil {
		l = m.OriginServerSubset.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MutualTls != nil {
		l = m.MutualTls.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiDiscovery != nil {
		l = m.ApiDiscovery.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MalwareProtection != nil {
		l = m.MalwareProtection.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *HTTPLoadbalancerResultType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpEnabled != nil {
		l = m.HttpEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.WafEnabled != nil {
		l = m.WafEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.BotProtectionEnabled != nil {
		l = m.BotProtectionEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiProtectionEnabled != nil {
		l = m.ApiProtectionEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DdosProtectionEnabled != nil {
		l = m.DdosProtectionEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ClientSideDefenseEnabled != nil {
		l = m.ClientSideDefenseEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.NamespaceServicePolicyEnabled != nil {
		l = m.NamespaceServicePolicyEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ServicePolicyEnabled != nil {
		l = m.ServicePolicyEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.IpReputationEnabled != nil {
		l = m.IpReputationEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MaliciousUserDetectionEnabled != nil {
		l = m.MaliciousUserDetectionEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PrivateAdvertisementEnabled != nil {
		l = m.PrivateAdvertisementEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.PublicAdvertismentEnabled != nil {
		l = m.PublicAdvertismentEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.WafExclusionEnabled != nil {
		l = m.WafExclusionEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DdosAutoMitigationEnabled != nil {
		l = m.DdosAutoMitigationEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DdosMitigationEnabled != nil {
		l = m.DdosMitigationEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.SlowDdosMitigationEnabled != nil {
		l = m.SlowDdosMitigationEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MaliciousUserMitigationEnabled != nil {
		l = m.MaliciousUserMitigationEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TrustedClientEnabled != nil {
		l = m.TrustedClientEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TrustedClientIpHeadersEnabled != nil {
		l = m.TrustedClientIpHeadersEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiSchemaValidationEnabled != nil {
		l = m.ApiSchemaValidationEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiDefinitionEnabled != nil {
		l = m.ApiDefinitionEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DataGuardEnabled != nil {
		l = m.DataGuardEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CsrfProtectionEnabled != nil {
		l = m.CsrfProtectionEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.GraphQlInspectionEnabled != nil {
		l = m.GraphQlInspectionEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CookieProtectionEnabled != nil {
		l = m.CookieProtectionEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ClientBlockingEnabled != nil {
		l = m.ClientBlockingEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CorsPolicyEnabled != nil {
		l = m.CorsPolicyEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.RoutesEnabled != nil {
		l = m.RoutesEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.OriginServerSubsetEnabled != nil {
		l = m.OriginServerSubsetEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.LoadbalancerAlgorithm)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.DnsInfo)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.VipType)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 2 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	l = len(m.HttpListenPortChoice)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.DefaultLoadbalancerEnabled != nil {
		l = m.DefaultLoadbalancerEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MutualTlsEnabled != nil {
		l = m.MutualTlsEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.TlsSecurityLevel)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovPublicCustomapiAkar(uint64(m.IdleTimeout))
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovPublicCustomapiAkar(uint64(m.ConnectionIdleTimeout))
	}
	l = len(m.CertificationStatus)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CertificationExpirationDate != nil {
		l = m.CertificationExpirationDate.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if len(m.WafPolicyRef) > 0 {
		for _, e := range m.WafPolicyRef {
			l = e.Size()
			n += 2 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	if m.ApiDiscoveryEnabled != nil {
		l = m.ApiDiscoveryEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.WafEnforcementMode)
	if l > 0 {
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.MalwareProtectionEnabled != nil {
		l = m.MalwareProtectionEnabled.Size()
		n += 2 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *HTTPLoadbalancerInventoryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpOnly != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.HttpOnly))
	}
	if m.Waf != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Waf))
	}
	if m.BotProtection != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.BotProtection))
	}
	if m.ApiProtection != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ApiProtection))
	}
	if m.DdosProtection != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.DdosProtection))
	}
	if m.ClientSideDefense != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ClientSideDefense))
	}
	if m.NamespaceServicePolicy != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.NamespaceServicePolicy))
	}
	if m.ServicePolicy != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ServicePolicy))
	}
	if m.IpReputation != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.IpReputation))
	}
	if m.MaliciousUserDetection != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.MaliciousUserDetection))
	}
	if m.PrivateAdvertisement != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.PrivateAdvertisement))
	}
	if m.PublicAdvertisment != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.PublicAdvertisment))
	}
	if len(m.HttplbResults) > 0 {
		for _, e := range m.HttplbResults {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	if m.ApiDiscovery != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ApiDiscovery))
	}
	if len(m.CdnlbResults) > 0 {
		for _, e := range m.CdnlbResults {
			l = e.Size()
			n += 2 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	if m.MalwareProtection != 0 {
		n += 2 + sovPublicCustomapiAkar(uint64(m.MalwareProtection))
	}
	return n
}

func (m *BIGIPVirtualServerInventoryFilterType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscovery != nil {
		l = m.ApiDiscovery.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.WafConfigured != nil {
		l = m.WafConfigured.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *BIGIPVirtualServerResultType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.ApiDiscoveryEnabled != nil {
		l = m.ApiDiscoveryEnabled.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.WafPolicyName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.WafEnforcementMode)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *BIGIPVirtualServerInventoryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafConfigured != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.WafConfigured))
	}
	if len(m.BigiplbResults) > 0 {
		for _, e := range m.BigiplbResults {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	if m.ApiDiscovery != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ApiDiscovery))
	}
	return n
}

func (m *ApplicationInventoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.HttpLoadBalancerFilter != nil {
		l = m.HttpLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TcpLoadBalancerFilter != nil {
		l = m.TcpLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CdnLoadBalancerFilter != nil {
		l = m.CdnLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.BigipVirtualServerFilter != nil {
		l = m.BigipVirtualServerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.UdpLoadBalancerFilter != nil {
		l = m.UdpLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *ApplicationInventoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Loadbalancers != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Loadbalancers))
	}
	if m.OriginPools != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.OriginPools))
	}
	if m.ServicesDiscovered != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.ServicesDiscovered))
	}
	if m.HttpLoadbalancers != nil {
		l = m.HttpLoadbalancers.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TcpLoadbalancers != nil {
		l = m.TcpLoadbalancers.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CdnLoadbalancers != nil {
		l = m.CdnLoadbalancers.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.BigipVirtualServers != nil {
		l = m.BigipVirtualServers.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.UdpLoadbalancers != nil {
		l = m.UdpLoadbalancers.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *AllApplicationInventoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadBalancerFilter != nil {
		l = m.HttpLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.TcpLoadBalancerFilter != nil {
		l = m.TcpLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.CdnLoadBalancerFilter != nil {
		l = m.CdnLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.BigipVirtualServerFilter != nil {
		l = m.BigipVirtualServerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.UdpLoadBalancerFilter != nil {
		l = m.UdpLoadBalancerFilter.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *HTTPLoadbalancerWafFilterResultType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *AllApplicationInventoryWafFilterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadbalancers) > 0 {
		for _, e := range m.HttpLoadbalancers {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	if len(m.CdnLoadbalancers) > 0 {
		for _, e := range m.CdnLoadbalancers {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *AllApplicationInventoryWafFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafFilterChoice != nil {
		n += m.WafFilterChoice.Size()
	}
	return n
}

func (m *AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPublicCustomapiAkar(uint64(m.ExclusionSignatureId))
	return n
}
func (m *AllApplicationInventoryWafFilterRequest_ExclusionViolationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPublicCustomapiAkar(uint64(m.ExclusionViolationType))
	return n
}

func sovPublicCustomapiAkar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapiAkar(x uint64) (n int) {
	return sovPublicCustomapiAkar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetFastACLsForInternetVIPsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFastAcls := "[]*ObjectRefType{"
	for _, f := range this.FastAcls {
		repeatedStringForFastAcls += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForFastAcls += "}"
	s := strings.Join([]string{`&SetFastACLsForInternetVIPsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`FastAcls:` + repeatedStringForFastAcls + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetFastACLsForInternetVIPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetFastACLsForInternetVIPsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetFastACLsForInternetVIPsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetFastACLsForInternetVIPsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetFastACLsForInternetVIPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFastAcls := "[]*ObjectRefType{"
	for _, f := range this.FastAcls {
		repeatedStringForFastAcls += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForFastAcls += "}"
	s := strings.Join([]string{`&GetFastACLsForInternetVIPsResponse{`,
		`FastAcls:` + repeatedStringForFastAcls + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveServicePoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServicePolicies := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicies {
		repeatedStringForServicePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicies += "}"
	s := strings.Join([]string{`&SetActiveServicePoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ServicePolicies:` + repeatedStringForServicePolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveServicePoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetActiveServicePoliciesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveServicePoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetActiveServicePoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveServicePoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServicePolicies := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicies {
		repeatedStringForServicePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicies += "}"
	s := strings.Join([]string{`&GetActiveServicePoliciesResponse{`,
		`ServicePolicies:` + repeatedStringForServicePolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveNetworkPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkPolicies := "[]*ObjectRefType{"
	for _, f := range this.NetworkPolicies {
		repeatedStringForNetworkPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkPolicies += "}"
	s := strings.Join([]string{`&SetActiveNetworkPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`NetworkPolicies:` + repeatedStringForNetworkPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveNetworkPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetActiveNetworkPoliciesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveNetworkPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetActiveNetworkPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveNetworkPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkPolicies := "[]*ObjectRefType{"
	for _, f := range this.NetworkPolicies {
		repeatedStringForNetworkPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkPolicies += "}"
	s := strings.Join([]string{`&GetActiveNetworkPoliciesResponse{`,
		`NetworkPolicies:` + repeatedStringForNetworkPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveAlertPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlertPolicies := "[]*ObjectRefType{"
	for _, f := range this.AlertPolicies {
		repeatedStringForAlertPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAlertPolicies += "}"
	s := strings.Join([]string{`&SetActiveAlertPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AlertPolicies:` + repeatedStringForAlertPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetActiveAlertPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetActiveAlertPoliciesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveAlertPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetActiveAlertPoliciesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetActiveAlertPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlertPolicies := "[]*ObjectRefType{"
	for _, f := range this.AlertPolicies {
		repeatedStringForAlertPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAlertPolicies += "}"
	repeatedStringForAlertPoliciesStatus := "[]*AlertPolicyStatus{"
	for _, f := range this.AlertPoliciesStatus {
		repeatedStringForAlertPoliciesStatus += strings.Replace(fmt.Sprintf("%v", f), "AlertPolicyStatus", "alert_policy_set.AlertPolicyStatus", 1) + ","
	}
	repeatedStringForAlertPoliciesStatus += "}"
	s := strings.Join([]string{`&GetActiveAlertPoliciesResponse{`,
		`AlertPolicies:` + repeatedStringForAlertPolicies + `,`,
		`AlertPoliciesStatus:` + repeatedStringForAlertPoliciesStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAllowAdvertiseOnPublicReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAllowAdvertiseOnPublicReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`AllowAdvertiseOnPublic:` + fmt.Sprintf("%v", this.AllowAdvertiseOnPublic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAllowAdvertiseOnPublicResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAllowAdvertiseOnPublicResp{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateRulesReq) String() string {
	if this == nil {
		return "nil"
	}
	keysForValidatorEvaluation := make([]string, 0, len(this.ValidatorEvaluation))
	for k, _ := range this.ValidatorEvaluation {
		keysForValidatorEvaluation = append(keysForValidatorEvaluation, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValidatorEvaluation)
	mapStringForValidatorEvaluation := "map[string]string{"
	for _, k := range keysForValidatorEvaluation {
		mapStringForValidatorEvaluation += fmt.Sprintf("%v: %v,", k, this.ValidatorEvaluation[k])
	}
	mapStringForValidatorEvaluation += "}"
	s := strings.Join([]string{`&ValidateRulesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ValidatorEvaluation:` + mapStringForValidatorEvaluation + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationResult{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Severity:` + fmt.Sprintf("%v", this.Severity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateRulesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValidationResults := "[]*ValidationResult{"
	for _, f := range this.ValidationResults {
		repeatedStringForValidationResults += strings.Replace(f.String(), "ValidationResult", "ValidationResult", 1) + ","
	}
	repeatedStringForValidationResults += "}"
	s := strings.Join([]string{`&ValidateRulesResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`ValidationResults:` + repeatedStringForValidationResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkingInventoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkingInventoryRequest{`,
		`}`,
	}, "")
	return s
}
func (this *NetworkingInventoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkingInventoryResponse{`,
		`GlobalNetworks:` + fmt.Sprintf("%v", this.GlobalNetworks) + `,`,
		`Sites:` + fmt.Sprintf("%v", this.Sites) + `,`,
		`SiteMeshGroups:` + fmt.Sprintf("%v", this.SiteMeshGroups) + `,`,
		`DcClusterGroups:` + fmt.Sprintf("%v", this.DcClusterGroups) + `,`,
		`CloudLinks:` + fmt.Sprintf("%v", this.CloudLinks) + `,`,
		`Segments:` + fmt.Sprintf("%v", this.Segments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPLoadbalancerResultType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPLoadbalancerResultType{`,
		`PrivateAdvertisement:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAdvertisement), "Empty", "schema.Empty", 1) + `,`,
		`PublicAdvertisment:` + strings.Replace(fmt.Sprintf("%v", this.PublicAdvertisment), "Empty", "schema.Empty", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPLoadbalancerInventoryFilterType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPLoadbalancerInventoryFilterType{`,
		`PrivateAdvertisement:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAdvertisement), "BoolValue", "types.BoolValue", 1) + `,`,
		`PublicAdvertisment:` + strings.Replace(fmt.Sprintf("%v", this.PublicAdvertisment), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPLoadbalancerInventoryType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUdplbResults := "[]*UDPLoadbalancerResultType{"
	for _, f := range this.UdplbResults {
		repeatedStringForUdplbResults += strings.Replace(f.String(), "UDPLoadbalancerResultType", "UDPLoadbalancerResultType", 1) + ","
	}
	repeatedStringForUdplbResults += "}"
	s := strings.Join([]string{`&UDPLoadbalancerInventoryType{`,
		`PrivateAdvertisement:` + fmt.Sprintf("%v", this.PrivateAdvertisement) + `,`,
		`PublicAdvertisment:` + fmt.Sprintf("%v", this.PublicAdvertisment) + `,`,
		`UdplbResults:` + repeatedStringForUdplbResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLoadbalancerResultType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLoadbalancerResultType{`,
		`TlsEncryption:` + strings.Replace(fmt.Sprintf("%v", this.TlsEncryption), "Empty", "schema.Empty", 1) + `,`,
		`NamespaceServicePolicy:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceServicePolicy), "Empty", "schema.Empty", 1) + `,`,
		`ServicePolicy:` + strings.Replace(fmt.Sprintf("%v", this.ServicePolicy), "Empty", "schema.Empty", 1) + `,`,
		`PrivateAdvertisement:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAdvertisement), "Empty", "schema.Empty", 1) + `,`,
		`PublicAdvertisment:` + strings.Replace(fmt.Sprintf("%v", this.PublicAdvertisment), "Empty", "schema.Empty", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "Empty", "schema.Empty", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLoadbalancerInventoryFilterType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPLoadbalancerInventoryFilterType{`,
		`TlsEncryption:` + strings.Replace(fmt.Sprintf("%v", this.TlsEncryption), "BoolValue", "types.BoolValue", 1) + `,`,
		`NamespaceServicePolicy:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceServicePolicy), "BoolValue", "types.BoolValue", 1) + `,`,
		`ServicePolicy:` + strings.Replace(fmt.Sprintf("%v", this.ServicePolicy), "BoolValue", "types.BoolValue", 1) + `,`,
		`PrivateAdvertisement:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAdvertisement), "BoolValue", "types.BoolValue", 1) + `,`,
		`PublicAdvertisment:` + strings.Replace(fmt.Sprintf("%v", this.PublicAdvertisment), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPLoadbalancerInventoryType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTcplbResults := "[]*TCPLoadbalancerResultType{"
	for _, f := range this.TcplbResults {
		repeatedStringForTcplbResults += strings.Replace(f.String(), "TCPLoadbalancerResultType", "TCPLoadbalancerResultType", 1) + ","
	}
	repeatedStringForTcplbResults += "}"
	s := strings.Join([]string{`&TCPLoadbalancerInventoryType{`,
		`TlsEncryption:` + fmt.Sprintf("%v", this.TlsEncryption) + `,`,
		`NamespaceServicePolicy:` + fmt.Sprintf("%v", this.NamespaceServicePolicy) + `,`,
		`ServicePolicy:` + fmt.Sprintf("%v", this.ServicePolicy) + `,`,
		`PrivateAdvertisement:` + fmt.Sprintf("%v", this.PrivateAdvertisement) + `,`,
		`PublicAdvertisment:` + fmt.Sprintf("%v", this.PublicAdvertisment) + `,`,
		`TcplbResults:` + repeatedStringForTcplbResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLoadbalancerInventoryFilterType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLoadbalancerInventoryFilterType{`,
		`HttpOnly:` + strings.Replace(fmt.Sprintf("%v", this.HttpOnly), "BoolValue", "types.BoolValue", 1) + `,`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "BoolValue", "types.BoolValue", 1) + `,`,
		`BotProtection:` + strings.Replace(fmt.Sprintf("%v", this.BotProtection), "BoolValue", "types.BoolValue", 1) + `,`,
		`ApiProtection:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtection), "BoolValue", "types.BoolValue", 1) + `,`,
		`DdosProtection:` + strings.Replace(fmt.Sprintf("%v", this.DdosProtection), "BoolValue", "types.BoolValue", 1) + `,`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "BoolValue", "types.BoolValue", 1) + `,`,
		`NamespaceServicePolicy:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceServicePolicy), "BoolValue", "types.BoolValue", 1) + `,`,
		`ServicePolicy:` + strings.Replace(fmt.Sprintf("%v", this.ServicePolicy), "BoolValue", "types.BoolValue", 1) + `,`,
		`IpReputation:` + strings.Replace(fmt.Sprintf("%v", this.IpReputation), "BoolValue", "types.BoolValue", 1) + `,`,
		`MaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetection), "BoolValue", "types.BoolValue", 1) + `,`,
		`PrivateAdvertisement:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAdvertisement), "BoolValue", "types.BoolValue", 1) + `,`,
		`PublicAdvertisment:` + strings.Replace(fmt.Sprintf("%v", this.PublicAdvertisment), "BoolValue", "types.BoolValue", 1) + `,`,
		`WafExclusion:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusion), "BoolValue", "types.BoolValue", 1) + `,`,
		`DdosAutoMitigation:` + strings.Replace(fmt.Sprintf("%v", this.DdosAutoMitigation), "BoolValue", "types.BoolValue", 1) + `,`,
		`DdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.DdosMitigation), "BoolValue", "types.BoolValue", 1) + `,`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "BoolValue", "types.BoolValue", 1) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "BoolValue", "types.BoolValue", 1) + `,`,
		`TrustedClient:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClient), "BoolValue", "types.BoolValue", 1) + `,`,
		`TrustedClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClientIpHeaders), "BoolValue", "types.BoolValue", 1) + `,`,
		`ApiSchemaValidation:` + strings.Replace(fmt.Sprintf("%v", this.ApiSchemaValidation), "BoolValue", "types.BoolValue", 1) + `,`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "BoolValue", "types.BoolValue", 1) + `,`,
		`DataGuard:` + strings.Replace(fmt.Sprintf("%v", this.DataGuard), "BoolValue", "types.BoolValue", 1) + `,`,
		`CsrfProtection:` + strings.Replace(fmt.Sprintf("%v", this.CsrfProtection), "BoolValue", "types.BoolValue", 1) + `,`,
		`GraphQlInspection:` + strings.Replace(fmt.Sprintf("%v", this.GraphQlInspection), "BoolValue", "types.BoolValue", 1) + `,`,
		`CookieProtection:` + strings.Replace(fmt.Sprintf("%v", this.CookieProtection), "BoolValue", "types.BoolValue", 1) + `,`,
		`ClientBlocking:` + strings.Replace(fmt.Sprintf("%v", this.ClientBlocking), "BoolValue", "types.BoolValue", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "BoolValue", "types.BoolValue", 1) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "BoolValue", "types.BoolValue", 1) + `,`,
		`OriginServerSubset:` + strings.Replace(fmt.Sprintf("%v", this.OriginServerSubset), "BoolValue", "types.BoolValue", 1) + `,`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "BoolValue", "types.BoolValue", 1) + `,`,
		`MutualTls:` + strings.Replace(fmt.Sprintf("%v", this.MutualTls), "BoolValue", "types.BoolValue", 1) + `,`,
		`ApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscovery), "BoolValue", "types.BoolValue", 1) + `,`,
		`MalwareProtection:` + strings.Replace(fmt.Sprintf("%v", this.MalwareProtection), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLoadbalancerResultType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWafPolicyRef := "[]*ObjectRefType{"
	for _, f := range this.WafPolicyRef {
		repeatedStringForWafPolicyRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForWafPolicyRef += "}"
	s := strings.Join([]string{`&HTTPLoadbalancerResultType{`,
		`HttpEnabled:` + strings.Replace(fmt.Sprintf("%v", this.HttpEnabled), "Empty", "schema.Empty", 1) + `,`,
		`WafEnabled:` + strings.Replace(fmt.Sprintf("%v", this.WafEnabled), "Empty", "schema.Empty", 1) + `,`,
		`BotProtectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.BotProtectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`ApiProtectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`DdosProtectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DdosProtectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`ClientSideDefenseEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefenseEnabled), "Empty", "schema.Empty", 1) + `,`,
		`NamespaceServicePolicyEnabled:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceServicePolicyEnabled), "Empty", "schema.Empty", 1) + `,`,
		`ServicePolicyEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ServicePolicyEnabled), "Empty", "schema.Empty", 1) + `,`,
		`IpReputationEnabled:` + strings.Replace(fmt.Sprintf("%v", this.IpReputationEnabled), "Empty", "schema.Empty", 1) + `,`,
		`MaliciousUserDetectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserDetectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`PrivateAdvertisementEnabled:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAdvertisementEnabled), "Empty", "schema.Empty", 1) + `,`,
		`PublicAdvertismentEnabled:` + strings.Replace(fmt.Sprintf("%v", this.PublicAdvertismentEnabled), "Empty", "schema.Empty", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "Empty", "schema.Empty", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WafExclusionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.WafExclusionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`DdosAutoMitigationEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DdosAutoMitigationEnabled), "Empty", "schema.Empty", 1) + `,`,
		`DdosMitigationEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DdosMitigationEnabled), "Empty", "schema.Empty", 1) + `,`,
		`SlowDdosMitigationEnabled:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigationEnabled), "Empty", "schema.Empty", 1) + `,`,
		`MaliciousUserMitigationEnabled:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigationEnabled), "Empty", "schema.Empty", 1) + `,`,
		`TrustedClientEnabled:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClientEnabled), "Empty", "schema.Empty", 1) + `,`,
		`TrustedClientIpHeadersEnabled:` + strings.Replace(fmt.Sprintf("%v", this.TrustedClientIpHeadersEnabled), "Empty", "schema.Empty", 1) + `,`,
		`ApiSchemaValidationEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ApiSchemaValidationEnabled), "Empty", "schema.Empty", 1) + `,`,
		`ApiDefinitionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`DataGuardEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DataGuardEnabled), "Empty", "schema.Empty", 1) + `,`,
		`CsrfProtectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.CsrfProtectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`GraphQlInspectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.GraphQlInspectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`CookieProtectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.CookieProtectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`ClientBlockingEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ClientBlockingEnabled), "Empty", "schema.Empty", 1) + `,`,
		`CorsPolicyEnabled:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicyEnabled), "Empty", "schema.Empty", 1) + `,`,
		`RoutesEnabled:` + strings.Replace(fmt.Sprintf("%v", this.RoutesEnabled), "Empty", "schema.Empty", 1) + `,`,
		`OriginServerSubsetEnabled:` + strings.Replace(fmt.Sprintf("%v", this.OriginServerSubsetEnabled), "Empty", "schema.Empty", 1) + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`DnsInfo:` + fmt.Sprintf("%v", this.DnsInfo) + `,`,
		`VipType:` + fmt.Sprintf("%v", this.VipType) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`HttpListenPortChoice:` + fmt.Sprintf("%v", this.HttpListenPortChoice) + `,`,
		`DefaultLoadbalancerEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancerEnabled), "Empty", "schema.Empty", 1) + `,`,
		`MutualTlsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.MutualTlsEnabled), "Empty", "schema.Empty", 1) + `,`,
		`TlsSecurityLevel:` + fmt.Sprintf("%v", this.TlsSecurityLevel) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`CertificationStatus:` + fmt.Sprintf("%v", this.CertificationStatus) + `,`,
		`CertificationExpirationDate:` + strings.Replace(fmt.Sprintf("%v", this.CertificationExpirationDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`WafPolicyRef:` + repeatedStringForWafPolicyRef + `,`,
		`ApiDiscoveryEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryEnabled), "Empty", "schema.Empty", 1) + `,`,
		`WafEnforcementMode:` + fmt.Sprintf("%v", this.WafEnforcementMode) + `,`,
		`MalwareProtectionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.MalwareProtectionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLoadbalancerInventoryType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttplbResults := "[]*HTTPLoadbalancerResultType{"
	for _, f := range this.HttplbResults {
		repeatedStringForHttplbResults += strings.Replace(f.String(), "HTTPLoadbalancerResultType", "HTTPLoadbalancerResultType", 1) + ","
	}
	repeatedStringForHttplbResults += "}"
	repeatedStringForCdnlbResults := "[]*HTTPLoadbalancerResultType{"
	for _, f := range this.CdnlbResults {
		repeatedStringForCdnlbResults += strings.Replace(f.String(), "HTTPLoadbalancerResultType", "HTTPLoadbalancerResultType", 1) + ","
	}
	repeatedStringForCdnlbResults += "}"
	s := strings.Join([]string{`&HTTPLoadbalancerInventoryType{`,
		`HttpOnly:` + fmt.Sprintf("%v", this.HttpOnly) + `,`,
		`Waf:` + fmt.Sprintf("%v", this.Waf) + `,`,
		`BotProtection:` + fmt.Sprintf("%v", this.BotProtection) + `,`,
		`ApiProtection:` + fmt.Sprintf("%v", this.ApiProtection) + `,`,
		`DdosProtection:` + fmt.Sprintf("%v", this.DdosProtection) + `,`,
		`ClientSideDefense:` + fmt.Sprintf("%v", this.ClientSideDefense) + `,`,
		`NamespaceServicePolicy:` + fmt.Sprintf("%v", this.NamespaceServicePolicy) + `,`,
		`ServicePolicy:` + fmt.Sprintf("%v", this.ServicePolicy) + `,`,
		`IpReputation:` + fmt.Sprintf("%v", this.IpReputation) + `,`,
		`MaliciousUserDetection:` + fmt.Sprintf("%v", this.MaliciousUserDetection) + `,`,
		`PrivateAdvertisement:` + fmt.Sprintf("%v", this.PrivateAdvertisement) + `,`,
		`PublicAdvertisment:` + fmt.Sprintf("%v", this.PublicAdvertisment) + `,`,
		`HttplbResults:` + repeatedStringForHttplbResults + `,`,
		`ApiDiscovery:` + fmt.Sprintf("%v", this.ApiDiscovery) + `,`,
		`CdnlbResults:` + repeatedStringForCdnlbResults + `,`,
		`MalwareProtection:` + fmt.Sprintf("%v", this.MalwareProtection) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BIGIPVirtualServerInventoryFilterType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BIGIPVirtualServerInventoryFilterType{`,
		`ApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscovery), "BoolValue", "types.BoolValue", 1) + `,`,
		`WafConfigured:` + strings.Replace(fmt.Sprintf("%v", this.WafConfigured), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BIGIPVirtualServerResultType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BIGIPVirtualServerResultType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiDiscoveryEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ApiDiscoveryEnabled), "Empty", "schema.Empty", 1) + `,`,
		`WafPolicyName:` + fmt.Sprintf("%v", this.WafPolicyName) + `,`,
		`WafEnforcementMode:` + fmt.Sprintf("%v", this.WafEnforcementMode) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BIGIPVirtualServerInventoryType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBigiplbResults := "[]*BIGIPVirtualServerResultType{"
	for _, f := range this.BigiplbResults {
		repeatedStringForBigiplbResults += strings.Replace(f.String(), "BIGIPVirtualServerResultType", "BIGIPVirtualServerResultType", 1) + ","
	}
	repeatedStringForBigiplbResults += "}"
	s := strings.Join([]string{`&BIGIPVirtualServerInventoryType{`,
		`WafConfigured:` + fmt.Sprintf("%v", this.WafConfigured) + `,`,
		`BigiplbResults:` + repeatedStringForBigiplbResults + `,`,
		`ApiDiscovery:` + fmt.Sprintf("%v", this.ApiDiscovery) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationInventoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationInventoryRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`HttpLoadBalancerFilter:` + strings.Replace(this.HttpLoadBalancerFilter.String(), "HTTPLoadbalancerInventoryFilterType", "HTTPLoadbalancerInventoryFilterType", 1) + `,`,
		`TcpLoadBalancerFilter:` + strings.Replace(this.TcpLoadBalancerFilter.String(), "TCPLoadbalancerInventoryFilterType", "TCPLoadbalancerInventoryFilterType", 1) + `,`,
		`CdnLoadBalancerFilter:` + strings.Replace(this.CdnLoadBalancerFilter.String(), "HTTPLoadbalancerInventoryFilterType", "HTTPLoadbalancerInventoryFilterType", 1) + `,`,
		`BigipVirtualServerFilter:` + strings.Replace(this.BigipVirtualServerFilter.String(), "BIGIPVirtualServerInventoryFilterType", "BIGIPVirtualServerInventoryFilterType", 1) + `,`,
		`UdpLoadBalancerFilter:` + strings.Replace(this.UdpLoadBalancerFilter.String(), "UDPLoadbalancerInventoryFilterType", "UDPLoadbalancerInventoryFilterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationInventoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationInventoryResponse{`,
		`Loadbalancers:` + fmt.Sprintf("%v", this.Loadbalancers) + `,`,
		`OriginPools:` + fmt.Sprintf("%v", this.OriginPools) + `,`,
		`ServicesDiscovered:` + fmt.Sprintf("%v", this.ServicesDiscovered) + `,`,
		`HttpLoadbalancers:` + strings.Replace(this.HttpLoadbalancers.String(), "HTTPLoadbalancerInventoryType", "HTTPLoadbalancerInventoryType", 1) + `,`,
		`TcpLoadbalancers:` + strings.Replace(this.TcpLoadbalancers.String(), "TCPLoadbalancerInventoryType", "TCPLoadbalancerInventoryType", 1) + `,`,
		`CdnLoadbalancers:` + strings.Replace(this.CdnLoadbalancers.String(), "HTTPLoadbalancerInventoryType", "HTTPLoadbalancerInventoryType", 1) + `,`,
		`BigipVirtualServers:` + strings.Replace(this.BigipVirtualServers.String(), "BIGIPVirtualServerInventoryType", "BIGIPVirtualServerInventoryType", 1) + `,`,
		`UdpLoadbalancers:` + strings.Replace(this.UdpLoadbalancers.String(), "UDPLoadbalancerInventoryType", "UDPLoadbalancerInventoryType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllApplicationInventoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllApplicationInventoryRequest{`,
		`HttpLoadBalancerFilter:` + strings.Replace(this.HttpLoadBalancerFilter.String(), "HTTPLoadbalancerInventoryFilterType", "HTTPLoadbalancerInventoryFilterType", 1) + `,`,
		`TcpLoadBalancerFilter:` + strings.Replace(this.TcpLoadBalancerFilter.String(), "TCPLoadbalancerInventoryFilterType", "TCPLoadbalancerInventoryFilterType", 1) + `,`,
		`CdnLoadBalancerFilter:` + strings.Replace(this.CdnLoadBalancerFilter.String(), "HTTPLoadbalancerInventoryFilterType", "HTTPLoadbalancerInventoryFilterType", 1) + `,`,
		`BigipVirtualServerFilter:` + strings.Replace(this.BigipVirtualServerFilter.String(), "BIGIPVirtualServerInventoryFilterType", "BIGIPVirtualServerInventoryFilterType", 1) + `,`,
		`UdpLoadBalancerFilter:` + strings.Replace(this.UdpLoadBalancerFilter.String(), "UDPLoadbalancerInventoryFilterType", "UDPLoadbalancerInventoryFilterType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLoadbalancerWafFilterResultType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLoadbalancerWafFilterResultType{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllApplicationInventoryWafFilterResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadbalancers := "[]*HTTPLoadbalancerWafFilterResultType{"
	for _, f := range this.HttpLoadbalancers {
		repeatedStringForHttpLoadbalancers += strings.Replace(f.String(), "HTTPLoadbalancerWafFilterResultType", "HTTPLoadbalancerWafFilterResultType", 1) + ","
	}
	repeatedStringForHttpLoadbalancers += "}"
	repeatedStringForCdnLoadbalancers := "[]*HTTPLoadbalancerWafFilterResultType{"
	for _, f := range this.CdnLoadbalancers {
		repeatedStringForCdnLoadbalancers += strings.Replace(f.String(), "HTTPLoadbalancerWafFilterResultType", "HTTPLoadbalancerWafFilterResultType", 1) + ","
	}
	repeatedStringForCdnLoadbalancers += "}"
	s := strings.Join([]string{`&AllApplicationInventoryWafFilterResponse{`,
		`HttpLoadbalancers:` + repeatedStringForHttpLoadbalancers + `,`,
		`CdnLoadbalancers:` + repeatedStringForCdnLoadbalancers + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllApplicationInventoryWafFilterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllApplicationInventoryWafFilterRequest{`,
		`WafFilterChoice:` + fmt.Sprintf("%v", this.WafFilterChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllApplicationInventoryWafFilterRequest_ExclusionSignatureId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllApplicationInventoryWafFilterRequest_ExclusionSignatureId{`,
		`ExclusionSignatureId:` + fmt.Sprintf("%v", this.ExclusionSignatureId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllApplicationInventoryWafFilterRequest_ExclusionViolationType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllApplicationInventoryWafFilterRequest_ExclusionViolationType{`,
		`ExclusionViolationType:` + fmt.Sprintf("%v", this.ExclusionViolationType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapiAkar(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetFastACLsForInternetVIPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAcls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAcls = append(m.FastAcls, &views.ObjectRefType{})
			if err := m.FastAcls[len(m.FastAcls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetFastACLsForInternetVIPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFastACLsForInternetVIPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFastACLsForInternetVIPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFastACLsForInternetVIPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFastACLsForInternetVIPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAcls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAcls = append(m.FastAcls, &views.ObjectRefType{})
			if err := m.FastAcls[len(m.FastAcls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveServicePoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveServicePoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveServicePoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveServicePoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveServicePoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveServicePoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveServicePoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveServicePoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveServicePoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveServicePoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveServicePoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveServicePoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveNetworkPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPolicies = append(m.NetworkPolicies, &views.ObjectRefType{})
			if err := m.NetworkPolicies[len(m.NetworkPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveNetworkPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveNetworkPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveNetworkPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveNetworkPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveNetworkPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPolicies = append(m.NetworkPolicies, &views.ObjectRefType{})
			if err := m.NetworkPolicies[len(m.NetworkPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveAlertPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicies = append(m.AlertPolicies, &views.ObjectRefType{})
			if err := m.AlertPolicies[len(m.AlertPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetActiveAlertPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetActiveAlertPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveAlertPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveAlertPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveAlertPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicies = append(m.AlertPolicies, &views.ObjectRefType{})
			if err := m.AlertPolicies[len(m.AlertPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPoliciesStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPoliciesStatus = append(m.AlertPoliciesStatus, &alert_policy_set.AlertPolicyStatus{})
			if err := m.AlertPoliciesStatus[len(m.AlertPoliciesStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAllowAdvertiseOnPublicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAllowAdvertiseOnPublicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAllowAdvertiseOnPublicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAdvertiseOnPublic", wireType)
			}
			m.AllowAdvertiseOnPublic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowAdvertiseOnPublic |= PublicAdvertiseChoice(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAllowAdvertiseOnPublicResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAllowAdvertiseOnPublicResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAllowAdvertiseOnPublicResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorEvaluation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorEvaluation == nil {
				m.ValidatorEvaluation = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapiAkar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapiAkar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapiAkar
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapiAkar
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapiAkar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapiAkar
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapiAkar
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapiAkar
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ValidatorEvaluation[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRulesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRulesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRulesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationResults = append(m.ValidationResults, &ValidationResult{})
			if err := m.ValidationResults[len(m.ValidationResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkingInventoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkingInventoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkingInventoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkingInventoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkingInventoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkingInventoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworks", wireType)
			}
			m.GlobalNetworks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalNetworks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sites", wireType)
			}
			m.Sites = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sites |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteMeshGroups", wireType)
			}
			m.SiteMeshGroups = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteMeshGroups |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroups", wireType)
			}
			m.DcClusterGroups = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcClusterGroups |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudLinks", wireType)
			}
			m.CloudLinks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloudLinks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			m.Segments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Segments |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDPLoadbalancerResultType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDPLoadbalancerResultType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDPLoadbalancerResultType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateAdvertisement == nil {
				m.PrivateAdvertisement = &schema.Empty{}
			}
			if err := m.PrivateAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAdvertisment == nil {
				m.PublicAdvertisment = &schema.Empty{}
			}
			if err := m.PublicAdvertisment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDPLoadbalancerInventoryFilterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDPLoadbalancerInventoryFilterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDPLoadbalancerInventoryFilterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateAdvertisement == nil {
				m.PrivateAdvertisement = &types.BoolValue{}
			}
			if err := m.PrivateAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAdvertisment == nil {
				m.PublicAdvertisment = &types.BoolValue{}
			}
			if err := m.PublicAdvertisment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDPLoadbalancerInventoryType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDPLoadbalancerInventoryType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDPLoadbalancerInventoryType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			m.PrivateAdvertisement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateAdvertisement |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			m.PublicAdvertisment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicAdvertisment |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdplbResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UdplbResults = append(m.UdplbResults, &UDPLoadbalancerResultType{})
			if err := m.UdplbResults[len(m.UdplbResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPLoadbalancerResultType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPLoadbalancerResultType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPLoadbalancerResultType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsEncryption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsEncryption == nil {
				m.TlsEncryption = &schema.Empty{}
			}
			if err := m.TlsEncryption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceServicePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceServicePolicy == nil {
				m.NamespaceServicePolicy = &schema.Empty{}
			}
			if err := m.NamespaceServicePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicePolicy == nil {
				m.ServicePolicy = &schema.Empty{}
			}
			if err := m.ServicePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateAdvertisement == nil {
				m.PrivateAdvertisement = &schema.Empty{}
			}
			if err := m.PrivateAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAdvertisment == nil {
				m.PublicAdvertisment = &schema.Empty{}
			}
			if err := m.PublicAdvertisment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimit == nil {
				m.RateLimit = &schema.Empty{}
			}
			if err := m.RateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPLoadbalancerInventoryFilterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPLoadbalancerInventoryFilterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPLoadbalancerInventoryFilterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsEncryption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsEncryption == nil {
				m.TlsEncryption = &types.BoolValue{}
			}
			if err := m.TlsEncryption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceServicePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceServicePolicy == nil {
				m.NamespaceServicePolicy = &types.BoolValue{}
			}
			if err := m.NamespaceServicePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicePolicy == nil {
				m.ServicePolicy = &types.BoolValue{}
			}
			if err := m.ServicePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateAdvertisement == nil {
				m.PrivateAdvertisement = &types.BoolValue{}
			}
			if err := m.PrivateAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAdvertisment == nil {
				m.PublicAdvertisment = &types.BoolValue{}
			}
			if err := m.PublicAdvertisment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPLoadbalancerInventoryType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPLoadbalancerInventoryType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPLoadbalancerInventoryType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsEncryption", wireType)
			}
			m.TlsEncryption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TlsEncryption |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceServicePolicy", wireType)
			}
			m.NamespaceServicePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceServicePolicy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicy", wireType)
			}
			m.ServicePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePolicy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			m.PrivateAdvertisement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateAdvertisement |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			m.PublicAdvertisment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicAdvertisment |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcplbResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcplbResults = append(m.TcplbResults, &TCPLoadbalancerResultType{})
			if err := m.TcplbResults[len(m.TcplbResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLoadbalancerInventoryFilterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLoadbalancerInventoryFilterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLoadbalancerInventoryFilterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpOnly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpOnly == nil {
				m.HttpOnly = &types.BoolValue{}
			}
			if err := m.HttpOnly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Waf == nil {
				m.Waf = &types.BoolValue{}
			}
			if err := m.Waf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BotProtection == nil {
				m.BotProtection = &types.BoolValue{}
			}
			if err := m.BotProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtection == nil {
				m.ApiProtection = &types.BoolValue{}
			}
			if err := m.ApiProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosProtection == nil {
				m.DdosProtection = &types.BoolValue{}
			}
			if err := m.DdosProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientSideDefense == nil {
				m.ClientSideDefense = &types.BoolValue{}
			}
			if err := m.ClientSideDefense.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceServicePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceServicePolicy == nil {
				m.NamespaceServicePolicy = &types.BoolValue{}
			}
			if err := m.NamespaceServicePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicePolicy == nil {
				m.ServicePolicy = &types.BoolValue{}
			}
			if err := m.ServicePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpReputation == nil {
				m.IpReputation = &types.BoolValue{}
			}
			if err := m.IpReputation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserDetection == nil {
				m.MaliciousUserDetection = &types.BoolValue{}
			}
			if err := m.MaliciousUserDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateAdvertisement == nil {
				m.PrivateAdvertisement = &types.BoolValue{}
			}
			if err := m.PrivateAdvertisement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAdvertisment == nil {
				m.PublicAdvertisment = &types.BoolValue{}
			}
			if err := m.PublicAdvertisment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafExclusion == nil {
				m.WafExclusion = &types.BoolValue{}
			}
			if err := m.WafExclusion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosAutoMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosAutoMitigation == nil {
				m.DdosAutoMitigation = &types.BoolValue{}
			}
			if err := m.DdosAutoMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosMitigation == nil {
				m.DdosMitigation = &types.BoolValue{}
			}
			if err := m.DdosMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowDdosMitigation == nil {
				m.SlowDdosMitigation = &types.BoolValue{}
			}
			if err := m.SlowDdosMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &types.BoolValue{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedClient == nil {
				m.TrustedClient = &types.BoolValue{}
			}
			if err := m.TrustedClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedClientIpHeaders == nil {
				m.TrustedClientIpHeaders = &types.BoolValue{}
			}
			if err := m.TrustedClientIpHeaders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSchemaValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSchemaValidation == nil {
				m.ApiSchemaValidation = &types.BoolValue{}
			}
			if err := m.ApiSchemaValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinition == nil {
				m.ApiDefinition = &types.BoolValue{}
			}
			if err := m.ApiDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataGuard == nil {
				m.DataGuard = &types.BoolValue{}
			}
			if err := m.DataGuard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfProtection == nil {
				m.CsrfProtection = &types.BoolValue{}
			}
			if err := m.CsrfProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphQlInspection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphQlInspection == nil {
				m.GraphQlInspection = &types.BoolValue{}
			}
			if err := m.GraphQlInspection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CookieProtection == nil {
				m.CookieProtection = &types.BoolValue{}
			}
			if err := m.CookieProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientBlocking == nil {
				m.ClientBlocking = &types.BoolValue{}
			}
			if err := m.ClientBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &types.BoolValue{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Routes == nil {
				m.Routes = &types.BoolValue{}
			}
			if err := m.Routes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubset == nil {
				m.OriginServerSubset = &types.BoolValue{}
			}
			if err := m.OriginServerSubset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultLoadbalancer == nil {
				m.DefaultLoadbalancer = &types.BoolValue{}
			}
			if err := m.DefaultLoadbalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutualTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MutualTls == nil {
				m.MutualTls = &types.BoolValue{}
			}
			if err := m.MutualTls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscovery == nil {
				m.ApiDiscovery = &types.BoolValue{}
			}
			if err := m.ApiDiscovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MalwareProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MalwareProtection == nil {
				m.MalwareProtection = &types.BoolValue{}
			}
			if err := m.MalwareProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLoadbalancerResultType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLoadbalancerResultType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLoadbalancerResultType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpEnabled == nil {
				m.HttpEnabled = &schema.Empty{}
			}
			if err := m.HttpEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafEnabled == nil {
				m.WafEnabled = &schema.Empty{}
			}
			if err := m.WafEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BotProtectionEnabled == nil {
				m.BotProtectionEnabled = &schema.Empty{}
			}
			if err := m.BotProtectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionEnabled == nil {
				m.ApiProtectionEnabled = &schema.Empty{}
			}
			if err := m.ApiProtectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosProtectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosProtectionEnabled == nil {
				m.DdosProtectionEnabled = &schema.Empty{}
			}
			if err := m.DdosProtectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefenseEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientSideDefenseEnabled == nil {
				m.ClientSideDefenseEnabled = &schema.Empty{}
			}
			if err := m.ClientSideDefenseEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceServicePolicyEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceServicePolicyEnabled == nil {
				m.NamespaceServicePolicyEnabled = &schema.Empty{}
			}
			if err := m.NamespaceServicePolicyEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicyEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicePolicyEnabled == nil {
				m.ServicePolicyEnabled = &schema.Empty{}
			}
			if err := m.ServicePolicyEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpReputationEnabled == nil {
				m.IpReputationEnabled = &schema.Empty{}
			}
			if err := m.IpReputationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserDetectionEnabled == nil {
				m.MaliciousUserDetectionEnabled = &schema.Empty{}
			}
			if err := m.MaliciousUserDetectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisementEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateAdvertisementEnabled == nil {
				m.PrivateAdvertisementEnabled = &schema.Empty{}
			}
			if err := m.PrivateAdvertisementEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertismentEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAdvertismentEnabled == nil {
				m.PublicAdvertismentEnabled = &schema.Empty{}
			}
			if err := m.PublicAdvertismentEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimit == nil {
				m.RateLimit = &schema.Empty{}
			}
			if err := m.RateLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafExclusionEnabled == nil {
				m.WafExclusionEnabled = &schema.Empty{}
			}
			if err := m.WafExclusionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosAutoMitigationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosAutoMitigationEnabled == nil {
				m.DdosAutoMitigationEnabled = &schema.Empty{}
			}
			if err := m.DdosAutoMitigationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosMitigationEnabled == nil {
				m.DdosMitigationEnabled = &schema.Empty{}
			}
			if err := m.DdosMitigationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowDdosMitigationEnabled == nil {
				m.SlowDdosMitigationEnabled = &schema.Empty{}
			}
			if err := m.SlowDdosMitigationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigationEnabled == nil {
				m.MaliciousUserMitigationEnabled = &schema.Empty{}
			}
			if err := m.MaliciousUserMitigationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClientEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedClientEnabled == nil {
				m.TrustedClientEnabled = &schema.Empty{}
			}
			if err := m.TrustedClientEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClientIpHeadersEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustedClientIpHeadersEnabled == nil {
				m.TrustedClientIpHeadersEnabled = &schema.Empty{}
			}
			if err := m.TrustedClientIpHeadersEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSchemaValidationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSchemaValidationEnabled == nil {
				m.ApiSchemaValidationEnabled = &schema.Empty{}
			}
			if err := m.ApiSchemaValidationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinitionEnabled == nil {
				m.ApiDefinitionEnabled = &schema.Empty{}
			}
			if err := m.ApiDefinitionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataGuardEnabled == nil {
				m.DataGuardEnabled = &schema.Empty{}
			}
			if err := m.DataGuardEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfProtectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfProtectionEnabled == nil {
				m.CsrfProtectionEnabled = &schema.Empty{}
			}
			if err := m.CsrfProtectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphQlInspectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphQlInspectionEnabled == nil {
				m.GraphQlInspectionEnabled = &schema.Empty{}
			}
			if err := m.GraphQlInspectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieProtectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CookieProtectionEnabled == nil {
				m.CookieProtectionEnabled = &schema.Empty{}
			}
			if err := m.CookieProtectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientBlockingEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientBlockingEnabled == nil {
				m.ClientBlockingEnabled = &schema.Empty{}
			}
			if err := m.ClientBlockingEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicyEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicyEnabled == nil {
				m.CorsPolicyEnabled = &schema.Empty{}
			}
			if err := m.CorsPolicyEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutesEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutesEnabled == nil {
				m.RoutesEnabled = &schema.Empty{}
			}
			if err := m.RoutesEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubsetEnabled == nil {
				m.OriginServerSubsetEnabled = &schema.Empty{}
			}
			if err := m.OriginServerSubsetEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadbalancerAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpListenPortChoice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpListenPortChoice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancerEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultLoadbalancerEnabled == nil {
				m.DefaultLoadbalancerEnabled = &schema.Empty{}
			}
			if err := m.DefaultLoadbalancerEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutualTlsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MutualTlsEnabled == nil {
				m.MutualTlsEnabled = &schema.Empty{}
			}
			if err := m.MutualTlsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsSecurityLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsSecurityLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationExpirationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificationExpirationDate == nil {
				m.CertificationExpirationDate = &types.Timestamp{}
			}
			if err := m.CertificationExpirationDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafPolicyRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafPolicyRef = append(m.WafPolicyRef, &views.ObjectRefType{})
			if err := m.WafPolicyRef[len(m.WafPolicyRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoveryEnabled == nil {
				m.ApiDiscoveryEnabled = &schema.Empty{}
			}
			if err := m.ApiDiscoveryEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafEnforcementMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafEnforcementMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MalwareProtectionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MalwareProtectionEnabled == nil {
				m.MalwareProtectionEnabled = &schema.Empty{}
			}
			if err := m.MalwareProtectionEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLoadbalancerInventoryType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLoadbalancerInventoryType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLoadbalancerInventoryType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpOnly", wireType)
			}
			m.HttpOnly = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpOnly |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			m.Waf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Waf |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotProtection", wireType)
			}
			m.BotProtection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotProtection |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtection", wireType)
			}
			m.ApiProtection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiProtection |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosProtection", wireType)
			}
			m.DdosProtection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DdosProtection |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			m.ClientSideDefense = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientSideDefense |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceServicePolicy", wireType)
			}
			m.NamespaceServicePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceServicePolicy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicy", wireType)
			}
			m.ServicePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicePolicy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpReputation", wireType)
			}
			m.IpReputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpReputation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserDetection", wireType)
			}
			m.MaliciousUserDetection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaliciousUserDetection |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAdvertisement", wireType)
			}
			m.PrivateAdvertisement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateAdvertisement |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAdvertisment", wireType)
			}
			m.PublicAdvertisment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicAdvertisment |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttplbResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttplbResults = append(m.HttplbResults, &HTTPLoadbalancerResultType{})
			if err := m.HttplbResults[len(m.HttplbResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscovery", wireType)
			}
			m.ApiDiscovery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiDiscovery |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnlbResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdnlbResults = append(m.CdnlbResults, &HTTPLoadbalancerResultType{})
			if err := m.CdnlbResults[len(m.CdnlbResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MalwareProtection", wireType)
			}
			m.MalwareProtection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MalwareProtection |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BIGIPVirtualServerInventoryFilterType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BIGIPVirtualServerInventoryFilterType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BIGIPVirtualServerInventoryFilterType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscovery == nil {
				m.ApiDiscovery = &types.BoolValue{}
			}
			if err := m.ApiDiscovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafConfigured", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafConfigured == nil {
				m.WafConfigured = &types.BoolValue{}
			}
			if err := m.WafConfigured.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BIGIPVirtualServerResultType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BIGIPVirtualServerResultType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BIGIPVirtualServerResultType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoveryEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoveryEnabled == nil {
				m.ApiDiscoveryEnabled = &schema.Empty{}
			}
			if err := m.ApiDiscoveryEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafPolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafPolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafEnforcementMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafEnforcementMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BIGIPVirtualServerInventoryType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BIGIPVirtualServerInventoryType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BIGIPVirtualServerInventoryType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafConfigured", wireType)
			}
			m.WafConfigured = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WafConfigured |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigiplbResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigiplbResults = append(m.BigiplbResults, &BIGIPVirtualServerResultType{})
			if err := m.BigiplbResults[len(m.BigiplbResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscovery", wireType)
			}
			m.ApiDiscovery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiDiscovery |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationInventoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationInventoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationInventoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLoadBalancerFilter == nil {
				m.HttpLoadBalancerFilter = &HTTPLoadbalancerInventoryFilterType{}
			}
			if err := m.HttpLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpLoadBalancerFilter == nil {
				m.TcpLoadBalancerFilter = &TCPLoadbalancerInventoryFilterType{}
			}
			if err := m.TcpLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CdnLoadBalancerFilter == nil {
				m.CdnLoadBalancerFilter = &HTTPLoadbalancerInventoryFilterType{}
			}
			if err := m.CdnLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipVirtualServerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigipVirtualServerFilter == nil {
				m.BigipVirtualServerFilter = &BIGIPVirtualServerInventoryFilterType{}
			}
			if err := m.BigipVirtualServerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UdpLoadBalancerFilter == nil {
				m.UdpLoadBalancerFilter = &UDPLoadbalancerInventoryFilterType{}
			}
			if err := m.UdpLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationInventoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationInventoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationInventoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancers", wireType)
			}
			m.Loadbalancers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loadbalancers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			m.OriginPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginPools |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesDiscovered", wireType)
			}
			m.ServicesDiscovered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicesDiscovered |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLoadbalancers == nil {
				m.HttpLoadbalancers = &HTTPLoadbalancerInventoryType{}
			}
			if err := m.HttpLoadbalancers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpLoadbalancers == nil {
				m.TcpLoadbalancers = &TCPLoadbalancerInventoryType{}
			}
			if err := m.TcpLoadbalancers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CdnLoadbalancers == nil {
				m.CdnLoadbalancers = &HTTPLoadbalancerInventoryType{}
			}
			if err := m.CdnLoadbalancers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipVirtualServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigipVirtualServers == nil {
				m.BigipVirtualServers = &BIGIPVirtualServerInventoryType{}
			}
			if err := m.BigipVirtualServers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UdpLoadbalancers == nil {
				m.UdpLoadbalancers = &UDPLoadbalancerInventoryType{}
			}
			if err := m.UdpLoadbalancers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllApplicationInventoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllApplicationInventoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllApplicationInventoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLoadBalancerFilter == nil {
				m.HttpLoadBalancerFilter = &HTTPLoadbalancerInventoryFilterType{}
			}
			if err := m.HttpLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpLoadBalancerFilter == nil {
				m.TcpLoadBalancerFilter = &TCPLoadbalancerInventoryFilterType{}
			}
			if err := m.TcpLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CdnLoadBalancerFilter == nil {
				m.CdnLoadBalancerFilter = &HTTPLoadbalancerInventoryFilterType{}
			}
			if err := m.CdnLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipVirtualServerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigipVirtualServerFilter == nil {
				m.BigipVirtualServerFilter = &BIGIPVirtualServerInventoryFilterType{}
			}
			if err := m.BigipVirtualServerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpLoadBalancerFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UdpLoadBalancerFilter == nil {
				m.UdpLoadBalancerFilter = &UDPLoadbalancerInventoryFilterType{}
			}
			if err := m.UdpLoadBalancerFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLoadbalancerWafFilterResultType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLoadbalancerWafFilterResultType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLoadbalancerWafFilterResultType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllApplicationInventoryWafFilterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllApplicationInventoryWafFilterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllApplicationInventoryWafFilterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadbalancers = append(m.HttpLoadbalancers, &HTTPLoadbalancerWafFilterResultType{})
			if err := m.HttpLoadbalancers[len(m.HttpLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdnLoadbalancers = append(m.CdnLoadbalancers, &HTTPLoadbalancerWafFilterResultType{})
			if err := m.CdnLoadbalancers[len(m.CdnLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllApplicationInventoryWafFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllApplicationInventoryWafFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllApplicationInventoryWafFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusionSignatureId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WafFilterChoice = &AllApplicationInventoryWafFilterRequest_ExclusionSignatureId{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusionViolationType", wireType)
			}
			var v app_firewall.AppFirewallViolationType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= app_firewall.AppFirewallViolationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WafFilterChoice = &AllApplicationInventoryWafFilterRequest_ExclusionViolationType{v}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapiAkar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapiAkar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapiAkar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapiAkar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapiAkar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapiAkar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapiAkar = fmt.Errorf("proto: unexpected end of group")
)

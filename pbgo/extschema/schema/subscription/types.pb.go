// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/subscription/types.proto

package subscription

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status
//
// x-displayName: "Addon Subscription Status"
// Status of an addon subscription
type Status int32

const (
	// x-displayName: "None"
	// Default state
	AS_UNKNOWN Status = 0
	// x-displayName: "Subscribed"
	// Successfully subscribed
	AS_SUBSCRIBED Status = 1
	// x-displayName: "Unsubscribed"
	// Successfully unsubscribed
	AS_UNSUBSCRIBED Status = 2
	// x-displayName: "Error"
	// Service subscription request ended up in error state.
	AS_ERROR Status = 3
)

var Status_name = map[int32]string{
	0: "AS_UNKNOWN",
	1: "AS_SUBSCRIBED",
	2: "AS_UNSUBSCRIBED",
	3: "AS_ERROR",
}

var Status_value = map[string]int32{
	"AS_UNKNOWN":      0,
	"AS_SUBSCRIBED":   1,
	"AS_UNSUBSCRIBED": 2,
	"AS_ERROR":        3,
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1a5c948ffa1e8591, []int{0}
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// This is the shape of the subscription object in the database at Global Controller.
type GlobalSpecType struct {
	// Addon Service Status
	//
	// x-displayName: "Addon Service Status"
	// Addon service status
	AddonServiceStatus map[string]*AddonServiceStatus `protobuf:"bytes,1,rep,name=addon_service_status,json=addonServiceStatus,proto3" json:"addon_service_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a5c948ffa1e8591, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetAddonServiceStatus() map[string]*AddonServiceStatus {
	if m != nil {
		return m.AddonServiceStatus
	}
	return nil
}

// AddonServiceStatus
//
// x-displayName: "Addon Service Status"
// Display current state of an addon service
type AddonServiceStatus struct {
	// Status
	//
	// x-displayName: "Addon Subscription Status"
	// Status of an addon subscription
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.subscription.Status" json:"status,omitempty"`
}

func (m *AddonServiceStatus) Reset()      { *m = AddonServiceStatus{} }
func (*AddonServiceStatus) ProtoMessage() {}
func (*AddonServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a5c948ffa1e8591, []int{1}
}
func (m *AddonServiceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AddonServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonServiceStatus.Merge(m, src)
}
func (m *AddonServiceStatus) XXX_Size() int {
	return m.Size()
}
func (m *AddonServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AddonServiceStatus proto.InternalMessageInfo

func (m *AddonServiceStatus) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return AS_UNKNOWN
}

// Get Subscription
//
// x-displayName: "Get Subscription"
// Get subscription
type GetSpecType struct {
	AddonServiceStatus map[string]*AddonServiceStatus `protobuf:"bytes,1,rep,name=addon_service_status,json=addonServiceStatus,proto3" json:"addon_service_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a5c948ffa1e8591, []int{2}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetAddonServiceStatus() map[string]*AddonServiceStatus {
	if m != nil {
		return m.AddonServiceStatus
	}
	return nil
}

// Replace subscription
//
// x-displayName: "Replace Subscription"
// Replace a given subscription
type ReplaceSpecType struct {
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a5c948ffa1e8591, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

// Create Subscription
//
// x-displayName: "Create Subscription"
// Create Subscription
type CreateSpecType struct {
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a5c948ffa1e8591, []int{4}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ves.io.schema.subscription.Status", Status_name, Status_value)
	golang_proto.RegisterEnum("ves.io.schema.subscription.Status", Status_name, Status_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.subscription.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.subscription.GlobalSpecType")
	proto.RegisterMapType((map[string]*AddonServiceStatus)(nil), "ves.io.schema.subscription.GlobalSpecType.AddonServiceStatusEntry")
	golang_proto.RegisterMapType((map[string]*AddonServiceStatus)(nil), "ves.io.schema.subscription.GlobalSpecType.AddonServiceStatusEntry")
	proto.RegisterType((*AddonServiceStatus)(nil), "ves.io.schema.subscription.AddonServiceStatus")
	golang_proto.RegisterType((*AddonServiceStatus)(nil), "ves.io.schema.subscription.AddonServiceStatus")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.subscription.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.subscription.GetSpecType")
	proto.RegisterMapType((map[string]*AddonServiceStatus)(nil), "ves.io.schema.subscription.GetSpecType.AddonServiceStatusEntry")
	golang_proto.RegisterMapType((map[string]*AddonServiceStatus)(nil), "ves.io.schema.subscription.GetSpecType.AddonServiceStatusEntry")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.subscription.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.subscription.ReplaceSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.subscription.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.subscription.CreateSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/subscription/types.proto", fileDescriptor_1a5c948ffa1e8591)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/subscription/types.proto", fileDescriptor_1a5c948ffa1e8591)
}

var fileDescriptor_1a5c948ffa1e8591 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0xf3, 0xba, 0x58, 0x74, 0xaa, 0xdd, 0x74, 0x14, 0xac, 0x11, 0x86, 0x92, 0x83, 0x14,
	0xa1, 0x13, 0xa8, 0x17, 0xe9, 0x41, 0x69, 0x77, 0xcb, 0x22, 0x42, 0x77, 0x49, 0x5c, 0x04, 0x2f,
	0x21, 0x49, 0x67, 0xb3, 0x61, 0xd3, 0x4e, 0x9c, 0x4c, 0x82, 0xbd, 0x79, 0xf6, 0x20, 0x7e, 0x0c,
	0x3f, 0x86, 0x47, 0xf1, 0xd4, 0x63, 0x8f, 0x36, 0xbd, 0x78, 0xdc, 0x2f, 0x20, 0xc8, 0x26, 0xdd,
	0xda, 0x5a, 0xb6, 0x77, 0x6f, 0x6f, 0xde, 0xfb, 0xbf, 0xdf, 0x7b, 0xf9, 0x93, 0x87, 0x9e, 0xa4,
	0x2c, 0xa6, 0x01, 0x37, 0x62, 0xef, 0x9c, 0x8d, 0x1c, 0x23, 0x4e, 0xdc, 0xd8, 0x13, 0x41, 0x24,
	0x03, 0x3e, 0x36, 0xe4, 0x24, 0x62, 0x31, 0x8d, 0x04, 0x97, 0x1c, 0x6b, 0x85, 0x8e, 0x16, 0x3a,
	0xba, 0xae, 0xd3, 0x5a, 0x7e, 0x20, 0xcf, 0x13, 0x97, 0x7a, 0x7c, 0x64, 0xf8, 0xdc, 0xe7, 0x46,
	0xde, 0xe2, 0x26, 0x67, 0xf9, 0x2b, 0x7f, 0xe4, 0x51, 0x81, 0xd2, 0x1e, 0x6f, 0x8e, 0xe4, 0x39,
	0x64, 0x39, 0x47, 0x7b, 0xb4, 0x59, 0x5c, 0x5b, 0x41, 0xff, 0x0d, 0xa8, 0x7a, 0x14, 0x72, 0xd7,
	0x09, 0xad, 0x88, 0x79, 0x6f, 0x26, 0x11, 0xc3, 0x12, 0x3d, 0x70, 0x86, 0x43, 0x3e, 0xb6, 0x63,
	0x26, 0xd2, 0xc0, 0x63, 0x76, 0x2c, 0x1d, 0x99, 0xc4, 0x75, 0x68, 0xec, 0x35, 0x2b, 0xed, 0x1e,
	0xbd, 0x79, 0x69, 0xba, 0x49, 0xa2, 0xdd, 0x2b, 0x8c, 0x55, 0x50, 0xac, 0x1c, 0xd2, 0x1f, 0x4b,
	0x31, 0x31, 0xb1, 0xb3, 0x55, 0xd0, 0x12, 0xf4, 0xf0, 0x06, 0x39, 0x56, 0xd1, 0xde, 0x05, 0x9b,
	0xd4, 0xa1, 0x01, 0xcd, 0x3b, 0xe6, 0x55, 0x88, 0x0f, 0xd1, 0xad, 0xd4, 0x09, 0x13, 0x56, 0x2f,
	0x35, 0xa0, 0x59, 0x69, 0xd3, 0x5d, 0x3b, 0x6d, 0x53, 0xcd, 0xa2, 0xb9, 0x53, 0x7a, 0x0e, 0xfa,
	0x09, 0xc2, 0xdb, 0x02, 0xdc, 0x41, 0xe5, 0xd5, 0x47, 0x43, 0xb3, 0xda, 0xd6, 0x77, 0x0d, 0x58,
	0x42, 0x97, 0x1d, 0xfa, 0xa7, 0x12, 0xaa, 0x1c, 0x31, 0xb9, 0xb2, 0xf3, 0xfd, 0x4e, 0x3b, 0x5f,
	0xee, 0xb4, 0xf3, 0x2f, 0xe6, 0x3f, 0xf0, 0xb2, 0x53, 0xfb, 0xf1, 0xe2, 0x9f, 0x7f, 0x49, 0xaf,
	0xa1, 0x7d, 0x93, 0x45, 0xa1, 0xe3, 0xb1, 0x55, 0x4a, 0x45, 0xd5, 0x03, 0xc1, 0x1c, 0xb9, 0xca,
	0x3c, 0x1d, 0xa0, 0xf2, 0xd2, 0xf7, 0x2a, 0x42, 0x5d, 0xcb, 0x3e, 0x1d, 0xbc, 0x1e, 0x1c, 0xbf,
	0x1d, 0xa8, 0x0a, 0xae, 0xa1, 0x7b, 0x5d, 0xcb, 0xb6, 0x4e, 0x7b, 0xd6, 0x81, 0xf9, 0xaa, 0xd7,
	0x3f, 0x54, 0x01, 0xdf, 0x47, 0xfb, 0xb9, 0x64, 0x2d, 0x59, 0xc2, 0x77, 0xd1, 0xed, 0xae, 0x65,
	0xf7, 0x4d, 0xf3, 0xd8, 0x54, 0xf7, 0x7a, 0x9f, 0x61, 0x3a, 0x27, 0xca, 0x6c, 0x4e, 0x94, 0xcb,
	0x39, 0x81, 0x8f, 0x19, 0x81, 0xaf, 0x19, 0x81, 0xef, 0x19, 0x81, 0x69, 0x46, 0x60, 0x96, 0x11,
	0xf8, 0x99, 0x11, 0xf8, 0x95, 0x11, 0xe5, 0x32, 0x23, 0xf0, 0x65, 0x41, 0x94, 0x6f, 0x0b, 0x02,
	0xd3, 0x05, 0x51, 0x66, 0x0b, 0xa2, 0xbc, 0x3b, 0xf1, 0x79, 0x74, 0xe1, 0xd3, 0x94, 0x87, 0x92,
	0x09, 0xe1, 0xd0, 0x24, 0x36, 0xf2, 0xe0, 0x8c, 0x8b, 0x51, 0x2b, 0x12, 0x3c, 0x0d, 0x86, 0x4c,
	0xb4, 0xae, 0xcb, 0x46, 0xe4, 0xfa, 0xdc, 0x60, 0x1f, 0xe4, 0xf5, 0xb1, 0x6f, 0xdf, 0xbc, 0x5b,
	0xce, 0x6f, 0xed, 0xd9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x91, 0x63, 0x4f, 0x18, 0x04,
	0x00, 0x00,
}

func (x Status) String() string {
	s, ok := Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AddonServiceStatus) != len(that1.AddonServiceStatus) {
		return false
	}
	for i := range this.AddonServiceStatus {
		if !this.AddonServiceStatus[i].Equal(that1.AddonServiceStatus[i]) {
			return false
		}
	}
	return true
}
func (this *AddonServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceStatus)
	if !ok {
		that2, ok := that.(AddonServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AddonServiceStatus) != len(that1.AddonServiceStatus) {
		return false
	}
	for i := range this.AddonServiceStatus {
		if !this.AddonServiceStatus[i].Equal(that1.AddonServiceStatus[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&subscription.GlobalSpecType{")
	keysForAddonServiceStatus := make([]string, 0, len(this.AddonServiceStatus))
	for k, _ := range this.AddonServiceStatus {
		keysForAddonServiceStatus = append(keysForAddonServiceStatus, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAddonServiceStatus)
	mapStringForAddonServiceStatus := "map[string]*AddonServiceStatus{"
	for _, k := range keysForAddonServiceStatus {
		mapStringForAddonServiceStatus += fmt.Sprintf("%#v: %#v,", k, this.AddonServiceStatus[k])
	}
	mapStringForAddonServiceStatus += "}"
	if this.AddonServiceStatus != nil {
		s = append(s, "AddonServiceStatus: "+mapStringForAddonServiceStatus+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddonServiceStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&subscription.AddonServiceStatus{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&subscription.GetSpecType{")
	keysForAddonServiceStatus := make([]string, 0, len(this.AddonServiceStatus))
	for k, _ := range this.AddonServiceStatus {
		keysForAddonServiceStatus = append(keysForAddonServiceStatus, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAddonServiceStatus)
	mapStringForAddonServiceStatus := "map[string]*AddonServiceStatus{"
	for _, k := range keysForAddonServiceStatus {
		mapStringForAddonServiceStatus += fmt.Sprintf("%#v: %#v,", k, this.AddonServiceStatus[k])
	}
	mapStringForAddonServiceStatus += "}"
	if this.AddonServiceStatus != nil {
		s = append(s, "AddonServiceStatus: "+mapStringForAddonServiceStatus+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&subscription.ReplaceSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&subscription.CreateSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddonServiceStatus) > 0 {
		keysForAddonServiceStatus := make([]string, 0, len(m.AddonServiceStatus))
		for k := range m.AddonServiceStatus {
			keysForAddonServiceStatus = append(keysForAddonServiceStatus, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAddonServiceStatus)
		for iNdEx := len(keysForAddonServiceStatus) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AddonServiceStatus[string(keysForAddonServiceStatus[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForAddonServiceStatus[iNdEx])
			copy(dAtA[i:], keysForAddonServiceStatus[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForAddonServiceStatus[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddonServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddonServiceStatus) > 0 {
		keysForAddonServiceStatus := make([]string, 0, len(m.AddonServiceStatus))
		for k := range m.AddonServiceStatus {
			keysForAddonServiceStatus = append(keysForAddonServiceStatus, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAddonServiceStatus)
		for iNdEx := len(keysForAddonServiceStatus) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AddonServiceStatus[string(keysForAddonServiceStatus[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForAddonServiceStatus[iNdEx])
			copy(dAtA[i:], keysForAddonServiceStatus[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForAddonServiceStatus[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddonServiceStatus) > 0 {
		for k, v := range m.AddonServiceStatus {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AddonServiceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddonServiceStatus) > 0 {
		for k, v := range m.AddonServiceStatus {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForAddonServiceStatus := make([]string, 0, len(this.AddonServiceStatus))
	for k, _ := range this.AddonServiceStatus {
		keysForAddonServiceStatus = append(keysForAddonServiceStatus, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAddonServiceStatus)
	mapStringForAddonServiceStatus := "map[string]*AddonServiceStatus{"
	for _, k := range keysForAddonServiceStatus {
		mapStringForAddonServiceStatus += fmt.Sprintf("%v: %v,", k, this.AddonServiceStatus[k])
	}
	mapStringForAddonServiceStatus += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AddonServiceStatus:` + mapStringForAddonServiceStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonServiceStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceStatus{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForAddonServiceStatus := make([]string, 0, len(this.AddonServiceStatus))
	for k, _ := range this.AddonServiceStatus {
		keysForAddonServiceStatus = append(keysForAddonServiceStatus, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAddonServiceStatus)
	mapStringForAddonServiceStatus := "map[string]*AddonServiceStatus{"
	for _, k := range keysForAddonServiceStatus {
		mapStringForAddonServiceStatus += fmt.Sprintf("%v: %v,", k, this.AddonServiceStatus[k])
	}
	mapStringForAddonServiceStatus += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`AddonServiceStatus:` + mapStringForAddonServiceStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonServiceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddonServiceStatus == nil {
				m.AddonServiceStatus = make(map[string]*AddonServiceStatus)
			}
			var mapkey string
			var mapvalue *AddonServiceStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AddonServiceStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AddonServiceStatus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddonServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonServiceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddonServiceStatus == nil {
				m.AddonServiceStatus = make(map[string]*AddonServiceStatus)
			}
			var mapkey string
			var mapvalue *AddonServiceStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AddonServiceStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AddonServiceStatus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log_receiver/types.proto

package log_receiver

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IP Address and Port Number
//
// x-displayName: "IP Address and Port Number"
// Ip address and port number for a server
type IPServerConfigType struct {
	// Server IP address
	//
	// x-displayName: "Server IP address"
	// x-required
	// x-example: "10.1.1.1"
	// Ip address of the log receiver server
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Port Number
	//
	// x-displayName: "Port Number"
	// x-required
	// x-example: "3000"
	// Port number used for communication
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *IPServerConfigType) Reset()      { *m = IPServerConfigType{} }
func (*IPServerConfigType) ProtoMessage() {}
func (*IPServerConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{0}
}
func (m *IPServerConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPServerConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IPServerConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPServerConfigType.Merge(m, src)
}
func (m *IPServerConfigType) XXX_Size() int {
	return m.Size()
}
func (m *IPServerConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_IPServerConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_IPServerConfigType proto.InternalMessageInfo

func (m *IPServerConfigType) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *IPServerConfigType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// HTTP Server Name and Port Number
//
// x-displayName: "HTTP Server Name and Port Number"
// Name and port number for a HTTP server
type HTTPServerConfigType struct {
	// Server Name
	//
	// x-displayName: "Server name"
	// x-required
	// x-example: "server.example.com"
	// Server name is fully qualified domain name of the server
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// Port Number
	//
	// x-displayName: "Port Number"
	// x-required
	// x-example: "3000"
	// Port number used for communication
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *HTTPServerConfigType) Reset()      { *m = HTTPServerConfigType{} }
func (*HTTPServerConfigType) ProtoMessage() {}
func (*HTTPServerConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{1}
}
func (m *HTTPServerConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPServerConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPServerConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPServerConfigType.Merge(m, src)
}
func (m *HTTPServerConfigType) XXX_Size() int {
	return m.Size()
}
func (m *HTTPServerConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPServerConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPServerConfigType proto.InternalMessageInfo

func (m *HTTPServerConfigType) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HTTPServerConfigType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// TCP Server Name and Port Number
//
// x-displayName: "TCP Server name and Port Number"
// Name and port number for a TCP server
type TCPServerConfigType struct {
	// Server Name
	//
	// x-displayName: "Server name"
	// x-required
	// x-example: "server.example.com"
	// Server name is fully qualified domain name or IP address of the server
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// Port Number
	//
	// x-displayName: "Port Number"
	// x-required
	// x-example: "601"
	// Port number used for communication
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *TCPServerConfigType) Reset()      { *m = TCPServerConfigType{} }
func (*TCPServerConfigType) ProtoMessage() {}
func (*TCPServerConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{2}
}
func (m *TCPServerConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPServerConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TCPServerConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPServerConfigType.Merge(m, src)
}
func (m *TCPServerConfigType) XXX_Size() int {
	return m.Size()
}
func (m *TCPServerConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPServerConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_TCPServerConfigType proto.InternalMessageInfo

func (m *TCPServerConfigType) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TCPServerConfigType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// UDP Server Name and Port Number
//
// x-displayName: "UDP Server Name and Port Number"
// Name and port number for a UDP server
type UDPServerConfigType struct {
	// Server Name
	//
	// x-displayName: "Server name"
	// x-required
	// x-example: "server.example.com"
	// Server name is fully qualified domain name or IP address of the server
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// Port Number
	//
	// x-displayName: "Port Number"
	// x-required
	// x-example: "514"
	// Port number used for communication
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *UDPServerConfigType) Reset()      { *m = UDPServerConfigType{} }
func (*UDPServerConfigType) ProtoMessage() {}
func (*UDPServerConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{3}
}
func (m *UDPServerConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDPServerConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UDPServerConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPServerConfigType.Merge(m, src)
}
func (m *UDPServerConfigType) XXX_Size() int {
	return m.Size()
}
func (m *UDPServerConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPServerConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_UDPServerConfigType proto.InternalMessageInfo

func (m *UDPServerConfigType) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *UDPServerConfigType) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// mTLS Client config
//
// x-displayName: "mTLS Client Config"
// TLS config for client
type TLSClientConfigType struct {
	// The TLS certificate URL.
	//
	// x-displayName: "Client Certificate"
	// Client  certificate is PEM-encoded certificate or certificate-chain.
	Certificate string `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Private Key
	//
	// x-displayName: "Client Private Key"
	// Client private key file containing data in PEM format including the PEM headers.
	// The data in this key file has to match accompanying certificate.
	// The data may be optionally secured using BlindFold.
	KeyUrl *schema.SecretType `protobuf:"bytes,2,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
}

func (m *TLSClientConfigType) Reset()      { *m = TLSClientConfigType{} }
func (*TLSClientConfigType) ProtoMessage() {}
func (*TLSClientConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{4}
}
func (m *TLSClientConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSClientConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TLSClientConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSClientConfigType.Merge(m, src)
}
func (m *TLSClientConfigType) XXX_Size() int {
	return m.Size()
}
func (m *TLSClientConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSClientConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_TLSClientConfigType proto.InternalMessageInfo

func (m *TLSClientConfigType) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *TLSClientConfigType) GetKeyUrl() *schema.SecretType {
	if m != nil {
		return m.KeyUrl
	}
	return nil
}

// TLS config
//
// x-displayName: "Client TLS Config"
// TLS config for client of discovery service
type TLSConfigType struct {
	// Server Name
	//
	// x-displayName: "SNI name"
	// x-example: "server.acme.com"
	// x-required
	// ServerName is passed to the server for SNI and is used in the client to check server
	// certificates against.
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// Port Number
	//
	// x-displayName: "Port Number"
	// x-required
	// Select port number for communication
	//
	// Types that are valid to be assigned to PortChoice:
	//	*TLSConfigType_DefaultSyslogTlsPort
	//	*TLSConfigType_DefaultHttpsPort
	//	*TLSConfigType_Port
	PortChoice isTLSConfigType_PortChoice `protobuf_oneof:"port_choice"`
	// Trusted CA
	//
	// x-displayName: "Trusted CA"
	// x-required
	// Trusted CA for TLS server
	//
	// Types that are valid to be assigned to CaChoice:
	//	*TLSConfigType_VolterraCa
	//	*TLSConfigType_TrustedCaUrl
	CaChoice isTLSConfigType_CaChoice `protobuf_oneof:"ca_choice"`
	// mTLS config
	//
	// x-displayName: "mTLS config"
	// x-required
	// Select to enable mTLS configuration
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*TLSConfigType_MtlsDisabled
	//	*TLSConfigType_MtlsEnable
	MtlsChoice isTLSConfigType_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *TLSConfigType) Reset()      { *m = TLSConfigType{} }
func (*TLSConfigType) ProtoMessage() {}
func (*TLSConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{5}
}
func (m *TLSConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TLSConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSConfigType.Merge(m, src)
}
func (m *TLSConfigType) XXX_Size() int {
	return m.Size()
}
func (m *TLSConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_TLSConfigType proto.InternalMessageInfo

type isTLSConfigType_PortChoice interface {
	isTLSConfigType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTLSConfigType_CaChoice interface {
	isTLSConfigType_CaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTLSConfigType_MtlsChoice interface {
	isTLSConfigType_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TLSConfigType_DefaultSyslogTlsPort struct {
	DefaultSyslogTlsPort *schema.Empty `protobuf:"bytes,3,opt,name=default_syslog_tls_port,json=defaultSyslogTlsPort,proto3,oneof" json:"default_syslog_tls_port,omitempty"`
}
type TLSConfigType_DefaultHttpsPort struct {
	DefaultHttpsPort *schema.Empty `protobuf:"bytes,4,opt,name=default_https_port,json=defaultHttpsPort,proto3,oneof" json:"default_https_port,omitempty"`
}
type TLSConfigType_Port struct {
	Port uint32 `protobuf:"varint,5,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type TLSConfigType_VolterraCa struct {
	VolterraCa *schema.Empty `protobuf:"bytes,7,opt,name=volterra_ca,json=volterraCa,proto3,oneof" json:"volterra_ca,omitempty"`
}
type TLSConfigType_TrustedCaUrl struct {
	TrustedCaUrl string `protobuf:"bytes,8,opt,name=trusted_ca_url,json=trustedCaUrl,proto3,oneof" json:"trusted_ca_url,omitempty"`
}
type TLSConfigType_MtlsDisabled struct {
	MtlsDisabled *schema.Empty `protobuf:"bytes,10,opt,name=mtls_disabled,json=mtlsDisabled,proto3,oneof" json:"mtls_disabled,omitempty"`
}
type TLSConfigType_MtlsEnable struct {
	MtlsEnable *TLSClientConfigType `protobuf:"bytes,11,opt,name=mtls_enable,json=mtlsEnable,proto3,oneof" json:"mtls_enable,omitempty"`
}

func (*TLSConfigType_DefaultSyslogTlsPort) isTLSConfigType_PortChoice() {}
func (*TLSConfigType_DefaultHttpsPort) isTLSConfigType_PortChoice()     {}
func (*TLSConfigType_Port) isTLSConfigType_PortChoice()                 {}
func (*TLSConfigType_VolterraCa) isTLSConfigType_CaChoice()             {}
func (*TLSConfigType_TrustedCaUrl) isTLSConfigType_CaChoice()           {}
func (*TLSConfigType_MtlsDisabled) isTLSConfigType_MtlsChoice()         {}
func (*TLSConfigType_MtlsEnable) isTLSConfigType_MtlsChoice()           {}

func (m *TLSConfigType) GetPortChoice() isTLSConfigType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *TLSConfigType) GetCaChoice() isTLSConfigType_CaChoice {
	if m != nil {
		return m.CaChoice
	}
	return nil
}
func (m *TLSConfigType) GetMtlsChoice() isTLSConfigType_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *TLSConfigType) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSConfigType) GetDefaultSyslogTlsPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*TLSConfigType_DefaultSyslogTlsPort); ok {
		return x.DefaultSyslogTlsPort
	}
	return nil
}

func (m *TLSConfigType) GetDefaultHttpsPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*TLSConfigType_DefaultHttpsPort); ok {
		return x.DefaultHttpsPort
	}
	return nil
}

func (m *TLSConfigType) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*TLSConfigType_Port); ok {
		return x.Port
	}
	return 0
}

func (m *TLSConfigType) GetVolterraCa() *schema.Empty {
	if x, ok := m.GetCaChoice().(*TLSConfigType_VolterraCa); ok {
		return x.VolterraCa
	}
	return nil
}

func (m *TLSConfigType) GetTrustedCaUrl() string {
	if x, ok := m.GetCaChoice().(*TLSConfigType_TrustedCaUrl); ok {
		return x.TrustedCaUrl
	}
	return ""
}

func (m *TLSConfigType) GetMtlsDisabled() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*TLSConfigType_MtlsDisabled); ok {
		return x.MtlsDisabled
	}
	return nil
}

func (m *TLSConfigType) GetMtlsEnable() *TLSClientConfigType {
	if x, ok := m.GetMtlsChoice().(*TLSConfigType_MtlsEnable); ok {
		return x.MtlsEnable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TLSConfigType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TLSConfigType_DefaultSyslogTlsPort)(nil),
		(*TLSConfigType_DefaultHttpsPort)(nil),
		(*TLSConfigType_Port)(nil),
		(*TLSConfigType_VolterraCa)(nil),
		(*TLSConfigType_TrustedCaUrl)(nil),
		(*TLSConfigType_MtlsDisabled)(nil),
		(*TLSConfigType_MtlsEnable)(nil),
	}
}

// Syslog Server Configuration
//
// x-displayName: "Syslog Server Configuration"
// Configuration for syslog server
type SyslogReceiver struct {
	// Syslog Transport Mode
	//
	// x-displayName: "Syslog Transport Mode"
	// x-required
	// Select the syslog transport mode
	//
	// Types that are valid to be assigned to ModeChoice:
	//	*SyslogReceiver_UdpServer
	//	*SyslogReceiver_TcpServer
	//	*SyslogReceiver_TlsServer
	ModeChoice isSyslogReceiver_ModeChoice `protobuf_oneof:"mode_choice"`
	// Syslog Format
	//
	// x-displayName: "Syslog Format"
	// x-required
	// Select syslog format
	//
	// Types that are valid to be assigned to FormatChoice:
	//	*SyslogReceiver_SyslogRfc5424
	//	*SyslogReceiver_SyslogRfc3164
	FormatChoice isSyslogReceiver_FormatChoice `protobuf_oneof:"format_choice"`
}

func (m *SyslogReceiver) Reset()      { *m = SyslogReceiver{} }
func (*SyslogReceiver) ProtoMessage() {}
func (*SyslogReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{6}
}
func (m *SyslogReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyslogReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SyslogReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyslogReceiver.Merge(m, src)
}
func (m *SyslogReceiver) XXX_Size() int {
	return m.Size()
}
func (m *SyslogReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_SyslogReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_SyslogReceiver proto.InternalMessageInfo

type isSyslogReceiver_ModeChoice interface {
	isSyslogReceiver_ModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSyslogReceiver_FormatChoice interface {
	isSyslogReceiver_FormatChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SyslogReceiver_UdpServer struct {
	UdpServer *UDPServerConfigType `protobuf:"bytes,2,opt,name=udp_server,json=udpServer,proto3,oneof" json:"udp_server,omitempty"`
}
type SyslogReceiver_TcpServer struct {
	TcpServer *TCPServerConfigType `protobuf:"bytes,3,opt,name=tcp_server,json=tcpServer,proto3,oneof" json:"tcp_server,omitempty"`
}
type SyslogReceiver_TlsServer struct {
	TlsServer *TLSConfigType `protobuf:"bytes,4,opt,name=tls_server,json=tlsServer,proto3,oneof" json:"tls_server,omitempty"`
}
type SyslogReceiver_SyslogRfc5424 struct {
	SyslogRfc5424 uint32 `protobuf:"varint,6,opt,name=syslog_rfc5424,json=syslogRfc5424,proto3,oneof" json:"syslog_rfc5424,omitempty"`
}
type SyslogReceiver_SyslogRfc3164 struct {
	SyslogRfc3164 uint32 `protobuf:"varint,8,opt,name=syslog_rfc3164,json=syslogRfc3164,proto3,oneof" json:"syslog_rfc3164,omitempty"`
}

func (*SyslogReceiver_UdpServer) isSyslogReceiver_ModeChoice()       {}
func (*SyslogReceiver_TcpServer) isSyslogReceiver_ModeChoice()       {}
func (*SyslogReceiver_TlsServer) isSyslogReceiver_ModeChoice()       {}
func (*SyslogReceiver_SyslogRfc5424) isSyslogReceiver_FormatChoice() {}
func (*SyslogReceiver_SyslogRfc3164) isSyslogReceiver_FormatChoice() {}

func (m *SyslogReceiver) GetModeChoice() isSyslogReceiver_ModeChoice {
	if m != nil {
		return m.ModeChoice
	}
	return nil
}
func (m *SyslogReceiver) GetFormatChoice() isSyslogReceiver_FormatChoice {
	if m != nil {
		return m.FormatChoice
	}
	return nil
}

func (m *SyslogReceiver) GetUdpServer() *UDPServerConfigType {
	if x, ok := m.GetModeChoice().(*SyslogReceiver_UdpServer); ok {
		return x.UdpServer
	}
	return nil
}

func (m *SyslogReceiver) GetTcpServer() *TCPServerConfigType {
	if x, ok := m.GetModeChoice().(*SyslogReceiver_TcpServer); ok {
		return x.TcpServer
	}
	return nil
}

func (m *SyslogReceiver) GetTlsServer() *TLSConfigType {
	if x, ok := m.GetModeChoice().(*SyslogReceiver_TlsServer); ok {
		return x.TlsServer
	}
	return nil
}

func (m *SyslogReceiver) GetSyslogRfc5424() uint32 {
	if x, ok := m.GetFormatChoice().(*SyslogReceiver_SyslogRfc5424); ok {
		return x.SyslogRfc5424
	}
	return 0
}

func (m *SyslogReceiver) GetSyslogRfc3164() uint32 {
	if x, ok := m.GetFormatChoice().(*SyslogReceiver_SyslogRfc3164); ok {
		return x.SyslogRfc3164
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SyslogReceiver) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SyslogReceiver_UdpServer)(nil),
		(*SyslogReceiver_TcpServer)(nil),
		(*SyslogReceiver_TlsServer)(nil),
		(*SyslogReceiver_SyslogRfc5424)(nil),
		(*SyslogReceiver_SyslogRfc3164)(nil),
	}
}

// Datadog Server Configuration
//
// x-displayName: "Datadog Server Configuration"
// Configuration for Datadog server
type DataDogReceiver struct {
	// Server Name
	//
	// x-displayName: "Server Name"
	// x-required
	// ServerName of datadog service
	//
	// Types that are valid to be assigned to ServerNameChoice:
	//	*DataDogReceiver_DatadogDefaultServer
	//	*DataDogReceiver_ServerName
	ServerNameChoice isDataDogReceiver_ServerNameChoice `protobuf_oneof:"server_name_choice"`
	// Port Number
	//
	// x-displayName: "Port Number"
	// x-required
	// Select port number for communication
	//
	// Types that are valid to be assigned to PortChoice:
	//	*DataDogReceiver_DefaultPort
	//	*DataDogReceiver_Port
	PortChoice isDataDogReceiver_PortChoice `protobuf_oneof:"port_choice"`
	// Trusted CA for Datadog
	//
	// x-displayName: "Trusted CA for Datadog"
	// x-required
	// Trusted CA for datadog servers
	//
	// Types that are valid to be assigned to CaChoice:
	//	*DataDogReceiver_VolterraCa
	//	*DataDogReceiver_TrustedCaUrl
	CaChoice isDataDogReceiver_CaChoice `protobuf_oneof:"ca_choice"`
	// Datadog API Key
	//
	// x-displayName: "Datadog API Key"
	// Secret API key to access datadog servers
	DatadogApiKey *schema.SecretType `protobuf:"bytes,10,opt,name=datadog_api_key,json=datadogApiKey,proto3" json:"datadog_api_key,omitempty"`
	//  Compressed Format
	//
	// x-displayName: "Compressed Format"
	// x-required
	// Select if the messages are sent compressed or uncompressed
	//
	// Types that are valid to be assigned to CompressionChoice:
	//	*DataDogReceiver_CompressionEnabled
	//	*DataDogReceiver_CompressionDisabled
	CompressionChoice isDataDogReceiver_CompressionChoice `protobuf_oneof:"compression_choice"`
}

func (m *DataDogReceiver) Reset()      { *m = DataDogReceiver{} }
func (*DataDogReceiver) ProtoMessage() {}
func (*DataDogReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{7}
}
func (m *DataDogReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDogReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataDogReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDogReceiver.Merge(m, src)
}
func (m *DataDogReceiver) XXX_Size() int {
	return m.Size()
}
func (m *DataDogReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDogReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_DataDogReceiver proto.InternalMessageInfo

type isDataDogReceiver_ServerNameChoice interface {
	isDataDogReceiver_ServerNameChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDataDogReceiver_PortChoice interface {
	isDataDogReceiver_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDataDogReceiver_CaChoice interface {
	isDataDogReceiver_CaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDataDogReceiver_CompressionChoice interface {
	isDataDogReceiver_CompressionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataDogReceiver_DatadogDefaultServer struct {
	DatadogDefaultServer *schema.Empty `protobuf:"bytes,2,opt,name=datadog_default_server,json=datadogDefaultServer,proto3,oneof" json:"datadog_default_server,omitempty"`
}
type DataDogReceiver_ServerName struct {
	ServerName string `protobuf:"bytes,3,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type DataDogReceiver_DefaultPort struct {
	DefaultPort *schema.Empty `protobuf:"bytes,5,opt,name=default_port,json=defaultPort,proto3,oneof" json:"default_port,omitempty"`
}
type DataDogReceiver_Port struct {
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type DataDogReceiver_VolterraCa struct {
	VolterraCa *schema.Empty `protobuf:"bytes,8,opt,name=volterra_ca,json=volterraCa,proto3,oneof" json:"volterra_ca,omitempty"`
}
type DataDogReceiver_TrustedCaUrl struct {
	TrustedCaUrl string `protobuf:"bytes,9,opt,name=trusted_ca_url,json=trustedCaUrl,proto3,oneof" json:"trusted_ca_url,omitempty"`
}
type DataDogReceiver_CompressionEnabled struct {
	CompressionEnabled *schema.Empty `protobuf:"bytes,12,opt,name=compression_enabled,json=compressionEnabled,proto3,oneof" json:"compression_enabled,omitempty"`
}
type DataDogReceiver_CompressionDisabled struct {
	CompressionDisabled *schema.Empty `protobuf:"bytes,13,opt,name=compression_disabled,json=compressionDisabled,proto3,oneof" json:"compression_disabled,omitempty"`
}

func (*DataDogReceiver_DatadogDefaultServer) isDataDogReceiver_ServerNameChoice() {}
func (*DataDogReceiver_ServerName) isDataDogReceiver_ServerNameChoice()           {}
func (*DataDogReceiver_DefaultPort) isDataDogReceiver_PortChoice()                {}
func (*DataDogReceiver_Port) isDataDogReceiver_PortChoice()                       {}
func (*DataDogReceiver_VolterraCa) isDataDogReceiver_CaChoice()                   {}
func (*DataDogReceiver_TrustedCaUrl) isDataDogReceiver_CaChoice()                 {}
func (*DataDogReceiver_CompressionEnabled) isDataDogReceiver_CompressionChoice()  {}
func (*DataDogReceiver_CompressionDisabled) isDataDogReceiver_CompressionChoice() {}

func (m *DataDogReceiver) GetServerNameChoice() isDataDogReceiver_ServerNameChoice {
	if m != nil {
		return m.ServerNameChoice
	}
	return nil
}
func (m *DataDogReceiver) GetPortChoice() isDataDogReceiver_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *DataDogReceiver) GetCaChoice() isDataDogReceiver_CaChoice {
	if m != nil {
		return m.CaChoice
	}
	return nil
}
func (m *DataDogReceiver) GetCompressionChoice() isDataDogReceiver_CompressionChoice {
	if m != nil {
		return m.CompressionChoice
	}
	return nil
}

func (m *DataDogReceiver) GetDatadogDefaultServer() *schema.Empty {
	if x, ok := m.GetServerNameChoice().(*DataDogReceiver_DatadogDefaultServer); ok {
		return x.DatadogDefaultServer
	}
	return nil
}

func (m *DataDogReceiver) GetServerName() string {
	if x, ok := m.GetServerNameChoice().(*DataDogReceiver_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *DataDogReceiver) GetDefaultPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*DataDogReceiver_DefaultPort); ok {
		return x.DefaultPort
	}
	return nil
}

func (m *DataDogReceiver) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*DataDogReceiver_Port); ok {
		return x.Port
	}
	return 0
}

func (m *DataDogReceiver) GetVolterraCa() *schema.Empty {
	if x, ok := m.GetCaChoice().(*DataDogReceiver_VolterraCa); ok {
		return x.VolterraCa
	}
	return nil
}

func (m *DataDogReceiver) GetTrustedCaUrl() string {
	if x, ok := m.GetCaChoice().(*DataDogReceiver_TrustedCaUrl); ok {
		return x.TrustedCaUrl
	}
	return ""
}

func (m *DataDogReceiver) GetDatadogApiKey() *schema.SecretType {
	if m != nil {
		return m.DatadogApiKey
	}
	return nil
}

func (m *DataDogReceiver) GetCompressionEnabled() *schema.Empty {
	if x, ok := m.GetCompressionChoice().(*DataDogReceiver_CompressionEnabled); ok {
		return x.CompressionEnabled
	}
	return nil
}

func (m *DataDogReceiver) GetCompressionDisabled() *schema.Empty {
	if x, ok := m.GetCompressionChoice().(*DataDogReceiver_CompressionDisabled); ok {
		return x.CompressionDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataDogReceiver) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataDogReceiver_DatadogDefaultServer)(nil),
		(*DataDogReceiver_ServerName)(nil),
		(*DataDogReceiver_DefaultPort)(nil),
		(*DataDogReceiver_Port)(nil),
		(*DataDogReceiver_VolterraCa)(nil),
		(*DataDogReceiver_TrustedCaUrl)(nil),
		(*DataDogReceiver_CompressionEnabled)(nil),
		(*DataDogReceiver_CompressionDisabled)(nil),
	}
}

// Splunk HEC Configuration
//
// x-displayName: "Splunk HEC Configuration"
// Configuration for Splunk server
type SplunkReceiver struct {
	// Server Name
	//
	// x-displayName: "Server Name or IP"
	// x-required
	// Server Name or IP of splunk HEC
	//
	// Types that are valid to be assigned to ServerNameChoice:
	//	*SplunkReceiver_SplunkServerName
	//	*SplunkReceiver_SplunkServerIp
	//	*SplunkReceiver_SplunkServerTls
	ServerNameChoice isSplunkReceiver_ServerNameChoice `protobuf_oneof:"server_name_choice"`
	// Splunk HEC token
	//
	// x-displayName: "Splunk HEC token"
	// Secret splunk HEC token
	SplunkHecToken *schema.SecretType `protobuf:"bytes,5,opt,name=splunk_hec_token,json=splunkHecToken,proto3" json:"splunk_hec_token,omitempty"`
}

func (m *SplunkReceiver) Reset()      { *m = SplunkReceiver{} }
func (*SplunkReceiver) ProtoMessage() {}
func (*SplunkReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{8}
}
func (m *SplunkReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplunkReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SplunkReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplunkReceiver.Merge(m, src)
}
func (m *SplunkReceiver) XXX_Size() int {
	return m.Size()
}
func (m *SplunkReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_SplunkReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_SplunkReceiver proto.InternalMessageInfo

type isSplunkReceiver_ServerNameChoice interface {
	isSplunkReceiver_ServerNameChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SplunkReceiver_SplunkServerName struct {
	SplunkServerName *HTTPServerConfigType `protobuf:"bytes,2,opt,name=splunk_server_name,json=splunkServerName,proto3,oneof" json:"splunk_server_name,omitempty"`
}
type SplunkReceiver_SplunkServerIp struct {
	SplunkServerIp *IPServerConfigType `protobuf:"bytes,3,opt,name=splunk_server_ip,json=splunkServerIp,proto3,oneof" json:"splunk_server_ip,omitempty"`
}
type SplunkReceiver_SplunkServerTls struct {
	SplunkServerTls *TLSConfigType `protobuf:"bytes,4,opt,name=splunk_server_tls,json=splunkServerTls,proto3,oneof" json:"splunk_server_tls,omitempty"`
}

func (*SplunkReceiver_SplunkServerName) isSplunkReceiver_ServerNameChoice() {}
func (*SplunkReceiver_SplunkServerIp) isSplunkReceiver_ServerNameChoice()   {}
func (*SplunkReceiver_SplunkServerTls) isSplunkReceiver_ServerNameChoice()  {}

func (m *SplunkReceiver) GetServerNameChoice() isSplunkReceiver_ServerNameChoice {
	if m != nil {
		return m.ServerNameChoice
	}
	return nil
}

func (m *SplunkReceiver) GetSplunkServerName() *HTTPServerConfigType {
	if x, ok := m.GetServerNameChoice().(*SplunkReceiver_SplunkServerName); ok {
		return x.SplunkServerName
	}
	return nil
}

func (m *SplunkReceiver) GetSplunkServerIp() *IPServerConfigType {
	if x, ok := m.GetServerNameChoice().(*SplunkReceiver_SplunkServerIp); ok {
		return x.SplunkServerIp
	}
	return nil
}

func (m *SplunkReceiver) GetSplunkServerTls() *TLSConfigType {
	if x, ok := m.GetServerNameChoice().(*SplunkReceiver_SplunkServerTls); ok {
		return x.SplunkServerTls
	}
	return nil
}

func (m *SplunkReceiver) GetSplunkHecToken() *schema.SecretType {
	if m != nil {
		return m.SplunkHecToken
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SplunkReceiver) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SplunkReceiver_SplunkServerName)(nil),
		(*SplunkReceiver_SplunkServerIp)(nil),
		(*SplunkReceiver_SplunkServerTls)(nil),
	}
}

// WhereSite
//
// x-displayName: "Site"
// This defines a reference to CE sites along with network type
type WhereSites struct {
	// SiteNetwork
	//
	// x-displayName: "Site Network"
	// x-required
	// Select Network through which log receiver is accessible
	Network views.SiteNetwork `protobuf:"varint,1,opt,name=network,proto3,enum=ves.io.schema.views.SiteNetwork" json:"network,omitempty"`
	// Site
	//
	// x-displayName: "Site Reference"
	// x-required
	// Reference to CE sites
	Site []*views.ObjectRefType `protobuf:"bytes,2,rep,name=site,proto3" json:"site,omitempty"`
}

func (m *WhereSites) Reset()      { *m = WhereSites{} }
func (*WhereSites) ProtoMessage() {}
func (*WhereSites) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{9}
}
func (m *WhereSites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereSites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WhereSites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereSites.Merge(m, src)
}
func (m *WhereSites) XXX_Size() int {
	return m.Size()
}
func (m *WhereSites) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereSites.DiscardUnknown(m)
}

var xxx_messageInfo_WhereSites proto.InternalMessageInfo

func (m *WhereSites) GetNetwork() views.SiteNetwork {
	if m != nil {
		return m.Network
	}
	return views.SITE_NETWORK_INSIDE_AND_OUTSIDE
}

func (m *WhereSites) GetSite() []*views.ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

// Specification for Log Receiver
//
// x-displayName: "Specification"
// Shape of the Log Receiver object
type GlobalSpecType struct {
	// Receiver
	//
	// x-displayName: "Log Receiver"
	// x-required
	// Select type of log receiver
	//
	// Types that are valid to be assigned to LogReceiverChoice:
	//	*GlobalSpecType_Syslog
	//	*GlobalSpecType_DataDog
	//	*GlobalSpecType_Splunk
	LogReceiverChoice isGlobalSpecType_LogReceiverChoice `protobuf_oneof:"log_receiver_choice"`
	// Where
	//
	// x-displayName: "Where"
	// x-required
	// Select where the log receiver is accessible
	//
	// Types that are valid to be assigned to WhereChoice:
	//	*GlobalSpecType_SiteLocal
	//	*GlobalSpecType_LogReceiverSites
	WhereChoice isGlobalSpecType_WhereChoice `protobuf_oneof:"where_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{10}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_LogReceiverChoice interface {
	isGlobalSpecType_LogReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WhereChoice interface {
	isGlobalSpecType_WhereChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Syslog struct {
	Syslog *SyslogReceiver `protobuf:"bytes,2,opt,name=syslog,proto3,oneof" json:"syslog,omitempty"`
}
type GlobalSpecType_DataDog struct {
	DataDog *DataDogReceiver `protobuf:"bytes,3,opt,name=data_dog,json=dataDog,proto3,oneof" json:"data_dog,omitempty"`
}
type GlobalSpecType_Splunk struct {
	Splunk *SplunkReceiver `protobuf:"bytes,4,opt,name=splunk,proto3,oneof" json:"splunk,omitempty"`
}
type GlobalSpecType_SiteLocal struct {
	SiteLocal *schema.Empty `protobuf:"bytes,6,opt,name=site_local,json=siteLocal,proto3,oneof" json:"site_local,omitempty"`
}
type GlobalSpecType_LogReceiverSites struct {
	LogReceiverSites *WhereSites `protobuf:"bytes,7,opt,name=log_receiver_sites,json=logReceiverSites,proto3,oneof" json:"log_receiver_sites,omitempty"`
}

func (*GlobalSpecType_Syslog) isGlobalSpecType_LogReceiverChoice()     {}
func (*GlobalSpecType_DataDog) isGlobalSpecType_LogReceiverChoice()    {}
func (*GlobalSpecType_Splunk) isGlobalSpecType_LogReceiverChoice()     {}
func (*GlobalSpecType_SiteLocal) isGlobalSpecType_WhereChoice()        {}
func (*GlobalSpecType_LogReceiverSites) isGlobalSpecType_WhereChoice() {}

func (m *GlobalSpecType) GetLogReceiverChoice() isGlobalSpecType_LogReceiverChoice {
	if m != nil {
		return m.LogReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetWhereChoice() isGlobalSpecType_WhereChoice {
	if m != nil {
		return m.WhereChoice
	}
	return nil
}

func (m *GlobalSpecType) GetSyslog() *SyslogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*GlobalSpecType_Syslog); ok {
		return x.Syslog
	}
	return nil
}

func (m *GlobalSpecType) GetDataDog() *DataDogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*GlobalSpecType_DataDog); ok {
		return x.DataDog
	}
	return nil
}

func (m *GlobalSpecType) GetSplunk() *SplunkReceiver {
	if x, ok := m.GetLogReceiverChoice().(*GlobalSpecType_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (m *GlobalSpecType) GetSiteLocal() *schema.Empty {
	if x, ok := m.GetWhereChoice().(*GlobalSpecType_SiteLocal); ok {
		return x.SiteLocal
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiverSites() *WhereSites {
	if x, ok := m.GetWhereChoice().(*GlobalSpecType_LogReceiverSites); ok {
		return x.LogReceiverSites
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Syslog)(nil),
		(*GlobalSpecType_DataDog)(nil),
		(*GlobalSpecType_Splunk)(nil),
		(*GlobalSpecType_SiteLocal)(nil),
		(*GlobalSpecType_LogReceiverSites)(nil),
	}
}

// Create Log Receiver
//
// x-displayName: "Create Log Receiver"
// Creates a new Log Receiver object
type CreateSpecType struct {
	// Types that are valid to be assigned to LogReceiverChoice:
	//	*CreateSpecType_Syslog
	//	*CreateSpecType_DataDog
	//	*CreateSpecType_Splunk
	LogReceiverChoice isCreateSpecType_LogReceiverChoice `protobuf_oneof:"log_receiver_choice"`
	// Types that are valid to be assigned to WhereChoice:
	//	*CreateSpecType_SiteLocal
	//	*CreateSpecType_LogReceiverSites
	WhereChoice isCreateSpecType_WhereChoice `protobuf_oneof:"where_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{11}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_LogReceiverChoice interface {
	isCreateSpecType_LogReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WhereChoice interface {
	isCreateSpecType_WhereChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Syslog struct {
	Syslog *SyslogReceiver `protobuf:"bytes,2,opt,name=syslog,proto3,oneof" json:"syslog,omitempty"`
}
type CreateSpecType_DataDog struct {
	DataDog *DataDogReceiver `protobuf:"bytes,3,opt,name=data_dog,json=dataDog,proto3,oneof" json:"data_dog,omitempty"`
}
type CreateSpecType_Splunk struct {
	Splunk *SplunkReceiver `protobuf:"bytes,4,opt,name=splunk,proto3,oneof" json:"splunk,omitempty"`
}
type CreateSpecType_SiteLocal struct {
	SiteLocal *schema.Empty `protobuf:"bytes,6,opt,name=site_local,json=siteLocal,proto3,oneof" json:"site_local,omitempty"`
}
type CreateSpecType_LogReceiverSites struct {
	LogReceiverSites *WhereSites `protobuf:"bytes,7,opt,name=log_receiver_sites,json=logReceiverSites,proto3,oneof" json:"log_receiver_sites,omitempty"`
}

func (*CreateSpecType_Syslog) isCreateSpecType_LogReceiverChoice()     {}
func (*CreateSpecType_DataDog) isCreateSpecType_LogReceiverChoice()    {}
func (*CreateSpecType_Splunk) isCreateSpecType_LogReceiverChoice()     {}
func (*CreateSpecType_SiteLocal) isCreateSpecType_WhereChoice()        {}
func (*CreateSpecType_LogReceiverSites) isCreateSpecType_WhereChoice() {}

func (m *CreateSpecType) GetLogReceiverChoice() isCreateSpecType_LogReceiverChoice {
	if m != nil {
		return m.LogReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetWhereChoice() isCreateSpecType_WhereChoice {
	if m != nil {
		return m.WhereChoice
	}
	return nil
}

func (m *CreateSpecType) GetSyslog() *SyslogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*CreateSpecType_Syslog); ok {
		return x.Syslog
	}
	return nil
}

func (m *CreateSpecType) GetDataDog() *DataDogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*CreateSpecType_DataDog); ok {
		return x.DataDog
	}
	return nil
}

func (m *CreateSpecType) GetSplunk() *SplunkReceiver {
	if x, ok := m.GetLogReceiverChoice().(*CreateSpecType_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (m *CreateSpecType) GetSiteLocal() *schema.Empty {
	if x, ok := m.GetWhereChoice().(*CreateSpecType_SiteLocal); ok {
		return x.SiteLocal
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiverSites() *WhereSites {
	if x, ok := m.GetWhereChoice().(*CreateSpecType_LogReceiverSites); ok {
		return x.LogReceiverSites
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Syslog)(nil),
		(*CreateSpecType_DataDog)(nil),
		(*CreateSpecType_Splunk)(nil),
		(*CreateSpecType_SiteLocal)(nil),
		(*CreateSpecType_LogReceiverSites)(nil),
	}
}

// Replace Log Receiver
//
// x-displayName: "Replace Log Receiver"
// Replaces the content of an Log Receiver object
type ReplaceSpecType struct {
	// Types that are valid to be assigned to LogReceiverChoice:
	//	*ReplaceSpecType_Syslog
	//	*ReplaceSpecType_DataDog
	//	*ReplaceSpecType_Splunk
	LogReceiverChoice isReplaceSpecType_LogReceiverChoice `protobuf_oneof:"log_receiver_choice"`
	// Types that are valid to be assigned to WhereChoice:
	//	*ReplaceSpecType_SiteLocal
	//	*ReplaceSpecType_LogReceiverSites
	WhereChoice isReplaceSpecType_WhereChoice `protobuf_oneof:"where_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{12}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_LogReceiverChoice interface {
	isReplaceSpecType_LogReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WhereChoice interface {
	isReplaceSpecType_WhereChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Syslog struct {
	Syslog *SyslogReceiver `protobuf:"bytes,2,opt,name=syslog,proto3,oneof" json:"syslog,omitempty"`
}
type ReplaceSpecType_DataDog struct {
	DataDog *DataDogReceiver `protobuf:"bytes,3,opt,name=data_dog,json=dataDog,proto3,oneof" json:"data_dog,omitempty"`
}
type ReplaceSpecType_Splunk struct {
	Splunk *SplunkReceiver `protobuf:"bytes,4,opt,name=splunk,proto3,oneof" json:"splunk,omitempty"`
}
type ReplaceSpecType_SiteLocal struct {
	SiteLocal *schema.Empty `protobuf:"bytes,6,opt,name=site_local,json=siteLocal,proto3,oneof" json:"site_local,omitempty"`
}
type ReplaceSpecType_LogReceiverSites struct {
	LogReceiverSites *WhereSites `protobuf:"bytes,7,opt,name=log_receiver_sites,json=logReceiverSites,proto3,oneof" json:"log_receiver_sites,omitempty"`
}

func (*ReplaceSpecType_Syslog) isReplaceSpecType_LogReceiverChoice()     {}
func (*ReplaceSpecType_DataDog) isReplaceSpecType_LogReceiverChoice()    {}
func (*ReplaceSpecType_Splunk) isReplaceSpecType_LogReceiverChoice()     {}
func (*ReplaceSpecType_SiteLocal) isReplaceSpecType_WhereChoice()        {}
func (*ReplaceSpecType_LogReceiverSites) isReplaceSpecType_WhereChoice() {}

func (m *ReplaceSpecType) GetLogReceiverChoice() isReplaceSpecType_LogReceiverChoice {
	if m != nil {
		return m.LogReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWhereChoice() isReplaceSpecType_WhereChoice {
	if m != nil {
		return m.WhereChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetSyslog() *SyslogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*ReplaceSpecType_Syslog); ok {
		return x.Syslog
	}
	return nil
}

func (m *ReplaceSpecType) GetDataDog() *DataDogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*ReplaceSpecType_DataDog); ok {
		return x.DataDog
	}
	return nil
}

func (m *ReplaceSpecType) GetSplunk() *SplunkReceiver {
	if x, ok := m.GetLogReceiverChoice().(*ReplaceSpecType_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteLocal() *schema.Empty {
	if x, ok := m.GetWhereChoice().(*ReplaceSpecType_SiteLocal); ok {
		return x.SiteLocal
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiverSites() *WhereSites {
	if x, ok := m.GetWhereChoice().(*ReplaceSpecType_LogReceiverSites); ok {
		return x.LogReceiverSites
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Syslog)(nil),
		(*ReplaceSpecType_DataDog)(nil),
		(*ReplaceSpecType_Splunk)(nil),
		(*ReplaceSpecType_SiteLocal)(nil),
		(*ReplaceSpecType_LogReceiverSites)(nil),
	}
}

// Get Log Receiver
//
// x-displayName: "Get Log Receiver"
// Get the Log Receiver object
type GetSpecType struct {
	// Types that are valid to be assigned to LogReceiverChoice:
	//	*GetSpecType_Syslog
	//	*GetSpecType_DataDog
	//	*GetSpecType_Splunk
	LogReceiverChoice isGetSpecType_LogReceiverChoice `protobuf_oneof:"log_receiver_choice"`
	// Types that are valid to be assigned to WhereChoice:
	//	*GetSpecType_SiteLocal
	//	*GetSpecType_LogReceiverSites
	WhereChoice isGetSpecType_WhereChoice `protobuf_oneof:"where_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba1e9c07d57a8206, []int{13}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_LogReceiverChoice interface {
	isGetSpecType_LogReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WhereChoice interface {
	isGetSpecType_WhereChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Syslog struct {
	Syslog *SyslogReceiver `protobuf:"bytes,2,opt,name=syslog,proto3,oneof" json:"syslog,omitempty"`
}
type GetSpecType_DataDog struct {
	DataDog *DataDogReceiver `protobuf:"bytes,3,opt,name=data_dog,json=dataDog,proto3,oneof" json:"data_dog,omitempty"`
}
type GetSpecType_Splunk struct {
	Splunk *SplunkReceiver `protobuf:"bytes,4,opt,name=splunk,proto3,oneof" json:"splunk,omitempty"`
}
type GetSpecType_SiteLocal struct {
	SiteLocal *schema.Empty `protobuf:"bytes,6,opt,name=site_local,json=siteLocal,proto3,oneof" json:"site_local,omitempty"`
}
type GetSpecType_LogReceiverSites struct {
	LogReceiverSites *WhereSites `protobuf:"bytes,7,opt,name=log_receiver_sites,json=logReceiverSites,proto3,oneof" json:"log_receiver_sites,omitempty"`
}

func (*GetSpecType_Syslog) isGetSpecType_LogReceiverChoice()     {}
func (*GetSpecType_DataDog) isGetSpecType_LogReceiverChoice()    {}
func (*GetSpecType_Splunk) isGetSpecType_LogReceiverChoice()     {}
func (*GetSpecType_SiteLocal) isGetSpecType_WhereChoice()        {}
func (*GetSpecType_LogReceiverSites) isGetSpecType_WhereChoice() {}

func (m *GetSpecType) GetLogReceiverChoice() isGetSpecType_LogReceiverChoice {
	if m != nil {
		return m.LogReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetWhereChoice() isGetSpecType_WhereChoice {
	if m != nil {
		return m.WhereChoice
	}
	return nil
}

func (m *GetSpecType) GetSyslog() *SyslogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*GetSpecType_Syslog); ok {
		return x.Syslog
	}
	return nil
}

func (m *GetSpecType) GetDataDog() *DataDogReceiver {
	if x, ok := m.GetLogReceiverChoice().(*GetSpecType_DataDog); ok {
		return x.DataDog
	}
	return nil
}

func (m *GetSpecType) GetSplunk() *SplunkReceiver {
	if x, ok := m.GetLogReceiverChoice().(*GetSpecType_Splunk); ok {
		return x.Splunk
	}
	return nil
}

func (m *GetSpecType) GetSiteLocal() *schema.Empty {
	if x, ok := m.GetWhereChoice().(*GetSpecType_SiteLocal); ok {
		return x.SiteLocal
	}
	return nil
}

func (m *GetSpecType) GetLogReceiverSites() *WhereSites {
	if x, ok := m.GetWhereChoice().(*GetSpecType_LogReceiverSites); ok {
		return x.LogReceiverSites
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Syslog)(nil),
		(*GetSpecType_DataDog)(nil),
		(*GetSpecType_Splunk)(nil),
		(*GetSpecType_SiteLocal)(nil),
		(*GetSpecType_LogReceiverSites)(nil),
	}
}

func init() {
	proto.RegisterType((*IPServerConfigType)(nil), "ves.io.schema.log_receiver.IPServerConfigType")
	proto.RegisterType((*HTTPServerConfigType)(nil), "ves.io.schema.log_receiver.HTTPServerConfigType")
	proto.RegisterType((*TCPServerConfigType)(nil), "ves.io.schema.log_receiver.TCPServerConfigType")
	proto.RegisterType((*UDPServerConfigType)(nil), "ves.io.schema.log_receiver.UDPServerConfigType")
	proto.RegisterType((*TLSClientConfigType)(nil), "ves.io.schema.log_receiver.TLSClientConfigType")
	proto.RegisterType((*TLSConfigType)(nil), "ves.io.schema.log_receiver.TLSConfigType")
	proto.RegisterType((*SyslogReceiver)(nil), "ves.io.schema.log_receiver.SyslogReceiver")
	proto.RegisterType((*DataDogReceiver)(nil), "ves.io.schema.log_receiver.DataDogReceiver")
	proto.RegisterType((*SplunkReceiver)(nil), "ves.io.schema.log_receiver.SplunkReceiver")
	proto.RegisterType((*WhereSites)(nil), "ves.io.schema.log_receiver.WhereSites")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.log_receiver.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.log_receiver.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.log_receiver.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.log_receiver.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/log_receiver/types.proto", fileDescriptor_ba1e9c07d57a8206)
}

var fileDescriptor_ba1e9c07d57a8206 = []byte{
	// 1816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x41, 0x6c, 0xe3, 0xc6,
	0x15, 0xd5, 0x88, 0x94, 0x4c, 0x8d, 0x24, 0x5b, 0xa6, 0x9d, 0xac, 0xd6, 0x4d, 0x55, 0x41, 0x4d,
	0x13, 0x65, 0xa3, 0x95, 0x2c, 0x59, 0xf6, 0x7a, 0xb7, 0x40, 0xdb, 0xa5, 0x9d, 0xae, 0xac, 0x6e,
	0x36, 0x06, 0xad, 0x6d, 0x8b, 0x00, 0x2d, 0x4b, 0x93, 0x63, 0x99, 0x35, 0x25, 0x12, 0xe4, 0xc8,
	0x5b, 0x15, 0x08, 0x20, 0xe4, 0xd8, 0x53, 0xd0, 0x53, 0x81, 0xde, 0x7a, 0x49, 0x91, 0x5b, 0xaf,
	0x65, 0x0e, 0x46, 0x4e, 0x41, 0x4e, 0x3e, 0x2e, 0xf6, 0xd4, 0xd5, 0x16, 0x8d, 0x7b, 0xcb, 0xad,
	0x41, 0x2e, 0x29, 0x86, 0x33, 0x92, 0x49, 0x5b, 0x96, 0xbd, 0x4d, 0x7a, 0x09, 0x72, 0x93, 0xf8,
	0xff, 0x7f, 0xff, 0xcf, 0xfc, 0xf7, 0xdf, 0x0c, 0x09, 0x5f, 0x39, 0x44, 0x6e, 0xd9, 0xb0, 0x2a,
	0xae, 0xb6, 0x8f, 0x3a, 0x6a, 0xc5, 0xb4, 0xda, 0x8a, 0x83, 0x34, 0x64, 0x1c, 0x22, 0xa7, 0x82,
	0xfb, 0x36, 0x72, 0xcb, 0xb6, 0x63, 0x61, 0x4b, 0x5c, 0xa2, 0x7e, 0x65, 0xea, 0x57, 0x0e, 0xfa,
	0x2d, 0xdd, 0x6c, 0x1b, 0x78, 0xbf, 0xb7, 0x5b, 0xd6, 0xac, 0x4e, 0xa5, 0x6d, 0xb5, 0xad, 0x8a,
	0x1f, 0xb2, 0xdb, 0xdb, 0xf3, 0xff, 0xf9, 0x7f, 0xfc, 0x5f, 0x14, 0x6a, 0xe9, 0x3b, 0xe1, 0x94,
	0x96, 0x8d, 0x0d, 0xab, 0xcb, 0xf2, 0x2c, 0x5d, 0x0f, 0x1b, 0x03, 0x25, 0x2c, 0xbd, 0x14, 0x36,
	0x1d, 0xaa, 0xa6, 0xa1, 0xab, 0x18, 0x31, 0x6b, 0xfe, 0x8c, 0xd5, 0x40, 0x8f, 0x94, 0x30, 0xf4,
	0xf7, 0xce, 0x7b, 0xb8, 0xc1, 0x04, 0x85, 0x36, 0x14, 0xb7, 0xb6, 0x77, 0x90, 0x73, 0x88, 0x9c,
	0x0d, 0xab, 0xbb, 0x67, 0xb4, 0x5b, 0x7d, 0x1b, 0x89, 0x45, 0x08, 0x0d, 0x5b, 0x51, 0x75, 0xdd,
	0x41, 0xae, 0x9b, 0x05, 0x79, 0x50, 0x4c, 0x48, 0x89, 0xbf, 0xff, 0xfb, 0x88, 0xe3, 0x9d, 0xa8,
	0x0d, 0xe4, 0x84, 0x61, 0xdf, 0xa5, 0x36, 0xf1, 0x55, 0xc8, 0xdb, 0x96, 0x83, 0xb3, 0xd1, 0x3c,
	0x28, 0xa6, 0xa5, 0x85, 0x27, 0x1e, 0x88, 0xae, 0x2f, 0x13, 0x4f, 0xe1, 0x46, 0x3c, 0xfb, 0xe5,
	0x97, 0x5c, 0x11, 0xc8, 0xbe, 0x43, 0xa1, 0x0f, 0x17, 0x1b, 0xad, 0xd6, 0xf9, 0x54, 0xeb, 0x30,
	0xe9, 0xfa, 0xcf, 0x94, 0xae, 0xda, 0x41, 0x2c, 0xd7, 0xb5, 0xcf, 0x3d, 0x10, 0x21, 0x28, 0x31,
	0x87, 0xcb, 0x0e, 0xa2, 0x2c, 0xf3, 0x3e, 0x90, 0x21, 0xf5, 0x7d, 0xa0, 0x76, 0xd0, 0xd5, 0x53,
	0xff, 0x1e, 0x2e, 0xb4, 0x36, 0xce, 0x67, 0xbe, 0x3d, 0x29, 0x73, 0xf6, 0x7c, 0xe6, 0x98, 0xc3,
	0x3d, 0x8e, 0x86, 0x53, 0x17, 0x43, 0xa9, 0x17, 0x9f, 0x78, 0x80, 0x5b, 0x5b, 0xae, 0x5e, 0x90,
	0xfb, 0xe1, 0xe6, 0xff, 0x3b, 0xf7, 0x6a, 0xb5, 0x3e, 0x29, 0xf7, 0x9f, 0x01, 0x5c, 0x68, 0xdd,
	0xdf, 0xd9, 0x30, 0x0d, 0xd4, 0xc5, 0x81, 0xe4, 0x4d, 0x98, 0xd4, 0x90, 0x83, 0x8d, 0x3d, 0x43,
	0x53, 0xf1, 0x28, 0x79, 0xf1, 0x73, 0x0f, 0xf0, 0x7f, 0xf9, 0x10, 0x24, 0x6d, 0xd4, 0x29, 0xe5,
	0x77, 0x55, 0x17, 0xad, 0xf9, 0xa0, 0x71, 0x87, 0x2f, 0x0e, 0x06, 0x02, 0x2b, 0xe6, 0x3d, 0x00,
	0xe4, 0x60, 0xb0, 0xb8, 0x0e, 0x67, 0x0e, 0x50, 0x5f, 0xe9, 0x39, 0xa6, 0x5f, 0x50, 0xb2, 0x76,
	0xbd, 0x1c, 0x9e, 0x9a, 0x1d, 0xa4, 0x39, 0x08, 0x93, 0xbc, 0x12, 0x7f, 0xec, 0x01, 0x20, 0xc7,
	0x0f, 0x50, 0xff, 0xa1, 0x63, 0x16, 0xfe, 0x19, 0x83, 0x69, 0x52, 0xdd, 0xd7, 0x41, 0x85, 0x37,
	0xe1, 0x35, 0x1d, 0xed, 0xa9, 0x3d, 0x13, 0x2b, 0x6e, 0xdf, 0x25, 0x83, 0x8a, 0x4d, 0x57, 0xf1,
	0xb7, 0x89, 0xf3, 0xab, 0x5a, 0x3c, 0x53, 0xd5, 0x1b, 0x1d, 0x1b, 0xf7, 0x1b, 0x11, 0x79, 0x91,
	0x85, 0xed, 0xf8, 0x51, 0x2d, 0xd3, 0xdd, 0xb6, 0x1c, 0x2c, 0x6e, 0x42, 0x71, 0x04, 0xb7, 0x8f,
	0xb1, 0xcd, 0x90, 0xf8, 0xa9, 0x48, 0x19, 0x16, 0xd1, 0x20, 0x01, 0x3e, 0xca, 0x0d, 0xd6, 0xa8,
	0xd8, 0x69, 0xa3, 0xea, 0xf5, 0x95, 0x50, 0xa3, 0x1a, 0x11, 0xda, 0x2a, 0xf1, 0x16, 0x4c, 0x1e,
	0x5a, 0x26, 0x46, 0x8e, 0xa3, 0x2a, 0x9a, 0x9a, 0x9d, 0x99, 0x92, 0x0a, 0xc8, 0x70, 0xe4, 0xba,
	0xa1, 0x8a, 0xdb, 0x70, 0x16, 0x3b, 0x3d, 0x17, 0x23, 0x5d, 0xd1, 0x54, 0xbf, 0x0d, 0xc2, 0xf3,
	0xb5, 0xb3, 0x01, 0xe4, 0x14, 0x43, 0xd8, 0x50, 0x1f, 0x3a, 0xa6, 0x78, 0x17, 0xa6, 0x3b, 0x64,
	0xf7, 0x74, 0xc3, 0x55, 0x77, 0x4d, 0xa4, 0x67, 0xe1, 0xc5, 0xc5, 0x48, 0xfc, 0x91, 0x07, 0x40,
	0x23, 0x2a, 0xa7, 0x48, 0xc8, 0x26, 0x8b, 0x10, 0x7f, 0x09, 0x93, 0x3e, 0x04, 0xea, 0x92, 0xff,
	0xd9, 0xa4, 0x0f, 0x50, 0x29, 0x5f, 0x2c, 0xa7, 0xe5, 0x09, 0x34, 0x1d, 0x63, 0x43, 0x82, 0xf5,
	0x86, 0x0f, 0x75, 0x67, 0xfd, 0x23, 0x0f, 0xd4, 0xe1, 0x12, 0x9c, 0xa7, 0x13, 0x95, 0xdf, 0x56,
	0x1d, 0xb5, 0x83, 0x30, 0x72, 0x5c, 0x31, 0x56, 0x2d, 0xd5, 0x4a, 0x6b, 0xf0, 0x45, 0x38, 0x4f,
	0x91, 0x82, 0x36, 0x70, 0x5b, 0xca, 0xc3, 0x24, 0xd9, 0x69, 0x45, 0xdb, 0xb7, 0x0c, 0x0d, 0x89,
	0xf3, 0x47, 0x1e, 0xe0, 0x8e, 0x3d, 0x10, 0x1d, 0x7a, 0x20, 0xb6, 0x52, 0xaa, 0x97, 0x56, 0xa5,
	0x97, 0x60, 0x42, 0x53, 0x47, 0xf6, 0xb9, 0x23, 0x0f, 0xcc, 0x1c, 0x7b, 0x20, 0x3e, 0xf4, 0x00,
	0x77, 0xab, 0xb4, 0x2e, 0xbd, 0xcc, 0xd6, 0xc4, 0xec, 0x2f, 0x1c, 0x79, 0x00, 0x7e, 0xec, 0x01,
	0x70, 0xec, 0x81, 0x04, 0xc1, 0xa8, 0x2e, 0x97, 0xaa, 0xd5, 0x26, 0x2f, 0x44, 0x33, 0x5c, 0x93,
	0x17, 0xe2, 0x99, 0x99, 0x26, 0x2f, 0x24, 0x32, 0xb0, 0xf0, 0x1f, 0x0e, 0xce, 0x52, 0x76, 0xc9,
	0x6c, 0xb1, 0xe2, 0x36, 0x84, 0x3d, 0xdd, 0x56, 0x28, 0x7f, 0xd9, 0xd8, 0x4c, 0xdd, 0x9d, 0x09,
	0x0a, 0xd2, 0x88, 0xc8, 0x89, 0x9e, 0x6e, 0xd3, 0xc7, 0x04, 0x11, 0x6b, 0x63, 0x44, 0xee, 0x0a,
	0xfb, 0xbd, 0x31, 0x11, 0x11, 0x6b, 0x23, 0xc4, 0x16, 0x84, 0x64, 0xb5, 0x0c, 0x91, 0x52, 0xff,
	0xb5, 0xcb, 0x3a, 0x78, 0xda, 0x3b, 0xe1, 0x88, 0x6e, 0x0d, 0xf0, 0x51, 0x4d, 0x97, 0xa1, 0x6e,
	0xc1, 0x59, 0x36, 0x9f, 0xce, 0x9e, 0xb6, 0x5a, 0xaf, 0xd5, 0xb3, 0x71, 0x7f, 0x38, 0xf2, 0xc4,
	0xfd, 0x89, 0x07, 0x84, 0xea, 0x72, 0x7d, 0x7d, 0xf5, 0xd6, 0x9a, 0x2f, 0xe3, 0xc9, 0x1b, 0x89,
	0xec, 0x60, 0x30, 0x18, 0x80, 0xe2, 0x9f, 0xb8, 0x06, 0x90, 0xd3, 0x34, 0x52, 0xa6, 0x81, 0xe2,
	0x4f, 0x83, 0x50, 0x2b, 0xd5, 0xb5, 0xba, 0x4f, 0xfc, 0xb4, 0xf4, 0x5d, 0x06, 0xc5, 0x57, 0x97,
	0x6b, 0xf5, 0x13, 0x0f, 0x80, 0xd1, 0xc0, 0x0d, 0x84, 0xb3, 0x38, 0x24, 0x8a, 0xf0, 0xa2, 0x63,
	0xe9, 0x28, 0xc8, 0x8b, 0x28, 0x29, 0x9c, 0xf4, 0xb4, 0x56, 0x5a, 0x29, 0xd5, 0xa5, 0x97, 0x61,
	0x7a, 0xcf, 0x72, 0x3a, 0xea, 0x98, 0x3b, 0x0b, 0x47, 0x1e, 0x88, 0xb3, 0xde, 0xc7, 0x08, 0x3f,
	0xd6, 0x4a, 0xeb, 0x4d, 0x5e, 0x00, 0x99, 0x68, 0x93, 0x17, 0x62, 0x99, 0x78, 0x93, 0x17, 0x66,
	0x32, 0x42, 0xe1, 0xfd, 0x38, 0x9c, 0xdb, 0x54, 0xb1, 0xba, 0x19, 0x68, 0xfd, 0x7d, 0xf8, 0xa2,
	0xae, 0x62, 0x55, 0xb7, 0xda, 0xca, 0x58, 0xb0, 0x82, 0x34, 0xb8, 0x58, 0xa7, 0x68, 0xd4, 0x26,
	0x93, 0x2b, 0xba, 0x9d, 0x77, 0xc2, 0x82, 0xc9, 0x4d, 0x15, 0xcc, 0x46, 0x24, 0x24, 0x99, 0x3f,
	0x86, 0xa9, 0x51, 0x05, 0x63, 0x95, 0x9a, 0x3e, 0xe5, 0x40, 0x4e, 0xb2, 0x08, 0x5f, 0xde, 0x46,
	0xc7, 0x2f, 0xed, 0x20, 0xd9, 0x37, 0x10, 0xd6, 0x36, 0x30, 0x59, 0xdb, 0x84, 0x29, 0x0b, 0x8d,
	0x5e, 0xa2, 0x6d, 0x89, 0xe7, 0xd4, 0xb6, 0xe8, 0x19, 0x6d, 0xbb, 0x07, 0xe7, 0x46, 0xdb, 0xaf,
	0xda, 0x86, 0x72, 0x80, 0xfa, 0x4c, 0xdd, 0x2e, 0x3d, 0xb5, 0xd2, 0x2c, 0xee, 0xae, 0x6d, 0xfc,
	0x0c, 0xf5, 0xc5, 0x37, 0xe1, 0x82, 0x66, 0x75, 0x6c, 0x72, 0x05, 0x32, 0xac, 0x2e, 0x13, 0x3a,
	0x3d, 0x9b, 0xba, 0x74, 0x13, 0x39, 0x59, 0x0c, 0x04, 0x52, 0x55, 0xd3, 0xc5, 0xb7, 0xe0, 0x62,
	0x10, 0x6e, 0x2c, 0xbd, 0xe9, 0x2b, 0xe0, 0x05, 0x0b, 0x19, 0x29, 0xb0, 0xf4, 0x03, 0x28, 0x06,
	0x98, 0x11, 0x14, 0xb5, 0x11, 0xb9, 0xb9, 0x5a, 0x69, 0x45, 0x2a, 0x84, 0x45, 0x91, 0x10, 0x3b,
	0xc6, 0x88, 0xcd, 0x13, 0x9f, 0xd5, 0xd2, 0xda, 0x79, 0x59, 0x14, 0x8e, 0x3d, 0x30, 0x43, 0xac,
	0xeb, 0xa5, 0xdb, 0xd2, 0xeb, 0x30, 0xb8, 0x9e, 0xa0, 0x3a, 0xa6, 0x18, 0x50, 0xd2, 0x57, 0xc7,
	0x5a, 0xa9, 0xba, 0x32, 0x9e, 0x11, 0x3e, 0x13, 0xa3, 0x33, 0xd2, 0xe4, 0x85, 0x64, 0x26, 0x55,
	0x78, 0x9f, 0x68, 0xa4, 0x6d, 0xf6, 0xba, 0x07, 0xe3, 0x41, 0xf9, 0x0d, 0x14, 0x5d, 0xff, 0x89,
	0x12, 0x64, 0x38, 0x1d, 0x92, 0xe5, 0x69, 0x3a, 0x34, 0xe9, 0x92, 0x49, 0x8e, 0x67, 0x8a, 0xb6,
	0x73, 0x3a, 0x00, 0x6f, 0xc3, 0x4c, 0x38, 0x83, 0x61, 0x33, 0xe5, 0x2c, 0x4f, 0xc3, 0xdf, 0x9a,
	0x84, 0x3e, 0x1b, 0x44, 0xdf, 0xb2, 0xc5, 0x5f, 0xc1, 0xf9, 0x30, 0x36, 0x36, 0xdd, 0xe7, 0x17,
	0x51, 0xda, 0xe1, 0x88, 0x3c, 0x17, 0x44, 0x6f, 0x99, 0xae, 0xb8, 0x35, 0x2e, 0x7d, 0x1f, 0x69,
	0x0a, 0xb6, 0x0e, 0x50, 0x97, 0xcd, 0xef, 0xa5, 0x3c, 0x66, 0x95, 0x36, 0x90, 0xd6, 0x22, 0x61,
	0xd2, 0xab, 0x13, 0x89, 0x72, 0x5e, 0x05, 0x69, 0xef, 0x0a, 0x7f, 0x03, 0x10, 0xfe, 0x62, 0x1f,
	0x39, 0x68, 0xc7, 0xc0, 0xc8, 0x15, 0x7f, 0x02, 0x67, 0xba, 0x08, 0x3f, 0xb2, 0x9c, 0x03, 0xff,
	0xb6, 0x36, 0x5b, 0xcb, 0x9f, 0xc9, 0xef, 0xbf, 0x70, 0x94, 0x89, 0xf3, 0x03, 0xea, 0x27, 0xf1,
	0x44, 0x9e, 0xe4, 0x51, 0x98, 0xa8, 0x42, 0xde, 0x35, 0x30, 0xe9, 0x2c, 0x57, 0x4c, 0xd6, 0x0a,
	0x13, 0xc3, 0xdf, 0xda, 0xfd, 0x2d, 0xd2, 0xb0, 0x8c, 0xf6, 0xfc, 0x75, 0xbc, 0xf6, 0xc1, 0x3b,
	0x7e, 0xc8, 0x27, 0x1e, 0x88, 0x6a, 0x88, 0xa0, 0x0d, 0x3e, 0xa4, 0xd2, 0x13, 0xfb, 0x23, 0x88,
	0x66, 0xa2, 0xa3, 0x5f, 0x02, 0x90, 0x7d, 0xbf, 0xc2, 0xa7, 0x3c, 0x9c, 0xbd, 0x67, 0x5a, 0xbb,
	0xaa, 0xb9, 0x63, 0x23, 0xcd, 0xbf, 0x69, 0x6e, 0xc2, 0x38, 0x3d, 0x05, 0x18, 0xa3, 0x6e, 0x4c,
	0x6b, 0x4a, 0xf8, 0xf4, 0x6e, 0x44, 0x64, 0x16, 0x2b, 0x3e, 0x80, 0x02, 0x51, 0x05, 0x45, 0xb7,
	0xda, 0x8c, 0x39, 0xaf, 0x4f, 0xc3, 0x39, 0x73, 0x16, 0x48, 0xfc, 0x09, 0x6d, 0xef, 0x8c, 0x4e,
	0x0d, 0x62, 0x13, 0xc6, 0x69, 0x77, 0x18, 0x55, 0xa6, 0x57, 0x15, 0x9a, 0x97, 0x31, 0x18, 0x43,
	0x10, 0x7f, 0x08, 0x21, 0x59, 0xbc, 0x62, 0x5a, 0x9a, 0x6a, 0xfa, 0x1a, 0x7d, 0x99, 0xb8, 0x27,
	0x88, 0xff, 0x7d, 0xe2, 0x4e, 0x86, 0x2f, 0x98, 0x4b, 0x21, 0x16, 0x97, 0x5d, 0x4a, 0x5f, 0x99,
	0x56, 0xd4, 0x29, 0x35, 0xe8, 0x0d, 0xe0, 0x84, 0x42, 0x67, 0x02, 0xfb, 0x47, 0x89, 0xf3, 0x6b,
	0x98, 0xf6, 0xdf, 0x56, 0x8d, 0x2e, 0x46, 0x4e, 0x57, 0x35, 0xb3, 0x27, 0x14, 0xfd, 0x2a, 0x04,
	0x58, 0xfc, 0xe0, 0x9d, 0x70, 0x30, 0xc9, 0x22, 0xa7, 0xc8, 0xa3, 0x2d, 0xf6, 0xe4, 0xce, 0xf5,
	0x8f, 0x3c, 0xf0, 0x02, 0x5c, 0x80, 0xa9, 0xfb, 0x56, 0x3b, 0x3f, 0x16, 0x15, 0xae, 0x5a, 0x5a,
	0x95, 0x8a, 0x70, 0x21, 0xb4, 0xb8, 0x8b, 0x0f, 0xfe, 0xef, 0xc3, 0xd4, 0x23, 0xb2, 0xa0, 0x29,
	0xe7, 0xfe, 0xad, 0xe0, 0xb9, 0x5f, 0xf8, 0x17, 0x07, 0x67, 0x37, 0x1c, 0xa4, 0x62, 0xf4, 0x35,
	0x33, 0xad, 0xf1, 0x95, 0x98, 0x16, 0xe4, 0xd8, 0xe6, 0xff, 0xce, 0xb1, 0x00, 0xbb, 0x56, 0xaf,
	0xca, 0xae, 0x30, 0xaf, 0x7e, 0xfe, 0xd5, 0x79, 0x35, 0x89, 0x4d, 0x77, 0xe6, 0x3f, 0xf9, 0xd1,
	0x99, 0x09, 0x97, 0xca, 0x93, 0xbb, 0x7c, 0xed, 0xdd, 0x2f, 0xc0, 0x24, 0x83, 0x94, 0x3f, 0xd3,
	0xeb, 0xcc, 0xbb, 0x5f, 0x80, 0xd0, 0x93, 0x50, 0xa3, 0x3f, 0xe5, 0xe0, 0x9c, 0x8c, 0x6c, 0x53,
	0xd5, 0xbe, 0xed, 0xf4, 0x37, 0xbb, 0xd3, 0xcf, 0x38, 0x98, 0xbc, 0x87, 0xf0, 0xb7, 0x5d, 0xfe,
	0x26, 0x77, 0x59, 0xfa, 0x03, 0x38, 0x7e, 0x9a, 0x8b, 0x3c, 0x7e, 0x9a, 0x8b, 0x7c, 0xf6, 0x34,
	0x07, 0x06, 0xc3, 0x1c, 0xf8, 0xeb, 0x30, 0x07, 0x3e, 0x1e, 0xe6, 0xc0, 0xf1, 0x30, 0x07, 0x1e,
	0x0f, 0x73, 0xe0, 0x1f, 0xc3, 0x1c, 0x38, 0x19, 0xe6, 0x22, 0x9f, 0x0d, 0x73, 0xe0, 0xbd, 0x67,
	0xb9, 0xc8, 0xf1, 0xb3, 0x5c, 0xe4, 0xf1, 0xb3, 0x5c, 0xe4, 0xed, 0xed, 0xb6, 0x65, 0x1f, 0xb4,
	0xcb, 0xa3, 0xd7, 0x96, 0x72, 0xcf, 0xad, 0xf8, 0x3f, 0xc8, 0x2b, 0xe3, 0x4d, 0xdb, 0xb1, 0x0e,
	0x0d, 0x1d, 0x39, 0x37, 0x47, 0xe6, 0x8a, 0xbd, 0xdb, 0xb6, 0x2a, 0xe8, 0x77, 0x98, 0x7d, 0x90,
	0x9d, 0xf0, 0x09, 0x7a, 0x37, 0xee, 0x7f, 0x99, 0x5d, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x23, 0x8d, 0x0b, 0x04, 0xa7, 0x16, 0x00, 0x00,
}

func (this *IPServerConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPServerConfigType)
	if !ok {
		that2, ok := that.(IPServerConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *HTTPServerConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPServerConfigType)
	if !ok {
		that2, ok := that.(HTTPServerConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *TCPServerConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPServerConfigType)
	if !ok {
		that2, ok := that.(TCPServerConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *UDPServerConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPServerConfigType)
	if !ok {
		that2, ok := that.(UDPServerConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *TLSClientConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSClientConfigType)
	if !ok {
		that2, ok := that.(TLSClientConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Certificate != that1.Certificate {
		return false
	}
	if !this.KeyUrl.Equal(that1.KeyUrl) {
		return false
	}
	return true
}
func (this *TLSConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType)
	if !ok {
		that2, ok := that.(TLSConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.CaChoice == nil {
		if this.CaChoice != nil {
			return false
		}
	} else if this.CaChoice == nil {
		return false
	} else if !this.CaChoice.Equal(that1.CaChoice) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *TLSConfigType_DefaultSyslogTlsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_DefaultSyslogTlsPort)
	if !ok {
		that2, ok := that.(TLSConfigType_DefaultSyslogTlsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSyslogTlsPort.Equal(that1.DefaultSyslogTlsPort) {
		return false
	}
	return true
}
func (this *TLSConfigType_DefaultHttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_DefaultHttpsPort)
	if !ok {
		that2, ok := that.(TLSConfigType_DefaultHttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHttpsPort.Equal(that1.DefaultHttpsPort) {
		return false
	}
	return true
}
func (this *TLSConfigType_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_Port)
	if !ok {
		that2, ok := that.(TLSConfigType_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *TLSConfigType_VolterraCa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_VolterraCa)
	if !ok {
		that2, ok := that.(TLSConfigType_VolterraCa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VolterraCa.Equal(that1.VolterraCa) {
		return false
	}
	return true
}
func (this *TLSConfigType_TrustedCaUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_TrustedCaUrl)
	if !ok {
		that2, ok := that.(TLSConfigType_TrustedCaUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	return true
}
func (this *TLSConfigType_MtlsDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_MtlsDisabled)
	if !ok {
		that2, ok := that.(TLSConfigType_MtlsDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MtlsDisabled.Equal(that1.MtlsDisabled) {
		return false
	}
	return true
}
func (this *TLSConfigType_MtlsEnable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfigType_MtlsEnable)
	if !ok {
		that2, ok := that.(TLSConfigType_MtlsEnable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MtlsEnable.Equal(that1.MtlsEnable) {
		return false
	}
	return true
}
func (this *SyslogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogReceiver)
	if !ok {
		that2, ok := that.(SyslogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ModeChoice == nil {
		if this.ModeChoice != nil {
			return false
		}
	} else if this.ModeChoice == nil {
		return false
	} else if !this.ModeChoice.Equal(that1.ModeChoice) {
		return false
	}
	if that1.FormatChoice == nil {
		if this.FormatChoice != nil {
			return false
		}
	} else if this.FormatChoice == nil {
		return false
	} else if !this.FormatChoice.Equal(that1.FormatChoice) {
		return false
	}
	return true
}
func (this *SyslogReceiver_UdpServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogReceiver_UdpServer)
	if !ok {
		that2, ok := that.(SyslogReceiver_UdpServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UdpServer.Equal(that1.UdpServer) {
		return false
	}
	return true
}
func (this *SyslogReceiver_TcpServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogReceiver_TcpServer)
	if !ok {
		that2, ok := that.(SyslogReceiver_TcpServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpServer.Equal(that1.TcpServer) {
		return false
	}
	return true
}
func (this *SyslogReceiver_TlsServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogReceiver_TlsServer)
	if !ok {
		that2, ok := that.(SyslogReceiver_TlsServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsServer.Equal(that1.TlsServer) {
		return false
	}
	return true
}
func (this *SyslogReceiver_SyslogRfc5424) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogReceiver_SyslogRfc5424)
	if !ok {
		that2, ok := that.(SyslogReceiver_SyslogRfc5424)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SyslogRfc5424 != that1.SyslogRfc5424 {
		return false
	}
	return true
}
func (this *SyslogReceiver_SyslogRfc3164) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogReceiver_SyslogRfc3164)
	if !ok {
		that2, ok := that.(SyslogReceiver_SyslogRfc3164)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SyslogRfc3164 != that1.SyslogRfc3164 {
		return false
	}
	return true
}
func (this *DataDogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver)
	if !ok {
		that2, ok := that.(DataDogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServerNameChoice == nil {
		if this.ServerNameChoice != nil {
			return false
		}
	} else if this.ServerNameChoice == nil {
		return false
	} else if !this.ServerNameChoice.Equal(that1.ServerNameChoice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.CaChoice == nil {
		if this.CaChoice != nil {
			return false
		}
	} else if this.CaChoice == nil {
		return false
	} else if !this.CaChoice.Equal(that1.CaChoice) {
		return false
	}
	if !this.DatadogApiKey.Equal(that1.DatadogApiKey) {
		return false
	}
	if that1.CompressionChoice == nil {
		if this.CompressionChoice != nil {
			return false
		}
	} else if this.CompressionChoice == nil {
		return false
	} else if !this.CompressionChoice.Equal(that1.CompressionChoice) {
		return false
	}
	return true
}
func (this *DataDogReceiver_DatadogDefaultServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_DatadogDefaultServer)
	if !ok {
		that2, ok := that.(DataDogReceiver_DatadogDefaultServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DatadogDefaultServer.Equal(that1.DatadogDefaultServer) {
		return false
	}
	return true
}
func (this *DataDogReceiver_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_ServerName)
	if !ok {
		that2, ok := that.(DataDogReceiver_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *DataDogReceiver_DefaultPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_DefaultPort)
	if !ok {
		that2, ok := that.(DataDogReceiver_DefaultPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPort.Equal(that1.DefaultPort) {
		return false
	}
	return true
}
func (this *DataDogReceiver_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_Port)
	if !ok {
		that2, ok := that.(DataDogReceiver_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *DataDogReceiver_VolterraCa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_VolterraCa)
	if !ok {
		that2, ok := that.(DataDogReceiver_VolterraCa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VolterraCa.Equal(that1.VolterraCa) {
		return false
	}
	return true
}
func (this *DataDogReceiver_TrustedCaUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_TrustedCaUrl)
	if !ok {
		that2, ok := that.(DataDogReceiver_TrustedCaUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	return true
}
func (this *DataDogReceiver_CompressionEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_CompressionEnabled)
	if !ok {
		that2, ok := that.(DataDogReceiver_CompressionEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompressionEnabled.Equal(that1.CompressionEnabled) {
		return false
	}
	return true
}
func (this *DataDogReceiver_CompressionDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataDogReceiver_CompressionDisabled)
	if !ok {
		that2, ok := that.(DataDogReceiver_CompressionDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompressionDisabled.Equal(that1.CompressionDisabled) {
		return false
	}
	return true
}
func (this *SplunkReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SplunkReceiver)
	if !ok {
		that2, ok := that.(SplunkReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServerNameChoice == nil {
		if this.ServerNameChoice != nil {
			return false
		}
	} else if this.ServerNameChoice == nil {
		return false
	} else if !this.ServerNameChoice.Equal(that1.ServerNameChoice) {
		return false
	}
	if !this.SplunkHecToken.Equal(that1.SplunkHecToken) {
		return false
	}
	return true
}
func (this *SplunkReceiver_SplunkServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SplunkReceiver_SplunkServerName)
	if !ok {
		that2, ok := that.(SplunkReceiver_SplunkServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SplunkServerName.Equal(that1.SplunkServerName) {
		return false
	}
	return true
}
func (this *SplunkReceiver_SplunkServerIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SplunkReceiver_SplunkServerIp)
	if !ok {
		that2, ok := that.(SplunkReceiver_SplunkServerIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SplunkServerIp.Equal(that1.SplunkServerIp) {
		return false
	}
	return true
}
func (this *SplunkReceiver_SplunkServerTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SplunkReceiver_SplunkServerTls)
	if !ok {
		that2, ok := that.(SplunkReceiver_SplunkServerTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SplunkServerTls.Equal(that1.SplunkServerTls) {
		return false
	}
	return true
}
func (this *WhereSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhereSites)
	if !ok {
		that2, ok := that.(WhereSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if len(this.Site) != len(that1.Site) {
		return false
	}
	for i := range this.Site {
		if !this.Site[i].Equal(that1.Site[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LogReceiverChoice == nil {
		if this.LogReceiverChoice != nil {
			return false
		}
	} else if this.LogReceiverChoice == nil {
		return false
	} else if !this.LogReceiverChoice.Equal(that1.LogReceiverChoice) {
		return false
	}
	if that1.WhereChoice == nil {
		if this.WhereChoice != nil {
			return false
		}
	} else if this.WhereChoice == nil {
		return false
	} else if !this.WhereChoice.Equal(that1.WhereChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Syslog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Syslog)
	if !ok {
		that2, ok := that.(GlobalSpecType_Syslog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Syslog.Equal(that1.Syslog) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DataDog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DataDog)
	if !ok {
		that2, ok := that.(GlobalSpecType_DataDog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataDog.Equal(that1.DataDog) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Splunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Splunk)
	if !ok {
		that2, ok := that.(GlobalSpecType_Splunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Splunk.Equal(that1.Splunk) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteLocal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteLocal)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteLocal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocal.Equal(that1.SiteLocal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiverSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiverSites)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiverSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiverSites.Equal(that1.LogReceiverSites) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LogReceiverChoice == nil {
		if this.LogReceiverChoice != nil {
			return false
		}
	} else if this.LogReceiverChoice == nil {
		return false
	} else if !this.LogReceiverChoice.Equal(that1.LogReceiverChoice) {
		return false
	}
	if that1.WhereChoice == nil {
		if this.WhereChoice != nil {
			return false
		}
	} else if this.WhereChoice == nil {
		return false
	} else if !this.WhereChoice.Equal(that1.WhereChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_Syslog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Syslog)
	if !ok {
		that2, ok := that.(CreateSpecType_Syslog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Syslog.Equal(that1.Syslog) {
		return false
	}
	return true
}
func (this *CreateSpecType_DataDog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DataDog)
	if !ok {
		that2, ok := that.(CreateSpecType_DataDog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataDog.Equal(that1.DataDog) {
		return false
	}
	return true
}
func (this *CreateSpecType_Splunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Splunk)
	if !ok {
		that2, ok := that.(CreateSpecType_Splunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Splunk.Equal(that1.Splunk) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteLocal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteLocal)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteLocal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocal.Equal(that1.SiteLocal) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiverSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiverSites)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiverSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiverSites.Equal(that1.LogReceiverSites) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LogReceiverChoice == nil {
		if this.LogReceiverChoice != nil {
			return false
		}
	} else if this.LogReceiverChoice == nil {
		return false
	} else if !this.LogReceiverChoice.Equal(that1.LogReceiverChoice) {
		return false
	}
	if that1.WhereChoice == nil {
		if this.WhereChoice != nil {
			return false
		}
	} else if this.WhereChoice == nil {
		return false
	} else if !this.WhereChoice.Equal(that1.WhereChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Syslog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Syslog)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Syslog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Syslog.Equal(that1.Syslog) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DataDog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DataDog)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DataDog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataDog.Equal(that1.DataDog) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Splunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Splunk)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Splunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Splunk.Equal(that1.Splunk) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteLocal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteLocal)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteLocal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocal.Equal(that1.SiteLocal) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiverSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiverSites)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiverSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiverSites.Equal(that1.LogReceiverSites) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LogReceiverChoice == nil {
		if this.LogReceiverChoice != nil {
			return false
		}
	} else if this.LogReceiverChoice == nil {
		return false
	} else if !this.LogReceiverChoice.Equal(that1.LogReceiverChoice) {
		return false
	}
	if that1.WhereChoice == nil {
		if this.WhereChoice != nil {
			return false
		}
	} else if this.WhereChoice == nil {
		return false
	} else if !this.WhereChoice.Equal(that1.WhereChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_Syslog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Syslog)
	if !ok {
		that2, ok := that.(GetSpecType_Syslog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Syslog.Equal(that1.Syslog) {
		return false
	}
	return true
}
func (this *GetSpecType_DataDog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DataDog)
	if !ok {
		that2, ok := that.(GetSpecType_DataDog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataDog.Equal(that1.DataDog) {
		return false
	}
	return true
}
func (this *GetSpecType_Splunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Splunk)
	if !ok {
		that2, ok := that.(GetSpecType_Splunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Splunk.Equal(that1.Splunk) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteLocal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteLocal)
	if !ok {
		that2, ok := that.(GetSpecType_SiteLocal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocal.Equal(that1.SiteLocal) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiverSites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiverSites)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiverSites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiverSites.Equal(that1.LogReceiverSites) {
		return false
	}
	return true
}
func (this *IPServerConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.IPServerConfigType{")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPServerConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.HTTPServerConfigType{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TCPServerConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.TCPServerConfigType{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UDPServerConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.UDPServerConfigType{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSClientConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.TLSClientConfigType{")
	s = append(s, "Certificate: "+fmt.Sprintf("%#v", this.Certificate)+",\n")
	if this.KeyUrl != nil {
		s = append(s, "KeyUrl: "+fmt.Sprintf("%#v", this.KeyUrl)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&log_receiver.TLSConfigType{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.CaChoice != nil {
		s = append(s, "CaChoice: "+fmt.Sprintf("%#v", this.CaChoice)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSConfigType_DefaultSyslogTlsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_DefaultSyslogTlsPort{` +
		`DefaultSyslogTlsPort:` + fmt.Sprintf("%#v", this.DefaultSyslogTlsPort) + `}`}, ", ")
	return s
}
func (this *TLSConfigType_DefaultHttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_DefaultHttpsPort{` +
		`DefaultHttpsPort:` + fmt.Sprintf("%#v", this.DefaultHttpsPort) + `}`}, ", ")
	return s
}
func (this *TLSConfigType_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *TLSConfigType_VolterraCa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_VolterraCa{` +
		`VolterraCa:` + fmt.Sprintf("%#v", this.VolterraCa) + `}`}, ", ")
	return s
}
func (this *TLSConfigType_TrustedCaUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_TrustedCaUrl{` +
		`TrustedCaUrl:` + fmt.Sprintf("%#v", this.TrustedCaUrl) + `}`}, ", ")
	return s
}
func (this *TLSConfigType_MtlsDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_MtlsDisabled{` +
		`MtlsDisabled:` + fmt.Sprintf("%#v", this.MtlsDisabled) + `}`}, ", ")
	return s
}
func (this *TLSConfigType_MtlsEnable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.TLSConfigType_MtlsEnable{` +
		`MtlsEnable:` + fmt.Sprintf("%#v", this.MtlsEnable) + `}`}, ", ")
	return s
}
func (this *SyslogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&log_receiver.SyslogReceiver{")
	if this.ModeChoice != nil {
		s = append(s, "ModeChoice: "+fmt.Sprintf("%#v", this.ModeChoice)+",\n")
	}
	if this.FormatChoice != nil {
		s = append(s, "FormatChoice: "+fmt.Sprintf("%#v", this.FormatChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyslogReceiver_UdpServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SyslogReceiver_UdpServer{` +
		`UdpServer:` + fmt.Sprintf("%#v", this.UdpServer) + `}`}, ", ")
	return s
}
func (this *SyslogReceiver_TcpServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SyslogReceiver_TcpServer{` +
		`TcpServer:` + fmt.Sprintf("%#v", this.TcpServer) + `}`}, ", ")
	return s
}
func (this *SyslogReceiver_TlsServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SyslogReceiver_TlsServer{` +
		`TlsServer:` + fmt.Sprintf("%#v", this.TlsServer) + `}`}, ", ")
	return s
}
func (this *SyslogReceiver_SyslogRfc5424) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SyslogReceiver_SyslogRfc5424{` +
		`SyslogRfc5424:` + fmt.Sprintf("%#v", this.SyslogRfc5424) + `}`}, ", ")
	return s
}
func (this *SyslogReceiver_SyslogRfc3164) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SyslogReceiver_SyslogRfc3164{` +
		`SyslogRfc3164:` + fmt.Sprintf("%#v", this.SyslogRfc3164) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&log_receiver.DataDogReceiver{")
	if this.ServerNameChoice != nil {
		s = append(s, "ServerNameChoice: "+fmt.Sprintf("%#v", this.ServerNameChoice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.CaChoice != nil {
		s = append(s, "CaChoice: "+fmt.Sprintf("%#v", this.CaChoice)+",\n")
	}
	if this.DatadogApiKey != nil {
		s = append(s, "DatadogApiKey: "+fmt.Sprintf("%#v", this.DatadogApiKey)+",\n")
	}
	if this.CompressionChoice != nil {
		s = append(s, "CompressionChoice: "+fmt.Sprintf("%#v", this.CompressionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataDogReceiver_DatadogDefaultServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_DatadogDefaultServer{` +
		`DatadogDefaultServer:` + fmt.Sprintf("%#v", this.DatadogDefaultServer) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_DefaultPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_DefaultPort{` +
		`DefaultPort:` + fmt.Sprintf("%#v", this.DefaultPort) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_VolterraCa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_VolterraCa{` +
		`VolterraCa:` + fmt.Sprintf("%#v", this.VolterraCa) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_TrustedCaUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_TrustedCaUrl{` +
		`TrustedCaUrl:` + fmt.Sprintf("%#v", this.TrustedCaUrl) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_CompressionEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_CompressionEnabled{` +
		`CompressionEnabled:` + fmt.Sprintf("%#v", this.CompressionEnabled) + `}`}, ", ")
	return s
}
func (this *DataDogReceiver_CompressionDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.DataDogReceiver_CompressionDisabled{` +
		`CompressionDisabled:` + fmt.Sprintf("%#v", this.CompressionDisabled) + `}`}, ", ")
	return s
}
func (this *SplunkReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&log_receiver.SplunkReceiver{")
	if this.ServerNameChoice != nil {
		s = append(s, "ServerNameChoice: "+fmt.Sprintf("%#v", this.ServerNameChoice)+",\n")
	}
	if this.SplunkHecToken != nil {
		s = append(s, "SplunkHecToken: "+fmt.Sprintf("%#v", this.SplunkHecToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SplunkReceiver_SplunkServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SplunkReceiver_SplunkServerName{` +
		`SplunkServerName:` + fmt.Sprintf("%#v", this.SplunkServerName) + `}`}, ", ")
	return s
}
func (this *SplunkReceiver_SplunkServerIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SplunkReceiver_SplunkServerIp{` +
		`SplunkServerIp:` + fmt.Sprintf("%#v", this.SplunkServerIp) + `}`}, ", ")
	return s
}
func (this *SplunkReceiver_SplunkServerTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.SplunkReceiver_SplunkServerTls{` +
		`SplunkServerTls:` + fmt.Sprintf("%#v", this.SplunkServerTls) + `}`}, ", ")
	return s
}
func (this *WhereSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.WhereSites{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&log_receiver.GlobalSpecType{")
	if this.LogReceiverChoice != nil {
		s = append(s, "LogReceiverChoice: "+fmt.Sprintf("%#v", this.LogReceiverChoice)+",\n")
	}
	if this.WhereChoice != nil {
		s = append(s, "WhereChoice: "+fmt.Sprintf("%#v", this.WhereChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Syslog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GlobalSpecType_Syslog{` +
		`Syslog:` + fmt.Sprintf("%#v", this.Syslog) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DataDog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GlobalSpecType_DataDog{` +
		`DataDog:` + fmt.Sprintf("%#v", this.DataDog) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Splunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GlobalSpecType_Splunk{` +
		`Splunk:` + fmt.Sprintf("%#v", this.Splunk) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteLocal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GlobalSpecType_SiteLocal{` +
		`SiteLocal:` + fmt.Sprintf("%#v", this.SiteLocal) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiverSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GlobalSpecType_LogReceiverSites{` +
		`LogReceiverSites:` + fmt.Sprintf("%#v", this.LogReceiverSites) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&log_receiver.CreateSpecType{")
	if this.LogReceiverChoice != nil {
		s = append(s, "LogReceiverChoice: "+fmt.Sprintf("%#v", this.LogReceiverChoice)+",\n")
	}
	if this.WhereChoice != nil {
		s = append(s, "WhereChoice: "+fmt.Sprintf("%#v", this.WhereChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Syslog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.CreateSpecType_Syslog{` +
		`Syslog:` + fmt.Sprintf("%#v", this.Syslog) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DataDog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.CreateSpecType_DataDog{` +
		`DataDog:` + fmt.Sprintf("%#v", this.DataDog) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Splunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.CreateSpecType_Splunk{` +
		`Splunk:` + fmt.Sprintf("%#v", this.Splunk) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SiteLocal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.CreateSpecType_SiteLocal{` +
		`SiteLocal:` + fmt.Sprintf("%#v", this.SiteLocal) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiverSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.CreateSpecType_LogReceiverSites{` +
		`LogReceiverSites:` + fmt.Sprintf("%#v", this.LogReceiverSites) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&log_receiver.ReplaceSpecType{")
	if this.LogReceiverChoice != nil {
		s = append(s, "LogReceiverChoice: "+fmt.Sprintf("%#v", this.LogReceiverChoice)+",\n")
	}
	if this.WhereChoice != nil {
		s = append(s, "WhereChoice: "+fmt.Sprintf("%#v", this.WhereChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Syslog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.ReplaceSpecType_Syslog{` +
		`Syslog:` + fmt.Sprintf("%#v", this.Syslog) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DataDog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.ReplaceSpecType_DataDog{` +
		`DataDog:` + fmt.Sprintf("%#v", this.DataDog) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Splunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.ReplaceSpecType_Splunk{` +
		`Splunk:` + fmt.Sprintf("%#v", this.Splunk) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SiteLocal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.ReplaceSpecType_SiteLocal{` +
		`SiteLocal:` + fmt.Sprintf("%#v", this.SiteLocal) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiverSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.ReplaceSpecType_LogReceiverSites{` +
		`LogReceiverSites:` + fmt.Sprintf("%#v", this.LogReceiverSites) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&log_receiver.GetSpecType{")
	if this.LogReceiverChoice != nil {
		s = append(s, "LogReceiverChoice: "+fmt.Sprintf("%#v", this.LogReceiverChoice)+",\n")
	}
	if this.WhereChoice != nil {
		s = append(s, "WhereChoice: "+fmt.Sprintf("%#v", this.WhereChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Syslog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GetSpecType_Syslog{` +
		`Syslog:` + fmt.Sprintf("%#v", this.Syslog) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DataDog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GetSpecType_DataDog{` +
		`DataDog:` + fmt.Sprintf("%#v", this.DataDog) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Splunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GetSpecType_Splunk{` +
		`Splunk:` + fmt.Sprintf("%#v", this.Splunk) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SiteLocal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GetSpecType_SiteLocal{` +
		`SiteLocal:` + fmt.Sprintf("%#v", this.SiteLocal) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiverSites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&log_receiver.GetSpecType_LogReceiverSites{` +
		`LogReceiverSites:` + fmt.Sprintf("%#v", this.LogReceiverSites) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *IPServerConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPServerConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPServerConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPServerConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPServerConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPServerConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TCPServerConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPServerConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPServerConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UDPServerConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDPServerConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPServerConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSClientConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSClientConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSClientConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyUrl != nil {
		{
			size, err := m.KeyUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CaChoice != nil {
		{
			size := m.CaChoice.Size()
			i -= size
			if _, err := m.CaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSConfigType_DefaultSyslogTlsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_DefaultSyslogTlsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSyslogTlsPort != nil {
		{
			size, err := m.DefaultSyslogTlsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfigType_DefaultHttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_DefaultHttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHttpsPort != nil {
		{
			size, err := m.DefaultHttpsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfigType_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *TLSConfigType_VolterraCa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_VolterraCa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VolterraCa != nil {
		{
			size, err := m.VolterraCa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfigType_TrustedCaUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_TrustedCaUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TrustedCaUrl)
	copy(dAtA[i:], m.TrustedCaUrl)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *TLSConfigType_MtlsDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_MtlsDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MtlsDisabled != nil {
		{
			size, err := m.MtlsDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfigType_MtlsEnable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfigType_MtlsEnable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MtlsEnable != nil {
		{
			size, err := m.MtlsEnable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *SyslogReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyslogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyslogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FormatChoice != nil {
		{
			size := m.FormatChoice.Size()
			i -= size
			if _, err := m.FormatChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ModeChoice != nil {
		{
			size := m.ModeChoice.Size()
			i -= size
			if _, err := m.ModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyslogReceiver_UdpServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyslogReceiver_UdpServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UdpServer != nil {
		{
			size, err := m.UdpServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SyslogReceiver_TcpServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyslogReceiver_TcpServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpServer != nil {
		{
			size, err := m.TcpServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SyslogReceiver_TlsServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyslogReceiver_TlsServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsServer != nil {
		{
			size, err := m.TlsServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SyslogReceiver_SyslogRfc5424) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyslogReceiver_SyslogRfc5424) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.SyslogRfc5424))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *SyslogReceiver_SyslogRfc3164) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyslogReceiver_SyslogRfc3164) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.SyslogRfc3164))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompressionChoice != nil {
		{
			size := m.CompressionChoice.Size()
			i -= size
			if _, err := m.CompressionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DatadogApiKey != nil {
		{
			size, err := m.DatadogApiKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CaChoice != nil {
		{
			size := m.CaChoice.Size()
			i -= size
			if _, err := m.CaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerNameChoice != nil {
		{
			size := m.ServerNameChoice.Size()
			i -= size
			if _, err := m.ServerNameChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataDogReceiver_DatadogDefaultServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_DatadogDefaultServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DatadogDefaultServer != nil {
		{
			size, err := m.DatadogDefaultServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_DefaultPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_DefaultPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPort != nil {
		{
			size, err := m.DefaultPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_VolterraCa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_VolterraCa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VolterraCa != nil {
		{
			size, err := m.VolterraCa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_TrustedCaUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_TrustedCaUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TrustedCaUrl)
	copy(dAtA[i:], m.TrustedCaUrl)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_CompressionEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_CompressionEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompressionEnabled != nil {
		{
			size, err := m.CompressionEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *DataDogReceiver_CompressionDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDogReceiver_CompressionDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompressionDisabled != nil {
		{
			size, err := m.CompressionDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *SplunkReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplunkReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplunkReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SplunkHecToken != nil {
		{
			size, err := m.SplunkHecToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ServerNameChoice != nil {
		{
			size := m.ServerNameChoice.Size()
			i -= size
			if _, err := m.ServerNameChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SplunkReceiver_SplunkServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplunkReceiver_SplunkServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SplunkServerName != nil {
		{
			size, err := m.SplunkServerName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SplunkReceiver_SplunkServerIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplunkReceiver_SplunkServerIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SplunkServerIp != nil {
		{
			size, err := m.SplunkServerIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SplunkReceiver_SplunkServerTls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplunkReceiver_SplunkServerTls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SplunkServerTls != nil {
		{
			size, err := m.SplunkServerTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WhereSites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		for iNdEx := len(m.Site) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Site[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Network != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.WhereChoice != nil {
		{
			size := m.WhereChoice.Size()
			i -= size
			if _, err := m.WhereChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogReceiverChoice != nil {
		{
			size := m.LogReceiverChoice.Size()
			i -= size
			if _, err := m.LogReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Syslog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Syslog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Syslog != nil {
		{
			size, err := m.Syslog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DataDog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DataDog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataDog != nil {
		{
			size, err := m.DataDog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Splunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Splunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Splunk != nil {
		{
			size, err := m.Splunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SiteLocal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SiteLocal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocal != nil {
		{
			size, err := m.SiteLocal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiverSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiverSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiverSites != nil {
		{
			size, err := m.LogReceiverSites.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WhereChoice != nil {
		{
			size := m.WhereChoice.Size()
			i -= size
			if _, err := m.WhereChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogReceiverChoice != nil {
		{
			size := m.LogReceiverChoice.Size()
			i -= size
			if _, err := m.LogReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Syslog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Syslog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Syslog != nil {
		{
			size, err := m.Syslog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DataDog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DataDog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataDog != nil {
		{
			size, err := m.DataDog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Splunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Splunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Splunk != nil {
		{
			size, err := m.Splunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SiteLocal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SiteLocal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocal != nil {
		{
			size, err := m.SiteLocal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiverSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiverSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiverSites != nil {
		{
			size, err := m.LogReceiverSites.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WhereChoice != nil {
		{
			size := m.WhereChoice.Size()
			i -= size
			if _, err := m.WhereChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogReceiverChoice != nil {
		{
			size := m.LogReceiverChoice.Size()
			i -= size
			if _, err := m.LogReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Syslog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Syslog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Syslog != nil {
		{
			size, err := m.Syslog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DataDog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DataDog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataDog != nil {
		{
			size, err := m.DataDog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Splunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Splunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Splunk != nil {
		{
			size, err := m.Splunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SiteLocal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SiteLocal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocal != nil {
		{
			size, err := m.SiteLocal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiverSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiverSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiverSites != nil {
		{
			size, err := m.LogReceiverSites.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WhereChoice != nil {
		{
			size := m.WhereChoice.Size()
			i -= size
			if _, err := m.WhereChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogReceiverChoice != nil {
		{
			size := m.LogReceiverChoice.Size()
			i -= size
			if _, err := m.LogReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Syslog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Syslog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Syslog != nil {
		{
			size, err := m.Syslog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DataDog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DataDog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataDog != nil {
		{
			size, err := m.DataDog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Splunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Splunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Splunk != nil {
		{
			size, err := m.Splunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SiteLocal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SiteLocal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocal != nil {
		{
			size, err := m.SiteLocal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiverSites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiverSites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiverSites != nil {
		{
			size, err := m.LogReceiverSites.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IPServerConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *HTTPServerConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *TCPServerConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *UDPServerConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *TLSClientConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.KeyUrl != nil {
		l = m.KeyUrl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TLSConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.CaChoice != nil {
		n += m.CaChoice.Size()
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *TLSConfigType_DefaultSyslogTlsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSyslogTlsPort != nil {
		l = m.DefaultSyslogTlsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfigType_DefaultHttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHttpsPort != nil {
		l = m.DefaultHttpsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfigType_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *TLSConfigType_VolterraCa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolterraCa != nil {
		l = m.VolterraCa.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfigType_TrustedCaUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *TLSConfigType_MtlsDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MtlsDisabled != nil {
		l = m.MtlsDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfigType_MtlsEnable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MtlsEnable != nil {
		l = m.MtlsEnable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SyslogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModeChoice != nil {
		n += m.ModeChoice.Size()
	}
	if m.FormatChoice != nil {
		n += m.FormatChoice.Size()
	}
	return n
}

func (m *SyslogReceiver_UdpServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UdpServer != nil {
		l = m.UdpServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SyslogReceiver_TcpServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpServer != nil {
		l = m.TcpServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SyslogReceiver_TlsServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsServer != nil {
		l = m.TlsServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SyslogReceiver_SyslogRfc5424) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SyslogRfc5424))
	return n
}
func (m *SyslogReceiver_SyslogRfc3164) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SyslogRfc3164))
	return n
}
func (m *DataDogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerNameChoice != nil {
		n += m.ServerNameChoice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.CaChoice != nil {
		n += m.CaChoice.Size()
	}
	if m.DatadogApiKey != nil {
		l = m.DatadogApiKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CompressionChoice != nil {
		n += m.CompressionChoice.Size()
	}
	return n
}

func (m *DataDogReceiver_DatadogDefaultServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DatadogDefaultServer != nil {
		l = m.DatadogDefaultServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DataDogReceiver_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DataDogReceiver_DefaultPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPort != nil {
		l = m.DefaultPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DataDogReceiver_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *DataDogReceiver_VolterraCa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolterraCa != nil {
		l = m.VolterraCa.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DataDogReceiver_TrustedCaUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DataDogReceiver_CompressionEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompressionEnabled != nil {
		l = m.CompressionEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DataDogReceiver_CompressionDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompressionDisabled != nil {
		l = m.CompressionDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SplunkReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerNameChoice != nil {
		n += m.ServerNameChoice.Size()
	}
	if m.SplunkHecToken != nil {
		l = m.SplunkHecToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SplunkReceiver_SplunkServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SplunkServerName != nil {
		l = m.SplunkServerName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SplunkReceiver_SplunkServerIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SplunkServerIp != nil {
		l = m.SplunkServerIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SplunkReceiver_SplunkServerTls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SplunkServerTls != nil {
		l = m.SplunkServerTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WhereSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTypes(uint64(m.Network))
	}
	if len(m.Site) > 0 {
		for _, e := range m.Site {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverChoice != nil {
		n += m.LogReceiverChoice.Size()
	}
	if m.WhereChoice != nil {
		n += m.WhereChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Syslog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Syslog != nil {
		l = m.Syslog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DataDog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataDog != nil {
		l = m.DataDog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Splunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splunk != nil {
		l = m.Splunk.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteLocal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocal != nil {
		l = m.SiteLocal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiverSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverSites != nil {
		l = m.LogReceiverSites.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverChoice != nil {
		n += m.LogReceiverChoice.Size()
	}
	if m.WhereChoice != nil {
		n += m.WhereChoice.Size()
	}
	return n
}

func (m *CreateSpecType_Syslog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Syslog != nil {
		l = m.Syslog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DataDog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataDog != nil {
		l = m.DataDog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Splunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splunk != nil {
		l = m.Splunk.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SiteLocal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocal != nil {
		l = m.SiteLocal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiverSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverSites != nil {
		l = m.LogReceiverSites.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverChoice != nil {
		n += m.LogReceiverChoice.Size()
	}
	if m.WhereChoice != nil {
		n += m.WhereChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_Syslog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Syslog != nil {
		l = m.Syslog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DataDog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataDog != nil {
		l = m.DataDog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Splunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splunk != nil {
		l = m.Splunk.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SiteLocal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocal != nil {
		l = m.SiteLocal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiverSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverSites != nil {
		l = m.LogReceiverSites.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverChoice != nil {
		n += m.LogReceiverChoice.Size()
	}
	if m.WhereChoice != nil {
		n += m.WhereChoice.Size()
	}
	return n
}

func (m *GetSpecType_Syslog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Syslog != nil {
		l = m.Syslog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DataDog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataDog != nil {
		l = m.DataDog.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Splunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splunk != nil {
		l = m.Splunk.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SiteLocal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocal != nil {
		l = m.SiteLocal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiverSites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiverSites != nil {
		l = m.LogReceiverSites.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *IPServerConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPServerConfigType{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPServerConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPServerConfigType{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPServerConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPServerConfigType{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPServerConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPServerConfigType{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSClientConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSClientConfigType{`,
		`Certificate:` + fmt.Sprintf("%v", this.Certificate) + `,`,
		`KeyUrl:` + strings.Replace(fmt.Sprintf("%v", this.KeyUrl), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`CaChoice:` + fmt.Sprintf("%v", this.CaChoice) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_DefaultSyslogTlsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_DefaultSyslogTlsPort{`,
		`DefaultSyslogTlsPort:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSyslogTlsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_DefaultHttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_DefaultHttpsPort{`,
		`DefaultHttpsPort:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHttpsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_VolterraCa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_VolterraCa{`,
		`VolterraCa:` + strings.Replace(fmt.Sprintf("%v", this.VolterraCa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_TrustedCaUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_TrustedCaUrl{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_MtlsDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_MtlsDisabled{`,
		`MtlsDisabled:` + strings.Replace(fmt.Sprintf("%v", this.MtlsDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfigType_MtlsEnable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfigType_MtlsEnable{`,
		`MtlsEnable:` + strings.Replace(fmt.Sprintf("%v", this.MtlsEnable), "TLSClientConfigType", "TLSClientConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogReceiver{`,
		`ModeChoice:` + fmt.Sprintf("%v", this.ModeChoice) + `,`,
		`FormatChoice:` + fmt.Sprintf("%v", this.FormatChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogReceiver_UdpServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogReceiver_UdpServer{`,
		`UdpServer:` + strings.Replace(fmt.Sprintf("%v", this.UdpServer), "UDPServerConfigType", "UDPServerConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogReceiver_TcpServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogReceiver_TcpServer{`,
		`TcpServer:` + strings.Replace(fmt.Sprintf("%v", this.TcpServer), "TCPServerConfigType", "TCPServerConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogReceiver_TlsServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogReceiver_TlsServer{`,
		`TlsServer:` + strings.Replace(fmt.Sprintf("%v", this.TlsServer), "TLSConfigType", "TLSConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogReceiver_SyslogRfc5424) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogReceiver_SyslogRfc5424{`,
		`SyslogRfc5424:` + fmt.Sprintf("%v", this.SyslogRfc5424) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogReceiver_SyslogRfc3164) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogReceiver_SyslogRfc3164{`,
		`SyslogRfc3164:` + fmt.Sprintf("%v", this.SyslogRfc3164) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver{`,
		`ServerNameChoice:` + fmt.Sprintf("%v", this.ServerNameChoice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`CaChoice:` + fmt.Sprintf("%v", this.CaChoice) + `,`,
		`DatadogApiKey:` + strings.Replace(fmt.Sprintf("%v", this.DatadogApiKey), "SecretType", "schema.SecretType", 1) + `,`,
		`CompressionChoice:` + fmt.Sprintf("%v", this.CompressionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_DatadogDefaultServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_DatadogDefaultServer{`,
		`DatadogDefaultServer:` + strings.Replace(fmt.Sprintf("%v", this.DatadogDefaultServer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_DefaultPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_DefaultPort{`,
		`DefaultPort:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_VolterraCa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_VolterraCa{`,
		`VolterraCa:` + strings.Replace(fmt.Sprintf("%v", this.VolterraCa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_TrustedCaUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_TrustedCaUrl{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_CompressionEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_CompressionEnabled{`,
		`CompressionEnabled:` + strings.Replace(fmt.Sprintf("%v", this.CompressionEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataDogReceiver_CompressionDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataDogReceiver_CompressionDisabled{`,
		`CompressionDisabled:` + strings.Replace(fmt.Sprintf("%v", this.CompressionDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplunkReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplunkReceiver{`,
		`ServerNameChoice:` + fmt.Sprintf("%v", this.ServerNameChoice) + `,`,
		`SplunkHecToken:` + strings.Replace(fmt.Sprintf("%v", this.SplunkHecToken), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplunkReceiver_SplunkServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplunkReceiver_SplunkServerName{`,
		`SplunkServerName:` + strings.Replace(fmt.Sprintf("%v", this.SplunkServerName), "HTTPServerConfigType", "HTTPServerConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplunkReceiver_SplunkServerIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplunkReceiver_SplunkServerIp{`,
		`SplunkServerIp:` + strings.Replace(fmt.Sprintf("%v", this.SplunkServerIp), "IPServerConfigType", "IPServerConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SplunkReceiver_SplunkServerTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplunkReceiver_SplunkServerTls{`,
		`SplunkServerTls:` + strings.Replace(fmt.Sprintf("%v", this.SplunkServerTls), "TLSConfigType", "TLSConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhereSites) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSite := "[]*ObjectRefType{"
	for _, f := range this.Site {
		repeatedStringForSite += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForSite += "}"
	s := strings.Join([]string{`&WhereSites{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Site:` + repeatedStringForSite + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`LogReceiverChoice:` + fmt.Sprintf("%v", this.LogReceiverChoice) + `,`,
		`WhereChoice:` + fmt.Sprintf("%v", this.WhereChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Syslog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Syslog{`,
		`Syslog:` + strings.Replace(fmt.Sprintf("%v", this.Syslog), "SyslogReceiver", "SyslogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DataDog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DataDog{`,
		`DataDog:` + strings.Replace(fmt.Sprintf("%v", this.DataDog), "DataDogReceiver", "DataDogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Splunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Splunk{`,
		`Splunk:` + strings.Replace(fmt.Sprintf("%v", this.Splunk), "SplunkReceiver", "SplunkReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteLocal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteLocal{`,
		`SiteLocal:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiverSites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiverSites{`,
		`LogReceiverSites:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiverSites), "WhereSites", "WhereSites", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`LogReceiverChoice:` + fmt.Sprintf("%v", this.LogReceiverChoice) + `,`,
		`WhereChoice:` + fmt.Sprintf("%v", this.WhereChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Syslog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Syslog{`,
		`Syslog:` + strings.Replace(fmt.Sprintf("%v", this.Syslog), "SyslogReceiver", "SyslogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DataDog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DataDog{`,
		`DataDog:` + strings.Replace(fmt.Sprintf("%v", this.DataDog), "DataDogReceiver", "DataDogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Splunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Splunk{`,
		`Splunk:` + strings.Replace(fmt.Sprintf("%v", this.Splunk), "SplunkReceiver", "SplunkReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteLocal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteLocal{`,
		`SiteLocal:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiverSites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiverSites{`,
		`LogReceiverSites:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiverSites), "WhereSites", "WhereSites", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`LogReceiverChoice:` + fmt.Sprintf("%v", this.LogReceiverChoice) + `,`,
		`WhereChoice:` + fmt.Sprintf("%v", this.WhereChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Syslog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Syslog{`,
		`Syslog:` + strings.Replace(fmt.Sprintf("%v", this.Syslog), "SyslogReceiver", "SyslogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DataDog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DataDog{`,
		`DataDog:` + strings.Replace(fmt.Sprintf("%v", this.DataDog), "DataDogReceiver", "DataDogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Splunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Splunk{`,
		`Splunk:` + strings.Replace(fmt.Sprintf("%v", this.Splunk), "SplunkReceiver", "SplunkReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteLocal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteLocal{`,
		`SiteLocal:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiverSites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiverSites{`,
		`LogReceiverSites:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiverSites), "WhereSites", "WhereSites", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`LogReceiverChoice:` + fmt.Sprintf("%v", this.LogReceiverChoice) + `,`,
		`WhereChoice:` + fmt.Sprintf("%v", this.WhereChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Syslog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Syslog{`,
		`Syslog:` + strings.Replace(fmt.Sprintf("%v", this.Syslog), "SyslogReceiver", "SyslogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DataDog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DataDog{`,
		`DataDog:` + strings.Replace(fmt.Sprintf("%v", this.DataDog), "DataDogReceiver", "DataDogReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Splunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Splunk{`,
		`Splunk:` + strings.Replace(fmt.Sprintf("%v", this.Splunk), "SplunkReceiver", "SplunkReceiver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteLocal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteLocal{`,
		`SiteLocal:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiverSites) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiverSites{`,
		`LogReceiverSites:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiverSites), "WhereSites", "WhereSites", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *IPServerConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPServerConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPServerConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPServerConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPServerConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPServerConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPServerConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPServerConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPServerConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDPServerConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDPServerConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDPServerConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSClientConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSClientConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSClientConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyUrl == nil {
				m.KeyUrl = &schema.SecretType{}
			}
			if err := m.KeyUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSyslogTlsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &TLSConfigType_DefaultSyslogTlsPort{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHttpsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &TLSConfigType_DefaultHttpsPort{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &TLSConfigType_Port{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaChoice = &TLSConfigType_VolterraCa{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaChoice = &TLSConfigType_TrustedCaUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtlsDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &TLSConfigType_MtlsDisabled{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtlsEnable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TLSClientConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &TLSConfigType_MtlsEnable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyslogReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyslogReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyslogReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UDPServerConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModeChoice = &SyslogReceiver_UdpServer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPServerConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModeChoice = &SyslogReceiver_TcpServer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TLSConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModeChoice = &SyslogReceiver_TlsServer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogRfc5424", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FormatChoice = &SyslogReceiver_SyslogRfc5424{v}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogRfc3164", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FormatChoice = &SyslogReceiver_SyslogRfc3164{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDogReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDogReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDogReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatadogDefaultServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerNameChoice = &DataDogReceiver_DatadogDefaultServer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNameChoice = &DataDogReceiver_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &DataDogReceiver_DefaultPort{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &DataDogReceiver_Port{v}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaChoice = &DataDogReceiver_VolterraCa{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaChoice = &DataDogReceiver_TrustedCaUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatadogApiKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DatadogApiKey == nil {
				m.DatadogApiKey = &schema.SecretType{}
			}
			if err := m.DatadogApiKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CompressionChoice = &DataDogReceiver_CompressionEnabled{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CompressionChoice = &DataDogReceiver_CompressionDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplunkReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplunkReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplunkReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplunkServerName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPServerConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerNameChoice = &SplunkReceiver_SplunkServerName{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplunkServerIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPServerConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerNameChoice = &SplunkReceiver_SplunkServerIp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplunkServerTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TLSConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerNameChoice = &SplunkReceiver_SplunkServerTls{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplunkHecToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplunkHecToken == nil {
				m.SplunkHecToken = &schema.SecretType{}
			}
			if err := m.SplunkHecToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereSites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereSites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereSites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= views.SiteNetwork(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = append(m.Site, &views.ObjectRefType{})
			if err := m.Site[len(m.Site)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syslog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyslogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &GlobalSpecType_Syslog{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataDogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &GlobalSpecType_DataDog{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SplunkReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &GlobalSpecType_Splunk{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &GlobalSpecType_SiteLocal{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiverSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSites{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &GlobalSpecType_LogReceiverSites{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syslog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyslogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &CreateSpecType_Syslog{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataDogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &CreateSpecType_DataDog{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SplunkReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &CreateSpecType_Splunk{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &CreateSpecType_SiteLocal{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiverSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSites{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &CreateSpecType_LogReceiverSites{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syslog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyslogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &ReplaceSpecType_Syslog{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataDogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &ReplaceSpecType_DataDog{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SplunkReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &ReplaceSpecType_Splunk{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &ReplaceSpecType_SiteLocal{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiverSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSites{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &ReplaceSpecType_LogReceiverSites{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syslog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyslogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &GetSpecType_Syslog{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataDogReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &GetSpecType_DataDog{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SplunkReceiver{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogReceiverChoice = &GetSpecType_Splunk{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &GetSpecType_SiteLocal{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiverSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhereSites{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WhereChoice = &GetSpecType_LogReceiverSites{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

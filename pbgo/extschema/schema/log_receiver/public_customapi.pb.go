// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log_receiver/public_customapi.proto

// Log Receiver
//
// x-displayName: "Log Receiver"
// Custom APIs for log receiver object

package log_receiver

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Test Log Receiver Request
//
// x-displayName: "Test Log Receiver Request"
// Request to send test log
type TestLogReceiverRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Namespace in which the log receiver is configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "slack1"
	// Name of the log receiver
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TestLogReceiverRequest) Reset()      { *m = TestLogReceiverRequest{} }
func (*TestLogReceiverRequest) ProtoMessage() {}
func (*TestLogReceiverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb11c8a73ec6d850, []int{0}
}
func (m *TestLogReceiverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestLogReceiverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestLogReceiverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestLogReceiverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestLogReceiverRequest.Merge(m, src)
}
func (m *TestLogReceiverRequest) XXX_Size() int {
	return m.Size()
}
func (m *TestLogReceiverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestLogReceiverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestLogReceiverRequest proto.InternalMessageInfo

func (m *TestLogReceiverRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *TestLogReceiverRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Test Log Receiver Response
//
// x-displayName: "Test Log Receiver Response"
// Response for the Log Receiver test request; empty because the only returned
// information is error message.
type TestLogReceiverResponse struct {
}

func (m *TestLogReceiverResponse) Reset()      { *m = TestLogReceiverResponse{} }
func (*TestLogReceiverResponse) ProtoMessage() {}
func (*TestLogReceiverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb11c8a73ec6d850, []int{1}
}
func (m *TestLogReceiverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestLogReceiverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestLogReceiverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestLogReceiverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestLogReceiverResponse.Merge(m, src)
}
func (m *TestLogReceiverResponse) XXX_Size() int {
	return m.Size()
}
func (m *TestLogReceiverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestLogReceiverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestLogReceiverResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TestLogReceiverRequest)(nil), "ves.io.schema.log_receiver.TestLogReceiverRequest")
	golang_proto.RegisterType((*TestLogReceiverRequest)(nil), "ves.io.schema.log_receiver.TestLogReceiverRequest")
	proto.RegisterType((*TestLogReceiverResponse)(nil), "ves.io.schema.log_receiver.TestLogReceiverResponse")
	golang_proto.RegisterType((*TestLogReceiverResponse)(nil), "ves.io.schema.log_receiver.TestLogReceiverResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/log_receiver/public_customapi.proto", fileDescriptor_eb11c8a73ec6d850)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/log_receiver/public_customapi.proto", fileDescriptor_eb11c8a73ec6d850)
}

var fileDescriptor_eb11c8a73ec6d850 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xb1, 0x8b, 0xd4, 0x40,
	0x14, 0xc6, 0x33, 0xab, 0x08, 0x9b, 0x46, 0x49, 0xa1, 0x7b, 0x71, 0x19, 0x34, 0x95, 0xa8, 0xc9,
	0xe0, 0x1d, 0x82, 0x08, 0x16, 0x6a, 0xa5, 0x08, 0x1e, 0x8b, 0x95, 0xcd, 0x31, 0xc9, 0xbd, 0x9d,
	0x1b, 0x4d, 0xf2, 0xc6, 0x99, 0x49, 0x3c, 0x91, 0x03, 0xb9, 0xd2, 0x4a, 0xf0, 0x9f, 0xb0, 0xf1,
	0x2f, 0xb8, 0xe6, 0x3a, 0xad, 0x64, 0xd1, 0xe6, 0x4a, 0x37, 0x6b, 0x61, 0x25, 0xf7, 0x27, 0x88,
	0xb3, 0xb9, 0xf3, 0x72, 0xae, 0x82, 0xdd, 0xf7, 0xf2, 0xcb, 0xf7, 0xf8, 0xf2, 0xf8, 0xe2, 0x5f,
	0xab, 0xc1, 0x24, 0x12, 0x99, 0xc9, 0x36, 0xa0, 0xe0, 0x2c, 0x47, 0xb1, 0xa6, 0x21, 0x03, 0x59,
	0x83, 0x66, 0xaa, 0x4a, 0x73, 0x99, 0xad, 0x65, 0x95, 0xb1, 0x58, 0x70, 0x25, 0x13, 0xa5, 0xd1,
	0x62, 0x10, 0xce, 0x2d, 0xc9, 0xdc, 0x92, 0x1c, 0xb5, 0x84, 0xb1, 0x90, 0x76, 0xa3, 0x4a, 0x93,
	0x0c, 0x0b, 0x26, 0x50, 0x20, 0x73, 0x96, 0xb4, 0x1a, 0xbb, 0xc9, 0x0d, 0x4e, 0xcd, 0x57, 0x85,
	0x43, 0x81, 0x28, 0x72, 0x60, 0x5c, 0x49, 0xc6, 0xcb, 0x12, 0x2d, 0xb7, 0x12, 0x4b, 0xd3, 0xd2,
	0xf3, 0xdd, 0x6c, 0xa8, 0x8e, 0xc2, 0xa5, 0x2e, 0xb4, 0x2f, 0x14, 0x1c, 0xa0, 0x61, 0x17, 0xd5,
	0x3c, 0x97, 0xeb, 0xdc, 0x42, 0x4b, 0xa3, 0x63, 0x14, 0x0c, 0x94, 0x75, 0x77, 0x79, 0x74, 0xdf,
	0x3f, 0xfb, 0x08, 0x8c, 0x7d, 0x80, 0x62, 0xd4, 0x7e, 0xd9, 0x08, 0x9e, 0x55, 0x60, 0x6c, 0x30,
	0xf4, 0xfb, 0x25, 0x2f, 0xc0, 0x28, 0x9e, 0xc1, 0x80, 0x5c, 0x20, 0x97, 0xfa, 0xa3, 0xdf, 0x0f,
	0x82, 0xc0, 0x3f, 0xf9, 0x6b, 0x18, 0xf4, 0x1c, 0x70, 0x3a, 0x5a, 0xf2, 0xcf, 0xfd, 0xb1, 0xcb,
	0x28, 0x2c, 0x0d, 0x2c, 0xbf, 0xef, 0xf9, 0xfd, 0xbb, 0xee, 0xba, 0xb7, 0x57, 0xef, 0x05, 0x3f,
	0x88, 0x7f, 0xfa, 0xd8, 0x9b, 0xc1, 0x72, 0xf2, 0xf7, 0x63, 0x27, 0x8b, 0x23, 0x86, 0x2b, 0xff,
	0xe5, 0x99, 0x47, 0x89, 0x74, 0xf3, 0x61, 0x70, 0x65, 0x7c, 0x7d, 0x33, 0x8b, 0x33, 0x2c, 0x0d,
	0xe6, 0x10, 0xa7, 0xdc, 0x40, 0x5c, 0x19, 0xd0, 0x57, 0x6b, 0x30, 0xb1, 0xc4, 0x58, 0x40, 0x09,
	0x9a, 0xe7, 0xf1, 0x73, 0x2d, 0x2d, 0x6c, 0x7f, 0xf9, 0xf6, 0xb6, 0x77, 0x2b, 0xba, 0xd1, 0x96,
	0x84, 0x1d, 0xde, 0xc0, 0xb0, 0x97, 0x87, 0x7a, 0xab, 0xd3, 0xa7, 0x96, 0x6c, 0x31, 0x0b, 0xc6,
	0xde, 0x24, 0x97, 0x43, 0xb6, 0xbb, 0x43, 0x4e, 0x7c, 0xde, 0x21, 0x17, 0xff, 0x91, 0xf7, 0x61,
	0xfa, 0x04, 0x32, 0xbb, 0xfd, 0x69, 0xd0, 0x3b, 0x43, 0xee, 0xbc, 0x26, 0x93, 0x29, 0xf5, 0xf6,
	0xa6, 0xd4, 0xdb, 0x9f, 0x52, 0xf2, 0xaa, 0xa1, 0xe4, 0x5d, 0x43, 0xc9, 0xc7, 0x86, 0x92, 0x49,
	0x43, 0xc9, 0xd7, 0x86, 0x92, 0xef, 0x0d, 0xf5, 0xf6, 0x1b, 0x4a, 0xde, 0xcc, 0xa8, 0xb7, 0x3b,
	0xa3, 0x64, 0x32, 0xa3, 0xde, 0xde, 0x8c, 0x7a, 0x8f, 0x57, 0x05, 0xaa, 0xa7, 0x22, 0xa9, 0x31,
	0xb7, 0xa0, 0x35, 0x4f, 0x2a, 0xc3, 0x9c, 0x18, 0xa3, 0x2e, 0x62, 0xa5, 0xb1, 0x96, 0xeb, 0xa0,
	0xe3, 0x03, 0xcc, 0x54, 0x2a, 0x90, 0xc1, 0xa6, 0x6d, 0x4b, 0xb2, 0xe0, 0xef, 0x48, 0x4f, 0xb9,
	0xaa, 0xac, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x89, 0x57, 0x52, 0xac, 0x42, 0x03, 0x00, 0x00,
}

func (this *TestLogReceiverRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestLogReceiverRequest)
	if !ok {
		that2, ok := that.(TestLogReceiverRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *TestLogReceiverResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestLogReceiverResponse)
	if !ok {
		that2, ok := that.(TestLogReceiverResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TestLogReceiverRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&log_receiver.TestLogReceiverRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestLogReceiverResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&log_receiver.TestLogReceiverResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Test Log Receiver
	//
	// x-displayName: "Test Log Receiver"
	// API to send test log
	TestLogReceiver(ctx context.Context, in *TestLogReceiverRequest, opts ...grpc.CallOption) (*TestLogReceiverResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) TestLogReceiver(ctx context.Context, in *TestLogReceiverRequest, opts ...grpc.CallOption) (*TestLogReceiverResponse, error) {
	out := new(TestLogReceiverResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.log_receiver.CustomAPI/TestLogReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Test Log Receiver
	//
	// x-displayName: "Test Log Receiver"
	// API to send test log
	TestLogReceiver(context.Context, *TestLogReceiverRequest) (*TestLogReceiverResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) TestLogReceiver(ctx context.Context, req *TestLogReceiverRequest) (*TestLogReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogReceiver not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_TestLogReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestLogReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).TestLogReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.log_receiver.CustomAPI/TestLogReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).TestLogReceiver(ctx, req.(*TestLogReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.log_receiver.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestLogReceiver",
			Handler:    _CustomAPI_TestLogReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/log_receiver/public_customapi.proto",
}

func (m *TestLogReceiverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestLogReceiverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestLogReceiverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestLogReceiverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestLogReceiverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestLogReceiverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestLogReceiverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *TestLogReceiverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TestLogReceiverRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestLogReceiverRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestLogReceiverResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestLogReceiverResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TestLogReceiverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestLogReceiverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestLogReceiverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestLogReceiverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestLogReceiverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestLogReceiverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

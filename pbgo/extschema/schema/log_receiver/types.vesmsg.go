//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package log_receiver

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSyslog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.syslog")
	}

	if err := m.GetDataDog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.data_dog")
	}

	if err := m.GetSplunk().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.splunk")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetWhereChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetWhereChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWhereChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetWhereChoice().(type) {
	case *CreateSpecType_SiteLocal:

	case *CreateSpecType_LogReceiverSites:
		odrInfos, err = m.GetLogReceiverSites().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "log_receiver_sites." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) LogReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WhereChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for where_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["log_receiver_choice"]; exists {
		val := m.GetLogReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("log_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogReceiverChoice().(type) {
	case *CreateSpecType_Syslog:
		if fv, exists := v.FldValidators["log_receiver_choice.syslog"]; exists {
			val := m.GetLogReceiverChoice().(*CreateSpecType_Syslog).Syslog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("syslog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DataDog:
		if fv, exists := v.FldValidators["log_receiver_choice.data_dog"]; exists {
			val := m.GetLogReceiverChoice().(*CreateSpecType_DataDog).DataDog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("data_dog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Splunk:
		if fv, exists := v.FldValidators["log_receiver_choice.splunk"]; exists {
			val := m.GetLogReceiverChoice().(*CreateSpecType_Splunk).Splunk
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("splunk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["where_choice"]; exists {
		val := m.GetWhereChoice()
		vOpts := append(opts,
			db.WithValidateField("where_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWhereChoice().(type) {
	case *CreateSpecType_SiteLocal:
		if fv, exists := v.FldValidators["where_choice.site_local"]; exists {
			val := m.GetWhereChoice().(*CreateSpecType_SiteLocal).SiteLocal
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("site_local"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiverSites:
		if fv, exists := v.FldValidators["where_choice.log_receiver_sites"]; exists {
			val := m.GetWhereChoice().(*CreateSpecType_LogReceiverSites).LogReceiverSites
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("log_receiver_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLogReceiverChoice := v.LogReceiverChoiceValidationRuleHandler
	rulesLogReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogReceiverChoice(rulesLogReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.log_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_receiver_choice"] = vFn

	vrhWhereChoice := v.WhereChoiceValidationRuleHandler
	rulesWhereChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWhereChoice(rulesWhereChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.where_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where_choice"] = vFn

	v.FldValidators["log_receiver_choice.syslog"] = SyslogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.data_dog"] = DataDogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.splunk"] = SplunkReceiverValidator().Validate

	v.FldValidators["where_choice.log_receiver_sites"] = WhereSitesValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DataDogReceiver) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DataDogReceiver) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *DataDogReceiver) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetDatadogApiKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting DataDogReceiver.datadog_api_key")
	}

	return nil
}

func (m *DataDogReceiver) DeepCopy() *DataDogReceiver {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DataDogReceiver{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DataDogReceiver) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DataDogReceiver) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DataDogReceiverValidator().Validate(ctx, m, opts...)
}

type ValidateDataDogReceiver struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDataDogReceiver) CaChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ca_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDataDogReceiver) CaChoiceTrustedCaUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TrustedCaUrl, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trusted_ca_url")
	}
	return oValidatorFn_TrustedCaUrl, nil
}

func (v *ValidateDataDogReceiver) CompressionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compression_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDataDogReceiver) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDataDogReceiver) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}

func (v *ValidateDataDogReceiver) ServerNameChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDataDogReceiver) ServerNameChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateDataDogReceiver) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DataDogReceiver)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DataDogReceiver got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ca_choice"]; exists {
		val := m.GetCaChoice()
		vOpts := append(opts,
			db.WithValidateField("ca_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCaChoice().(type) {
	case *DataDogReceiver_VolterraCa:
		if fv, exists := v.FldValidators["ca_choice.volterra_ca"]; exists {
			val := m.GetCaChoice().(*DataDogReceiver_VolterraCa).VolterraCa
			vOpts := append(opts,
				db.WithValidateField("ca_choice"),
				db.WithValidateField("volterra_ca"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DataDogReceiver_TrustedCaUrl:
		if fv, exists := v.FldValidators["ca_choice.trusted_ca_url"]; exists {
			val := m.GetCaChoice().(*DataDogReceiver_TrustedCaUrl).TrustedCaUrl
			vOpts := append(opts,
				db.WithValidateField("ca_choice"),
				db.WithValidateField("trusted_ca_url"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["compression_choice"]; exists {
		val := m.GetCompressionChoice()
		vOpts := append(opts,
			db.WithValidateField("compression_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCompressionChoice().(type) {
	case *DataDogReceiver_CompressionEnabled:
		if fv, exists := v.FldValidators["compression_choice.compression_enabled"]; exists {
			val := m.GetCompressionChoice().(*DataDogReceiver_CompressionEnabled).CompressionEnabled
			vOpts := append(opts,
				db.WithValidateField("compression_choice"),
				db.WithValidateField("compression_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DataDogReceiver_CompressionDisabled:
		if fv, exists := v.FldValidators["compression_choice.compression_disabled"]; exists {
			val := m.GetCompressionChoice().(*DataDogReceiver_CompressionDisabled).CompressionDisabled
			vOpts := append(opts,
				db.WithValidateField("compression_choice"),
				db.WithValidateField("compression_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["datadog_api_key"]; exists {

		vOpts := append(opts, db.WithValidateField("datadog_api_key"))
		if err := fv(ctx, m.GetDatadogApiKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *DataDogReceiver_DefaultPort:
		if fv, exists := v.FldValidators["port_choice.default_port"]; exists {
			val := m.GetPortChoice().(*DataDogReceiver_DefaultPort).DefaultPort
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("default_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DataDogReceiver_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*DataDogReceiver_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["server_name_choice"]; exists {
		val := m.GetServerNameChoice()
		vOpts := append(opts,
			db.WithValidateField("server_name_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerNameChoice().(type) {
	case *DataDogReceiver_DatadogDefaultServer:
		if fv, exists := v.FldValidators["server_name_choice.datadog_default_server"]; exists {
			val := m.GetServerNameChoice().(*DataDogReceiver_DatadogDefaultServer).DatadogDefaultServer
			vOpts := append(opts,
				db.WithValidateField("server_name_choice"),
				db.WithValidateField("datadog_default_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DataDogReceiver_ServerName:
		if fv, exists := v.FldValidators["server_name_choice.server_name"]; exists {
			val := m.GetServerNameChoice().(*DataDogReceiver_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_name_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDataDogReceiverValidator = func() *ValidateDataDogReceiver {
	v := &ValidateDataDogReceiver{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCaChoice := v.CaChoiceValidationRuleHandler
	rulesCaChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCaChoice(rulesCaChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DataDogReceiver.ca_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ca_choice"] = vFn

	vrhCaChoiceTrustedCaUrl := v.CaChoiceTrustedCaUrlValidationRuleHandler
	rulesCaChoiceTrustedCaUrl := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "131072",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFnMap["ca_choice.trusted_ca_url"], err = vrhCaChoiceTrustedCaUrl(rulesCaChoiceTrustedCaUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DataDogReceiver.ca_choice_trusted_ca_url: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ca_choice.trusted_ca_url"] = vFnMap["ca_choice.trusted_ca_url"]

	vrhCompressionChoice := v.CompressionChoiceValidationRuleHandler
	rulesCompressionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCompressionChoice(rulesCompressionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DataDogReceiver.compression_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compression_choice"] = vFn

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DataDogReceiver.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DataDogReceiver.port_choice_port: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]

	vrhServerNameChoice := v.ServerNameChoiceValidationRuleHandler
	rulesServerNameChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerNameChoice(rulesServerNameChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DataDogReceiver.server_name_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name_choice"] = vFn

	vrhServerNameChoiceServerName := v.ServerNameChoiceServerNameValidationRuleHandler
	rulesServerNameChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFnMap["server_name_choice.server_name"], err = vrhServerNameChoiceServerName(rulesServerNameChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DataDogReceiver.server_name_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_name_choice.server_name"] = vFnMap["server_name_choice.server_name"]

	v.FldValidators["datadog_api_key"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func DataDogReceiverValidator() db.Validator {
	return DefaultDataDogReceiverValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSyslog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.syslog")
	}

	if err := m.GetDataDog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.data_dog")
	}

	if err := m.GetSplunk().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.splunk")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetWhereChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetWhereChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWhereChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetWhereChoice().(type) {
	case *GetSpecType_SiteLocal:

	case *GetSpecType_LogReceiverSites:
		odrInfos, err = m.GetLogReceiverSites().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "log_receiver_sites." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) LogReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WhereChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for where_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["log_receiver_choice"]; exists {
		val := m.GetLogReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("log_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogReceiverChoice().(type) {
	case *GetSpecType_Syslog:
		if fv, exists := v.FldValidators["log_receiver_choice.syslog"]; exists {
			val := m.GetLogReceiverChoice().(*GetSpecType_Syslog).Syslog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("syslog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DataDog:
		if fv, exists := v.FldValidators["log_receiver_choice.data_dog"]; exists {
			val := m.GetLogReceiverChoice().(*GetSpecType_DataDog).DataDog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("data_dog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Splunk:
		if fv, exists := v.FldValidators["log_receiver_choice.splunk"]; exists {
			val := m.GetLogReceiverChoice().(*GetSpecType_Splunk).Splunk
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("splunk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["where_choice"]; exists {
		val := m.GetWhereChoice()
		vOpts := append(opts,
			db.WithValidateField("where_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWhereChoice().(type) {
	case *GetSpecType_SiteLocal:
		if fv, exists := v.FldValidators["where_choice.site_local"]; exists {
			val := m.GetWhereChoice().(*GetSpecType_SiteLocal).SiteLocal
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("site_local"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiverSites:
		if fv, exists := v.FldValidators["where_choice.log_receiver_sites"]; exists {
			val := m.GetWhereChoice().(*GetSpecType_LogReceiverSites).LogReceiverSites
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("log_receiver_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLogReceiverChoice := v.LogReceiverChoiceValidationRuleHandler
	rulesLogReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogReceiverChoice(rulesLogReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.log_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_receiver_choice"] = vFn

	vrhWhereChoice := v.WhereChoiceValidationRuleHandler
	rulesWhereChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWhereChoice(rulesWhereChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.where_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where_choice"] = vFn

	v.FldValidators["log_receiver_choice.syslog"] = SyslogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.data_dog"] = DataDogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.splunk"] = SplunkReceiverValidator().Validate

	v.FldValidators["where_choice.log_receiver_sites"] = WhereSitesValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSyslog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.syslog")
	}

	if err := m.GetDataDog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.data_dog")
	}

	if err := m.GetSplunk().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.splunk")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetWhereChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWhereChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetWhereChoice().(type) {
	case *GlobalSpecType_SiteLocal:

	case *GlobalSpecType_LogReceiverSites:
		odrInfos, err = m.GetLogReceiverSites().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "log_receiver_sites." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) LogReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WhereChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for where_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["log_receiver_choice"]; exists {
		val := m.GetLogReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("log_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogReceiverChoice().(type) {
	case *GlobalSpecType_Syslog:
		if fv, exists := v.FldValidators["log_receiver_choice.syslog"]; exists {
			val := m.GetLogReceiverChoice().(*GlobalSpecType_Syslog).Syslog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("syslog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DataDog:
		if fv, exists := v.FldValidators["log_receiver_choice.data_dog"]; exists {
			val := m.GetLogReceiverChoice().(*GlobalSpecType_DataDog).DataDog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("data_dog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Splunk:
		if fv, exists := v.FldValidators["log_receiver_choice.splunk"]; exists {
			val := m.GetLogReceiverChoice().(*GlobalSpecType_Splunk).Splunk
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("splunk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where_choice"]; exists {
		val := m.GetWhereChoice()
		vOpts := append(opts,
			db.WithValidateField("where_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWhereChoice().(type) {
	case *GlobalSpecType_SiteLocal:
		if fv, exists := v.FldValidators["where_choice.site_local"]; exists {
			val := m.GetWhereChoice().(*GlobalSpecType_SiteLocal).SiteLocal
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("site_local"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiverSites:
		if fv, exists := v.FldValidators["where_choice.log_receiver_sites"]; exists {
			val := m.GetWhereChoice().(*GlobalSpecType_LogReceiverSites).LogReceiverSites
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("log_receiver_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLogReceiverChoice := v.LogReceiverChoiceValidationRuleHandler
	rulesLogReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogReceiverChoice(rulesLogReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.log_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_receiver_choice"] = vFn

	vrhWhereChoice := v.WhereChoiceValidationRuleHandler
	rulesWhereChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWhereChoice(rulesWhereChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.where_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where_choice"] = vFn

	v.FldValidators["log_receiver_choice.syslog"] = SyslogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.data_dog"] = DataDogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.splunk"] = SplunkReceiverValidator().Validate

	v.FldValidators["where_choice.log_receiver_sites"] = WhereSitesValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HTTPServerConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HTTPServerConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HTTPServerConfigType) DeepCopy() *HTTPServerConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HTTPServerConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HTTPServerConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HTTPServerConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HTTPServerConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateHTTPServerConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHTTPServerConfigType) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateHTTPServerConfigType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateHTTPServerConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HTTPServerConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HTTPServerConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHTTPServerConfigTypeValidator = func() *ValidateHTTPServerConfigType {
	v := &ValidateHTTPServerConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPServerConfigType.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPServerConfigType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	return v
}()

func HTTPServerConfigTypeValidator() db.Validator {
	return DefaultHTTPServerConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *IPServerConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IPServerConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IPServerConfigType) DeepCopy() *IPServerConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IPServerConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IPServerConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IPServerConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IPServerConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateIPServerConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIPServerConfigType) IpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}

	return validatorFn, nil
}

func (v *ValidateIPServerConfigType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateIPServerConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IPServerConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IPServerConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip_address"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_address"))
		if err := fv(ctx, m.GetIpAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIPServerConfigTypeValidator = func() *ValidateIPServerConfigType {
	v := &ValidateIPServerConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpAddress := v.IpAddressValidationRuleHandler
	rulesIpAddress := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.ip":        "true",
	}
	vFn, err = vrhIpAddress(rulesIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IPServerConfigType.ip_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_address"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IPServerConfigType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	return v
}()

func IPServerConfigTypeValidator() db.Validator {
	return DefaultIPServerConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSyslog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.syslog")
	}

	if err := m.GetDataDog().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.data_dog")
	}

	if err := m.GetSplunk().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.splunk")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetWhereChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetWhereChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetWhereChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetWhereChoice().(type) {
	case *ReplaceSpecType_SiteLocal:

	case *ReplaceSpecType_LogReceiverSites:
		odrInfos, err = m.GetLogReceiverSites().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "log_receiver_sites." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) LogReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WhereChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for where_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["log_receiver_choice"]; exists {
		val := m.GetLogReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("log_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogReceiverChoice().(type) {
	case *ReplaceSpecType_Syslog:
		if fv, exists := v.FldValidators["log_receiver_choice.syslog"]; exists {
			val := m.GetLogReceiverChoice().(*ReplaceSpecType_Syslog).Syslog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("syslog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DataDog:
		if fv, exists := v.FldValidators["log_receiver_choice.data_dog"]; exists {
			val := m.GetLogReceiverChoice().(*ReplaceSpecType_DataDog).DataDog
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("data_dog"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Splunk:
		if fv, exists := v.FldValidators["log_receiver_choice.splunk"]; exists {
			val := m.GetLogReceiverChoice().(*ReplaceSpecType_Splunk).Splunk
			vOpts := append(opts,
				db.WithValidateField("log_receiver_choice"),
				db.WithValidateField("splunk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["where_choice"]; exists {
		val := m.GetWhereChoice()
		vOpts := append(opts,
			db.WithValidateField("where_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWhereChoice().(type) {
	case *ReplaceSpecType_SiteLocal:
		if fv, exists := v.FldValidators["where_choice.site_local"]; exists {
			val := m.GetWhereChoice().(*ReplaceSpecType_SiteLocal).SiteLocal
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("site_local"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiverSites:
		if fv, exists := v.FldValidators["where_choice.log_receiver_sites"]; exists {
			val := m.GetWhereChoice().(*ReplaceSpecType_LogReceiverSites).LogReceiverSites
			vOpts := append(opts,
				db.WithValidateField("where_choice"),
				db.WithValidateField("log_receiver_sites"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLogReceiverChoice := v.LogReceiverChoiceValidationRuleHandler
	rulesLogReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogReceiverChoice(rulesLogReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.log_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_receiver_choice"] = vFn

	vrhWhereChoice := v.WhereChoiceValidationRuleHandler
	rulesWhereChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWhereChoice(rulesWhereChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.where_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["where_choice"] = vFn

	v.FldValidators["log_receiver_choice.syslog"] = SyslogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.data_dog"] = DataDogReceiverValidator().Validate
	v.FldValidators["log_receiver_choice.splunk"] = SplunkReceiverValidator().Validate

	v.FldValidators["where_choice.log_receiver_sites"] = WhereSitesValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SplunkReceiver) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SplunkReceiver) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SplunkReceiver) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSplunkServerTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SplunkReceiver.splunk_server_tls")
	}

	if err := m.GetSplunkHecToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SplunkReceiver.splunk_hec_token")
	}

	return nil
}

func (m *SplunkReceiver) DeepCopy() *SplunkReceiver {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SplunkReceiver{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SplunkReceiver) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SplunkReceiver) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SplunkReceiverValidator().Validate(ctx, m, opts...)
}

type ValidateSplunkReceiver struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSplunkReceiver) ServerNameChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSplunkReceiver) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SplunkReceiver)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SplunkReceiver got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["server_name_choice"]; exists {
		val := m.GetServerNameChoice()
		vOpts := append(opts,
			db.WithValidateField("server_name_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerNameChoice().(type) {
	case *SplunkReceiver_SplunkServerName:
		if fv, exists := v.FldValidators["server_name_choice.splunk_server_name"]; exists {
			val := m.GetServerNameChoice().(*SplunkReceiver_SplunkServerName).SplunkServerName
			vOpts := append(opts,
				db.WithValidateField("server_name_choice"),
				db.WithValidateField("splunk_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SplunkReceiver_SplunkServerIp:
		if fv, exists := v.FldValidators["server_name_choice.splunk_server_ip"]; exists {
			val := m.GetServerNameChoice().(*SplunkReceiver_SplunkServerIp).SplunkServerIp
			vOpts := append(opts,
				db.WithValidateField("server_name_choice"),
				db.WithValidateField("splunk_server_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SplunkReceiver_SplunkServerTls:
		if fv, exists := v.FldValidators["server_name_choice.splunk_server_tls"]; exists {
			val := m.GetServerNameChoice().(*SplunkReceiver_SplunkServerTls).SplunkServerTls
			vOpts := append(opts,
				db.WithValidateField("server_name_choice"),
				db.WithValidateField("splunk_server_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["splunk_hec_token"]; exists {

		vOpts := append(opts, db.WithValidateField("splunk_hec_token"))
		if err := fv(ctx, m.GetSplunkHecToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSplunkReceiverValidator = func() *ValidateSplunkReceiver {
	v := &ValidateSplunkReceiver{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerNameChoice := v.ServerNameChoiceValidationRuleHandler
	rulesServerNameChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerNameChoice(rulesServerNameChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SplunkReceiver.server_name_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name_choice"] = vFn

	v.FldValidators["server_name_choice.splunk_server_name"] = HTTPServerConfigTypeValidator().Validate
	v.FldValidators["server_name_choice.splunk_server_ip"] = IPServerConfigTypeValidator().Validate
	v.FldValidators["server_name_choice.splunk_server_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["splunk_hec_token"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func SplunkReceiverValidator() db.Validator {
	return DefaultSplunkReceiverValidator
}

// augmented methods on protoc/std generated struct

func (m *SyslogReceiver) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SyslogReceiver) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SyslogReceiver) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTlsServer().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SyslogReceiver.tls_server")
	}

	return nil
}

func (m *SyslogReceiver) DeepCopy() *SyslogReceiver {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SyslogReceiver{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SyslogReceiver) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SyslogReceiver) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SyslogReceiverValidator().Validate(ctx, m, opts...)
}

type ValidateSyslogReceiver struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSyslogReceiver) FormatChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for format_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSyslogReceiver) FormatChoiceSyslogRfc5424ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SyslogRfc5424, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for syslog_rfc5424")
	}
	return oValidatorFn_SyslogRfc5424, nil
}
func (v *ValidateSyslogReceiver) FormatChoiceSyslogRfc3164ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SyslogRfc3164, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for syslog_rfc3164")
	}
	return oValidatorFn_SyslogRfc3164, nil
}

func (v *ValidateSyslogReceiver) ModeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mode_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSyslogReceiver) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SyslogReceiver)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SyslogReceiver got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["format_choice"]; exists {
		val := m.GetFormatChoice()
		vOpts := append(opts,
			db.WithValidateField("format_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFormatChoice().(type) {
	case *SyslogReceiver_SyslogRfc5424:
		if fv, exists := v.FldValidators["format_choice.syslog_rfc5424"]; exists {
			val := m.GetFormatChoice().(*SyslogReceiver_SyslogRfc5424).SyslogRfc5424
			vOpts := append(opts,
				db.WithValidateField("format_choice"),
				db.WithValidateField("syslog_rfc5424"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SyslogReceiver_SyslogRfc3164:
		if fv, exists := v.FldValidators["format_choice.syslog_rfc3164"]; exists {
			val := m.GetFormatChoice().(*SyslogReceiver_SyslogRfc3164).SyslogRfc3164
			vOpts := append(opts,
				db.WithValidateField("format_choice"),
				db.WithValidateField("syslog_rfc3164"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mode_choice"]; exists {
		val := m.GetModeChoice()
		vOpts := append(opts,
			db.WithValidateField("mode_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetModeChoice().(type) {
	case *SyslogReceiver_UdpServer:
		if fv, exists := v.FldValidators["mode_choice.udp_server"]; exists {
			val := m.GetModeChoice().(*SyslogReceiver_UdpServer).UdpServer
			vOpts := append(opts,
				db.WithValidateField("mode_choice"),
				db.WithValidateField("udp_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SyslogReceiver_TcpServer:
		if fv, exists := v.FldValidators["mode_choice.tcp_server"]; exists {
			val := m.GetModeChoice().(*SyslogReceiver_TcpServer).TcpServer
			vOpts := append(opts,
				db.WithValidateField("mode_choice"),
				db.WithValidateField("tcp_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SyslogReceiver_TlsServer:
		if fv, exists := v.FldValidators["mode_choice.tls_server"]; exists {
			val := m.GetModeChoice().(*SyslogReceiver_TlsServer).TlsServer
			vOpts := append(opts,
				db.WithValidateField("mode_choice"),
				db.WithValidateField("tls_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSyslogReceiverValidator = func() *ValidateSyslogReceiver {
	v := &ValidateSyslogReceiver{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFormatChoice := v.FormatChoiceValidationRuleHandler
	rulesFormatChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFormatChoice(rulesFormatChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SyslogReceiver.format_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["format_choice"] = vFn

	vrhFormatChoiceSyslogRfc5424 := v.FormatChoiceSyslogRfc5424ValidationRuleHandler
	rulesFormatChoiceSyslogRfc5424 := map[string]string{
		"ves.io.schema.rules.uint32.gte": "408",
		"ves.io.schema.rules.uint32.lte": "268435456",
	}
	vFnMap["format_choice.syslog_rfc5424"], err = vrhFormatChoiceSyslogRfc5424(rulesFormatChoiceSyslogRfc5424)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SyslogReceiver.format_choice_syslog_rfc5424: %s", err)
		panic(errMsg)
	}
	vrhFormatChoiceSyslogRfc3164 := v.FormatChoiceSyslogRfc3164ValidationRuleHandler
	rulesFormatChoiceSyslogRfc3164 := map[string]string{
		"ves.io.schema.rules.uint32.gte": "408",
		"ves.io.schema.rules.uint32.lte": "1024",
	}
	vFnMap["format_choice.syslog_rfc3164"], err = vrhFormatChoiceSyslogRfc3164(rulesFormatChoiceSyslogRfc3164)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SyslogReceiver.format_choice_syslog_rfc3164: %s", err)
		panic(errMsg)
	}

	v.FldValidators["format_choice.syslog_rfc5424"] = vFnMap["format_choice.syslog_rfc5424"]
	v.FldValidators["format_choice.syslog_rfc3164"] = vFnMap["format_choice.syslog_rfc3164"]

	vrhModeChoice := v.ModeChoiceValidationRuleHandler
	rulesModeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhModeChoice(rulesModeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SyslogReceiver.mode_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mode_choice"] = vFn

	v.FldValidators["mode_choice.udp_server"] = UDPServerConfigTypeValidator().Validate
	v.FldValidators["mode_choice.tcp_server"] = TCPServerConfigTypeValidator().Validate
	v.FldValidators["mode_choice.tls_server"] = TLSConfigTypeValidator().Validate

	return v
}()

func SyslogReceiverValidator() db.Validator {
	return DefaultSyslogReceiverValidator
}

// augmented methods on protoc/std generated struct

func (m *TCPServerConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TCPServerConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TCPServerConfigType) DeepCopy() *TCPServerConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TCPServerConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TCPServerConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TCPServerConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TCPServerConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateTCPServerConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTCPServerConfigType) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateTCPServerConfigType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateTCPServerConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TCPServerConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TCPServerConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTCPServerConfigTypeValidator = func() *ValidateTCPServerConfigType {
	v := &ValidateTCPServerConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.hostname_or_ip": "true",
		"ves.io.schema.rules.string.max_len":        "256",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TCPServerConfigType.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TCPServerConfigType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	return v
}()

func TCPServerConfigTypeValidator() db.Validator {
	return DefaultTCPServerConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TLSClientConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TLSClientConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *TLSClientConfigType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetKeyUrl().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting TLSClientConfigType.key_url")
	}

	return nil
}

func (m *TLSClientConfigType) DeepCopy() *TLSClientConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TLSClientConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TLSClientConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TLSClientConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TLSClientConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateTLSClientConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTLSClientConfigType) CertificateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for certificate")
	}

	return validatorFn, nil
}

func (v *ValidateTLSClientConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TLSClientConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TLSClientConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate"))
		if err := fv(ctx, m.GetCertificate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["key_url"]; exists {

		vOpts := append(opts, db.WithValidateField("key_url"))
		if err := fv(ctx, m.GetKeyUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTLSClientConfigTypeValidator = func() *ValidateTLSClientConfigType {
	v := &ValidateTLSClientConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificate := v.CertificateValidationRuleHandler
	rulesCertificate := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "131072",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhCertificate(rulesCertificate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSClientConfigType.certificate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate"] = vFn

	v.FldValidators["key_url"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func TLSClientConfigTypeValidator() db.Validator {
	return DefaultTLSClientConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TLSConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TLSConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *TLSConfigType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetMtlsEnable().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting TLSConfigType.mtls_enable")
	}

	return nil
}

func (m *TLSConfigType) DeepCopy() *TLSConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TLSConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TLSConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TLSConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TLSConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateTLSConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTLSConfigType) CaChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ca_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfigType) CaChoiceTrustedCaUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TrustedCaUrl, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trusted_ca_url")
	}
	return oValidatorFn_TrustedCaUrl, nil
}

func (v *ValidateTLSConfigType) MtlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfigType) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfigType) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}

func (v *ValidateTLSConfigType) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateTLSConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TLSConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TLSConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ca_choice"]; exists {
		val := m.GetCaChoice()
		vOpts := append(opts,
			db.WithValidateField("ca_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCaChoice().(type) {
	case *TLSConfigType_VolterraCa:
		if fv, exists := v.FldValidators["ca_choice.volterra_ca"]; exists {
			val := m.GetCaChoice().(*TLSConfigType_VolterraCa).VolterraCa
			vOpts := append(opts,
				db.WithValidateField("ca_choice"),
				db.WithValidateField("volterra_ca"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_TrustedCaUrl:
		if fv, exists := v.FldValidators["ca_choice.trusted_ca_url"]; exists {
			val := m.GetCaChoice().(*TLSConfigType_TrustedCaUrl).TrustedCaUrl
			vOpts := append(opts,
				db.WithValidateField("ca_choice"),
				db.WithValidateField("trusted_ca_url"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mtls_choice"]; exists {
		val := m.GetMtlsChoice()
		vOpts := append(opts,
			db.WithValidateField("mtls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMtlsChoice().(type) {
	case *TLSConfigType_MtlsDisabled:
		if fv, exists := v.FldValidators["mtls_choice.mtls_disabled"]; exists {
			val := m.GetMtlsChoice().(*TLSConfigType_MtlsDisabled).MtlsDisabled
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("mtls_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_MtlsEnable:
		if fv, exists := v.FldValidators["mtls_choice.mtls_enable"]; exists {
			val := m.GetMtlsChoice().(*TLSConfigType_MtlsEnable).MtlsEnable
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("mtls_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *TLSConfigType_DefaultSyslogTlsPort:
		if fv, exists := v.FldValidators["port_choice.default_syslog_tls_port"]; exists {
			val := m.GetPortChoice().(*TLSConfigType_DefaultSyslogTlsPort).DefaultSyslogTlsPort
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("default_syslog_tls_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_DefaultHttpsPort:
		if fv, exists := v.FldValidators["port_choice.default_https_port"]; exists {
			val := m.GetPortChoice().(*TLSConfigType_DefaultHttpsPort).DefaultHttpsPort
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("default_https_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*TLSConfigType_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTLSConfigTypeValidator = func() *ValidateTLSConfigType {
	v := &ValidateTLSConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCaChoice := v.CaChoiceValidationRuleHandler
	rulesCaChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCaChoice(rulesCaChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfigType.ca_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ca_choice"] = vFn

	vrhCaChoiceTrustedCaUrl := v.CaChoiceTrustedCaUrlValidationRuleHandler
	rulesCaChoiceTrustedCaUrl := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "131072",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFnMap["ca_choice.trusted_ca_url"], err = vrhCaChoiceTrustedCaUrl(rulesCaChoiceTrustedCaUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TLSConfigType.ca_choice_trusted_ca_url: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ca_choice.trusted_ca_url"] = vFnMap["ca_choice.trusted_ca_url"]

	vrhMtlsChoice := v.MtlsChoiceValidationRuleHandler
	rulesMtlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMtlsChoice(rulesMtlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfigType.mtls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtls_choice"] = vFn

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfigType.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TLSConfigType.port_choice_port: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfigType.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	v.FldValidators["mtls_choice.mtls_enable"] = TLSClientConfigTypeValidator().Validate

	return v
}()

func TLSConfigTypeValidator() db.Validator {
	return DefaultTLSConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *UDPServerConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UDPServerConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UDPServerConfigType) DeepCopy() *UDPServerConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UDPServerConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UDPServerConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UDPServerConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UDPServerConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateUDPServerConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUDPServerConfigType) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateUDPServerConfigType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateUDPServerConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UDPServerConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UDPServerConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUDPServerConfigTypeValidator = func() *ValidateUDPServerConfigType {
	v := &ValidateUDPServerConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.message.required":      "true",
		"ves.io.schema.rules.string.hostname_or_ip": "true",
		"ves.io.schema.rules.string.max_len":        "256",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UDPServerConfigType.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UDPServerConfigType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	return v
}()

func UDPServerConfigTypeValidator() db.Validator {
	return DefaultUDPServerConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *WhereSites) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WhereSites) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WhereSites) DeepCopy() *WhereSites {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WhereSites{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WhereSites) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WhereSites) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WhereSitesValidator().Validate(ctx, m, opts...)
}

func (m *WhereSites) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetSiteDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *WhereSites) GetSiteDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetSite() {
		if vref == nil {
			return nil, fmt.Errorf("WhereSites.site[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("site.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "site",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *WhereSites) GetSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}
	for i, vref := range m.GetSite() {
		if vref == nil {
			return nil, fmt.Errorf("WhereSites.site[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "site.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateWhereSites struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWhereSites) NetworkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_views.SiteNetwork)
		return int32(i)
	}
	// ves_io_schema_views.SiteNetwork_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_views.SiteNetwork_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network")
	}

	return validatorFn, nil
}

func (v *ValidateWhereSites) SiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for site")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated site")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items site")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateWhereSites) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WhereSites)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WhereSites got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network"]; exists {

		vOpts := append(opts, db.WithValidateField("network"))
		if err := fv(ctx, m.GetNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {
		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWhereSitesValidator = func() *ValidateWhereSites {
	v := &ValidateWhereSites{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetwork := v.NetworkValidationRuleHandler
	rulesNetwork := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetwork(rulesNetwork)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for WhereSites.network: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network"] = vFn

	vrhSite := v.SiteValidationRuleHandler
	rulesSite := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "2",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhSite(rulesSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for WhereSites.site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site"] = vFn

	return v
}()

func WhereSitesValidator() db.Validator {
	return DefaultWhereSitesValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogReceiverChoice.(type) {
	case nil:
		o.LogReceiverChoice = nil

	case *CreateSpecType_DataDog:
		o.LogReceiverChoice = &GlobalSpecType_DataDog{DataDog: of.DataDog}

	case *CreateSpecType_Splunk:
		o.LogReceiverChoice = &GlobalSpecType_Splunk{Splunk: of.Splunk}

	case *CreateSpecType_Syslog:
		o.LogReceiverChoice = &GlobalSpecType_Syslog{Syslog: of.Syslog}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogReceiverChoice.(type) {
	case nil:
		r.LogReceiverChoice = nil

	case *GlobalSpecType_DataDog:
		r.LogReceiverChoice = &CreateSpecType_DataDog{DataDog: of.DataDog}

	case *GlobalSpecType_Splunk:
		r.LogReceiverChoice = &CreateSpecType_Splunk{Splunk: of.Splunk}

	case *GlobalSpecType_Syslog:
		r.LogReceiverChoice = &CreateSpecType_Syslog{Syslog: of.Syslog}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetWhereChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WhereChoice.(type) {
	case nil:
		o.WhereChoice = nil

	case *CreateSpecType_LogReceiverSites:
		o.WhereChoice = &GlobalSpecType_LogReceiverSites{LogReceiverSites: of.LogReceiverSites}

	case *CreateSpecType_SiteLocal:
		o.WhereChoice = &GlobalSpecType_SiteLocal{SiteLocal: of.SiteLocal}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetWhereChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WhereChoice.(type) {
	case nil:
		r.WhereChoice = nil

	case *GlobalSpecType_LogReceiverSites:
		r.WhereChoice = &CreateSpecType_LogReceiverSites{LogReceiverSites: of.LogReceiverSites}

	case *GlobalSpecType_SiteLocal:
		r.WhereChoice = &CreateSpecType_SiteLocal{SiteLocal: of.SiteLocal}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetLogReceiverChoiceFromGlobalSpecType(f)
	m.GetWhereChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetLogReceiverChoiceToGlobalSpecType(f)
	m1.SetWhereChoiceToGlobalSpecType(f)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogReceiverChoice.(type) {
	case nil:
		o.LogReceiverChoice = nil

	case *GetSpecType_DataDog:
		o.LogReceiverChoice = &GlobalSpecType_DataDog{DataDog: of.DataDog}

	case *GetSpecType_Splunk:
		o.LogReceiverChoice = &GlobalSpecType_Splunk{Splunk: of.Splunk}

	case *GetSpecType_Syslog:
		o.LogReceiverChoice = &GlobalSpecType_Syslog{Syslog: of.Syslog}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogReceiverChoice.(type) {
	case nil:
		r.LogReceiverChoice = nil

	case *GlobalSpecType_DataDog:
		r.LogReceiverChoice = &GetSpecType_DataDog{DataDog: of.DataDog}

	case *GlobalSpecType_Splunk:
		r.LogReceiverChoice = &GetSpecType_Splunk{Splunk: of.Splunk}

	case *GlobalSpecType_Syslog:
		r.LogReceiverChoice = &GetSpecType_Syslog{Syslog: of.Syslog}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetWhereChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WhereChoice.(type) {
	case nil:
		o.WhereChoice = nil

	case *GetSpecType_LogReceiverSites:
		o.WhereChoice = &GlobalSpecType_LogReceiverSites{LogReceiverSites: of.LogReceiverSites}

	case *GetSpecType_SiteLocal:
		o.WhereChoice = &GlobalSpecType_SiteLocal{SiteLocal: of.SiteLocal}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetWhereChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WhereChoice.(type) {
	case nil:
		r.WhereChoice = nil

	case *GlobalSpecType_LogReceiverSites:
		r.WhereChoice = &GetSpecType_LogReceiverSites{LogReceiverSites: of.LogReceiverSites}

	case *GlobalSpecType_SiteLocal:
		r.WhereChoice = &GetSpecType_SiteLocal{SiteLocal: of.SiteLocal}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetLogReceiverChoiceFromGlobalSpecType(f)
	m.GetWhereChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetLogReceiverChoiceToGlobalSpecType(f)
	m1.SetWhereChoiceToGlobalSpecType(f)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogReceiverChoice.(type) {
	case nil:
		o.LogReceiverChoice = nil

	case *ReplaceSpecType_DataDog:
		o.LogReceiverChoice = &GlobalSpecType_DataDog{DataDog: of.DataDog}

	case *ReplaceSpecType_Splunk:
		o.LogReceiverChoice = &GlobalSpecType_Splunk{Splunk: of.Splunk}

	case *ReplaceSpecType_Syslog:
		o.LogReceiverChoice = &GlobalSpecType_Syslog{Syslog: of.Syslog}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogReceiverChoice.(type) {
	case nil:
		r.LogReceiverChoice = nil

	case *GlobalSpecType_DataDog:
		r.LogReceiverChoice = &ReplaceSpecType_DataDog{DataDog: of.DataDog}

	case *GlobalSpecType_Splunk:
		r.LogReceiverChoice = &ReplaceSpecType_Splunk{Splunk: of.Splunk}

	case *GlobalSpecType_Syslog:
		r.LogReceiverChoice = &ReplaceSpecType_Syslog{Syslog: of.Syslog}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetWhereChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WhereChoice.(type) {
	case nil:
		o.WhereChoice = nil

	case *ReplaceSpecType_LogReceiverSites:
		o.WhereChoice = &GlobalSpecType_LogReceiverSites{LogReceiverSites: of.LogReceiverSites}

	case *ReplaceSpecType_SiteLocal:
		o.WhereChoice = &GlobalSpecType_SiteLocal{SiteLocal: of.SiteLocal}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetWhereChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WhereChoice.(type) {
	case nil:
		r.WhereChoice = nil

	case *GlobalSpecType_LogReceiverSites:
		r.WhereChoice = &ReplaceSpecType_LogReceiverSites{LogReceiverSites: of.LogReceiverSites}

	case *GlobalSpecType_SiteLocal:
		r.WhereChoice = &ReplaceSpecType_SiteLocal{SiteLocal: of.SiteLocal}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetLogReceiverChoiceFromGlobalSpecType(f)
	m.GetWhereChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetLogReceiverChoiceToGlobalSpecType(f)
	m1.SetWhereChoiceToGlobalSpecType(f)
}

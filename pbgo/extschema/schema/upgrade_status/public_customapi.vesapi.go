// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package upgrade_status

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create UpgradeStatusCustomApi GRPC Client satisfying server.CustomClient
type UpgradeStatusCustomApiGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient UpgradeStatusCustomApiClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *UpgradeStatusCustomApiGrpcClient) doRPCGetUpgradableSWVersions(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetUpgradableSWVersionsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.upgrade_status.GetUpgradableSWVersionsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetUpgradableSWVersions(ctx, req, opts...)
	return rsp, err
}

func (c *UpgradeStatusCustomApiGrpcClient) doRPCGetUpgradeStatus(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetUpgradeStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.upgrade_status.GetUpgradeStatusRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetUpgradeStatus(ctx, req, opts...)
	return rsp, err
}

func (c *UpgradeStatusCustomApiGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewUpgradeStatusCustomApiGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &UpgradeStatusCustomApiGrpcClient{
		conn:       cc,
		grpcClient: NewUpgradeStatusCustomApiClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["GetUpgradableSWVersions"] = ccl.doRPCGetUpgradableSWVersions

	rpcFns["GetUpgradeStatus"] = ccl.doRPCGetUpgradeStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create UpgradeStatusCustomApi REST Client satisfying server.CustomClient
type UpgradeStatusCustomApiRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *UpgradeStatusCustomApiRestClient) doRPCGetUpgradableSWVersions(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetUpgradableSWVersionsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.upgrade_status.GetUpgradableSWVersionsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("current_os_version", fmt.Sprintf("%v", req.CurrentOsVersion))
		q.Add("current_sw_version", fmt.Sprintf("%v", req.CurrentSwVersion))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetUpgradableSWVersionsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.upgrade_status.GetUpgradableSWVersionsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *UpgradeStatusCustomApiRestClient) doRPCGetUpgradeStatus(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetUpgradeStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.upgrade_status.GetUpgradeStatusRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetUpgradeStatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.upgrade_status.GetUpgradeStatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *UpgradeStatusCustomApiRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewUpgradeStatusCustomApiRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &UpgradeStatusCustomApiRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["GetUpgradableSWVersions"] = ccl.doRPCGetUpgradableSWVersions

	rpcFns["GetUpgradeStatus"] = ccl.doRPCGetUpgradeStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create upgradeStatusCustomApiInprocClient

// INPROC Client (satisfying UpgradeStatusCustomApiClient interface)
type upgradeStatusCustomApiInprocClient struct {
	UpgradeStatusCustomApiServer
}

func (c *upgradeStatusCustomApiInprocClient) GetUpgradableSWVersions(ctx context.Context, in *GetUpgradableSWVersionsRequest, opts ...grpc.CallOption) (*GetUpgradableSWVersionsResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradableSWVersions")
	return c.UpgradeStatusCustomApiServer.GetUpgradableSWVersions(ctx, in)
}
func (c *upgradeStatusCustomApiInprocClient) GetUpgradeStatus(ctx context.Context, in *GetUpgradeStatusRequest, opts ...grpc.CallOption) (*GetUpgradeStatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradeStatus")
	return c.UpgradeStatusCustomApiServer.GetUpgradeStatus(ctx, in)
}

func NewUpgradeStatusCustomApiInprocClient(svc svcfw.Service) UpgradeStatusCustomApiClient {
	return &upgradeStatusCustomApiInprocClient{UpgradeStatusCustomApiServer: NewUpgradeStatusCustomApiServer(svc)}
}

// RegisterGwUpgradeStatusCustomApiHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwUpgradeStatusCustomApiHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterUpgradeStatusCustomApiHandlerClient(ctx, mux, NewUpgradeStatusCustomApiInprocClient(s))
}

// Create upgradeStatusCustomApiSrv

// SERVER (satisfying UpgradeStatusCustomApiServer interface)
type upgradeStatusCustomApiSrv struct {
	svc svcfw.Service
}

func (s *upgradeStatusCustomApiSrv) GetUpgradableSWVersions(ctx context.Context, in *GetUpgradableSWVersionsRequest) (*GetUpgradableSWVersionsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.upgrade_status.UpgradeStatusCustomApi")
	cah, ok := ah.(UpgradeStatusCustomApiServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *UpgradeStatusCustomApiServer", ah)
	}

	var (
		rsp *GetUpgradableSWVersionsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.upgrade_status.GetUpgradableSWVersionsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'UpgradeStatusCustomApi.GetUpgradableSWVersions' operation on 'upgrade_status'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradableSWVersions"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetUpgradableSWVersions(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.upgrade_status.GetUpgradableSWVersionsResponse", rsp)...)

	return rsp, nil
}
func (s *upgradeStatusCustomApiSrv) GetUpgradeStatus(ctx context.Context, in *GetUpgradeStatusRequest) (*GetUpgradeStatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.upgrade_status.UpgradeStatusCustomApi")
	cah, ok := ah.(UpgradeStatusCustomApiServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *UpgradeStatusCustomApiServer", ah)
	}

	var (
		rsp *GetUpgradeStatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.upgrade_status.GetUpgradeStatusRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'UpgradeStatusCustomApi.GetUpgradeStatus' operation on 'upgrade_status'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradeStatus"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetUpgradeStatus(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.upgrade_status.GetUpgradeStatusResponse", rsp)...)

	return rsp, nil
}

func NewUpgradeStatusCustomApiServer(svc svcfw.Service) UpgradeStatusCustomApiServer {
	return &upgradeStatusCustomApiSrv{svc: svc}
}

var UpgradeStatusCustomApiSwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Upgrade status related Custom APIs",
        "description": "Upgrade status custom APIs",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/sites/{name}/upgrade_status": {
            "get": {
                "summary": "Get Upgrade Status",
                "description": "API to get upgrade status of a site",
                "operationId": "ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradeStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/upgrade_statusGetUpgradeStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"shared\"\nFetch upgrade status for the given namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"blogging-app\"\nFetch upgrade status for the name of site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site Name"
                    }
                ],
                "tags": [
                    "UpgradeStatusCustomApi"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-upgrade_status-upgradestatuscustomapi-getupgradestatus"
                },
                "x-ves-proto-rpc": "ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradeStatus"
            },
            "x-displayname": "Upgrade Status Custom API",
            "x-ves-proto-service": "ves.io.schema.upgrade_status.UpgradeStatusCustomApi",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/upgradable_sw_versions": {
            "get": {
                "summary": "Get Upgradable SW Versions",
                "description": "API to get list of sw versions that can be upgraded to",
                "operationId": "ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradableSWVersions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/upgrade_statusGetUpgradableSWVersionsResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "current_os_version",
                        "description": "x-example: \"9.2023.23\"\nFetch upgradable sw versions for site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Current OS Version"
                    },
                    {
                        "name": "current_sw_version",
                        "description": "x-example: \"crt-20241107-1123\"\nFetch upgradable sw versions for site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Current SW Version"
                    }
                ],
                "tags": [
                    "UpgradeStatusCustomApi"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-upgrade_status-upgradestatuscustomapi-getupgradableswversions"
                },
                "x-ves-proto-rpc": "ves.io.schema.upgrade_status.UpgradeStatusCustomApi.GetUpgradableSWVersions"
            },
            "x-displayname": "Upgrade Status Custom API",
            "x-ves-proto-service": "ves.io.schema.upgrade_status.UpgradeStatusCustomApi",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "schemaupgrade_statusGlobalSpecType": {
            "type": "object",
            "title": "Shape of the status specification",
            "x-displayname": "Global Specification",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.GlobalSpecType",
            "properties": {
                "sw_upgrade_progress": {
                    "description": " Infrastructure metadata section\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Software Upgrade Progress",
                    "$ref": "#/definitions/upgrade_statusSWUpgradeProgress",
                    "x-displayname": "Software Upgrade Progress",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "upgrade_statusApplicationObj": {
            "type": "object",
            "description": "ApplicationObj shows the upgrade status of each object in a application in either site/node level upgrades",
            "title": "ApplicationObj",
            "x-displayname": "Application Object",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.ApplicationObj",
            "properties": {
                "conditions": {
                    "type": "array",
                    "title": "x-displayName: \"Conditions\"\nname of object",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusCondition"
                    }
                },
                "debug": {
                    "type": "string",
                    "title": "x-displayName: \"Name\"\ndebug? TODO: What is this, reference maurice deployment status object"
                },
                "deploy_strategy": {
                    "type": "string",
                    "title": "x-displayName: \"Deploy Strategy\"\nDeployment strategy of object"
                },
                "kind": {
                    "type": "string",
                    "title": "x-displayName: \"Kind\"\nKubernetes object kind"
                },
                "name": {
                    "type": "string",
                    "title": "x-displayName: \"Name\"\nname of object"
                }
            }
        },
        "upgrade_statusCondition": {
            "type": "object",
            "description": "Condition of object in each phase of installation",
            "title": "Condition",
            "x-displayname": "Condition",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.Condition",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Message of action."
                },
                "result": {
                    "type": "string",
                    "description": "Result of action, i.e. success etc."
                },
                "type": {
                    "type": "string",
                    "title": "x-displayName: \"Type\"\nType of action to was applied with object, i.e. load, apply, running, status"
                }
            }
        },
        "upgrade_statusGetUpgradableSWVersionsResponse": {
            "type": "object",
            "description": "Response to get the list of upgradable sw versions",
            "title": "GetUpgradableSWVersionsResponse",
            "x-displayname": "Get upgradable sw versions reponse",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.GetUpgradableSWVersionsResponse",
            "properties": {
                "sw_versions": {
                    "type": "array",
                    "description": " Fetch upgradable sw versions for site\n\nExample: - \"[\\\"crt-20241107-1123\\\"]\"-",
                    "title": "sw_versions",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "SW Versions",
                    "x-ves-example": "[\\\"crt-20241107-1123\\\"]"
                }
            }
        },
        "upgrade_statusGetUpgradeStatusResponse": {
            "type": "object",
            "description": "Response to get the upgrade status",
            "title": "GetUpgradeStatusResponse",
            "x-displayname": "Get upgrade status response",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.GetUpgradeStatusResponse",
            "properties": {
                "upgrade_status": {
                    "description": " Upgrade Status",
                    "title": "released_signatures",
                    "$ref": "#/definitions/schemaupgrade_statusGlobalSpecType",
                    "x-displayname": "Upgrade status"
                }
            }
        },
        "upgrade_statusImageDownload": {
            "type": "object",
            "description": "ImageDownload shows each the entire image download stage.",
            "title": "ImageDownload",
            "x-displayname": "Image Download Stage",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.ImageDownload",
            "properties": {
                "results": {
                    "type": "array",
                    "description": "Results of each node in OS Setup.",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusInstallResult"
                    }
                },
                "start_timestamp": {
                    "type": "string",
                    "description": "Start timestamp of Image download.",
                    "format": "date-time"
                },
                "status": {
                    "title": "x-displayName: \"Upgrade Status\"\nStatus of upgrade for this entire OS setup stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusInstallResult": {
            "type": "object",
            "description": "InstallResult shows the result each application/process.",
            "title": "Install Result",
            "x-displayname": "Install Result",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.InstallResult",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Message of this stage."
                },
                "name": {
                    "type": "string",
                    "title": "x-displayName: \"Name\"\nName of this application/process"
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade of this node",
                    "$ref": "#/definitions/upgrade_statusStatus"
                },
                "type": {
                    "type": "string",
                    "title": "x-displayName: \"Type\"\nType of upgrade"
                }
            }
        },
        "upgrade_statusNodeLevelUpgrade": {
            "type": "object",
            "description": "Node level upgrade shows the upgrades that are happening on a site level as opposed to site level.",
            "title": "Node Level Upgrade",
            "x-displayname": "Node Level Upgrade Stage",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.NodeLevelUpgrade",
            "properties": {
                "results": {
                    "type": "array",
                    "title": "x-displayName: \"Results\"\nResults for each stage in site level upgrades",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusNodeUpgradeResult"
                    }
                },
                "start_timestamp": {
                    "type": "string",
                    "description": "Start timestamp of Image download.",
                    "format": "date-time"
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade for this entire node level upgrade stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusNodeUpgradeResult": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.NodeUpgradeResult",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of node."
                },
                "progress": {
                    "description": "Start timestamp of Image download.",
                    "$ref": "#/definitions/upgrade_statusUpgradeProgressCount"
                },
                "results": {
                    "type": "array",
                    "title": "x-displayName: \"Results\"\nResults for each node in node level upgrades",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusStageUpgradeResults"
                    }
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade for this entire node level upgrade stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusOSNodeResult": {
            "type": "object",
            "description": "OSNodeResult shows the result of OS upgrade for each node",
            "title": "OSNodeResult",
            "x-displayname": "OS Node Result",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.OSNodeResult",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of node."
                },
                "results": {
                    "type": "array",
                    "description": "Result of each component in each node.",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusInstallResult"
                    }
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade of this node",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusOSSetup": {
            "type": "object",
            "description": "OSSetup shows the OS Setup stage.",
            "title": "OSSetup",
            "x-displayname": "OS Setup Stage",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.OSSetup",
            "properties": {
                "results": {
                    "type": "array",
                    "description": "Results of each node in OS Setup.",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusOSNodeResult"
                    }
                },
                "start_timestamp": {
                    "type": "string",
                    "description": "Start timestamp of OS setup.",
                    "format": "date-time"
                },
                "status": {
                    "title": "x-displayName: \"Upgrade Status\"\nStatus of upgrade for this entire OS setup stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusSWUpgradeProgress": {
            "type": "object",
            "description": "SWStatus stores information about CE Site upgrade status",
            "title": "SW Upgrade status information",
            "x-displayname": "Software Upgrade Status Information",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.SWUpgradeProgress",
            "properties": {
                "failure_reason": {
                    "type": "string",
                    "description": "Reason for failure."
                },
                "image_download": {
                    "description": "Second stage of SW upgrade, image download.",
                    "$ref": "#/definitions/upgrade_statusImageDownload"
                },
                "node_level_upgrade": {
                    "description": "Forth stage of SW upgrade, node level upgrades.",
                    "$ref": "#/definitions/upgrade_statusNodeLevelUpgrade"
                },
                "os_setup": {
                    "description": "First stage of SW upgrade, OS setup.",
                    "$ref": "#/definitions/upgrade_statusOSSetup"
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries that has been issued.",
                    "format": "int32"
                },
                "site": {
                    "type": "string",
                    "description": "Site for this upgrade status, assigned after status is assigned to site."
                },
                "site_level_upgrade": {
                    "description": "Third stage of SW upgrade, site level upgrades.",
                    "$ref": "#/definitions/upgrade_statusSiteLevelUpgrade"
                },
                "status": {
                    "description": "Status of upgrade for this entire upgrade progress.",
                    "$ref": "#/definitions/upgrade_statusStatus"
                },
                "validation": {
                    "description": "Validation stage of SW upgrade, validation of upgrades.",
                    "$ref": "#/definitions/upgrade_statusValidation"
                },
                "version": {
                    "type": "string",
                    "description": "Version that software is upgrading to."
                }
            }
        },
        "upgrade_statusSiteLevelUpgrade": {
            "type": "object",
            "description": "Site level upgrade shows the upgrades that are happening on a site level as opposed to node level.",
            "title": "Site Level Upgrade",
            "x-displayname": "Site Level Upgrade Stage",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.SiteLevelUpgrade",
            "properties": {
                "progress": {
                    "description": "Start timestamp of Image download.",
                    "$ref": "#/definitions/upgrade_statusUpgradeProgressCount"
                },
                "results": {
                    "type": "array",
                    "title": "x-displayName: \"Results\"\nResults for each stage in site level upgrades",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusStageUpgradeResults"
                    }
                },
                "start_timestamp": {
                    "type": "string",
                    "description": "Start timestamp of Image download.",
                    "format": "date-time"
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade for this entire site level upgrade stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusStageApplication": {
            "type": "object",
            "description": "StageApplication shows the upgrade status of each application in either site/node level upgrades",
            "title": "StageApplication",
            "x-displayname": "Stage Application",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.StageApplication",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of stage."
                },
                "objects": {
                    "type": "array",
                    "title": "x-displayName: \"objects\"\nStatus of application objects in each application",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusApplicationObj"
                    }
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade of this stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusStageUpgradeResults": {
            "type": "object",
            "description": "SiteLevelStageUpgradeResults shows the upgrade status of each stage and applications within the stage",
            "title": "SiteLevelStageUpgradeResults",
            "x-displayname": "Site Level Stage Upgrade Results",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.StageUpgradeResults",
            "properties": {
                "applications": {
                    "type": "array",
                    "title": "x-displayName: \"Applications\"\nStatus of application objects in each application",
                    "items": {
                        "$ref": "#/definitions/upgrade_statusStageApplication"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of stage."
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade of this stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        },
        "upgrade_statusStatus": {
            "type": "string",
            "description": "Displays upgrade status for each section of the upgrade.\n\nUpgrade is scheduled but not started\nUpgrade is scheduled but not started\nUpgrade is in progress\nUpgrade has completed\nUpgrade has failed.\nUpgrade for this stage is skipped.",
            "title": "Upgrade status types",
            "enum": [
                "UNKNOWN",
                "SCHEDULED",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "SKIPPED"
            ],
            "default": "UNKNOWN",
            "x-displayname": "Upgrade Status",
            "x-ves-proto-enum": "ves.io.schema.upgrade_status.Status"
        },
        "upgrade_statusUpgradeProgressCount": {
            "type": "object",
            "description": "UpgradeProgressCount counts the total and completed apps that have been upgraded.",
            "title": "UpgradeProgressCount",
            "x-displayname": "Upgrade progress count",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.UpgradeProgressCount",
            "properties": {
                "completed": {
                    "type": "integer",
                    "description": "Number of apps that have been upgraded within a level.",
                    "format": "int32"
                },
                "total": {
                    "type": "integer",
                    "description": "Total number of apps to upgrade.",
                    "format": "int32"
                }
            }
        },
        "upgrade_statusValidation": {
            "type": "object",
            "description": "Validation represents the last stage in the upgrade phase, checking if everything has been upgraded properly.",
            "title": "Validation",
            "x-displayname": "Validation stage",
            "x-ves-proto-message": "ves.io.schema.upgrade_status.Validation",
            "properties": {
                "results": {
                    "type": "array",
                    "description": "String of messages from validation stage.",
                    "items": {
                        "type": "string"
                    }
                },
                "start_timestamp": {
                    "type": "string",
                    "description": "Start timestamp of Image download.",
                    "format": "date-time"
                },
                "status": {
                    "title": "x-displayName: \"Status\"\nStatus of upgrade for this entire node level upgrade stage",
                    "$ref": "#/definitions/upgrade_statusStatus"
                }
            }
        }
    },
    "x-displayname": "Upgrade Status",
    "x-ves-proto-file": "ves.io/schema/upgrade_status/public_customapi.proto"
}`

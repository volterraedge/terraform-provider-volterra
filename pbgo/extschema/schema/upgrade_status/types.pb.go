// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/upgrade_status/types.proto

package upgrade_status

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Upgrade status types
//
// x-displayName: "Upgrade Status"
// Displays upgrade status for each section of the upgrade.
type Status int32

const (
	// x-displayName: "Unknown"
	// Upgrade is scheduled but not started
	UNKNOWN Status = 0
	// x-displayName: "Scheduled"
	// Upgrade is scheduled but not started
	SCHEDULED Status = 1
	// x-displayName: "In Progress"
	// Upgrade is in progress
	IN_PROGRESS Status = 2
	// x-displayName: "Completed"
	// Upgrade has completed
	COMPLETED Status = 3
	// x-displayName: "Failed"
	// Upgrade has failed.
	FAILED Status = 4
	// x-displayName: "Skipped"
	// Upgrade for this stage is skipped.
	SKIPPED Status = 5
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SCHEDULED",
	2: "IN_PROGRESS",
	3: "COMPLETED",
	4: "FAILED",
	5: "SKIPPED",
}

var Status_value = map[string]int32{
	"UNKNOWN":     0,
	"SCHEDULED":   1,
	"IN_PROGRESS": 2,
	"COMPLETED":   3,
	"FAILED":      4,
	"SKIPPED":     5,
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{0}
}

// SW Upgrade status information
//
// x-displayName: "Software Upgrade Status Information"
// SWStatus stores information about CE Site upgrade status
type SWUpgradeProgress struct {
	// x-displayName: "Status"
	// Status of upgrade for this entire upgrade progress.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Version"
	// Version that software is upgrading to.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// x-displayName: "Retries"
	// Number of retries that has been issued.
	Retries int32 `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
	// x-displayName: "Failure Reason"
	// Reason for failure.
	FailureReason string `protobuf:"bytes,4,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// x-displayName: "OS Setup"
	// First stage of SW upgrade, OS setup.
	OsSetup *OSSetup `protobuf:"bytes,5,opt,name=os_setup,json=osSetup,proto3" json:"os_setup,omitempty"`
	// x-displayName: "Image Download"
	// Second stage of SW upgrade, image download.
	ImageDownload *ImageDownload `protobuf:"bytes,6,opt,name=image_download,json=imageDownload,proto3" json:"image_download,omitempty"`
	// x-displayName: "Site Level Upgrade"
	// Third stage of SW upgrade, site level upgrades.
	SiteLevelUpgrade *SiteLevelUpgrade `protobuf:"bytes,7,opt,name=site_level_upgrade,json=siteLevelUpgrade,proto3" json:"site_level_upgrade,omitempty"`
	// x-displayName: "Node Level Upgrade"
	// Forth stage of SW upgrade, node level upgrades.
	NodeLevelUpgrade *NodeLevelUpgrade `protobuf:"bytes,8,opt,name=node_level_upgrade,json=nodeLevelUpgrade,proto3" json:"node_level_upgrade,omitempty"`
	// x-displayName: "Site Level Upgrade"
	// Validation stage of SW upgrade, validation of upgrades.
	Validation *Validation `protobuf:"bytes,9,opt,name=validation,proto3" json:"validation,omitempty"`
	// x-displayName: "Site name"
	// Site for this upgrade status, assigned after status is assigned to site.
	Site string `protobuf:"bytes,10,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *SWUpgradeProgress) Reset()      { *m = SWUpgradeProgress{} }
func (*SWUpgradeProgress) ProtoMessage() {}
func (*SWUpgradeProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{0}
}
func (m *SWUpgradeProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SWUpgradeProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SWUpgradeProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SWUpgradeProgress.Merge(m, src)
}
func (m *SWUpgradeProgress) XXX_Size() int {
	return m.Size()
}
func (m *SWUpgradeProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_SWUpgradeProgress.DiscardUnknown(m)
}

var xxx_messageInfo_SWUpgradeProgress proto.InternalMessageInfo

func (m *SWUpgradeProgress) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *SWUpgradeProgress) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SWUpgradeProgress) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *SWUpgradeProgress) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *SWUpgradeProgress) GetOsSetup() *OSSetup {
	if m != nil {
		return m.OsSetup
	}
	return nil
}

func (m *SWUpgradeProgress) GetImageDownload() *ImageDownload {
	if m != nil {
		return m.ImageDownload
	}
	return nil
}

func (m *SWUpgradeProgress) GetSiteLevelUpgrade() *SiteLevelUpgrade {
	if m != nil {
		return m.SiteLevelUpgrade
	}
	return nil
}

func (m *SWUpgradeProgress) GetNodeLevelUpgrade() *NodeLevelUpgrade {
	if m != nil {
		return m.NodeLevelUpgrade
	}
	return nil
}

func (m *SWUpgradeProgress) GetValidation() *Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (m *SWUpgradeProgress) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// Validation
//
// x-displayName: "Validation stage"
// Validation represents the last stage in the upgrade phase, checking if everything has been upgraded properly.
type Validation struct {
	// x-displayName: "Status"
	// Status of upgrade for this entire node level upgrade stage
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of Image download.
	StartTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// x-displayName: "Results"
	// String of messages from validation stage.
	Results []string `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *Validation) Reset()      { *m = Validation{} }
func (*Validation) ProtoMessage() {}
func (*Validation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{1}
}
func (m *Validation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Validation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validation.Merge(m, src)
}
func (m *Validation) XXX_Size() int {
	return m.Size()
}
func (m *Validation) XXX_DiscardUnknown() {
	xxx_messageInfo_Validation.DiscardUnknown(m)
}

var xxx_messageInfo_Validation proto.InternalMessageInfo

func (m *Validation) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *Validation) GetStartTimestamp() *types.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *Validation) GetResults() []string {
	if m != nil {
		return m.Results
	}
	return nil
}

// Node Level Upgrade
//
// x-displayName: "Node Level Upgrade Stage"
// Node level upgrade shows the upgrades that are happening on a site level as opposed to site level.
type NodeLevelUpgrade struct {
	// x-displayName: "Status"
	// Status of upgrade for this entire node level upgrade stage
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of Image download.
	StartTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// x-displayName: "Results"
	// Results for each stage in site level upgrades
	Results []*NodeUpgradeResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *NodeLevelUpgrade) Reset()      { *m = NodeLevelUpgrade{} }
func (*NodeLevelUpgrade) ProtoMessage() {}
func (*NodeLevelUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{2}
}
func (m *NodeLevelUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeLevelUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeLevelUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLevelUpgrade.Merge(m, src)
}
func (m *NodeLevelUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *NodeLevelUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLevelUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLevelUpgrade proto.InternalMessageInfo

func (m *NodeLevelUpgrade) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *NodeLevelUpgrade) GetStartTimestamp() *types.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *NodeLevelUpgrade) GetResults() []*NodeUpgradeResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type NodeUpgradeResult struct {
	// x-displayName: "Name"
	// Name of node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// x-displayName: "Status"
	// Status of upgrade for this entire node level upgrade stage
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of Image download.
	Progress *UpgradeProgressCount `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress,omitempty"`
	// x-displayName: "Results"
	// Results for each node in node level upgrades
	Results []*StageUpgradeResults `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *NodeUpgradeResult) Reset()      { *m = NodeUpgradeResult{} }
func (*NodeUpgradeResult) ProtoMessage() {}
func (*NodeUpgradeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{3}
}
func (m *NodeUpgradeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeUpgradeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeUpgradeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUpgradeResult.Merge(m, src)
}
func (m *NodeUpgradeResult) XXX_Size() int {
	return m.Size()
}
func (m *NodeUpgradeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUpgradeResult.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUpgradeResult proto.InternalMessageInfo

func (m *NodeUpgradeResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeUpgradeResult) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *NodeUpgradeResult) GetProgress() *UpgradeProgressCount {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *NodeUpgradeResult) GetResults() []*StageUpgradeResults {
	if m != nil {
		return m.Results
	}
	return nil
}

// Site Level Upgrade
//
// x-displayName: "Site Level Upgrade Stage"
// Site level upgrade shows the upgrades that are happening on a site level as opposed to node level.
type SiteLevelUpgrade struct {
	// x-displayName: "Status"
	// Status of upgrade for this entire site level upgrade stage
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of Image download.
	StartTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of Image download.
	Progress *UpgradeProgressCount `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress,omitempty"`
	// x-displayName: "Results"
	// Results for each stage in site level upgrades
	Results []*StageUpgradeResults `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *SiteLevelUpgrade) Reset()      { *m = SiteLevelUpgrade{} }
func (*SiteLevelUpgrade) ProtoMessage() {}
func (*SiteLevelUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{4}
}
func (m *SiteLevelUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteLevelUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteLevelUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteLevelUpgrade.Merge(m, src)
}
func (m *SiteLevelUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *SiteLevelUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteLevelUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_SiteLevelUpgrade proto.InternalMessageInfo

func (m *SiteLevelUpgrade) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *SiteLevelUpgrade) GetStartTimestamp() *types.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *SiteLevelUpgrade) GetProgress() *UpgradeProgressCount {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *SiteLevelUpgrade) GetResults() []*StageUpgradeResults {
	if m != nil {
		return m.Results
	}
	return nil
}

// UpgradeProgressCount
//
// x-displayName: "Upgrade progress count"
// UpgradeProgressCount counts the total and completed apps that have been upgraded.
type UpgradeProgressCount struct {
	// x-displayName: "Total"
	// Total number of apps to upgrade.
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// x-displayName: "Completed"
	// Number of apps that have been upgraded within a level.
	Completed int32 `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *UpgradeProgressCount) Reset()      { *m = UpgradeProgressCount{} }
func (*UpgradeProgressCount) ProtoMessage() {}
func (*UpgradeProgressCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{5}
}
func (m *UpgradeProgressCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeProgressCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpgradeProgressCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeProgressCount.Merge(m, src)
}
func (m *UpgradeProgressCount) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeProgressCount) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeProgressCount.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeProgressCount proto.InternalMessageInfo

func (m *UpgradeProgressCount) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *UpgradeProgressCount) GetCompleted() int32 {
	if m != nil {
		return m.Completed
	}
	return 0
}

// SiteLevelStageUpgradeResults
//
// x-displayName: "Site Level Stage Upgrade Results"
// SiteLevelStageUpgradeResults shows the upgrade status of each stage and applications within the stage
type StageUpgradeResults struct {
	// x-displayName: "Name"
	// Name of stage.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// x-displayName: "Status"
	// Status of upgrade of this stage
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Applications"
	// Status of application objects in each application
	Applications []*StageApplication `protobuf:"bytes,3,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (m *StageUpgradeResults) Reset()      { *m = StageUpgradeResults{} }
func (*StageUpgradeResults) ProtoMessage() {}
func (*StageUpgradeResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{6}
}
func (m *StageUpgradeResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StageUpgradeResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StageUpgradeResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageUpgradeResults.Merge(m, src)
}
func (m *StageUpgradeResults) XXX_Size() int {
	return m.Size()
}
func (m *StageUpgradeResults) XXX_DiscardUnknown() {
	xxx_messageInfo_StageUpgradeResults.DiscardUnknown(m)
}

var xxx_messageInfo_StageUpgradeResults proto.InternalMessageInfo

func (m *StageUpgradeResults) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StageUpgradeResults) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *StageUpgradeResults) GetApplications() []*StageApplication {
	if m != nil {
		return m.Applications
	}
	return nil
}

// StageApplication
//
// x-displayName: "Stage Application"
// StageApplication shows the upgrade status of each application in either site/node level upgrades
type StageApplication struct {
	// x-displayName: "Name"
	// Name of stage.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// x-displayName: "Status"
	// Status of upgrade of this stage
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "objects"
	// Status of application objects in each application
	Objects []*ApplicationObj `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *StageApplication) Reset()      { *m = StageApplication{} }
func (*StageApplication) ProtoMessage() {}
func (*StageApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{7}
}
func (m *StageApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StageApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StageApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageApplication.Merge(m, src)
}
func (m *StageApplication) XXX_Size() int {
	return m.Size()
}
func (m *StageApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_StageApplication.DiscardUnknown(m)
}

var xxx_messageInfo_StageApplication proto.InternalMessageInfo

func (m *StageApplication) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StageApplication) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *StageApplication) GetObjects() []*ApplicationObj {
	if m != nil {
		return m.Objects
	}
	return nil
}

// ApplicationObj
//
// x-displayName: "Application Object"
// ApplicationObj shows the upgrade status of each object in a application in either site/node level upgrades
type ApplicationObj struct {
	// x-displayName: "Name"
	// debug? TODO: What is this, reference maurice deployment status object
	Debug string `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// x-displayName: "Deploy Strategy"
	// Deployment strategy of object
	DeployStrategy string `protobuf:"bytes,2,opt,name=deploy_strategy,json=deployStrategy,proto3" json:"deploy_strategy,omitempty"`
	// x-displayName: "Kind"
	// Kubernetes object kind
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// x-displayName: "Name"
	// name of object
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// x-displayName: "Conditions"
	// name of object
	Conditions []*Condition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *ApplicationObj) Reset()      { *m = ApplicationObj{} }
func (*ApplicationObj) ProtoMessage() {}
func (*ApplicationObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{8}
}
func (m *ApplicationObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApplicationObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationObj.Merge(m, src)
}
func (m *ApplicationObj) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationObj) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationObj.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationObj proto.InternalMessageInfo

func (m *ApplicationObj) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

func (m *ApplicationObj) GetDeployStrategy() string {
	if m != nil {
		return m.DeployStrategy
	}
	return ""
}

func (m *ApplicationObj) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ApplicationObj) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationObj) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// Condition
//
// x-displayName: "Condition"
// Condition of object in each phase of installation
type Condition struct {
	// x-displayName: "Type"
	// Type of action to was applied with object, i.e. load, apply, running, status
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// x-displayName: "Result"
	// Result of action, i.e. success etc.
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// x-displayName: "Message"
	// Message of action.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Condition) Reset()      { *m = Condition{} }
func (*Condition) ProtoMessage() {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{9}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Condition) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Condition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ImageDownload
//
// x-displayName: "Image Download Stage"
// ImageDownload shows each the entire image download stage.
type ImageDownload struct {
	// x-displayName: "Upgrade Status"
	// Status of upgrade for this entire OS setup stage
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of Image download.
	StartTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// x-displayName: "Results"
	// Results of each node in OS Setup.
	Results []*InstallResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *ImageDownload) Reset()      { *m = ImageDownload{} }
func (*ImageDownload) ProtoMessage() {}
func (*ImageDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{10}
}
func (m *ImageDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ImageDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDownload.Merge(m, src)
}
func (m *ImageDownload) XXX_Size() int {
	return m.Size()
}
func (m *ImageDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDownload.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDownload proto.InternalMessageInfo

func (m *ImageDownload) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *ImageDownload) GetStartTimestamp() *types.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *ImageDownload) GetResults() []*InstallResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// OSSetup
//
// x-displayName: "OS Setup Stage"
// OSSetup shows the OS Setup stage.
type OSSetup struct {
	// x-displayName: "Upgrade Status"
	// Status of upgrade for this entire OS setup stage
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Start Timestamp"
	// Start timestamp of OS setup.
	StartTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// x-displayName: "Results"
	// Results of each node in OS Setup.
	Results []*OSNodeResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *OSSetup) Reset()      { *m = OSSetup{} }
func (*OSSetup) ProtoMessage() {}
func (*OSSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{11}
}
func (m *OSSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OSSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSSetup.Merge(m, src)
}
func (m *OSSetup) XXX_Size() int {
	return m.Size()
}
func (m *OSSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_OSSetup.DiscardUnknown(m)
}

var xxx_messageInfo_OSSetup proto.InternalMessageInfo

func (m *OSSetup) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *OSSetup) GetStartTimestamp() *types.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *OSSetup) GetResults() []*OSNodeResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// OSNodeResult
//
// x-displayName: "OS Node Result"
// OSNodeResult shows the result of OS upgrade for each node
type OSNodeResult struct {
	// x-displayName: "Name"
	// Name of node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// x-displayName: "Status"
	// Status of upgrade of this node
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Result"
	// Result of each component in each node.
	Results []*InstallResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *OSNodeResult) Reset()      { *m = OSNodeResult{} }
func (*OSNodeResult) ProtoMessage() {}
func (*OSNodeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{12}
}
func (m *OSNodeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSNodeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OSNodeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSNodeResult.Merge(m, src)
}
func (m *OSNodeResult) XXX_Size() int {
	return m.Size()
}
func (m *OSNodeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OSNodeResult.DiscardUnknown(m)
}

var xxx_messageInfo_OSNodeResult proto.InternalMessageInfo

func (m *OSNodeResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OSNodeResult) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *OSNodeResult) GetResults() []*InstallResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// Install Result
//
// x-displayName: "Install Result"
// InstallResult shows the result each application/process.
type InstallResult struct {
	// x-displayName: "Name"
	// Name of this application/process
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// x-displayName: "Type"
	// Type of upgrade
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// x-displayName: "Status"
	// Status of upgrade of this node
	Status Status `protobuf:"varint,3,opt,name=status,proto3,enum=ves.io.schema.upgrade_status.Status" json:"status,omitempty"`
	// x-displayName: "Message"
	// Message of this stage.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *InstallResult) Reset()      { *m = InstallResult{} }
func (*InstallResult) ProtoMessage() {}
func (*InstallResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{13}
}
func (m *InstallResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InstallResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallResult.Merge(m, src)
}
func (m *InstallResult) XXX_Size() int {
	return m.Size()
}
func (m *InstallResult) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallResult.DiscardUnknown(m)
}

var xxx_messageInfo_InstallResult proto.InternalMessageInfo

func (m *InstallResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstallResult) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstallResult) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return UNKNOWN
}

func (m *InstallResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Shape of the status specification
//
// x-displayName: "Global Specification"
type GlobalSpecType struct {
	// Software Upgrade Progress
	//
	// x-displayName: "Software Upgrade Progress"
	// x-required
	// Infrastructure metadata section
	SwUpgradeProgress *SWUpgradeProgress `protobuf:"bytes,1,opt,name=sw_upgrade_progress,json=swUpgradeProgress,proto3" json:"sw_upgrade_progress,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{14}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetSwUpgradeProgress() *SWUpgradeProgress {
	if m != nil {
		return m.SwUpgradeProgress
	}
	return nil
}

// Get status
//
// x-displayName: "Get upgrade status"
// Get status specification
type GetSpecType struct {
	// Software Upgrade Progress
	//
	// x-displayName: "Software Upgrade Progress"
	// x-required
	// Infrastructure metadata section
	SwUpgradeProgress *SWUpgradeProgress `protobuf:"bytes,1,opt,name=sw_upgrade_progress,json=swUpgradeProgress,proto3" json:"sw_upgrade_progress,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{15}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetSwUpgradeProgress() *SWUpgradeProgress {
	if m != nil {
		return m.SwUpgradeProgress
	}
	return nil
}

// Create status
//
// x-displayName: "Get upgrade status"
// Create status specification
type CreateSpecType struct {
	// Software Upgrade Progress
	//
	// x-displayName: "Software Upgrade Progress"
	// x-required
	// Infrastructure metadata section
	SwUpgradeProgress *SWUpgradeProgress `protobuf:"bytes,1,opt,name=sw_upgrade_progress,json=swUpgradeProgress,proto3" json:"sw_upgrade_progress,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{16}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetSwUpgradeProgress() *SWUpgradeProgress {
	if m != nil {
		return m.SwUpgradeProgress
	}
	return nil
}

// Replace status
//
// x-displayName: "Get upgrade status"
// Replace status specification
type ReplaceSpecType struct {
	// Software Upgrade Progress
	//
	// x-displayName: "Software Upgrade Progress"
	// x-required
	// Infrastructure metadata section
	SwUpgradeProgress *SWUpgradeProgress `protobuf:"bytes,1,opt,name=sw_upgrade_progress,json=swUpgradeProgress,proto3" json:"sw_upgrade_progress,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a482d54bd8cf3b42, []int{17}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetSwUpgradeProgress() *SWUpgradeProgress {
	if m != nil {
		return m.SwUpgradeProgress
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.upgrade_status.Status", Status_name, Status_value)
	golang_proto.RegisterEnum("ves.io.schema.upgrade_status.Status", Status_name, Status_value)
	proto.RegisterType((*SWUpgradeProgress)(nil), "ves.io.schema.upgrade_status.SWUpgradeProgress")
	golang_proto.RegisterType((*SWUpgradeProgress)(nil), "ves.io.schema.upgrade_status.SWUpgradeProgress")
	proto.RegisterType((*Validation)(nil), "ves.io.schema.upgrade_status.Validation")
	golang_proto.RegisterType((*Validation)(nil), "ves.io.schema.upgrade_status.Validation")
	proto.RegisterType((*NodeLevelUpgrade)(nil), "ves.io.schema.upgrade_status.NodeLevelUpgrade")
	golang_proto.RegisterType((*NodeLevelUpgrade)(nil), "ves.io.schema.upgrade_status.NodeLevelUpgrade")
	proto.RegisterType((*NodeUpgradeResult)(nil), "ves.io.schema.upgrade_status.NodeUpgradeResult")
	golang_proto.RegisterType((*NodeUpgradeResult)(nil), "ves.io.schema.upgrade_status.NodeUpgradeResult")
	proto.RegisterType((*SiteLevelUpgrade)(nil), "ves.io.schema.upgrade_status.SiteLevelUpgrade")
	golang_proto.RegisterType((*SiteLevelUpgrade)(nil), "ves.io.schema.upgrade_status.SiteLevelUpgrade")
	proto.RegisterType((*UpgradeProgressCount)(nil), "ves.io.schema.upgrade_status.UpgradeProgressCount")
	golang_proto.RegisterType((*UpgradeProgressCount)(nil), "ves.io.schema.upgrade_status.UpgradeProgressCount")
	proto.RegisterType((*StageUpgradeResults)(nil), "ves.io.schema.upgrade_status.StageUpgradeResults")
	golang_proto.RegisterType((*StageUpgradeResults)(nil), "ves.io.schema.upgrade_status.StageUpgradeResults")
	proto.RegisterType((*StageApplication)(nil), "ves.io.schema.upgrade_status.StageApplication")
	golang_proto.RegisterType((*StageApplication)(nil), "ves.io.schema.upgrade_status.StageApplication")
	proto.RegisterType((*ApplicationObj)(nil), "ves.io.schema.upgrade_status.ApplicationObj")
	golang_proto.RegisterType((*ApplicationObj)(nil), "ves.io.schema.upgrade_status.ApplicationObj")
	proto.RegisterType((*Condition)(nil), "ves.io.schema.upgrade_status.Condition")
	golang_proto.RegisterType((*Condition)(nil), "ves.io.schema.upgrade_status.Condition")
	proto.RegisterType((*ImageDownload)(nil), "ves.io.schema.upgrade_status.ImageDownload")
	golang_proto.RegisterType((*ImageDownload)(nil), "ves.io.schema.upgrade_status.ImageDownload")
	proto.RegisterType((*OSSetup)(nil), "ves.io.schema.upgrade_status.OSSetup")
	golang_proto.RegisterType((*OSSetup)(nil), "ves.io.schema.upgrade_status.OSSetup")
	proto.RegisterType((*OSNodeResult)(nil), "ves.io.schema.upgrade_status.OSNodeResult")
	golang_proto.RegisterType((*OSNodeResult)(nil), "ves.io.schema.upgrade_status.OSNodeResult")
	proto.RegisterType((*InstallResult)(nil), "ves.io.schema.upgrade_status.InstallResult")
	golang_proto.RegisterType((*InstallResult)(nil), "ves.io.schema.upgrade_status.InstallResult")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.upgrade_status.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.upgrade_status.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.upgrade_status.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.upgrade_status.GetSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.upgrade_status.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.upgrade_status.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.upgrade_status.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.upgrade_status.ReplaceSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/upgrade_status/types.proto", fileDescriptor_a482d54bd8cf3b42)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/upgrade_status/types.proto", fileDescriptor_a482d54bd8cf3b42)
}

var fileDescriptor_a482d54bd8cf3b42 = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0xf7, 0x38, 0x7e, 0xa9, 0x1f, 0x37, 0x8e, 0xbb, 0xed, 0xbf, 0xf2, 0x3f, 0x54, 0x4b, 0x64,
	0x51, 0xd5, 0x2a, 0x74, 0xad, 0x9a, 0x1b, 0x42, 0x15, 0xad, 0xed, 0xa6, 0xa1, 0xc5, 0x09, 0xe3,
	0x86, 0x4a, 0x08, 0xb4, 0x5a, 0x7b, 0x27, 0xdb, 0x6d, 0xd7, 0x9e, 0xd5, 0xce, 0xd8, 0x21, 0x07,
	0x24, 0x84, 0x84, 0x44, 0x4f, 0xf4, 0xcc, 0x17, 0x00, 0x24, 0x4e, 0x5c, 0xb9, 0xf4, 0x88, 0x38,
	0x45, 0x9c, 0x82, 0xc4, 0xa1, 0x71, 0x2e, 0x1c, 0x2b, 0x3e, 0x01, 0x9a, 0xd9, 0x5d, 0xdb, 0xbb,
	0xb5, 0xec, 0xaa, 0x34, 0x6a, 0x4e, 0x9e, 0x67, 0x9e, 0x97, 0xf9, 0x3d, 0xaf, 0x33, 0x6b, 0xa8,
	0x0c, 0x09, 0xd3, 0x6c, 0x5a, 0x65, 0xdd, 0xfb, 0xa4, 0x67, 0x54, 0x07, 0xae, 0xe5, 0x19, 0x26,
	0xd1, 0x19, 0x37, 0xf8, 0x80, 0x55, 0xf9, 0x9e, 0x4b, 0x98, 0xe6, 0x7a, 0x94, 0x53, 0xe5, 0x82,
	0x2f, 0xa9, 0xf9, 0x92, 0x5a, 0x54, 0x72, 0xf5, 0x8a, 0x65, 0xf3, 0xfb, 0x83, 0x8e, 0xd6, 0xa5,
	0xbd, 0xaa, 0x45, 0x2d, 0x5a, 0x95, 0x4a, 0x9d, 0xc1, 0x8e, 0xa4, 0x24, 0x21, 0x57, 0xbe, 0xb1,
	0xd5, 0x37, 0x2d, 0x4a, 0x2d, 0x87, 0x4c, 0xa4, 0xb8, 0xdd, 0x23, 0x8c, 0x1b, 0x3d, 0x37, 0x10,
	0x78, 0x23, 0x8a, 0x8b, 0xba, 0xdc, 0xa6, 0xfd, 0x00, 0xca, 0xaa, 0x1a, 0x65, 0x32, 0x9b, 0x93,
	0x69, 0xa8, 0xab, 0xff, 0x8f, 0xf2, 0xa7, 0x59, 0x17, 0xa2, 0xac, 0xa1, 0xe1, 0xd8, 0xa6, 0xc1,
	0x49, 0xc0, 0x5d, 0x8b, 0x71, 0x6d, 0xb2, 0xab, 0x47, 0x8e, 0x2e, 0xff, 0x95, 0x82, 0x33, 0xed,
	0x7b, 0xdb, 0xbe, 0xf3, 0x5b, 0x1e, 0xb5, 0x3c, 0xc2, 0x98, 0xf2, 0x3e, 0x64, 0xfc, 0x38, 0x94,
	0xd0, 0x1a, 0xaa, 0x14, 0x6a, 0x6f, 0x69, 0xf3, 0x82, 0xa5, 0xb5, 0xe5, 0x0f, 0x0e, 0x74, 0x94,
	0x12, 0x64, 0x87, 0xc4, 0x63, 0x36, 0xed, 0x97, 0x92, 0x6b, 0xa8, 0x92, 0xc3, 0x21, 0x29, 0x38,
	0x1e, 0xe1, 0x9e, 0x4d, 0x58, 0x69, 0x69, 0x0d, 0x55, 0xd2, 0x38, 0x24, 0x95, 0x8b, 0x50, 0xd8,
	0x31, 0x6c, 0x67, 0xe0, 0x11, 0xdd, 0x23, 0x06, 0xa3, 0xfd, 0x52, 0x4a, 0xaa, 0x2e, 0x07, 0xbb,
	0x58, 0x6e, 0x2a, 0x1f, 0xc0, 0x29, 0xca, 0x74, 0x46, 0xf8, 0xc0, 0x2d, 0xa5, 0xd7, 0x50, 0x25,
	0x5f, 0xbb, 0x38, 0x1f, 0xda, 0x66, 0xbb, 0x2d, 0x84, 0x71, 0x96, 0x32, 0xb9, 0x50, 0x30, 0x14,
	0xec, 0x9e, 0x61, 0x11, 0xdd, 0xa4, 0xbb, 0x7d, 0x87, 0x1a, 0x66, 0x29, 0x23, 0xed, 0xbc, 0x3d,
	0xdf, 0xce, 0x86, 0xd0, 0x69, 0x04, 0x2a, 0x78, 0xd9, 0x9e, 0x26, 0x95, 0xcf, 0x40, 0x11, 0x39,
	0xd3, 0x1d, 0x32, 0x24, 0x8e, 0x1e, 0x68, 0x96, 0xb2, 0xd2, 0xae, 0xb6, 0x20, 0x74, 0x36, 0x27,
	0x77, 0x84, 0x5a, 0x90, 0x02, 0x5c, 0x64, 0xb1, 0x1d, 0x61, 0xbd, 0x4f, 0xcd, 0xb8, 0xf5, 0x53,
	0x2f, 0x62, 0xbd, 0x45, 0xcd, 0x98, 0xf5, 0x7e, 0x6c, 0x47, 0xb9, 0x05, 0x10, 0x14, 0x8d, 0xc8,
	0x57, 0x4e, 0x5a, 0xad, 0xcc, 0xb7, 0xfa, 0xc9, 0x58, 0x1e, 0x4f, 0xe9, 0x2a, 0x0a, 0xa4, 0x04,
	0xf6, 0x12, 0xc8, 0xc4, 0xc9, 0x75, 0xf9, 0x27, 0x04, 0x30, 0x11, 0xff, 0x8f, 0x75, 0x55, 0x87,
	0x15, 0xc6, 0x0d, 0x8f, 0xeb, 0xe3, 0xe6, 0x92, 0xf5, 0x95, 0xaf, 0xad, 0x6a, 0x7e, 0xfb, 0x69,
	0x61, 0xfb, 0x69, 0x77, 0x43, 0x09, 0x5c, 0x90, 0x2a, 0x63, 0xda, 0x2f, 0x41, 0x36, 0x70, 0xb8,
	0x28, 0xc1, 0x25, 0x51, 0x9c, 0x01, 0x59, 0x7e, 0x8a, 0xa0, 0x18, 0x0f, 0xd8, 0x49, 0x40, 0xbc,
	0x11, 0x45, 0x9c, 0xaf, 0x55, 0x17, 0x27, 0x3d, 0xcc, 0xb7, 0xd4, 0x9b, 0xb8, 0xf8, 0x75, 0x12,
	0xce, 0x3c, 0xc7, 0x16, 0x89, 0xeb, 0x1b, 0x3d, 0x22, 0x3d, 0xcc, 0x61, 0xb9, 0x9e, 0xf2, 0x3b,
	0xf9, 0x12, 0x7e, 0xb7, 0xe0, 0x94, 0x1b, 0xcc, 0x12, 0xd9, 0xe8, 0xf9, 0x5a, 0x6d, 0xbe, 0x7e,
	0x6c, 0x00, 0xd5, 0xe9, 0xa0, 0xcf, 0xf1, 0xd8, 0x86, 0x72, 0x7b, 0x12, 0x82, 0x94, 0x0c, 0xc1,
	0xd5, 0x85, 0x70, 0xac, 0xa8, 0x93, 0x6c, 0x12, 0x84, 0x5f, 0x92, 0x50, 0x8c, 0xb7, 0xdd, 0x49,
	0xc8, 0xf3, 0x89, 0x0e, 0xda, 0x87, 0x70, 0x6e, 0xd6, 0x71, 0xca, 0x39, 0x48, 0x73, 0xca, 0x0d,
	0x47, 0x86, 0x2d, 0x8d, 0x7d, 0x42, 0xb9, 0x00, 0xb9, 0x2e, 0xed, 0xb9, 0x0e, 0xe1, 0xc4, 0x94,
	0x91, 0x48, 0xe3, 0xc9, 0x46, 0xf9, 0x57, 0x04, 0x67, 0x67, 0x1c, 0x76, 0x0c, 0x75, 0x88, 0xe1,
	0xb4, 0xe1, 0xba, 0x8e, 0xdd, 0x95, 0xe3, 0x27, 0xec, 0x1f, 0xed, 0x05, 0xe2, 0x70, 0x7d, 0xa2,
	0x86, 0x23, 0x36, 0xca, 0x3f, 0x23, 0x28, 0xc6, 0x45, 0x8e, 0x01, 0xfa, 0x4d, 0xc8, 0xd2, 0xce,
	0x03, 0xd2, 0x1d, 0x77, 0xfd, 0x3b, 0xf3, 0xd5, 0xa7, 0xd0, 0x6c, 0x76, 0x1e, 0xe0, 0x50, 0xb9,
	0xfc, 0x04, 0x41, 0x21, 0xca, 0x13, 0x39, 0x33, 0x49, 0x67, 0x60, 0x05, 0x68, 0x7d, 0x42, 0xb9,
	0x04, 0x2b, 0x26, 0x71, 0x1d, 0xba, 0xa7, 0x33, 0xee, 0x19, 0x9c, 0x58, 0x7b, 0xc1, 0xed, 0x5d,
	0xf0, 0xb7, 0xdb, 0xc1, 0xae, 0xf0, 0xf5, 0xa1, 0xdd, 0x37, 0x65, 0x8d, 0xe6, 0xb0, 0x5c, 0x8f,
	0xfd, 0x4f, 0x4d, 0xf9, 0xbf, 0x0e, 0xd0, 0xa5, 0x7d, 0xd3, 0xf6, 0x43, 0x9f, 0x96, 0x4e, 0x5c,
	0x9a, 0xef, 0x44, 0x3d, 0x94, 0xc7, 0x53, 0xaa, 0xe5, 0x8f, 0x21, 0x37, 0x66, 0x88, 0x93, 0xc4,
	0xfb, 0x27, 0x8c, 0xb4, 0x58, 0x2b, 0xe7, 0x21, 0xe3, 0xd7, 0x69, 0x80, 0x38, 0xa0, 0xc4, 0xac,
	0xef, 0x11, 0xc6, 0x0c, 0x8b, 0x04, 0x60, 0x43, 0xb2, 0xfc, 0x27, 0x82, 0xe5, 0xc8, 0x95, 0x7e,
	0x12, 0x06, 0x40, 0x33, 0x3e, 0xe8, 0x17, 0xbd, 0x49, 0xfa, 0x8c, 0x1b, 0x8e, 0x13, 0x1f, 0xf2,
	0x7f, 0x20, 0xc8, 0x06, 0xcf, 0x9e, 0x93, 0xe0, 0x55, 0x23, 0xee, 0xd5, 0xe5, 0x45, 0x2f, 0x36,
	0x71, 0x43, 0xc5, 0x9d, 0xfa, 0x01, 0xc1, 0xe9, 0x69, 0xce, 0x31, 0x74, 0xdc, 0x2b, 0x0a, 0xff,
	0x77, 0xa2, 0xb4, 0xa6, 0x59, 0x33, 0xa1, 0x86, 0x65, 0x9c, 0x9c, 0x2a, 0xe3, 0x09, 0xfc, 0xa5,
	0x97, 0x7b, 0x75, 0x87, 0xc5, 0x9e, 0x8a, 0x16, 0xfb, 0x23, 0x04, 0x85, 0x75, 0x87, 0x76, 0x0c,
	0xa7, 0xed, 0x92, 0xee, 0x5d, 0x71, 0xd4, 0x2e, 0x9c, 0x65, 0xbb, 0xe1, 0x5b, 0x52, 0x1f, 0x5f,
	0x3b, 0x48, 0x66, 0x77, 0xc1, 0xfb, 0xe2, 0xb9, 0xcf, 0x85, 0x1b, 0xe7, 0xbf, 0xff, 0x72, 0x96,
	0x39, 0x7c, 0x86, 0xed, 0xc6, 0x44, 0xcb, 0xdf, 0x20, 0xc8, 0xaf, 0x13, 0x3e, 0x06, 0xa2, 0xbf,
	0x4a, 0x20, 0x33, 0x0e, 0x7c, 0xef, 0x7f, 0xbf, 0x5f, 0x8b, 0x39, 0xff, 0xcf, 0x35, 0x74, 0xb5,
	0xfc, 0x2d, 0x82, 0x42, 0xdd, 0x23, 0x06, 0x27, 0xaf, 0x1d, 0xca, 0x23, 0x04, 0x2b, 0x98, 0xb8,
	0x8e, 0xd1, 0x7d, 0xed, 0x58, 0x2e, 0x7f, 0x0e, 0x19, 0xbf, 0xac, 0x94, 0x3c, 0x64, 0xb7, 0x5b,
	0xb7, 0x5b, 0x9b, 0xf7, 0x5a, 0xc5, 0x84, 0xb2, 0x0c, 0xb9, 0x76, 0xfd, 0x56, 0xb3, 0xb1, 0x7d,
	0xa7, 0xd9, 0x28, 0x22, 0x65, 0x05, 0xf2, 0x1b, 0x2d, 0x7d, 0x0b, 0x6f, 0xae, 0xe3, 0x66, 0xbb,
	0x5d, 0x4c, 0x0a, 0x7e, 0x7d, 0xf3, 0xa3, 0xad, 0x3b, 0xcd, 0xbb, 0xcd, 0x46, 0x71, 0x49, 0x01,
	0xc8, 0xdc, 0xbc, 0xbe, 0x21, 0x64, 0x53, 0xc2, 0x4e, 0xfb, 0xf6, 0xc6, 0xd6, 0x56, 0xb3, 0x51,
	0x4c, 0xdf, 0x78, 0x8c, 0xf6, 0x0f, 0xd5, 0xc4, 0xc1, 0xa1, 0x9a, 0x78, 0x76, 0xa8, 0xa2, 0xaf,
	0x46, 0x2a, 0xfa, 0x71, 0xa4, 0xa2, 0xdf, 0x46, 0x2a, 0xda, 0x1f, 0xa9, 0xe8, 0x60, 0xa4, 0xa2,
	0xa7, 0x23, 0x15, 0xfd, 0x3d, 0x52, 0x13, 0xcf, 0x46, 0x2a, 0x7a, 0x7c, 0xa4, 0x26, 0x9e, 0x1c,
	0xa9, 0x68, 0xff, 0x48, 0x4d, 0x1c, 0x1c, 0xa9, 0x89, 0x4f, 0xb1, 0x45, 0xdd, 0x87, 0x96, 0x36,
	0xa4, 0x0e, 0x27, 0x9e, 0x67, 0x68, 0xe2, 0x8b, 0x5e, 0x2c, 0x76, 0xa8, 0xd7, 0xbb, 0xe2, 0x7a,
	0x74, 0x68, 0x9b, 0xc4, 0xbb, 0x12, 0xb2, 0xab, 0x6e, 0xc7, 0xa2, 0x55, 0xf2, 0x05, 0x0f, 0x3f,
	0xab, 0x67, 0xfd, 0x25, 0xd0, 0xc9, 0xc8, 0x11, 0xf6, 0xee, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x3f, 0x2a, 0xe0, 0xa0, 0x39, 0x10, 0x00, 0x00,
}

func (x Status) String() string {
	s, ok := Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SWUpgradeProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SWUpgradeProgress)
	if !ok {
		that2, ok := that.(SWUpgradeProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Retries != that1.Retries {
		return false
	}
	if this.FailureReason != that1.FailureReason {
		return false
	}
	if !this.OsSetup.Equal(that1.OsSetup) {
		return false
	}
	if !this.ImageDownload.Equal(that1.ImageDownload) {
		return false
	}
	if !this.SiteLevelUpgrade.Equal(that1.SiteLevelUpgrade) {
		return false
	}
	if !this.NodeLevelUpgrade.Equal(that1.NodeLevelUpgrade) {
		return false
	}
	if !this.Validation.Equal(that1.Validation) {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *Validation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Validation)
	if !ok {
		that2, ok := that.(Validation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartTimestamp.Equal(that1.StartTimestamp) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if this.Results[i] != that1.Results[i] {
			return false
		}
	}
	return true
}
func (this *NodeLevelUpgrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeLevelUpgrade)
	if !ok {
		that2, ok := that.(NodeLevelUpgrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartTimestamp.Equal(that1.StartTimestamp) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *NodeUpgradeResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeUpgradeResult)
	if !ok {
		that2, ok := that.(NodeUpgradeResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Progress.Equal(that1.Progress) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *SiteLevelUpgrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteLevelUpgrade)
	if !ok {
		that2, ok := that.(SiteLevelUpgrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartTimestamp.Equal(that1.StartTimestamp) {
		return false
	}
	if !this.Progress.Equal(that1.Progress) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *UpgradeProgressCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpgradeProgressCount)
	if !ok {
		that2, ok := that.(UpgradeProgressCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Completed != that1.Completed {
		return false
	}
	return true
}
func (this *StageUpgradeResults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StageUpgradeResults)
	if !ok {
		that2, ok := that.(StageUpgradeResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Applications) != len(that1.Applications) {
		return false
	}
	for i := range this.Applications {
		if !this.Applications[i].Equal(that1.Applications[i]) {
			return false
		}
	}
	return true
}
func (this *StageApplication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StageApplication)
	if !ok {
		that2, ok := that.(StageApplication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Objects) != len(that1.Objects) {
		return false
	}
	for i := range this.Objects {
		if !this.Objects[i].Equal(that1.Objects[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationObj) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationObj)
	if !ok {
		that2, ok := that.(ApplicationObj)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Debug != that1.Debug {
		return false
	}
	if this.DeployStrategy != that1.DeployStrategy {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	return true
}
func (this *Condition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Condition)
	if !ok {
		that2, ok := that.(Condition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ImageDownload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageDownload)
	if !ok {
		that2, ok := that.(ImageDownload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartTimestamp.Equal(that1.StartTimestamp) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *OSSetup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSSetup)
	if !ok {
		that2, ok := that.(OSSetup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartTimestamp.Equal(that1.StartTimestamp) {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *OSNodeResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSNodeResult)
	if !ok {
		that2, ok := that.(OSNodeResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *InstallResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstallResult)
	if !ok {
		that2, ok := that.(InstallResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SwUpgradeProgress.Equal(that1.SwUpgradeProgress) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SwUpgradeProgress.Equal(that1.SwUpgradeProgress) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SwUpgradeProgress.Equal(that1.SwUpgradeProgress) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SwUpgradeProgress.Equal(that1.SwUpgradeProgress) {
		return false
	}
	return true
}
func (this *SWUpgradeProgress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&upgrade_status.SWUpgradeProgress{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Retries: "+fmt.Sprintf("%#v", this.Retries)+",\n")
	s = append(s, "FailureReason: "+fmt.Sprintf("%#v", this.FailureReason)+",\n")
	if this.OsSetup != nil {
		s = append(s, "OsSetup: "+fmt.Sprintf("%#v", this.OsSetup)+",\n")
	}
	if this.ImageDownload != nil {
		s = append(s, "ImageDownload: "+fmt.Sprintf("%#v", this.ImageDownload)+",\n")
	}
	if this.SiteLevelUpgrade != nil {
		s = append(s, "SiteLevelUpgrade: "+fmt.Sprintf("%#v", this.SiteLevelUpgrade)+",\n")
	}
	if this.NodeLevelUpgrade != nil {
		s = append(s, "NodeLevelUpgrade: "+fmt.Sprintf("%#v", this.NodeLevelUpgrade)+",\n")
	}
	if this.Validation != nil {
		s = append(s, "Validation: "+fmt.Sprintf("%#v", this.Validation)+",\n")
	}
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Validation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.Validation{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartTimestamp != nil {
		s = append(s, "StartTimestamp: "+fmt.Sprintf("%#v", this.StartTimestamp)+",\n")
	}
	s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeLevelUpgrade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.NodeLevelUpgrade{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartTimestamp != nil {
		s = append(s, "StartTimestamp: "+fmt.Sprintf("%#v", this.StartTimestamp)+",\n")
	}
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeUpgradeResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&upgrade_status.NodeUpgradeResult{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Progress != nil {
		s = append(s, "Progress: "+fmt.Sprintf("%#v", this.Progress)+",\n")
	}
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteLevelUpgrade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&upgrade_status.SiteLevelUpgrade{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartTimestamp != nil {
		s = append(s, "StartTimestamp: "+fmt.Sprintf("%#v", this.StartTimestamp)+",\n")
	}
	if this.Progress != nil {
		s = append(s, "Progress: "+fmt.Sprintf("%#v", this.Progress)+",\n")
	}
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpgradeProgressCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&upgrade_status.UpgradeProgressCount{")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Completed: "+fmt.Sprintf("%#v", this.Completed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StageUpgradeResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.StageUpgradeResults{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Applications != nil {
		s = append(s, "Applications: "+fmt.Sprintf("%#v", this.Applications)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StageApplication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.StageApplication{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Objects != nil {
		s = append(s, "Objects: "+fmt.Sprintf("%#v", this.Objects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationObj) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&upgrade_status.ApplicationObj{")
	s = append(s, "Debug: "+fmt.Sprintf("%#v", this.Debug)+",\n")
	s = append(s, "DeployStrategy: "+fmt.Sprintf("%#v", this.DeployStrategy)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Condition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.Condition{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageDownload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.ImageDownload{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartTimestamp != nil {
		s = append(s, "StartTimestamp: "+fmt.Sprintf("%#v", this.StartTimestamp)+",\n")
	}
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OSSetup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.OSSetup{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartTimestamp != nil {
		s = append(s, "StartTimestamp: "+fmt.Sprintf("%#v", this.StartTimestamp)+",\n")
	}
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OSNodeResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&upgrade_status.OSNodeResult{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Results != nil {
		s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstallResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&upgrade_status.InstallResult{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&upgrade_status.GlobalSpecType{")
	if this.SwUpgradeProgress != nil {
		s = append(s, "SwUpgradeProgress: "+fmt.Sprintf("%#v", this.SwUpgradeProgress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&upgrade_status.GetSpecType{")
	if this.SwUpgradeProgress != nil {
		s = append(s, "SwUpgradeProgress: "+fmt.Sprintf("%#v", this.SwUpgradeProgress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&upgrade_status.CreateSpecType{")
	if this.SwUpgradeProgress != nil {
		s = append(s, "SwUpgradeProgress: "+fmt.Sprintf("%#v", this.SwUpgradeProgress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&upgrade_status.ReplaceSpecType{")
	if this.SwUpgradeProgress != nil {
		s = append(s, "SwUpgradeProgress: "+fmt.Sprintf("%#v", this.SwUpgradeProgress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SWUpgradeProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWUpgradeProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SWUpgradeProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x52
	}
	if m.Validation != nil {
		{
			size, err := m.Validation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.NodeLevelUpgrade != nil {
		{
			size, err := m.NodeLevelUpgrade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.SiteLevelUpgrade != nil {
		{
			size, err := m.SiteLevelUpgrade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ImageDownload != nil {
		{
			size, err := m.ImageDownload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OsSetup != nil {
		{
			size, err := m.OsSetup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.Retries != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Results[iNdEx])
			copy(dAtA[i:], m.Results[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Results[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartTimestamp != nil {
		{
			size, err := m.StartTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeLevelUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeLevelUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeLevelUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartTimestamp != nil {
		{
			size, err := m.StartTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeUpgradeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeUpgradeResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeUpgradeResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SiteLevelUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteLevelUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteLevelUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartTimestamp != nil {
		{
			size, err := m.StartTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeProgressCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeProgressCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeProgressCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Completed))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StageUpgradeResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageUpgradeResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StageUpgradeResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Applications) > 0 {
		for iNdEx := len(m.Applications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StageApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StageApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationObj) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationObj) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeployStrategy) > 0 {
		i -= len(m.DeployStrategy)
		copy(dAtA[i:], m.DeployStrategy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DeployStrategy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Debug) > 0 {
		i -= len(m.Debug)
		copy(dAtA[i:], m.Debug)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Debug)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Condition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartTimestamp != nil {
		{
			size, err := m.StartTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OSSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartTimestamp != nil {
		{
			size, err := m.StartTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OSNodeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSNodeResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSNodeResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		{
			size, err := m.SwUpgradeProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		{
			size, err := m.SwUpgradeProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		{
			size, err := m.SwUpgradeProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		{
			size, err := m.SwUpgradeProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SWUpgradeProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Retries != 0 {
		n += 1 + sovTypes(uint64(m.Retries))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OsSetup != nil {
		l = m.OsSetup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ImageDownload != nil {
		l = m.ImageDownload.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteLevelUpgrade != nil {
		l = m.SiteLevelUpgrade.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NodeLevelUpgrade != nil {
		l = m.NodeLevelUpgrade.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Validation != nil {
		l = m.Validation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Validation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.StartTimestamp != nil {
		l = m.StartTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *NodeLevelUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.StartTimestamp != nil {
		l = m.StartTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *NodeUpgradeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SiteLevelUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.StartTimestamp != nil {
		l = m.StartTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *UpgradeProgressCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovTypes(uint64(m.Total))
	}
	if m.Completed != 0 {
		n += 1 + sovTypes(uint64(m.Completed))
	}
	return n
}

func (m *StageUpgradeResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.Applications) > 0 {
		for _, e := range m.Applications {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StageApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApplicationObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Debug)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DeployStrategy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ImageDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.StartTimestamp != nil {
		l = m.StartTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *OSSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.StartTimestamp != nil {
		l = m.StartTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *OSNodeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *InstallResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		l = m.SwUpgradeProgress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		l = m.SwUpgradeProgress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		l = m.SwUpgradeProgress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwUpgradeProgress != nil {
		l = m.SwUpgradeProgress.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SWUpgradeProgress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWUpgradeProgress{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Retries:` + fmt.Sprintf("%v", this.Retries) + `,`,
		`FailureReason:` + fmt.Sprintf("%v", this.FailureReason) + `,`,
		`OsSetup:` + strings.Replace(this.OsSetup.String(), "OSSetup", "OSSetup", 1) + `,`,
		`ImageDownload:` + strings.Replace(this.ImageDownload.String(), "ImageDownload", "ImageDownload", 1) + `,`,
		`SiteLevelUpgrade:` + strings.Replace(this.SiteLevelUpgrade.String(), "SiteLevelUpgrade", "SiteLevelUpgrade", 1) + `,`,
		`NodeLevelUpgrade:` + strings.Replace(this.NodeLevelUpgrade.String(), "NodeLevelUpgrade", "NodeLevelUpgrade", 1) + `,`,
		`Validation:` + strings.Replace(this.Validation.String(), "Validation", "Validation", 1) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Validation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Validation{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StartTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Results:` + fmt.Sprintf("%v", this.Results) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeLevelUpgrade) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*NodeUpgradeResult{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "NodeUpgradeResult", "NodeUpgradeResult", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&NodeLevelUpgrade{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StartTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeUpgradeResult) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*StageUpgradeResults{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "StageUpgradeResults", "StageUpgradeResults", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&NodeUpgradeResult{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Progress:` + strings.Replace(this.Progress.String(), "UpgradeProgressCount", "UpgradeProgressCount", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteLevelUpgrade) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*StageUpgradeResults{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "StageUpgradeResults", "StageUpgradeResults", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&SiteLevelUpgrade{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StartTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Progress:` + strings.Replace(this.Progress.String(), "UpgradeProgressCount", "UpgradeProgressCount", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpgradeProgressCount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpgradeProgressCount{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StageUpgradeResults) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApplications := "[]*StageApplication{"
	for _, f := range this.Applications {
		repeatedStringForApplications += strings.Replace(f.String(), "StageApplication", "StageApplication", 1) + ","
	}
	repeatedStringForApplications += "}"
	s := strings.Join([]string{`&StageUpgradeResults{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Applications:` + repeatedStringForApplications + `,`,
		`}`,
	}, "")
	return s
}
func (this *StageApplication) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjects := "[]*ApplicationObj{"
	for _, f := range this.Objects {
		repeatedStringForObjects += strings.Replace(f.String(), "ApplicationObj", "ApplicationObj", 1) + ","
	}
	repeatedStringForObjects += "}"
	s := strings.Join([]string{`&StageApplication{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Objects:` + repeatedStringForObjects + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationObj) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]*Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(f.String(), "Condition", "Condition", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&ApplicationObj{`,
		`Debug:` + fmt.Sprintf("%v", this.Debug) + `,`,
		`DeployStrategy:` + fmt.Sprintf("%v", this.DeployStrategy) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *Condition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Condition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageDownload) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*InstallResult{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "InstallResult", "InstallResult", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&ImageDownload{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StartTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *OSSetup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*OSNodeResult{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "OSNodeResult", "OSNodeResult", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&OSSetup{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StartTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *OSNodeResult) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResults := "[]*InstallResult{"
	for _, f := range this.Results {
		repeatedStringForResults += strings.Replace(f.String(), "InstallResult", "InstallResult", 1) + ","
	}
	repeatedStringForResults += "}"
	s := strings.Join([]string{`&OSNodeResult{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Results:` + repeatedStringForResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstallResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstallResult{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`SwUpgradeProgress:` + strings.Replace(this.SwUpgradeProgress.String(), "SWUpgradeProgress", "SWUpgradeProgress", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`SwUpgradeProgress:` + strings.Replace(this.SwUpgradeProgress.String(), "SWUpgradeProgress", "SWUpgradeProgress", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`SwUpgradeProgress:` + strings.Replace(this.SwUpgradeProgress.String(), "SWUpgradeProgress", "SWUpgradeProgress", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SwUpgradeProgress:` + strings.Replace(this.SwUpgradeProgress.String(), "SWUpgradeProgress", "SWUpgradeProgress", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SWUpgradeProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWUpgradeProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWUpgradeProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OsSetup == nil {
				m.OsSetup = &OSSetup{}
			}
			if err := m.OsSetup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageDownload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageDownload == nil {
				m.ImageDownload = &ImageDownload{}
			}
			if err := m.ImageDownload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLevelUpgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SiteLevelUpgrade == nil {
				m.SiteLevelUpgrade = &SiteLevelUpgrade{}
			}
			if err := m.SiteLevelUpgrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLevelUpgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeLevelUpgrade == nil {
				m.NodeLevelUpgrade = &NodeLevelUpgrade{}
			}
			if err := m.NodeLevelUpgrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validation == nil {
				m.Validation = &Validation{}
			}
			if err := m.Validation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimestamp == nil {
				m.StartTimestamp = &types.Timestamp{}
			}
			if err := m.StartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeLevelUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeLevelUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeLevelUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimestamp == nil {
				m.StartTimestamp = &types.Timestamp{}
			}
			if err := m.StartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &NodeUpgradeResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeUpgradeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeUpgradeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeUpgradeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &UpgradeProgressCount{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &StageUpgradeResults{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteLevelUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteLevelUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteLevelUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimestamp == nil {
				m.StartTimestamp = &types.Timestamp{}
			}
			if err := m.StartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &UpgradeProgressCount{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &StageUpgradeResults{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeProgressCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeProgressCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeProgressCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			m.Completed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Completed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageUpgradeResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageUpgradeResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageUpgradeResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applications = append(m.Applications, &StageApplication{})
			if err := m.Applications[len(m.Applications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &ApplicationObj{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageDownload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageDownload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimestamp == nil {
				m.StartTimestamp = &types.Timestamp{}
			}
			if err := m.StartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &InstallResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimestamp == nil {
				m.StartTimestamp = &types.Timestamp{}
			}
			if err := m.StartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &OSNodeResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSNodeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSNodeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSNodeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &InstallResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwUpgradeProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwUpgradeProgress == nil {
				m.SwUpgradeProgress = &SWUpgradeProgress{}
			}
			if err := m.SwUpgradeProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwUpgradeProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwUpgradeProgress == nil {
				m.SwUpgradeProgress = &SWUpgradeProgress{}
			}
			if err := m.SwUpgradeProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwUpgradeProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwUpgradeProgress == nil {
				m.SwUpgradeProgress = &SWUpgradeProgress{}
			}
			if err := m.SwUpgradeProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwUpgradeProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwUpgradeProgress == nil {
				m.SwUpgradeProgress = &SWUpgradeProgress{}
			}
			if err := m.SwUpgradeProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

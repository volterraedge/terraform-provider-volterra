// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package api_credential

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCActivate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Activate(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCActivateServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ActivateServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCCreate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.CreateRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Create(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCCreateServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateServiceCredentialsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.CreateServiceCredentialsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGet(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Get(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGetScimToken(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ScimTokenRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ScimTokenRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetScimToken(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGetServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.List(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCListServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRecreateScimToken(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &RecreateScimTokenRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.RecreateScimTokenRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RecreateScimToken(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRenew(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &RenewRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.RenewRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Renew(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRenewServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &RenewRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.RenewRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RenewServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCReplaceServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ReplaceServiceCredentialsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ReplaceServiceCredentialsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ReplaceServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRevoke(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Revoke(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRevokeScimToken(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ScimTokenRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ScimTokenRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RevokeScimToken(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRevokeServiceCredentials(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RevokeServiceCredentials(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["Activate"] = ccl.doRPCActivate

	rpcFns["ActivateServiceCredentials"] = ccl.doRPCActivateServiceCredentials

	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["CreateServiceCredentials"] = ccl.doRPCCreateServiceCredentials

	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["GetScimToken"] = ccl.doRPCGetScimToken

	rpcFns["GetServiceCredentials"] = ccl.doRPCGetServiceCredentials

	rpcFns["List"] = ccl.doRPCList

	rpcFns["ListServiceCredentials"] = ccl.doRPCListServiceCredentials

	rpcFns["RecreateScimToken"] = ccl.doRPCRecreateScimToken

	rpcFns["Renew"] = ccl.doRPCRenew

	rpcFns["RenewServiceCredentials"] = ccl.doRPCRenewServiceCredentials

	rpcFns["ReplaceServiceCredentials"] = ccl.doRPCReplaceServiceCredentials

	rpcFns["Revoke"] = ccl.doRPCRevoke

	rpcFns["RevokeScimToken"] = ccl.doRPCRevokeScimToken

	rpcFns["RevokeServiceCredentials"] = ccl.doRPCRevokeServiceCredentials

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCActivate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCActivateServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCCreate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.CreateRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("expiration_days", fmt.Sprintf("%v", req.ExpirationDays))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("spec", fmt.Sprintf("%v", req.Spec))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CreateResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.CreateResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCCreateServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateServiceCredentialsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.CreateServiceCredentialsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("expiration_days", fmt.Sprintf("%v", req.ExpirationDays))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		for _, item := range req.NamespaceRoles {
			q.Add("namespace_roles", fmt.Sprintf("%v", item))
		}
		q.Add("password", fmt.Sprintf("%v", req.Password))
		q.Add("service_credential_choice", fmt.Sprintf("%v", req.ServiceCredentialChoice))
		q.Add("type", fmt.Sprintf("%v", req.Type))
		for _, item := range req.UserGroupNames {
			q.Add("user_group_names", fmt.Sprintf("%v", item))
		}
		q.Add("virtual_k8s_name", fmt.Sprintf("%v", req.VirtualK8SName))
		q.Add("virtual_k8s_namespace", fmt.Sprintf("%v", req.VirtualK8SNamespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CreateResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.CreateResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGet(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.GetResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGetScimToken(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ScimTokenRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ScimTokenRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.GetResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGetServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetServiceCredentialsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.GetServiceCredentialsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.ListResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCListServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.ListResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRecreateScimToken(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &RecreateScimTokenRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.RecreateScimTokenRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("expiration_days", fmt.Sprintf("%v", req.ExpirationDays))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CreateResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.CreateResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRenew(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &RenewRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.RenewRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("expiration_days", fmt.Sprintf("%v", req.ExpirationDays))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRenewServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &RenewRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.RenewRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("expiration_days", fmt.Sprintf("%v", req.ExpirationDays))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCReplaceServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ReplaceServiceCredentialsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ReplaceServiceCredentialsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("namespace_access", fmt.Sprintf("%v", req.NamespaceAccess))
		for _, item := range req.UserGroupNames {
			q.Add("user_group_names", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ReplaceServiceCredentialsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.ReplaceServiceCredentialsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRevoke(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRevokeScimToken(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ScimTokenRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.ScimTokenRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRevokeServiceCredentials(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.api_credential.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.api_credential.StatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["Activate"] = ccl.doRPCActivate

	rpcFns["ActivateServiceCredentials"] = ccl.doRPCActivateServiceCredentials

	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["CreateServiceCredentials"] = ccl.doRPCCreateServiceCredentials

	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["GetScimToken"] = ccl.doRPCGetScimToken

	rpcFns["GetServiceCredentials"] = ccl.doRPCGetServiceCredentials

	rpcFns["List"] = ccl.doRPCList

	rpcFns["ListServiceCredentials"] = ccl.doRPCListServiceCredentials

	rpcFns["RecreateScimToken"] = ccl.doRPCRecreateScimToken

	rpcFns["Renew"] = ccl.doRPCRenew

	rpcFns["RenewServiceCredentials"] = ccl.doRPCRenewServiceCredentials

	rpcFns["ReplaceServiceCredentials"] = ccl.doRPCReplaceServiceCredentials

	rpcFns["Revoke"] = ccl.doRPCRevoke

	rpcFns["RevokeScimToken"] = ccl.doRPCRevokeScimToken

	rpcFns["RevokeServiceCredentials"] = ccl.doRPCRevokeServiceCredentials

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) Activate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.Activate")
	return c.CustomAPIServer.Activate(ctx, in)
}
func (c *customAPIInprocClient) ActivateServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.ActivateServiceCredentials")
	return c.CustomAPIServer.ActivateServiceCredentials(ctx, in)
}
func (c *customAPIInprocClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.Create")
	return c.CustomAPIServer.Create(ctx, in)
}
func (c *customAPIInprocClient) CreateServiceCredentials(ctx context.Context, in *CreateServiceCredentialsRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.CreateServiceCredentials")
	return c.CustomAPIServer.CreateServiceCredentials(ctx, in)
}
func (c *customAPIInprocClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.Get")
	return c.CustomAPIServer.Get(ctx, in)
}
func (c *customAPIInprocClient) GetScimToken(ctx context.Context, in *ScimTokenRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.GetScimToken")
	return c.CustomAPIServer.GetScimToken(ctx, in)
}
func (c *customAPIInprocClient) GetServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetServiceCredentialsResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.GetServiceCredentials")
	return c.CustomAPIServer.GetServiceCredentials(ctx, in)
}
func (c *customAPIInprocClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.List")
	return c.CustomAPIServer.List(ctx, in)
}
func (c *customAPIInprocClient) ListServiceCredentials(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.ListServiceCredentials")
	return c.CustomAPIServer.ListServiceCredentials(ctx, in)
}
func (c *customAPIInprocClient) RecreateScimToken(ctx context.Context, in *RecreateScimTokenRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.RecreateScimToken")
	return c.CustomAPIServer.RecreateScimToken(ctx, in)
}
func (c *customAPIInprocClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.Renew")
	return c.CustomAPIServer.Renew(ctx, in)
}
func (c *customAPIInprocClient) RenewServiceCredentials(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.RenewServiceCredentials")
	return c.CustomAPIServer.RenewServiceCredentials(ctx, in)
}
func (c *customAPIInprocClient) ReplaceServiceCredentials(ctx context.Context, in *ReplaceServiceCredentialsRequest, opts ...grpc.CallOption) (*ReplaceServiceCredentialsResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.ReplaceServiceCredentials")
	return c.CustomAPIServer.ReplaceServiceCredentials(ctx, in)
}
func (c *customAPIInprocClient) Revoke(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.Revoke")
	return c.CustomAPIServer.Revoke(ctx, in)
}
func (c *customAPIInprocClient) RevokeScimToken(ctx context.Context, in *ScimTokenRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.RevokeScimToken")
	return c.CustomAPIServer.RevokeScimToken(ctx, in)
}
func (c *customAPIInprocClient) RevokeServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.api_credential.CustomAPI.RevokeServiceCredentials")
	return c.CustomAPIServer.RevokeServiceCredentials(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) Activate(ctx context.Context, in *GetRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Activate' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.Activate"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Activate(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ActivateServiceCredentials(ctx context.Context, in *GetRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ActivateServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.ActivateServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ActivateServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Create(ctx context.Context, in *CreateRequest) (*CreateResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CreateResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.CreateRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Create' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.Create"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Create(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.CreateResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) CreateServiceCredentials(ctx context.Context, in *CreateServiceCredentialsRequest) (*CreateResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CreateResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.CreateServiceCredentialsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.CreateServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.CreateServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.CreateResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Get(ctx context.Context, in *GetRequest) (*GetResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Get' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.Get"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Get(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) GetScimToken(ctx context.Context, in *ScimTokenRequest) (*GetResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ScimTokenRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetScimToken' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.GetScimToken"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetScimToken(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) GetServiceCredentials(ctx context.Context, in *GetRequest) (*GetServiceCredentialsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetServiceCredentialsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.GetServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetServiceCredentialsResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ListResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.List' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.List"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.List(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ListResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ListServiceCredentials(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ListResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ListServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.ListServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ListResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) RecreateScimToken(ctx context.Context, in *RecreateScimTokenRequest) (*CreateResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CreateResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.RecreateScimTokenRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RecreateScimToken' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.RecreateScimToken"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RecreateScimToken(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.CreateResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Renew(ctx context.Context, in *RenewRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.RenewRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Renew' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.Renew"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Renew(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) RenewServiceCredentials(ctx context.Context, in *RenewRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.RenewRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RenewServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.RenewServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RenewServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ReplaceServiceCredentials(ctx context.Context, in *ReplaceServiceCredentialsRequest) (*ReplaceServiceCredentialsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ReplaceServiceCredentialsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ReplaceServiceCredentialsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ReplaceServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.ReplaceServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReplaceServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ReplaceServiceCredentialsResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Revoke(ctx context.Context, in *GetRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Revoke' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.Revoke"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Revoke(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) RevokeScimToken(ctx context.Context, in *ScimTokenRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.ScimTokenRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RevokeScimToken' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.RevokeScimToken"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RevokeScimToken(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) RevokeServiceCredentials(ctx context.Context, in *GetRequest) (*StatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.api_credential.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *StatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.api_credential.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RevokeServiceCredentials' operation on 'api_credential'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.api_credential.CustomAPI.RevokeServiceCredentials"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RevokeServiceCredentials(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.api_credential.StatusResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "API/Service credential custom API",
        "description": "F5XC supports 2 variation of credentials - \n1. My Credentials or API credentials\n2. Service Credentials\n\nCredentials created via My credential or API credential inherits same user that of the creator\nand it gets same RBAC applied to the user. So when this credential is used in APIs, it will \nhave same response/audit as creator of the credential is. Generate this credential if you want to\nautomate or access APIs via CLI as yourself.\n\nservice credential on the other hand will have a separte service user associated and RBAC can be\nmanaged differently per namespace than that of the original user creating it.\n\nFor each these credentials, user can request credential in 3 different formats as required by\ntheir usecase:\n\n* API certificate - a password protected P12 certificate bundle\n* virtual K8s kubeconfig - a kubeconfig to access a cluster with embedded user access with client certificate.\n* API token - an easy to use secret that can be send part of HTTP request header Authorization: APIToken \u003cvalue\u003e",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/activate/api_credentials": {
            "post": {
                "summary": "Activate API credential",
                "description": "For API credential activation/deactivation.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.Activate",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-activate"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.Activate"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/activate/service_credentials": {
            "post": {
                "summary": "Activate API service credential",
                "description": "For Service credential activation/deactivation.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.ActivateServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-activateservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.ActivateServiceCredentials"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/api_credentials": {
            "get": {
                "summary": "List API Credentials",
                "description": "Returns list of api credential of all types created by the user.\nQuery will look into tenants system namespace.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.List"
            },
            "post": {
                "summary": "Create API Credentials",
                "description": "user can request 3 types of credential for themselves. \nAPI_TOKEN, API_CERTIFICATE and KUBE_CONFIG.\n\nan API_TOKEN is an easy to use secret that can be send part of HTTP request header Authorization: APIToken \u003cvalue\u003e\nin the create request expiry can be set additionally. F5XC also supports renew and revoke of API_TOKENs.\nan API_CERTIFICATE is a password protected P12 certificate bundle document and can be used as client certificate.\nwhen sending create request, user can request with an expiry and password. F5XC Identity Authority (IA)\nmints new certificate with required credentials and is shared in the response as API Certificate. \na virtual K8s kubeconfig can be generate with type KUBE_CONFIG. Create request can specify cluster, namespace and expiry\nwith embedded user access with client certificate.\n\nrequest can specify name, expiry and type of credential required. since this credential inherits the creator's RBAC\nservice will determine the user from request context.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.Create"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/api_credentials/{name}": {
            "get": {
                "summary": "Get API Credentials",
                "description": "Get implements api credential query by name.\nReturns api credential object. Query will look into tenants system namespace for api credential by name.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Credential name\n\nx-required\nx-example: \"value\"\nName of API credential.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.Get"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/renew/api_credentials": {
            "post": {
                "summary": "Renew API credential",
                "description": "Renew user's my credential expiry.\nRenewal is only supported for the credential type API_TOKEN.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.Renew",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\" .",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialRenewRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-renew"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.Renew"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/renew/service_credentials": {
            "post": {
                "summary": "Renew API service credential",
                "description": "Renew service credential's expiry.\nRenewal is only supported for the credential type SERVICE_API_TOKEN.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.RenewServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\" .",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialRenewRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-renewservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.RenewServiceCredentials"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/revoke/api_credentials": {
            "post": {
                "summary": "Revoke API credential",
                "description": "For API credential revoke/deletion.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.Revoke",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-revoke"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.Revoke"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/revoke/scim_token": {
            "post": {
                "summary": "Revoke SCIM API credential",
                "description": "For SCIM API credential revoke/deletion.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.RevokeScimToken",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialScimTokenRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-revokescimtoken"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.RevokeScimToken"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/revoke/service_credentials": {
            "post": {
                "summary": "Revoke Service credential",
                "description": "For Service credential revoke/deletion.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.RevokeServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-revokeservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.RevokeServiceCredentials"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/scim_token": {
            "get": {
                "summary": "Get Scim Token",
                "description": "GetScimToken implements querying of scim token.\nSCIM API token value will be visible only on create API response.\nThis detail RPC will show the current token's expiry. Returns api credential object.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.GetScimToken",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-getscimtoken"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.GetScimToken"
            },
            "post": {
                "summary": "Create/Re-create SCIM API token",
                "description": "request to create/re-create new SCIM API credential.\nNote: Only one valid (non-expired) SCIM token could exist for a tenant, and only if SCIM is enabled for the tenant.\nIf a valid SCIM token is already minted, we would revoke the current one and generate a new one.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.RecreateScimToken",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialRecreateScimTokenRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-recreatescimtoken"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.RecreateScimToken"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/service_credentials": {
            "get": {
                "summary": "List service credentials",
                "description": "request to list service credentials created by user.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.ListServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-listservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.ListServiceCredentials"
            },
            "post": {
                "summary": "Create service credentials",
                "description": "request to create new service credentials.\nuser can specify name, expiry and list of namespce and allowed role of the service user.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.CreateServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialCreateServiceCredentialsRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-createservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.CreateServiceCredentials"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/service_credentials/{name}": {
            "get": {
                "summary": "Get Service Credential",
                "description": "Get implements service credential query by name.\nReturns service credential object. Query will look into tenants system namespace for service credential by name.",
                "operationId": "ves.io.schema.api_credential.CustomAPI.GetServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialGetServiceCredentialsResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-required\nx-example: \"system\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Credential name\n\nx-required\nx-example: \"value\"\nName of API credential.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-getservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.GetServiceCredentials"
            },
            "put": {
                "summary": "Replace service credentials",
                "description": "request to replace user_groups and roles in service credentials.\nNote - for updating expiry use RenewServiceCredentials and to active/inactive service credential use ActivateServiceCredentials API",
                "operationId": "ves.io.schema.api_credential.CustomAPI.ReplaceServiceCredentials",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/api_credentialReplaceServiceCredentialsResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"system\"\nNamespace of the service credential user.\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Service Credential name\n\nx-required\nx-example: \"api-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147a\"\nName of service credential object.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_credentialReplaceServiceCredentialsRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-api_credential-customapi-replaceservicecredentials"
                },
                "x-ves-proto-rpc": "ves.io.schema.api_credential.CustomAPI.ReplaceServiceCredentials"
            },
            "x-displayname": "API Credential",
            "x-ves-proto-service": "ves.io.schema.api_credential.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "api_credentialAPICredentialType": {
            "type": "string",
            "description": "Types of API credential given when requesting credentials from volterra\n\nF5XC user certificate to access F5XC public API using mTLS\nusing self credential (my credential)\nKubernetes config file to access Virtual Kubernetes API in Volterra\nusing self credential (my credential)\nAPI token to access F5XC public API\nusing self credential (my credential)\nAPI token for service credentials\nusing service user credential (service credential)\nAPI certificate for service credentials\nusing service user credential (service credential)\nService Credential kubeconfig\nusing service user credential (service credential)\nKubeconfig for accessing Site via Global Controller\nusing self credential (my credential)\nToken for the SCIM public APIs used to sync users and groups with the F5XC platform.\nExternal identity provider's SCIM client can use this token as Bearer token with Authorization header\nService Credential Kubeconfig for accessing Site via Global Controller\nusing service user credential (service credential)",
            "title": "API Credential type",
            "enum": [
                "API_CERTIFICATE",
                "KUBE_CONFIG",
                "API_TOKEN",
                "SERVICE_API_TOKEN",
                "SERVICE_API_CERTIFICATE",
                "SERVICE_KUBE_CONFIG",
                "SITE_GLOBAL_KUBE_CONFIG",
                "SCIM_API_TOKEN",
                "SERVICE_SITE_GLOBAL_KUBE_CONFIG"
            ],
            "default": "API_CERTIFICATE",
            "x-displayname": "Credential Type",
            "x-ves-proto-enum": "ves.io.schema.api_credential.APICredentialType"
        },
        "api_credentialApiCertificateType": {
            "type": "object",
            "description": "Service API Certificate parameters",
            "title": "api_certificate",
            "x-displayname": "Service API Certificate Specification",
            "x-ves-proto-message": "ves.io.schema.api_credential.ApiCertificateType",
            "properties": {
                "password": {
                    "type": "string",
                    "description": " Password is used for generating an API certificate P12 bundle user can use to protect access to it.\n this password will not be saved/persisted anywhere in the system. Applicable for credential type API_CERTIFICATE\n Users have to use this password when they use the certificate, e.g. in curl or while adding to key chain.\n\nExample: - \"myPassw0rd123\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 50\n  ves.io.schema.rules.string.min_bytes: 6\n",
                    "title": "Password for API certificate",
                    "minLength": 6,
                    "maxLength": 50,
                    "x-displayname": "Password",
                    "x-ves-example": "myPassw0rd123",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "50",
                        "ves.io.schema.rules.string.min_bytes": "6"
                    }
                }
            }
        },
        "api_credentialCreateRequest": {
            "type": "object",
            "description": "CreateRequest is the request format for generating api credential.",
            "title": "Create Request",
            "x-displayname": "Create Request",
            "x-ves-displayorder": "1,2,3,5",
            "x-ves-proto-message": "ves.io.schema.api_credential.CreateRequest",
            "properties": {
                "expiration_days": {
                    "type": "integer",
                    "description": "Qty of days of service credential expiration.\n\nExample: -\"value\"-",
                    "title": "Expiry in days",
                    "format": "int64",
                    "x-displayname": "Expiry in days",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": "Name of API credential record. It will be saved in metadata.\n\nExample: -\"value\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                },
                "namespace": {
                    "type": "string",
                    "description": "Value of namespace is always \"system\".\n\nExample: -\"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the api credential",
                    "title": "Specification",
                    "$ref": "#/definitions/api_credentialCustomCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "api_credentialCreateResponse": {
            "type": "object",
            "description": "CreateResponse is the response format for the credential's create request.",
            "title": "Create response",
            "x-displayname": "Create Response",
            "x-ves-displayorder": "1",
            "x-ves-proto-message": "ves.io.schema.api_credential.CreateResponse",
            "properties": {
                "active": {
                    "type": "boolean",
                    "format": "boolean"
                },
                "data": {
                    "type": "string",
                    "description": " data is the response format based on the API credential type.\n In case of API_CERTIFICATES, the response is the base64 encoded value of \n certificate in PKCS12 format.\n In case of KUBE_CONFIG, the response is the base64 encoded value of the K8s kubeconfig file\n with contents as requested - cluster,namespace and base64 encoded certificate, key and CA.\n\nExample: - \"value\"-",
                    "title": "Credentials",
                    "x-displayname": "Credentials",
                    "x-ves-example": "value"
                },
                "expiration_timestamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api_credentialCreateServiceCredentialsRequest": {
            "type": "object",
            "description": "CreateServiceCredentialsRequest is the request format for creating service credentials.",
            "title": "Create Service Credentials Request",
            "x-displayname": "Create Service Credentials Request",
            "x-ves-oneof-field-service_credential_choice": "[\"api_certificate\",\"api_token\",\"site_kubeconfig\",\"vk8s_kubeconfig\"]",
            "x-ves-proto-message": "ves.io.schema.api_credential.CreateServiceCredentialsRequest",
            "properties": {
                "api_certificate": {
                    "description": "Exclusive with [api_token site_kubeconfig vk8s_kubeconfig]\n Service API Certificate parameters",
                    "title": "api_certificate",
                    "$ref": "#/definitions/api_credentialApiCertificateType",
                    "x-displayname": "Service API Certificate Specification"
                },
                "api_token": {
                    "description": "Exclusive with [api_certificate site_kubeconfig vk8s_kubeconfig]\n Service API Token parameters",
                    "title": "api_token",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Service API Token Specification"
                },
                "expiration_days": {
                    "type": "integer",
                    "description": " Qty of days of service credential expiration.\n\nExample: - \"value\"-",
                    "title": "Expiry in days",
                    "format": "int64",
                    "x-displayname": "Expiry in days",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " Name of API credential record. It will be saved in metadata.\n\nExample: - \"svc-cred-app1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "svc-cred-app1"
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\".\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "namespace_roles": {
                    "type": "array",
                    "description": " list of roles per namespace to be assigned to service credentials.\n\nExample: - \"value\"-",
                    "title": "Roles",
                    "items": {
                        "$ref": "#/definitions/schemaNamespaceRoleType"
                    },
                    "x-displayname": "List of roles",
                    "x-ves-example": "value"
                },
                "password": {
                    "type": "string",
                    "description": " Password is used for generating an API certificate P12 bundle user can use to protect access to it.\n this password will not be saved/persisted anywhere in the system. Applicable for credential type API_CERTIFICATE\n Users have to use this password when they use the certificate, e.g. in curl or while adding to key chain.\n\nExample: - \"myPassw0rd123\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Password for API certificate",
                    "x-displayname": "Password",
                    "x-ves-example": "myPassw0rd123",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "site_kubeconfig": {
                    "description": "Exclusive with [api_certificate api_token vk8s_kubeconfig]\n Site Global Kube Config parameters",
                    "title": "site_kubeconfig",
                    "$ref": "#/definitions/api_credentialSiteKubeconfigType",
                    "x-displayname": "Site Global Kube Config Specification"
                },
                "type": {
                    "description": " Type of API credential, API credentials, kubeconfig or token.\n Please move to the oneof 'service_credential_choice' field for providing the details.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Type",
                    "$ref": "#/definitions/api_credentialAPICredentialType",
                    "x-displayname": "Credential Type",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "user_group_names": {
                    "type": "array",
                    "description": " list of user_groups assigned to this service credential\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "User Groups Names",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                },
                "virtual_k8s_name": {
                    "type": "string",
                    "description": " Name of virtual_k8s cluster. Applicable for KUBE_CONFIG.\n\nExample: - \"vk8s-product-app1\"-",
                    "title": "virtual k8s cluster name",
                    "x-displayname": "vK8s Cluster",
                    "x-ves-example": "vk8s-product-app1"
                },
                "virtual_k8s_namespace": {
                    "type": "string",
                    "description": " Namespace of virtual_k8s cluster. Applicable for KUBE_CONFIG.\n\nExample: - \"app-ns1\"-",
                    "title": "Virtual k8s namespace",
                    "x-displayname": "vK8s Namespace",
                    "x-ves-example": "app-ns1"
                },
                "vk8s_kubeconfig": {
                    "description": "Exclusive with [api_certificate api_token site_kubeconfig]\n Service Kube Config parameters",
                    "title": "vk8s_kubeconfig",
                    "$ref": "#/definitions/api_credentialVk8sKubeconfigType",
                    "x-displayname": "Service Kube Config Specification"
                }
            }
        },
        "api_credentialCustomCreateSpecType": {
            "type": "object",
            "description": "Create request specification.",
            "title": "Create Spec Type",
            "x-displayname": "Create API Credential",
            "x-ves-displayorder": "1,2,5,3,4",
            "x-ves-proto-message": "ves.io.schema.api_credential.CustomCreateSpecType",
            "properties": {
                "password": {
                    "type": "string",
                    "description": " Password is used for generating an API certificate P12 bundle user can use to protect access to it.\n this password will not be saved/persisted anywhere in the system. Applicable for credential type API_CERTIFICATE\n Users have to use this password when they use the certificate, e.g. in curl or while adding to key chain.\n\nExample: - \"myPassw0rd123\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Password for API certificate",
                    "x-displayname": "Password",
                    "x-ves-example": "myPassw0rd123",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "type": {
                    "description": " Type of API credential, API credentials, kubeconfig or token.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Type",
                    "$ref": "#/definitions/api_credentialAPICredentialType",
                    "x-displayname": "Credential Type",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_k8s_name": {
                    "type": "string",
                    "description": " Name of virtual K8s cluster. Applicable for KUBE_CONFIG.\n\nExample: - \"vk8s-product-app1\"-",
                    "title": "virtual k8s cluster name",
                    "x-displayname": "vK8s Cluster",
                    "x-ves-example": "vk8s-product-app1"
                },
                "virtual_k8s_namespace": {
                    "type": "string",
                    "description": " Namespace of virtual K8s cluster. Applicable for KUBE_CONFIG.\n\nExample: - \"app-ns1\"-",
                    "title": "Virtual K8s namespace",
                    "x-displayname": "vK8s Namespace",
                    "x-ves-example": "app-ns1"
                }
            }
        },
        "api_credentialGetRequest": {
            "type": "object",
            "description": "Get credential object with a given name.",
            "title": "Get credential request",
            "x-displayname": "Get Credential",
            "x-ves-proto-message": "ves.io.schema.api_credential.GetRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of API credential.\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Credential name",
                    "x-displayname": "Name",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\".\n\nExample: - \"system\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "api_credentialGetResponse": {
            "type": "object",
            "description": "Response of get credential request with a given name.",
            "title": "Get credential response",
            "x-displayname": "Get Credential Response",
            "x-ves-proto-message": "ves.io.schema.api_credential.GetResponse",
            "properties": {
                "object": {
                    "description": " Contains the information about request to generated certificate , kubeconfig, or api token.",
                    "title": "Credential information",
                    "$ref": "#/definitions/api_credentialObject",
                    "x-displayname": "Credential Record"
                }
            }
        },
        "api_credentialGetServiceCredentialsResponse": {
            "type": "object",
            "description": "Response of get service credentials request with a given name.",
            "title": "Get service credentials response",
            "x-displayname": "Get Service Credentials Response",
            "x-ves-proto-message": "ves.io.schema.api_credential.GetServiceCredentialsResponse",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": " Possibility to deactivate credential with no deletion.\n\nExample: - \"true\"-",
                    "title": "Active",
                    "format": "boolean",
                    "x-displayname": "Active",
                    "x-ves-example": "true"
                },
                "create_timestamp": {
                    "type": "string",
                    "description": " Create time of service credential.",
                    "title": "Create timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Time"
                },
                "expiry_timestamp": {
                    "type": "string",
                    "description": " Expiry time of service credential.",
                    "title": "Expiry time",
                    "format": "date-time",
                    "x-displayname": "Expiry Time"
                },
                "name": {
                    "type": "string",
                    "description": " Name of service credential object.\n\nExample: - \"value\"-",
                    "title": "Credential name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of service credential object.\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "namespace_access": {
                    "description": " List of directly attached roles that the service user has for each namespace.",
                    "title": "Namespace Access",
                    "$ref": "#/definitions/schemaNamespaceAccessType",
                    "x-displayname": "namespace access"
                },
                "type": {
                    "description": " Type of service credential. Possible values include\n     * SERVICE_API_TOKEN\n     * SERVICE_API_CERTIFICATE\n     * SERVICE_KUBE_CONFIG\n     * SERVICE_SITE_GLOBAL_KUBE_CONFIG",
                    "title": "Type of credential",
                    "$ref": "#/definitions/api_credentialAPICredentialType",
                    "x-displayname": "Credential Type"
                },
                "uid": {
                    "type": "string",
                    "description": " uid of service credential object.\n\nExample: - \"fa45979f-4e41-4f4b-8b0b-c3ab844ab0aa\"-",
                    "title": "uid of the record",
                    "x-displayname": "UUID",
                    "x-ves-example": "fa45979f-4e41-4f4b-8b0b-c3ab844ab0aa"
                },
                "user_email": {
                    "type": "string",
                    "description": " email of the service user attached to service credential .\n\nExample: - \"admin@acmecorp.com\"-",
                    "title": "Email of user",
                    "x-displayname": "User",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "user_group_names": {
                    "type": "array",
                    "description": " user group list associated to this service credential.\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "User Groups Names",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "User Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                }
            }
        },
        "api_credentialGlobalSpecType": {
            "type": "object",
            "description": "Keeps track of user requested API credentials",
            "title": "API credentials",
            "x-displayname": "API Credentials",
            "x-ves-proto-message": "ves.io.schema.api_credential.GlobalSpecType",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": " Possibility to deactivate/activate credential with no deletion",
                    "title": "Active",
                    "format": "boolean",
                    "x-displayname": "Active"
                },
                "certificate_serial_num": {
                    "type": "string",
                    "description": " Serial number of the client certificate part of credential type API Certificate or Kubeconfig\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 32\n",
                    "title": "Certificate Serial Number",
                    "maxLength": 32,
                    "x-displayname": "Certificate Serial Number",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "32"
                    }
                },
                "created_timestamp": {
                    "type": "string",
                    "description": " Timestamp of credential creation",
                    "title": "Created timestamp",
                    "format": "date-time",
                    "x-displayname": "Created timestamp"
                },
                "digest": {
                    "type": "string",
                    "description": " Digest sha1 of credential",
                    "title": "Digest sha1",
                    "x-displayname": "Digest sha1"
                },
                "expiration_timestamp": {
                    "type": "string",
                    "description": " Timestamp of credential expiration",
                    "title": "Expiry timestamp",
                    "format": "date-time",
                    "x-displayname": "Expiry timestamp"
                },
                "site_name": {
                    "type": "string",
                    "description": " Site name when global kubeconfig is issued for physical k8s site",
                    "title": "Site Name",
                    "x-displayname": "Site Name"
                },
                "type": {
                    "description": " Type of API credential",
                    "title": "API Credential type",
                    "$ref": "#/definitions/api_credentialAPICredentialType",
                    "x-displayname": "Credential Type"
                },
                "users": {
                    "type": "array",
                    "description": " Reference to user for whom API credential is created\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "user requesting credential",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "User",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "virtual_k8s_name": {
                    "type": "string",
                    "description": " Name of virtual K8s cluster",
                    "title": "Virtual K8s",
                    "x-displayname": "Virtual K8s"
                },
                "virtual_k8s_namespace": {
                    "type": "string",
                    "description": " Namespace of virtual_k8s",
                    "title": "Virtual K8s namespace",
                    "x-displayname": "Namespace"
                }
            }
        },
        "api_credentialListResponse": {
            "type": "object",
            "description": "Response of request to list all of users credential objects.",
            "title": "List credential response",
            "x-displayname": "List Credential Response",
            "x-ves-proto-message": "ves.io.schema.api_credential.ListResponse",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " List of credential items.",
                    "title": "List of the credentials",
                    "items": {
                        "$ref": "#/definitions/api_credentialListResponseItem"
                    },
                    "x-displayname": "Credentials"
                }
            }
        },
        "api_credentialListResponseItem": {
            "type": "object",
            "description": "Each item of credential list request.",
            "title": "List Credential item",
            "x-displayname": "List credential response item",
            "x-ves-proto-message": "ves.io.schema.api_credential.ListResponseItem",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": " Possibility to deactivate credential with no deletion.\n\nExample: - \"true\"-",
                    "title": "Active",
                    "format": "boolean",
                    "x-displayname": "Active",
                    "x-ves-example": "true"
                },
                "create_timestamp": {
                    "type": "string",
                    "description": " Create time of API credential.",
                    "title": "Create timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Time"
                },
                "expiry_timestamp": {
                    "type": "string",
                    "description": " Expiry time of credential.",
                    "title": "Expiry time",
                    "format": "date-time",
                    "x-displayname": "Expiry Time"
                },
                "name": {
                    "type": "string",
                    "description": " Name of API credential object.\n\nExample: - \"value\"-",
                    "title": "Credential name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of API credential object.\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "type": {
                    "description": " Type of API credential.",
                    "title": "Type of credential",
                    "$ref": "#/definitions/api_credentialAPICredentialType",
                    "x-displayname": "Credential Type"
                },
                "uid": {
                    "type": "string",
                    "description": " UUID of API credential object.\n\nExample: - \"fa45979f-4e41-4f4b-8b0b-c3ab844ab0aa\"-",
                    "title": "uuid of the record",
                    "x-displayname": "UUID",
                    "x-ves-example": "fa45979f-4e41-4f4b-8b0b-c3ab844ab0aa"
                },
                "user_email": {
                    "type": "string",
                    "description": " User email of user that requested credential .\n\nExample: - \"admin@acmecorp.com\"-",
                    "title": "Email of user",
                    "x-displayname": "User",
                    "x-ves-example": "admin@acmecorp.com"
                }
            }
        },
        "api_credentialObject": {
            "type": "object",
            "description": "API Credential object represents the user request to create a certificate.",
            "title": "API Credentials",
            "x-displayname": "Credentials",
            "x-ves-proto-message": "ves.io.schema.api_credential.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the api credential",
                    "title": "spec",
                    "$ref": "#/definitions/api_credentialSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "api_credentialRecreateScimTokenRequest": {
            "type": "object",
            "description": "RecreateScimTokenRequest is the request format for generating SCIM api credential.",
            "title": "Recreate SCIM Token Request",
            "x-displayname": "Recreate SCIM Token Request",
            "x-ves-proto-message": "ves.io.schema.api_credential.RecreateScimTokenRequest",
            "properties": {
                "expiration_days": {
                    "type": "integer",
                    "description": " Qty of days of service credential expiration. Default value is 180.\n Expiration days value can range between 1 and 730.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 730\n",
                    "title": "Expiry in days",
                    "format": "int64",
                    "x-displayname": "Expiry in days",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "730"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\".\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                }
            }
        },
        "api_credentialRenewRequest": {
            "type": "object",
            "description": "Request to renew a credential object.",
            "title": "Renew Credential request",
            "x-displayname": "Renew Credentials",
            "x-ves-proto-message": "ves.io.schema.api_credential.RenewRequest",
            "properties": {
                "expiration_days": {
                    "type": "integer",
                    "description": " Qty of days of service credential expiration.\n\nExample: - \"value\"-",
                    "title": "Expiry in days",
                    "format": "int64",
                    "x-displayname": "Expiry in days",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " Name of API credential object.\n\nExample: - \"api-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147a\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Credential name",
                    "x-displayname": "Name",
                    "x-ves-example": "api-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147a",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\" .\n\nExample: - \"system\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "api_credentialReplaceServiceCredentialsRequest": {
            "type": "object",
            "description": "request format for replacing service credentials.",
            "title": "Replace Service Credentials Request",
            "x-displayname": "Replace Service Credentials Request",
            "x-ves-proto-message": "ves.io.schema.api_credential.ReplaceServiceCredentialsRequest",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of service credential object.\n\nExample: - \"api-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147a\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Service Credential name",
                    "x-displayname": "Name",
                    "x-ves-example": "api-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147a",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the service credential user.\n Value of namespace is always \"system\".\n\nExample: - \"system\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "namespace_access": {
                    "description": " List of directly attached roles that the service user has for each namespace.",
                    "title": "Namespace Access",
                    "$ref": "#/definitions/schemaNamespaceAccessType",
                    "x-displayname": "namespace access"
                },
                "user_group_names": {
                    "type": "array",
                    "description": " list of user_groups to be replaced for this service credentials.\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "User Groups Names",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                }
            }
        },
        "api_credentialReplaceServiceCredentialsResponse": {
            "type": "object",
            "description": "response format for the credential's replace request.",
            "title": "Replace service credentials response",
            "x-displayname": "Replace service credentials response",
            "x-ves-proto-message": "ves.io.schema.api_credential.ReplaceServiceCredentialsResponse",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": " Specifies if service credential is active or not\n\nExample: - \"true\"-",
                    "title": "Active",
                    "format": "boolean",
                    "x-displayname": "Active",
                    "x-ves-example": "true"
                },
                "expiration_timestamp": {
                    "type": "string",
                    "description": " Specifies the expiration timestamp",
                    "title": "Expiry",
                    "format": "date-time",
                    "x-displayname": "Expiry"
                },
                "name": {
                    "type": "string",
                    "description": " Name of API credential record.\n\nExample: - \"svc-cred-app1\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "svc-cred-app1"
                }
            }
        },
        "api_credentialScimTokenRequest": {
            "type": "object",
            "description": "ScimTokenRequest is used for fetching or revoking scim token",
            "title": "Scim Token Request",
            "x-displayname": "Scim Token Request",
            "x-ves-proto-message": "ves.io.schema.api_credential.ScimTokenRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\".\n\nExample: - \"system\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "api_credentialSiteKubeconfigType": {
            "type": "object",
            "description": "Site Global Kube Config parameters",
            "title": "site_kubeconfig",
            "x-displayname": "Site Global Kube Config Specification",
            "x-ves-proto-message": "ves.io.schema.api_credential.SiteKubeconfigType",
            "properties": {
                "site": {
                    "type": "string",
                    "description": " Name of the site for which kubeconfig is being requested.\n\nExample: - \"ce398\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 64\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "Site",
                    "minLength": 1,
                    "maxLength": 64,
                    "x-displayname": "Site",
                    "x-ves-example": "ce398",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "64",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                }
            }
        },
        "api_credentialSpecType": {
            "type": "object",
            "description": "Shape of the api credential specification",
            "title": "Specification for API credentials",
            "x-displayname": "Specifications",
            "x-ves-proto-message": "ves.io.schema.api_credential.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/api_credentialGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "api_credentialStatusResponse": {
            "type": "object",
            "description": "API credential status response",
            "title": "API credential status response",
            "x-displayname": "API credential status response",
            "x-ves-proto-message": "ves.io.schema.api_credential.StatusResponse",
            "properties": {
                "status": {
                    "type": "boolean",
                    "description": " Result status flag.\n\nExample: - \"true\"-",
                    "title": "Status",
                    "format": "boolean",
                    "x-displayname": "status",
                    "x-ves-example": "true"
                }
            }
        },
        "api_credentialVk8sKubeconfigType": {
            "type": "object",
            "description": "Service Kube Config parameters",
            "title": "vk8s_kubeconfig",
            "x-displayname": "Service Kube Config Specification",
            "x-ves-proto-message": "ves.io.schema.api_credential.Vk8sKubeconfigType",
            "properties": {
                "vk8s_cluster_name": {
                    "type": "string",
                    "description": " Name of virtual k8s cluster.\n\nExample: - \"vk8s-product-app1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ves_object_name: true\n",
                    "title": "virtual k8s cluster name",
                    "x-displayname": "vK8s Cluster",
                    "x-ves-example": "vk8s-product-app1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ves_object_name": "true"
                    }
                },
                "vk8s_namespace": {
                    "type": "string",
                    "description": " Namespace of virtual k8s cluster. Applicable for KUBE_CONFIG.\n\nExample: - \"app-ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ves_object_name: true\n",
                    "title": "Virtual k8s namespace",
                    "x-displayname": "vK8s Namespace",
                    "x-ves-example": "app-ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ves_object_name": "true"
                    }
                }
            }
        },
        "schemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaNamespaceAccessType": {
            "type": "object",
            "description": "Access info in the namespaces for the entity",
            "title": "Namespace Access",
            "x-displayname": "Namespace Access",
            "x-ves-proto-message": "ves.io.schema.NamespaceAccessType",
            "properties": {
                "namespace_role_map": {
                    "type": "object",
                    "description": " List of all the roles for the entity in the namespaces\n\nExample: - '\u003cnamespace\u003e [\u003croles\u003e]'-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 256\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace Role Map",
                    "x-displayname": "Namespace Role Map",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "256",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "schemaNamespaceRoleType": {
            "type": "object",
            "description": "Allows linking namespaces and roles",
            "title": "Namespace role",
            "x-displayname": "Namespace Role",
            "x-ves-proto-message": "ves.io.schema.NamespaceRoleType",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Namespace the role applies to\n '*' value implies all namespaces\n\nExample: - \"ns1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "Namespace",
                    "maxLength": 256,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "role": {
                    "type": "string",
                    "description": " Users role for this namespace\n\nExample: - \"ves-io-monitor-role\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.ves_object_name: true\n",
                    "title": "Role",
                    "maxLength": 256,
                    "x-displayname": "Role",
                    "x-ves-example": "ves-io-monitor-role",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.ves_object_name": "true"
                    }
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if\n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaRoleListType": {
            "type": "object",
            "description": "x-displayName: \"Role List\"\nRole list",
            "title": "List of Roles",
            "properties": {
                "names": {
                    "type": "array",
                    "description": "x-displayName: \"Roles List\"\nx-example: [\"ves-io-monitor-role\", \"ves-io-uam-admin-role\"]\nx-required\nList of all the roles",
                    "title": "Roles List",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "direct_ref_hash": {
                    "type": "string",
                    "description": " A hash of the UIDs of  direct references on this object. This can be used to determine if \n this object hash has had references become resolved/unresolved",
                    "title": "direct_ref_hash",
                    "x-displayname": "Direct Reference Hash"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "namespace",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        }
    },
    "x-displayname": "API/Service Credentials",
    "x-ves-proto-file": "ves.io/schema/api_credential/public_customapi.proto"
}`

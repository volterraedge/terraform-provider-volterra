// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_credential/crudapi/api.proto

package crudapi

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	api_credential "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrorCode int32

const (
	EOK       ErrorCode = 0
	ENOTFOUND ErrorCode = 1
	EEXISTS   ErrorCode = 2
	EUNKNOWN  ErrorCode = 3
)

var ErrorCode_name = map[int32]string{
	0: "EOK",
	1: "ENOTFOUND",
	2: "EEXISTS",
	3: "EUNKNOWN",
}

var ErrorCode_value = map[string]int32{
	"EOK":       0,
	"ENOTFOUND": 1,
	"EEXISTS":   2,
	"EUNKNOWN":  3,
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{0}
}

type ObjectCreateReq struct {
	Metadata       *schema.ObjectMetaType       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	Spec           *api_credential.SpecType     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ObjectCreateReq) Reset()      { *m = ObjectCreateReq{} }
func (*ObjectCreateReq) ProtoMessage() {}
func (*ObjectCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{0}
}
func (m *ObjectCreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectCreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectCreateReq.Merge(m, src)
}
func (m *ObjectCreateReq) XXX_Size() int {
	return m.Size()
}
func (m *ObjectCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectCreateReq proto.InternalMessageInfo

func (m *ObjectCreateReq) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectCreateReq) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ObjectCreateReq) GetSpec() *api_credential.SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ObjectCreateRsp struct {
	Err            ErrorCode                    `protobuf:"varint,10000,opt,name=err,proto3,enum=ves.io.schema.api_credential.crudapi.ErrorCode" json:"err,omitempty"`
	ObjectUid      string                       `protobuf:"bytes,10001,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	Metadata       *schema.ObjectMetaType       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	Spec           *api_credential.SpecType     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ObjectCreateRsp) Reset()      { *m = ObjectCreateRsp{} }
func (*ObjectCreateRsp) ProtoMessage() {}
func (*ObjectCreateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{1}
}
func (m *ObjectCreateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectCreateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectCreateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectCreateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectCreateRsp.Merge(m, src)
}
func (m *ObjectCreateRsp) XXX_Size() int {
	return m.Size()
}
func (m *ObjectCreateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectCreateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectCreateRsp proto.InternalMessageInfo

func (m *ObjectCreateRsp) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EOK
}

func (m *ObjectCreateRsp) GetObjectUid() string {
	if m != nil {
		return m.ObjectUid
	}
	return ""
}

func (m *ObjectCreateRsp) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectCreateRsp) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ObjectCreateRsp) GetSpec() *api_credential.SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ObjectReplaceReq struct {
	ObjectUid       string                   `protobuf:"bytes,10000,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	ResourceVersion string                   `protobuf:"bytes,10001,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Metadata        *schema.ObjectMetaType   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec            *api_credential.SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ObjectReplaceReq) Reset()      { *m = ObjectReplaceReq{} }
func (*ObjectReplaceReq) ProtoMessage() {}
func (*ObjectReplaceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{2}
}
func (m *ObjectReplaceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectReplaceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectReplaceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectReplaceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectReplaceReq.Merge(m, src)
}
func (m *ObjectReplaceReq) XXX_Size() int {
	return m.Size()
}
func (m *ObjectReplaceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectReplaceReq.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectReplaceReq proto.InternalMessageInfo

func (m *ObjectReplaceReq) GetObjectUid() string {
	if m != nil {
		return m.ObjectUid
	}
	return ""
}

func (m *ObjectReplaceReq) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ObjectReplaceReq) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectReplaceReq) GetSpec() *api_credential.SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ObjectReplaceRsp struct {
	Err            ErrorCode                    `protobuf:"varint,10000,opt,name=err,proto3,enum=ves.io.schema.api_credential.crudapi.ErrorCode" json:"err,omitempty"`
	Metadata       *schema.ObjectMetaType       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	Spec           *api_credential.SpecType     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ObjectReplaceRsp) Reset()      { *m = ObjectReplaceRsp{} }
func (*ObjectReplaceRsp) ProtoMessage() {}
func (*ObjectReplaceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{3}
}
func (m *ObjectReplaceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectReplaceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectReplaceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectReplaceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectReplaceRsp.Merge(m, src)
}
func (m *ObjectReplaceRsp) XXX_Size() int {
	return m.Size()
}
func (m *ObjectReplaceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectReplaceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectReplaceRsp proto.InternalMessageInfo

func (m *ObjectReplaceRsp) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EOK
}

func (m *ObjectReplaceRsp) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectReplaceRsp) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ObjectReplaceRsp) GetSpec() *api_credential.SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ObjectGetReq struct {
	ObjectUid    string   `protobuf:"bytes,10000,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	AllBackrefs  bool     `protobuf:"varint,10001,opt,name=all_backrefs,json=allBackrefs,proto3" json:"all_backrefs,omitempty"`
	BackrefTypes []string `protobuf:"bytes,10002,rep,name=backref_types,json=backrefTypes,proto3" json:"backref_types,omitempty"`
	// in case of ref-by-name whether to report referred's uid
	IncludeReferredId bool `protobuf:"varint,10003,opt,name=include_referred_id,json=includeReferredId,proto3" json:"include_referred_id,omitempty"`
}

func (m *ObjectGetReq) Reset()      { *m = ObjectGetReq{} }
func (*ObjectGetReq) ProtoMessage() {}
func (*ObjectGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{4}
}
func (m *ObjectGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectGetReq.Merge(m, src)
}
func (m *ObjectGetReq) XXX_Size() int {
	return m.Size()
}
func (m *ObjectGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectGetReq proto.InternalMessageInfo

func (m *ObjectGetReq) GetObjectUid() string {
	if m != nil {
		return m.ObjectUid
	}
	return ""
}

func (m *ObjectGetReq) GetAllBackrefs() bool {
	if m != nil {
		return m.AllBackrefs
	}
	return false
}

func (m *ObjectGetReq) GetBackrefTypes() []string {
	if m != nil {
		return m.BackrefTypes
	}
	return nil
}

func (m *ObjectGetReq) GetIncludeReferredId() bool {
	if m != nil {
		return m.IncludeReferredId
	}
	return false
}

type ObjectGetRsp struct {
	Err             ErrorCode                      `protobuf:"varint,10000,opt,name=err,proto3,enum=ves.io.schema.api_credential.crudapi.ErrorCode" json:"err,omitempty"`
	EntBackrefs     []*types.Any                   `protobuf:"bytes,10001,rep,name=ent_backrefs,json=entBackrefs,proto3" json:"ent_backrefs,omitempty"`
	ResourceVersion string                         `protobuf:"bytes,10002,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Metadata        *schema.ObjectMetaType         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SystemMetadata  *schema.SystemObjectMetaType   `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	Spec            *api_credential.SpecType       `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status          []*api_credential.StatusObject `protobuf:"bytes,20000,rep,name=status,proto3" json:"status,omitempty"`
}

func (m *ObjectGetRsp) Reset()      { *m = ObjectGetRsp{} }
func (*ObjectGetRsp) ProtoMessage() {}
func (*ObjectGetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{5}
}
func (m *ObjectGetRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectGetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectGetRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectGetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectGetRsp.Merge(m, src)
}
func (m *ObjectGetRsp) XXX_Size() int {
	return m.Size()
}
func (m *ObjectGetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectGetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectGetRsp proto.InternalMessageInfo

func (m *ObjectGetRsp) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EOK
}

func (m *ObjectGetRsp) GetEntBackrefs() []*types.Any {
	if m != nil {
		return m.EntBackrefs
	}
	return nil
}

func (m *ObjectGetRsp) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ObjectGetRsp) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectGetRsp) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ObjectGetRsp) GetSpec() *api_credential.SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ObjectGetRsp) GetStatus() []*api_credential.StatusObject {
	if m != nil {
		return m.Status
	}
	return nil
}

type ObjectListReq struct {
	// Filters executed on server-side - all types of filters ANDed
	// Tenants to scope the listing of objects - if empty all tenants considered
	TenantFilter []string `protobuf:"bytes,10000,rep,name=tenant_filter,json=tenantFilter,proto3" json:"tenant_filter,omitempty"`
	// Namespaces to scope the listing of objects - if empty all namespaces considered
	NamespaceFilter []string `protobuf:"bytes,10001,rep,name=namespace_filter,json=namespaceFilter,proto3" json:"namespace_filter,omitempty"`
	// k8s style label selector expression
	LabelFilter string `protobuf:"bytes,10002,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// TODO: currently even if one specified implementation will return all fields
	ReportFields []string `protobuf:"bytes,10003,rep,name=report_fields,json=reportFields,proto3" json:"report_fields,omitempty"`
	// Get the resource_version associated with the list
	ResourceVersion bool `protobuf:"varint,10004,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// in case of ref-by-name whether to report referred's uid
	IncludeReferredId bool `protobuf:"varint,10005,opt,name=include_referred_id,json=includeReferredId,proto3" json:"include_referred_id,omitempty"`
}

func (m *ObjectListReq) Reset()      { *m = ObjectListReq{} }
func (*ObjectListReq) ProtoMessage() {}
func (*ObjectListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{6}
}
func (m *ObjectListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectListReq.Merge(m, src)
}
func (m *ObjectListReq) XXX_Size() int {
	return m.Size()
}
func (m *ObjectListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectListReq proto.InternalMessageInfo

func (m *ObjectListReq) GetTenantFilter() []string {
	if m != nil {
		return m.TenantFilter
	}
	return nil
}

func (m *ObjectListReq) GetNamespaceFilter() []string {
	if m != nil {
		return m.NamespaceFilter
	}
	return nil
}

func (m *ObjectListReq) GetLabelFilter() string {
	if m != nil {
		return m.LabelFilter
	}
	return ""
}

func (m *ObjectListReq) GetReportFields() []string {
	if m != nil {
		return m.ReportFields
	}
	return nil
}

func (m *ObjectListReq) GetResourceVersion() bool {
	if m != nil {
		return m.ResourceVersion
	}
	return false
}

func (m *ObjectListReq) GetIncludeReferredId() bool {
	if m != nil {
		return m.IncludeReferredId
	}
	return false
}

type ObjectListRspItem struct {
	ObjectUid string `protobuf:"bytes,10000,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	// If ObjectListReq has any specified report_fields, it will appear in below fields
	Metadata       *schema.ObjectMetaType         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SystemMetadata *schema.SystemObjectMetaType   `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	Spec           *api_credential.SpecType       `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status         []*api_credential.StatusObject `protobuf:"bytes,20000,rep,name=status,proto3" json:"status,omitempty"`
	Tenant         string                         `protobuf:"bytes,10001,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Namespace      string                         `protobuf:"bytes,10002,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string                         `protobuf:"bytes,10003,opt,name=name,proto3" json:"name,omitempty"`
	Labels         map[string]string              `protobuf:"bytes,10004,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ObjectListRspItem) Reset()      { *m = ObjectListRspItem{} }
func (*ObjectListRspItem) ProtoMessage() {}
func (*ObjectListRspItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{7}
}
func (m *ObjectListRspItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectListRspItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectListRspItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectListRspItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectListRspItem.Merge(m, src)
}
func (m *ObjectListRspItem) XXX_Size() int {
	return m.Size()
}
func (m *ObjectListRspItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectListRspItem.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectListRspItem proto.InternalMessageInfo

func (m *ObjectListRspItem) GetObjectUid() string {
	if m != nil {
		return m.ObjectUid
	}
	return ""
}

func (m *ObjectListRspItem) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ObjectListRspItem) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ObjectListRspItem) GetSpec() *api_credential.SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ObjectListRspItem) GetStatus() []*api_credential.StatusObject {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ObjectListRspItem) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ObjectListRspItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectListRspItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectListRspItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ObjectListRsp struct {
	Err      ErrorCode            `protobuf:"varint,10000,opt,name=err,proto3,enum=ves.io.schema.api_credential.crudapi.ErrorCode" json:"err,omitempty"`
	Uids     []string             `protobuf:"bytes,10001,rep,name=uids,proto3" json:"uids,omitempty"`
	Items    []*ObjectListRspItem `protobuf:"bytes,10002,rep,name=items,proto3" json:"items,omitempty"`
	Metadata *schema.ListMetaType `protobuf:"bytes,10003,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ObjectListRsp) Reset()      { *m = ObjectListRsp{} }
func (*ObjectListRsp) ProtoMessage() {}
func (*ObjectListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{8}
}
func (m *ObjectListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectListRsp.Merge(m, src)
}
func (m *ObjectListRsp) XXX_Size() int {
	return m.Size()
}
func (m *ObjectListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectListRsp proto.InternalMessageInfo

func (m *ObjectListRsp) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EOK
}

func (m *ObjectListRsp) GetUids() []string {
	if m != nil {
		return m.Uids
	}
	return nil
}

func (m *ObjectListRsp) GetItems() []*ObjectListRspItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ObjectListRsp) GetMetadata() *schema.ListMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ObjectDeleteReq struct {
	ObjectUid string `protobuf:"bytes,10000,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
}

func (m *ObjectDeleteReq) Reset()      { *m = ObjectDeleteReq{} }
func (*ObjectDeleteReq) ProtoMessage() {}
func (*ObjectDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{9}
}
func (m *ObjectDeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectDeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectDeleteReq.Merge(m, src)
}
func (m *ObjectDeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *ObjectDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectDeleteReq proto.InternalMessageInfo

func (m *ObjectDeleteReq) GetObjectUid() string {
	if m != nil {
		return m.ObjectUid
	}
	return ""
}

type ObjectDeleteRsp struct {
	Err ErrorCode `protobuf:"varint,10000,opt,name=err,proto3,enum=ves.io.schema.api_credential.crudapi.ErrorCode" json:"err,omitempty"`
}

func (m *ObjectDeleteRsp) Reset()      { *m = ObjectDeleteRsp{} }
func (*ObjectDeleteRsp) ProtoMessage() {}
func (*ObjectDeleteRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5355865b8a81046f, []int{10}
}
func (m *ObjectDeleteRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectDeleteRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectDeleteRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectDeleteRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectDeleteRsp.Merge(m, src)
}
func (m *ObjectDeleteRsp) XXX_Size() int {
	return m.Size()
}
func (m *ObjectDeleteRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectDeleteRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectDeleteRsp proto.InternalMessageInfo

func (m *ObjectDeleteRsp) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EOK
}

func init() {
	proto.RegisterEnum("ves.io.schema.api_credential.crudapi.ErrorCode", ErrorCode_name, ErrorCode_value)
	golang_proto.RegisterEnum("ves.io.schema.api_credential.crudapi.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*ObjectCreateReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectCreateReq")
	golang_proto.RegisterType((*ObjectCreateReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectCreateReq")
	proto.RegisterType((*ObjectCreateRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectCreateRsp")
	golang_proto.RegisterType((*ObjectCreateRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectCreateRsp")
	proto.RegisterType((*ObjectReplaceReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectReplaceReq")
	golang_proto.RegisterType((*ObjectReplaceReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectReplaceReq")
	proto.RegisterType((*ObjectReplaceRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectReplaceRsp")
	golang_proto.RegisterType((*ObjectReplaceRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectReplaceRsp")
	proto.RegisterType((*ObjectGetReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectGetReq")
	golang_proto.RegisterType((*ObjectGetReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectGetReq")
	proto.RegisterType((*ObjectGetRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectGetRsp")
	golang_proto.RegisterType((*ObjectGetRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectGetRsp")
	proto.RegisterType((*ObjectListReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectListReq")
	golang_proto.RegisterType((*ObjectListReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectListReq")
	proto.RegisterType((*ObjectListRspItem)(nil), "ves.io.schema.api_credential.crudapi.ObjectListRspItem")
	golang_proto.RegisterType((*ObjectListRspItem)(nil), "ves.io.schema.api_credential.crudapi.ObjectListRspItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.api_credential.crudapi.ObjectListRspItem.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.api_credential.crudapi.ObjectListRspItem.LabelsEntry")
	proto.RegisterType((*ObjectListRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectListRsp")
	golang_proto.RegisterType((*ObjectListRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectListRsp")
	proto.RegisterType((*ObjectDeleteReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectDeleteReq")
	golang_proto.RegisterType((*ObjectDeleteReq)(nil), "ves.io.schema.api_credential.crudapi.ObjectDeleteReq")
	proto.RegisterType((*ObjectDeleteRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectDeleteRsp")
	golang_proto.RegisterType((*ObjectDeleteRsp)(nil), "ves.io.schema.api_credential.crudapi.ObjectDeleteRsp")
}

func init() {
	proto.RegisterFile("ves.io/schema/api_credential/crudapi/api.proto", fileDescriptor_5355865b8a81046f)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_credential/crudapi/api.proto", fileDescriptor_5355865b8a81046f)
}

var fileDescriptor_5355865b8a81046f = []byte{
	// 1342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4d, 0x6c, 0x13, 0x47,
	0x14, 0xf6, 0xd8, 0x21, 0xc1, 0xe3, 0x84, 0x98, 0x01, 0xa9, 0xae, 0x29, 0x2b, 0xb4, 0xa4, 0x28,
	0x44, 0x65, 0xb7, 0x98, 0xf2, 0x53, 0x2a, 0x21, 0x91, 0xe0, 0xa0, 0x08, 0x70, 0xaa, 0x0d, 0x69,
	0xab, 0xa8, 0x92, 0x59, 0x7b, 0x5f, 0xcc, 0xc2, 0x7a, 0x77, 0x99, 0x19, 0xbb, 0x58, 0x55, 0x44,
	0x8b, 0x54, 0xa9, 0x87, 0x1e, 0xf8, 0xeb, 0x25, 0xea, 0xa1, 0x47, 0x7a, 0xe9, 0xb9, 0x52, 0x2e,
	0x1c, 0x51, 0x4f, 0x88, 0x5e, 0x38, 0xf4, 0x50, 0x9c, 0x56, 0xea, 0xa5, 0x12, 0xe2, 0xd2, 0x43,
	0x2f, 0xd5, 0xce, 0xac, 0x9d, 0xd8, 0x09, 0xc6, 0xb6, 0x52, 0xa4, 0x4a, 0x5c, 0xac, 0x99, 0xf7,
	0xf3, 0xcd, 0x7b, 0x6f, 0xbe, 0x37, 0x33, 0x6b, 0xac, 0x55, 0x81, 0x69, 0xb6, 0xa7, 0xb3, 0xe2,
	0x65, 0x28, 0x9b, 0xba, 0xe9, 0xdb, 0xf9, 0x22, 0x05, 0x0b, 0x5c, 0x6e, 0x9b, 0x8e, 0x5e, 0xa4,
	0x15, 0xcb, 0xf4, 0xed, 0x40, 0xac, 0xf9, 0xd4, 0xe3, 0x1e, 0x19, 0x93, 0xf6, 0x9a, 0xb4, 0xd7,
	0x5a, 0xed, 0xb5, 0xd0, 0x3e, 0x7d, 0xa8, 0x64, 0xf3, 0xcb, 0x95, 0x82, 0x56, 0xf4, 0xca, 0x7a,
	0xc9, 0x2b, 0x79, 0xba, 0x70, 0x2e, 0x54, 0x16, 0xc5, 0x4c, 0x4c, 0xc4, 0x48, 0x82, 0xa6, 0xdf,
	0x2a, 0x79, 0x5e, 0xc9, 0x01, 0x5d, 0x2c, 0xe5, 0xba, 0x1e, 0x37, 0xb9, 0xed, 0xb9, 0x2c, 0xd4,
	0xbe, 0x19, 0x6a, 0x9b, 0x18, 0xa6, 0x5b, 0x0b, 0x55, 0x07, 0x3b, 0x46, 0xef, 0x15, 0xae, 0x40,
	0x91, 0x87, 0xa6, 0xe3, 0x1d, 0x4d, 0x79, 0xcd, 0x87, 0xc6, 0x7a, 0x7b, 0x5a, 0x2d, 0x3d, 0xbf,
	0x25, 0x98, 0x56, 0xe5, 0x7a, 0x3f, 0xb5, 0x55, 0x55, 0x05, 0x06, 0x6e, 0xb5, 0xd5, 0x5d, 0xbd,
	0x1f, 0xc5, 0xa3, 0xb3, 0x22, 0xac, 0x29, 0x0a, 0x26, 0x07, 0x03, 0xae, 0x91, 0x69, 0xbc, 0xbd,
	0x0c, 0xdc, 0xb4, 0x4c, 0x6e, 0xa6, 0xd0, 0x3e, 0x34, 0x9e, 0xc8, 0xec, 0xd5, 0x5a, 0xab, 0x2c,
	0x3d, 0x2e, 0x00, 0x37, 0x2f, 0xd6, 0x7c, 0x98, 0x4c, 0x2c, 0x2f, 0x35, 0x3d, 0x8c, 0xe6, 0x88,
	0x5c, 0xc2, 0xa3, 0xac, 0xc6, 0x38, 0x94, 0xf3, 0x4d, 0xb8, 0xa8, 0x80, 0xdb, 0xdf, 0x06, 0x37,
	0x27, 0xac, 0xda, 0x40, 0xc9, 0xf2, 0x52, 0xbb, 0xbb, 0xb1, 0x43, 0x0a, 0x2e, 0x34, 0x56, 0x98,
	0xc2, 0x03, 0xcc, 0x87, 0x62, 0x2a, 0x26, 0x60, 0x0f, 0x68, 0x1d, 0xb9, 0x30, 0xe7, 0x43, 0x51,
	0x20, 0x0f, 0x2d, 0x2f, 0x09, 0x37, 0x43, 0xfc, 0x9e, 0x3c, 0xf0, 0xf3, 0xa9, 0xfd, 0x1d, 0x1d,
	0x65, 0x60, 0xea, 0x37, 0xb1, 0xb6, 0x52, 0x31, 0x9f, 0x4c, 0xe2, 0x18, 0x50, 0x9a, 0xba, 0x95,
	0xdb, 0x87, 0xc6, 0x77, 0x64, 0x74, 0xad, 0x1b, 0x32, 0x6a, 0x59, 0x4a, 0x3d, 0x3a, 0xe5, 0x59,
	0x60, 0x04, 0xce, 0x44, 0xc1, 0x58, 0x12, 0x23, 0x5f, 0xb1, 0xad, 0xd4, 0xed, 0x00, 0x2a, 0x6e,
	0xc4, 0xa5, 0x68, 0xde, 0xb6, 0x5e, 0x6f, 0xc7, 0xe6, 0xdb, 0x71, 0x37, 0x8a, 0x93, 0x72, 0x68,
	0x80, 0xef, 0x98, 0x45, 0x41, 0xdd, 0xd6, 0x5a, 0xde, 0xda, 0x50, 0xcb, 0x09, 0x9c, 0xa4, 0xc0,
	0xbc, 0x0a, 0x2d, 0x42, 0xbe, 0x0a, 0x94, 0xd9, 0x9e, 0xdb, 0xa8, 0xf8, 0x68, 0x43, 0xf1, 0x91,
	0x94, 0x6f, 0x59, 0xdd, 0x5f, 0x69, 0x55, 0xfe, 0xda, 0x50, 0x95, 0x2d, 0x62, 0xe9, 0x6b, 0x16,
	0x6e, 0x5a, 0xef, 0x1f, 0x10, 0x1e, 0x96, 0xc3, 0xb3, 0xc0, 0xbb, 0x61, 0xa0, 0x8a, 0x87, 0x4d,
	0xc7, 0xc9, 0x17, 0xcc, 0xe2, 0x55, 0x0a, 0x8b, 0x4c, 0xb2, 0x6f, 0xbb, 0x91, 0x30, 0x1d, 0x67,
	0x32, 0x94, 0x91, 0x31, 0x3c, 0x12, 0xea, 0xf3, 0xe2, 0x3c, 0x4f, 0xdd, 0xc9, 0xed, 0x8b, 0x8d,
	0xc7, 0x8d, 0xe1, 0x50, 0x1a, 0x04, 0xcc, 0x88, 0x8e, 0x77, 0xd9, 0x6e, 0xd1, 0xa9, 0x58, 0x90,
	0xa7, 0xb0, 0x08, 0x94, 0x82, 0x95, 0xb7, 0xad, 0xd4, 0x5d, 0x09, 0xb8, 0x33, 0xd4, 0x19, 0xa1,
	0x6a, 0xc6, 0x52, 0x97, 0x07, 0xd6, 0xc7, 0xba, 0x45, 0xbc, 0x38, 0x81, 0x87, 0xc1, 0xe5, 0x2d,
	0xf9, 0xc4, 0xc6, 0x13, 0x99, 0xdd, 0x9a, 0xbc, 0x24, 0xb5, 0xc6, 0x25, 0xa9, 0x9d, 0x76, 0x6b,
	0x46, 0x02, 0x5c, 0xde, 0xcc, 0x72, 0xb3, 0x5e, 0xbc, 0xf3, 0x1f, 0xf7, 0xe2, 0xff, 0x83, 0x7d,
	0x64, 0x06, 0x0f, 0x32, 0x6e, 0xf2, 0x0a, 0x4b, 0x7d, 0xff, 0x1d, 0x12, 0xf5, 0x9c, 0x78, 0x09,
	0x90, 0xb0, 0x96, 0xe1, 0x4e, 0xc6, 0x1e, 0x2c, 0x21, 0x23, 0x04, 0xe8, 0x9a, 0xc8, 0x5f, 0x47,
	0xf1, 0x88, 0x1c, 0x9e, 0xb7, 0x99, 0x60, 0xf2, 0x18, 0x1e, 0xe1, 0xe0, 0x9a, 0x2e, 0xcf, 0x2f,
	0xda, 0x0e, 0x07, 0xc1, 0x13, 0xc1, 0x42, 0x29, 0x9d, 0x16, 0xc2, 0x60, 0x17, 0x5d, 0xb3, 0x0c,
	0xcc, 0x37, 0x8b, 0xd0, 0x30, 0xbc, 0x2d, 0x0d, 0x47, 0x9b, 0x8a, 0xd0, 0x56, 0xc5, 0xc3, 0x8e,
	0x59, 0x00, 0xa7, 0x61, 0x17, 0xee, 0x76, 0x42, 0x08, 0x43, 0x9b, 0x31, 0x3c, 0x42, 0xc1, 0xf7,
	0x68, 0xb0, 0x2a, 0x38, 0x16, 0x0b, 0xf8, 0x2c, 0x56, 0x95, 0xd2, 0x69, 0x21, 0xdc, 0x94, 0x3b,
	0xf7, 0x24, 0xf1, 0x37, 0x70, 0xe7, 0x05, 0x7d, 0xf2, 0xed, 0x0b, 0xfb, 0xe4, 0x9f, 0x01, 0xbc,
	0x73, 0x5d, 0x29, 0x98, 0x3f, 0xc3, 0xa1, 0xfc, 0xd2, 0xc6, 0x7e, 0x4d, 0xd1, 0x3e, 0x29, 0x4a,
	0xde, 0xc0, 0x83, 0x92, 0x52, 0x8d, 0xab, 0x38, 0x9c, 0x92, 0xbd, 0x38, 0xde, 0xa4, 0x50, 0x83,
	0x2c, 0x6b, 0x12, 0xb2, 0x0b, 0x0f, 0x04, 0x13, 0x79, 0xe2, 0xc5, 0x0d, 0x31, 0x21, 0x9f, 0xe2,
	0x41, 0x41, 0x27, 0x16, 0xf0, 0x21, 0x08, 0x6b, 0xaa, 0xbb, 0x63, 0x6d, 0xc3, 0x86, 0x6b, 0xe7,
	0x05, 0x4c, 0xd6, 0xe5, 0xb4, 0x66, 0x84, 0x98, 0xe9, 0xf7, 0x71, 0x62, 0x9d, 0x98, 0x24, 0x71,
	0xec, 0x2a, 0xd4, 0xc4, 0x76, 0xc7, 0x8d, 0x60, 0x48, 0x76, 0xe3, 0x6d, 0x55, 0xd3, 0xa9, 0x80,
	0xd8, 0xb3, 0xb8, 0x21, 0x27, 0x27, 0xa3, 0x27, 0x50, 0xd7, 0x8d, 0xf8, 0x1c, 0xb5, 0x34, 0xe2,
	0x16, 0x1d, 0xd3, 0xbb, 0xf0, 0x40, 0xc5, 0xb6, 0x58, 0xa3, 0x35, 0xc5, 0x84, 0xe4, 0xf0, 0x36,
	0x9b, 0x43, 0x39, 0xbc, 0x5f, 0x12, 0x99, 0xe3, 0x7d, 0x96, 0xca, 0x90, 0x30, 0xe4, 0xc4, 0xba,
	0x16, 0x10, 0x9b, 0x92, 0xc8, 0xec, 0x69, 0x83, 0x0c, 0xbc, 0x1a, 0x64, 0x5d, 0x23, 0xbd, 0x7a,
	0xb8, 0xf1, 0xb4, 0x3e, 0x03, 0x0e, 0xf0, 0x6e, 0x9e, 0x72, 0xea, 0x7c, 0x9b, 0xcb, 0xd6, 0x14,
	0x6a, 0xe2, 0x14, 0x8e, 0x37, 0x25, 0x64, 0x08, 0xc7, 0xb2, 0xb3, 0xe7, 0x92, 0x11, 0x32, 0x82,
	0xe3, 0xd9, 0xdc, 0xec, 0xc5, 0xe9, 0xd9, 0xf9, 0xdc, 0x99, 0x24, 0x22, 0x09, 0x3c, 0x94, 0xcd,
	0x7e, 0x32, 0x33, 0x77, 0x71, 0x2e, 0x19, 0x25, 0xc3, 0x78, 0x7b, 0x76, 0x3e, 0x77, 0x2e, 0x37,
	0xfb, 0x71, 0x2e, 0x19, 0xcb, 0x3c, 0x4e, 0xe0, 0xd8, 0xe9, 0x0f, 0x67, 0xc8, 0x1f, 0x08, 0x0f,
	0xca, 0xef, 0x04, 0x72, 0xb4, 0x97, 0xb2, 0x36, 0x3f, 0xc3, 0xd2, 0xfd, 0xb8, 0x31, 0x5f, 0x2d,
	0xdf, 0xfc, 0xe5, 0xf7, 0xbb, 0xd1, 0x92, 0xfa, 0xb6, 0xde, 0xc9, 0x5d, 0x97, 0x6e, 0xec, 0x24,
	0x9a, 0x58, 0xf8, 0x40, 0x3d, 0xd6, 0xd9, 0xd6, 0x76, 0x39, 0xf5, 0x82, 0xae, 0xe7, 0xfa, 0x67,
	0xd4, 0xe6, 0xb0, 0xce, 0x99, 0x7c, 0x19, 0xc5, 0x43, 0xe1, 0x53, 0x93, 0x1c, 0xeb, 0x25, 0xe2,
	0xb5, 0x57, 0x7b, 0xba, 0x2f, 0x3f, 0xe6, 0xab, 0x5f, 0x21, 0x91, 0xeb, 0x8d, 0xf4, 0xe1, 0x6e,
	0x72, 0xd5, 0x3f, 0x5f, 0xe3, 0xd3, 0x52, 0x90, 0xf7, 0xd9, 0xf4, 0x64, 0x5f, 0x79, 0xb7, 0x03,
	0x91, 0xe7, 0x08, 0xc7, 0xce, 0x02, 0x27, 0x99, 0x5e, 0xf2, 0x90, 0xef, 0xc5, 0x74, 0xcf, 0x3e,
	0xcc, 0x57, 0x6f, 0xa2, 0x87, 0x3f, 0x45, 0x65, 0xee, 0xd7, 0x49, 0xef, 0xb9, 0x2f, 0x4c, 0x91,
	0xd3, 0x5d, 0x27, 0x4e, 0xc1, 0xb4, 0x36, 0x03, 0x21, 0xbf, 0x22, 0x3c, 0x10, 0x74, 0x33, 0x39,
	0xd2, 0xf3, 0xa9, 0x01, 0xd7, 0xd2, 0x47, 0xfa, 0x38, 0x6a, 0xd4, 0x2b, 0xcd, 0xb4, 0x2f, 0x91,
	0xee, 0xe8, 0xbd, 0x70, 0x9c, 0x1c, 0xed, 0x27, 0x55, 0x46, 0x7e, 0x44, 0x18, 0x07, 0xeb, 0xce,
	0x71, 0x0a, 0x66, 0xf9, 0x15, 0x26, 0xf9, 0x9e, 0x48, 0x50, 0x23, 0xef, 0x74, 0x95, 0xa0, 0xce,
	0x44, 0x7c, 0xef, 0x22, 0xf2, 0x37, 0xc2, 0x83, 0xf2, 0x28, 0xec, 0xed, 0xc0, 0x69, 0x9e, 0xb8,
	0xe9, 0x7e, 0xdc, 0x98, 0xaf, 0xde, 0x10, 0x01, 0xd7, 0x26, 0xfa, 0x20, 0xe2, 0x99, 0x89, 0x2d,
	0xe8, 0xc0, 0xf4, 0xa5, 0x07, 0x2b, 0x08, 0x3d, 0x5c, 0x41, 0xe8, 0xf1, 0x0a, 0xea, 0xe6, 0x8a,
	0x7d, 0xb2, 0x82, 0x50, 0x7d, 0x05, 0x1d, 0xec, 0xfe, 0xb9, 0x72, 0x0f, 0x3d, 0x7a, 0xaa, 0x44,
	0x9e, 0x3c, 0x55, 0x22, 0xcf, 0x9e, 0x2a, 0xe8, 0x8b, 0xba, 0x82, 0xee, 0xd7, 0x15, 0xf4, 0xb0,
	0xae, 0xa0, 0x47, 0x75, 0x05, 0xfd, 0x56, 0x57, 0xd0, 0x9f, 0x75, 0x25, 0xf2, 0xac, 0xae, 0xa0,
	0x5b, 0xab, 0x4a, 0xe4, 0xc1, 0xaa, 0x82, 0x1e, 0xad, 0x2a, 0x91, 0x27, 0xab, 0x4a, 0x64, 0x61,
	0xa1, 0xe4, 0xf9, 0x57, 0x4b, 0x5a, 0xd5, 0x0b, 0x5e, 0xb7, 0xd4, 0xd4, 0x2a, 0x4c, 0x17, 0x83,
	0x45, 0x8f, 0x96, 0x0f, 0xf9, 0xd4, 0xab, 0xda, 0x16, 0xd0, 0x43, 0x0d, 0xb5, 0xee, 0x17, 0x4a,
	0x9e, 0x0e, 0xd7, 0x79, 0xf8, 0x9f, 0x5d, 0xc7, 0x7f, 0x41, 0x0b, 0x83, 0xe2, 0xe3, 0xea, 0xc8,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x46, 0xb2, 0x08, 0x0c, 0x34, 0x15, 0x00, 0x00,
}

func (x ErrorCode) String() string {
	s, ok := ErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ObjectCreateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectCreateReq)
	if !ok {
		that2, ok := that.(ObjectCreateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ObjectCreateRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectCreateRsp)
	if !ok {
		that2, ok := that.(ObjectCreateRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	if this.ObjectUid != that1.ObjectUid {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ObjectReplaceReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectReplaceReq)
	if !ok {
		that2, ok := that.(ObjectReplaceReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectUid != that1.ObjectUid {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ObjectReplaceRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectReplaceRsp)
	if !ok {
		that2, ok := that.(ObjectReplaceRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ObjectGetReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectGetReq)
	if !ok {
		that2, ok := that.(ObjectGetReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectUid != that1.ObjectUid {
		return false
	}
	if this.AllBackrefs != that1.AllBackrefs {
		return false
	}
	if len(this.BackrefTypes) != len(that1.BackrefTypes) {
		return false
	}
	for i := range this.BackrefTypes {
		if this.BackrefTypes[i] != that1.BackrefTypes[i] {
			return false
		}
	}
	if this.IncludeReferredId != that1.IncludeReferredId {
		return false
	}
	return true
}
func (this *ObjectGetRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectGetRsp)
	if !ok {
		that2, ok := that.(ObjectGetRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	if len(this.EntBackrefs) != len(that1.EntBackrefs) {
		return false
	}
	for i := range this.EntBackrefs {
		if !this.EntBackrefs[i].Equal(that1.EntBackrefs[i]) {
			return false
		}
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *ObjectListReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectListReq)
	if !ok {
		that2, ok := that.(ObjectListReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TenantFilter) != len(that1.TenantFilter) {
		return false
	}
	for i := range this.TenantFilter {
		if this.TenantFilter[i] != that1.TenantFilter[i] {
			return false
		}
	}
	if len(this.NamespaceFilter) != len(that1.NamespaceFilter) {
		return false
	}
	for i := range this.NamespaceFilter {
		if this.NamespaceFilter[i] != that1.NamespaceFilter[i] {
			return false
		}
	}
	if this.LabelFilter != that1.LabelFilter {
		return false
	}
	if len(this.ReportFields) != len(that1.ReportFields) {
		return false
	}
	for i := range this.ReportFields {
		if this.ReportFields[i] != that1.ReportFields[i] {
			return false
		}
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.IncludeReferredId != that1.IncludeReferredId {
		return false
	}
	return true
}
func (this *ObjectListRspItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectListRspItem)
	if !ok {
		that2, ok := that.(ObjectListRspItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectUid != that1.ObjectUid {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *ObjectListRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectListRsp)
	if !ok {
		that2, ok := that.(ObjectListRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	if len(this.Uids) != len(that1.Uids) {
		return false
	}
	for i := range this.Uids {
		if this.Uids[i] != that1.Uids[i] {
			return false
		}
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *ObjectDeleteReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectDeleteReq)
	if !ok {
		that2, ok := that.(ObjectDeleteReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectUid != that1.ObjectUid {
		return false
	}
	return true
}
func (this *ObjectDeleteRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectDeleteRsp)
	if !ok {
		that2, ok := that.(ObjectDeleteRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *ObjectCreateReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&crudapi.ObjectCreateReq{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectCreateRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&crudapi.ObjectCreateRsp{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "ObjectUid: "+fmt.Sprintf("%#v", this.ObjectUid)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectReplaceReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&crudapi.ObjectReplaceReq{")
	s = append(s, "ObjectUid: "+fmt.Sprintf("%#v", this.ObjectUid)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectReplaceRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&crudapi.ObjectReplaceRsp{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectGetReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&crudapi.ObjectGetReq{")
	s = append(s, "ObjectUid: "+fmt.Sprintf("%#v", this.ObjectUid)+",\n")
	s = append(s, "AllBackrefs: "+fmt.Sprintf("%#v", this.AllBackrefs)+",\n")
	s = append(s, "BackrefTypes: "+fmt.Sprintf("%#v", this.BackrefTypes)+",\n")
	s = append(s, "IncludeReferredId: "+fmt.Sprintf("%#v", this.IncludeReferredId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectGetRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&crudapi.ObjectGetRsp{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	if this.EntBackrefs != nil {
		s = append(s, "EntBackrefs: "+fmt.Sprintf("%#v", this.EntBackrefs)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectListReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&crudapi.ObjectListReq{")
	s = append(s, "TenantFilter: "+fmt.Sprintf("%#v", this.TenantFilter)+",\n")
	s = append(s, "NamespaceFilter: "+fmt.Sprintf("%#v", this.NamespaceFilter)+",\n")
	s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	s = append(s, "ReportFields: "+fmt.Sprintf("%#v", this.ReportFields)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "IncludeReferredId: "+fmt.Sprintf("%#v", this.IncludeReferredId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectListRspItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&crudapi.ObjectListRspItem{")
	s = append(s, "ObjectUid: "+fmt.Sprintf("%#v", this.ObjectUid)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectListRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&crudapi.ObjectListRsp{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "Uids: "+fmt.Sprintf("%#v", this.Uids)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectDeleteReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&crudapi.ObjectDeleteReq{")
	s = append(s, "ObjectUid: "+fmt.Sprintf("%#v", this.ObjectUid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectDeleteRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&crudapi.ObjectDeleteRsp{")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Create(ctx context.Context, in *ObjectCreateReq, opts ...grpc.CallOption) (*ObjectCreateRsp, error)
	Replace(ctx context.Context, in *ObjectReplaceReq, opts ...grpc.CallOption) (*ObjectReplaceRsp, error)
	Get(ctx context.Context, in *ObjectGetReq, opts ...grpc.CallOption) (*ObjectGetRsp, error)
	List(ctx context.Context, in *ObjectListReq, opts ...grpc.CallOption) (*ObjectListRsp, error)
	ListStream(ctx context.Context, in *ObjectListReq, opts ...grpc.CallOption) (API_ListStreamClient, error)
	Delete(ctx context.Context, in *ObjectDeleteReq, opts ...grpc.CallOption) (*ObjectDeleteRsp, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Create(ctx context.Context, in *ObjectCreateReq, opts ...grpc.CallOption) (*ObjectCreateRsp, error) {
	out := new(ObjectCreateRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.crudapi.API/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Replace(ctx context.Context, in *ObjectReplaceReq, opts ...grpc.CallOption) (*ObjectReplaceRsp, error) {
	out := new(ObjectReplaceRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.crudapi.API/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Get(ctx context.Context, in *ObjectGetReq, opts ...grpc.CallOption) (*ObjectGetRsp, error) {
	out := new(ObjectGetRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.crudapi.API/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) List(ctx context.Context, in *ObjectListReq, opts ...grpc.CallOption) (*ObjectListRsp, error) {
	out := new(ObjectListRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.crudapi.API/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListStream(ctx context.Context, in *ObjectListReq, opts ...grpc.CallOption) (API_ListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/ves.io.schema.api_credential.crudapi.API/ListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListStreamClient interface {
	Recv() (*ObjectListRsp, error)
	grpc.ClientStream
}

type aPIListStreamClient struct {
	grpc.ClientStream
}

func (x *aPIListStreamClient) Recv() (*ObjectListRsp, error) {
	m := new(ObjectListRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Delete(ctx context.Context, in *ObjectDeleteReq, opts ...grpc.CallOption) (*ObjectDeleteRsp, error) {
	out := new(ObjectDeleteRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.crudapi.API/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Create(context.Context, *ObjectCreateReq) (*ObjectCreateRsp, error)
	Replace(context.Context, *ObjectReplaceReq) (*ObjectReplaceRsp, error)
	Get(context.Context, *ObjectGetReq) (*ObjectGetRsp, error)
	List(context.Context, *ObjectListReq) (*ObjectListRsp, error)
	ListStream(*ObjectListReq, API_ListStreamServer) error
	Delete(context.Context, *ObjectDeleteReq) (*ObjectDeleteRsp, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Create(ctx context.Context, req *ObjectCreateReq) (*ObjectCreateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAPIServer) Replace(ctx context.Context, req *ObjectReplaceReq) (*ObjectReplaceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (*UnimplementedAPIServer) Get(ctx context.Context, req *ObjectGetReq) (*ObjectGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAPIServer) List(ctx context.Context, req *ObjectListReq) (*ObjectListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedAPIServer) ListStream(req *ObjectListReq, srv API_ListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStream not implemented")
}
func (*UnimplementedAPIServer) Delete(ctx context.Context, req *ObjectDeleteReq) (*ObjectDeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.crudapi.API/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Create(ctx, req.(*ObjectCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectReplaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.crudapi.API/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Replace(ctx, req.(*ObjectReplaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.crudapi.API/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Get(ctx, req.(*ObjectGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.crudapi.API/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).List(ctx, req.(*ObjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ListStream(m, &aPIListStreamServer{stream})
}

type API_ListStreamServer interface {
	Send(*ObjectListRsp) error
	grpc.ServerStream
}

type aPIListStreamServer struct {
	grpc.ServerStream
}

func (x *aPIListStreamServer) Send(m *ObjectListRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _API_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.crudapi.API/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Delete(ctx, req.(*ObjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.api_credential.crudapi.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _API_Create_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _API_Replace_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _API_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _API_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _API_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStream",
			Handler:       _API_ListStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ves.io/schema/api_credential/crudapi/api.proto",
}

func (m *ObjectCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectCreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectCreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectCreateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectCreateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectCreateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectUid) > 0 {
		i -= len(m.ObjectUid)
		copy(dAtA[i:], m.ObjectUid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ObjectUid)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x8a
	}
	if m.Err != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x80
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectReplaceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectReplaceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectReplaceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ObjectUid) > 0 {
		i -= len(m.ObjectUid)
		copy(dAtA[i:], m.ObjectUid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ObjectUid)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x82
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectReplaceRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectReplaceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectReplaceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x80
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectGetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectGetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeReferredId {
		i--
		if m.IncludeReferredId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x98
	}
	if len(m.BackrefTypes) > 0 {
		for iNdEx := len(m.BackrefTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackrefTypes[iNdEx])
			copy(dAtA[i:], m.BackrefTypes[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackrefTypes[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.AllBackrefs {
		i--
		if m.AllBackrefs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ObjectUid) > 0 {
		i -= len(m.ObjectUid)
		copy(dAtA[i:], m.ObjectUid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ObjectUid)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *ObjectGetRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectGetRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectGetRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xe2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EntBackrefs) > 0 {
		for iNdEx := len(m.EntBackrefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntBackrefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Err != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x80
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeReferredId {
		i--
		if m.IncludeReferredId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0xa8
	}
	if m.ResourceVersion {
		i--
		if m.ResourceVersion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ReportFields) > 0 {
		for iNdEx := len(m.ReportFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReportFields[iNdEx])
			copy(dAtA[i:], m.ReportFields[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ReportFields[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.LabelFilter) > 0 {
		i -= len(m.LabelFilter)
		copy(dAtA[i:], m.LabelFilter)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LabelFilter)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x92
	}
	if len(m.NamespaceFilter) > 0 {
		for iNdEx := len(m.NamespaceFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NamespaceFilter[iNdEx])
			copy(dAtA[i:], m.NamespaceFilter[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.NamespaceFilter[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.TenantFilter) > 0 {
		for iNdEx := len(m.TenantFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TenantFilter[iNdEx])
			copy(dAtA[i:], m.TenantFilter[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.TenantFilter[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x82
		}
	}
	return len(dAtA) - i, nil
}

func (m *ObjectListRspItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectListRspItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectListRspItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xe2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ObjectUid) > 0 {
		i -= len(m.ObjectUid)
		copy(dAtA[i:], m.ObjectUid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ObjectUid)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x82
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Uids) > 0 {
		for iNdEx := len(m.Uids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uids[iNdEx])
			copy(dAtA[i:], m.Uids[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Uids[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xf1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Err != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *ObjectDeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectDeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectDeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectUid) > 0 {
		i -= len(m.ObjectUid)
		copy(dAtA[i:], m.ObjectUid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ObjectUid)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *ObjectDeleteRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectDeleteRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectDeleteRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf1
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectCreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ObjectCreateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Err != 0 {
		n += 3 + sovApi(uint64(m.Err))
	}
	l = len(m.ObjectUid)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ObjectReplaceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ObjectUid)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ObjectReplaceRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Err != 0 {
		n += 3 + sovApi(uint64(m.Err))
	}
	return n
}

func (m *ObjectGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectUid)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	if m.AllBackrefs {
		n += 4
	}
	if len(m.BackrefTypes) > 0 {
		for _, s := range m.BackrefTypes {
			l = len(s)
			n += 3 + l + sovApi(uint64(l))
		}
	}
	if m.IncludeReferredId {
		n += 4
	}
	return n
}

func (m *ObjectGetRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Err != 0 {
		n += 3 + sovApi(uint64(m.Err))
	}
	if len(m.EntBackrefs) > 0 {
		for _, e := range m.EntBackrefs {
			l = e.Size()
			n += 3 + l + sovApi(uint64(l))
		}
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 3 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ObjectListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TenantFilter) > 0 {
		for _, s := range m.TenantFilter {
			l = len(s)
			n += 3 + l + sovApi(uint64(l))
		}
	}
	if len(m.NamespaceFilter) > 0 {
		for _, s := range m.NamespaceFilter {
			l = len(s)
			n += 3 + l + sovApi(uint64(l))
		}
	}
	l = len(m.LabelFilter)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	if len(m.ReportFields) > 0 {
		for _, s := range m.ReportFields {
			l = len(s)
			n += 3 + l + sovApi(uint64(l))
		}
	}
	if m.ResourceVersion {
		n += 4
	}
	if m.IncludeReferredId {
		n += 4
	}
	return n
}

func (m *ObjectListRspItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ObjectUid)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 3 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 3 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ObjectListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 3 + sovApi(uint64(m.Err))
	}
	if len(m.Uids) > 0 {
		for _, s := range m.Uids {
			l = len(s)
			n += 3 + l + sovApi(uint64(l))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 3 + l + sovApi(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 3 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ObjectDeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectUid)
	if l > 0 {
		n += 3 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ObjectDeleteRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 3 + sovApi(uint64(m.Err))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ObjectCreateReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectCreateReq{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "SpecType", "api_credential.SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectCreateRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectCreateRsp{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "SpecType", "api_credential.SpecType", 1) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`ObjectUid:` + fmt.Sprintf("%v", this.ObjectUid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectReplaceReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectReplaceReq{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "SpecType", "api_credential.SpecType", 1) + `,`,
		`ObjectUid:` + fmt.Sprintf("%v", this.ObjectUid) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectReplaceRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectReplaceRsp{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "SpecType", "api_credential.SpecType", 1) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectGetReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectGetReq{`,
		`ObjectUid:` + fmt.Sprintf("%v", this.ObjectUid) + `,`,
		`AllBackrefs:` + fmt.Sprintf("%v", this.AllBackrefs) + `,`,
		`BackrefTypes:` + fmt.Sprintf("%v", this.BackrefTypes) + `,`,
		`IncludeReferredId:` + fmt.Sprintf("%v", this.IncludeReferredId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectGetRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntBackrefs := "[]*Any{"
	for _, f := range this.EntBackrefs {
		repeatedStringForEntBackrefs += strings.Replace(fmt.Sprintf("%v", f), "Any", "types.Any", 1) + ","
	}
	repeatedStringForEntBackrefs += "}"
	repeatedStringForStatus := "[]*StatusObject{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "StatusObject", "api_credential.StatusObject", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&ObjectGetRsp{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "SpecType", "api_credential.SpecType", 1) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`EntBackrefs:` + repeatedStringForEntBackrefs + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectListReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectListReq{`,
		`TenantFilter:` + fmt.Sprintf("%v", this.TenantFilter) + `,`,
		`NamespaceFilter:` + fmt.Sprintf("%v", this.NamespaceFilter) + `,`,
		`LabelFilter:` + fmt.Sprintf("%v", this.LabelFilter) + `,`,
		`ReportFields:` + fmt.Sprintf("%v", this.ReportFields) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`IncludeReferredId:` + fmt.Sprintf("%v", this.IncludeReferredId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectListRspItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*StatusObject{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "StatusObject", "api_credential.StatusObject", 1) + ","
	}
	repeatedStringForStatus += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&ObjectListRspItem{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "SpecType", "api_credential.SpecType", 1) + `,`,
		`ObjectUid:` + fmt.Sprintf("%v", this.ObjectUid) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectListRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ObjectListRspItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ObjectListRspItem", "ObjectListRspItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ObjectListRsp{`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`Uids:` + fmt.Sprintf("%v", this.Uids) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ListMetaType", "schema.ListMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectDeleteReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectDeleteReq{`,
		`ObjectUid:` + fmt.Sprintf("%v", this.ObjectUid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectDeleteRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectDeleteRsp{`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ObjectCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &api_credential.SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectCreateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectCreateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectCreateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &api_credential.SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectReplaceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectReplaceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectReplaceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &api_credential.SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectReplaceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectReplaceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectReplaceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &api_credential.SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllBackrefs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllBackrefs = bool(v != 0)
		case 10002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackrefTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackrefTypes = append(m.BackrefTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeReferredId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeReferredId = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectGetRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectGetRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectGetRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &api_credential.SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntBackrefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntBackrefs = append(m.EntBackrefs, &types.Any{})
			if err := m.EntBackrefs[len(m.EntBackrefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &api_credential.StatusObject{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantFilter = append(m.TenantFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceFilter = append(m.NamespaceFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportFields = append(m.ReportFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResourceVersion = bool(v != 0)
		case 10005:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeReferredId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeReferredId = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectListRspItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectListRspItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectListRspItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &api_credential.SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 20000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &api_credential.StatusObject{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uids = append(m.Uids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ObjectListRspItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ListMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectDeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectDeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectDeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectDeleteRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectDeleteRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectDeleteRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_credential/public_customapi.proto

// API/Service credential custom API
//
// x-displayName: "API/Service Credentials"
// F5XC supports 2 variation of credentials -
// 1. My Credentials or API credentials
// 2. Service Credentials
//
// Credentials created via My credential or API credential inherits same user that of the creator
// and it gets same RBAC applied to the user. So when this credential is used in APIs, it will
// have same response/audit as creator of the credential is. Generate this credential if you want to
// automate or access APIs via CLI as yourself.
//
// service credential on the other hand will have a separte service user associated and RBAC can be
// managed differently per namespace than that of the original user creating it.
//
// For each these credentials, user can request credential in 3 different formats as required by
// their usecase:
//
// * API certificate - a password protected P12 certificate bundle
// * virtual K8s kubeconfig - a kubeconfig to access a cluster with embedded user access with client certificate.
// * API token - an easy to use secret that can be send part of HTTP request header Authorization: APIToken <value>
//

package api_credential

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Create Request
//
// x-displayName: "Create Request"
// CreateRequest is the request format for generating api credential.
type CreateRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of API credential record. It will be saved in metadata.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Specification
	//
	// x-displayName: "Spec"
	// Shape of the api credential specification.
	Spec *CustomCreateSpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// Expiry in days
	//
	// x-displayName: "Expiry in days"
	// x-example: "value"
	// Qty of days of service credential expiration.
	ExpirationDays uint32 `protobuf:"varint,5,opt,name=expiration_days,json=expirationDays,proto3" json:"expiration_days,omitempty"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{0}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetSpec() *CustomCreateSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateRequest) GetExpirationDays() uint32 {
	if m != nil {
		return m.ExpirationDays
	}
	return 0
}

// Recreate SCIM Token Request
//
// x-displayName: "Recreate SCIM Token Request"
// RecreateScimTokenRequest is the request format for generating SCIM api credential.
type RecreateScimTokenRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Expiry in days
	//
	// x-displayName: "Expiry in days"
	// x-example: "value"
	// Qty of days of service credential expiration. Default value is 180.
	// Expiration days value can range between 1 and 730.
	ExpirationDays uint32 `protobuf:"varint,3,opt,name=expiration_days,json=expirationDays,proto3" json:"expiration_days,omitempty"`
}

func (m *RecreateScimTokenRequest) Reset()      { *m = RecreateScimTokenRequest{} }
func (*RecreateScimTokenRequest) ProtoMessage() {}
func (*RecreateScimTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{1}
}
func (m *RecreateScimTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecreateScimTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecreateScimTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecreateScimTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecreateScimTokenRequest.Merge(m, src)
}
func (m *RecreateScimTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecreateScimTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecreateScimTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecreateScimTokenRequest proto.InternalMessageInfo

func (m *RecreateScimTokenRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RecreateScimTokenRequest) GetExpirationDays() uint32 {
	if m != nil {
		return m.ExpirationDays
	}
	return 0
}

// Create response
//
// x-displayName: "Create Response"
// CreateResponse is the response format for the credential's create request.
type CreateResponse struct {
	//Credentials
	//
	// x-displayName: "Credentials"
	// x-example: "value"
	// data is the response format based on the API credential type.
	// In case of API_CERTIFICATES, the response is the base64 encoded value of
	// certificate in PKCS12 format.
	// In case of KUBE_CONFIG, the response is the base64 encoded value of the K8s kubeconfig file
	// with contents as requested - cluster,namespace and base64 encoded certificate, key and CA.
	Data                string           `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Name                string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Active              bool             `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
}

func (m *CreateResponse) Reset()      { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage() {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{2}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *CreateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *CreateResponse) GetExpirationTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

// Create Service Credentials Request
//
// x-displayName: "Create Service Credentials Request"
// CreateServiceCredentialsRequest is the request format for creating service credentials.
type CreateServiceCredentialsRequest struct {
	// Type
	//
	// x-displayName: "Credential Type"
	// x-required
	// Type of API credential, API credentials, kubeconfig or token.
	// Please move to the oneof 'service_credential_choice' field for providing the details.
	Type APICredentialType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.api_credential.APICredentialType" json:"type,omitempty"` // Deprecated: Do not use.
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "svc-cred-app1"
	// Name of API credential record. It will be saved in metadata.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Roles
	//
	// x-displayName: "List of roles"
	// x-example: "value"
	// list of roles per namespace to be assigned to service credentials.
	NamespaceRoles []*schema.NamespaceRoleType `protobuf:"bytes,4,rep,name=namespace_roles,json=namespaceRoles,proto3" json:"namespace_roles,omitempty"`
	// Virtual k8s namespace
	//
	// x-displayName: "vK8s Namespace"
	// x-example: "app-ns1"
	// Namespace of virtual_k8s cluster. Applicable for KUBE_CONFIG.
	VirtualK8SNamespace string `protobuf:"bytes,6,opt,name=virtual_k8s_namespace,json=virtualK8sNamespace,proto3" json:"virtual_k8s_namespace,omitempty"` // Deprecated: Do not use.
	// virtual k8s cluster name
	//
	// x-displayName: "vK8s Cluster"
	// x-example: "vk8s-product-app1"
	// Name of virtual_k8s cluster. Applicable for KUBE_CONFIG.
	VirtualK8SName string `protobuf:"bytes,7,opt,name=virtual_k8s_name,json=virtualK8sName,proto3" json:"virtual_k8s_name,omitempty"` // Deprecated: Do not use.
	// Password for API certificate
	//
	// x-displayName: "Password"
	// x-required
	// x-example: "myPassw0rd123"
	// Password is used for generating an API certificate P12 bundle user can use to protect access to it.
	// this password will not be saved/persisted anywhere in the system. Applicable for credential type API_CERTIFICATE
	// Users have to use this password when they use the certificate, e.g. in curl or while adding to key chain.
	Password string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"` // Deprecated: Do not use.
	// Expiry in days
	//
	// x-displayName: "Expiry in days"
	// x-example: "value"
	// Qty of days of service credential expiration.
	ExpirationDays uint32 `protobuf:"varint,9,opt,name=expiration_days,json=expirationDays,proto3" json:"expiration_days,omitempty"`
	// Service Credential Spec
	//
	// x-displayName: "Service Credential Spec"
	// Credential specification can be one of the following types -
	// * service api token
	// * service api certificate
	// * service kube config
	// * site global kube config
	//
	// Types that are valid to be assigned to ServiceCredentialChoice:
	//	*CreateServiceCredentialsRequest_ApiToken
	//	*CreateServiceCredentialsRequest_ApiCertificate
	//	*CreateServiceCredentialsRequest_Vk8SKubeconfig
	//	*CreateServiceCredentialsRequest_SiteKubeconfig
	ServiceCredentialChoice isCreateServiceCredentialsRequest_ServiceCredentialChoice `protobuf_oneof:"service_credential_choice"`
}

func (m *CreateServiceCredentialsRequest) Reset()      { *m = CreateServiceCredentialsRequest{} }
func (*CreateServiceCredentialsRequest) ProtoMessage() {}
func (*CreateServiceCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{3}
}
func (m *CreateServiceCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceCredentialsRequest.Merge(m, src)
}
func (m *CreateServiceCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateServiceCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceCredentialsRequest proto.InternalMessageInfo

type isCreateServiceCredentialsRequest_ServiceCredentialChoice interface {
	isCreateServiceCredentialsRequest_ServiceCredentialChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateServiceCredentialsRequest_ApiToken struct {
	ApiToken *schema.Empty `protobuf:"bytes,11,opt,name=api_token,json=apiToken,proto3,oneof" json:"api_token,omitempty"`
}
type CreateServiceCredentialsRequest_ApiCertificate struct {
	ApiCertificate *ApiCertificateType `protobuf:"bytes,12,opt,name=api_certificate,json=apiCertificate,proto3,oneof" json:"api_certificate,omitempty"`
}
type CreateServiceCredentialsRequest_Vk8SKubeconfig struct {
	Vk8SKubeconfig *Vk8SKubeconfigType `protobuf:"bytes,13,opt,name=vk8s_kubeconfig,json=vk8sKubeconfig,proto3,oneof" json:"vk8s_kubeconfig,omitempty"`
}
type CreateServiceCredentialsRequest_SiteKubeconfig struct {
	SiteKubeconfig *SiteKubeconfigType `protobuf:"bytes,14,opt,name=site_kubeconfig,json=siteKubeconfig,proto3,oneof" json:"site_kubeconfig,omitempty"`
}

func (*CreateServiceCredentialsRequest_ApiToken) isCreateServiceCredentialsRequest_ServiceCredentialChoice() {
}
func (*CreateServiceCredentialsRequest_ApiCertificate) isCreateServiceCredentialsRequest_ServiceCredentialChoice() {
}
func (*CreateServiceCredentialsRequest_Vk8SKubeconfig) isCreateServiceCredentialsRequest_ServiceCredentialChoice() {
}
func (*CreateServiceCredentialsRequest_SiteKubeconfig) isCreateServiceCredentialsRequest_ServiceCredentialChoice() {
}

func (m *CreateServiceCredentialsRequest) GetServiceCredentialChoice() isCreateServiceCredentialsRequest_ServiceCredentialChoice {
	if m != nil {
		return m.ServiceCredentialChoice
	}
	return nil
}

// Deprecated: Do not use.
func (m *CreateServiceCredentialsRequest) GetType() APICredentialType {
	if m != nil {
		return m.Type
	}
	return API_CERTIFICATE
}

func (m *CreateServiceCredentialsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateServiceCredentialsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateServiceCredentialsRequest) GetNamespaceRoles() []*schema.NamespaceRoleType {
	if m != nil {
		return m.NamespaceRoles
	}
	return nil
}

// Deprecated: Do not use.
func (m *CreateServiceCredentialsRequest) GetVirtualK8SNamespace() string {
	if m != nil {
		return m.VirtualK8SNamespace
	}
	return ""
}

// Deprecated: Do not use.
func (m *CreateServiceCredentialsRequest) GetVirtualK8SName() string {
	if m != nil {
		return m.VirtualK8SName
	}
	return ""
}

// Deprecated: Do not use.
func (m *CreateServiceCredentialsRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateServiceCredentialsRequest) GetExpirationDays() uint32 {
	if m != nil {
		return m.ExpirationDays
	}
	return 0
}

func (m *CreateServiceCredentialsRequest) GetApiToken() *schema.Empty {
	if x, ok := m.GetServiceCredentialChoice().(*CreateServiceCredentialsRequest_ApiToken); ok {
		return x.ApiToken
	}
	return nil
}

func (m *CreateServiceCredentialsRequest) GetApiCertificate() *ApiCertificateType {
	if x, ok := m.GetServiceCredentialChoice().(*CreateServiceCredentialsRequest_ApiCertificate); ok {
		return x.ApiCertificate
	}
	return nil
}

func (m *CreateServiceCredentialsRequest) GetVk8SKubeconfig() *Vk8SKubeconfigType {
	if x, ok := m.GetServiceCredentialChoice().(*CreateServiceCredentialsRequest_Vk8SKubeconfig); ok {
		return x.Vk8SKubeconfig
	}
	return nil
}

func (m *CreateServiceCredentialsRequest) GetSiteKubeconfig() *SiteKubeconfigType {
	if x, ok := m.GetServiceCredentialChoice().(*CreateServiceCredentialsRequest_SiteKubeconfig); ok {
		return x.SiteKubeconfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateServiceCredentialsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateServiceCredentialsRequest_ApiToken)(nil),
		(*CreateServiceCredentialsRequest_ApiCertificate)(nil),
		(*CreateServiceCredentialsRequest_Vk8SKubeconfig)(nil),
		(*CreateServiceCredentialsRequest_SiteKubeconfig)(nil),
	}
}

// api_certificate
//
// x-displayName: "Service API Certificate Specification"
// Service API Certificate parameters
type ApiCertificateType struct {
	// Password for API certificate
	//
	// x-displayName: "Password"
	// x-required
	// x-example: "myPassw0rd123"
	// Password is used for generating an API certificate P12 bundle user can use to protect access to it.
	// this password will not be saved/persisted anywhere in the system. Applicable for credential type API_CERTIFICATE
	// Users have to use this password when they use the certificate, e.g. in curl or while adding to key chain.
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *ApiCertificateType) Reset()      { *m = ApiCertificateType{} }
func (*ApiCertificateType) ProtoMessage() {}
func (*ApiCertificateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{4}
}
func (m *ApiCertificateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiCertificateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiCertificateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiCertificateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiCertificateType.Merge(m, src)
}
func (m *ApiCertificateType) XXX_Size() int {
	return m.Size()
}
func (m *ApiCertificateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiCertificateType.DiscardUnknown(m)
}

var xxx_messageInfo_ApiCertificateType proto.InternalMessageInfo

func (m *ApiCertificateType) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// vk8s_kubeconfig
//
// x-displayName: "Service Kube Config Specification"
// Service Kube Config parameters
type Vk8SKubeconfigType struct {
	// Virtual k8s namespace
	//
	// x-displayName: "vK8s Namespace"
	// x-example: "app-ns1"
	// Namespace of virtual k8s cluster. Applicable for KUBE_CONFIG.
	Vk8SNamespace string `protobuf:"bytes,1,opt,name=vk8s_namespace,json=vk8sNamespace,proto3" json:"vk8s_namespace,omitempty"`
	// virtual k8s cluster name
	//
	// x-displayName: "vK8s Cluster"
	// x-example: "vk8s-product-app1"
	// Name of virtual k8s cluster.
	Vk8SClusterName string `protobuf:"bytes,2,opt,name=vk8s_cluster_name,json=vk8sClusterName,proto3" json:"vk8s_cluster_name,omitempty"`
}

func (m *Vk8SKubeconfigType) Reset()      { *m = Vk8SKubeconfigType{} }
func (*Vk8SKubeconfigType) ProtoMessage() {}
func (*Vk8SKubeconfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{5}
}
func (m *Vk8SKubeconfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vk8SKubeconfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vk8SKubeconfigType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vk8SKubeconfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vk8SKubeconfigType.Merge(m, src)
}
func (m *Vk8SKubeconfigType) XXX_Size() int {
	return m.Size()
}
func (m *Vk8SKubeconfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_Vk8SKubeconfigType.DiscardUnknown(m)
}

var xxx_messageInfo_Vk8SKubeconfigType proto.InternalMessageInfo

func (m *Vk8SKubeconfigType) GetVk8SNamespace() string {
	if m != nil {
		return m.Vk8SNamespace
	}
	return ""
}

func (m *Vk8SKubeconfigType) GetVk8SClusterName() string {
	if m != nil {
		return m.Vk8SClusterName
	}
	return ""
}

// site_kubeconfig
//
// x-displayName: "Site Global Kube Config Specification"
// Site Global Kube Config parameters
type SiteKubeconfigType struct {
	// Site
	//
	// x-displayName: "Site"
	// x-required
	// x-example: "ce398"
	// Name of the site for which kubeconfig is being requested.
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *SiteKubeconfigType) Reset()      { *m = SiteKubeconfigType{} }
func (*SiteKubeconfigType) ProtoMessage() {}
func (*SiteKubeconfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{6}
}
func (m *SiteKubeconfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteKubeconfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SiteKubeconfigType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SiteKubeconfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteKubeconfigType.Merge(m, src)
}
func (m *SiteKubeconfigType) XXX_Size() int {
	return m.Size()
}
func (m *SiteKubeconfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteKubeconfigType.DiscardUnknown(m)
}

var xxx_messageInfo_SiteKubeconfigType proto.InternalMessageInfo

func (m *SiteKubeconfigType) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// Create Spec Type
//
// x-displayName: "Create API Credential"
// Create request specification.
type CustomCreateSpecType struct {
	// Type
	//
	// x-displayName: "Credential Type"
	// x-required
	// Type of API credential, API credentials, kubeconfig or token.
	Type APICredentialType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.api_credential.APICredentialType" json:"type,omitempty"`
	// Virtual K8s namespace
	//
	// x-displayName: "vK8s Namespace"
	// x-example: "app-ns1"
	// Namespace of virtual K8s cluster. Applicable for KUBE_CONFIG.
	VirtualK8SNamespace string `protobuf:"bytes,3,opt,name=virtual_k8s_namespace,json=virtualK8sNamespace,proto3" json:"virtual_k8s_namespace,omitempty"`
	// virtual k8s cluster name
	//
	// x-displayName: "vK8s Cluster"
	// x-example: "vk8s-product-app1"
	// Name of virtual K8s cluster. Applicable for KUBE_CONFIG.
	VirtualK8SName string `protobuf:"bytes,4,opt,name=virtual_k8s_name,json=virtualK8sName,proto3" json:"virtual_k8s_name,omitempty"`
	// Password for API certificate
	//
	// x-displayName: "Password"
	// x-required
	// x-example: "myPassw0rd123"
	// Password is used for generating an API certificate P12 bundle user can use to protect access to it.
	// this password will not be saved/persisted anywhere in the system. Applicable for credential type API_CERTIFICATE
	// Users have to use this password when they use the certificate, e.g. in curl or while adding to key chain.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *CustomCreateSpecType) Reset()      { *m = CustomCreateSpecType{} }
func (*CustomCreateSpecType) ProtoMessage() {}
func (*CustomCreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{7}
}
func (m *CustomCreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomCreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomCreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomCreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomCreateSpecType.Merge(m, src)
}
func (m *CustomCreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CustomCreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomCreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CustomCreateSpecType proto.InternalMessageInfo

func (m *CustomCreateSpecType) GetType() APICredentialType {
	if m != nil {
		return m.Type
	}
	return API_CERTIFICATE
}

func (m *CustomCreateSpecType) GetVirtualK8SNamespace() string {
	if m != nil {
		return m.VirtualK8SNamespace
	}
	return ""
}

func (m *CustomCreateSpecType) GetVirtualK8SName() string {
	if m != nil {
		return m.VirtualK8SName
	}
	return ""
}

func (m *CustomCreateSpecType) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Scim Token Request
//
// x-displayName: "Scim Token Request"
// ScimTokenRequest is used for fetching or revoking scim token
type ScimTokenRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ScimTokenRequest) Reset()      { *m = ScimTokenRequest{} }
func (*ScimTokenRequest) ProtoMessage() {}
func (*ScimTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{8}
}
func (m *ScimTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScimTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScimTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScimTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScimTokenRequest.Merge(m, src)
}
func (m *ScimTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScimTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScimTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScimTokenRequest proto.InternalMessageInfo

func (m *ScimTokenRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Get credential request
//
// x-displayName: "Get Credential"
// Get credential object with a given name.
type GetRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Credential name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "value"
	// Name of API credential.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{9}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Get credential response
//
// x-displayName: "Get Credential Response"
// Response of get credential request with a given name.
type GetResponse struct {
	// Credential information
	//
	// x-displayName: "Credential Record"
	// Contains the information about request to generated certificate , kubeconfig, or api token.
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{10}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// List credentials request
//
// x-displayName: "List Credentials"
// Request to list all of credentials created by the user.
type ListRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{11}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// List credential response
//
// x-displayName: "List Credential Response"
// Response of request to list all of users credential objects.
type ListResponse struct {
	// List of the credentials
	//
	// x-displayName: "Credentials"
	// List of credential items.
	Items []*ListResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{12}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*ListResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// List Credential item
//
// x-displayName: "List credential response item"
// Each item of credential list request.
type ListResponseItem struct {
	// Credential name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of API credential object.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace of API credential object.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// uuid of the record
	//
	// x-displayName: "UUID"
	// x-example: "fa45979f-4e41-4f4b-8b0b-c3ab844ab0aa"
	// UUID of API credential object.
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Type of credential
	//
	// x-displayName: "Credential Type"
	// Type of API credential.
	Type APICredentialType `protobuf:"varint,4,opt,name=type,proto3,enum=ves.io.schema.api_credential.APICredentialType" json:"type,omitempty"`
	// Create timestamp
	//
	// x-displayName: "Creation Time"
	// Create time of API credential.
	CreateTimestamp *types.Timestamp `protobuf:"bytes,5,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	// Expiry time
	//
	// x-displayName: "Expiry Time"
	// Expiry time of credential.
	ExpiryTimestamp *types.Timestamp `protobuf:"bytes,6,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
	// Email of user
	//
	// x-displayName: "User"
	// x-example: "admin@acmecorp.com"
	// User email of user that requested credential .
	UserEmail string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Active
	//
	// x-displayName: "Active"
	// x-example: "true"
	// Possibility to deactivate credential with no deletion.
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *ListResponseItem) Reset()      { *m = ListResponseItem{} }
func (*ListResponseItem) ProtoMessage() {}
func (*ListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{13}
}
func (m *ListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponseItem.Merge(m, src)
}
func (m *ListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *ListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponseItem proto.InternalMessageInfo

func (m *ListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListResponseItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListResponseItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ListResponseItem) GetType() APICredentialType {
	if m != nil {
		return m.Type
	}
	return API_CERTIFICATE
}

func (m *ListResponseItem) GetCreateTimestamp() *types.Timestamp {
	if m != nil {
		return m.CreateTimestamp
	}
	return nil
}

func (m *ListResponseItem) GetExpiryTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return nil
}

func (m *ListResponseItem) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *ListResponseItem) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

// Renew Credential request
//
// x-displayName: "Renew Credentials"
// Request to renew a credential object.
type RenewRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Value of namespace is always "system" .
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Credential name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "api-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147a"
	// Name of API credential object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Expiry in days
	//
	// x-displayName: "Expiry in days"
	// x-example: "value"
	// Qty of days of service credential expiration.
	ExpirationDays uint32 `protobuf:"varint,5,opt,name=expiration_days,json=expirationDays,proto3" json:"expiration_days,omitempty"`
}

func (m *RenewRequest) Reset()      { *m = RenewRequest{} }
func (*RenewRequest) ProtoMessage() {}
func (*RenewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{14}
}
func (m *RenewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewRequest.Merge(m, src)
}
func (m *RenewRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewRequest proto.InternalMessageInfo

func (m *RenewRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RenewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenewRequest) GetExpirationDays() uint32 {
	if m != nil {
		return m.ExpirationDays
	}
	return 0
}

// API credential status response
//
// x-displayName: "API credential status response"
// API credential status response
type StatusResponse struct {
	// Status
	//
	// x-displayName: "status"
	// x-example: "true"
	// Result status flag.
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()      { *m = StatusResponse{} }
func (*StatusResponse) ProtoMessage() {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{15}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

// Delete Service Credentials Request
//
// x-displayName: "Delete Service Credentials Request"
// DeleteServiceCredentialsRequest is the request format for deleting service credentials.
type DeleteRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// Value of namespace is always "system".
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Credential name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "svc-cred-73c7cbd9-1342-4ce0-97a5-6c515c0b147c"
	// Name of API credential.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd860345148a1a2, []int{16}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.api_credential.CreateRequest")
	golang_proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.api_credential.CreateRequest")
	proto.RegisterType((*RecreateScimTokenRequest)(nil), "ves.io.schema.api_credential.RecreateScimTokenRequest")
	golang_proto.RegisterType((*RecreateScimTokenRequest)(nil), "ves.io.schema.api_credential.RecreateScimTokenRequest")
	proto.RegisterType((*CreateResponse)(nil), "ves.io.schema.api_credential.CreateResponse")
	golang_proto.RegisterType((*CreateResponse)(nil), "ves.io.schema.api_credential.CreateResponse")
	proto.RegisterType((*CreateServiceCredentialsRequest)(nil), "ves.io.schema.api_credential.CreateServiceCredentialsRequest")
	golang_proto.RegisterType((*CreateServiceCredentialsRequest)(nil), "ves.io.schema.api_credential.CreateServiceCredentialsRequest")
	proto.RegisterType((*ApiCertificateType)(nil), "ves.io.schema.api_credential.ApiCertificateType")
	golang_proto.RegisterType((*ApiCertificateType)(nil), "ves.io.schema.api_credential.ApiCertificateType")
	proto.RegisterType((*Vk8SKubeconfigType)(nil), "ves.io.schema.api_credential.Vk8sKubeconfigType")
	golang_proto.RegisterType((*Vk8SKubeconfigType)(nil), "ves.io.schema.api_credential.Vk8sKubeconfigType")
	proto.RegisterType((*SiteKubeconfigType)(nil), "ves.io.schema.api_credential.SiteKubeconfigType")
	golang_proto.RegisterType((*SiteKubeconfigType)(nil), "ves.io.schema.api_credential.SiteKubeconfigType")
	proto.RegisterType((*CustomCreateSpecType)(nil), "ves.io.schema.api_credential.CustomCreateSpecType")
	golang_proto.RegisterType((*CustomCreateSpecType)(nil), "ves.io.schema.api_credential.CustomCreateSpecType")
	proto.RegisterType((*ScimTokenRequest)(nil), "ves.io.schema.api_credential.ScimTokenRequest")
	golang_proto.RegisterType((*ScimTokenRequest)(nil), "ves.io.schema.api_credential.ScimTokenRequest")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.api_credential.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.api_credential.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.api_credential.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.api_credential.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.api_credential.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.api_credential.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.api_credential.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.api_credential.ListResponse")
	proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.api_credential.ListResponseItem")
	golang_proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.api_credential.ListResponseItem")
	proto.RegisterType((*RenewRequest)(nil), "ves.io.schema.api_credential.RenewRequest")
	golang_proto.RegisterType((*RenewRequest)(nil), "ves.io.schema.api_credential.RenewRequest")
	proto.RegisterType((*StatusResponse)(nil), "ves.io.schema.api_credential.StatusResponse")
	golang_proto.RegisterType((*StatusResponse)(nil), "ves.io.schema.api_credential.StatusResponse")
	proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.api_credential.DeleteRequest")
	golang_proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.api_credential.DeleteRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/api_credential/public_customapi.proto", fileDescriptor_6dd860345148a1a2)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_credential/public_customapi.proto", fileDescriptor_6dd860345148a1a2)
}

var fileDescriptor_6dd860345148a1a2 = []byte{
	// 1868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4f, 0x6c, 0x1b, 0x59,
	0x19, 0xf7, 0xf3, 0xbf, 0x3a, 0xcf, 0x89, 0xe3, 0x7d, 0x2d, 0xdd, 0x69, 0x28, 0x8e, 0x19, 0x40,
	0xeb, 0xa6, 0xfe, 0x93, 0x38, 0x4d, 0x9b, 0x0d, 0xbb, 0x51, 0x93, 0xb4, 0xea, 0x36, 0xcb, 0x9f,
	0x32, 0x8d, 0x38, 0xc0, 0xc1, 0x8c, 0xc7, 0x2f, 0xee, 0x23, 0xf6, 0xcc, 0xec, 0xbc, 0x67, 0xa7,
	0x11, 0x8a, 0xa8, 0xf6, 0xcc, 0x81, 0x15, 0x42, 0x5a, 0xb1, 0x08, 0xf5, 0xc8, 0x91, 0x03, 0x07,
	0x44, 0x2e, 0xb9, 0x6d, 0x04, 0x68, 0x55, 0x15, 0x09, 0xaa, 0x8a, 0x43, 0xeb, 0x70, 0x80, 0x0b,
	0x5a, 0x55, 0x1c, 0x38, 0xa2, 0xf7, 0x66, 0x3c, 0x1e, 0xff, 0x89, 0x3d, 0x4e, 0x95, 0xbd, 0xcd,
	0xbc, 0xef, 0xef, 0xef, 0xfb, 0xbe, 0xf7, 0x7d, 0xdf, 0xd8, 0x70, 0xb1, 0x89, 0x69, 0x9e, 0x18,
	0x05, 0xaa, 0x3d, 0xc0, 0x75, 0xb5, 0xa0, 0x9a, 0xa4, 0xa4, 0x59, 0xb8, 0x82, 0x75, 0x46, 0xd4,
	0x5a, 0xc1, 0x6c, 0x94, 0x6b, 0x44, 0x2b, 0x69, 0x0d, 0xca, 0x8c, 0xba, 0x6a, 0x92, 0xbc, 0x69,
	0x19, 0xcc, 0x40, 0x97, 0x6d, 0xa1, 0xbc, 0x2d, 0x94, 0xef, 0x16, 0x9a, 0xc9, 0x55, 0x09, 0x7b,
	0xd0, 0x28, 0xe7, 0x35, 0xa3, 0x5e, 0xa8, 0x1a, 0x55, 0xa3, 0x20, 0x84, 0xca, 0x8d, 0x6d, 0xf1,
	0x26, 0x5e, 0xc4, 0x93, 0xad, 0x6c, 0xe6, 0x72, 0xd5, 0x30, 0xaa, 0x35, 0xcc, 0x4d, 0x17, 0x54,
	0x5d, 0x37, 0x98, 0xca, 0x88, 0xa1, 0x53, 0x87, 0x3a, 0xeb, 0x50, 0x5d, 0x1d, 0x8c, 0xd4, 0x31,
	0x65, 0x6a, 0xdd, 0x74, 0x18, 0xae, 0x0c, 0x05, 0x60, 0x94, 0x7f, 0x8c, 0x35, 0xe6, 0xb0, 0x66,
	0x86, 0xb2, 0xb2, 0x3d, 0x13, 0xb7, 0xad, 0x7e, 0xb9, 0x9b, 0xd3, 0x30, 0xbd, 0x2e, 0x5d, 0xea,
	0x26, 0x7a, 0xe5, 0x2e, 0x77, 0x93, 0x9a, 0x6a, 0x8d, 0x54, 0x54, 0x86, 0x1d, 0xaa, 0xdc, 0x43,
	0xc5, 0x14, 0xeb, 0xcd, 0x1e, 0xe5, 0xe9, 0x1e, 0x1e, 0x82, 0x77, 0x4b, 0x5d, 0x1c, 0xf2, 0x33,
	0x00, 0xa7, 0x36, 0x2c, 0xac, 0x32, 0xac, 0xe0, 0x0f, 0x1a, 0x98, 0x32, 0x74, 0x19, 0x4e, 0xe8,
	0x6a, 0x1d, 0x53, 0x53, 0xd5, 0xb0, 0x04, 0xd2, 0x20, 0x33, 0xa1, 0x74, 0x0e, 0x10, 0x82, 0x61,
	0xfe, 0x22, 0x05, 0x05, 0x41, 0x3c, 0xa3, 0xef, 0xc1, 0x30, 0x35, 0xb1, 0x26, 0x85, 0xd2, 0x20,
	0x13, 0x2f, 0x16, 0xf3, 0xc3, 0xf2, 0x99, 0xdf, 0x10, 0xd9, 0xb7, 0x4d, 0xde, 0x37, 0xb1, 0xb6,
	0xb5, 0x67, 0xe2, 0xf5, 0x89, 0x5f, 0xed, 0x47, 0xdf, 0xd1, 0x0d, 0x1d, 0xaf, 0x2a, 0x42, 0x15,
	0x7a, 0x0b, 0x4e, 0xe3, 0x87, 0x26, 0xb1, 0x44, 0xf6, 0x4a, 0x15, 0x75, 0x8f, 0x4a, 0x91, 0x34,
	0xc8, 0x4c, 0x29, 0x89, 0xce, 0xf1, 0x2d, 0x75, 0x8f, 0xae, 0x9c, 0xff, 0xd3, 0x6a, 0xf4, 0xbb,
	0x22, 0x2d, 0xaf, 0x56, 0xcf, 0x2d, 0x64, 0x8b, 0xd9, 0xc5, 0xec, 0xd2, 0x66, 0x38, 0x16, 0x4e,
	0x46, 0xe4, 0x47, 0x00, 0x4a, 0x0a, 0xd6, 0x6c, 0x4b, 0x1a, 0xa9, 0x6f, 0x19, 0x3b, 0x58, 0xf7,
	0x87, 0xf2, 0x66, 0xbf, 0x79, 0x0e, 0x6e, 0x6a, 0xfd, 0xcd, 0xe7, 0x07, 0x20, 0xb4, 0xb0, 0x3c,
	0xff, 0xbf, 0x03, 0x10, 0xf8, 0xe3, 0xbf, 0x0f, 0x43, 0xe7, 0xe6, 0x22, 0xd2, 0xf3, 0x48, 0x06,
	0xf4, 0xfa, 0xb5, 0x19, 0x8e, 0x05, 0x93, 0x21, 0xf9, 0xf7, 0x00, 0x26, 0xda, 0xd1, 0xa5, 0xa6,
	0xa1, 0x53, 0x11, 0xc0, 0x8a, 0xca, 0x54, 0xc7, 0xa6, 0x78, 0x1e, 0x18, 0xd4, 0x8b, 0x30, 0xaa,
	0x6a, 0x8c, 0x34, 0xb1, 0xb0, 0x1c, 0x53, 0x9c, 0x37, 0xf4, 0x6d, 0x78, 0xc1, 0xe3, 0x9a, 0x5b,
	0xbf, 0x52, 0x58, 0x04, 0x7f, 0x26, 0x6f, 0x57, 0x78, 0xbe, 0x5d, 0xe1, 0xf9, 0xad, 0x36, 0x87,
	0x72, 0xbe, 0x23, 0xe7, 0x1e, 0xae, 0x9c, 0x7f, 0xb1, 0x0a, 0x5e, 0xad, 0x82, 0x85, 0x8f, 0x1f,
	0xcf, 0x06, 0x7e, 0xf7, 0x78, 0x36, 0xf0, 0xe8, 0x1f, 0xe9, 0x80, 0xfc, 0x71, 0x14, 0xce, 0x3a,
	0x19, 0xc2, 0x56, 0x93, 0x68, 0x78, 0xc3, 0xcd, 0x1f, 0x6d, 0x07, 0xf0, 0x0e, 0x0c, 0xf3, 0x5a,
	0x15, 0x38, 0x12, 0xc5, 0xc2, 0xf0, 0xa4, 0xaf, 0xdd, 0xbb, 0xdb, 0x51, 0x21, 0x32, 0x1e, 0x94,
	0x80, 0x22, 0x14, 0x74, 0x67, 0x22, 0x78, 0x52, 0xbd, 0x85, 0x3c, 0xa1, 0xb9, 0x0b, 0xa7, 0x5d,
	0x86, 0x92, 0x65, 0xd4, 0x30, 0x95, 0xc2, 0xe9, 0x50, 0x26, 0x5e, 0x4c, 0xf7, 0x78, 0xf1, 0x9d,
	0x36, 0x97, 0x62, 0xd4, 0x30, 0x37, 0xab, 0x24, 0x74, 0xef, 0x11, 0x45, 0xd7, 0xe1, 0x97, 0x9a,
	0xc4, 0x62, 0x0d, 0xb5, 0x56, 0xda, 0x59, 0xa6, 0xa5, 0x8e, 0x23, 0x51, 0x6e, 0x4f, 0x78, 0x79,
	0xde, 0x61, 0x78, 0x7f, 0x99, 0xba, 0xfa, 0x50, 0x16, 0x26, 0x7b, 0xe5, 0xa4, 0x73, 0xae, 0x48,
	0xa2, 0x5b, 0x04, 0x7d, 0x15, 0xc6, 0x4c, 0x95, 0xd2, 0x5d, 0xc3, 0xaa, 0x48, 0x31, 0xc1, 0x15,
	0x39, 0xda, 0x07, 0x12, 0x50, 0xdc, 0xe3, 0x41, 0x05, 0x3f, 0x31, 0xa8, 0xe0, 0xd1, 0x22, 0x9c,
	0xe0, 0xc1, 0x65, 0xbc, 0x98, 0xa5, 0xb8, 0x48, 0xfa, 0x85, 0x1e, 0xd8, 0xb7, 0xeb, 0x26, 0xdb,
	0x7b, 0x2f, 0xa0, 0xc4, 0x54, 0x93, 0x88, 0xa2, 0x47, 0x3f, 0x84, 0xd3, 0x22, 0x23, 0xd8, 0x62,
	0x64, 0x9b, 0x68, 0x2a, 0xc3, 0xd2, 0xa4, 0x10, 0x9d, 0x1f, 0x91, 0x37, 0x93, 0x6c, 0x74, 0x64,
	0x78, 0x04, 0xdf, 0x0b, 0x28, 0x09, 0xb5, 0xeb, 0x94, 0x2b, 0x6f, 0xf2, 0x20, 0xec, 0x34, 0xca,
	0x58, 0x33, 0xf4, 0x6d, 0x52, 0x95, 0xa6, 0xfc, 0x28, 0xff, 0xfe, 0xce, 0x32, 0x7d, 0xdf, 0x95,
	0x69, 0x2b, 0x6f, 0x76, 0x9d, 0x72, 0xe5, 0x94, 0x30, 0xec, 0x55, 0x9e, 0xf0, 0xa3, 0xfc, 0x3e,
	0x61, 0xb8, 0x5f, 0x39, 0xed, 0x3a, 0x5d, 0xff, 0x06, 0xbc, 0x44, 0xed, 0x02, 0xf7, 0x88, 0x96,
	0xb4, 0x07, 0x06, 0xd1, 0x30, 0x8a, 0x1d, 0x1e, 0x80, 0xf8, 0x93, 0x03, 0x00, 0x37, 0xc3, 0xb1,
	0x48, 0x32, 0xba, 0x19, 0x8e, 0xc1, 0x64, 0x5c, 0xbe, 0x09, 0x51, 0x7f, 0x50, 0xd0, 0x9c, 0x27,
	0xc1, 0xe2, 0x62, 0xaf, 0x27, 0x8e, 0xf6, 0x01, 0x6f, 0x10, 0x51, 0x2b, 0x9c, 0x8e, 0x66, 0x8a,
	0x9d, 0x4c, 0xcb, 0x3f, 0x85, 0xa8, 0x1f, 0x39, 0x5a, 0x80, 0x02, 0x79, 0xa9, 0xa7, 0x29, 0xad,
	0x43, 0xae, 0x24, 0x62, 0x85, 0x1e, 0x07, 0x81, 0x32, 0xc5, 0x39, 0x3a, 0x35, 0x78, 0x1d, 0xbe,
	0x21, 0x44, 0xb4, 0x5a, 0x83, 0x32, 0x6c, 0x95, 0x3a, 0x2d, 0xa4, 0x4b, 0x4a, 0x24, 0x67, 0xc3,
	0xe6, 0xe1, 0xc2, 0xf2, 0x12, 0x44, 0xfd, 0xd1, 0x41, 0xb3, 0x30, 0xcc, 0xa3, 0xe3, 0x98, 0x8d,
	0xb7, 0x7d, 0x07, 0x99, 0x9b, 0x8a, 0x20, 0xc8, 0xff, 0x01, 0xf0, 0xc2, 0xa0, 0xe6, 0x8d, 0x36,
	0x5e, 0xab, 0x13, 0x38, 0x5d, 0xa0, 0x78, 0xd2, 0x45, 0xb4, 0x2f, 0xfe, 0xc0, 0x4b, 0x98, 0x19,
	0x70, 0x09, 0xc3, 0x82, 0xbd, 0xf7, 0x02, 0xce, 0x7a, 0xf2, 0x13, 0x11, 0x00, 0x43, 0x47, 0xfb,
	0x9e, 0xeb, 0xb7, 0x32, 0xf9, 0x6a, 0x75, 0x82, 0x4f, 0x8f, 0xa5, 0xec, 0x62, 0xf6, 0x9a, 0xd3,
	0xbc, 0xe7, 0x61, 0x72, 0xbc, 0xb1, 0x21, 0xaf, 0x42, 0x78, 0x07, 0xb3, 0x53, 0x0f, 0x52, 0xf9,
	0x1e, 0x8c, 0x0b, 0x79, 0x67, 0x54, 0xac, 0xc1, 0xa8, 0xbd, 0x71, 0x08, 0xe9, 0x78, 0xf1, 0xeb,
	0xc3, 0x43, 0x6b, 0x8f, 0xc1, 0xf5, 0xd0, 0xe1, 0x3e, 0x50, 0x1c, 0x41, 0xf9, 0x2a, 0x8c, 0x7f,
	0x8b, 0x50, 0x7f, 0x2e, 0xc9, 0x5b, 0x70, 0xd2, 0x66, 0x76, 0xec, 0xdf, 0x82, 0x11, 0xc2, 0x70,
	0x9d, 0x4a, 0x40, 0x74, 0xd7, 0xfc, 0x70, 0xf3, 0x5e, 0xd1, 0xbb, 0x0c, 0xd7, 0x15, 0x5b, 0x58,
	0x7e, 0x11, 0x84, 0xc9, 0x5e, 0x9a, 0x8b, 0x1e, 0x78, 0xda, 0xfa, 0xf0, 0x41, 0x90, 0x84, 0xa1,
	0x06, 0xa9, 0x38, 0xe5, 0xc0, 0x1f, 0xdd, 0xba, 0x0b, 0xbf, 0x4e, 0xdd, 0xdd, 0x86, 0x49, 0x7b,
	0x43, 0xf0, 0x8c, 0xd2, 0xc8, 0xc8, 0x51, 0x3a, 0x6d, 0xcb, 0xb8, 0x07, 0x5c, 0x8d, 0xe8, 0xd3,
	0x7b, 0x1e, 0x35, 0xd1, 0xd1, 0x6a, 0x6c, 0x99, 0x8e, 0x9a, 0xaf, 0x40, 0xd8, 0xa0, 0xd8, 0x2a,
	0xe1, 0xba, 0x4a, 0x6a, 0xf6, 0x40, 0x51, 0x26, 0xf8, 0xc9, 0x6d, 0x7e, 0xe0, 0xd9, 0x09, 0x62,
	0xde, 0x9d, 0x40, 0x6e, 0xc0, 0x49, 0x05, 0xeb, 0x78, 0xf7, 0xf4, 0x2b, 0x9c, 0xdf, 0x7d, 0x6b,
	0x33, 0x1c, 0x0b, 0x25, 0xc3, 0xce, 0x82, 0x95, 0x81, 0x89, 0xfb, 0x4c, 0x65, 0x0d, 0xea, 0x56,
	0xcc, 0x45, 0x18, 0xa5, 0xe2, 0x44, 0x58, 0x8d, 0x29, 0xce, 0x9b, 0xbc, 0x06, 0xa7, 0x6e, 0xe1,
	0x1a, 0x7e, 0x8d, 0x25, 0xb3, 0xf8, 0xdf, 0x4b, 0x70, 0xc2, 0x6e, 0x3f, 0x6b, 0xf7, 0xee, 0xa2,
	0xcf, 0x00, 0x8c, 0xda, 0x6d, 0x08, 0x5d, 0x1d, 0xb1, 0x6f, 0x7a, 0x97, 0xdb, 0x99, 0xac, 0x3f,
	0x66, 0x1b, 0x8e, 0x4c, 0x5a, 0x9f, 0x4a, 0xd9, 0xed, 0xa5, 0x87, 0x5a, 0xae, 0x82, 0xb7, 0xd5,
	0x46, 0x8d, 0xe5, 0x54, 0x4d, 0xc3, 0x94, 0x66, 0xf9, 0x5e, 0x9d, 0x23, 0x46, 0x6e, 0x17, 0x97,
	0x9d, 0xa3, 0xdc, 0xae, 0x45, 0x18, 0xfe, 0xf0, 0xaf, 0xff, 0xfc, 0x45, 0x70, 0x51, 0xce, 0x3b,
	0x9f, 0x3a, 0x05, 0x17, 0x12, 0x2d, 0xfc, 0xc4, 0x7d, 0xde, 0xef, 0xf9, 0x56, 0xa0, 0x2b, 0x60,
	0x0e, 0x3d, 0x07, 0xf0, 0x8d, 0xbe, 0x65, 0x15, 0x5d, 0x1f, 0xee, 0xee, 0x49, 0xdb, 0xed, 0x98,
	0x30, 0x4b, 0xad, 0x4f, 0xa5, 0xb7, 0x04, 0x4c, 0xaa, 0x91, 0x7a, 0x4e, 0xad, 0xd4, 0x89, 0x9e,
	0x4d, 0x37, 0x8d, 0x1a, 0xd3, 0x0c, 0x9d, 0x1a, 0x35, 0xec, 0x39, 0x17, 0x08, 0xf3, 0xf2, 0x95,
	0x11, 0x08, 0xb9, 0x80, 0xbd, 0xa3, 0x70, 0x70, 0x7f, 0x06, 0x70, 0xf2, 0x0e, 0x66, 0x1d, 0x5c,
	0x23, 0x5a, 0x49, 0x1f, 0x9e, 0x2b, 0xc3, 0xf9, 0x3d, 0x4d, 0x53, 0xfe, 0xd1, 0xd1, 0x1f, 0x82,
	0x60, 0x5c, 0x40, 0x57, 0x91, 0x7f, 0x40, 0xe8, 0x2f, 0x00, 0x86, 0xee, 0x60, 0x86, 0x32, 0x3e,
	0x9c, 0x1a, 0xdb, 0x7d, 0xd3, 0x71, 0xff, 0xaa, 0xcf, 0xb2, 0xb3, 0xb0, 0x5a, 0x11, 0x10, 0x6e,
	0xa0, 0xa5, 0xf1, 0xaa, 0xce, 0xa6, 0xed, 0xa3, 0x23, 0x00, 0xc3, 0xbc, 0x3f, 0xa3, 0x2b, 0x7e,
	0xfa, 0xbb, 0x0d, 0x68, 0xce, 0xff, 0x28, 0x90, 0xc9, 0x69, 0x11, 0xcd, 0xa3, 0x31, 0xef, 0x11,
	0x6a, 0x01, 0x78, 0x91, 0xdb, 0xee, 0xff, 0x6a, 0x39, 0x2b, 0x70, 0x1f, 0x38, 0xe0, 0x0a, 0x02,
	0x5c, 0xbb, 0xba, 0xca, 0x2a, 0x25, 0x5a, 0xae, 0x6e, 0xe8, 0x84, 0x19, 0x96, 0x8b, 0xb1, 0x8a,
	0x75, 0x6c, 0xa9, 0xb5, 0x0e, 0xc0, 0x6b, 0xa8, 0x38, 0xaa, 0xea, 0xfa, 0xb6, 0x53, 0x8a, 0x9e,
	0x02, 0x18, 0x55, 0x70, 0xd3, 0xd8, 0xc1, 0x63, 0x54, 0xe0, 0x88, 0x86, 0xd0, 0xdd, 0xc6, 0x65,
	0xf3, 0x54, 0x7d, 0x6f, 0x45, 0x1e, 0x55, 0x81, 0x96, 0x70, 0x7b, 0x50, 0xfb, 0xfb, 0x28, 0xc8,
	0xbf, 0xd5, 0x39, 0x75, 0x40, 0xee, 0xce, 0x0a, 0xe6, 0xaf, 0x79, 0xe6, 0xb6, 0x7a, 0x33, 0x87,
	0xdb, 0xfd, 0x62, 0x40, 0x4a, 0xbd, 0x14, 0xce, 0xea, 0x06, 0xa4, 0xa1, 0x3a, 0xed, 0xc4, 0x13,
	0x8f, 0x55, 0xf9, 0x6d, 0x7f, 0xf1, 0x18, 0x90, 0x65, 0x1e, 0x93, 0xbf, 0x03, 0x38, 0xed, 0xc4,
	0xe4, 0xd4, 0x8d, 0x73, 0xbc, 0x80, 0x6c, 0x8f, 0xdb, 0x37, 0x97, 0xe4, 0x79, 0x9f, 0x10, 0xbb,
	0xe6, 0xc1, 0xdf, 0x00, 0x8c, 0xad, 0xf1, 0xd5, 0x85, 0xcf, 0xef, 0xb3, 0xca, 0xae, 0x75, 0xaa,
	0x22, 0x7e, 0x47, 0xbe, 0x31, 0xaa, 0xe9, 0x38, 0x8e, 0x0f, 0x2a, 0xe3, 0x5f, 0x06, 0xe1, 0x4c,
	0x1b, 0xd8, 0x17, 0x58, 0xc8, 0xbf, 0x39, 0xdb, 0x42, 0xbe, 0x29, 0x7f, 0xd3, 0x6f, 0x4c, 0x4e,
	0x28, 0xe5, 0xa7, 0x00, 0x46, 0xc4, 0x86, 0x8a, 0xe6, 0x46, 0x6d, 0x34, 0x9d, 0x35, 0x76, 0xcc,
	0x20, 0x18, 0xa7, 0xca, 0xf7, 0xdb, 0xf2, 0xb5, 0x91, 0x15, 0xac, 0xe3, 0xdd, 0x13, 0x7a, 0xd6,
	0x9b, 0xc2, 0xdf, 0x01, 0x99, 0x3e, 0x3b, 0x98, 0x9f, 0x9c, 0x6d, 0xae, 0xdf, 0x95, 0x97, 0x7d,
	0xc5, 0xe3, 0x84, 0x44, 0x7f, 0x12, 0x84, 0xd2, 0x49, 0xbf, 0x1c, 0xa2, 0x77, 0xfd, 0x6c, 0xa5,
	0x27, 0xfe, 0xe2, 0x38, 0xe6, 0x52, 0xfb, 0x11, 0x8f, 0xd3, 0xbd, 0xfe, 0x38, 0xf1, 0xaf, 0xa9,
	0x81, 0x61, 0xf2, 0x10, 0xba, 0xa2, 0xd4, 0x1e, 0xdb, 0x9d, 0x18, 0xdd, 0x90, 0x4f, 0x31, 0xb7,
	0x57, 0xc0, 0xdc, 0xcc, 0xc2, 0xe1, 0x01, 0x08, 0x3d, 0x3d, 0x00, 0x5f, 0xf3, 0xf1, 0x1d, 0xff,
	0xe1, 0x67, 0x52, 0xf0, 0x01, 0x58, 0xff, 0x19, 0x78, 0xf2, 0x32, 0x15, 0x78, 0xf6, 0x32, 0x15,
	0xf8, 0xfc, 0x65, 0x0a, 0x3c, 0x6a, 0xa5, 0xc0, 0x6f, 0x5b, 0x29, 0x70, 0xd4, 0x4a, 0x81, 0x27,
	0xad, 0x14, 0x78, 0xd1, 0x4a, 0x81, 0x7f, 0xb5, 0x52, 0x81, 0xcf, 0x5b, 0x29, 0xf0, 0xf3, 0xe3,
	0x54, 0xe0, 0xf0, 0x38, 0x05, 0x9e, 0x1c, 0xa7, 0x02, 0xcf, 0x8e, 0x53, 0x81, 0x1f, 0x28, 0x55,
	0xc3, 0xdc, 0xa9, 0xe6, 0x79, 0xfb, 0xc6, 0x96, 0xa5, 0xe6, 0x1b, 0xb4, 0x20, 0x1e, 0xb6, 0x0d,
	0xab, 0x9e, 0x33, 0x2d, 0xa3, 0x49, 0x2a, 0xd8, 0xca, 0xb5, 0xc9, 0x05, 0xb3, 0x5c, 0x35, 0x0a,
	0xf8, 0x21, 0x73, 0xfe, 0x2b, 0x18, 0xf8, 0xb7, 0x46, 0x39, 0x2a, 0xbe, 0x62, 0x17, 0xff, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x9c, 0x66, 0x54, 0xeb, 0xe9, 0x19, 0x00, 0x00,
}

func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.ExpirationDays != that1.ExpirationDays {
		return false
	}
	return true
}
func (this *RecreateScimTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecreateScimTokenRequest)
	if !ok {
		that2, ok := that.(RecreateScimTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ExpirationDays != that1.ExpirationDays {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *CreateServiceCredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServiceCredentialsRequest)
	if !ok {
		that2, ok := that.(CreateServiceCredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.NamespaceRoles) != len(that1.NamespaceRoles) {
		return false
	}
	for i := range this.NamespaceRoles {
		if !this.NamespaceRoles[i].Equal(that1.NamespaceRoles[i]) {
			return false
		}
	}
	if this.VirtualK8SNamespace != that1.VirtualK8SNamespace {
		return false
	}
	if this.VirtualK8SName != that1.VirtualK8SName {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.ExpirationDays != that1.ExpirationDays {
		return false
	}
	if that1.ServiceCredentialChoice == nil {
		if this.ServiceCredentialChoice != nil {
			return false
		}
	} else if this.ServiceCredentialChoice == nil {
		return false
	} else if !this.ServiceCredentialChoice.Equal(that1.ServiceCredentialChoice) {
		return false
	}
	return true
}
func (this *CreateServiceCredentialsRequest_ApiToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServiceCredentialsRequest_ApiToken)
	if !ok {
		that2, ok := that.(CreateServiceCredentialsRequest_ApiToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiToken.Equal(that1.ApiToken) {
		return false
	}
	return true
}
func (this *CreateServiceCredentialsRequest_ApiCertificate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServiceCredentialsRequest_ApiCertificate)
	if !ok {
		that2, ok := that.(CreateServiceCredentialsRequest_ApiCertificate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiCertificate.Equal(that1.ApiCertificate) {
		return false
	}
	return true
}
func (this *CreateServiceCredentialsRequest_Vk8SKubeconfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServiceCredentialsRequest_Vk8SKubeconfig)
	if !ok {
		that2, ok := that.(CreateServiceCredentialsRequest_Vk8SKubeconfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vk8SKubeconfig.Equal(that1.Vk8SKubeconfig) {
		return false
	}
	return true
}
func (this *CreateServiceCredentialsRequest_SiteKubeconfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServiceCredentialsRequest_SiteKubeconfig)
	if !ok {
		that2, ok := that.(CreateServiceCredentialsRequest_SiteKubeconfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteKubeconfig.Equal(that1.SiteKubeconfig) {
		return false
	}
	return true
}
func (this *ApiCertificateType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiCertificateType)
	if !ok {
		that2, ok := that.(ApiCertificateType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *Vk8SKubeconfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vk8SKubeconfigType)
	if !ok {
		that2, ok := that.(Vk8SKubeconfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vk8SNamespace != that1.Vk8SNamespace {
		return false
	}
	if this.Vk8SClusterName != that1.Vk8SClusterName {
		return false
	}
	return true
}
func (this *SiteKubeconfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteKubeconfigType)
	if !ok {
		that2, ok := that.(SiteKubeconfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *CustomCreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomCreateSpecType)
	if !ok {
		that2, ok := that.(CustomCreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.VirtualK8SNamespace != that1.VirtualK8SNamespace {
		return false
	}
	if this.VirtualK8SName != that1.VirtualK8SName {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *ScimTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScimTokenRequest)
	if !ok {
		that2, ok := that.(ScimTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *ListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponseItem)
	if !ok {
		that2, ok := that.(ListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.CreateTimestamp.Equal(that1.CreateTimestamp) {
		return false
	}
	if !this.ExpiryTimestamp.Equal(that1.ExpiryTimestamp) {
		return false
	}
	if this.UserEmail != that1.UserEmail {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	return true
}
func (this *RenewRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenewRequest)
	if !ok {
		that2, ok := that.(RenewRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ExpirationDays != that1.ExpirationDays {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_credential.CreateRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ExpirationDays: "+fmt.Sprintf("%#v", this.ExpirationDays)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecreateScimTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_credential.RecreateScimTokenRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ExpirationDays: "+fmt.Sprintf("%#v", this.ExpirationDays)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateServiceCredentialsRequest) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&api_credential.CreateServiceCredentialsRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.NamespaceRoles != nil {
		s = append(s, "NamespaceRoles: "+fmt.Sprintf("%#v", this.NamespaceRoles)+",\n")
	}
	s = append(s, "VirtualK8SNamespace: "+fmt.Sprintf("%#v", this.VirtualK8SNamespace)+",\n")
	s = append(s, "VirtualK8SName: "+fmt.Sprintf("%#v", this.VirtualK8SName)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "ExpirationDays: "+fmt.Sprintf("%#v", this.ExpirationDays)+",\n")
	if this.ServiceCredentialChoice != nil {
		s = append(s, "ServiceCredentialChoice: "+fmt.Sprintf("%#v", this.ServiceCredentialChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateServiceCredentialsRequest_ApiToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_credential.CreateServiceCredentialsRequest_ApiToken{` +
		`ApiToken:` + fmt.Sprintf("%#v", this.ApiToken) + `}`}, ", ")
	return s
}
func (this *CreateServiceCredentialsRequest_ApiCertificate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_credential.CreateServiceCredentialsRequest_ApiCertificate{` +
		`ApiCertificate:` + fmt.Sprintf("%#v", this.ApiCertificate) + `}`}, ", ")
	return s
}
func (this *CreateServiceCredentialsRequest_Vk8SKubeconfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_credential.CreateServiceCredentialsRequest_Vk8SKubeconfig{` +
		`Vk8SKubeconfig:` + fmt.Sprintf("%#v", this.Vk8SKubeconfig) + `}`}, ", ")
	return s
}
func (this *CreateServiceCredentialsRequest_SiteKubeconfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&api_credential.CreateServiceCredentialsRequest_SiteKubeconfig{` +
		`SiteKubeconfig:` + fmt.Sprintf("%#v", this.SiteKubeconfig) + `}`}, ", ")
	return s
}
func (this *ApiCertificateType) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.ApiCertificateType{")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vk8SKubeconfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_credential.Vk8SKubeconfigType{")
	s = append(s, "Vk8SNamespace: "+fmt.Sprintf("%#v", this.Vk8SNamespace)+",\n")
	s = append(s, "Vk8SClusterName: "+fmt.Sprintf("%#v", this.Vk8SClusterName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteKubeconfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.SiteKubeconfigType{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomCreateSpecType) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_credential.CustomCreateSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "VirtualK8SNamespace: "+fmt.Sprintf("%#v", this.VirtualK8SNamespace)+",\n")
	s = append(s, "VirtualK8SName: "+fmt.Sprintf("%#v", this.VirtualK8SName)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScimTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.ScimTokenRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_credential.GetRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.GetResponse{")
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.ListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.ListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&api_credential.ListResponseItem{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.CreateTimestamp != nil {
		s = append(s, "CreateTimestamp: "+fmt.Sprintf("%#v", this.CreateTimestamp)+",\n")
	}
	if this.ExpiryTimestamp != nil {
		s = append(s, "ExpiryTimestamp: "+fmt.Sprintf("%#v", this.ExpiryTimestamp)+",\n")
	}
	s = append(s, "UserEmail: "+fmt.Sprintf("%#v", this.UserEmail)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenewRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_credential.RenewRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ExpirationDays: "+fmt.Sprintf("%#v", this.ExpirationDays)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_credential.StatusResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_credential.DeleteRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Create API credential
	//
	// x-displayName: "Create API Credentials"
	// user can request 3 types of credential for themselves.
	// API_TOKEN, API_CERTIFICATE and KUBE_CONFIG.
	//
	// an API_TOKEN is an easy to use secret that can be send part of HTTP request header Authorization: APIToken <value>
	// in the create request expiry can be set additionally. F5XC also supports renew and revoke of API_TOKENs.
	// an API_CERTIFICATE is a password protected P12 certificate bundle document and can be used as client certificate.
	// when sending create request, user can request with an expiry and password. F5XC Identity Authority (IA)
	// mints new certificate with required credentials and is shared in the response as API Certificate.
	// a virtual K8s kubeconfig can be generate with type KUBE_CONFIG. Create request can specify cluster, namespace and expiry
	// with embedded user access with client certificate.
	//
	// request can specify name, expiry and type of credential required. since this credential inherits the creator's RBAC
	// service will determine the user from request context.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Create/Re-create SCIM API token
	//
	// x-displayName: "Create/Re-create SCIM API token"
	// request to create/re-create new SCIM API credential.
	// Note: Only one valid (non-expired) SCIM token could exist for a tenant, and only if SCIM is enabled for the tenant.
	// If a valid SCIM token is already minted, we would revoke the current one and generate a new one.
	RecreateScimToken(ctx context.Context, in *RecreateScimTokenRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get Scim Token
	//
	// x-displayName: "Get Scim Token"
	// GetScimToken implements querying of scim token.
	// SCIM API token value will be visible only on create API response.
	// This detail RPC will show the current token's expiry. Returns api credential object.
	GetScimToken(ctx context.Context, in *ScimTokenRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Get API credential
	//
	// x-displayName: "Get API Credentials"
	// Get implements api credential query by name.
	// Returns api credential object. Query will look into tenants system namespace for api credential by name.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List API credential
	//
	// x-displayName: "List API Credentials"
	// Returns list of api credential of all types created by the user.
	// Query will look into tenants system namespace.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// List Service credentials
	//
	// x-displayName: "List service credentials"
	// request to list service credentials created by user.
	ListServiceCredentials(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Revoke API credential
	//
	// x-displayName: "Revoke API credential"
	// For API credential revoke/deletion.
	Revoke(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Revoke Service credential
	//
	// x-displayName: "Revoke Service credential"
	// For Service credential revoke/deletion.
	RevokeServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Revoke SCIM API credential
	//
	// x-displayName: "Revoke SCIM API credential"
	// For SCIM API credential revoke/deletion.
	RevokeScimToken(ctx context.Context, in *ScimTokenRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Activate API credential
	//
	// x-displayName: "Activate API credential"
	// For API credential activation/deactivation.
	Activate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Activate API service credential
	//
	// x-displayName: "Activate API service credential"
	// For Service credential activation/deactivation.
	ActivateServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Renew API user credential.
	//
	// x-displayName: "Renew API credential"
	// Renew user's my credential expiry.
	// Renewal is only supported for the credential type API_TOKEN.
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Renew Service credential.
	//
	// x-displayName: "Renew API service credential"
	// Renew service credential's expiry.
	// Renewal is only supported for the credential type SERVICE_API_TOKEN.
	RenewServiceCredentials(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Create Service credentials
	//
	// x-displayName: "Create service credentials"
	// request to create new service credentials.
	// user can specify name, expiry and list of namespce and allowed role of the service user.
	CreateServiceCredentials(ctx context.Context, in *CreateServiceCredentialsRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RecreateScimToken(ctx context.Context, in *RecreateScimTokenRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/RecreateScimToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetScimToken(ctx context.Context, in *ScimTokenRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/GetScimToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListServiceCredentials(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/ListServiceCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Revoke(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RevokeServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/RevokeServiceCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RevokeScimToken(ctx context.Context, in *ScimTokenRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/RevokeScimToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Activate(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ActivateServiceCredentials(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/ActivateServiceCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/Renew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RenewServiceCredentials(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/RenewServiceCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CreateServiceCredentials(ctx context.Context, in *CreateServiceCredentialsRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomAPI/CreateServiceCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Create API credential
	//
	// x-displayName: "Create API Credentials"
	// user can request 3 types of credential for themselves.
	// API_TOKEN, API_CERTIFICATE and KUBE_CONFIG.
	//
	// an API_TOKEN is an easy to use secret that can be send part of HTTP request header Authorization: APIToken <value>
	// in the create request expiry can be set additionally. F5XC also supports renew and revoke of API_TOKENs.
	// an API_CERTIFICATE is a password protected P12 certificate bundle document and can be used as client certificate.
	// when sending create request, user can request with an expiry and password. F5XC Identity Authority (IA)
	// mints new certificate with required credentials and is shared in the response as API Certificate.
	// a virtual K8s kubeconfig can be generate with type KUBE_CONFIG. Create request can specify cluster, namespace and expiry
	// with embedded user access with client certificate.
	//
	// request can specify name, expiry and type of credential required. since this credential inherits the creator's RBAC
	// service will determine the user from request context.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Create/Re-create SCIM API token
	//
	// x-displayName: "Create/Re-create SCIM API token"
	// request to create/re-create new SCIM API credential.
	// Note: Only one valid (non-expired) SCIM token could exist for a tenant, and only if SCIM is enabled for the tenant.
	// If a valid SCIM token is already minted, we would revoke the current one and generate a new one.
	RecreateScimToken(context.Context, *RecreateScimTokenRequest) (*CreateResponse, error)
	// Get Scim Token
	//
	// x-displayName: "Get Scim Token"
	// GetScimToken implements querying of scim token.
	// SCIM API token value will be visible only on create API response.
	// This detail RPC will show the current token's expiry. Returns api credential object.
	GetScimToken(context.Context, *ScimTokenRequest) (*GetResponse, error)
	// Get API credential
	//
	// x-displayName: "Get API Credentials"
	// Get implements api credential query by name.
	// Returns api credential object. Query will look into tenants system namespace for api credential by name.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List API credential
	//
	// x-displayName: "List API Credentials"
	// Returns list of api credential of all types created by the user.
	// Query will look into tenants system namespace.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// List Service credentials
	//
	// x-displayName: "List service credentials"
	// request to list service credentials created by user.
	ListServiceCredentials(context.Context, *ListRequest) (*ListResponse, error)
	// Revoke API credential
	//
	// x-displayName: "Revoke API credential"
	// For API credential revoke/deletion.
	Revoke(context.Context, *GetRequest) (*StatusResponse, error)
	// Revoke Service credential
	//
	// x-displayName: "Revoke Service credential"
	// For Service credential revoke/deletion.
	RevokeServiceCredentials(context.Context, *GetRequest) (*StatusResponse, error)
	// Revoke SCIM API credential
	//
	// x-displayName: "Revoke SCIM API credential"
	// For SCIM API credential revoke/deletion.
	RevokeScimToken(context.Context, *ScimTokenRequest) (*StatusResponse, error)
	// Activate API credential
	//
	// x-displayName: "Activate API credential"
	// For API credential activation/deactivation.
	Activate(context.Context, *GetRequest) (*StatusResponse, error)
	// Activate API service credential
	//
	// x-displayName: "Activate API service credential"
	// For Service credential activation/deactivation.
	ActivateServiceCredentials(context.Context, *GetRequest) (*StatusResponse, error)
	// Renew API user credential.
	//
	// x-displayName: "Renew API credential"
	// Renew user's my credential expiry.
	// Renewal is only supported for the credential type API_TOKEN.
	Renew(context.Context, *RenewRequest) (*StatusResponse, error)
	// Renew Service credential.
	//
	// x-displayName: "Renew API service credential"
	// Renew service credential's expiry.
	// Renewal is only supported for the credential type SERVICE_API_TOKEN.
	RenewServiceCredentials(context.Context, *RenewRequest) (*StatusResponse, error)
	// Create Service credentials
	//
	// x-displayName: "Create service credentials"
	// request to create new service credentials.
	// user can specify name, expiry and list of namespce and allowed role of the service user.
	CreateServiceCredentials(context.Context, *CreateServiceCredentialsRequest) (*CreateResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomAPIServer) RecreateScimToken(ctx context.Context, req *RecreateScimTokenRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecreateScimToken not implemented")
}
func (*UnimplementedCustomAPIServer) GetScimToken(ctx context.Context, req *ScimTokenRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScimToken not implemented")
}
func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomAPIServer) ListServiceCredentials(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceCredentials not implemented")
}
func (*UnimplementedCustomAPIServer) Revoke(ctx context.Context, req *GetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (*UnimplementedCustomAPIServer) RevokeServiceCredentials(ctx context.Context, req *GetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeServiceCredentials not implemented")
}
func (*UnimplementedCustomAPIServer) RevokeScimToken(ctx context.Context, req *ScimTokenRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeScimToken not implemented")
}
func (*UnimplementedCustomAPIServer) Activate(ctx context.Context, req *GetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedCustomAPIServer) ActivateServiceCredentials(ctx context.Context, req *GetRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateServiceCredentials not implemented")
}
func (*UnimplementedCustomAPIServer) Renew(ctx context.Context, req *RenewRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renew not implemented")
}
func (*UnimplementedCustomAPIServer) RenewServiceCredentials(ctx context.Context, req *RenewRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewServiceCredentials not implemented")
}
func (*UnimplementedCustomAPIServer) CreateServiceCredentials(ctx context.Context, req *CreateServiceCredentialsRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceCredentials not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RecreateScimToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecreateScimTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RecreateScimToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/RecreateScimToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RecreateScimToken(ctx, req.(*RecreateScimTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetScimToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScimTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetScimToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/GetScimToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetScimToken(ctx, req.(*ScimTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListServiceCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListServiceCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/ListServiceCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListServiceCredentials(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Revoke(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RevokeServiceCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RevokeServiceCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/RevokeServiceCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RevokeServiceCredentials(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RevokeScimToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScimTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RevokeScimToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/RevokeScimToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RevokeScimToken(ctx, req.(*ScimTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Activate(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ActivateServiceCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ActivateServiceCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/ActivateServiceCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ActivateServiceCredentials(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RenewServiceCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RenewServiceCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/RenewServiceCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RenewServiceCredentials(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CreateServiceCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CreateServiceCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomAPI/CreateServiceCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CreateServiceCredentials(ctx, req.(*CreateServiceCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.api_credential.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomAPI_Create_Handler,
		},
		{
			MethodName: "RecreateScimToken",
			Handler:    _CustomAPI_RecreateScimToken_Handler,
		},
		{
			MethodName: "GetScimToken",
			Handler:    _CustomAPI_GetScimToken_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomAPI_List_Handler,
		},
		{
			MethodName: "ListServiceCredentials",
			Handler:    _CustomAPI_ListServiceCredentials_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _CustomAPI_Revoke_Handler,
		},
		{
			MethodName: "RevokeServiceCredentials",
			Handler:    _CustomAPI_RevokeServiceCredentials_Handler,
		},
		{
			MethodName: "RevokeScimToken",
			Handler:    _CustomAPI_RevokeScimToken_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _CustomAPI_Activate_Handler,
		},
		{
			MethodName: "ActivateServiceCredentials",
			Handler:    _CustomAPI_ActivateServiceCredentials_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _CustomAPI_Renew_Handler,
		},
		{
			MethodName: "RenewServiceCredentials",
			Handler:    _CustomAPI_RenewServiceCredentials_Handler,
		},
		{
			MethodName: "CreateServiceCredentials",
			Handler:    _CustomAPI_CreateServiceCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/api_credential/public_customapi.proto",
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationDays != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ExpirationDays))
		i--
		dAtA[i] = 0x28
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecreateScimTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecreateScimTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecreateScimTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationDays != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ExpirationDays))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceCredentialChoice != nil {
		{
			size := m.ServiceCredentialChoice.Size()
			i -= size
			if _, err := m.ServiceCredentialChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ExpirationDays != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ExpirationDays))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.VirtualK8SName) > 0 {
		i -= len(m.VirtualK8SName)
		copy(dAtA[i:], m.VirtualK8SName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.VirtualK8SName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VirtualK8SNamespace) > 0 {
		i -= len(m.VirtualK8SNamespace)
		copy(dAtA[i:], m.VirtualK8SNamespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.VirtualK8SNamespace)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NamespaceRoles) > 0 {
		for iNdEx := len(m.NamespaceRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NamespaceRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceCredentialsRequest_ApiToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceCredentialsRequest_ApiToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiToken != nil {
		{
			size, err := m.ApiToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateServiceCredentialsRequest_ApiCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceCredentialsRequest_ApiCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiCertificate != nil {
		{
			size, err := m.ApiCertificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateServiceCredentialsRequest_Vk8SKubeconfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceCredentialsRequest_Vk8SKubeconfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vk8SKubeconfig != nil {
		{
			size, err := m.Vk8SKubeconfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateServiceCredentialsRequest_SiteKubeconfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceCredentialsRequest_SiteKubeconfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteKubeconfig != nil {
		{
			size, err := m.SiteKubeconfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ApiCertificateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiCertificateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiCertificateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vk8SKubeconfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vk8SKubeconfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vk8SKubeconfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vk8SClusterName) > 0 {
		i -= len(m.Vk8SClusterName)
		copy(dAtA[i:], m.Vk8SClusterName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Vk8SClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vk8SNamespace) > 0 {
		i -= len(m.Vk8SNamespace)
		copy(dAtA[i:], m.Vk8SNamespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Vk8SNamespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SiteKubeconfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteKubeconfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteKubeconfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomCreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomCreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VirtualK8SName) > 0 {
		i -= len(m.VirtualK8SName)
		copy(dAtA[i:], m.VirtualK8SName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.VirtualK8SName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VirtualK8SNamespace) > 0 {
		i -= len(m.VirtualK8SNamespace)
		copy(dAtA[i:], m.VirtualK8SNamespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.VirtualK8SNamespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScimTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScimTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScimTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.UserEmail) > 0 {
		i -= len(m.UserEmail)
		copy(dAtA[i:], m.UserEmail)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.UserEmail)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpiryTimestamp != nil {
		{
			size, err := m.ExpiryTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreateTimestamp != nil {
		{
			size, err := m.CreateTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationDays != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ExpirationDays))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ExpirationDays != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ExpirationDays))
	}
	return n
}

func (m *RecreateScimTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ExpirationDays != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ExpirationDays))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CreateServiceCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.NamespaceRoles) > 0 {
		for _, e := range m.NamespaceRoles {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	l = len(m.VirtualK8SNamespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.VirtualK8SName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ExpirationDays != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ExpirationDays))
	}
	if m.ServiceCredentialChoice != nil {
		n += m.ServiceCredentialChoice.Size()
	}
	return n
}

func (m *CreateServiceCredentialsRequest_ApiToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiToken != nil {
		l = m.ApiToken.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *CreateServiceCredentialsRequest_ApiCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiCertificate != nil {
		l = m.ApiCertificate.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *CreateServiceCredentialsRequest_Vk8SKubeconfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vk8SKubeconfig != nil {
		l = m.Vk8SKubeconfig.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *CreateServiceCredentialsRequest_SiteKubeconfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteKubeconfig != nil {
		l = m.SiteKubeconfig.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ApiCertificateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *Vk8SKubeconfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vk8SNamespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Vk8SClusterName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *SiteKubeconfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CustomCreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Type))
	}
	l = len(m.VirtualK8SNamespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.VirtualK8SName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ScimTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *ListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Type))
	}
	if m.CreateTimestamp != nil {
		l = m.CreateTimestamp.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ExpiryTimestamp != nil {
		l = m.ExpiryTimestamp.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.UserEmail)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *RenewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ExpirationDays != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ExpirationDays))
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "CustomCreateSpecType", "CustomCreateSpecType", 1) + `,`,
		`ExpirationDays:` + fmt.Sprintf("%v", this.ExpirationDays) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecreateScimTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecreateScimTokenRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ExpirationDays:` + fmt.Sprintf("%v", this.ExpirationDays) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateServiceCredentialsRequest) string() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNamespaceRoles := "[]*NamespaceRoleType{"
	for _, f := range this.NamespaceRoles {
		repeatedStringForNamespaceRoles += strings.Replace(fmt.Sprintf("%v", f), "NamespaceRoleType", "schema.NamespaceRoleType", 1) + ","
	}
	repeatedStringForNamespaceRoles += "}"
	s := strings.Join([]string{`&CreateServiceCredentialsRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NamespaceRoles:` + repeatedStringForNamespaceRoles + `,`,
		`VirtualK8SNamespace:` + fmt.Sprintf("%v", this.VirtualK8SNamespace) + `,`,
		`VirtualK8SName:` + fmt.Sprintf("%v", this.VirtualK8SName) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`ExpirationDays:` + fmt.Sprintf("%v", this.ExpirationDays) + `,`,
		`ServiceCredentialChoice:` + fmt.Sprintf("%v", this.ServiceCredentialChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateServiceCredentialsRequest_ApiToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateServiceCredentialsRequest_ApiToken{`,
		`ApiToken:` + strings.Replace(fmt.Sprintf("%v", this.ApiToken), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateServiceCredentialsRequest_ApiCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateServiceCredentialsRequest_ApiCertificate{`,
		`ApiCertificate:` + strings.Replace(fmt.Sprintf("%v", this.ApiCertificate), "ApiCertificateType", "ApiCertificateType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateServiceCredentialsRequest_Vk8SKubeconfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateServiceCredentialsRequest_Vk8SKubeconfig{`,
		`Vk8SKubeconfig:` + strings.Replace(fmt.Sprintf("%v", this.Vk8SKubeconfig), "Vk8SKubeconfigType", "Vk8SKubeconfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateServiceCredentialsRequest_SiteKubeconfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateServiceCredentialsRequest_SiteKubeconfig{`,
		`SiteKubeconfig:` + strings.Replace(fmt.Sprintf("%v", this.SiteKubeconfig), "SiteKubeconfigType", "SiteKubeconfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiCertificateType) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiCertificateType{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vk8SKubeconfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vk8SKubeconfigType{`,
		`Vk8SNamespace:` + fmt.Sprintf("%v", this.Vk8SNamespace) + `,`,
		`Vk8SClusterName:` + fmt.Sprintf("%v", this.Vk8SClusterName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteKubeconfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteKubeconfigType{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomCreateSpecType) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomCreateSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`VirtualK8SNamespace:` + fmt.Sprintf("%v", this.VirtualK8SNamespace) + `,`,
		`VirtualK8SName:` + fmt.Sprintf("%v", this.VirtualK8SName) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScimTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScimTokenRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetResponse{`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ListResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ListResponseItem", "ListResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListResponseItem{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CreateTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.CreateTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`ExpiryTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpiryTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`UserEmail:` + fmt.Sprintf("%v", this.UserEmail) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenewRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenewRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExpirationDays:` + fmt.Sprintf("%v", this.ExpirationDays) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CustomCreateSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDays", wireType)
			}
			m.ExpirationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecreateScimTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecreateScimTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecreateScimTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDays", wireType)
			}
			m.ExpirationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &types.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= APICredentialType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceRoles = append(m.NamespaceRoles, &schema.NamespaceRoleType{})
			if err := m.NamespaceRoles[len(m.NamespaceRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualK8SNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualK8SNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualK8SName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualK8SName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDays", wireType)
			}
			m.ExpirationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceCredentialChoice = &CreateServiceCredentialsRequest_ApiToken{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiCertificateType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceCredentialChoice = &CreateServiceCredentialsRequest_ApiCertificate{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SKubeconfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Vk8SKubeconfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceCredentialChoice = &CreateServiceCredentialsRequest_Vk8SKubeconfig{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteKubeconfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteKubeconfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceCredentialChoice = &CreateServiceCredentialsRequest_SiteKubeconfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiCertificateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiCertificateType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiCertificateType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vk8SKubeconfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vk8sKubeconfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vk8sKubeconfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vk8SNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk8SClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vk8SClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteKubeconfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteKubeconfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteKubeconfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomCreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= APICredentialType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualK8SNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualK8SNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualK8SName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualK8SName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScimTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScimTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScimTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ListResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= APICredentialType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateTimestamp == nil {
				m.CreateTimestamp = &types.Timestamp{}
			}
			if err := m.CreateTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiryTimestamp == nil {
				m.ExpiryTimestamp = &types.Timestamp{}
			}
			if err := m.ExpiryTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDays", wireType)
			}
			m.ExpirationDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package signup

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateV2Request) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateV2Request) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateV2Request) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetBillingDetails().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateV2Request.billing_details")
	}

	return nil
}

func (m *CreateV2Request) DeepCopy() *CreateV2Request {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateV2Request{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateV2Request) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateV2Request) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateV2RequestValidator().Validate(ctx, m, opts...)
}

type ValidateCreateV2Request struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateV2Request) SourceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for source_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateV2Request) CompanyDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for company_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := CompanyMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateV2Request) UserDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for user_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := UserMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateV2Request) AccountDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for account_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := AccountMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateV2Request) BillingDetailsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for billing_details")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BillingMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateV2Request) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateV2Request)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateV2Request got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["account_details"]; exists {

		vOpts := append(opts, db.WithValidateField("account_details"))
		if err := fv(ctx, m.GetAccountDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["billing_details"]; exists {

		vOpts := append(opts, db.WithValidateField("billing_details"))
		if err := fv(ctx, m.GetBillingDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["company_details"]; exists {

		vOpts := append(opts, db.WithValidateField("company_details"))
		if err := fv(ctx, m.GetCompanyDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_choice"]; exists {
		val := m.GetSourceChoice()
		vOpts := append(opts,
			db.WithValidateField("source_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSourceChoice().(type) {
	case *CreateV2Request_SourceInternalSre:
		if fv, exists := v.FldValidators["source_choice.source_internal_sre"]; exists {
			val := m.GetSourceChoice().(*CreateV2Request_SourceInternalSre).SourceInternalSre
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_internal_sre"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateV2Request_SourceInternalScaling:
		if fv, exists := v.FldValidators["source_choice.source_internal_scaling"]; exists {
			val := m.GetSourceChoice().(*CreateV2Request_SourceInternalScaling).SourceInternalScaling
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_internal_scaling"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateV2Request_SourcePlanTransition:
		if fv, exists := v.FldValidators["source_choice.source_plan_transition"]; exists {
			val := m.GetSourceChoice().(*CreateV2Request_SourcePlanTransition).SourcePlanTransition
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_plan_transition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateV2Request_SourceMsp:
		if fv, exists := v.FldValidators["source_choice.source_msp"]; exists {
			val := m.GetSourceChoice().(*CreateV2Request_SourceMsp).SourceMsp
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_msp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateV2Request_SourceMarketplace:
		if fv, exists := v.FldValidators["source_choice.source_marketplace"]; exists {
			val := m.GetSourceChoice().(*CreateV2Request_SourceMarketplace).SourceMarketplace
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("source_marketplace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["user_details"]; exists {

		vOpts := append(opts, db.WithValidateField("user_details"))
		if err := fv(ctx, m.GetUserDetails(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateV2RequestValidator = func() *ValidateCreateV2Request {
	v := &ValidateCreateV2Request{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSourceChoice := v.SourceChoiceValidationRuleHandler
	rulesSourceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSourceChoice(rulesSourceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateV2Request.source_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source_choice"] = vFn

	vrhCompanyDetails := v.CompanyDetailsValidationRuleHandler
	rulesCompanyDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCompanyDetails(rulesCompanyDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateV2Request.company_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["company_details"] = vFn

	vrhUserDetails := v.UserDetailsValidationRuleHandler
	rulesUserDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUserDetails(rulesUserDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateV2Request.user_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_details"] = vFn

	vrhAccountDetails := v.AccountDetailsValidationRuleHandler
	rulesAccountDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAccountDetails(rulesAccountDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateV2Request.account_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["account_details"] = vFn

	vrhBillingDetails := v.BillingDetailsValidationRuleHandler
	rulesBillingDetails := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhBillingDetails(rulesBillingDetails)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateV2Request.billing_details: %s", err)
		panic(errMsg)
	}
	v.FldValidators["billing_details"] = vFn

	v.FldValidators["source_choice.source_internal_sre"] = SourceInternalSreValidator().Validate
	v.FldValidators["source_choice.source_msp"] = SourceMspValidator().Validate
	v.FldValidators["source_choice.source_marketplace"] = SourceMarketplaceValidator().Validate

	return v
}()

func CreateV2RequestValidator() db.Validator {
	return DefaultCreateV2RequestValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateV2Response) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateV2Response) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateV2Response) DeepCopy() *CreateV2Response {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateV2Response{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateV2Response) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateV2Response) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateV2ResponseValidator().Validate(ctx, m, opts...)
}

type ValidateCreateV2Response struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateV2Response) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateV2Response)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateV2Response got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uid"]; exists {

		vOpts := append(opts, db.WithValidateField("uid"))
		if err := fv(ctx, m.GetUid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateV2ResponseValidator = func() *ValidateCreateV2Response {
	v := &ValidateCreateV2Response{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CreateV2ResponseValidator() db.Validator {
	return DefaultCreateV2ResponseValidator
}

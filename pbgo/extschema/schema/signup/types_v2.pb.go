// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/signup/types_v2.proto

// V2 Signup
//
// x-displayName: "V2 Signup"
// Signup objects holds all information needed to allow a new customer to signup for F5XC services.

package signup

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	infraprotect_information "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/infraprotect_information"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Company Meta
//
// x-displayName: "Company Meta"
type CompanyMeta struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "F5 Networks, Inc"
	// name of the company
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mailing Address
	//
	// x-displayName: "Mailing Address"
	// mailing address of the company
	MailingAddress *ContactMeta `protobuf:"bytes,2,opt,name=mailing_address,json=mailingAddress,proto3" json:"mailing_address,omitempty"`
}

func (m *CompanyMeta) Reset()      { *m = CompanyMeta{} }
func (*CompanyMeta) ProtoMessage() {}
func (*CompanyMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{0}
}
func (m *CompanyMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CompanyMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyMeta.Merge(m, src)
}
func (m *CompanyMeta) XXX_Size() int {
	return m.Size()
}
func (m *CompanyMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyMeta proto.InternalMessageInfo

func (m *CompanyMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompanyMeta) GetMailingAddress() *ContactMeta {
	if m != nil {
		return m.MailingAddress
	}
	return nil
}

// InternalMeta
//
// x-displayName: "Internal Meta"
// we use it to store derived internal information like f5xc instance, kc instance
type InternalMeta struct {
	// F5xcInstanceName
	//
	// x-displayName: "F5xc Instance Name"
	// x-example: "gc-01"
	// this field holds the f5xc instance name of the tenant
	F5XcInstanceName string `protobuf:"bytes,1,opt,name=f5xc_instance_name,json=f5xcInstanceName,proto3" json:"f5xc_instance_name,omitempty"`
	// KcInstanceName
	//
	// x-displayName: "Kc Instance Name"
	// x-example: "kc-instance-3"
	// this field holds the kc instance name of the tenant
	KcInstanceName string `protobuf:"bytes,2,opt,name=kc_instance_name,json=kcInstanceName,proto3" json:"kc_instance_name,omitempty"`
	// TenantId
	//
	// x-displayName: "Tenant Id"
	// this field holds the tenant id
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *InternalMeta) Reset()      { *m = InternalMeta{} }
func (*InternalMeta) ProtoMessage() {}
func (*InternalMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{1}
}
func (m *InternalMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InternalMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalMeta.Merge(m, src)
}
func (m *InternalMeta) XXX_Size() int {
	return m.Size()
}
func (m *InternalMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalMeta.DiscardUnknown(m)
}

var xxx_messageInfo_InternalMeta proto.InternalMessageInfo

func (m *InternalMeta) GetF5XcInstanceName() string {
	if m != nil {
		return m.F5XcInstanceName
	}
	return ""
}

func (m *InternalMeta) GetKcInstanceName() string {
	if m != nil {
		return m.KcInstanceName
	}
	return ""
}

func (m *InternalMeta) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

// User Meta
//
// x-displayName: "User Meta"
type UserMeta struct {
	// First Name
	//
	// x-displayName: "First Name"
	// x-example: "Jane"
	// first name of the user
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Last Name
	//
	// x-displayName: "Last Name"
	// x-example: "Doe"
	// last name of the user
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// E-mail
	//
	// x-displayName: "E-mail"
	// x-example: "jane.doe@gmail.com"
	// email of the user
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Contact Number
	//
	// x-displayName: "Contact Number"
	// x-example: "+14084004001"
	// contact number of the user
	ContactNumber string `protobuf:"bytes,4,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
}

func (m *UserMeta) Reset()      { *m = UserMeta{} }
func (*UserMeta) ProtoMessage() {}
func (*UserMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{2}
}
func (m *UserMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMeta.Merge(m, src)
}
func (m *UserMeta) XXX_Size() int {
	return m.Size()
}
func (m *UserMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMeta.DiscardUnknown(m)
}

var xxx_messageInfo_UserMeta proto.InternalMessageInfo

func (m *UserMeta) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserMeta) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserMeta) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserMeta) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

// Account Meta
//
// x-displayName: "Account Meta"
type AccountMeta struct {
	// Locale
	//
	// x-displayName: "Locale"
	// x-example: "en-US"
	// locale of the account
	Locale string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "john-deer"
	// domain of the account
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// TOS Version
	//
	// x-displayName: "TOS Version"
	// x-example: "v2022.3.14"
	// x-required
	// terms of services version
	TosVersion string `protobuf:"bytes,4,opt,name=tos_version,json=tosVersion,proto3" json:"tos_version,omitempty"`
	// TOS Accepted Timestamp
	//
	// x-displayName: "TOS Accepted Timestamp"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// x-required
	// terms of services accepted timestamp
	TosAcceptedAt *types.Timestamp `protobuf:"bytes,5,opt,name=tos_accepted_at,json=tosAcceptedAt,proto3" json:"tos_accepted_at,omitempty"`
}

func (m *AccountMeta) Reset()      { *m = AccountMeta{} }
func (*AccountMeta) ProtoMessage() {}
func (*AccountMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{3}
}
func (m *AccountMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AccountMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMeta.Merge(m, src)
}
func (m *AccountMeta) XXX_Size() int {
	return m.Size()
}
func (m *AccountMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMeta.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMeta proto.InternalMessageInfo

func (m *AccountMeta) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *AccountMeta) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *AccountMeta) GetTosVersion() string {
	if m != nil {
		return m.TosVersion
	}
	return ""
}

func (m *AccountMeta) GetTosAcceptedAt() *types.Timestamp {
	if m != nil {
		return m.TosAcceptedAt
	}
	return nil
}

// Billing Meta
//
// x-displayName: "Billing Meta"
type BillingMeta struct {
	// Plan Name
	//
	// x-displayName: "Plan Name"
	// x-example: "individual-plan-monthly-1"
	// x-required
	// plan selection name
	PlanName string `protobuf:"bytes,1,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	// Billing Address
	//
	// x-displayName: "Billing Address"
	// billing address for the account, if not provided, the company mailing address is assumed as the billing address
	BillingAddress *ContactMeta `protobuf:"bytes,2,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	// Currency
	//
	// x-displayName: "Currency"
	// x-example: "USD"
	// currency for the account
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	// Payment Provider Token
	//
	// x-displayName: "Payment Provider Token"
	// x-example: "msnofjaonoaksnqaaz"
	// provider token for payment for the account
	PaymentProviderToken string `protobuf:"bytes,5,opt,name=payment_provider_token,json=paymentProviderToken,proto3" json:"payment_provider_token,omitempty"`
	// Tax Exemption
	//
	// x-displayName: "Tax Exemption"
	// tax exemption details
	TaxExemption schema.TaxExemptionType `protobuf:"varint,6,opt,name=tax_exemption,json=taxExemption,proto3,enum=ves.io.schema.TaxExemptionType" json:"tax_exemption,omitempty"`
	// Infra Protect Info
	//
	// x-displayName: "Infra Protect Info"
	// infrastructure protection information
	InfraprotectInfo *infraprotect_information.GlobalSpecType `protobuf:"bytes,7,opt,name=infraprotect_info,json=infraprotectInfo,proto3" json:"infraprotect_info,omitempty"`
}

func (m *BillingMeta) Reset()      { *m = BillingMeta{} }
func (*BillingMeta) ProtoMessage() {}
func (*BillingMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{4}
}
func (m *BillingMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BillingMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingMeta.Merge(m, src)
}
func (m *BillingMeta) XXX_Size() int {
	return m.Size()
}
func (m *BillingMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BillingMeta proto.InternalMessageInfo

func (m *BillingMeta) GetPlanName() string {
	if m != nil {
		return m.PlanName
	}
	return ""
}

func (m *BillingMeta) GetBillingAddress() *ContactMeta {
	if m != nil {
		return m.BillingAddress
	}
	return nil
}

func (m *BillingMeta) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *BillingMeta) GetPaymentProviderToken() string {
	if m != nil {
		return m.PaymentProviderToken
	}
	return ""
}

func (m *BillingMeta) GetTaxExemption() schema.TaxExemptionType {
	if m != nil {
		return m.TaxExemption
	}
	return schema.TAX_UNKNOWN
}

func (m *BillingMeta) GetInfraprotectInfo() *infraprotect_information.GlobalSpecType {
	if m != nil {
		return m.InfraprotectInfo
	}
	return nil
}

// Signup Type Public
//
// x-displayName: "Signup Type Public"
type SignupTypePublic struct {
}

func (m *SignupTypePublic) Reset()      { *m = SignupTypePublic{} }
func (*SignupTypePublic) ProtoMessage() {}
func (*SignupTypePublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{5}
}
func (m *SignupTypePublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypePublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypePublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypePublic.Merge(m, src)
}
func (m *SignupTypePublic) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypePublic) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypePublic.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypePublic proto.InternalMessageInfo

// Signup Type Internal SRE
//
// x-displayName: "Signup Type Internal SRE"
type SignupTypeInternalSre struct {
	// f5xc_instance_name
	//
	// x-displayName: "F5XC Instance Name"
	// x-example: "f5xc-instance-2"
	// this field holds the f5xc instance name to be used for tenant allocation
	F5XcInstanceName string `protobuf:"bytes,1,opt,name=f5xc_instance_name,json=f5xcInstanceName,proto3" json:"f5xc_instance_name,omitempty"`
	// kc_instance_name
	//
	// x-displayName: "KC Instance Name"
	// x-example: "kc-instance-3"
	// this field holds the kc instance name to be used for tenant realm allocation
	KcInstanceName string `protobuf:"bytes,2,opt,name=kc_instance_name,json=kcInstanceName,proto3" json:"kc_instance_name,omitempty"`
	// CRM Details
	//
	// x-displayName: "CRM Details"
	// This field holds CRM information
	CrmDetails *schema.CRMInfo `protobuf:"bytes,4,opt,name=crm_details,json=crmDetails,proto3" json:"crm_details,omitempty"`
	// Is Demo Tenant
	//
	// x-displayName: "Is Demo Tenant"
	// Indicates whether signup is for demo tenant or not.
	IsDemoTenant bool `protobuf:"varint,6,opt,name=is_demo_tenant,json=isDemoTenant,proto3" json:"is_demo_tenant,omitempty"`
}

func (m *SignupTypeInternalSre) Reset()      { *m = SignupTypeInternalSre{} }
func (*SignupTypeInternalSre) ProtoMessage() {}
func (*SignupTypeInternalSre) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{6}
}
func (m *SignupTypeInternalSre) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypeInternalSre) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypeInternalSre) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypeInternalSre.Merge(m, src)
}
func (m *SignupTypeInternalSre) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypeInternalSre) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypeInternalSre.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypeInternalSre proto.InternalMessageInfo

func (m *SignupTypeInternalSre) GetF5XcInstanceName() string {
	if m != nil {
		return m.F5XcInstanceName
	}
	return ""
}

func (m *SignupTypeInternalSre) GetKcInstanceName() string {
	if m != nil {
		return m.KcInstanceName
	}
	return ""
}

func (m *SignupTypeInternalSre) GetCrmDetails() *schema.CRMInfo {
	if m != nil {
		return m.CrmDetails
	}
	return nil
}

func (m *SignupTypeInternalSre) GetIsDemoTenant() bool {
	if m != nil {
		return m.IsDemoTenant
	}
	return false
}

// Signup Type Internal Scaling
//
// x-displayName: "Signup Type Internal Scaling"
type SignupTypeInternalScaling struct {
}

func (m *SignupTypeInternalScaling) Reset()      { *m = SignupTypeInternalScaling{} }
func (*SignupTypeInternalScaling) ProtoMessage() {}
func (*SignupTypeInternalScaling) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{7}
}
func (m *SignupTypeInternalScaling) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypeInternalScaling) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypeInternalScaling) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypeInternalScaling.Merge(m, src)
}
func (m *SignupTypeInternalScaling) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypeInternalScaling) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypeInternalScaling.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypeInternalScaling proto.InternalMessageInfo

// Signup Type Marketplace
//
// x-displayName: "Signup Type Marketplace"
// payload for the creation request, for Marketplace Signup Type
type SignupTypeMarketplace struct {
	// CRM Details
	//
	// x-displayName: "CRM Details"
	// x-required
	// This field holds CRM information
	CrmDetails *schema.CRMInfo `protobuf:"bytes,3,opt,name=crm_details,json=crmDetails,proto3" json:"crm_details,omitempty"`
}

func (m *SignupTypeMarketplace) Reset()      { *m = SignupTypeMarketplace{} }
func (*SignupTypeMarketplace) ProtoMessage() {}
func (*SignupTypeMarketplace) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{8}
}
func (m *SignupTypeMarketplace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypeMarketplace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypeMarketplace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypeMarketplace.Merge(m, src)
}
func (m *SignupTypeMarketplace) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypeMarketplace) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypeMarketplace.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypeMarketplace proto.InternalMessageInfo

func (m *SignupTypeMarketplace) GetCrmDetails() *schema.CRMInfo {
	if m != nil {
		return m.CrmDetails
	}
	return nil
}

// Signup Type Plan Transition
//
// x-displayName: "Signup Type Plan Transition"
// SignupTypePlanTransition can be only used for Free to Individual plan transition signups
type SignupTypePlanTransition struct {
	// IsSsoEnabled
	//
	// x-displayName: "IsSsoEnabled"
	// x-example: true
	// IsSsoEnabled tells whether the sso should be enabled for new tenant
	IsSsoEnabled bool `protobuf:"varint,1,opt,name=is_sso_enabled,json=isSsoEnabled,proto3" json:"is_sso_enabled,omitempty"`
}

func (m *SignupTypePlanTransition) Reset()      { *m = SignupTypePlanTransition{} }
func (*SignupTypePlanTransition) ProtoMessage() {}
func (*SignupTypePlanTransition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{9}
}
func (m *SignupTypePlanTransition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypePlanTransition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypePlanTransition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypePlanTransition.Merge(m, src)
}
func (m *SignupTypePlanTransition) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypePlanTransition) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypePlanTransition.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypePlanTransition proto.InternalMessageInfo

func (m *SignupTypePlanTransition) GetIsSsoEnabled() bool {
	if m != nil {
		return m.IsSsoEnabled
	}
	return false
}

// Signup Type MSP
//
// x-displayName: "Signup Type MSP"
type SignupTypeMsp struct {
	// CRM Details
	//
	// x-displayName: "CRM Details"
	// This field holds CRM information
	CrmDetails *schema.CRMInfo `protobuf:"bytes,2,opt,name=crm_details,json=crmDetails,proto3" json:"crm_details,omitempty"`
	// child_tenant_obj_name
	//
	// x-displayName: "Child Tenant Object Name"
	// this field holds the name of child tenant configuration.
	ChildTenantObjName string `protobuf:"bytes,4,opt,name=child_tenant_obj_name,json=childTenantObjName,proto3" json:"child_tenant_obj_name,omitempty"`
}

func (m *SignupTypeMsp) Reset()      { *m = SignupTypeMsp{} }
func (*SignupTypeMsp) ProtoMessage() {}
func (*SignupTypeMsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{10}
}
func (m *SignupTypeMsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypeMsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypeMsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypeMsp.Merge(m, src)
}
func (m *SignupTypeMsp) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypeMsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypeMsp.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypeMsp proto.InternalMessageInfo

func (m *SignupTypeMsp) GetCrmDetails() *schema.CRMInfo {
	if m != nil {
		return m.CrmDetails
	}
	return nil
}

func (m *SignupTypeMsp) GetChildTenantObjName() string {
	if m != nil {
		return m.ChildTenantObjName
	}
	return ""
}

// Signup Type Internal SSO
//
// x-displayName: "Signup Type Internal SSO"
type SignupTypeInternalSso struct {
}

func (m *SignupTypeInternalSso) Reset()      { *m = SignupTypeInternalSso{} }
func (*SignupTypeInternalSso) ProtoMessage() {}
func (*SignupTypeInternalSso) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{11}
}
func (m *SignupTypeInternalSso) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupTypeInternalSso) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignupTypeInternalSso) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupTypeInternalSso.Merge(m, src)
}
func (m *SignupTypeInternalSso) XXX_Size() int {
	return m.Size()
}
func (m *SignupTypeInternalSso) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupTypeInternalSso.DiscardUnknown(m)
}

var xxx_messageInfo_SignupTypeInternalSso proto.InternalMessageInfo

// ContactMeta
//
// x-displayName: "ContactMeta"
// Instance of one single contact that can be used to communicate with customers.
// Depending on contact type we use these details to send general communication (regular, physical mail) or invoices.
type ContactMeta struct {
	// phone_number
	//
	// x-displayName: "Phone Number"
	// x-example: "+11234567890"
	// phone number of the contact
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// address1
	//
	// x-displayName: "Address Line 1"
	// x-example: "1234 Main road"
	// address line 1
	Address1 string `protobuf:"bytes,2,opt,name=address1,proto3" json:"address1,omitempty"`
	// address2
	//
	// x-displayName: "Address Line 2"
	// x-example: "P.O BOX 56"
	// address line 2
	Address2 string `protobuf:"bytes,3,opt,name=address2,proto3" json:"address2,omitempty"`
	// city
	//
	// x-displayName: "City"
	// x-example: "Sunnyvale"
	// city / town of the contact
	City string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// county
	//
	// x-displayName: "County"
	// x-example: "Santa Clara"
	// county (optional, for countries where they have counties)
	County string `protobuf:"bytes,5,opt,name=county,proto3" json:"county,omitempty"`
	// state
	//
	// x-displayName: "State"
	// x-example: "California"
	// state (optional, for countries where they have states)
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// state code
	//
	// x-displayName: "State Code"
	// x-example: "CA"
	// state code (optional, for countries where they have states)
	StateCode string `protobuf:"bytes,7,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	// country
	//
	// x-displayName: "Country"
	// x-example: "US"
	// country of contact (e.g. USA). refer to https://en.wikipedia.org/wiki/ISO_3166-1, column alpha-2
	Country string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
	// zip_code
	//
	// x-displayName: "ZIP code"
	// x-example: "95054"
	// zip or postal code
	ZipCode string `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
}

func (m *ContactMeta) Reset()      { *m = ContactMeta{} }
func (*ContactMeta) ProtoMessage() {}
func (*ContactMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff5d246d7ca2938f, []int{12}
}
func (m *ContactMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ContactMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactMeta.Merge(m, src)
}
func (m *ContactMeta) XXX_Size() int {
	return m.Size()
}
func (m *ContactMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ContactMeta proto.InternalMessageInfo

func (m *ContactMeta) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *ContactMeta) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *ContactMeta) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *ContactMeta) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ContactMeta) GetCounty() string {
	if m != nil {
		return m.County
	}
	return ""
}

func (m *ContactMeta) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ContactMeta) GetStateCode() string {
	if m != nil {
		return m.StateCode
	}
	return ""
}

func (m *ContactMeta) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ContactMeta) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func init() {
	proto.RegisterType((*CompanyMeta)(nil), "ves.io.schema.signup.CompanyMeta")
	proto.RegisterType((*InternalMeta)(nil), "ves.io.schema.signup.InternalMeta")
	proto.RegisterType((*UserMeta)(nil), "ves.io.schema.signup.UserMeta")
	proto.RegisterType((*AccountMeta)(nil), "ves.io.schema.signup.AccountMeta")
	proto.RegisterType((*BillingMeta)(nil), "ves.io.schema.signup.BillingMeta")
	proto.RegisterType((*SignupTypePublic)(nil), "ves.io.schema.signup.SignupTypePublic")
	proto.RegisterType((*SignupTypeInternalSre)(nil), "ves.io.schema.signup.SignupTypeInternalSre")
	proto.RegisterType((*SignupTypeInternalScaling)(nil), "ves.io.schema.signup.SignupTypeInternalScaling")
	proto.RegisterType((*SignupTypeMarketplace)(nil), "ves.io.schema.signup.SignupTypeMarketplace")
	proto.RegisterType((*SignupTypePlanTransition)(nil), "ves.io.schema.signup.SignupTypePlanTransition")
	proto.RegisterType((*SignupTypeMsp)(nil), "ves.io.schema.signup.SignupTypeMsp")
	proto.RegisterType((*SignupTypeInternalSso)(nil), "ves.io.schema.signup.SignupTypeInternalSso")
	proto.RegisterType((*ContactMeta)(nil), "ves.io.schema.signup.ContactMeta")
}

func init() {
	proto.RegisterFile("ves.io/schema/signup/types_v2.proto", fileDescriptor_ff5d246d7ca2938f)
}

var fileDescriptor_ff5d246d7ca2938f = []byte{
	// 1190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x1c, 0xcd, 0xd8, 0x8e, 0xbb, 0x1e, 0x27, 0xa9, 0x3b, 0x4a, 0xc3, 0x36, 0x85, 0x6d, 0x6a, 0x10,
	0x14, 0xd4, 0xac, 0x55, 0x57, 0x50, 0x0e, 0x1c, 0x9a, 0x3f, 0x15, 0x4a, 0xa4, 0x86, 0x6a, 0x93,
	0x72, 0xa8, 0x90, 0x56, 0xe3, 0xdd, 0xb1, 0x33, 0xcd, 0xee, 0xcc, 0x6a, 0x66, 0x6c, 0xe2, 0x4a,
	0x48, 0x3d, 0xf0, 0x01, 0x10, 0x9f, 0x80, 0x03, 0x07, 0x2e, 0x5c, 0xe0, 0x06, 0x17, 0x8e, 0x3d,
	0xf6, 0x58, 0x71, 0xa2, 0xee, 0x05, 0x24, 0x0e, 0xfd, 0x04, 0x08, 0xcd, 0xcc, 0x6e, 0xba, 0x76,
	0x5a, 0xa9, 0xe2, 0xc0, 0x6d, 0x66, 0x7e, 0xef, 0x8d, 0xdf, 0xbc, 0xdf, 0x1f, 0x2f, 0x7c, 0x7b,
	0x44, 0xa4, 0x4f, 0x79, 0x47, 0x46, 0x87, 0x24, 0xc5, 0x1d, 0x49, 0x07, 0x6c, 0x98, 0x75, 0xd4,
	0x38, 0x23, 0x32, 0x1c, 0x75, 0xfd, 0x4c, 0x70, 0xc5, 0xd1, 0xb2, 0x05, 0xf9, 0x16, 0xe4, 0x5b,
	0xd0, 0xea, 0xfa, 0x80, 0xaa, 0xc3, 0x61, 0xcf, 0x8f, 0x78, 0xda, 0x19, 0xf0, 0x01, 0xef, 0x18,
	0x70, 0x6f, 0xd8, 0x37, 0x3b, 0xb3, 0x31, 0x2b, 0x7b, 0xc9, 0xea, 0xa5, 0x01, 0xe7, 0x83, 0x84,
	0xbc, 0x40, 0x29, 0x9a, 0x12, 0xa9, 0x70, 0x9a, 0xe5, 0x80, 0xee, 0xb4, 0x14, 0xca, 0xfa, 0x02,
	0xeb, 0x08, 0x89, 0x54, 0x48, 0x59, 0x9f, 0x8b, 0x14, 0x2b, 0xca, 0x99, 0x15, 0x97, 0x73, 0x2e,
	0x4e, 0x73, 0x78, 0xa6, 0x11, 0x45, 0xf0, 0xc2, 0x74, 0xb0, 0xcc, 0x7b, 0x73, 0x3a, 0x34, 0xc2,
	0x09, 0x8d, 0xb1, 0x22, 0x79, 0x74, 0x6d, 0x26, 0x4a, 0xc9, 0x97, 0xe1, 0xd4, 0xd5, 0xed, 0x31,
	0x6c, 0x6e, 0xf1, 0x34, 0xc3, 0x6c, 0x7c, 0x9b, 0x28, 0x8c, 0x3c, 0x58, 0x63, 0x38, 0x25, 0x2e,
	0x58, 0x03, 0x57, 0x1a, 0x9b, 0xf0, 0x97, 0xbf, 0x7e, 0xab, 0xce, 0x8b, 0xaa, 0xfb, 0xb0, 0x12,
	0x98, 0x73, 0xb4, 0x0b, 0xcf, 0xa6, 0x98, 0x26, 0x94, 0x0d, 0x42, 0x1c, 0xc7, 0x82, 0x48, 0xe9,
	0x56, 0xd6, 0xc0, 0x95, 0x66, 0xf7, 0xb2, 0xff, 0x32, 0x6b, 0xfd, 0x2d, 0xce, 0x14, 0x8e, 0x94,
	0xbe, 0x3b, 0x58, 0xca, 0x99, 0x1b, 0x96, 0xd8, 0xfe, 0x1e, 0xc0, 0x85, 0x1d, 0xa6, 0x88, 0x60,
	0x38, 0x31, 0x3f, 0x7e, 0x03, 0xa2, 0xfe, 0x87, 0xc7, 0x51, 0x48, 0x99, 0x54, 0x98, 0x45, 0x24,
	0x2c, 0x49, 0x69, 0x68, 0x29, 0x35, 0x51, 0x71, 0x6f, 0x06, 0x2d, 0x0d, 0xda, 0xc9, 0x31, 0x7b,
	0x5a, 0xd5, 0x75, 0xd8, 0x3a, 0x9a, 0xa5, 0x55, 0x66, 0x69, 0x4b, 0x47, 0xd3, 0xa4, 0x77, 0x61,
	0x43, 0x11, 0x86, 0x99, 0x0a, 0x69, 0xec, 0x56, 0x67, 0xd1, 0x8e, 0x8d, 0xed, 0xc4, 0xed, 0x9f,
	0x01, 0x74, 0xee, 0x4a, 0x22, 0x8c, 0xc4, 0xf7, 0x21, 0xec, 0x53, 0x21, 0x55, 0xf8, 0x0a, 0x97,
	0x1a, 0x26, 0x6a, 0xee, 0x7f, 0x0f, 0x36, 0x12, 0x5c, 0x20, 0x2b, 0xa7, 0x90, 0x8e, 0x0e, 0x1a,
	0xe0, 0x1a, 0x9c, 0x27, 0xda, 0x9a, 0x5c, 0x44, 0x19, 0x64, 0x03, 0xe8, 0x1a, 0x5c, 0x8a, 0xac,
	0x91, 0x21, 0x1b, 0xa6, 0x3d, 0x22, 0xdc, 0xda, 0x29, 0xe8, 0x62, 0x8e, 0xd8, 0x33, 0x80, 0xf6,
	0xdf, 0x00, 0x36, 0x37, 0xa2, 0x88, 0x0f, 0x99, 0x31, 0x1f, 0x7d, 0x00, 0xeb, 0x09, 0x8f, 0x70,
	0x52, 0x48, 0x41, 0xbf, 0xff, 0x0a, 0xe6, 0x09, 0x5b, 0xbf, 0xbb, 0x5f, 0xbc, 0xb9, 0x15, 0xe4,
	0x08, 0x74, 0x1d, 0xd6, 0x63, 0x9e, 0x62, 0xca, 0x72, 0x45, 0x17, 0x35, 0x64, 0x45, 0x2c, 0xbb,
	0xe7, 0xee, 0x55, 0x47, 0x44, 0xde, 0x73, 0x46, 0x3c, 0x51, 0x44, 0x08, 0xfc, 0x5d, 0x05, 0x04,
	0x39, 0x14, 0x5d, 0x85, 0x4d, 0xc5, 0x65, 0x38, 0x22, 0x42, 0x52, 0xce, 0x72, 0x81, 0x4d, 0xcd,
	0xac, 0x8b, 0x5a, 0xab, 0xe2, 0x2e, 0x04, 0x50, 0x71, 0xf9, 0xb9, 0x0d, 0xa3, 0x3d, 0x78, 0x56,
	0xa3, 0x71, 0x14, 0x91, 0x4c, 0x91, 0x38, 0xc4, 0xca, 0x9d, 0x37, 0x75, 0xb4, 0xea, 0xdb, 0xee,
	0xf2, 0x8b, 0xee, 0xf2, 0x0f, 0x8a, 0xee, 0xca, 0x9f, 0xfb, 0x13, 0xa8, 0x7c, 0x0c, 0x82, 0x45,
	0xc5, 0xe5, 0x46, 0xce, 0xde, 0x50, 0xed, 0x1f, 0xab, 0xb0, 0xb9, 0x49, 0x13, 0x5d, 0x5e, 0xe6,
	0xb9, 0x57, 0x61, 0x23, 0x4b, 0x30, 0x2b, 0xa7, 0xe9, 0xac, 0x66, 0x43, 0xe1, 0xb4, 0xa0, 0xfb,
	0xb0, 0xa2, 0x95, 0x3b, 0x1a, 0xb1, 0x97, 0x57, 0x75, 0xcf, 0x92, 0xff, 0x43, 0x55, 0xe7, 0xcc,
	0xbc, 0xaa, 0x91, 0x0f, 0x9d, 0x68, 0x28, 0x04, 0x61, 0xd1, 0x38, 0x37, 0x41, 0x5b, 0x5d, 0xbd,
	0xbb, 0xbf, 0x5d, 0x78, 0x01, 0xdc, 0x7a, 0x70, 0x82, 0x41, 0x5b, 0x70, 0x25, 0xc3, 0xe3, 0x94,
	0x30, 0x15, 0x66, 0x82, 0x8f, 0x68, 0x4c, 0x44, 0xa8, 0xf8, 0x11, 0x61, 0xc6, 0x90, 0xc6, 0xe6,
	0xe2, 0xa3, 0xaf, 0x40, 0x29, 0xcd, 0xcb, 0x39, 0xf8, 0x4e, 0x8e, 0x3d, 0xd0, 0x50, 0xb4, 0x0d,
	0x17, 0x15, 0x3e, 0x0e, 0xc9, 0x31, 0x49, 0x4d, 0x77, 0xbb, 0xf5, 0x35, 0x70, 0x65, 0xa9, 0x7b,
	0x69, 0x46, 0xfe, 0x01, 0x3e, 0xbe, 0x55, 0x40, 0x0e, 0xc6, 0x19, 0x09, 0x16, 0x54, 0xe9, 0x04,
	0x45, 0xf0, 0xdc, 0xa9, 0x59, 0xe5, 0x9e, 0x31, 0x46, 0x7c, 0x34, 0x73, 0xd3, 0xab, 0x66, 0x9a,
	0xff, 0x69, 0xc2, 0x7b, 0x38, 0xd9, 0xcf, 0x48, 0x64, 0x7e, 0xa0, 0x55, 0x06, 0xee, 0xb0, 0x3e,
	0xdf, 0xad, 0x39, 0xd5, 0x56, 0xad, 0x8d, 0x60, 0x6b, 0xdf, 0x78, 0xa9, 0x51, 0x77, 0x86, 0xbd,
	0x84, 0x46, 0xed, 0xe7, 0x00, 0x9e, 0x7f, 0x71, 0x58, 0x4c, 0x86, 0x7d, 0x41, 0xfe, 0xe7, 0xc1,
	0x70, 0x03, 0x36, 0x23, 0x91, 0x86, 0x31, 0x51, 0x98, 0x26, 0xd2, 0x24, 0xb1, 0xd9, 0x5d, 0x99,
	0x31, 0x60, 0x2b, 0xb8, 0xad, 0x9f, 0x13, 0xc0, 0x48, 0xa4, 0xdb, 0x16, 0x89, 0xde, 0x81, 0x4b,
	0x54, 0x86, 0x31, 0x49, 0x79, 0x68, 0xa7, 0x87, 0x49, 0x83, 0x13, 0x2c, 0x50, 0xb9, 0x4d, 0x52,
	0x7e, 0x60, 0xce, 0xac, 0x01, 0xbb, 0x35, 0x67, 0xbe, 0x55, 0x6f, 0x5f, 0x84, 0x17, 0x5e, 0xf2,
	0xe2, 0x08, 0xeb, 0x82, 0x6a, 0x7f, 0x51, 0xb6, 0xe3, 0x36, 0x16, 0x47, 0x44, 0x65, 0x09, 0x8e,
	0x4e, 0x09, 0xac, 0xbe, 0xae, 0xc0, 0xdd, 0x9a, 0x03, 0x5a, 0x95, 0xdd, 0x9a, 0x53, 0x69, 0x55,
	0xdb, 0x37, 0xa1, 0x5b, 0xca, 0x40, 0x82, 0xd9, 0x81, 0xc0, 0x4c, 0x52, 0x53, 0x08, 0xf6, 0x21,
	0x52, 0xf2, 0x90, 0x30, 0xdc, 0x4b, 0x48, 0x6c, 0xbc, 0x36, 0x0f, 0xd9, 0x97, 0xfc, 0x96, 0x3d,
	0x6b, 0x7f, 0x0b, 0xe0, 0x62, 0x49, 0xa0, 0xcc, 0x66, 0x85, 0x55, 0x5e, 0xdb, 0xb9, 0x4f, 0xe0,
	0xf9, 0xe8, 0x90, 0x26, 0x71, 0xee, 0x5b, 0xc8, 0x7b, 0xf7, 0x6d, 0xb2, 0x6a, 0x53, 0xc9, 0x6a,
	0x81, 0x00, 0x19, 0x9c, 0xb5, 0xf2, 0xb3, 0xde, 0x7d, 0x9d, 0xb0, 0x93, 0x67, 0xe9, 0xc2, 0x7a,
	0xe3, 0xa5, 0x35, 0x24, 0x79, 0xfb, 0x1f, 0xa0, 0xff, 0xe9, 0x4e, 0xfa, 0x16, 0x5d, 0x86, 0x0b,
	0xd9, 0x21, 0x67, 0xa4, 0x98, 0xa8, 0xa6, 0x9a, 0x82, 0xa6, 0x39, 0xb3, 0x33, 0x14, 0xad, 0x42,
	0x27, 0x1f, 0x07, 0xd7, 0x6c, 0xd5, 0x04, 0x27, 0xfb, 0x52, 0xac, 0x6b, 0xa7, 0xe4, 0x49, 0xac,
	0x8b, 0x10, 0xac, 0x45, 0x54, 0xe5, 0xed, 0x1f, 0x98, 0x35, 0x5a, 0x81, 0x75, 0x33, 0x8c, 0xc7,
	0xb6, 0xad, 0x83, 0x7c, 0x87, 0x96, 0xe1, 0xbc, 0x54, 0x58, 0x11, 0x53, 0x2a, 0x8d, 0xc0, 0x6e,
	0xd0, 0x5b, 0x10, 0x9a, 0x45, 0x18, 0xf1, 0x98, 0x98, 0x16, 0x6c, 0x04, 0x0d, 0x73, 0xb2, 0xc5,
	0x63, 0x82, 0x5c, 0x78, 0xc6, 0xd0, 0xc5, 0xd8, 0x75, 0x4c, 0xac, 0xd8, 0xa2, 0x0b, 0xd0, 0x79,
	0x40, 0x33, 0x4b, 0x6b, 0xd8, 0xd0, 0x03, 0x9a, 0x69, 0xd2, 0xe6, 0xd7, 0xe0, 0xf1, 0x53, 0x6f,
	0xee, 0xc9, 0x53, 0x6f, 0xee, 0xf9, 0x53, 0x0f, 0x3c, 0x9c, 0x78, 0xe0, 0x87, 0x89, 0x07, 0x1e,
	0x4d, 0x3c, 0xf0, 0x78, 0xe2, 0x81, 0x27, 0x13, 0x0f, 0xfc, 0x31, 0xf1, 0xc0, 0x9f, 0x13, 0x6f,
	0xee, 0xf9, 0xc4, 0x03, 0xdf, 0x3c, 0xf3, 0xe6, 0x1e, 0x3f, 0xf3, 0xe6, 0x9e, 0x3c, 0xf3, 0xe6,
	0xee, 0xed, 0x0e, 0x78, 0x76, 0x34, 0xf0, 0x8b, 0xb1, 0xef, 0x0f, 0x65, 0xc7, 0x2c, 0x74, 0xdb,
	0xaf, 0x17, 0x53, 0x6b, 0xbd, 0x08, 0x77, 0xb2, 0xde, 0x80, 0x77, 0xc8, 0xb1, 0x2a, 0x3e, 0xc5,
	0xca, 0x5f, 0x64, 0xbd, 0xba, 0x19, 0xec, 0xd7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x17, 0x19,
	0xda, 0x27, 0xb0, 0x09, 0x00, 0x00,
}

func (this *CompanyMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompanyMeta)
	if !ok {
		that2, ok := that.(CompanyMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.MailingAddress.Equal(that1.MailingAddress) {
		return false
	}
	return true
}
func (this *InternalMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternalMeta)
	if !ok {
		that2, ok := that.(InternalMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.F5XcInstanceName != that1.F5XcInstanceName {
		return false
	}
	if this.KcInstanceName != that1.KcInstanceName {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	return true
}
func (this *UserMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserMeta)
	if !ok {
		that2, ok := that.(UserMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.ContactNumber != that1.ContactNumber {
		return false
	}
	return true
}
func (this *AccountMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountMeta)
	if !ok {
		that2, ok := that.(AccountMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Locale != that1.Locale {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.TosVersion != that1.TosVersion {
		return false
	}
	if !this.TosAcceptedAt.Equal(that1.TosAcceptedAt) {
		return false
	}
	return true
}
func (this *BillingMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BillingMeta)
	if !ok {
		that2, ok := that.(BillingMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlanName != that1.PlanName {
		return false
	}
	if !this.BillingAddress.Equal(that1.BillingAddress) {
		return false
	}
	if this.Currency != that1.Currency {
		return false
	}
	if this.PaymentProviderToken != that1.PaymentProviderToken {
		return false
	}
	if this.TaxExemption != that1.TaxExemption {
		return false
	}
	if !this.InfraprotectInfo.Equal(that1.InfraprotectInfo) {
		return false
	}
	return true
}
func (this *SignupTypePublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypePublic)
	if !ok {
		that2, ok := that.(SignupTypePublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SignupTypeInternalSre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypeInternalSre)
	if !ok {
		that2, ok := that.(SignupTypeInternalSre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.F5XcInstanceName != that1.F5XcInstanceName {
		return false
	}
	if this.KcInstanceName != that1.KcInstanceName {
		return false
	}
	if !this.CrmDetails.Equal(that1.CrmDetails) {
		return false
	}
	if this.IsDemoTenant != that1.IsDemoTenant {
		return false
	}
	return true
}
func (this *SignupTypeInternalScaling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypeInternalScaling)
	if !ok {
		that2, ok := that.(SignupTypeInternalScaling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SignupTypeMarketplace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypeMarketplace)
	if !ok {
		that2, ok := that.(SignupTypeMarketplace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CrmDetails.Equal(that1.CrmDetails) {
		return false
	}
	return true
}
func (this *SignupTypePlanTransition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypePlanTransition)
	if !ok {
		that2, ok := that.(SignupTypePlanTransition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSsoEnabled != that1.IsSsoEnabled {
		return false
	}
	return true
}
func (this *SignupTypeMsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypeMsp)
	if !ok {
		that2, ok := that.(SignupTypeMsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CrmDetails.Equal(that1.CrmDetails) {
		return false
	}
	if this.ChildTenantObjName != that1.ChildTenantObjName {
		return false
	}
	return true
}
func (this *SignupTypeInternalSso) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupTypeInternalSso)
	if !ok {
		that2, ok := that.(SignupTypeInternalSso)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ContactMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContactMeta)
	if !ok {
		that2, ok := that.(ContactMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Address1 != that1.Address1 {
		return false
	}
	if this.Address2 != that1.Address2 {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.County != that1.County {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.StateCode != that1.StateCode {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.ZipCode != that1.ZipCode {
		return false
	}
	return true
}
func (this *CompanyMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.CompanyMeta{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.MailingAddress != nil {
		s = append(s, "MailingAddress: "+fmt.Sprintf("%#v", this.MailingAddress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternalMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.InternalMeta{")
	s = append(s, "F5XcInstanceName: "+fmt.Sprintf("%#v", this.F5XcInstanceName)+",\n")
	s = append(s, "KcInstanceName: "+fmt.Sprintf("%#v", this.KcInstanceName)+",\n")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&signup.UserMeta{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "ContactNumber: "+fmt.Sprintf("%#v", this.ContactNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&signup.AccountMeta{")
	s = append(s, "Locale: "+fmt.Sprintf("%#v", this.Locale)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "TosVersion: "+fmt.Sprintf("%#v", this.TosVersion)+",\n")
	if this.TosAcceptedAt != nil {
		s = append(s, "TosAcceptedAt: "+fmt.Sprintf("%#v", this.TosAcceptedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BillingMeta) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&signup.BillingMeta{")
	s = append(s, "PlanName: "+fmt.Sprintf("%#v", this.PlanName)+",\n")
	if this.BillingAddress != nil {
		s = append(s, "BillingAddress: "+fmt.Sprintf("%#v", this.BillingAddress)+",\n")
	}
	s = append(s, "Currency: "+fmt.Sprintf("%#v", this.Currency)+",\n")
	s = append(s, "PaymentProviderToken: "+fmt.Sprintf("%#v", this.PaymentProviderToken)+",\n")
	s = append(s, "TaxExemption: "+fmt.Sprintf("%#v", this.TaxExemption)+",\n")
	if this.InfraprotectInfo != nil {
		s = append(s, "InfraprotectInfo: "+fmt.Sprintf("%#v", this.InfraprotectInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypePublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&signup.SignupTypePublic{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypeInternalSre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&signup.SignupTypeInternalSre{")
	s = append(s, "F5XcInstanceName: "+fmt.Sprintf("%#v", this.F5XcInstanceName)+",\n")
	s = append(s, "KcInstanceName: "+fmt.Sprintf("%#v", this.KcInstanceName)+",\n")
	if this.CrmDetails != nil {
		s = append(s, "CrmDetails: "+fmt.Sprintf("%#v", this.CrmDetails)+",\n")
	}
	s = append(s, "IsDemoTenant: "+fmt.Sprintf("%#v", this.IsDemoTenant)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypeInternalScaling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&signup.SignupTypeInternalScaling{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypeMarketplace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signup.SignupTypeMarketplace{")
	if this.CrmDetails != nil {
		s = append(s, "CrmDetails: "+fmt.Sprintf("%#v", this.CrmDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypePlanTransition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signup.SignupTypePlanTransition{")
	s = append(s, "IsSsoEnabled: "+fmt.Sprintf("%#v", this.IsSsoEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypeMsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.SignupTypeMsp{")
	if this.CrmDetails != nil {
		s = append(s, "CrmDetails: "+fmt.Sprintf("%#v", this.CrmDetails)+",\n")
	}
	s = append(s, "ChildTenantObjName: "+fmt.Sprintf("%#v", this.ChildTenantObjName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupTypeInternalSso) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&signup.SignupTypeInternalSso{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContactMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&signup.ContactMeta{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Address1: "+fmt.Sprintf("%#v", this.Address1)+",\n")
	s = append(s, "Address2: "+fmt.Sprintf("%#v", this.Address2)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "County: "+fmt.Sprintf("%#v", this.County)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "StateCode: "+fmt.Sprintf("%#v", this.StateCode)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "ZipCode: "+fmt.Sprintf("%#v", this.ZipCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypesV2(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CompanyMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MailingAddress != nil {
		{
			size, err := m.MailingAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KcInstanceName) > 0 {
		i -= len(m.KcInstanceName)
		copy(dAtA[i:], m.KcInstanceName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.KcInstanceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.F5XcInstanceName) > 0 {
		i -= len(m.F5XcInstanceName)
		copy(dAtA[i:], m.F5XcInstanceName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.F5XcInstanceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactNumber) > 0 {
		i -= len(m.ContactNumber)
		copy(dAtA[i:], m.ContactNumber)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.ContactNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TosAcceptedAt != nil {
		{
			size, err := m.TosAcceptedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TosVersion) > 0 {
		i -= len(m.TosVersion)
		copy(dAtA[i:], m.TosVersion)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.TosVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *BillingMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InfraprotectInfo != nil {
		{
			size, err := m.InfraprotectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TaxExemption != 0 {
		i = encodeVarintTypesV2(dAtA, i, uint64(m.TaxExemption))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PaymentProviderToken) > 0 {
		i -= len(m.PaymentProviderToken)
		copy(dAtA[i:], m.PaymentProviderToken)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.PaymentProviderToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if m.BillingAddress != nil {
		{
			size, err := m.BillingAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlanName) > 0 {
		i -= len(m.PlanName)
		copy(dAtA[i:], m.PlanName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.PlanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignupTypePublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypePublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypePublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignupTypeInternalSre) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypeInternalSre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypeInternalSre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDemoTenant {
		i--
		if m.IsDemoTenant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CrmDetails != nil {
		{
			size, err := m.CrmDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.KcInstanceName) > 0 {
		i -= len(m.KcInstanceName)
		copy(dAtA[i:], m.KcInstanceName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.KcInstanceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.F5XcInstanceName) > 0 {
		i -= len(m.F5XcInstanceName)
		copy(dAtA[i:], m.F5XcInstanceName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.F5XcInstanceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignupTypeInternalScaling) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypeInternalScaling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypeInternalScaling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SignupTypeMarketplace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypeMarketplace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypeMarketplace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrmDetails != nil {
		{
			size, err := m.CrmDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *SignupTypePlanTransition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypePlanTransition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypePlanTransition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSsoEnabled {
		i--
		if m.IsSsoEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignupTypeMsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypeMsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypeMsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChildTenantObjName) > 0 {
		i -= len(m.ChildTenantObjName)
		copy(dAtA[i:], m.ChildTenantObjName)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.ChildTenantObjName)))
		i--
		dAtA[i] = 0x22
	}
	if m.CrmDetails != nil {
		{
			size, err := m.CrmDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SignupTypeInternalSso) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupTypeInternalSso) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignupTypeInternalSso) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZipCode) > 0 {
		i -= len(m.ZipCode)
		copy(dAtA[i:], m.ZipCode)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.ZipCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StateCode) > 0 {
		i -= len(m.StateCode)
		copy(dAtA[i:], m.StateCode)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.StateCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.County) > 0 {
		i -= len(m.County)
		copy(dAtA[i:], m.County)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.County)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address2) > 0 {
		i -= len(m.Address2)
		copy(dAtA[i:], m.Address2)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Address2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address1) > 0 {
		i -= len(m.Address1)
		copy(dAtA[i:], m.Address1)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.Address1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintTypesV2(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompanyMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	if m.MailingAddress != nil {
		l = m.MailingAddress.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *InternalMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.F5XcInstanceName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.KcInstanceName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *UserMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *AccountMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.TosVersion)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	if m.TosAcceptedAt != nil {
		l = m.TosAcceptedAt.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *BillingMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	if m.BillingAddress != nil {
		l = m.BillingAddress.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.PaymentProviderToken)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	if m.TaxExemption != 0 {
		n += 1 + sovTypesV2(uint64(m.TaxExemption))
	}
	if m.InfraprotectInfo != nil {
		l = m.InfraprotectInfo.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *SignupTypePublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignupTypeInternalSre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.F5XcInstanceName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.KcInstanceName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	if m.CrmDetails != nil {
		l = m.CrmDetails.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	if m.IsDemoTenant {
		n += 2
	}
	return n
}

func (m *SignupTypeInternalScaling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SignupTypeMarketplace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrmDetails != nil {
		l = m.CrmDetails.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *SignupTypePlanTransition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSsoEnabled {
		n += 2
	}
	return n
}

func (m *SignupTypeMsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrmDetails != nil {
		l = m.CrmDetails.Size()
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.ChildTenantObjName)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func (m *SignupTypeInternalSso) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.Address1)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.Address2)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.County)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.StateCode)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovTypesV2(uint64(l))
	}
	return n
}

func sovTypesV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesV2(x uint64) (n int) {
	return sovTypesV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CompanyMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompanyMeta{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MailingAddress:` + strings.Replace(this.MailingAddress.String(), "ContactMeta", "ContactMeta", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternalMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InternalMeta{`,
		`F5XcInstanceName:` + fmt.Sprintf("%v", this.F5XcInstanceName) + `,`,
		`KcInstanceName:` + fmt.Sprintf("%v", this.KcInstanceName) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserMeta{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`ContactNumber:` + fmt.Sprintf("%v", this.ContactNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountMeta{`,
		`Locale:` + fmt.Sprintf("%v", this.Locale) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`TosVersion:` + fmt.Sprintf("%v", this.TosVersion) + `,`,
		`TosAcceptedAt:` + strings.Replace(fmt.Sprintf("%v", this.TosAcceptedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BillingMeta) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BillingMeta{`,
		`PlanName:` + fmt.Sprintf("%v", this.PlanName) + `,`,
		`BillingAddress:` + strings.Replace(this.BillingAddress.String(), "ContactMeta", "ContactMeta", 1) + `,`,
		`Currency:` + fmt.Sprintf("%v", this.Currency) + `,`,
		`PaymentProviderToken:` + fmt.Sprintf("%v", this.PaymentProviderToken) + `,`,
		`TaxExemption:` + fmt.Sprintf("%v", this.TaxExemption) + `,`,
		`InfraprotectInfo:` + strings.Replace(fmt.Sprintf("%v", this.InfraprotectInfo), "GlobalSpecType", "infraprotect_information.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypePublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypePublic{`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypeInternalSre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypeInternalSre{`,
		`F5XcInstanceName:` + fmt.Sprintf("%v", this.F5XcInstanceName) + `,`,
		`KcInstanceName:` + fmt.Sprintf("%v", this.KcInstanceName) + `,`,
		`CrmDetails:` + strings.Replace(fmt.Sprintf("%v", this.CrmDetails), "CRMInfo", "schema.CRMInfo", 1) + `,`,
		`IsDemoTenant:` + fmt.Sprintf("%v", this.IsDemoTenant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypeInternalScaling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypeInternalScaling{`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypeMarketplace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypeMarketplace{`,
		`CrmDetails:` + strings.Replace(fmt.Sprintf("%v", this.CrmDetails), "CRMInfo", "schema.CRMInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypePlanTransition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypePlanTransition{`,
		`IsSsoEnabled:` + fmt.Sprintf("%v", this.IsSsoEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypeMsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypeMsp{`,
		`CrmDetails:` + strings.Replace(fmt.Sprintf("%v", this.CrmDetails), "CRMInfo", "schema.CRMInfo", 1) + `,`,
		`ChildTenantObjName:` + fmt.Sprintf("%v", this.ChildTenantObjName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupTypeInternalSso) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupTypeInternalSso{`,
		`}`,
	}, "")
	return s
}
func (this *ContactMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContactMeta{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Address1:` + fmt.Sprintf("%v", this.Address1) + `,`,
		`Address2:` + fmt.Sprintf("%v", this.Address2) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`County:` + fmt.Sprintf("%v", this.County) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`StateCode:` + fmt.Sprintf("%v", this.StateCode) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`ZipCode:` + fmt.Sprintf("%v", this.ZipCode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypesV2(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CompanyMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailingAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MailingAddress == nil {
				m.MailingAddress = &ContactMeta{}
			}
			if err := m.MailingAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F5XcInstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KcInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KcInstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TosVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TosVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TosAcceptedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TosAcceptedAt == nil {
				m.TosAcceptedAt = &types.Timestamp{}
			}
			if err := m.TosAcceptedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingAddress == nil {
				m.BillingAddress = &ContactMeta{}
			}
			if err := m.BillingAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentProviderToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentProviderToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxExemption", wireType)
			}
			m.TaxExemption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaxExemption |= schema.TaxExemptionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraprotectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfraprotectInfo == nil {
				m.InfraprotectInfo = &infraprotect_information.GlobalSpecType{}
			}
			if err := m.InfraprotectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypePublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypePublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypePublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypeInternalSre) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypeInternalSre: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypeInternalSre: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F5XcInstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KcInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KcInstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrmDetails == nil {
				m.CrmDetails = &schema.CRMInfo{}
			}
			if err := m.CrmDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDemoTenant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDemoTenant = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypeInternalScaling) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypeInternalScaling: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypeInternalScaling: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypeMarketplace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypeMarketplace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypeMarketplace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrmDetails == nil {
				m.CrmDetails = &schema.CRMInfo{}
			}
			if err := m.CrmDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypePlanTransition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypePlanTransition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypePlanTransition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSsoEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSsoEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypeMsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypeMsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypeMsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrmDetails == nil {
				m.CrmDetails = &schema.CRMInfo{}
			}
			if err := m.CrmDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildTenantObjName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildTenantObjName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupTypeInternalSso) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupTypeInternalSso: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupTypeInternalSso: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field County", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.County = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesV2 = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package signup

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.signup.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.signup.Object"] = ObjectValidator()
	vr["ves.io.schema.signup.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.signup.CreateV2Request"] = CreateV2RequestValidator()
	vr["ves.io.schema.signup.CreateV2Response"] = CreateV2ResponseValidator()

	vr["ves.io.schema.signup.CityItem"] = CityItemValidator()
	vr["ves.io.schema.signup.CountryItem"] = CountryItemValidator()
	vr["ves.io.schema.signup.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.signup.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.signup.ListCitiesRequest"] = ListCitiesRequestValidator()
	vr["ves.io.schema.signup.ListCitiesResponse"] = ListCitiesResponseValidator()
	vr["ves.io.schema.signup.ListCountriesRequest"] = ListCountriesRequestValidator()
	vr["ves.io.schema.signup.ListCountriesResponse"] = ListCountriesResponseValidator()
	vr["ves.io.schema.signup.ListStatesRequest"] = ListStatesRequestValidator()
	vr["ves.io.schema.signup.ListStatesResponse"] = ListStatesResponseValidator()
	vr["ves.io.schema.signup.SendPasswordEmailRequest"] = SendPasswordEmailRequestValidator()
	vr["ves.io.schema.signup.SendPasswordEmailResponse"] = SendPasswordEmailResponseValidator()
	vr["ves.io.schema.signup.StateItem"] = StateItemValidator()
	vr["ves.io.schema.signup.ValidateContactRequest"] = ValidateContactRequestValidator()
	vr["ves.io.schema.signup.ValidateContactResponse"] = ValidateContactResponseValidator()
	vr["ves.io.schema.signup.ValidateRegistrationRequest"] = ValidateRegistrationRequestValidator()
	vr["ves.io.schema.signup.ValidateRegistrationResponse"] = ValidateRegistrationResponseValidator()
	vr["ves.io.schema.signup.ValidationErrorField"] = ValidationErrorFieldValidator()

	vr["ves.io.schema.signup.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.signup.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.signup.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.signup.ReplaceSpecType"] = ReplaceSpecTypeValidator()

	vr["ves.io.schema.signup.AccountMeta"] = AccountMetaValidator()
	vr["ves.io.schema.signup.BillingMeta"] = BillingMetaValidator()
	vr["ves.io.schema.signup.CompanyMeta"] = CompanyMetaValidator()
	vr["ves.io.schema.signup.ContactMeta"] = ContactMetaValidator()
	vr["ves.io.schema.signup.InternalMeta"] = InternalMetaValidator()
	vr["ves.io.schema.signup.SignupTypeInternalScaling"] = SignupTypeInternalScalingValidator()
	vr["ves.io.schema.signup.SignupTypeInternalSre"] = SignupTypeInternalSreValidator()
	vr["ves.io.schema.signup.SignupTypeInternalSso"] = SignupTypeInternalSsoValidator()
	vr["ves.io.schema.signup.SignupTypeMarketplace"] = SignupTypeMarketplaceValidator()
	vr["ves.io.schema.signup.SignupTypeMsp"] = SignupTypeMspValidator()
	vr["ves.io.schema.signup.SignupTypePlanTransition"] = SignupTypePlanTransitionValidator()
	vr["ves.io.schema.signup.SignupTypePublic"] = SignupTypePublicValidator()
	vr["ves.io.schema.signup.UserMeta"] = UserMetaValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.signup.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.signup.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.signup.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.signup.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.signup.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.signup.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.signup.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.signup.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.signup.CustomPrivateAPIEywaprime.CreateV2"] = "ves.io.schema.signup.CreateV2Request"

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.signup.CustomPrivateAPIEywaprime.RestrictedCreateV2"] = "ves.io.schema.signup.CreateV2Request"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.signup.CustomAPI"] = "web"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	customCSR = mdr.PvtCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.signup.Object"] = CustomPrivateAPIEywaprimeSwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.signup.CustomPrivateAPIEywaprime"] = NewCustomPrivateAPIEywaprimeGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.signup.CustomPrivateAPIEywaprime"] = NewCustomPrivateAPIEywaprimeRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.signup.CustomPrivateAPIEywaprime"] = RegisterCustomPrivateAPIEywaprimeServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.signup.CustomPrivateAPIEywaprime"] = RegisterGwCustomPrivateAPIEywaprimeHandler
		customCSR.ServerRegistry["ves.io.schema.signup.CustomPrivateAPIEywaprime"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomPrivateAPIEywaprimeServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.signup.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.signup.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.signup.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.signup.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.signup.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.signup.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package terraform_parameters

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GCPInstanceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPInstanceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPInstanceType) DeepCopy() *GCPInstanceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPInstanceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPInstanceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPInstanceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPInstanceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPInstanceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPInstanceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPInstanceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPInstanceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["image_id"]; exists {

		vOpts := append(opts, db.WithValidateField("image_id"))
		if err := fv(ctx, m.GetImageId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["master_node_count"]; exists {

		vOpts := append(opts, db.WithValidateField("master_node_count"))
		if err := fv(ctx, m.GetMasterNodeCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_subnet_id"]; exists {

		vOpts := append(opts, db.WithValidateField("private_subnet_id"))
		if err := fv(ctx, m.GetPrivateSubnetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_subnet_id"]; exists {

		vOpts := append(opts, db.WithValidateField("public_subnet_id"))
		if err := fv(ctx, m.GetPublicSubnetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volt_node_id"]; exists {

		vOpts := append(opts, db.WithValidateField("volt_node_id"))
		if err := fv(ctx, m.GetVoltNodeId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volt_region_id"]; exists {

		vOpts := append(opts, db.WithValidateField("volt_region_id"))
		if err := fv(ctx, m.GetVoltRegionId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_node_count"]; exists {

		vOpts := append(opts, db.WithValidateField("worker_node_count"))
		if err := fv(ctx, m.GetWorkerNodeCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["zones"]; exists {

		vOpts := append(opts, db.WithValidateField("zones"))
		for idx, item := range m.GetZones() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPInstanceTypeValidator = func() *ValidateGCPInstanceType {
	v := &ValidateGCPInstanceType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["public_subnet_id"] = GCPSubnetChoiceValidator().Validate

	v.FldValidators["private_subnet_id"] = GCPSubnetChoiceValidator().Validate

	return v
}()

func GCPInstanceTypeValidator() db.Validator {
	return DefaultGCPInstanceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPInterconnectType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPInterconnectType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPInterconnectType) DeepCopy() *GCPInterconnectType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPInterconnectType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPInterconnectType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPInterconnectType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPInterconnectTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPInterconnectType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPInterconnectType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPInterconnectType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPInterconnectType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["adn_dns_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("adn_dns_ip"))
		if err := fv(ctx, m.GetAdnDnsIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_network_name"]; exists {

		vOpts := append(opts, db.WithValidateField("private_network_name"))
		if err := fv(ctx, m.GetPrivateNetworkName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPInterconnectTypeValidator = func() *ValidateGCPInterconnectType {
	v := &ValidateGCPInterconnectType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GCPInterconnectTypeValidator() db.Validator {
	return DefaultGCPInterconnectTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPSubnetChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPSubnetChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPSubnetChoice) DeepCopy() *GCPSubnetChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPSubnetChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPSubnetChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPSubnetChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPSubnetChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateGCPSubnetChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPSubnetChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPSubnetChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPSubnetChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["existing_subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("existing_subnet"))
		if err := fv(ctx, m.GetExistingSubnet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_type"]; exists {

		vOpts := append(opts, db.WithValidateField("interface_type"))
		if err := fv(ctx, m.GetInterfaceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_param"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_param"))
		if err := fv(ctx, m.GetSubnetParam(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPSubnetChoiceValidator = func() *ValidateGCPSubnetChoice {
	v := &ValidateGCPSubnetChoice{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["subnet_param"] = GCPSubnetParamTypeValidator().Validate

	v.FldValidators["existing_subnet"] = ves_io_schema_views.GCPSubnetTypeValidator().Validate

	return v
}()

func GCPSubnetChoiceValidator() db.Validator {
	return DefaultGCPSubnetChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPSubnetParamType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPSubnetParamType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPSubnetParamType) DeepCopy() *GCPSubnetParamType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPSubnetParamType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPSubnetParamType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPSubnetParamType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPSubnetParamTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPSubnetParamType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPSubnetParamType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPSubnetParamType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPSubnetParamType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_name"]; exists {

		vOpts := append(opts, db.WithValidateField("network_name"))
		if err := fv(ctx, m.GetNetworkName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet"))
		if err := fv(ctx, m.GetSubnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPSubnetParamTypeValidator = func() *ValidateGCPSubnetParamType {
	v := &ValidateGCPSubnetParamType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["subnet"] = ves_io_schema_views.GCPSubnetParamsTypeValidator().Validate

	return v
}()

func GCPSubnetParamTypeValidator() db.Validator {
	return DefaultGCPSubnetParamTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVPCNetworkChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVPCNetworkChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPVPCNetworkChoice) DeepCopy() *GCPVPCNetworkChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVPCNetworkChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVPCNetworkChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVPCNetworkChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVPCNetworkChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateGCPVPCNetworkChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVPCNetworkChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVPCNetworkChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVPCNetworkChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["existing_network"]; exists {

		vOpts := append(opts, db.WithValidateField("existing_network"))
		if err := fv(ctx, m.GetExistingNetwork(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_type"]; exists {

		vOpts := append(opts, db.WithValidateField("interface_type"))
		if err := fv(ctx, m.GetInterfaceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_param"]; exists {

		vOpts := append(opts, db.WithValidateField("network_param"))
		if err := fv(ctx, m.GetNetworkParam(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVPCNetworkChoiceValidator = func() *ValidateGCPVPCNetworkChoice {
	v := &ValidateGCPVPCNetworkChoice{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["network_param"] = ves_io_schema_views.GCPVPCNetworkParamsTypeValidator().Validate

	v.FldValidators["existing_network"] = ves_io_schema_views.GCPVPCNetworkTypeValidator().Validate

	return v
}()

func GCPVPCNetworkChoiceValidator() db.Validator {
	return DefaultGCPVPCNetworkChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPVpcSiteType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPVpcSiteType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPVpcSiteType) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *GCPVpcSiteType) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *GCPVpcSiteType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	m.AdminPasswordBlindfolded = ""

	return nil
}

func (m *GCPVpcSiteType) DeepCopy() *GCPVpcSiteType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPVpcSiteType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPVpcSiteType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPVpcSiteType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPVpcSiteTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGCPVpcSiteType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPVpcSiteType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPVpcSiteType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPVpcSiteType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["admin_password"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_password"))
		if err := fv(ctx, m.GetAdminPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["admin_password_blindfolded"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_password_blindfolded"))
		if err := fv(ctx, m.GetAdminPasswordBlindfolded(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["admin_password_clear_b64"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_password_clear_b64"))
		if err := fv(ctx, m.GetAdminPasswordClearB64(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("certified_hw"))
		if err := fv(ctx, m.GetCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gateway_type"]; exists {

		vOpts := append(opts, db.WithValidateField("gateway_type"))
		if err := fv(ctx, m.GetGatewayType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_name"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_name"))
		if err := fv(ctx, m.GetGcpName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_region"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_region"))
		if err := fv(ctx, m.GetGcpRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_vpc_network_inside"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_vpc_network_inside"))
		if err := fv(ctx, m.GetGcpVpcNetworkInside(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_vpc_network_outside"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_vpc_network_outside"))
		if err := fv(ctx, m.GetGcpVpcNetworkOutside(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interconnect"]; exists {

		vOpts := append(opts, db.WithValidateField("interconnect"))
		if err := fv(ctx, m.GetInterconnect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["manual_routing"]; exists {

		vOpts := append(opts, db.WithValidateField("manual_routing"))
		if err := fv(ctx, m.GetManualRouting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["multi_node_non_std_az"]; exists {

		vOpts := append(opts, db.WithValidateField("multi_node_non_std_az"))
		if err := fv(ctx, m.GetMultiNodeNonStdAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_name"]; exists {

		vOpts := append(opts, db.WithValidateField("site_name"))
		if err := fv(ctx, m.GetSiteName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_inside"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_inside"))
		if err := fv(ctx, m.GetSubnetInside(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_outside"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_outside"))
		if err := fv(ctx, m.GetSubnetOutside(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPVpcSiteTypeValidator = func() *ValidateGCPVpcSiteType {
	v := &ValidateGCPVpcSiteType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["gcp_vpc_network_outside"] = GCPVPCNetworkChoiceValidator().Validate

	v.FldValidators["subnet_outside"] = GCPSubnetChoiceValidator().Validate

	v.FldValidators["node"] = GCPInstanceTypeValidator().Validate

	v.FldValidators["subnet_inside"] = GCPSubnetChoiceValidator().Validate

	v.FldValidators["gcp_vpc_network_inside"] = GCPVPCNetworkChoiceValidator().Validate

	return v
}()

func GCPVpcSiteTypeValidator() db.Validator {
	return DefaultGCPVpcSiteTypeValidator
}

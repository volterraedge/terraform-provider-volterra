//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package terraform_parameters

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCGet(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Get(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGetStatus(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.GetRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetStatus(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["GetStatus"] = ccl.doRPCGetStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCGet(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("view_kind", fmt.Sprintf("%v", req.ViewKind))
		q.Add("view_name", fmt.Sprintf("%v", req.ViewName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.views.terraform_parameters.GetResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGetStatus(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.GetRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("view_kind", fmt.Sprintf("%v", req.ViewKind))
		q.Add("view_name", fmt.Sprintf("%v", req.ViewName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetStatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.views.terraform_parameters.GetStatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["GetStatus"] = ccl.doRPCGetStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type CustomAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomAPIInprocClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.terraform_parameters.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *GetResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Get' operation on 'terraform_parameters'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.views.terraform_parameters.CustomAPI.Get"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Get(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.GetResponse", rsp)...)

	return rsp, nil
}
func (c *CustomAPIInprocClient) GetStatus(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.terraform_parameters.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *GetStatusResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.GetRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetStatus' operation on 'terraform_parameters'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetStatus(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.GetStatusResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &CustomAPIInprocClient{svc: svc}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "View Terraform Parameters",
        "description": "View Terraform Parameters is set of parameters that are used by terraform scripts \nto instantiate view objects external to volterra",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/force-delete": {
            "post": {
                "summary": "Get Status of Terraform for a View",
                "description": "returned from list of terraform parameter status objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersForceDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersForceDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomActionAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomActionAPI-ForceDelete"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete"
            },
            "x-displayname": "View Terraform Parameters Action",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomActionAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/run": {
            "post": {
                "summary": "Get Terraform Parameters for a View",
                "description": "returned from list of terraform parameter objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomActionAPI.Run",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersRunResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersRunRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomActionAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomActionAPI-Run"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomActionAPI.Run"
            },
            "x-displayname": "View Terraform Parameters Action",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomActionAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}": {
            "get": {
                "summary": "Get Terraform Parameters for a View",
                "description": "returned from list of terraform parameter objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomAPI.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomAPI-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomAPI.Get"
            },
            "x-displayname": "View Terraform Parameters",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}/status": {
            "get": {
                "summary": "Get Status of Terraform for a View",
                "description": "returned from list of terraform parameter status objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersGetStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomAPI-GetStatus"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus"
            },
            "x-displayname": "View Terraform Parameters",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "terraform_parametersApplyStageState": {
            "type": "string",
            "description": "Terraform state during apply stage",
            "title": "Apply Stage State",
            "enum": [
                "APPLIED",
                "APPLY_ERRORED",
                "APPLY_INIT_ERRORED",
                "APPLYING",
                "APPLY_PLANNING",
                "APPLY_PLAN_ERRORED"
            ],
            "default": "APPLIED",
            "x-displayname": "Apply Stage State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.ApplyStageState"
        },
        "terraform_parametersApplyStatus": {
            "type": "object",
            "x-ves-oneof-field-state": "[\"apply_state\",\"destroy_state\",\"infra_state\"]",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.ApplyStatus",
            "properties": {
                "apply_state": {
                    "description": "Exclusive with [destroy_state infra_state]\nx-displayName: \"Apply State\"\nTerraform state during apply stage",
                    "title": "apply_state",
                    "$ref": "#/definitions/terraform_parametersApplyStageState"
                },
                "destroy_state": {
                    "description": "Exclusive with [apply_state infra_state]\nx-displayName: \"Destroy State\"\nTerraform state during destroy stage",
                    "title": "destroy_state",
                    "$ref": "#/definitions/terraform_parametersDestroyStageState"
                },
                "error_output": {
                    "type": "string",
                    "description": " Error output of terraform run\n\nExample: - \"value\"-",
                    "title": "error_output",
                    "x-displayname": "Error Output",
                    "x-ves-example": "value"
                },
                "infra_state": {
                    "description": "Exclusive with [apply_state destroy_state]\nx-displayName: \"Infra State\"\nInfrastructure state of the view provisioning",
                    "title": "infra_state",
                    "$ref": "#/definitions/terraform_parametersInfraState"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this status was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "tf_output": {
                    "type": "string",
                    "description": " The value of an \"output\" variable from the terraform state file.\n\nExample: - \"value\"-",
                    "title": "tf_output",
                    "x-displayname": "Terraform Output",
                    "x-ves-example": "value"
                },
                "tf_stdout": {
                    "type": "string",
                    "description": " The stdout of terraform apply command.",
                    "title": "tf_stdout",
                    "x-displayname": "Terraform Standard Output"
                }
            }
        },
        "terraform_parametersDestroyStageState": {
            "type": "string",
            "description": "Terraform state during destroy stage",
            "title": "Destroy Stage State",
            "enum": [
                "DESTROYED",
                "DESTROY_ERRORED",
                "DESTROYING"
            ],
            "default": "DESTROYED",
            "x-displayname": "Destroy Stage State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.DestroyStageState"
        },
        "terraform_parametersForceDeleteRequest": {
            "type": "object",
            "description": "Force delete view request",
            "title": "ForceDeleteRequest",
            "x-displayname": "Force delete view request",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.ForceDeleteRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the label to be retrieved\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "view_kind": {
                    "type": "string",
                    "description": " Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site\n\nExample: - \"value\"-",
                    "title": "Kind of View",
                    "x-displayname": "Kind of View",
                    "x-ves-example": "value"
                },
                "view_name": {
                    "type": "string",
                    "description": " Name of the view for which terraform parameters are requested\n\nExample: - \"value\"-",
                    "title": "Name of view",
                    "x-displayname": "Name of view",
                    "x-ves-example": "value"
                }
            }
        },
        "terraform_parametersForceDeleteResponse": {
            "type": "object",
            "description": "Force delete view response",
            "title": "ForceDeleteResponse",
            "x-displayname": "Force delete view response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.ForceDeleteResponse"
        },
        "terraform_parametersGetResponse": {
            "type": "object",
            "description": "Response for Get API",
            "title": "GetResponse",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.GetResponse",
            "properties": {
                "terraform_parameters": {
                    "description": " Terraform Parameters details",
                    "title": "Terraform Parameters",
                    "$ref": "#/definitions/viewsterraform_parametersGlobalSpecType",
                    "x-displayname": "Terraform Parameters"
                }
            }
        },
        "terraform_parametersGetStatusResponse": {
            "type": "object",
            "description": "Response for GetStatus API",
            "title": "GetStatusResponse",
            "x-displayname": "Get Status Response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.GetStatusResponse",
            "properties": {
                "status": {
                    "description": " Status Object of Terraform for a view",
                    "title": "Status Object",
                    "$ref": "#/definitions/terraform_parametersStatusObject",
                    "x-displayname": "Terraform Status Object"
                }
            }
        },
        "terraform_parametersInfraState": {
            "type": "string",
            "description": "Infrastructure state of the view provisioning",
            "title": "Infra State",
            "enum": [
                "PROVISIONED",
                "TIMED_OUT",
                "ERRORED",
                "PROVISIONING"
            ],
            "default": "PROVISIONED",
            "x-displayname": "Infra State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.InfraState"
        },
        "terraform_parametersPlanStageState": {
            "type": "string",
            "description": "Terraform state during plan stage",
            "title": "Plan Stage State",
            "enum": [
                "PLANNING",
                "PLAN_ERRORED",
                "NO_CHANGES",
                "HAS_CHANGES",
                "DISCARDED",
                "PLAN_INIT_ERRORED"
            ],
            "default": "PLANNING",
            "x-displayname": "Plan Stage State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.PlanStageState"
        },
        "terraform_parametersPlanStatus": {
            "type": "object",
            "x-ves-oneof-field-state": "[\"infra_state\",\"plan_state\"]",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.PlanStatus",
            "properties": {
                "error_output": {
                    "type": "string",
                    "description": " Error output of terraform run\n\nExample: - \"value\"-",
                    "title": "error_output",
                    "x-displayname": "Error Output",
                    "x-ves-example": "value"
                },
                "infra_state": {
                    "description": "Exclusive with [plan_state]\nx-displayName: \"Infra State\"\nInfrastructure state of the view provisioning",
                    "title": "infra_state",
                    "$ref": "#/definitions/terraform_parametersInfraState"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this status was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "plan_state": {
                    "description": "Exclusive with [infra_state]\nx-displayName: \"Plan State\"\nTerraform state during plan stage",
                    "title": "plan_state",
                    "$ref": "#/definitions/terraform_parametersPlanStageState"
                },
                "tf_plan_output": {
                    "type": "string",
                    "description": " Terraform \"plan\" command output. Terraform performs a refresh, unless explicitly disabled, and then\n determines what actions are necessary to achieve the desired state specified in the configuration files.\n\nExample: - \"value\"-",
                    "title": "tf_plan_output",
                    "x-displayname": "Terraform Plan Output",
                    "x-ves-example": "value"
                }
            }
        },
        "terraform_parametersRunAction": {
            "type": "string",
            "description": "Terraform action to be performed for a given view e.g. plan, apply\n\nApply action used to apply the changes required to reach the desired state of the configuration\nPlan action is a convenient way to check whether the execution plan for a set of changes matches your expectations without making any changes to real resources or to the state\nDESTROY action is used to destroy the Terraform-managed infrastructure",
            "title": "Terraform Action",
            "enum": [
                "APPLY",
                "PLAN",
                "DESTROY"
            ],
            "default": "APPLY",
            "x-displayname": "Terraform action to be performed",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.RunAction"
        },
        "terraform_parametersRunRequest": {
            "type": "object",
            "description": "perform terraform actions for a given view. Supported actions are apply and plan.",
            "title": "Run Terraform Action for view",
            "x-displayname": "Run Terraform Action for view",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.RunRequest",
            "properties": {
                "action": {
                    "description": " Terraform action to be performed for a given view e.g. plan, apply",
                    "title": "Terraform action to be performed",
                    "$ref": "#/definitions/terraform_parametersRunAction",
                    "x-displayname": "Terraform action to be performed"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the label to be retrieved\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "view_kind": {
                    "type": "string",
                    "description": " Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site\n\nExample: - \"value\"-",
                    "title": "Kind of View",
                    "x-displayname": "Kind of View",
                    "x-ves-example": "value"
                },
                "view_name": {
                    "type": "string",
                    "description": " Name of the view for which terraform parameters are requested\n\nExample: - \"value\"-",
                    "title": "Name of view",
                    "x-displayname": "Name of view",
                    "x-ves-example": "value"
                }
            }
        },
        "terraform_parametersRunResponse": {
            "type": "object",
            "description": "Response for Run API",
            "title": "RunResponse",
            "x-displayname": "Run Response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.RunResponse"
        },
        "terraform_parametersStatusObject": {
            "type": "object",
            "description": "view terraform parameters status object",
            "title": "Status Object",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.StatusObject",
            "properties": {
                "apply_status": {
                    "description": " Status of Apply or Destroy action",
                    "title": "Apply Status",
                    "$ref": "#/definitions/terraform_parametersApplyStatus",
                    "x-displayname": "Apply Status"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " View terraform parameters object reference for which this status object is generated",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "plan_status": {
                    "description": " Status of Plan action",
                    "title": "Plan Status",
                    "$ref": "#/definitions/terraform_parametersPlanStatus",
                    "x-displayname": "Plan Status"
                }
            }
        },
        "viewsterraform_parametersGlobalSpecType": {
            "type": "object",
            "description": "Shape of the view terraform parameters specification",
            "title": "GlobalSpecType",
            "x-displayname": "View Terraform Parameters Specification",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.GlobalSpecType",
            "properties": {
                "tf_objects": {
                    "type": "array",
                    "description": " Data specific to child objects",
                    "title": "child_objects",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    },
                    "x-displayname": "Child Objects"
                }
            }
        }
    },
    "x-displayname": "View Terraform Parameters",
    "x-ves-proto-file": "ves.io/schema/views/terraform_parameters/public_customapi.proto"
}`

// Create CustomActionAPI GRPC Client satisfying server.CustomClient
type CustomActionAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomActionAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomActionAPIGrpcClient) doRPCForceDelete(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ForceDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.ForceDeleteRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ForceDelete(ctx, req, opts...)
	return rsp, err
}

func (c *CustomActionAPIGrpcClient) doRPCRun(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &RunRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.RunRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Run(ctx, req, opts...)
	return rsp, err
}

func (c *CustomActionAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomActionAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomActionAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomActionAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["ForceDelete"] = ccl.doRPCForceDelete

	rpcFns["Run"] = ccl.doRPCRun

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomActionAPI REST Client satisfying server.CustomClient
type CustomActionAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomActionAPIRestClient) doRPCForceDelete(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ForceDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.ForceDeleteRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("view_kind", fmt.Sprintf("%v", req.ViewKind))
		q.Add("view_name", fmt.Sprintf("%v", req.ViewName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ForceDeleteResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.views.terraform_parameters.ForceDeleteResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomActionAPIRestClient) doRPCRun(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &RunRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.terraform_parameters.RunRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("action", fmt.Sprintf("%v", req.Action))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("view_kind", fmt.Sprintf("%v", req.ViewKind))
		q.Add("view_name", fmt.Sprintf("%v", req.ViewName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &RunResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.views.terraform_parameters.RunResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomActionAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomActionAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomActionAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["ForceDelete"] = ccl.doRPCForceDelete

	rpcFns["Run"] = ccl.doRPCRun

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomActionAPIInprocClient

// INPROC Client (satisfying CustomActionAPIClient interface)
type CustomActionAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomActionAPIInprocClient) ForceDelete(ctx context.Context, in *ForceDeleteRequest, opts ...grpc.CallOption) (*ForceDeleteResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.terraform_parameters.CustomActionAPI")
	cah, ok := ah.(CustomActionAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomActionAPISrv", ah)
	}

	var (
		rsp *ForceDeleteResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.ForceDeleteRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomActionAPI.ForceDelete' operation on 'terraform_parameters'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ForceDelete(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.ForceDeleteResponse", rsp)...)

	return rsp, nil
}
func (c *CustomActionAPIInprocClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.terraform_parameters.CustomActionAPI")
	cah, ok := ah.(CustomActionAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomActionAPISrv", ah)
	}

	var (
		rsp *RunResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.RunRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomActionAPI.Run' operation on 'terraform_parameters'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.views.terraform_parameters.CustomActionAPI.Run"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Run(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.views.terraform_parameters.RunResponse", rsp)...)

	return rsp, nil
}

func NewCustomActionAPIInprocClient(svc svcfw.Service) CustomActionAPIClient {
	return &CustomActionAPIInprocClient{svc: svc}
}

// RegisterGwCustomActionAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomActionAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomActionAPIHandlerClient(ctx, mux, NewCustomActionAPIInprocClient(s))
}

var CustomActionAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "View Terraform Parameters",
        "description": "View Terraform Parameters is set of parameters that are used by terraform scripts \nto instantiate view objects external to volterra",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/force-delete": {
            "post": {
                "summary": "Get Status of Terraform for a View",
                "description": "returned from list of terraform parameter status objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersForceDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersForceDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomActionAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomActionAPI-ForceDelete"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete"
            },
            "x-displayname": "View Terraform Parameters Action",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomActionAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/run": {
            "post": {
                "summary": "Get Terraform Parameters for a View",
                "description": "returned from list of terraform parameter objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomActionAPI.Run",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersRunResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersRunRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomActionAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomActionAPI-Run"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomActionAPI.Run"
            },
            "x-displayname": "View Terraform Parameters Action",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomActionAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}": {
            "get": {
                "summary": "Get Terraform Parameters for a View",
                "description": "returned from list of terraform parameter objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomAPI.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomAPI-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomAPI.Get"
            },
            "x-displayname": "View Terraform Parameters",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}/status": {
            "get": {
                "summary": "Get Status of Terraform for a View",
                "description": "returned from list of terraform parameter status objects for a given view.",
                "operationId": "ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/terraform_parametersGetStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace for the label to be retrieved",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "view_kind",
                        "description": "Kind of View\n\nx-example: \"value\"\nKind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Kind of View"
                    },
                    {
                        "name": "view_name",
                        "description": "Name of view\n\nx-example: \"value\"\nName of the view for which terraform parameters are requested",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of view"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-terraform_parameters-CustomAPI-GetStatus"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus"
            },
            "x-displayname": "View Terraform Parameters",
            "x-ves-proto-service": "ves.io.schema.views.terraform_parameters.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "terraform_parametersApplyStageState": {
            "type": "string",
            "description": "Terraform state during apply stage",
            "title": "Apply Stage State",
            "enum": [
                "APPLIED",
                "APPLY_ERRORED",
                "APPLY_INIT_ERRORED",
                "APPLYING",
                "APPLY_PLANNING",
                "APPLY_PLAN_ERRORED"
            ],
            "default": "APPLIED",
            "x-displayname": "Apply Stage State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.ApplyStageState"
        },
        "terraform_parametersApplyStatus": {
            "type": "object",
            "x-ves-oneof-field-state": "[\"apply_state\",\"destroy_state\",\"infra_state\"]",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.ApplyStatus",
            "properties": {
                "apply_state": {
                    "description": "Exclusive with [destroy_state infra_state]\nx-displayName: \"Apply State\"\nTerraform state during apply stage",
                    "title": "apply_state",
                    "$ref": "#/definitions/terraform_parametersApplyStageState"
                },
                "destroy_state": {
                    "description": "Exclusive with [apply_state infra_state]\nx-displayName: \"Destroy State\"\nTerraform state during destroy stage",
                    "title": "destroy_state",
                    "$ref": "#/definitions/terraform_parametersDestroyStageState"
                },
                "error_output": {
                    "type": "string",
                    "description": " Error output of terraform run\n\nExample: - \"value\"-",
                    "title": "error_output",
                    "x-displayname": "Error Output",
                    "x-ves-example": "value"
                },
                "infra_state": {
                    "description": "Exclusive with [apply_state destroy_state]\nx-displayName: \"Infra State\"\nInfrastructure state of the view provisioning",
                    "title": "infra_state",
                    "$ref": "#/definitions/terraform_parametersInfraState"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this status was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "tf_output": {
                    "type": "string",
                    "description": " The value of an \"output\" variable from the terraform state file.\n\nExample: - \"value\"-",
                    "title": "tf_output",
                    "x-displayname": "Terraform Output",
                    "x-ves-example": "value"
                },
                "tf_stdout": {
                    "type": "string",
                    "description": " The stdout of terraform apply command.",
                    "title": "tf_stdout",
                    "x-displayname": "Terraform Standard Output"
                }
            }
        },
        "terraform_parametersDestroyStageState": {
            "type": "string",
            "description": "Terraform state during destroy stage",
            "title": "Destroy Stage State",
            "enum": [
                "DESTROYED",
                "DESTROY_ERRORED",
                "DESTROYING"
            ],
            "default": "DESTROYED",
            "x-displayname": "Destroy Stage State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.DestroyStageState"
        },
        "terraform_parametersForceDeleteRequest": {
            "type": "object",
            "description": "Force delete view request",
            "title": "ForceDeleteRequest",
            "x-displayname": "Force delete view request",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.ForceDeleteRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the label to be retrieved\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "view_kind": {
                    "type": "string",
                    "description": " Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site\n\nExample: - \"value\"-",
                    "title": "Kind of View",
                    "x-displayname": "Kind of View",
                    "x-ves-example": "value"
                },
                "view_name": {
                    "type": "string",
                    "description": " Name of the view for which terraform parameters are requested\n\nExample: - \"value\"-",
                    "title": "Name of view",
                    "x-displayname": "Name of view",
                    "x-ves-example": "value"
                }
            }
        },
        "terraform_parametersForceDeleteResponse": {
            "type": "object",
            "description": "Force delete view response",
            "title": "ForceDeleteResponse",
            "x-displayname": "Force delete view response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.ForceDeleteResponse"
        },
        "terraform_parametersGetResponse": {
            "type": "object",
            "description": "Response for Get API",
            "title": "GetResponse",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.GetResponse",
            "properties": {
                "terraform_parameters": {
                    "description": " Terraform Parameters details",
                    "title": "Terraform Parameters",
                    "$ref": "#/definitions/viewsterraform_parametersGlobalSpecType",
                    "x-displayname": "Terraform Parameters"
                }
            }
        },
        "terraform_parametersGetStatusResponse": {
            "type": "object",
            "description": "Response for GetStatus API",
            "title": "GetStatusResponse",
            "x-displayname": "Get Status Response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.GetStatusResponse",
            "properties": {
                "status": {
                    "description": " Status Object of Terraform for a view",
                    "title": "Status Object",
                    "$ref": "#/definitions/terraform_parametersStatusObject",
                    "x-displayname": "Terraform Status Object"
                }
            }
        },
        "terraform_parametersInfraState": {
            "type": "string",
            "description": "Infrastructure state of the view provisioning",
            "title": "Infra State",
            "enum": [
                "PROVISIONED",
                "TIMED_OUT",
                "ERRORED",
                "PROVISIONING"
            ],
            "default": "PROVISIONED",
            "x-displayname": "Infra State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.InfraState"
        },
        "terraform_parametersPlanStageState": {
            "type": "string",
            "description": "Terraform state during plan stage",
            "title": "Plan Stage State",
            "enum": [
                "PLANNING",
                "PLAN_ERRORED",
                "NO_CHANGES",
                "HAS_CHANGES",
                "DISCARDED",
                "PLAN_INIT_ERRORED"
            ],
            "default": "PLANNING",
            "x-displayname": "Plan Stage State",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.PlanStageState"
        },
        "terraform_parametersPlanStatus": {
            "type": "object",
            "x-ves-oneof-field-state": "[\"infra_state\",\"plan_state\"]",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.PlanStatus",
            "properties": {
                "error_output": {
                    "type": "string",
                    "description": " Error output of terraform run\n\nExample: - \"value\"-",
                    "title": "error_output",
                    "x-displayname": "Error Output",
                    "x-ves-example": "value"
                },
                "infra_state": {
                    "description": "Exclusive with [plan_state]\nx-displayName: \"Infra State\"\nInfrastructure state of the view provisioning",
                    "title": "infra_state",
                    "$ref": "#/definitions/terraform_parametersInfraState"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this status was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "plan_state": {
                    "description": "Exclusive with [infra_state]\nx-displayName: \"Plan State\"\nTerraform state during plan stage",
                    "title": "plan_state",
                    "$ref": "#/definitions/terraform_parametersPlanStageState"
                },
                "tf_plan_output": {
                    "type": "string",
                    "description": " Terraform \"plan\" command output. Terraform performs a refresh, unless explicitly disabled, and then\n determines what actions are necessary to achieve the desired state specified in the configuration files.\n\nExample: - \"value\"-",
                    "title": "tf_plan_output",
                    "x-displayname": "Terraform Plan Output",
                    "x-ves-example": "value"
                }
            }
        },
        "terraform_parametersRunAction": {
            "type": "string",
            "description": "Terraform action to be performed for a given view e.g. plan, apply\n\nApply action used to apply the changes required to reach the desired state of the configuration\nPlan action is a convenient way to check whether the execution plan for a set of changes matches your expectations without making any changes to real resources or to the state\nDESTROY action is used to destroy the Terraform-managed infrastructure",
            "title": "Terraform Action",
            "enum": [
                "APPLY",
                "PLAN",
                "DESTROY"
            ],
            "default": "APPLY",
            "x-displayname": "Terraform action to be performed",
            "x-ves-proto-enum": "ves.io.schema.views.terraform_parameters.RunAction"
        },
        "terraform_parametersRunRequest": {
            "type": "object",
            "description": "perform terraform actions for a given view. Supported actions are apply and plan.",
            "title": "Run Terraform Action for view",
            "x-displayname": "Run Terraform Action for view",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.RunRequest",
            "properties": {
                "action": {
                    "description": " Terraform action to be performed for a given view e.g. plan, apply",
                    "title": "Terraform action to be performed",
                    "$ref": "#/definitions/terraform_parametersRunAction",
                    "x-displayname": "Terraform action to be performed"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace for the label to be retrieved\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "view_kind": {
                    "type": "string",
                    "description": " Kind of view of which terraform parameters are requested e.g. aws_vpc_site, azure_vnet_site\n\nExample: - \"value\"-",
                    "title": "Kind of View",
                    "x-displayname": "Kind of View",
                    "x-ves-example": "value"
                },
                "view_name": {
                    "type": "string",
                    "description": " Name of the view for which terraform parameters are requested\n\nExample: - \"value\"-",
                    "title": "Name of view",
                    "x-displayname": "Name of view",
                    "x-ves-example": "value"
                }
            }
        },
        "terraform_parametersRunResponse": {
            "type": "object",
            "description": "Response for Run API",
            "title": "RunResponse",
            "x-displayname": "Run Response",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.RunResponse"
        },
        "terraform_parametersStatusObject": {
            "type": "object",
            "description": "view terraform parameters status object",
            "title": "Status Object",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.StatusObject",
            "properties": {
                "apply_status": {
                    "description": " Status of Apply or Destroy action",
                    "title": "Apply Status",
                    "$ref": "#/definitions/terraform_parametersApplyStatus",
                    "x-displayname": "Apply Status"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " View terraform parameters object reference for which this status object is generated",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "plan_status": {
                    "description": " Status of Plan action",
                    "title": "Plan Status",
                    "$ref": "#/definitions/terraform_parametersPlanStatus",
                    "x-displayname": "Plan Status"
                }
            }
        },
        "viewsterraform_parametersGlobalSpecType": {
            "type": "object",
            "description": "Shape of the view terraform parameters specification",
            "title": "GlobalSpecType",
            "x-displayname": "View Terraform Parameters Specification",
            "x-ves-proto-message": "ves.io.schema.views.terraform_parameters.GlobalSpecType",
            "properties": {
                "tf_objects": {
                    "type": "array",
                    "description": " Data specific to child objects",
                    "title": "child_objects",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    },
                    "x-displayname": "Child Objects"
                }
            }
        }
    },
    "x-displayname": "View Terraform Parameters",
    "x-ves-proto-file": "ves.io/schema/views/terraform_parameters/public_customapi.proto"
}`
